void sub_190EEB10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEB1F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_execution_stream_operation_reshape_operationE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z49e5rt_execution_stream_operation_reshape_operationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_execution_stream_operation_reshape_operationE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_execution_stream_operation_reshape_operationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEB25C()
{
  return &unk_1E2DC72B8;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x38uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = 0;
  *((_QWORD *)v15 + 6) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190EEB678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_190EEB72C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEB740(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DC72D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190EEB780(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC72D8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEB7A8(uint64_t a1)
{
  uint64_t *v1;
  const void *v3;
  uint64_t v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  size_t v12;
  __int128 *p_p;
  uint64_t v14;
  uint64_t v15;
  __int128 __p;
  unint64_t v18;
  void *__dst;
  __int128 v20;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      v4 = *v1;
      v5 = strlen(*(const char **)(a1 + 16));
      if (v5 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v6 = v5;
      if (v5 >= 0x17)
      {
        v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17)
          v8 = v5 | 7;
        v9 = v8 + 1;
        p_dst = (void **)operator new(v8 + 1);
        *(_QWORD *)&v20 = v6;
        *((_QWORD *)&v20 + 1) = v9 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v20) = v5;
        p_dst = &__dst;
        if (!v5)
        {
LABEL_11:
          *((_BYTE *)p_dst + v6) = 0;
          v10 = *(const char **)(a1 + 24);
          v11 = strlen(v10);
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v12 = v11;
          if (v11 >= 0x17)
          {
            v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v14 = v11 | 7;
            v15 = v14 + 1;
            p_p = (__int128 *)operator new(v14 + 1);
            *((_QWORD *)&__p + 1) = v12;
            v18 = v15 | 0x8000000000000000;
            *(_QWORD *)&__p = p_p;
          }
          else
          {
            HIBYTE(v18) = v11;
            p_p = &__p;
            if (!v11)
            {
LABEL_19:
              *((_BYTE *)p_p + v12) = 0;
              E5RT::ExecutionStreamOperation::SerializeInferenceFrameData(v4, (uint64_t)&__dst, (uint64_t)&__p, *(unsigned __int8 *)(a1 + 32));
              if (SHIBYTE(v18) < 0)
              {
                operator delete((void *)__p);
                if ((SHIBYTE(v20) & 0x80000000) == 0)
                  return 0;
              }
              else if ((SHIBYTE(v20) & 0x80000000) == 0)
              {
                return 0;
              }
              operator delete(__dst);
              return 0;
            }
          }
          memmove(p_p, v10, v12);
          goto LABEL_19;
        }
      }
      memmove(p_dst, v3, v6);
      goto LABEL_11;
    }
    __dst = operator new(0x30uLL);
    v20 = xmmword_191A6F7C0;
    strcpy((char *)__dst, "Invalid Function Argument: output_dir is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  }
  else
  {
    __dst = operator new(0x30uLL);
    v20 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  }
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190EEBA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEBA84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z62e5rt_execution_stream_operation_serialize_inference_frame_dataE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z62e5rt_execution_stream_operation_serialize_inference_frame_dataE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z62e5rt_execution_stream_operation_serialize_inference_frame_dataE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z62e5rt_execution_stream_operation_serialize_inference_frame_dataE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEBAF0()
{
  return &unk_1E2DC7338;
}

void sub_190EEBB00()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEBB14(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DC7358;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190EEBB54(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7358;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEBB7C(uint64_t a1)
{
  uint64_t *v1;
  const void *v3;
  uint64_t v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  size_t v12;
  __int128 *p_p;
  uint64_t v14;
  uint64_t v15;
  __int128 __p;
  unint64_t v18;
  void *__dst;
  __int128 v20;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      v4 = *v1;
      v5 = strlen(*(const char **)(a1 + 16));
      if (v5 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v6 = v5;
      if (v5 >= 0x17)
      {
        v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17)
          v8 = v5 | 7;
        v9 = v8 + 1;
        p_dst = (void **)operator new(v8 + 1);
        *(_QWORD *)&v20 = v6;
        *((_QWORD *)&v20 + 1) = v9 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v20) = v5;
        p_dst = &__dst;
        if (!v5)
        {
LABEL_11:
          *((_BYTE *)p_dst + v6) = 0;
          v10 = *(const char **)(a1 + 24);
          v11 = strlen(v10);
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v12 = v11;
          if (v11 >= 0x17)
          {
            v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v14 = v11 | 7;
            v15 = v14 + 1;
            p_p = (__int128 *)operator new(v14 + 1);
            *((_QWORD *)&__p + 1) = v12;
            v18 = v15 | 0x8000000000000000;
            *(_QWORD *)&__p = p_p;
          }
          else
          {
            HIBYTE(v18) = v11;
            p_p = &__p;
            if (!v11)
            {
LABEL_19:
              *((_BYTE *)p_p + v12) = 0;
              E5RT::ExecutionStreamOperation::SerializeInferenceFrameDataPerSegment(v4, (uint64_t)&__dst, (uint64_t)&__p);
              if (SHIBYTE(v18) < 0)
              {
                operator delete((void *)__p);
                if ((SHIBYTE(v20) & 0x80000000) == 0)
                  return 0;
              }
              else if ((SHIBYTE(v20) & 0x80000000) == 0)
              {
                return 0;
              }
              operator delete(__dst);
              return 0;
            }
          }
          memmove(p_p, v10, v12);
          goto LABEL_19;
        }
      }
      memmove(p_dst, v3, v6);
      goto LABEL_11;
    }
    __dst = operator new(0x30uLL);
    v20 = xmmword_191A6F7C0;
    strcpy((char *)__dst, "Invalid Function Argument: output_dir is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  }
  else
  {
    __dst = operator new(0x30uLL);
    v20 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  }
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190EEBE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEBE58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z74e5rt_execution_stream_operation_serialize_inference_frame_data_per_segmentE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z74e5rt_execution_stream_operation_serialize_inference_frame_data_per_segmentE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z74e5rt_execution_stream_operation_serialize_inference_frame_data_per_segmentE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z74e5rt_execution_stream_operation_serialize_inference_frame_data_per_segmentE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEBEC4()
{
  return &unk_1E2DC73B8;
}

uint64_t OUTLINED_FUNCTION_31()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void OUTLINED_FUNCTION_8(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void OUTLINED_FUNCTION_9()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void sub_190EEBF00(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_8(v1);
  while (v3);
  if (!v2)
  {
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_9();
  }
  OUTLINED_FUNCTION_2();
}

uint64_t *std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (!v4)
    return a1;
  if ((*(char *)(v4 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(v4 + 79) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_11:
    operator delete(*(void **)(v4 + 56));
    v5 = *(void **)(v4 + 24);
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(v4 + 80));
  if (*(char *)(v4 + 79) < 0)
    goto LABEL_11;
LABEL_4:
  v5 = *(void **)(v4 + 24);
  if (v5)
  {
LABEL_5:
    *(_QWORD *)(v4 + 32) = v5;
    operator delete(v5);
  }
LABEL_6:
  v6 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(v4 + 8) = v6;
    operator delete(v6);
  }
  MEMORY[0x19401CD90](v4, 0x1092C40A2AD7073);
  return a1;
}

uint64_t *std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if ((*(char *)(v2 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 79) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_11:
    operator delete(*(void **)(v2 + 56));
    v3 = *(void **)(v2 + 24);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 80));
  if (*(char *)(v2 + 79) < 0)
    goto LABEL_11;
LABEL_4:
  v3 = *(void **)(v2 + 24);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(v2 + 32) = v3;
    operator delete(v3);
  }
LABEL_6:
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  MEMORY[0x19401CD90](v2, 0x1092C40A2AD7073);
  return a1;
}

uint64_t std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::~Impl(E5RT::Ops::BaseEirInferenceOperation::Impl *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void **v10;

  E5RT::Ops::BaseEirInferenceOperation::Impl::UnpinNetworkWeights((uint64_t)this);
  espresso_plan_destroy(*((_QWORD *)this + 2));
  espresso_context_destroy(*((_QWORD **)this + 1));
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (!v2)
    goto LABEL_9;
  if ((*(char *)(v2 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 79) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_23:
    operator delete(*(void **)(v2 + 56));
    v3 = *(void **)(v2 + 24);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 80));
  if (*(char *)(v2 + 79) < 0)
    goto LABEL_23;
LABEL_4:
  v3 = *(void **)(v2 + 24);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(v2 + 32) = v3;
    operator delete(v3);
  }
LABEL_6:
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  MEMORY[0x19401CD90](v2, 0x1092C40A2AD7073);
LABEL_9:
  v5 = (void **)*((_QWORD *)this + 12);
  if (v5)
  {
    do
    {
      v9 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
    operator delete(v6);
  v7 = (void **)*((_QWORD *)this + 7);
  if (v7)
  {
    do
    {
      v10 = (void **)*v7;
      if (*((char *)v7 + 39) < 0)
        operator delete(v7[2]);
      operator delete(v7);
      v7 = v10;
    }
    while (v10);
  }
  v8 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    operator delete(v8);
}

void sub_190EEC208(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE __p[12];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v8 = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v3 = objc_claimAutoreleasedReturnValue();
  if (v8 < 0)
  {
    operator delete(*(void **)__p);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  if (os_signpost_enabled(v3))
  {
    v5 = *(_QWORD *)(v2 + 120);
    v6 = (_QWORD *)(v5 + 56);
    if (*(char *)(v5 + 79) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v6;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v3, OS_SIGNPOST_INTERVAL_END, v4, "EIROpPrepareForEncode", "Model=%{signpost.description:attribute}s", __p, 0xCu);
  }
LABEL_9:

}

void sub_190EEC328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_190EEC408(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](a1 + 112);
  return a1;
}

uint64_t std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_11;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

const void **E5RT::Ops::BaseEirInferenceOperation::Impl::PinNetworkWeights(const void **this)
{
  const void **v1;
  void *exception;
  void *v3;
  _QWORD v4[3];
  char v5[8];
  _QWORD v6[3];

  if (!*((_BYTE *)this + 128))
  {
    v1 = this;
    if ((E5RT::DoesCurrentPlatformSupportPinningNetworkMemory((E5RT *)this) & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v6, "PinNetworkWeights");
      std::string::basic_string[abi:ne180100]<0>(v4, "Pinning network memory is not supported on this platform.");
      E5RT::Status::Status(v5, 2, v4);
      E5RT::E5RTError::E5RTError(exception, v6, v5);
    }
    this = (const void **)espresso_network_pin_weights_blob_storage(v1[3], (int)v1[4]);
    if ((_DWORD)this)
    {
      v3 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v6, "PinNetworkWeights");
      std::string::basic_string[abi:ne180100]<0>(v4, "Pin network blob storage failed.");
      E5RT::Status::Status(v5, 2, v4);
      E5RT::E5RTError::E5RTError(v3, v6, v5);
    }
    *((_BYTE *)v1 + 128) = 1;
  }
  return this;
}

void sub_190EEC790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateDataDependentDynamicPort(uint64_t a1, uint64_t a2, void (***a3)(E5RT::IOPortPriv *__hidden this))
{
  void (**v5)(E5RT::IOPortPriv *__hidden);
  E5RT::IOPortPriv *v6;
  uint64_t *v7;
  int32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  E5RT::TensorDataType::Impl *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  E5RT::BufferObject *v23;
  std::__shared_weak_count *v24;
  E5RT::TensorDataType::Impl *v25;
  void *DataSpan;
  size_t Size;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *exception;
  void *v40;
  E5RT::BufferObject *v41;
  std::__shared_weak_count *v42;
  E5RT::TensorDataType::Impl *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  E5RT::TensorDataType::Impl *v47;
  std::__shared_weak_count *v48;
  E5RT::TensorDataType::Impl *v49;
  E5RT::TensorDataType::Impl *v50;
  std::__shared_weak_count *v51;
  void *__p;
  void *v53;
  char *v54;
  _QWORD __src[11];
  uint64_t v56;

  v5 = *a3;
  memset(&__src[6], 0, 32);
  if (v5 == &off_1E2D59AC8)
    v6 = (E5RT::IOPortPriv *)a3;
  else
    v6 = 0;
  memset(__src, 0, 48);
  v7 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>((_QWORD *)(a1 + 40), a2);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v56 = 0;
  v8 = (int32x4_t *)(v7 + 5);
  if (*(char *)(a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  if (espresso_network_bind_buffer(*(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), v9, (uint64_t)v8, 0x20000, 0x40000, 0x10000))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "PopulateDataDependentDynamicPort");
    std::string::basic_string[abi:ne180100]<0>(&v50, "Unable to bind output to dyn output.");
    E5RT::Status::Status(&v47, 2, &v50);
    E5RT::E5RTError::E5RTError(exception, &__p, &v47);
  }
  if (espresso_buffer_unpack_tensor_shape(v8, &v56, __src))
  {
    v40 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "PopulateDataDependentDynamicPort");
    std::string::basic_string[abi:ne180100]<0>(&v50, "Unable to query output dimensions after executing dyn op.");
    E5RT::Status::Status(&v47, 2, &v50);
    E5RT::E5RTError::E5RTError(v40, &__p, &v47);
  }
  v10 = v56;
  v53 = 0;
  v54 = 0;
  __p = 0;
  if (v56)
  {
    if (v56 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = 8 * v56;
    __p = operator new(8 * v56);
    v54 = (char *)__p + 8 * v10;
    memcpy(__p, __src, v11);
    v53 = v54;
  }
  E5RT::TensorDataType::TensorDataType(&v47, 4, 6u);
  E5RT::TensorDescriptor::CreateTensorDesc(&v47, (uint64_t *)&__p, &v49);
  v50 = v49;
  if (v49)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v13 = v49;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
  }
  else
  {
    v12 = 0;
  }
  v51 = v12;
  v49 = 0;
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v47);
  E5RT::IOPortPriv::LockPort(v6, 0);
  v45 = 0;
  v46 = 0;
  E5RT::IOPortPriv::BindMemoryObject((uint64_t)v6, (uint64_t)&v45, 0);
  v14 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v43 = v50;
  v44 = v51;
  if (v51)
  {
    v17 = (unint64_t *)&v51->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v6, (uint64_t *)&v43);
  v19 = v44;
  if (v44)
  {
    v20 = (unint64_t *)&v44->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (void *)v8->i64[0];
  E5RT::TensorDescriptor::AllocateMemory((uint64_t)v50, 0, 1uLL, &v49);
  v23 = v49;
  v47 = v49;
  if (v49)
  {
    v24 = (std::__shared_weak_count *)operator new();
    v25 = v49;
    v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3190;
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
    v24[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
  }
  else
  {
    v24 = 0;
  }
  v48 = v24;
  DataSpan = (void *)E5RT::BufferObject::GetDataSpan(v23);
  Size = E5RT::BufferObject::GetSize(v23);
  memcpy(DataSpan, v22, Size);
  free(v22);
  v41 = v23;
  v42 = v24;
  if (v24)
  {
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  E5RT::IOPortPriv::BindMemoryObject((uint64_t)v6, (uint64_t)&v41, 1);
  v30 = v42;
  if (v42)
  {
    v31 = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  E5RT::IOPortPriv::LockPort(v6, 1);
  v33 = v48;
  if (v48)
  {
    v34 = (unint64_t *)&v48->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v51;
  if (v51)
  {
    v37 = (unint64_t *)&v51->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
}

void sub_190EECCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_190EECE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a27 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v27);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  _Unwind_Resume(a1);
}

void sub_190EECE4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5RT::ScopedTrace::~ScopedTrace(E5RT::ScopedTrace *this)
{
  if (E5RT::g_trace_analysis_level >= *(_DWORD *)this)
    kdebug_trace();
}

E5RT::Ops::BaseEirInferenceOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl>>::~propagate_const(E5RT::Ops::BaseEirInferenceOperation::Impl **a1)
{
  E5RT::Ops::BaseEirInferenceOperation::Impl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::BaseEirInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation(void **this)
{
  E5RT::Ops::BaseEirInferenceOperation::Impl *v2;

  *this = off_1E2D5BAA8;
  if ((*((char *)this + 383) & 0x80000000) == 0)
  {
    if ((*((char *)this + 359) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(this[42]);
    v2 = (E5RT::Ops::BaseEirInferenceOperation::Impl *)this[37];
    this[37] = 0;
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  operator delete(this[45]);
  if (*((char *)this + 359) < 0)
    goto LABEL_7;
LABEL_3:
  v2 = (E5RT::Ops::BaseEirInferenceOperation::Impl *)this[37];
  this[37] = 0;
  if (v2)
  {
LABEL_4:
    E5RT::Ops::BaseEirInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
LABEL_5:
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal((E5RT::ExecutionStreamOperationInternal *)this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x58uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = (std::string *)(v26 + 16);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_DWORD *)v26 + 10) = 0;
  *((_OWORD *)v26 + 3) = 0u;
  *((_OWORD *)v26 + 4) = 0u;
  *((_DWORD *)v26 + 20) = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190EED3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190EED3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A712C9)
    return a1 + 24;
  if (((v3 & 0x8000000191A712C9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A712C9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A712C9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, std::string *__src, std::string *a3)
{
  unint64_t v6;
  size_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **p_dst;
  std::string *v13;
  std::string::value_type *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  char *v20;
  _OWORD *v21;
  std::string::size_type *v22;
  unint64_t v23;
  __int128 v24;
  std::string::value_type v25;
  std::string::size_type v26;
  void **__dst;
  size_t v29;
  int64_t v30;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)__src;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == __src)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src)
      goto LABEL_12;
  }
  else
  {
    if (a3 == __src)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        v13 = this;
        if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_14:
          v14 = (char *)v13 + size;
          if (a3 == __src)
            goto LABEL_38;
          goto LABEL_18;
        }
      }
      else
      {
        v13 = this;
        if ((v6 & 0x80) == 0)
          goto LABEL_14;
      }
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      v14 = (std::string::value_type *)(this->__r_.__value_.__r.__words[0] + size);
      if (a3 == __src)
        goto LABEL_38;
LABEL_18:
      if (v7 >= 0x20)
      {
        v20 = (char *)v13 + size;
        if ((unint64_t)((char *)v13 + size - (char *)__src) >= 0x20)
        {
          v15 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
          v14 += v7 & 0xFFFFFFFFFFFFFFE0;
          v21 = v20 + 16;
          v22 = &__src->__r_.__value_.__r.__words[2];
          v23 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 += 2;
            v22 += 4;
            v23 -= 32;
          }
          while (v23);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_38;
        }
        else
        {
          v15 = __src;
        }
      }
      else
      {
        v15 = __src;
      }
      do
      {
        v25 = v15->__r_.__value_.__s.__data_[0];
        v15 = (std::string *)((char *)v15 + 1);
        *v14++ = v25;
      }
      while (v15 != a3);
LABEL_38:
      *v14 = 0;
      v26 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v26;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v26 & 0x7F;
      return this;
    }
  }
  if ((std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= __src)
    goto LABEL_12;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 > 0x16)
  {
    v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v16 = v7 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v29 = v7;
    v30 = v17 | 0x8000000000000000;
    __dst = p_dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  else
  {
    HIBYTE(v30) = v7;
    p_dst = (void **)&__dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  memcpy(p_dst, __src, v7);
  p_dst = (void **)((char *)p_dst + v7);
LABEL_24:
  *(_BYTE *)p_dst = 0;
  if (v30 >= 0)
    v18 = (const std::string::value_type *)&__dst;
  else
    v18 = (const std::string::value_type *)__dst;
  if (v30 >= 0)
    v19 = HIBYTE(v30);
  else
    v19 = v29;
  std::string::append(this, v18, v19);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst);
  return this;
}

void sub_190EED9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x19401C94C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x19401C958](v13);
  return a1;
}

void sub_190EEDAD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x19401C958](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x190EEDAB0);
}

void sub_190EEDB18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_190EEDCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190EEE114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190EEE128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A71300)
    return a1 + 24;
  if (((v3 & 0x8000000191A71300 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A71300))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A71300 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_190EEE410(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "Unable to set compute_unit_mask", v1, 2u);
}

uint64_t e5rt_e5_compiler_create_with_config(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7478;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EEE4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_compile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DC7578;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190EEE5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_is_new_compile_required(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DC7678;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190EEE6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_purge_e5_bundles_for_input_model(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC76F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EEE7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190EEE7F4()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EEE808(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC73F8;
  result[1] = v3;
  return result;
}

uint64_t sub_190EEE83C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC73F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EEE858(uint64_t a1)
{
  E5RT::E5Compiler *v2;
  uint64_t Compiler;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (E5RT::E5Compiler *)operator new();
    *(_QWORD *)v2 = 0;
    Compiler = E5RT::E5Compiler::GetCompiler(v2);
    result = 0;
    *((_QWORD *)v2 + 1) = Compiler;
    **(_QWORD **)(a1 + 8) = v2;
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EEE954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEE9C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_e5_compiler_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z23e5rt_e5_compiler_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_e5_compiler_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_e5_compiler_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEEA2C()
{
  return &unk_1E2DC7458;
}

void sub_190EEEA3C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEEA50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EEEA88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEEAA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void *__p[2];
  char v5;
  void *v6;
  __int128 v7;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = operator new();
      E5RT::E5Compiler::MakeCompiler(**(E5RT::E5Compiler ***)(a1 + 16), (E5RT::E5Compiler **)v2);
      result = 0;
      *(_QWORD *)(v2 + 8) = *(_QWORD *)v2;
      **(_QWORD **)(a1 + 8) = v2;
    }
    else
    {
      v6 = operator new(0x38uLL);
      v7 = xmmword_191A6F7D0;
      strcpy((char *)v6, "Invalid Function Argument: config_options is NULL.");
      v5 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
      if (v5 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v7) < 0)
        operator delete(v6);
      return 1;
    }
  }
  else
  {
    v6 = operator new(0x30uLL);
    v7 = xmmword_191A6F7A0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6);
    return 1;
  }
  return result;
}

void sub_190EEEC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_190EEEC94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t sub_190EEECB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z35e5rt_e5_compiler_create_with_configE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z35e5rt_e5_compiler_create_with_configE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35e5rt_e5_compiler_create_with_configE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35e5rt_e5_compiler_create_with_configE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEED24()
{
  return &unk_1E2DC74D8;
}

void sub_190EEED34()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EEED48(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC74F8;
  result[1] = v3;
  return result;
}

uint64_t sub_190EEED7C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC74F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EEED98(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *v2;
      *v2 = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A6FF90;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190EEEF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEEF78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_e5_compiler_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z24e5rt_e5_compiler_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_e5_compiler_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_e5_compiler_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEEFE4()
{
  return &unk_1E2DC7558;
}

void sub_190EEEFF4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEF008(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DC7578;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190EEF048(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7578;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEF070(uint64_t a1)
{
  uint64_t *v2;
  const char *v3;
  uint64_t v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *__p[2];
  char v18;
  void *__dst;
  __int128 v20;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        if (*(_QWORD *)(a1 + 32))
        {
          v2 = (uint64_t *)operator new();
          *v2 = 0;
          v3 = *(const char **)(a1 + 16);
          v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
          v5 = strlen(v3);
          if (v5 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v6 = v5;
          if (v5 >= 0x17)
          {
            v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v5 | 7) != 0x17)
              v8 = v5 | 7;
            v9 = v8 + 1;
            p_dst = (void **)operator new(v8 + 1);
            *(_QWORD *)&v20 = v6;
            *((_QWORD *)&v20 + 1) = v9 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v20) = v5;
            p_dst = &__dst;
            if (!v5)
            {
LABEL_13:
              *((_BYTE *)p_dst + v6) = 0;
              E5RT::E5Compiler::Compile(v4, (std::string::size_type)&__dst, **(const void ****)(a1 + 24), &v16);
              if (SHIBYTE(v20) < 0)
              {
                operator delete(__dst);
                v10 = v16;
                if (v16)
                {
LABEL_15:
                  v16 = 0;
                  v11 = *v2;
                  *v2 = v10;
                  if (v11)
                    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
                  v12 = 0;
                  **(_QWORD **)(a1 + 32) = v2;
                  v2 = 0;
                  v13 = v16;
                  v16 = 0;
                  if (!v13)
                    goto LABEL_19;
                  goto LABEL_18;
                }
              }
              else
              {
                v10 = v16;
                if (v16)
                  goto LABEL_15;
              }
              __dst = operator new(0x38uLL);
              v20 = xmmword_191A6F7D0;
              strcpy((char *)__dst, "E5 compilation failure. ProgramLibrary is nullptr.");
              v18 = 10;
              strcpy((char *)__p, "operator()");
              E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
              if (v18 < 0)
              {
                operator delete(__p[0]);
                if ((SHIBYTE(v20) & 0x80000000) == 0)
                {
LABEL_27:
                  v12 = 11;
                  v13 = v16;
                  v16 = 0;
                  if (!v13)
                    goto LABEL_19;
                  goto LABEL_18;
                }
              }
              else if ((SHIBYTE(v20) & 0x80000000) == 0)
              {
                goto LABEL_27;
              }
              operator delete(__dst);
              v12 = 11;
              v13 = v16;
              v16 = 0;
              if (!v13)
              {
LABEL_19:
                if (v2)
                {
                  v14 = *v2;
                  *v2 = 0;
                  if (v14)
                    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
                  MEMORY[0x19401CD90](v2, 0x20C4093837F09);
                }
                return v12;
              }
LABEL_18:
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
              goto LABEL_19;
            }
          }
          memmove(p_dst, v3, v6);
          goto LABEL_13;
        }
        __dst = operator new(0x30uLL);
        v20 = xmmword_191A6FF90;
        strcpy((char *)__dst, "Invalid Function Argument: library is NULL.");
        v18 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
      }
      else
      {
        __dst = operator new(0x30uLL);
        v20 = xmmword_191A6FF90;
        strcpy((char *)__dst, "Invalid Function Argument: options is NULL.");
        v18 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
      }
    }
    else
    {
      __dst = operator new(0x38uLL);
      v20 = xmmword_191A71370;
      strcpy((char *)__dst, "Invalid Function Argument: path_to_input_file is NULL.");
      v18 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
  }
  else
  {
    __dst = operator new(0x30uLL);
    v20 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    v18 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190EEF4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEF5A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_e5_compiler_compileE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z24e5rt_e5_compiler_compileE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_e5_compiler_compileE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_e5_compiler_compileE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEF614()
{
  return &unk_1E2DC75D8;
}

void sub_190EEF624()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEF638(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DC75F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190EEF678(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC75F8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEF6A0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void *__p[2];
  char v11;
  void *v12;
  __int128 v13;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        if (*(_QWORD *)(a1 + 32))
        {
          v2 = (uint64_t *)operator new();
          *v2 = 0;
          E5RT::E5Compiler::Compile(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a1 + 16), **(const void ****)(a1 + 24), &v9);
          v3 = v9;
          if (v9)
          {
            v9 = 0;
            v4 = *v2;
            *v2 = v3;
            if (v4)
              (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
            v5 = 0;
            **(_QWORD **)(a1 + 32) = v2;
            v2 = 0;
            v6 = v9;
            v9 = 0;
            if (!v6)
              goto LABEL_10;
LABEL_9:
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
LABEL_10:
            if (v2)
            {
              v7 = *v2;
              *v2 = 0;
              if (v7)
                (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
              MEMORY[0x19401CD90](v2, 0x20C4093837F09);
            }
            return v5;
          }
          v12 = operator new(0x38uLL);
          v13 = xmmword_191A6F7D0;
          strcpy((char *)v12, "E5 compilation failure. ProgramLibrary is nullptr.");
          v11 = 10;
          strcpy((char *)__p, "operator()");
          E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
          if (v11 < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(v13) & 0x80000000) == 0)
            {
LABEL_17:
              v5 = 11;
              v6 = v9;
              v9 = 0;
              if (!v6)
                goto LABEL_10;
              goto LABEL_9;
            }
          }
          else if ((SHIBYTE(v13) & 0x80000000) == 0)
          {
            goto LABEL_17;
          }
          operator delete(v12);
          v5 = 11;
          v6 = v9;
          v9 = 0;
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
        v12 = operator new(0x30uLL);
        v13 = xmmword_191A6FF90;
        strcpy((char *)v12, "Invalid Function Argument: library is NULL.");
        v11 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
      }
      else
      {
        v12 = operator new(0x30uLL);
        v13 = xmmword_191A6FF90;
        strcpy((char *)v12, "Invalid Function Argument: options is NULL.");
        v11 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
      }
    }
    else
    {
      v12 = operator new(0x38uLL);
      v13 = xmmword_191A6F7D0;
      strcpy((char *)v12, "Invalid Function Argument: mil_ir_program is NULL.");
      v11 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
    }
  }
  else
  {
    v12 = operator new(0x30uLL);
    v13 = xmmword_191A6F7A0;
    strcpy((char *)v12, "Invalid Function Argument: handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12);
  return 1;
}

void sub_190EEFA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190EEFAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    JUMPOUT(0x190EEFB0CLL);
  JUMPOUT(0x190EEFAA4);
}

void sub_190EEFB28()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  *v0 = 0;
  if (!v1)
    JUMPOUT(0x190EEFABCLL);
  JUMPOUT(0x190EEFAB0);
}

uint64_t sub_190EEFB3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_e5_compiler_compile_from_ir_programE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_e5_compiler_compile_from_ir_programE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_e5_compiler_compile_from_ir_programE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_e5_compiler_compile_from_ir_programE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEFBA8()
{
  return &unk_1E2DC7658;
}

void sub_190EEFBB8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEFBCC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DC7678;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190EEFC0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7678;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEFC34(uint64_t a1)
{
  uint64_t v1;
  const void *v3;
  uint64_t v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *__dst;
  __int128 v14;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      if (*(_QWORD *)(a1 + 24))
      {
        if (*(_QWORD *)(a1 + 32))
        {
          v4 = *(_QWORD *)(v1 + 8);
          v5 = strlen(*(const char **)(a1 + 16));
          if (v5 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v6 = v5;
          if (v5 >= 0x17)
          {
            v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v5 | 7) != 0x17)
              v8 = v5 | 7;
            v9 = v8 + 1;
            p_dst = (void **)operator new(v8 + 1);
            *(_QWORD *)&v14 = v6;
            *((_QWORD *)&v14 + 1) = v9 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v14) = v5;
            p_dst = &__dst;
            if (!v5)
              goto LABEL_13;
          }
          memmove(p_dst, v3, v6);
LABEL_13:
          *((_BYTE *)p_dst + v6) = 0;
          **(_BYTE **)(a1 + 32) = E5RT::E5Compiler::IsNewCompileRequired(v4, (std::string::size_type)&__dst, **(const void ****)(a1 + 24));
          if (SHIBYTE(v14) < 0)
            operator delete(__dst);
          return 0;
        }
        __dst = operator new(0x30uLL);
        v14 = xmmword_191A71380;
        strcpy((char *)__dst, "Invalid Function Argument: required is NULL.");
        v12 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
      }
      else
      {
        __dst = operator new(0x30uLL);
        v14 = xmmword_191A6FF90;
        strcpy((char *)__dst, "Invalid Function Argument: options is NULL.");
        v12 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
      }
    }
    else
    {
      __dst = operator new(0x38uLL);
      v14 = xmmword_191A71370;
      strcpy((char *)__dst, "Invalid Function Argument: path_to_input_file is NULL.");
      v12 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
  }
  else
  {
    __dst = operator new(0x30uLL);
    v14 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190EEFF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190EEFF70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_e5_compiler_is_new_compile_requiredE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_e5_compiler_is_new_compile_requiredE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_e5_compiler_is_new_compile_requiredE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_e5_compiler_is_new_compile_requiredE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEFFDC()
{
  return &unk_1E2DC76D8;
}

void sub_190EEFFEC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EF0000(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC76F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EF0038(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC76F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EF0058(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  std::string __dst;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 8);
      v4 = strlen(*(const char **)(a1 + 16));
      if (v4 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v5 = v4;
      if (v4 >= 0x17)
      {
        v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v7 = v4 | 7;
        v8 = v7 + 1;
        p_dst = (std::string *)operator new(v7 + 1);
        __dst.__r_.__value_.__l.__size_ = v5;
        __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
        p_dst = &__dst;
        if (!v4)
          goto LABEL_11;
      }
      memcpy(p_dst, v2, v5);
LABEL_11:
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      E5RT::E5Compiler::PurgeE5BundlesForInputModel(v3, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      return 0;
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A71370;
    strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: path_to_input_file is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A6F7A0;
    strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return 1;
}

void sub_190EF0248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190EF0298(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_e5_compiler_purge_e5_bundles_for_input_modelE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z49e5rt_e5_compiler_purge_e5_bundles_for_input_modelE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_e5_compiler_purge_e5_bundles_for_input_modelE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_e5_compiler_purge_e5_bundles_for_input_modelE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF0304()
{
  return &unk_1E2DC7758;
}

uint64_t e5rt_execution_stream_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC77F8;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190EF03AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_encode_workload(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7878;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EF0480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_execute_sync(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC78F8;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190EF0554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_encode_operation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7978;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EF0628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_prewire_in_use_allocations(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC79F8;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190EF06FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_reset(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC7A78;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190EF07D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_get_stream_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7AF8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EF08A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_async_submit()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E2DC7B78;
  v5 = v4;
  v0 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  v1 = v5;
  if (v5 == v4)
  {
    v2 = 4;
    v1 = v4;
    goto LABEL_5;
  }
  if (v5)
  {
    v2 = 5;
LABEL_5:
    (*(void (**)(void))(*v1 + 8 * v2))();
  }
  return v0;
}

void sub_190EF0978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_submit_async(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7BF8;
  v6[1] = a1;
  v6[2] = MEMORY[0x19401D648](a2);
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EF0A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7CF8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EF0B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_reset_config_options(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7D78;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EF0C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_set_config_options(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7DF8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EF0CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_step_execute_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7E78;
  v6[1] = a1;
  v6[2] = MEMORY[0x19401D648](a2);
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EF0DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_set_ane_execution_priority(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7EF8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EF0E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190EF0EC8()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EF0EDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC7778;
  result[1] = v3;
  return result;
}

uint64_t sub_190EF0F10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC7778;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EF0F2C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (_QWORD *)operator new();
    *v2 = 0;
    v2[1] = 0;
    E5RT::ExecutionStream::CreateExecutionStream(&v13);
    v3 = v13;
    if (v13)
    {
      v4 = (_QWORD *)operator new();
      v5 = v13;
      *v4 = &unk_1E2DC3238;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = v5;
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = v3;
      v2[1] = v4;
      if (!v6)
        goto LABEL_10;
    }
    else
    {
      v13 = 0;
      v6 = (std::__shared_weak_count *)v2[1];
      *v2 = 0;
      v2[1] = 0;
      if (!v6)
      {
LABEL_10:
        v9 = v13;
        v13 = 0;
        if (v9)
          (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
        result = 0;
        **(_QWORD **)(a1 + 8) = v2;
        return result;
      }
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_10;
  }
  v13 = operator new(0x30uLL);
  v14 = xmmword_191A6F7A0;
  strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
  v12 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
  return 1;
}

void sub_190EF10D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF1180(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_execution_stream_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z28e5rt_execution_stream_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_execution_stream_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_execution_stream_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF11EC()
{
  return &unk_1E2DC77D8;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A85DFCLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A85DFCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A85DFCLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A85DFCLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_190EF12BC()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EF12D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC77F8;
  result[1] = v3;
  return result;
}

uint64_t sub_190EF1304(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC77F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EF1320(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v10 = operator new(0x30uLL);
      v11 = xmmword_191A6FF90;
      strcpy((char *)v10, "Invalid Function Argument: *handle is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10);
      return 1;
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190EF14F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF1530(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_execution_stream_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z29e5rt_execution_stream_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_execution_stream_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_execution_stream_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF159C()
{
  return &unk_1E2DC7858;
}

void sub_190EF15AC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EF15C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EF15F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EF1618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t *v4;
  unint64_t v5;
  void *__p[2];
  char v8;
  void *v9;
  __int128 v10;

  if (*(_QWORD *)(a1 + 8))
  {
    v1 = *(_QWORD *)(a1 + 16);
    if (v1)
    {
      v3 = *(void **)v1;
      v2 = *(_QWORD *)(v1 + 8);
      v9 = v3;
      *(_QWORD *)&v10 = v2;
      if (v2)
      {
        v4 = (unint64_t *)(v2 + 8);
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
      }
      E5RT::ExecutionStream::EncodeComputeWorkload();
    }
    v9 = operator new(0x38uLL);
    v10 = xmmword_191A6FF80;
    strcpy((char *)v9, "Invalid Function Argument: function_handle is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
  }
  else
  {
    v9 = operator new(0x30uLL);
    v10 = xmmword_191A6F7A0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
  }
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 1;
}

void sub_190EF17BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF1830(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z37e5rt_execution_stream_encode_workloadE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z37e5rt_execution_stream_encode_workloadE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z37e5rt_execution_stream_encode_workloadE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z37e5rt_execution_stream_encode_workloadE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF189C()
{
  return &unk_1E2DC78D8;
}

void sub_190EF18AC()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EF18C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC78F8;
  result[1] = v3;
  return result;
}

uint64_t sub_190EF18F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC78F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EF1910(uint64_t a1)
{
  E5RT::ExecutionStreamImpl ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStream::ExecuteStreamSync(*v1);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190EF19DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF1A18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_execution_stream_execute_syncE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_execution_stream_execute_syncE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_execution_stream_execute_syncE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_execution_stream_execute_syncE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF1A84()
{
  return &unk_1E2DC7958;
}

void sub_190EF1A94()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EF1AA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EF1AE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EF1B00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p[2];
  char v13;
  void *v14;
  __int128 v15;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *v1;
      v5 = *(void **)v2;
      v4 = *(_QWORD *)(v2 + 8);
      v14 = v5;
      *(_QWORD *)&v15 = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      E5RT::ExecutionStream::EncodeOperation(v3, (__int128 *)&v14);
      v8 = (std::__shared_weak_count *)v15;
      if ((_QWORD)v15)
      {
        v9 = (unint64_t *)(v15 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      return 0;
    }
    v14 = operator new(0x38uLL);
    v15 = xmmword_191A6FF70;
    strcpy((char *)v14, "Invalid Function Argument: operation_handle is NULL.");
    v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
  }
  else
  {
    v14 = operator new(0x30uLL);
    v15 = xmmword_191A6F7A0;
    strcpy((char *)v14, "Invalid Function Argument: handle is NULL.");
    v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
  }
  if (v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14);
  return 1;
}

void sub_190EF1CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF1D18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z38e5rt_execution_stream_encode_operationE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z38e5rt_execution_stream_encode_operationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38e5rt_execution_stream_encode_operationE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38e5rt_execution_stream_encode_operationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF1D84()
{
  return &unk_1E2DC79D8;
}

void sub_190EF1D94()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EF1DA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC79F8;
  result[1] = v3;
  return result;
}

uint64_t sub_190EF1DDC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC79F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EF1DF8(uint64_t a1)
{
  E5RT::ExecutionStreamImpl ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStream::PreWireInUseAllocations(*v1);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190EF1EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF1F00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_execution_stream_prewire_in_use_allocationsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z48e5rt_execution_stream_prewire_in_use_allocationsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_execution_stream_prewire_in_use_allocationsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_execution_stream_prewire_in_use_allocationsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF1F6C()
{
  return &unk_1E2DC7A58;
}

void sub_190EF1F7C()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EF1F90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC7A78;
  result[1] = v3;
  return result;
}

uint64_t sub_190EF1FC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC7A78;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EF1FE0(uint64_t a1)
{
  E5RT::ExecutionStreamImpl ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStream::ResetStream(*v1);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190EF20AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF20E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_execution_stream_resetE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z27e5rt_execution_stream_resetE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_execution_stream_resetE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_execution_stream_resetE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF2154()
{
  return &unk_1E2DC7AD8;
}

void sub_190EF2164()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EF2178(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7AF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EF21B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7AF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EF21D0(uint64_t a1)
{
  E5RT::ExecutionStreamImpl ***v1;
  uint64_t StreamId;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      StreamId = E5RT::ExecutionStream::GetStreamId(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = StreamId;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F790;
      strcpy((char *)v7, "Invalid Function Argument: stream_id is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EF234C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF238C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z35e5rt_execution_stream_get_stream_idE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z35e5rt_execution_stream_get_stream_idE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35e5rt_execution_stream_get_stream_idE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35e5rt_execution_stream_get_stream_idE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF23F8()
{
  return &unk_1E2DC7B58;
}

void sub_190EF2408()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EF241C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DC7B78;
  return result;
}

void sub_190EF2440(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DC7B78;
}

uint64_t sub_190EF2458()
{
  void *__p[2];
  char v2;
  void *v3;
  __int128 v4;

  v3 = operator new(0x50uLL);
  v4 = xmmword_191A717D0;
  v2 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v3, (uint64_t *)__p);
  if (v2 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v4) & 0x80000000) == 0)
      return 2;
  }
  else if ((SHIBYTE(v4) & 0x80000000) == 0)
  {
    return 2;
  }
  operator delete(v3);
  return 2;
}

void sub_190EF2524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF2560(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_execution_stream_async_submitE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_execution_stream_async_submitE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_execution_stream_async_submitE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_execution_stream_async_submitE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF25CC()
{
  return &unk_1E2DC7BD8;
}

uint64_t sub_190EF25D8(uint64_t a1)
{

  return a1;
}

void sub_190EF2600(uint64_t a1)
{

  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EF2638(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *v2 = &off_1E2DC7BF8;
  v2[1] = v4;
  v2[2] = MEMORY[0x19401D648](v3);
  return v2;
}

uint64_t sub_190EF267C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *a2 = &off_1E2DC7BF8;
  a2[1] = v4;
  result = MEMORY[0x19401D648](v3);
  a2[2] = result;
  return result;
}

void sub_190EF26B0(uint64_t a1)
{

}

void sub_190EF26B8(id *a1)
{

  operator delete(a1);
}

uint64_t sub_190EF26E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  void **v14;
  void *v15;
  __int128 v16;
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v14 = 0;
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3)
    {
      v6 = *v1;
      goto LABEL_11;
    }
    v15 = &off_1E2DC7C68;
    *(_QWORD *)&v16 = MEMORY[0x19401D648]();
    v17 = &v15;
    std::__function::__value_func<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](&v15, __p);
    v4 = v17;
    if (v17 == &v15)
    {
      v5 = 4;
      v4 = &v15;
    }
    else
    {
      if (!v17)
        goto LABEL_8;
      v5 = 5;
    }
    (*((void (**)(void))*v4 + v5))();
LABEL_8:
    v3 = (uint64_t)v14;
    v6 = **(_QWORD **)(a1 + 8);
    if (v14)
    {
      if (v14 == __p)
      {
        v17 = &v15;
        (*((void (**)(void **, void **))__p[0] + 3))(__p, &v15);
LABEL_13:
        E5RT::ExecutionStream::SubmitStreamAsync(v6, &v15);
        v7 = v17;
        if (v17 == &v15)
        {
          v8 = 4;
          v7 = &v15;
        }
        else
        {
          if (!v17)
            goto LABEL_18;
          v8 = 5;
        }
        (*((void (**)(void))*v7 + v8))();
LABEL_18:
        v9 = v14;
        if (v14 == __p)
        {
          v10 = 4;
          v9 = __p;
        }
        else
        {
          if (!v14)
            return 0;
          v10 = 5;
        }
        (*((void (**)(void))*v9 + v10))();
        return 0;
      }
      v3 = (*((uint64_t (**)(void))*v14 + 2))();
    }
LABEL_11:
    v17 = (void **)v3;
    goto LABEL_13;
  }
  v15 = operator new(0x30uLL);
  v16 = xmmword_191A6F7A0;
  strcpy((char *)v15, "Invalid Function Argument: handle is NULL.");
  v13 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15);
  return 1;
}

void sub_190EF28F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF2994(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_execution_stream_submit_asyncE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_execution_stream_submit_asyncE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_execution_stream_submit_asyncE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_execution_stream_submit_asyncE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF2A00()
{
  return &unk_1E2DC7CD8;
}

uint64_t sub_190EF2A0C(uint64_t a1)
{

  return a1;
}

void sub_190EF2A34(uint64_t a1)
{

  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EF2A6C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E2DC7C68;
  v2[1] = MEMORY[0x19401D648](v3);
  return v2;
}

uint64_t sub_190EF2AB0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E2DC7C68;
  result = MEMORY[0x19401D648](v3);
  a2[1] = result;
  return result;
}

void sub_190EF2AE4(uint64_t a1)
{

}

void sub_190EF2AEC(id *a1)
{

  operator delete(a1);
}

uint64_t sub_190EF2B14(uint64_t a1, unint64_t *a2, unint64_t *a3, E5RT::E5RTError **a4)
{
  unint64_t v5;
  unint64_t v6;
  E5RT::E5RTError *v7;
  uint64_t result;
  E5RT::Status *Status;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t ErrorMessage;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  uint64_t Location;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string __p;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  __int128 v42;
  std::string::size_type v43;

  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  *a4 = 0;
  if (!v7)
    goto LABEL_2;
  Status = (E5RT::Status *)E5RT::E5RTError::GetStatus(v7);
  E5RT::Status::GetErrorCode(Status);
  std::to_string(&v35, v5);
  v10 = std::string::insert(&v35, 0, "Submit Async failed for [");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v36, ":");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v38, "]: ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  ErrorMessage = E5RT::Status::GetErrorMessage(Status);
  v21 = *(char *)(ErrorMessage + 23);
  if (v21 >= 0)
    v22 = (const std::string::value_type *)ErrorMessage;
  else
    v22 = *(const std::string::value_type **)ErrorMessage;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(ErrorMessage + 23);
  else
    v23 = *(_QWORD *)(ErrorMessage + 8);
  v24 = std::string::append(&v39, v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v40, " @ ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  Location = E5RT::E5RTError::GetLocation(v7);
  v29 = *(char *)(Location + 23);
  if (v29 >= 0)
    v30 = (const std::string::value_type *)Location;
  else
    v30 = *(const std::string::value_type **)Location;
  if (v29 >= 0)
    v31 = *(unsigned __int8 *)(Location + 23);
  else
    v31 = *(_QWORD *)(Location + 8);
  v32 = std::string::append(&v41, v30, v31);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v43 = v32->__r_.__value_.__r.__words[2];
  v42 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_41:
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_42:
    operator delete(v35.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
LABEL_40:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_41;
LABEL_30:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_42;
LABEL_31:
  *((_BYTE *)&v41.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v41, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v42, (uint64_t *)&v41);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
LABEL_2:
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  if (v7)
    return (*(uint64_t (**)(E5RT::E5RTError *))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_190EF2E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  uint64_t v48;

  if (*(char *)(v48 - 105) < 0)
    operator delete(*(void **)(v48 - 128));
  if (*(char *)(v48 - 73) < 0)
    operator delete(*(void **)(v48 - 96));
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  _Unwind_Resume(a1);
}

uint64_t sub_190EF2FB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZ34e5rt_execution_stream_submit_asyncENK3$_0clEvEUlyyNSt3__110unique_ptrIN4E5RT9E5RTErrorENS0_14de"
                     "fault_deleteIS3_EEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZ34e5rt_execution_stream_submit_asyncENK3$_0clEvEUlyyNSt3__110unique_ptrIN4E5RT9E5RTErr"
                                "orENS0_14default_deleteIS3_EEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZ34e5rt_execution_stream_submit_asyncENK3$_0clEvEUlyyNSt3__110unique_ptrIN4E5RT9E5RTErrorENS0_14default_deleteIS3_EEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZ34e5rt_execution_stream_submit_asyncENK3$_0clEvEUlyyNSt3__110unique_ptrIN4E5RT9E5RTErrorENS0_14default_deleteIS3_EEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF3020()
{
  return &unk_1E2DC7CC8;
}

_QWORD *std::__function::__value_func<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_190EF31C0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_190EF31D0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EF31E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EF321C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EF323C(uint64_t a1)
{
  E5RT::ExecutionStreamImpl ***v1;
  uint64_t InternalAsyncComputeRequestIdForLastSubmit;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      InternalAsyncComputeRequestIdForLastSubmit = E5RT::ExecutionStream::GetInternalAsyncComputeRequestIdForLastSubmit(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = InternalAsyncComputeRequestIdForLastSubmit;
    }
    else
    {
      v7 = operator new(0x40uLL);
      v8 = xmmword_191A717E0;
      strcpy((char *)v7, "Invalid Function Argument: async_compute_request_id is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EF33C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF3400(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z75e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submitE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z75e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submitE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z75e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submitE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z75e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submitE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF346C()
{
  return &unk_1E2DC7D58;
}

void sub_190EF347C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EF3490(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7D78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EF34C8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7D78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EF34E8(uint64_t a1)
{
  E5RT::ExecutionStream **v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(E5RT::ExecutionStream ***)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD **)(a1 + 16);
    if (v3)
    {
      if (!*v3)
      {
        E5RT::ExecutionStream::ResetConfigOptions(*v1, &v10);
        if (v10)
        {
          v4 = (_QWORD *)operator new();
          v5 = v10;
          v10 = 0;
          *v4 = v5;
          **(_QWORD **)(a1 + 16) = v4;
          v6 = v10;
          v10 = 0;
          if (v6)
            (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
        }
        return 0;
      }
      v10 = operator new(0x38uLL);
      v11 = xmmword_191A6F7E0;
      strcpy((char *)v10, "Invalid Function Argument: *config_options is not NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    }
    else
    {
      v10 = operator new(0x38uLL);
      v11 = xmmword_191A6F7D0;
      strcpy((char *)v10, "Invalid Function Argument: config_options is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
  }
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10);
  return 1;
}

void sub_190EF36F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF3750(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_execution_stream_reset_config_optionsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z42e5rt_execution_stream_reset_config_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_execution_stream_reset_config_optionsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_execution_stream_reset_config_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF37BC()
{
  return &unk_1E2DC7DD8;
}

void sub_190EF37CC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EF37E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7DF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EF3818(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7DF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EF3838(uint64_t a1)
{
  uint64_t *v1;
  void ***v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v3 = *(void ****)(a1 + 16);
    if (v3)
    {
      v4 = *v3;
      if (v4)
      {
        v5 = *v1;
        v6 = *v4;
        *v4 = 0;
        v13 = v6;
        E5RT::ExecutionStream::SetConfigOptions(v5, (uint64_t *)&v13);
        v7 = v13;
        v13 = 0;
        if (v7)
          (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
        v8 = **(uint64_t ***)(a1 + 16);
        v9 = *v8;
        *v8 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        return e5rt_execution_stream_config_options_release(*(_QWORD *)(a1 + 16));
      }
      else
      {
        v13 = operator new(0x38uLL);
        v14 = xmmword_191A6FF80;
        strcpy((char *)v13, "Invalid Function Argument: *config_options is NULL.");
        v12 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
        if (v12 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v14) < 0)
          operator delete(v13);
        return 1;
      }
    }
    else
    {
      v13 = operator new(0x38uLL);
      v14 = xmmword_191A6F7D0;
      strcpy((char *)v13, "Invalid Function Argument: config_options is NULL.");
      v12 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
      if (v12 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v14) < 0)
        operator delete(v13);
      return 1;
    }
  }
  else
  {
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A6F7A0;
    strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
}

void sub_190EF3AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF3B00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_execution_stream_set_config_optionsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_execution_stream_set_config_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_execution_stream_set_config_optionsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_execution_stream_set_config_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF3B6C()
{
  return &unk_1E2DC7E58;
}

uint64_t sub_190EF3B78(uint64_t a1)
{

  return a1;
}

void sub_190EF3BA0(uint64_t a1)
{

  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EF3BD8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *v2 = &off_1E2DC7E78;
  v2[1] = v4;
  v2[2] = MEMORY[0x19401D648](v3);
  return v2;
}

uint64_t sub_190EF3C1C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *a2 = &off_1E2DC7E78;
  a2[1] = v4;
  result = MEMORY[0x19401D648](v3);
  a2[2] = result;
  return result;
}

void sub_190EF3C50(uint64_t a1)
{

}

void sub_190EF3C58(id *a1)
{

  operator delete(a1);
}

uint64_t sub_190EF3C80(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p[2];
  char v17;
  void *v18;
  __int128 v19;
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v5 = *v1;
      v4 = (std::__shared_weak_count *)v1[1];
      v14 = v5;
      v15 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        v3 = *(_QWORD *)(a1 + 16);
        v20 = 0;
        if (!v3)
        {
LABEL_10:
          E5RT_Private::StepStreamSync(&v14, &v18);
          v8 = v20;
          if (v20 == &v18)
          {
            v9 = 4;
            v8 = &v18;
          }
          else
          {
            if (!v20)
            {
LABEL_15:
              v10 = v15;
              if (v15)
              {
                v11 = (unint64_t *)&v15->__shared_owners_;
                do
                  v12 = __ldaxr(v11);
                while (__stlxr(v12 - 1, v11));
                if (!v12)
                {
                  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                  std::__shared_weak_count::__release_weak(v10);
                }
              }
              return 0;
            }
            v9 = 5;
          }
          (*((void (**)(void **))*v8 + v9))(v8);
          goto LABEL_15;
        }
      }
      else
      {
        v20 = 0;
      }
      v18 = &unk_1E2DAE958;
      *(_QWORD *)&v19 = MEMORY[0x19401D648](v3);
      v20 = &v18;
      goto LABEL_10;
    }
    v18 = operator new(0x30uLL);
    v19 = xmmword_191A71380;
    strcpy((char *)v18, "Invalid Function Argument: callback is NULL.");
    v17 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v18, (uint64_t *)__p);
  }
  else
  {
    v18 = operator new(0x30uLL);
    v19 = xmmword_191A6F7A0;
    strcpy((char *)v18, "Invalid Function Argument: handle is NULL.");
    v17 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v18, (uint64_t *)__p);
  }
  if (v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18);
  return 1;
}

void sub_190EF3EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF3F48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_execution_stream_step_execute_syncE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z39e5rt_execution_stream_step_execute_syncE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_execution_stream_step_execute_syncE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_execution_stream_step_execute_syncE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF3FB4()
{
  return &unk_1E2DC7ED8;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x19401CD90);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &unk_1E2DAE958;
  result = MEMORY[0x19401D648](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A722A0)
    return a1 + 8;
  if (((v3 & 0x8000000191A722A0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A722A0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A722A0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::target_type()
{
}

void sub_190EF4108()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EF411C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7EF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EF4154(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7EF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EF4174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v3 = *(void **)v1;
    v2 = *(_QWORD *)(v1 + 8);
    v12 = v3;
    *(_QWORD *)&v13 = v2;
    if (v2)
    {
      v4 = (unint64_t *)(v2 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    E5RT_Private::SetANEExecutionPriorityForStream((uint64_t *)&v12, *(_DWORD *)(a1 + 16));
    v6 = (std::__shared_weak_count *)v13;
    if ((_QWORD)v13)
    {
      v7 = (unint64_t *)(v13 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return 0;
  }
  else
  {
    v12 = operator new(0x30uLL);
    v13 = xmmword_191A6F7A0;
    strcpy((char *)v12, "Invalid Function Argument: handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v13) < 0)
      operator delete(v12);
    return 1;
  }
}

void sub_190EF429C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EF430C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_execution_stream_set_ane_execution_priorityE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z48e5rt_execution_stream_set_ane_execution_priorityE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_execution_stream_set_ane_execution_priorityE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_execution_stream_set_ane_execution_priorityE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EF4378()
{
  return &unk_1E2DC7F58;
}

void sub_190EF4384(std::__shared_weak_count **a1, uint64_t a2, int a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v7 = *a1;
  if (*a1)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
}

E5RT::ExecutionStreamOperationConfigOptions *E5RT::ExecutionStreamOperationConfigOptions::ExecutionStreamOperationConfigOptions(E5RT::ExecutionStreamOperationConfigOptions *this)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v8;
  void (*v9)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  unsigned __int8 v10;
  void *__p[2];
  void *v12[2];
  int v13;
  char **v14;

  *(_QWORD *)E5RT::ConfigOptions::ConfigOptions(this) = &off_1E2D5B2C8;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v12 = 0u;
  v13 = 1065353216;
  v10 = 0;
  v14 = &E5RT::ExecutionStreamOperationConfigOptions::prewireModelMemory;
  v2 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)__p, (uint64_t)&E5RT::ExecutionStreamOperationConfigOptions::prewireModelMemory, (uint64_t)&std::piecewise_construct, (_OWORD **)&v14);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v2 + 32, &v10);
  v3 = (_QWORD *)operator new();
  E5RT::ConfigOptionsImpl::ConfigOptionsImpl((uint64_t)v3, (uint64_t *)__p);
  *v3 = &off_1E2DC7FA0;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v12[0];
  if (v12[0])
  {
    do
    {
      v8 = (_QWORD *)*v5;
      v9 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[4];
      if (v9)
        v9(0, v5 + 4, 0, 0, 0);
      operator delete(v5);
      v5 = v8;
    }
    while (v8);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  return this;
}

void sub_190EF450C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  E5RT::ConfigOptions *v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  v5 = v4;
  MEMORY[0x19401CD90](v5, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v3);
  _Unwind_Resume(a1);
}

void sub_190EF4544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  E5RT::ConfigOptions *v3;
  va_list va;

  va_start(va, a3);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v3);
  _Unwind_Resume(a1);
}

uint64_t std::any::operator=[abi:ne180100]<BOOL,BOOL,void>(uint64_t a1, unsigned __int8 *a2)
{
  void (*v3)(int);
  unsigned __int8 v4;
  void (*v5)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  _QWORD v7[4];
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v3 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v4 = *a2;
  v7[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v7[1] = v4;
  if (v7 == (_QWORD *)a1)
    goto LABEL_6;
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))a1;
  if (!*(_QWORD *)a1)
  {
    *(_BYTE *)(a1 + 8) = v4;
    *(_QWORD *)a1 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    return a1;
  }
  v8[0] = 0;
  v8[1] = 0;
  v5(2, a1, v8, 0, 0);
  ((void (*)(uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD))v7[0])(2, v7, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v8[0])(2, v8, v7, 0, 0);
  if (v8[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v8[0])(0, v8, 0, 0, 0);
  v3 = (void (*)(int))v7[0];
  if (v7[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v3)(0, v7, 0, 0, 0);
  return a1;
}

void sub_190EF4698(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void (*v6)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v2[4];
      if (v6)
        v6(0, v2 + 4, 0, 0, 0);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void E5RT::ExecutionStreamOperationConfigOptions::~ExecutionStreamOperationConfigOptions(E5RT::ExecutionStreamOperationConfigOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::ExecutionStreamOperationConfigOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

uint64_t E5RT::ExecutionStreamOperationConfigOptions::SetPrewireModelMemory(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "prewireModelMemory<BOOL>", 24, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF4838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

E5RT::ExecutionStreamOperationConfigOptions *E5RT::ExecutionStreamOperationConfigOptions::Create@<X0>(E5RT::ExecutionStreamOperationConfigOptions **a1@<X8>)
{
  E5RT::ExecutionStreamOperationConfigOptions *v3;
  E5RT::ExecutionStreamOperationConfigOptions *result;

  v3 = (E5RT::ExecutionStreamOperationConfigOptions *)operator new();
  result = E5RT::ExecutionStreamOperationConfigOptions::ExecutionStreamOperationConfigOptions(v3);
  *a1 = v3;
  return result;
}

void sub_190EF48BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  std::bad_any_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  v1 = std::bad_any_cast::bad_any_cast(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E78], (void (*)(void *))std::bad_any_cast::~bad_any_cast);
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x1E0DE5010] + 16);
  return result;
}

void std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_190EF4968()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_190EF497C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = 0;
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(v3 + 8);
  *(_QWORD *)a3 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  return result;
}

uint64_t sub_190EF49A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = 0;
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(v3 + 8);
  *(_QWORD *)a3 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_190EF49C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    if (v6 != v7)
    {
      if ((v7 & v6) < 0 == __OFSUB__(v6, v7))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v7 & 0x7FFFFFFFFFFFFFFFLL)))
        return 0;
    }
  }
  else if (a5 != &std::__any_imp::__unique_typeinfo<BOOL>::__id)
  {
    return 0;
  }
  return v5 + 8;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string_view,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string_view,std::any>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v2[4];
      if (v3)
        v3(0, v2 + 4, 0, 0, 0);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_190EF4AA8(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);
  JUMPOUT(0x19401CD90);
}

void sub_190EF4ACC(std::__fs::filesystem::path *a1, std::string *a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  std::__fs::filesystem::path *v5;
  std::__fs::filesystem::path __replacement;

  a1->__pn_.__r_.__value_.__r.__words[0] = 0;
  a1->__pn_.__r_.__value_.__l.__size_ = 0;
  a1->__pn_.__r_.__value_.__r.__words[2] = 0;
  v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v3 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(&a1->__pn_, a2, (std::string *)((char *)a2 + v3));
  memset(&__replacement, 0, sizeof(__replacement));
  std::string::append[abi:ne180100]<char const*,0>(&__replacement.__pn_, (std::string *)".weights", (std::string *)"");
  v5 = std::__fs::filesystem::path::replace_extension(a1, &__replacement);
  std::string::operator=(&a1->__pn_, &v5->__pn_);
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
}

void sub_190EF4B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  int v6;
  std::__fs::filesystem::path *v7;
  std::string::size_type size;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
    return std::string::operator=(&a3->__pn_, &this->__pn_);
  if (std::__fs::filesystem::path::__filename(a3).__size_)
    std::string::push_back(&a3->__pn_, 47);
  v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = this;
  else
    v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  else
    size = this->__pn_.__r_.__value_.__l.__size_;
  return std::string::append(&a3->__pn_, (const std::string::value_type *)v7, size);
}

void sub_190EF4C40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double sub_190EF4C5C()
{
  double result;
  __int128 v1;
  uint64_t v2;

  E5RT::GetPlatformBuildVersion(&v1);
  if (byte_1EE214787 < 0)
    operator delete((void *)xmmword_1EE214770);
  result = *(double *)&v1;
  xmmword_1EE214770 = v1;
  unk_1EE214780 = v2;
  return result;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  __int128 v33;
  char v34;
  char *v35;
  size_t v36;
  char *v37;
  char *v38;
  _OWORD *v39;
  __int128 *v40;
  unint64_t v41;
  __int128 v42;
  char v43;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = __dst - v11;
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v15 = (size_t)operator new(v15);
    }
    else
    {
      v16 = 0;
    }
    v25 = v15 + v13;
    v26 = v15;
    memcpy((void *)(v15 + v13), __src, a5);
    v27 = v26;
    v28 = v25;
    if (v11 != v5)
    {
      v29 = v5;
      v28 = v25;
      if (v13 < 0x20)
        goto LABEL_47;
      v29 = v5;
      v28 = v25;
      if ((unint64_t)&v11[-v27] < 0x20)
        goto LABEL_47;
      v29 = &v5[-(v13 & 0xFFFFFFFFFFFFFFE0)];
      v28 = v25 - (v13 & 0xFFFFFFFFFFFFFFE0);
      v30 = v5 - 16;
      v31 = (char *)(v27 + v5 - 16 - v11);
      v32 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v33 = *(_OWORD *)v30;
        *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
        *(_OWORD *)v31 = v33;
        v31 -= 32;
        v30 -= 32;
        v32 -= 32;
      }
      while (v32);
      if (v13 != (v13 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_47:
        do
        {
          v34 = *--v29;
          *(_BYTE *)--v28 = v34;
        }
        while (v29 != v11);
      }
      v10 = *(char **)(a1 + 8);
    }
    v35 = (char *)(v25 + a5);
    v36 = v27 + v16;
    if (v10 != v5)
      memmove(v35, v5, v10 - v5);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v35[v10 - v5];
    *(_QWORD *)(a1 + 16) = v36;
    if (v37)
      operator delete(v37);
    return (char *)v25;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
    v21 = &__dst[a5];
    v22 = &v10[-a5];
    v23 = v20;
    if ((unint64_t)v10 < a5)
      goto LABEL_39;
    goto LABEL_18;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    v21 = &v5[a5];
    v22 = &v20[-a5];
    v23 = &v10[v19];
    if (&v20[-a5] >= v10)
      goto LABEL_39;
LABEL_18:
    v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        v38 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        v39 = v20 + 16;
        v40 = (__int128 *)(v22 + 16);
        v41 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 32;
        }
        while (v41);
        v22 = v38;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_39;
      }
    }
    else
    {
      v23 = v20;
    }
    do
    {
      v43 = *v22++;
      *v23++ = v43;
    }
    while (v22 != v10);
LABEL_39:
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(v21, v5, v20 - v21);
    if (v18 != __src)
      memmove(v5, __src, v18 - __src);
  }
  return v5;
}

double sub_190EF4F60()
{
  double result;
  __int128 v1;
  uint64_t v2;

  E5RT::GetPlatformBuildVersion(&v1);
  if (byte_1EE21479F < 0)
    operator delete((void *)xmmword_1EE214788);
  result = *(double *)&v1;
  xmmword_1EE214788 = v1;
  unk_1EE214798 = v2;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<char *>,std::__wrap_iter<char *>,std::back_insert_iterator<std::vector<unsigned char>>,0>(char *a1, char *a2, unint64_t *a3)
{
  char *v4;
  _BYTE *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  char v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;

  v4 = a1;
  if (a1 != a2)
  {
    v6 = (_BYTE *)a3[1];
    while (1)
    {
      v8 = *v4;
      v9 = a3[2];
      if ((unint64_t)v6 >= v9)
        break;
      *v6 = v8;
      v7 = (uint64_t)(v6 + 1);
LABEL_4:
      a3[1] = v7;
      ++v4;
      v6 = (_BYTE *)v7;
      if (v4 == a2)
        return a2;
    }
    v10 = *a3;
    v11 = (unint64_t)&v6[-*a3];
    v12 = v11 + 1;
    if ((uint64_t)(v11 + 1) < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = v9 - v10;
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = operator new(v14);
      v16 = (char *)v15 + v11;
      *((_BYTE *)v15 + v11) = v8;
      v7 = (uint64_t)v15 + v11 + 1;
      if (v6 == (_BYTE *)v10)
      {
LABEL_24:
        *a3 = (unint64_t)v16;
        a3[1] = v7;
        a3[2] = (unint64_t)v15 + v14;
        if (v6)
          operator delete(v6);
        goto LABEL_4;
      }
    }
    else
    {
      v15 = 0;
      v16 = &v6[-*a3];
      *(_BYTE *)v11 = v8;
      v7 = v11 + 1;
      if (v6 == (_BYTE *)v10)
        goto LABEL_24;
    }
    if (v11 < 8
      || (char *)v15 + v11 + v10 - (_QWORD)v6 > (char *)v15 + v11 - 1
      || v10 > (unint64_t)(v6 - 1)
      || v10 - (unint64_t)v15 < 0x20)
    {
      v17 = v6;
      goto LABEL_21;
    }
    if (v11 >= 0x20)
    {
      v20 = v11 & 0xFFFFFFFFFFFFFFE0;
      v21 = (char *)v15 + v11 - 16;
      v22 = (__int128 *)(v6 - 16);
      v23 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 32;
      }
      while (v23);
      if (v11 == v20)
        goto LABEL_23;
      if ((v11 & 0x18) == 0)
      {
        v16 -= v20;
        v17 = &v6[-v20];
LABEL_21:
        v18 = v16 - 1;
        do
        {
          v19 = *--v17;
          *v18-- = v19;
        }
        while (v17 != (_BYTE *)v10);
LABEL_23:
        v6 = (_BYTE *)*a3;
        v16 = (char *)v15;
        goto LABEL_24;
      }
    }
    else
    {
      v20 = 0;
    }
    v17 = &v6[-(v11 & 0xFFFFFFFFFFFFFFF8)];
    v16 -= v11 & 0xFFFFFFFFFFFFFFF8;
    v25 = &v6[-v20 - v10 - 8 + (_QWORD)v15];
    v26 = (uint64_t *)&v6[-v20 - 8];
    v27 = v20 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v28 = *v26--;
      *v25-- = v28;
      v27 += 8;
    }
    while (v27);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
    goto LABEL_21;
  }
  return v4;
}

uint64_t std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(void **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _BYTE *v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  std::string *v26;
  char *v27;
  std::string *v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  void *v33;
  std::string *v34;
  std::string *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  void *v40;
  uint64_t v41;
  __int128 *v42;
  char *v43;
  __int128 v44;
  char *v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  std::string *v49;
  std::string *v51;
  char *v52;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 24;
  v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = a1[2];
  v12 = (__int128 *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v12) >> 3)) >= a5)
  {
    v19 = a5 + 1;
    v20 = a3;
    do
    {
      v20 = (_QWORD *)*v20;
      --v19;
    }
    while (v19 > 1);
    v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3);
    if (v21 >= a5)
    {
      v27 = (char *)a1[1];
      goto LABEL_48;
    }
    if ((uint64_t)v12 - v7 < 1)
    {
      v20 = a3;
      if (a3 != a4)
      {
LABEL_19:
        v23 = 0;
        v24 = v20;
        do
        {
          v26 = (std::string *)((char *)v12 + v23);
          if (*((char *)v24 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)v24[2], v24[3]);
          }
          else
          {
            v25 = *((_OWORD *)v24 + 1);
            v26->__r_.__value_.__r.__words[2] = v24[4];
            *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v25;
          }
          v24 = (_QWORD *)*v24;
          v23 += 24;
        }
        while (v24 != a4);
        v27 = (char *)v12 + v23;
        a1[1] = (char *)v12 + v23;
        if (v21 < 1)
          return v7;
LABEL_48:
        v41 = v7 + 24 * a5;
        v42 = (__int128 *)&v27[-24 * a5];
        v43 = v27;
        if (v42 < v12)
        {
          v43 = v27;
          do
          {
            v44 = *v42;
            *((_QWORD *)v43 + 2) = *((_QWORD *)v42 + 2);
            *(_OWORD *)v43 = v44;
            v43 += 24;
            *((_QWORD *)v42 + 1) = 0;
            *((_QWORD *)v42 + 2) = 0;
            *(_QWORD *)v42 = 0;
            v42 = (__int128 *)((char *)v42 + 24);
          }
          while (v42 < v12);
        }
        a1[1] = v43;
        if (v27 != (char *)v41)
        {
          v45 = v27 - 24;
          v46 = 8 * ((uint64_t)&v27[-v41] >> 3);
          do
          {
            if (v45[23] < 0)
              operator delete(*(void **)v45);
            v47 = (__int128 *)(v7 + v46 - 24);
            v48 = *v47;
            *((_QWORD *)v45 + 2) = *(_QWORD *)(v7 + v46 - 8);
            *(_OWORD *)v45 = v48;
            v45 -= 24;
            *(_BYTE *)(v7 + v46 - 1) = 0;
            *(_BYTE *)v47 = 0;
            v46 -= 24;
          }
          while (v46);
        }
        if (v20 != v9)
        {
          v49 = (std::string *)v7;
          do
          {
            std::string::operator=(v49, (const std::string *)(v9 + 2));
            v9 = (_QWORD *)*v9;
            ++v49;
          }
          while (v9 != v20);
        }
        return v7;
      }
    }
    else
    {
      v22 = v21 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)*v20;
        --v22;
      }
      while (v22 > 1);
      if (v20 != a4)
        goto LABEL_19;
    }
    v27 = (char *)a1[1];
    a1[1] = v12;
    if (v21 >= 1)
      goto LABEL_48;
    return v7;
  }
  v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = (char *)operator new(24 * v16);
  }
  else
  {
    v17 = 0;
  }
  v28 = (std::string *)&v17[24 * v6];
  v51 = v28;
  v52 = &v17[24 * v16];
  v29 = a5;
  v30 = &v28[v29];
  do
  {
    if (*((char *)v9 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)v9[2], v9[3]);
    }
    else
    {
      v31 = *((_OWORD *)v9 + 1);
      v28->__r_.__value_.__r.__words[2] = v9[4];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v31;
    }
    ++v28;
    v9 = (_QWORD *)*v9;
    --v29;
  }
  while (v29 * 24);
  v32 = v51;
  v33 = *a1;
  v34 = v51;
  if (*a1 != (void *)v7)
  {
    v35 = v51;
    v36 = v7;
    do
    {
      v34 = v35 - 1;
      v37 = *(_OWORD *)(v36 - 24);
      v35[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 - 8);
      *(_OWORD *)&v35[-1].__r_.__value_.__l.__data_ = v37;
      *(_QWORD *)(v36 - 16) = 0;
      *(_QWORD *)(v36 - 8) = 0;
      *(_QWORD *)(v36 - 24) = 0;
      --v35;
      v36 -= 24;
    }
    while ((void *)v36 != v33);
  }
  v38 = a1[1];
  if (v38 != (void *)v7)
  {
    do
    {
      v39 = *(_OWORD *)v7;
      v30->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v39;
      ++v30;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v38);
    v7 = (uint64_t)a1[1];
  }
  v40 = *a1;
  *a1 = v34;
  a1[1] = v30;
  a1[2] = v52;
  while ((void *)v7 != v40)
  {
    if (*(char *)(v7 - 1) < 0)
      operator delete(*(void **)(v7 - 24));
    v7 -= 24;
  }
  if (v40)
    operator delete(v40);
  return (uint64_t)v32;
}

void sub_190EF5600(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::string>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  std::string *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = (std::string *)&v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_190EF5754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_190EF5768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

void (**std::any::operator=[abi:ne180100]<std::vector<E5RT::ComputeDeviceType>,std::vector<E5RT::ComputeDeviceType>,void>(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  void (*v5)(int);
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v9[2] = v4;
  v9[3] = v5;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
  v9[0] = std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
  v9[1] = v3;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    a1[2] = v4;
    a1[3] = v5;
    *a1 = std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
    a1[1] = v3;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_190EF5ADC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void (**std::any::operator=[abi:ne180100]<std::vector<std::string>,std::vector<std::string>,void>(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  void (*v5)(int);
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v9[2] = v4;
  v9[3] = v5;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
  v9[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
  v9[1] = v3;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    a1[2] = v4;
    a1[3] = v5;
    *a1 = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    a1[1] = v3;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_190EF5C30(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::any::operator=[abi:ne180100]<std::string,std::string,void>(uint64_t a1, __int128 *a2)
{
  void (*v3)(int);
  void (*v4)(int);
  void (*v6)(int);
  __int128 v7;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  v6 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  if (&v6 == (void (**)(int))a1)
    goto LABEL_6;
  v4 = *(void (**)(int))a1;
  if (!*(_QWORD *)a1)
  {
    *(_OWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)a1 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  ((void (*)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))v4)(2, a1, v9, 0, 0);
  v6(2);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, &v6, 0, 0);
  if (v9[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v9[0])(0, v9, 0, 0, 0);
  v3 = v6;
  if (v6)
LABEL_6:
    v3(0);
  return a1;
}

void sub_190EF5D94(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5CompilerOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

void E5RT::E5CompilerOptions::SetMilEntryPoints(uint64_t a1, uint64_t *a2)
{
  const void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *exception;
  void *__p[3];
  char v13[8];
  _QWORD v14[6];

  v14[5] = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = v6 - *a2;
    if (v6 != *a2)
      goto LABEL_3;
LABEL_15:
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v14[2]) = 17;
    strcpy((char *)v14, "SetMilEntryPoints");
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_191A72430;
    strcpy((char *)__p[0], "Cannot provide empty entry points.");
    E5RT::Status::Status(v13, 1, __p);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  v4 = 0;
  v5 = *a2;
  v6 = a2[1];
  v7 = v6 - *a2;
  if (v6 == *a2)
    goto LABEL_15;
LABEL_3:
  memset(__p, 0, sizeof(__p));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__p, v5, v6, 0xAAAAAAAAAAAAAAABLL * (v7 >> 3));
  *(_OWORD *)&v14[1] = *(_OWORD *)__p;
  v14[3] = __p[2];
  memset(__p, 0, sizeof(__p));
  v14[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
  (*(void (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, "milEntryPoints<std::vector<std::string>>", 40, v14);
  if (v14[0])
    ((void (*)(int))v14[0])(0);
  v8 = (void **)__p[0];
  if (__p[0])
  {
    v9 = (void **)__p[1];
    v10 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p[0];
    }
    __p[1] = v8;
    operator delete(v10);
  }
}

void sub_190EF5FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetMilEntryPoints(const void **this)
{
  void *v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "milEntryPoints<std::vector<std::string>>", 40);
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

uint64_t E5RT::E5CompilerOptions::SetEnableProfiling(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "enableProfiling<BOOL>", 21, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF61C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetEnableProfiling(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "enableProfiling<BOOL>", 21);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::SetForceRecompilation(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "forceRecompilation<BOOL>", 24, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF6340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetForceFetchFromCache(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "forceFetchFromCache<BOOL>", 25, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF643C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetForceFetchFromCache(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "forceFetchFromCache<BOOL>", 25);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

void E5RT::E5CompilerOptions::SetExperimentalForceClassicCpuBackend(E5RT::E5CompilerOptions *this, int a2)
{
  const void *v3;
  void *v4;
  _QWORD *v5;
  unsigned __int16 ***v6;
  unsigned __int16 **v7;
  uint64_t v8;
  unsigned __int16 **v9;
  unsigned __int16 **v10;
  int v11;
  int v12;
  unsigned __int16 *v14;
  uint64_t v15;
  void **v17;
  void **v18;
  void *v19;
  void **v20;
  void **v21;
  void **v22;
  void *exception;
  void *__p;
  __int128 v25;
  void *v26[2];
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  else
    v4 = 0;
  v5 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!*v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  v7 = *v6;
  if ((char *)v6[1] - (char *)*v6 != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_QWORD *)&v28[0] = operator new(0x28uLL);
    *(_OWORD *)((char *)v28 + 8) = xmmword_191A72440;
    strcpy(*(char **)&v28[0], "SetExperimentalForceClassicCpuBackend");
    __p = operator new(0x60uLL);
    v25 = xmmword_191A72450;
    strcpy((char *)__p, "SetExperimentalForceClassicCpuBackend is not supported when multiple CPU backends are set.");
    E5RT::Status::Status(v26, 2, &__p);
    E5RT::E5RTError::E5RTError(exception, v28, v26);
  }
  v8 = *((unsigned __int8 *)v7 + 23);
  if (!a2)
  {
    if ((v8 & 0x80) != 0)
    {
      v10 = (unsigned __int16 **)*v7;
      if (v7[1] != (unsigned __int16 *)11)
        goto LABEL_27;
    }
    else
    {
      v10 = *v6;
      if (v8 != 11)
        goto LABEL_27;
    }
    v14 = *v10;
    v15 = *(uint64_t *)((char *)v10 + 3);
    if (v14 == (unsigned __int16 *)0x5F63697373616C63 && v15 == 0x7570635F63697373)
    {
      v27 = 3;
      strcpy((char *)v26, "mlc");
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
      memset(v28, 0, sizeof(v28));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)__p) >> 3));
      *(_QWORD *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
      if (*(_QWORD *)&v28[0])
        (*(void (**)(int))&v28[0])(0);
      v17 = (void **)__p;
      if (!__p)
        goto LABEL_68;
      v22 = (void **)v25;
      v19 = __p;
      if ((void *)v25 == __p)
        goto LABEL_67;
      do
      {
        if (*((char *)v22 - 1) < 0)
          operator delete(*(v22 - 3));
        v22 -= 3;
      }
      while (v22 != v17);
      goto LABEL_66;
    }
LABEL_27:
    if ((v8 & 0x80) != 0)
    {
      v7 = (unsigned __int16 **)*v7;
      if ((*v6)[1] != (unsigned __int16 *)4)
        return;
    }
    else if (v8 != 4)
    {
      return;
    }
    if (*(_DWORD *)v7 == 1936617058)
    {
      v27 = 8;
      strcpy((char *)v26, "mlc/bnns");
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
      memset(v28, 0, sizeof(v28));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)__p) >> 3));
      *(_QWORD *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
      if (*(_QWORD *)&v28[0])
        (*(void (**)(int))&v28[0])(0);
      v17 = (void **)__p;
      if (!__p)
        goto LABEL_68;
      v20 = (void **)v25;
      v19 = __p;
      if ((void *)v25 == __p)
        goto LABEL_67;
      do
      {
        if (*((char *)v20 - 1) < 0)
          operator delete(*(v20 - 3));
        v20 -= 3;
      }
      while (v20 != v17);
      goto LABEL_66;
    }
    return;
  }
  if ((v8 & 0x80) != 0)
  {
    v9 = (unsigned __int16 **)*v7;
    if (v7[1] != (unsigned __int16 *)3)
      goto LABEL_19;
LABEL_15:
    v11 = *(unsigned __int16 *)v9;
    v12 = *((unsigned __int8 *)v9 + 2);
    if (v11 == 27757 && v12 == 99)
    {
      v27 = 11;
      strcpy((char *)v26, "classic_cpu");
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
      memset(v28, 0, sizeof(v28));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)__p) >> 3));
      *(_QWORD *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
      if (*(_QWORD *)&v28[0])
        (*(void (**)(int))&v28[0])(0);
      v17 = (void **)__p;
      if (!__p)
        goto LABEL_68;
      v21 = (void **)v25;
      v19 = __p;
      if ((void *)v25 == __p)
        goto LABEL_67;
      do
      {
        if (*((char *)v21 - 1) < 0)
          operator delete(*(v21 - 3));
        v21 -= 3;
      }
      while (v21 != v17);
      goto LABEL_66;
    }
    goto LABEL_19;
  }
  v9 = *v6;
  if (v8 == 3)
    goto LABEL_15;
LABEL_19:
  if ((v8 & 0x80) != 0)
  {
    v7 = (unsigned __int16 **)*v7;
    if ((*v6)[1] != (unsigned __int16 *)8)
      return;
  }
  else if (v8 != 8)
  {
    return;
  }
  if (*v7 == (unsigned __int16 *)0x736E6E622F636C6DLL)
  {
    v27 = 4;
    strcpy((char *)v26, "bnns");
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
    memset(v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)__p) >> 3));
    *(_QWORD *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
    if (*(_QWORD *)&v28[0])
      (*(void (**)(int))&v28[0])(0);
    v17 = (void **)__p;
    if (!__p)
      goto LABEL_68;
    v18 = (void **)v25;
    v19 = __p;
    if ((void *)v25 == __p)
    {
LABEL_67:
      *(_QWORD *)&v25 = v17;
      operator delete(v19);
LABEL_68:
      if (v27 < 0)
        operator delete(v26[0]);
      return;
    }
    do
    {
      if (*((char *)v18 - 1) < 0)
        operator delete(*(v18 - 3));
      v18 -= 3;
    }
    while (v18 != v17);
LABEL_66:
    v19 = __p;
    goto LABEL_67;
  }
}

void sub_190EF6B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_190EF6DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;
  operator delete(v3);
  __cxa_free_exception(v2);
  _Unwind_Resume(a1);
}

BOOL E5RT::E5CompilerOptions::GetExperimentalForceClassicCpuBackend(const void **this)
{
  void *v1;
  _QWORD *v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *exception;
  char *v12;
  __int128 v13;
  _BYTE v14[8];
  char *v15;
  __int128 v16;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  v4 = *v3;
  if ((char *)v3[1] - (char *)*v3 != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v15 = (char *)operator new(0x28uLL);
    v16 = xmmword_191A72440;
    strcpy(v15, "GetExperimentalForceClassicCpuBackend");
    v12 = (char *)operator new(0x60uLL);
    v13 = xmmword_191A72450;
    strcpy(v12, "GetExperimentalForceClassicCpuBackend is not supported when multiple CPU backends are set.");
    E5RT::Status::Status(v14, 2, &v12);
    E5RT::E5RTError::E5RTError(exception, &v15, v14);
  }
  v5 = *((unsigned __int8 *)v4 + 23);
  if (*((char *)v4 + 23) < 0)
  {
    v6 = (uint64_t *)*v4;
    if (v4[1] != 11)
      goto LABEL_12;
  }
  else
  {
    v6 = *v3;
    if (v5 != 11)
      goto LABEL_12;
  }
  v7 = *v6;
  v8 = *(uint64_t *)((char *)v6 + 3);
  if (v7 == 0x5F63697373616C63 && v8 == 0x7570635F63697373)
    return 1;
LABEL_12:
  if ((v5 & 0x80) != 0)
  {
    v4 = (uint64_t *)*v4;
    if ((*v3)[1] == 4)
      return *(_DWORD *)v4 == 1936617058;
  }
  else if (v5 == 4)
  {
    return *(_DWORD *)v4 == 1936617058;
  }
  return 0;
}

void sub_190EF7000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::E5CompilerOptions::SetForceBNNSGraph(E5RT::E5CompilerOptions *this, int a2)
{
  const void *v3;
  void *v4;
  _QWORD *v5;
  unsigned __int16 ***v6;
  unsigned __int16 **v7;
  uint64_t v8;
  unsigned __int16 **v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  unsigned __int16 **v14;
  uint64_t v15;
  void **v17;
  void **v18;
  void *v19;
  void **v20;
  void **v21;
  void **v22;
  void *exception;
  void *__p;
  __int128 v25;
  void *v26[2];
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  else
    v4 = 0;
  v5 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!*v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  v7 = *v6;
  if ((char *)v6[1] - (char *)*v6 != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    BYTE7(v28[1]) = 17;
    strcpy((char *)v28, "SetForceBNNSGraph");
    __p = operator new(0x48uLL);
    v25 = xmmword_191A72460;
    strcpy((char *)__p, "SetForceBNNSGraph is not supported when multiple CPU backends are set.");
    E5RT::Status::Status(v26, 2, &__p);
    E5RT::E5RTError::E5RTError(exception, v28, v26);
  }
  v8 = *((unsigned __int8 *)v7 + 23);
  if (a2)
  {
    if ((v8 & 0x80) != 0)
    {
      v9 = (unsigned __int16 **)*v7;
      if (v7[1] != (unsigned __int16 *)3)
        goto LABEL_19;
    }
    else
    {
      v9 = *v6;
      if (v8 != 3)
        goto LABEL_19;
    }
    v11 = *(unsigned __int16 *)v9;
    v12 = *((unsigned __int8 *)v9 + 2);
    if (v11 == 27757 && v12 == 99)
    {
      v27 = 8;
      strcpy((char *)v26, "mlc/bnns");
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
      memset(v28, 0, sizeof(v28));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)__p) >> 3));
      *(_QWORD *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
      if (*(_QWORD *)&v28[0])
        (*(void (**)(int))&v28[0])(0);
      v17 = (void **)__p;
      if (!__p)
        goto LABEL_69;
      v21 = (void **)v25;
      v19 = __p;
      if ((void *)v25 == __p)
        goto LABEL_68;
      do
      {
        if (*((char *)v21 - 1) < 0)
          operator delete(*(v21 - 3));
        v21 -= 3;
      }
      while (v21 != v17);
      goto LABEL_67;
    }
LABEL_19:
    if ((v8 & 0x80) != 0)
    {
      v7 = (unsigned __int16 **)*v7;
      if ((*v6)[1] != (unsigned __int16 *)11)
        return;
    }
    else if (v8 != 11)
    {
      return;
    }
    v14 = (unsigned __int16 **)*v7;
    v15 = *(uint64_t *)((char *)v7 + 3);
    if (v14 != (unsigned __int16 **)0x5F63697373616C63 || v15 != 0x7570635F63697373)
      return;
    v27 = 4;
    strcpy((char *)v26, "bnns");
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
    memset(v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)__p) >> 3));
    *(_QWORD *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
    if (*(_QWORD *)&v28[0])
      (*(void (**)(int))&v28[0])(0);
    v17 = (void **)__p;
    if (!__p)
    {
LABEL_69:
      if (v27 < 0)
        operator delete(v26[0]);
      return;
    }
    v18 = (void **)v25;
    v19 = __p;
    if ((void *)v25 == __p)
    {
LABEL_68:
      *(_QWORD *)&v25 = v17;
      operator delete(v19);
      goto LABEL_69;
    }
    do
    {
      if (*((char *)v18 - 1) < 0)
        operator delete(*(v18 - 3));
      v18 -= 3;
    }
    while (v18 != v17);
LABEL_67:
    v19 = __p;
    goto LABEL_68;
  }
  if ((v8 & 0x80) != 0)
  {
    v10 = *v7;
    if (v7[1] != (unsigned __int16 *)4)
      goto LABEL_24;
  }
  else
  {
    v10 = (unsigned __int16 *)*v6;
    if (v8 != 4)
      goto LABEL_24;
  }
  if (*(_DWORD *)v10 == 1936617058)
  {
    v27 = 11;
    strcpy((char *)v26, "classic_cpu");
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
    memset(v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)__p) >> 3));
    *(_QWORD *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
    if (*(_QWORD *)&v28[0])
      (*(void (**)(int))&v28[0])(0);
    v17 = (void **)__p;
    if (!__p)
      goto LABEL_69;
    v22 = (void **)v25;
    v19 = __p;
    if ((void *)v25 == __p)
      goto LABEL_68;
    do
    {
      if (*((char *)v22 - 1) < 0)
        operator delete(*(v22 - 3));
      v22 -= 3;
    }
    while (v22 != v17);
    goto LABEL_67;
  }
LABEL_24:
  if ((v8 & 0x80) != 0)
  {
    v7 = (unsigned __int16 **)*v7;
    if ((*v6)[1] != (unsigned __int16 *)8)
      return;
  }
  else if (v8 != 8)
  {
    return;
  }
  if (*v7 == (unsigned __int16 *)0x736E6E622F636C6DLL)
  {
    v27 = 3;
    strcpy((char *)v26, "mlc");
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
    memset(v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)__p) >> 3));
    *(_QWORD *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
    if (*(_QWORD *)&v28[0])
      (*(void (**)(int))&v28[0])(0);
    v17 = (void **)__p;
    if (!__p)
      goto LABEL_69;
    v20 = (void **)v25;
    v19 = __p;
    if ((void *)v25 == __p)
      goto LABEL_68;
    do
    {
      if (*((char *)v20 - 1) < 0)
        operator delete(*(v20 - 3));
      v20 -= 3;
    }
    while (v20 != v17);
    goto LABEL_67;
  }
}

void sub_190EF76A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL E5RT::E5CompilerOptions::GetForceBNNSGraph(const void **this)
{
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  void *exception;
  char *v9;
  __int128 v10;
  _BYTE v11[8];
  char v12[32];

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  v4 = (_DWORD *)*v3;
  if (v3[1] - *v3 != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v12[23] = 17;
    strcpy(v12, "GetForceBNNSGraph");
    v9 = (char *)operator new(0x48uLL);
    v10 = xmmword_191A72460;
    strcpy(v9, "GetForceBNNSGraph is not supported when multiple CPU backends are set.");
    E5RT::Status::Status(v11, 2, &v9);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v5 = *((unsigned __int8 *)v4 + 23);
  if (*((char *)v4 + 23) < 0)
  {
    v6 = *(_DWORD **)v4;
    if (*((_QWORD *)v4 + 1) != 4)
      goto LABEL_9;
  }
  else
  {
    v6 = (_DWORD *)*v3;
    if (v5 != 4)
      goto LABEL_9;
  }
  if (*v6 == 1936617058)
    return 1;
LABEL_9:
  if ((v5 & 0x80) != 0)
  {
    v4 = *(_DWORD **)v4;
    if (*(_QWORD *)(*v3 + 8) == 8)
      return *(_QWORD *)v4 == 0x736E6E622F636C6DLL;
  }
  else if (v5 == 8)
  {
    return *(_QWORD *)v4 == 0x736E6E622F636C6DLL;
  }
  return 0;
}

void sub_190EF7AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t E5RT::E5CompilerOptions::GetPreferredCpuBackend(const void **this)
{
  void *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t *v5;
  void *exception;
  char *v7;
  __int128 v8;
  _BYTE v9[8];
  char v10[32];

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  v5 = v3;
  result = *v3;
  if (v5[1] - result != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    strcpy(v10, "GetPreferredCpuBackend");
    v10[23] = 22;
    v7 = (char *)operator new(0x48uLL);
    v8 = xmmword_191A72470;
    strcpy(v7, "Multiple CPU backends are set. Use GetPreferredCpuBackends instead.");
    E5RT::Status::Status(v9, 2, &v7);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  return result;
}

void sub_190EF7CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void E5RT::E5CompilerOptions::SetPreferredCpuBackends(uint64_t a1, uint64_t *a2)
{
  const void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(a1 + 8);
  if (v3)
  else
    v4 = 0;
  v5 = *a2;
  v6 = a2[1];
  memset(v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)v7 + 1, v5, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3));
  *(_QWORD *)&v7[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
  (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v7);
  if (*(_QWORD *)&v7[0])
    (*(void (**)(int))&v7[0])(0);
}

void sub_190EF7DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetPreferredCpuBackends(const void **this)
{
  void *v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

uint64_t E5RT::E5CompilerOptions::SetEnableReshapeWithMinimalAllocations(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "enableReshapeWithMinimalAllocations<BOOL>", 41, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF7F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetEnableReshapeWithMinimalAllocations(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "enableReshapeWithMinimalAllocations<BOOL>", 41);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::SetForceClassicAotOldHw(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "forceClassicAotOldHw<BOOL>", 26, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF80E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetForceClassicAotOldHw(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "forceClassicAotOldHw<BOOL>", 26);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

void E5RT::E5CompilerOptions::SetCustomAneCompilerOptions(uint64_t a1, uint64_t a2)
{
  const void *v3;
  void *v4;
  void (*v5)(int);
  std::string v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    v5 = 0;
    v6.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(std::string *)a2;
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_6:
  v5 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  (*(void (**)(void *, const char *, uint64_t, void (**)(int)))(*(_QWORD *)v4 + 24))(v4, "customAneCompilerOptions<std::string>", 37, &v5);
  if (v5)
    v5(0);
}

void sub_190EF82B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(const void **this)
{
  void *v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "customAneCompilerOptions<std::string>", 37);
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalDisableDataDependentShape(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "experimentalDisableDataDependentShape<BOOL>", 43);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalEnableDefaultFunctionForRangeDim(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "experimentalEnableDefaultFunctionForRangeDim<BOOL>", 50, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF84A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalEnableDefaultFunctionForRangeDim(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "experimentalEnableDefaultFunctionForRangeDim<BOOL>", 50);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatterns(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "experimentalMatchE5MinimalCpuPatterns<BOOL>", 43, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF861C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatterns(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "experimentalMatchE5MinimalCpuPatterns<BOOL>", 43);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatternsForStates(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "experimentalMatchE5MinimalCpuPatternsForStates<BOOL>", 52, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF8794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatternsForStates(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "experimentalMatchE5MinimalCpuPatternsForStates<BOOL>", 52);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMoveReadStateOps(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "experimentalMoveReadStateOps<BOOL>", 34, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalMoveReadStateOps(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "experimentalMoveReadStateOps<BOOL>", 34);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalShrinkQuantGroup(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "experimentalShrinkQuantGroup<BOOL>", 34, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF8A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalShrinkQuantGroup(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "experimentalShrinkQuantGroup<BOOL>", 34);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "experimentalDisableCompileTimeMPSGraphTypeInference<BOOL>", 57, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190EF8BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "experimentalDisableCompileTimeMPSGraphTypeInference<BOOL>", 57);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::operator==(const void **a1, const void **this)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  unsigned __int8 ***v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 **v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  int v32;
  void *v33;
  _QWORD *v34;
  _BYTE *v35;
  void *v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  int v39;
  void *v40;
  _QWORD *v41;
  _BYTE *v42;
  void *v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  int v46;
  void *v47;
  _QWORD *v48;
  _BYTE *v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  unsigned __int8 ***v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 **v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int EnableReshapeWithMinimalAllocations;
  int ForceClassicAotOldHw;
  unsigned __int8 *CustomAneCompilerOptions;
  unsigned __int8 *v69;
  int ExperimentalDisableDataDependentShape;
  int ExperimentalEnableDefaultFunctionForRangeDim;
  int ExperimentalMatchE5MinimalCpuPatterns;
  int ExperimentalMatchE5MinimalCpuPatternsForStates;
  int StateOps;
  int ExperimentalShrinkQuantGroup;
  void *exception;
  int ExperimentalDisableCompileTimeMPSGraphTypeInference;
  _QWORD v79[3];
  char v80[8];
  _QWORD v81[3];

  if (E5RT::ConfigOptions::GetNumConfigOptions((E5RT::ConfigOptions *)this) != 16)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v81, "operator==");
    std::string::basic_string[abi:ne180100]<0>(v79, "Unexpected number of options");
    E5RT::Status::Status(v80, 2, v79);
    E5RT::E5RTError::E5RTError(exception, v81, v80);
  }
  v5 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62);
  if (!*v5)
    goto LABEL_82;
  if (!v6)
    goto LABEL_82;
  v8 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v7 + 16))(v7, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62);
  if (!*v8)
    goto LABEL_82;
  if (!v9)
    goto LABEL_82;
  v11 = *(_QWORD **)v6;
  v10 = *(_QWORD **)(v6 + 8);
  v12 = *(_QWORD **)v9;
  if ((_QWORD *)((char *)v10 - *(_QWORD *)v6) != (_QWORD *)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9))
    return 0;
  if (v11 != v10)
  {
    while (*v11 == *v12)
    {
      ++v11;
      ++v12;
      if (v11 == v10)
        goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  v14 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v13 + 16))(v13, "milEntryPoints<std::vector<std::string>>", 40);
  if (!*v14)
    goto LABEL_82;
  if (!v15)
    goto LABEL_82;
  v17 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v16 + 16))(v16, "milEntryPoints<std::vector<std::string>>", 40);
  if (!*v17)
    goto LABEL_82;
  if (!v18)
    goto LABEL_82;
  v21 = v15;
  v19 = *v15;
  v20 = v21[1];
  v22 = *v18;
  if (v20 - v19 != (char *)v18[1] - (char *)*v18)
    return 0;
  for (; v19 != v20; v22 += 3)
  {
    v23 = *(unsigned __int8 *)(v19 + 23);
    if ((v23 & 0x80u) == 0)
      v24 = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 23);
    else
      v24 = *(unsigned __int8 **)(v19 + 8);
    v25 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
    v26 = (char)v25;
    if ((char)v25 < 0)
      v25 = v22[1];
    if (v24 != v25)
      return 0;
    if (v26 >= 0)
      v27 = (unsigned __int8 *)v22;
    else
      v27 = *v22;
    if ((v23 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v19, v27, *(_QWORD *)(v19 + 8)))
        return 0;
    }
    else if (*(_BYTE *)(v19 + 23))
    {
      v28 = 0;
      while (*(unsigned __int8 *)(v19 + v28) == v27[v28])
      {
        if (v23 == ++v28)
          goto LABEL_32;
      }
      return 0;
    }
LABEL_32:
    v19 += 24;
  }
  v30 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v29 + 16))(v29, "enableProfiling<BOOL>", 21);
  if (!*v30)
    goto LABEL_82;
  v31 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v30)(3, v30, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v31)
    goto LABEL_82;
  v32 = *v31;
  v34 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v33 + 16))(v33, "enableProfiling<BOOL>", 21);
  if (!*v34)
    goto LABEL_82;
  v35 = (_BYTE *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v34)(3, v34, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v35)
    goto LABEL_82;
  if ((v32 != 0) != (*v35 != 0))
    return 0;
  v37 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v36 + 16))(v36, "forceRecompilation<BOOL>", 24);
  if (!*v37)
    goto LABEL_82;
  v38 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v37)(3, v37, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v38)
    goto LABEL_82;
  v39 = *v38;
  v41 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v40 + 16))(v40, "forceRecompilation<BOOL>", 24);
  if (!*v41)
    goto LABEL_82;
  v42 = (_BYTE *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v41)(3, v41, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v42)
    goto LABEL_82;
  if ((v39 != 0) != (*v42 != 0))
    return 0;
  v44 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v43 + 16))(v43, "forceFetchFromCache<BOOL>", 25);
  if (!*v44)
    goto LABEL_82;
  v45 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v44)(3, v44, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v45)
    goto LABEL_82;
  v46 = *v45;
  v48 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v47 + 16))(v47, "forceFetchFromCache<BOOL>", 25);
  if (!*v48)
    goto LABEL_82;
  v49 = (_BYTE *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v48)(3, v48, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v49)
    goto LABEL_82;
  if ((v46 != 0) != (*v49 != 0))
    return 0;
  v51 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v50 + 16))(v50, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!*v51
                                     &std::__any_imp::__unique_typeinfo<std::vector<std::string>>::__id)) == 0)
  {
LABEL_82:
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  v58 = v52;
  v56 = *v52;
  v57 = v58[1];
  v59 = *v55;
  if (v57 - v56 != (char *)v55[1] - (char *)*v55)
    return 0;
  for (; v56 != v57; v59 += 3)
  {
    v60 = *(unsigned __int8 *)(v56 + 23);
    if ((v60 & 0x80u) == 0)
      v61 = (unsigned __int8 *)*(unsigned __int8 *)(v56 + 23);
    else
      v61 = *(unsigned __int8 **)(v56 + 8);
    v62 = (unsigned __int8 *)*((unsigned __int8 *)v59 + 23);
    v63 = (char)v62;
    if ((char)v62 < 0)
      v62 = v59[1];
    if (v61 != v62)
      return 0;
    if (v63 >= 0)
      v64 = (unsigned __int8 *)v59;
    else
      v64 = *v59;
    if ((v60 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v56, v64, *(_QWORD *)(v56 + 8)))
        return 0;
    }
    else if (*(_BYTE *)(v56 + 23))
    {
      v65 = 0;
      while (*(unsigned __int8 *)(v56 + v65) == v64[v65])
      {
        if (v60 == ++v65)
          goto LABEL_70;
      }
      return 0;
    }
LABEL_70:
    v56 += 24;
  }
  EnableReshapeWithMinimalAllocations = E5RT::E5CompilerOptions::GetEnableReshapeWithMinimalAllocations(a1);
  if (EnableReshapeWithMinimalAllocations != E5RT::E5CompilerOptions::GetEnableReshapeWithMinimalAllocations(this))
    return 0;
  ForceClassicAotOldHw = E5RT::E5CompilerOptions::GetForceClassicAotOldHw(a1);
  if (ForceClassicAotOldHw != E5RT::E5CompilerOptions::GetForceClassicAotOldHw(this))
    return 0;
  CustomAneCompilerOptions = (unsigned __int8 *)E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(a1);
  v69 = (unsigned __int8 *)E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(this);
  if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(CustomAneCompilerOptions, v69))
    return 0;
  ExperimentalDisableDataDependentShape = E5RT::E5CompilerOptions::GetExperimentalDisableDataDependentShape(a1);
  if (ExperimentalDisableDataDependentShape != E5RT::E5CompilerOptions::GetExperimentalDisableDataDependentShape(this))
    return 0;
  ExperimentalEnableDefaultFunctionForRangeDim = E5RT::E5CompilerOptions::GetExperimentalEnableDefaultFunctionForRangeDim(a1);
  if (ExperimentalEnableDefaultFunctionForRangeDim != E5RT::E5CompilerOptions::GetExperimentalEnableDefaultFunctionForRangeDim(this))
    return 0;
  ExperimentalMatchE5MinimalCpuPatterns = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatterns(a1);
  if (ExperimentalMatchE5MinimalCpuPatterns != E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatterns(this))
    return 0;
  ExperimentalMatchE5MinimalCpuPatternsForStates = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatternsForStates(a1);
  if (ExperimentalMatchE5MinimalCpuPatternsForStates != E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatternsForStates(this))
    return 0;
  StateOps = E5RT::E5CompilerOptions::GetExperimentalMoveReadStateOps(a1);
  if (StateOps != E5RT::E5CompilerOptions::GetExperimentalMoveReadStateOps(this))
    return 0;
  ExperimentalShrinkQuantGroup = E5RT::E5CompilerOptions::GetExperimentalShrinkQuantGroup(a1);
  if (ExperimentalShrinkQuantGroup != E5RT::E5CompilerOptions::GetExperimentalShrinkQuantGroup(this))
    return 0;
  ExperimentalDisableCompileTimeMPSGraphTypeInference = E5RT::E5CompilerOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(a1);
  return ExperimentalDisableCompileTimeMPSGraphTypeInference ^ E5RT::E5CompilerOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(this) ^ 1;
}

void sub_190EF9558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

uint64_t E5RT::E5CompilerOptions::operator!=(const void **a1, const void **a2)
{
  return E5RT::E5CompilerOptions::operator==(a1, a2) ^ 1;
}

void std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_190EF96D4()
{
  _QWORD *v0;
  void *v1;
  uint64_t result;

  v1 = (void *)v0[1];
  if (v1)
  {
    v0[2] = v1;
    operator delete(v1);
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_190EF96FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__16vectorIN4E5RT17ComputeDeviceTypeENS_9allocatorIS2_EEEE"
      && (((v6 & (unint64_t)"NSt3__16vectorIN4E5RT17ComputeDeviceTypeENS_9allocatorIS2_EEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__16vectorIN4E5RT17ComputeDeviceTypeENS_9allocatorIS2_EEEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN4E5RT17ComputeDeviceTypeENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &std::__any_imp::__unique_typeinfo<std::vector<E5RT::ComputeDeviceType>>::__id)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_190EF9840(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = (std::string *)&v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_190EF993C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_190EF9950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_190EF99C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t result;

  v1 = v0[1];
  if (v1)
  {
    v2 = v0[2];
    v3 = (void *)v0[1];
    if (v2 != v1)
    {
      do
      {
        if (*(char *)(v2 - 1) < 0)
          operator delete(*(void **)(v2 - 24));
        v2 -= 24;
      }
      while (v2 != v1);
      v3 = (void *)v0[1];
    }
    v0[2] = v1;
    operator delete(v3);
  }
  result = 0;
  *v0 = 0;
  return result;
}

void std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_190EF9B8C()
{
  uint64_t v0;
  uint64_t result;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*(void **)(v0 + 8));
  result = 0;
  *(_QWORD *)v0 = 0;
  return result;
}

uint64_t sub_190EF9C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000191A72598)
    {
      if (((v6 & 0x8000000191A72598 & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000191A72598))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A72598 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &std::__any_imp::__unique_typeinfo<std::string>::__id)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_190EF9CC4(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);
  JUMPOUT(0x19401CD90);
}

void sub_190EF9CE8(void **a1, uint64_t a2, void **a3)
{
  void *v3;
  void **v6;
  void *v7;

  v3 = *a1;
  if (*a1)
  {
    v6 = (void **)*a3;
    v7 = *a1;
    if (*a3 != v3)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v3);
      v7 = *a1;
    }
    *a3 = v3;
    operator delete(v7);
  }
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::AneInferenceOperationImplUsingAnefAPIs(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  v11 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  E5RT::Ops::Impl::AneInferenceOperationImpl::AneInferenceOperationImpl(a1, a2, (uint64_t)&v11, a4, a5, a6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E2D5BE18;
  *(_QWORD *)(a1 + 208) = 850045863;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 152) = 5;
  *(_DWORD *)(a1 + 156) = objc_msgSend(MEMORY[0x1E0CFDF88], "aneDefaultTaskQoS");
  return a1;
}

void sub_190EF9E38(_Unwind_Exception *a1)
{
  id *v1;
  std::mutex *v2;

  std::unordered_map<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>::~unordered_map[abi:ne180100]((uint64_t)(v1 + 35));
  std::mutex::~mutex(v2);

  E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl((E5RT::Ops::Impl::AneInferenceOperationImpl *)v1);
  _Unwind_Resume(a1);
}

void sub_190EF9EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>::~unordered_map[abi:ne180100](uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::~AneInferenceOperationImplUsingAnefAPIs(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  char v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  id v16;
  uint64_t v17;
  id *v18;
  id *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  _BYTE __p[12];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E2D5BE18;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = (void *)*((_QWORD *)this + 20);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v3, "unloadModel:options:qos:error:", v2, v4, 21, 0);

    if ((v5 & 1) == 0)
    {
      v25 = 4;
      strcpy(__p, "e5rt");
      E5RT::GetE5RTLog((uint64_t)__p);
      v6 = objc_claimAutoreleasedReturnValue();
      if (v25 < 0)
        operator delete(*(void **)__p);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_190EFF760();

    }
    v25 = 4;
    strcpy(__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v25 < 0)
    {
      operator delete(*(void **)__p);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
LABEL_13:

        goto LABEL_14;
      }
    }
    else if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      goto LABEL_13;
    }
    objc_msgSend(*((id *)this + 21), "modelURL");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "path");
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v11 = objc_msgSend(v10, "UTF8String");
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v11;
    _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "Unloaded ANE JIT Model at path = %s \n", __p, 0xCu);

    goto LABEL_13;
  }
LABEL_14:
  if (*((_QWORD *)this + 10) && !*((_QWORD *)this + 15))
  {
    if ((objc_msgSend(*((id *)this + 20), "unloadModel:options:qos:error:", *((_QWORD *)this + 21), MEMORY[0x1E0C9AA70], 21, 0) & 1) == 0)
    {
      v25 = 4;
      strcpy(__p, "e5rt");
      E5RT::GetE5RTLog((uint64_t)__p);
      v12 = objc_claimAutoreleasedReturnValue();
      if (v25 < 0)
        operator delete(*(void **)__p);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(*((id *)this + 21), "modelURL");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "path");
        v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v23 = objc_msgSend(v22, "UTF8String");
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v23;
        _os_log_error_impl(&dword_190DAF000, v12, OS_LOG_TYPE_ERROR, "ANE Model unload failed. (Program path : %s)", __p, 0xCu);

      }
    }
    v25 = 4;
    strcpy(__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v25 < 0)
    {
      operator delete(*(void **)__p);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
LABEL_27:

        goto LABEL_28;
      }
    }
    else if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      goto LABEL_27;
    }
    objc_msgSend(*((id *)this + 21), "modelURL");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "path");
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v17 = objc_msgSend(v16, "UTF8String");
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v17;
    _os_log_impl(&dword_190DAF000, v14, OS_LOG_TYPE_INFO, "Unloaded Adapted ANE Model at path = %s \n", __p, 0xCu);

    goto LABEL_27;
  }
LABEL_28:

  v18 = (id *)*((_QWORD *)this + 37);
  if (v18)
  {
    do
    {
      v19 = (id *)*v18;

      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = (void *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v20)
    operator delete(v20);
  std::mutex::~mutex((std::mutex *)((char *)this + 208));

  E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl(this);
}

{
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::~AneInferenceOperationImplUsingAnefAPIs(this);
  JUMPOUT(0x19401CD90);
}

void sub_190EFA340(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ValidateMutableWeights(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  uint64_t v2;
  void **v3;
  std::vector<std::string>::size_type v4;
  void *exception;
  uint64_t *v6;
  std::vector<std::string>::pointer end;
  __int128 v8;
  __int128 *v9;
  std::string *begin;
  void **v11;
  void **v12;
  void *v13;
  char v14[8];
  _QWORD v15[3];
  _QWORD v16[3];
  std::vector<std::string> v17;
  void **v18;
  void **v19;
  uint64_t v20;

  v2 = *((_QWORD *)this + 2);
  v19 = 0;
  v20 = 0;
  v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 3));
  v3 = v19;
  v4 = *((_QWORD *)this + 10);
  if (v19 == v18)
  {
    if (!v4)
      goto LABEL_24;
  }
  else if (!v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "ValidateMutableWeights");
    E5RT::Status::Status(v15, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::reserve(&v17, v4);
  v6 = (uint64_t *)*((_QWORD *)this + 9);
  if (v6)
  {
    end = v17.__end_;
    do
    {
      v9 = (__int128 *)(v6 + 2);
      if (end < v17.__end_cap_.__value_)
      {
        if (*((char *)v6 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v6[2], v6[3]);
        }
        else
        {
          v8 = *v9;
          end->__r_.__value_.__r.__words[2] = v6[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        }
        ++end;
      }
      else
      {
        end = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v17, (uint64_t)v9);
      }
      v17.__end_ = end;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    end = v17.__end_;
  }
  begin = v17.__begin_;
  v3 = v18;
  if ((char *)end - (char *)v17.__begin_ != (char *)v19 - (char *)v18)
  {
    v13 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "ValidateMutableWeights");
    E5RT::Status::Status(v14, 1, v16);
    E5RT::E5RTError::E5RTError(v13, v15, v14);
  }
  if (v17.__begin_)
  {
    if (end != v17.__begin_)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != begin);
      end = v17.__begin_;
    }
    v17.__end_ = begin;
    operator delete(end);
    v3 = v18;
  }
LABEL_24:
  if (v3)
  {
    v11 = v19;
    v12 = v3;
    if (v19 != v3)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v3);
      v12 = v18;
    }
    v19 = v3;
    operator delete(v12);
  }
}

void sub_190EFA5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  E5RT::Status::~Status((E5RT::Status *)&a11);
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
      {
        operator delete(a23);
        std::vector<std::string>::~vector[abi:ne180100]((void **)(v30 - 56));
        _Unwind_Resume(a1);
      }
      std::vector<std::string>::~vector[abi:ne180100]((void **)(v30 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

void sub_190EFA6F8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _BYTE __p[12];
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v11 = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v3 = objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
  {
    operator delete(*(void **)__p);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  if (os_signpost_enabled(v3))
  {
    v5 = *(uint64_t **)(v2 + 16);
    v6 = v5;
    if (*((char *)v5 + 23) < 0)
    {
      v6 = (uint64_t *)*v5;
      v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
      v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0)
      {
LABEL_8:
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = v6;
        v9 = 2080;
        v10 = v7;
        _os_signpost_emit_with_name_impl(&dword_190DAF000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AneOpPrepareForEncode", "Model=%{signpost.description:attribute}s Procedure=%{signpost.description:attribute}s ", __p, 0x16u);
        goto LABEL_9;
      }
    }
    v7 = (_QWORD *)*v7;
    goto LABEL_8;
  }
LABEL_9:

}

void sub_190EFA844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::unordered_map<std::string,std::string>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_190EFA8BC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  const char *v8;
  size_t v9;
  size_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  E5RT::ExecutionStreamOperationInternal **v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  void **v20;
  _QWORD *Aliases;
  void *v22;
  void *v23;
  int v24;
  uint64_t v25;
  unsigned __int8 **v26;
  id obj;
  uint64_t v28;
  uint64_t v29;
  void **__dst;
  size_t __n;
  int64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = a2;
    v28 = *(_QWORD *)(a1 + 16);
    do
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      obj = **(id **)a1;
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      if (!v4)
        goto LABEL_44;
      v26 = (unsigned __int8 **)(v2 + 2);
      v29 = *(_QWORD *)v34;
      do
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v34 != v29)
            objc_enumerationMutation(obj);
          v6 = objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * v5), "integerValue", v26);
          objc_msgSend(**(id **)(a1 + 8), "objectAtIndexedSubscript:", v6);
          v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v8 = (const char *)objc_msgSend(v7, "UTF8String");
          v9 = strlen(v8);
          if (v9 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v10 = v9;
          if (v9 >= 0x17)
          {
            v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v9 | 7) != 0x17)
              v12 = v9 | 7;
            v13 = v12 + 1;
            p_dst = (void **)operator new(v12 + 1);
            __n = v10;
            v32 = v13 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v32) = v9;
            p_dst = (void **)&__dst;
            if (!v9)
              goto LABEL_16;
          }
          memmove(p_dst, v8, v10);
LABEL_16:
          *((_BYTE *)p_dst + v10) = 0;

          v14 = (E5RT::ExecutionStreamOperationInternal **)v2[5];
          if (!v14 || *v14 != (E5RT::ExecutionStreamOperationInternal *)&off_1E2D59AC8)
            v14 = 0;
          v15 = HIBYTE(v32);
          if (v32 >= 0)
            v16 = HIBYTE(v32);
          else
            v16 = __n;
          v17 = *((unsigned __int8 *)v2 + 39);
          v18 = (char)v17;
          if ((v17 & 0x80u) != 0)
            v17 = v2[3];
          if (v16 == v17)
          {
            if (v18 >= 0)
              v19 = (unsigned __int8 *)v26;
            else
              v19 = *v26;
            if (v32 < 0)
            {
              if (!memcmp(__dst, v19, __n))
                goto LABEL_36;
            }
            else
            {
              if (!HIBYTE(v32))
                goto LABEL_36;
              v20 = (void **)&__dst;
              while (*(unsigned __int8 *)v20 == *v19)
              {
                v20 = (void **)((char *)v20 + 1);
                ++v19;
                if (!--v15)
                  goto LABEL_36;
              }
            }
          }
          Aliases = (_QWORD *)E5RT::IOPortPriv::GetAliases(v14);
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(Aliases, (uint64_t)&__dst))
          {
LABEL_36:
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v6);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = *(void **)(v28 + 344);
            ++**(_QWORD **)(a1 + 24);
            objc_msgSend(v23, "setObject:atIndexedSubscript:", v22);

            v24 = 0;
            if ((SHIBYTE(v32) & 0x80000000) == 0)
              goto LABEL_38;
LABEL_37:
            operator delete(__dst);
            goto LABEL_38;
          }
          v24 = 1;
          if (SHIBYTE(v32) < 0)
            goto LABEL_37;
LABEL_38:
          if (!v24)
            goto LABEL_44;
          ++v5;
        }
        while (v5 != v4);
        v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
        v4 = v25;
      }
      while (v25);
LABEL_44:

      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_190EFABB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{

  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::EncodeOperation(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  void *v2;
  uint64_t **v3;
  unsigned int i;
  E5RT::MemoryObject *MemoryObjectRef;
  void *v6;
  void (**v7)(E5RT::IOBufferObject *__hidden);
  void *v8;
  void *v9;
  uint64_t **j;
  void *v11;
  void *v12;
  void *v13;
  uint64_t **v14;
  unsigned int v15;
  E5RT::MemoryObject *v16;
  void *v17;
  void (**v18)(E5RT::IOBufferObject *__hidden);
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const void **StreamConfigOptions;
  uint64_t SkipIOFences;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v30;
  void *exception;
  _QWORD v32[3];
  _BYTE v33[8];
  _QWORD v34[4];
  __int128 v35;
  __int128 v36;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(*((const void **)this + 4));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "programHandle");
  v34[3] = 0x2B23800800000000;
  v35 = 0u;
  v36 = 0u;
  kdebug_trace();

  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ValidateMutableWeights(this);
  v3 = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                            + 1))
                    + 16);
  for (i = 0; v3; v3 = (uint64_t **)*v3)
  {
    MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v3[5]);
    if (E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef))
    {
      v6 = E5RT::MemoryObject::Buffer(MemoryObjectRef);
      v7 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v6);
    }
    else
    {
      v8 = E5RT::MemoryObject::Surface(MemoryObjectRef);
      v7 = (void (**)(E5RT::IOBufferObject *__hidden))E5RT::SurfaceObject::GetHandle<__IOSurface *>(v8);
    }
    objc_msgSend(MEMORY[0x1E0CFDF50], "objectWithIOSurface:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*((id *)this + 42), "setObject:atIndexedSubscript:", v9, i++);

  }
  for (j = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                                 + 1))
                         + 16); j; j = (uint64_t **)*j)
  {
    v11 = (void *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)j[5]);
    if (!E5RT::MemoryObject::TryAsBuffer(v11))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v34, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v32, "InOut of surface (pixel buffer) type is not supported");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(exception, v34, v33);
    }
    v12 = E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)v11);
    objc_msgSend(MEMORY[0x1E0CFDF50], "objectWithIOSurface:", E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v12));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*((id *)this + 42), "setObject:atIndexedSubscript:", v13, i++);

  }
  v14 = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                              + 1))
                     + 16);
  if (v14)
  {
    v15 = 0;
    do
    {
      v16 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v14[5]);
      if (E5RT::MemoryObject::TryAsBuffer(v16))
      {
        v17 = E5RT::MemoryObject::Buffer(v16);
        v18 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v17);
      }
      else
      {
        v19 = E5RT::MemoryObject::Surface(v16);
        v18 = (void (**)(E5RT::IOBufferObject *__hidden))E5RT::SurfaceObject::GetHandle<__IOSurface *>(v19);
      }
      objc_msgSend(MEMORY[0x1E0CFDF50], "objectWithIOSurface:", v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*((id *)this + 44), "setObject:atIndexedSubscript:", v20, v15++);

      v14 = (uint64_t **)*v14;
    }
    while (v14);
  }
  if (!*((_QWORD *)this + 25))
  {
    objc_msgSend(MEMORY[0x1E0CFDF98], "sharedEventsWithSignalEvents:waitEvents:", *((_QWORD *)this + 41), *((_QWORD *)this + 40));
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = (void *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = v21;

  }
  StreamConfigOptions = (const void **)E5RT::ExecutionStreamOperationInternal::GetStreamConfigOptions(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  SkipIOFences = E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions);
  v25 = (void *)*((_QWORD *)this + 46);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", SkipIOFences);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setObject:forKey:", v26, *MEMORY[0x1E0CFDFD8]);

  objc_msgSend(MEMORY[0x1E0CFDF90], "requestWithInputs:inputIndices:outputs:outputIndices:weightsBuffer:perfStats:procedureIndex:sharedEvents:", *((_QWORD *)this + 42), *((_QWORD *)this + 43), *((_QWORD *)this + 44), *((_QWORD *)this + 45), 0, 0, *((_QWORD *)this + 23), *((_QWORD *)this + 25));
  v27 = objc_claimAutoreleasedReturnValue();
  v28 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v27;

  if ((objc_msgSend(*((id *)this + 24), "validate") & 1) == 0)
  {
    v30 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v34, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v32, "ANE Request validation failed.");
    E5RT::Status::Status(v33, 2, v32);
    E5RT::E5RTError::E5RTError(v30, v34, v33);
  }
  return kdebug_trace();
}

void sub_190EFAFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EFAFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EFAFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EFB008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EFB01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EFB030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EFB044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EFB058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190EFB068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v25 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v25)
  {
LABEL_8:
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a24);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::EvaluateANERequest(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  id v21;
  std::string *v22;
  __int128 v23;
  void **v24;
  std::string::size_type v25;
  NSObject *v26;
  void *exception;
  std::string v28;
  void *__p[2];
  int64_t v30;
  std::string v31;
  id v32;

  v3 = a2;
  v4 = 176;
  if (!*(_QWORD *)(a1 + 176))
    v4 = 168;
  v5 = *(id *)(a1 + v4);
  v6 = *(void **)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 368);
  v8 = *(unsigned int *)(a1 + 156);
  v32 = 0;
  v9 = objc_msgSend(v6, "evaluateWithModel:options:request:qos:error:", v5, v7, v3, v8, &v32);
  v10 = v32;
  v11 = v10;
  if ((v9 & 1) == 0)
  {
    if (!v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "ANE inference operation failed due to unknown error.");
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "EvaluateANERequest");
      E5RT::Status::Status(&v28, 11, &v31);
      E5RT::E5RTError::E5RTError(exception, __p, &v28);
    }
    if (objc_msgSend(v10, "code") != 5)
    {
      if (objc_msgSend(v11, "code") == 16)
      {
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_191A6F7D0;
        strcpy(v31.__r_.__value_.__l.__data_, "ANE inference operation failed due to missing file");
        objc_msgSend(v11, "description");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
        {
          std::string::basic_string[abi:ne180100]<0>(&v28, " with error message = ");
          objc_msgSend(v11, "description");
          v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v17 = std::string::append(&v28, (const std::string::value_type *)objc_msgSend(v16, "UTF8String"));
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v30 = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          if (v30 >= 0)
            v19 = __p;
          else
            v19 = (void **)__p[0];
          if (v30 >= 0)
            v20 = HIBYTE(v30);
          else
            v20 = (std::string::size_type)__p[1];
          std::string::append(&v31, (const std::string::value_type *)v19, v20);
          if (SHIBYTE(v30) < 0)
            operator delete(__p[0]);

          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
        v13 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "EvaluateANERequest");
        E5RT::Status::Status(&v28, 13, &v31);
        E5RT::E5RTError::E5RTError(v13, __p, &v28);
      }
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_191A72610;
      strcpy(v31.__r_.__value_.__l.__data_, "ANE inference operation failed");
      objc_msgSend(v11, "description");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14)
      {
        std::string::basic_string[abi:ne180100]<0>(&v28, " with error message = ");
        objc_msgSend(v11, "description");
        v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v22 = std::string::append(&v28, (const std::string::value_type *)objc_msgSend(v21, "UTF8String"));
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v30 = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if (v30 >= 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
        if (v30 >= 0)
          v25 = HIBYTE(v30);
        else
          v25 = (std::string::size_type)__p[1];
        std::string::append(&v31, (const std::string::value_type *)v24, v25);
        if (SHIBYTE(v30) < 0)
          operator delete(__p[0]);

        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
      }
      v15 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "EvaluateANERequest");
      E5RT::Status::Status(&v28, 11, &v31);
      E5RT::E5RTError::E5RTError(v15, __p, &v28);
    }
    std::string::basic_string[abi:ne180100]<0>(&v31, "e5rt");
    E5RT::GetE5RTLog((uint64_t)&v31);
    v26 = objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      sub_190EFF78C();

  }
}

void sub_190EFB608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  if (a28 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_190EFB7A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190EFB7BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190EFB7D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ExecuteSync(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  void *exception;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v7[3];
  _BYTE v8[8];

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                        + 1)) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v4, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v7, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, &v4, v8);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  v4 = 0x2B23800C00000000;
  v5 = 0u;
  v6 = 0u;
  kdebug_trace();
  objc_msgSend(*((id *)this + 24), "setSharedEvents:", 0);
  objc_msgSend(*((id *)this + 24), "setCompletionHandler:", 0);
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::EvaluateANERequest((uint64_t)this, *((void **)this + 24));
  return kdebug_trace();
}

void sub_190EFB920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EFB934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  E5RT::Status::~Status((E5RT::Status *)(v25 - 40));
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  _BOOL4 v8;
  uint64_t **i;
  uint64_t ActiveFutureValue;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *exception;
  void *v21;
  void *v22;
  _QWORD v23[3];
  _BYTE v24[8];
  E5RT::AsyncEvent *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30[3];
  _QWORD v31[5];
  _BYTE v32[24];
  _BYTE *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8)) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v27, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v30, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v23, 2, v30);
    E5RT::E5RTError::E5RTError(exception, &v27, v23);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  v27 = 0x2B23801800000000;
  v28 = 0u;
  v29 = 0u;
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*(_QWORD *)(a1 + 8), &v25);
  if (!v25)
  {
    v21 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v23, "Completion AsyncEvent (internal or client bound) is required for async submit.");
    E5RT::Status::Status(v24, 11, v23);
    E5RT::E5RTError::E5RTError(v21, v30, v24);
  }
  objc_msgSend(*(id *)(a1 + 192), "sharedEvents");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7 == 0;

  if (v8)
  {
    if (!*(_QWORD *)(a1 + 200))
    {
      v22 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v30, "SubmitAsync");
      std::string::basic_string[abi:ne180100]<0>(v23, "Cannot asynchronously execute ANE op without shared events info.");
      E5RT::Status::Status(v24, 11, v23);
      E5RT::E5RTError::E5RTError(v22, v30, v24);
    }
    objc_msgSend(*(id *)(a1 + 192), "setSharedEvents:");
  }
  for (i = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8))
                         + 16); i; i = (uint64_t **)*i)
  {
    ActiveFutureValue = E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)i[2]);
    v30[0] = (uint64_t)i[2];
    v11 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((_QWORD *)(a1 + 280), v30);
    if (!v11)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    objc_msgSend((id)v11[3], "setValue:", ActiveFutureValue);
  }
  v12 = E5RT::AsyncEvent::GetActiveFutureValue(v25);
  objc_msgSend(*(id *)(a1 + 328), "objectAtIndexedSubscript:", 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setValue:", v12);

  std::mutex::lock((std::mutex *)(a1 + 208));
  *(_QWORD *)(a1 + 272) = a3;
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3321888768;
  v31[2] = sub_190EFC010;
  v31[3] = &__block_descriptor_96_ea8_40c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE_e20_v20__0B8__NSError_12l;
  v31[4] = a1;
  v14 = v32;
  v32[0] = 0;
  v34 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15)
    {
      if (v15 == a4)
      {
        v33 = v32;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v32);
        goto LABEL_13;
      }
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    }
    v33 = (_BYTE *)v15;
LABEL_13:
    v34 = 1;
  }
  v35 = a3;
  v36 = a1;
  objc_msgSend(*(id *)(a1 + 192), "setCompletionHandler:", v31);
  if (v34)
  {
    if (v33 == v32)
    {
      v16 = 4;
      goto LABEL_19;
    }
    if (v33)
    {
      v16 = 5;
      v14 = v33;
LABEL_19:
      (*(void (**)(_QWORD *))(*v14 + 8 * v16))(v14);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 208));
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::EvaluateANERequest(a1, *(void **)(a1 + 192));
  v17 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (E5RT::g_trace_analysis_level >= v27)
    kdebug_trace();
}

void sub_190EFBDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;
  int v46;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v46 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v46)
  {
LABEL_8:
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a22);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v45);
  goto LABEL_8;
}

void sub_190EFC010(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24[8];
  void *__p[2];
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;

  v5 = a3;
  v6 = v5;
  if (!*(_BYTE *)(a1 + 72))
  {
LABEL_34:
    sub_190EFC410((_QWORD *)(a1 + 80));
LABEL_10:

    return;
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v8 = *(void **)(v7 + 8);
    v31 = 0;
    v29[0] = v8;
    v9 = *(_QWORD *)(a1 + 64);
    if (!v9)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v9 + 48))(v9, v29, &v31);
    v10 = v31;
    v31 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(v11 + 272) == *(_QWORD *)(a1 + 80))
    {
      std::mutex::lock((std::mutex *)(v11 + 208));
      if (*(_QWORD *)(v11 + 272) == *(_QWORD *)(a1 + 80))
        objc_msgSend(*(id *)(v11 + 192), "setCompletionHandler:", 0);
      std::mutex::unlock((std::mutex *)(v11 + 208));
    }
    goto LABEL_10;
  }
  if (objc_msgSend(v5, "code") == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "e5rt");
    E5RT::GetE5RTLog((uint64_t)v29);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (SHIBYTE(v30) < 0)
    {
      operator delete(v29[0]);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
LABEL_30:

        if (*(_BYTE *)(a1 + 72))
        {
LABEL_31:
          v20 = *(void **)(v7 + 8);
          v28 = 0;
          v29[0] = v20;
          v21 = *(_QWORD *)(a1 + 64);
          if (!v21)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v21 + 48))(v21, v29, &v28);
          v22 = v28;
          v28 = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          goto LABEL_34;
        }
LABEL_37:
        std::__throw_bad_optional_access[abi:ne180100]();
      }
    }
    else if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_30;
    }
    sub_190EFF7B8();

    if (*(_BYTE *)(a1 + 72))
      goto LABEL_31;
    goto LABEL_37;
  }
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  if (objc_msgSend(v6, "code") == 3)
  {
    MEMORY[0x19401C808](v29, "ANE op async execution has timed out.");
    v12 = 10;
  }
  else if (objc_msgSend(v6, "code") == 16)
  {
    MEMORY[0x19401C808](v29, "ANE op async execution failed due to missing file.");
    v12 = 13;
  }
  else
  {
    MEMORY[0x19401C808](v29, "ANE op async execution failed with unexpected error.");
    v12 = 11;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SubmitAsync_block_invoke");
  E5RT::Status::Status(v24, v12, v29);
  std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string,E5RT::Status>((uint64_t)__p, (uint64_t)v24, &v27);
  E5RT::Status::~Status((E5RT::Status *)v24);
  if (v26 < 0)
    operator delete(__p[0]);
  if (!*(_BYTE *)(a1 + 72))
    std::__throw_bad_optional_access[abi:ne180100]();
  v13 = *(void **)(v7 + 8);
  v14 = v27;
  v27 = 0;
  v23 = v14;
  __p[0] = v13;
  v15 = *(_QWORD *)(a1 + 64);
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v15 + 48))(v15, __p, &v23);
  v16 = v23;
  v23 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_190EFC410((_QWORD *)(a1 + 80));
  v17 = v27;
  v27 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
    goto LABEL_10;
  operator delete(v29[0]);

}

void sub_190EFC318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  if (a25 < 0)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_190EFC410(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*(_QWORD *)(v1 + 272) == *a1)
  {
    std::mutex::lock((std::mutex *)(v1 + 208));
    if (*(_QWORD *)(v1 + 272) == *a1)
      objc_msgSend(*(id *)(v1 + 192), "setCompletionHandler:", 0);
    std::mutex::unlock((std::mutex *)(v1 + 208));
  }
}

void sub_190EFC480(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string,E5RT::Status>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = E5RT::E5RTError::E5RTError(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_190EFC4EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xF1C40B1F135EALL);
  _Unwind_Resume(a1);
}

_BYTE *__copy_helper_block_ea8_40c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;

  result[40] = 0;
  v3 = result + 40;
  result[72] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    v4 = result;
    result = *(_BYTE **)(a2 + 64);
    if (result)
    {
      if (result == (_BYTE *)(a2 + 40))
      {
        *((_QWORD *)v4 + 8) = v3;
        result = (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64));
        goto LABEL_7;
      }
      result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 16))(result);
    }
    *((_QWORD *)v4 + 8) = result;
LABEL_7:
    v4[72] = 1;
  }
  return result;
}

void sub_190EFC588(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 72))
    sub_190EFF7E4(v1, v1 + 40);
  _Unwind_Resume(exception_object);
}

uint64_t __destroy_helper_block_ea8_40c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 72))
  {
    v1 = result + 40;
    result = *(_QWORD *)(result + 64);
    if (result == v1)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
    }
    else if (result)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    }
  }
  return result;
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::PreWireMemoryObjects(E5RT::ExecutionStreamOperationInternal **this)
{
  E5RT::ExecutionStreamOperationInternal *v2;
  E5RT::ExecutionStreamOperationInternal *v3;
  E5RT::ExecutionStreamOperationInternal *v4;
  char v5;
  E5RT *v6;
  E5RT *v7;
  NSObject *v8;
  void *exception;
  id v10;
  std::string *v11;
  __int128 v12;
  void *v13;
  id v14;
  std::string v15;
  _BYTE v16[8];
  void *__p[2];
  std::string::size_type v18;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(this[1]) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PreWireMemoryObjects");
    std::string::basic_string[abi:ne180100]<0>(&v15, "Operation hasn't been encoded yet.");
    E5RT::Status::Status(v16, 2, &v15);
    E5RT::E5RTError::E5RTError(exception, __p, v16);
  }
  if ((E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(this[1]) & 1) == 0)
  {
    v2 = this[20];
    v3 = this[21];
    v4 = this[24];
    v14 = 0;
    v5 = -[E5RT::ExecutionStreamOperationInternal mapIOSurfacesWithModel:request:cacheInference:error:](v2, "mapIOSurfacesWithModel:request:cacheInference:error:", v3, v4, 1, &v14);
    v6 = (E5RT *)v14;
    v7 = v6;
    if ((v5 & 1) == 0)
    {
      if (!E5RT::IsAVirtualMachine(v6))
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, "Prewiring ANE buffers failed with error = ");
        -[E5RT description](v7, "description");
        v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v11 = std::string::append(&v15, (const std::string::value_type *)objc_msgSend(v10, "UTF8String"));
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v18 = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;

        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        v13 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v15, "PreWireMemoryObjects");
        E5RT::Status::Status(v16, 11, __p);
        E5RT::E5RTError::E5RTError(v13, &v15, v16);
      }
      HIBYTE(v18) = 4;
      strcpy((char *)__p, "e5rt");
      E5RT::GetE5RTLog((uint64_t)__p);
      v8 = objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_190EFF818();

    }
  }
}

void sub_190EFC7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0)
        operator delete(a18);

      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void sub_190EFC8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v24 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ResetOperation(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  void *v2;
  void *v3;

  if (E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                                      + 1)))
    objc_msgSend(*((id *)this + 20), "unmapIOSurfacesWithModel:request:", *((_QWORD *)this + 21), *((_QWORD *)this + 24));
  objc_msgSend(*((id *)this + 42), "removeAllObjects");
  objc_msgSend(*((id *)this + 44), "removeAllObjects");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*((id *)this + 46), "setObject:forKeyedSubscript:", v2, *MEMORY[0x1E0CFDFD8]);

  v3 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;

  *((_QWORD *)this + 34) = 0;
}

void sub_190EFC9AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::SetANEExecutionPriority(uint64_t result, int a2)
{
  uint64_t v2;

  *(_DWORD *)(result + 152) = a2;
  v2 = result;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      result = objc_msgSend(MEMORY[0x1E0CFDF88], "aneRealTimeTaskQoS");
      goto LABEL_7;
    case 3:
      result = objc_msgSend(MEMORY[0x1E0CFDF88], "aneUserInteractiveTaskQoS");
      goto LABEL_7;
    case 4:
      result = objc_msgSend(MEMORY[0x1E0CFDF88], "aneUserInitiatedTaskQoS");
      goto LABEL_7;
    case 5:
      result = objc_msgSend(MEMORY[0x1E0CFDF88], "aneDefaultTaskQoS");
      goto LABEL_7;
    case 6:
    case 7:
      result = objc_msgSend(MEMORY[0x1E0CFDF88], "aneBackgroundTaskQoS");
LABEL_7:
      *(_DWORD *)(v2 + 156) = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::GetANEExecutionPriority(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  return *((unsigned int *)this + 38);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ReshapeOperationInternal(uint64_t a1, uint64_t a2)
{
  E5RT::E5Compiler *v4;
  E5RT::E5CompilerPriv *Compiler;
  std::string::size_type size;
  std::string *p_p;
  uint64_t DirectoryPath;
  std::string *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  std::string *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  std::string *p_src;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  id v35;
  void **v36;
  void **v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  void *exception;
  void *v43;
  std::runtime_error *v44;
  __CFString *v45;
  __CFString *v46;
  std::runtime_error *v47;
  std::string *v48;
  __int128 v49;
  std::runtime_error *v50;
  std::string *v51;
  __int128 v52;
  std::string v53;
  id v54;
  std::string __p;
  id v56;
  std::string v57;
  std::string v58;
  std::string __src;
  std::string v60;
  _QWORD v61[4];
  std::string v62;
  id v63;
  void *v64;
  _QWORD v65[3];
  _QWORD v66[5];

  v66[3] = *MEMORY[0x1E0C80C00];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8)) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v61, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(&v62, 2, v61);
    E5RT::E5RTError::E5RTError(exception, &__p, &v62);
  }
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ConvertInputShapeToPlistDict(a1, a2);
  v4 = (E5RT::E5Compiler *)objc_claimAutoreleasedReturnValue();
  Compiler = (E5RT::E5CompilerPriv *)E5RT::E5Compiler::GetCompiler(v4);
  if (*(void (***)(E5RT::E5CompilerPriv *__hidden))Compiler != off_1E2D364F8)
    __cxa_bad_cast();
  E5RT::E5CompilerPriv::getBundleRootPath(Compiler, &__p);
  memset(&v62, 0, sizeof(v62));
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&v62, p_p, (std::string *)((char *)p_p + size));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
  }
  else if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    v60 = v62;
    goto LABEL_13;
  }
  std::string::__init_copy_ctor_external(&v60, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
LABEL_13:
  Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory(v61, &v60);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  DirectoryPath = Espresso::SharedUtils::TemporaryDirectory::GetDirectoryPath((Espresso::SharedUtils::TemporaryDirectory *)v61);
  *((_BYTE *)&__src.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__src, "jit_shapes.plist");
  memset(&v57, 0, sizeof(v57));
  std::string::append[abi:ne180100]<char const*,0>(&v57, &__src, (std::string *)&__src.__r_.__value_.__r.__words[2]);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v57, DirectoryPath, (std::__fs::filesystem::path *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v58 = __p;
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_17;
  }
  std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_17:
    operator delete(v57.__r_.__value_.__l.__data_);
    goto LABEL_20;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_20:
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v58;
  else
    v9 = (std::string *)v58.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[E5RT::E5Compiler writeToFile:atomically:](v4, "writeToFile:atomically:", v10, 1);

  if ((v11 & 1) == 0)
  {
    v43 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v57, "Failed to write plist to disk during ANE reshape.");
    E5RT::Status::Status(&v53, 11, &v57);
    E5RT::E5RTError::E5RTError(v43, &__p, &v53);
  }
  v12 = (void *)MEMORY[0x1E0CFDF68];
  v13 = (void *)MEMORY[0x1E0C99E98];
  v14 = (void *)MEMORY[0x1E0CB3940];
  if (*(char *)(DirectoryPath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)DirectoryPath, *(_QWORD *)(DirectoryPath + 8));
  }
  else
  {
    v15 = *(_OWORD *)DirectoryPath;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(DirectoryPath + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &__p;
  else
    v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v14, "stringWithUTF8String:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "fileURLWithPath:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "modelAtURL:key:", v18, &stru_1E2DD80E0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  objc_msgSend(*(id *)(a1 + 168), "getCacheURLIdentifier");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v20)
  {
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "ANE reshape error: ANEF returned cacheURLIdentifier as nil.");
    __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v21 = (id)*MEMORY[0x1E0CFDFB8];
  v22 = *MEMORY[0x1E0CFE090];
  v66[0] = *MEMORY[0x1E0CFE000];
  v23 = *MEMORY[0x1E0CFE098];
  v65[0] = v22;
  v65[1] = v23;
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_src = &__src;
  else
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_src);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v65[2] = v21;
  v66[1] = v25;
  v66[2] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v66, v65, 3);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = *(void **)(a1 + 160);
  v28 = objc_msgSend(MEMORY[0x1E0CFDF88], "aneUserInteractiveTaskQoS");
  v56 = 0;
  v29 = objc_msgSend(v27, "compileModel:options:qos:error:", v19, v26, v28, &v56);
  v30 = v56;
  v31 = v30;
  if ((v29 & 1) == 0)
  {
    if (v30)
    {
      objc_msgSend(v30, "localizedDescription");
      v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v45 = &stru_1E2DD80E0;
    }
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v57, (char *)-[__CFString UTF8String](objc_retainAutorelease(v45), "UTF8String"));
    v48 = std::string::insert(&v57, 0, "Failed to reshape ANE model using ANEF compileModel. Error=");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v47, &__p);
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::GetOutputDescMap(a1, v19, (uint64_t)&__p);
  v32 = *(void **)(a1 + 160);
  v63 = v21;
  v64 = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v64, &v63, 1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = v31;
  v34 = objc_msgSend(v32, "loadModel:options:qos:error:", v19, v33, objc_msgSend(MEMORY[0x1E0CFDF88], "aneUserInteractiveTaskQoS"), &v54);
  v35 = v54;

  if ((v34 & 1) == 0)
  {
    if (v35)
    {
      objc_msgSend(v35, "localizedDescription");
      v46 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v46 = &stru_1E2DD80E0;
    }
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v53, (char *)-[__CFString UTF8String](objc_retainAutorelease(v46), "UTF8String"));
    v51 = std::string::insert(&v53, 0, "Failed to load ANE model after reshape. Error=");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v50, &v57);
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::UpdateOutputDesc(a1, (uint64_t)&__p);
  objc_storeStrong((id *)(a1 + 176), v19);
  v36 = (void **)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    do
    {
      while (1)
      {
        v37 = (void **)*v36;
        v38 = (std::__shared_weak_count *)v36[6];
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        if (*((char *)v36 + 39) < 0)
          break;
        operator delete(v36);
        v36 = v37;
        if (!v37)
          goto LABEL_48;
      }
      operator delete(v36[2]);
      operator delete(v36);
      v36 = v37;
    }
    while (v37);
  }
LABEL_48:
  v41 = (void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v41)
    operator delete(v41);

  if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_52;
LABEL_55:
    operator delete(__src.__r_.__value_.__l.__data_);
    Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)v61);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_53;
LABEL_56:
    operator delete(v62.__r_.__value_.__l.__data_);
    goto LABEL_53;
  }
  operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_55;
LABEL_52:
  Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)v61);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_56;
LABEL_53:

}

void sub_190EFD20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  int v65;
  uint64_t v66;

  if (a30 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v65 & 1) == 0)
    {
LABEL_8:

      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a16);
      if (a37 < 0)
        operator delete(a32);
      if (a44 < 0)
        operator delete(a39);
      Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)&a52);
      if (*(char *)(v66 - 161) < 0)
        operator delete(*(void **)(v66 - 184));

      _Unwind_Resume(a1);
    }
  }
  else if (!v65)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v64);
  goto LABEL_8;
}

id E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ConvertInputShapeToPlistDict(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  void *PortDescriptorRef;
  E5RT::TensorDescriptor *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  E5RT::TensorDescriptor *v13;
  unint64_t Rank;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  uint64_t v16;
  _QWORD *TensorShape;
  uint64_t **TensorStrides;
  void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  void *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  E5RT::TensorDataType::Impl **v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *exception;
  void *v44;
  void *i;
  _QWORD *InputPorts;
  void *v47;
  _QWORD v48[3];
  _BYTE v49[8];
  E5RT::OperandDescriptor *v50;
  std::__shared_weak_count *v51;

  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  if (*(_QWORD *)(a2 + 24) != InputPorts[3])
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v50, "ConvertInputShapeToPlistDict");
    std::string::basic_string[abi:ne180100]<0>(v48, "Require new shapes for all inputs to reshape.");
    E5RT::Status::Status(v49, 2, v48);
    E5RT::E5RTError::E5RTError(exception, &v50, v49);
  }
  v3 = (void *)objc_opt_new();
  v47 = (void *)objc_opt_new();
  v4 = *(uint64_t **)(a2 + 16);
  for (i = v3; v4; v4 = (uint64_t *)*v4)
  {
    v5 = v4 + 2;
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v4 + 2));
    v7 = v6;
    if (!v6)
    {
      v37 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v50, "ConvertInputShapeToPlistDict");
      std::string::basic_string[abi:ne180100]<0>(v48, "Unknown operand name given for reshaping.");
      E5RT::Status::Status(v49, 2, v48);
      E5RT::E5RTError::E5RTError(v37, &v50, v49);
    }
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v6[5]);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      v38 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v50, "ConvertInputShapeToPlistDict");
      std::string::basic_string[abi:ne180100]<0>(v48, "ANE op cannot reshape a surface descriptor.");
      E5RT::Status::Status(v49, 2, v48);
      E5RT::E5RTError::E5RTError(v38, &v50, v49);
    }
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor((void *)v4[5]))
    {
      v39 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v50, "ConvertInputShapeToPlistDict");
      std::string::basic_string[abi:ne180100]<0>(v48, "Unsupported surface descriptor given for reshaping.");
      E5RT::Status::Status(v49, 2, v48);
      E5RT::E5RTError::E5RTError(v39, &v50, v49);
    }
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v7[5], &v50);
    v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v50);
    v10 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v4[5]);
    Rank = E5RT::TensorDescriptor::GetRank(v9);
    if (Rank != E5RT::TensorDescriptor::GetRank(v13))
    {
      std::operator+<char>();
      v40 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v48, "ConvertInputShapeToPlistDict");
      E5RT::Status::Status(v49, 2, &v50);
      E5RT::E5RTError::E5RTError(v40, v48, v49);
    }
    TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v9);
    v16 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v13);
    if (E5RT::operator!=((uint64_t)TensorDataTypeRef, v16))
    {
      std::operator+<char>();
      v41 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v48, "ConvertInputShapeToPlistDict");
      E5RT::Status::Status(v49, 2, &v50);
      E5RT::E5RTError::E5RTError(v41, v48, v49);
    }
    if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) >= 2)
    {
      std::operator+<char>();
      v44 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v48, "ConvertInputShapeToPlistDict");
      E5RT::Status::Status(v49, 2, &v50);
      E5RT::E5RTError::E5RTError(v44, v48, v49);
    }
    if ((E5RT::TensorDescriptor::HasKnownShape(v13) & 1) == 0)
    {
      std::operator+<char>();
      v42 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v48, "ConvertInputShapeToPlistDict");
      E5RT::Status::Status(v49, 2, &v50);
      E5RT::E5RTError::E5RTError(v42, v48, v49);
    }
    TensorShape = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v13);
    TensorStrides = (uint64_t **)E5RT::TensorDescriptor::GetTensorStrides(v13);
    v19 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (uint64_t)(TensorShape[1] - *TensorShape) >> 3);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (_QWORD *)*TensorShape;
    v22 = (_QWORD *)TensorShape[1];
    if ((_QWORD *)*TensorShape != v22)
    {
      do
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *v21, i);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "addObject:", v23);

        ++v21;
      }
      while (v21 != v22);
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Shape", i);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v20, v24);

    v25 = TensorStrides[1];
    if (*TensorStrides != v25)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v25 - *TensorStrides);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = *TensorStrides;
      v27 = TensorStrides[1];
      if (*TensorStrides != v27)
      {
        do
        {
          v29 = *v28;
          v30 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v13);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v29 / E5RT::TensorDataType::GetElementSize(v30));
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "addObject:", v31);

          ++v28;
        }
        while (v28 != v27);
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Strides");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "setObject:forKeyedSubscript:", v26, v32);

    }
    if (*((char *)v4 + 39) < 0)
      v5 = (_QWORD *)*v5;
    v3 = i;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "setObject:forKeyedSubscript:", v19, v33);

  }
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v47, CFSTR("NetworkJITShapes"), i);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "1.0");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Version");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v34, v35);

  return v3;
}

void sub_190EFDC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::GetOutputDescMap(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  char *p_dst;
  uint64_t v17;
  uint64_t v18;
  void (***OutputPortRef)(E5RT::IOPortPriv *__hidden);
  E5RT::IOPort *v20;
  E5RT::TensorDescriptor *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  uint64_t ElementSize;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  id v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  id v83;
  id obj;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v88;
  E5RT::TensorDataType::Impl **v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  E5RT::TensorDescriptor *v97;
  id v98;
  id v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  std::__shared_weak_count_vtbl *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void *__p;
  char *v116;
  char *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  void *v122;
  char *v123;
  char *v124;
  _BYTE v125[128];
  _BYTE v126[128];
  char *__dst;
  std::__shared_weak_count *v128;
  unint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v85 = (_QWORD *)a3;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v83 = v4;
  objc_msgSend(v4, "modelAttributes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("NetworkStatusList"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("LiveOutputList"));
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v106, v125, 16);
  if (v8)
  {
    v86 = *(_QWORD *)v107;
    v100 = v6;
    v101 = v7;
    do
    {
      v95 = 0;
      v88 = v8;
      do
      {
        if (*(_QWORD *)v107 != v86)
          objc_enumerationMutation(obj);
        v91 = *(id *)(*((_QWORD *)&v106 + 1) + 8 * v95);
        objc_msgSend(v91, "objectForKeyedSubscript:", CFSTR("Name"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "componentsSeparatedByString:", CFSTR("@"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "objectAtIndexedSubscript:", 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = *(_QWORD *)(a1 + 8);
        v94 = objc_retainAutorelease(v11);
        v13 = (const char *)objc_msgSend(v94, "UTF8String");
        v14 = strlen(v13);
        if (v14 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v15 = v14;
        if (v14 >= 0x17)
        {
          v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v17 = v14 | 7;
          v18 = v17 + 1;
          p_dst = (char *)operator new(v17 + 1);
          v128 = (std::__shared_weak_count *)v15;
          v129 = v18 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v129) = v14;
          p_dst = (char *)&__dst;
          if (!v14)
            goto LABEL_14;
        }
        memmove(p_dst, v13, v15);
LABEL_14:
        p_dst[v15] = 0;
        OutputPortRef = (void (***)(E5RT::IOPortPriv *__hidden))E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(v12, (uint64_t)&__dst);
        if (*OutputPortRef == &off_1E2D59AC8)
          v20 = (E5RT::IOPort *)OutputPortRef;
        else
          v20 = 0;
        if (SHIBYTE(v129) < 0)
          operator delete(__dst);
        E5RT::IOPort::GetPortDescriptor(v20, &__dst);
        v21 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__dst);
        v22 = v128;
        if (v128)
        {
          p_shared_owners = (unint64_t *)&v128->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = v91;
        objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("RankAgnosticShape"));
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        v93 = v25;
        objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("RankAgnosticStrides"));
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        v122 = 0;
        v123 = 0;
        v124 = 0;
        v118 = 0u;
        v119 = 0u;
        v120 = 0u;
        v121 = 0u;
        v99 = v92;
        v26 = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v118, &__dst, 16);
        v97 = v21;
        v102 = v9;
        v103 = v10;
        if (v26)
        {
          v27 = *(_QWORD *)v119;
          do
          {
            for (i = 0; i != v26; ++i)
            {
              while (1)
              {
                if (*(_QWORD *)v119 != v27)
                  objc_enumerationMutation(v99);
                v29 = objc_msgSend(*(id *)(*((_QWORD *)&v118 + 1) + 8 * i), "intValue");
                v30 = v29;
                v31 = v123;
                if (v123 >= v124)
                  break;
                *(_QWORD *)v123 = v29;
                v9 = v102;
                v10 = v103;
                v123 = v31 + 8;
                ++i;
                v6 = v100;
                v7 = v101;
                if (i == v26)
                  goto LABEL_52;
              }
              v32 = (char *)v122;
              v33 = v123 - (_BYTE *)v122;
              v34 = (v123 - (_BYTE *)v122) >> 3;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v36 = v124 - (_BYTE *)v122;
              if ((v124 - (_BYTE *)v122) >> 2 > v35)
                v35 = v36 >> 2;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                if (v37 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v38 = (char *)operator new(8 * v37);
                v39 = &v38[8 * v34];
                *(_QWORD *)v39 = v30;
                v40 = (uint64_t)(v39 + 8);
                if (v31 == v32)
                {
LABEL_43:
                  v10 = v103;
                  goto LABEL_49;
                }
              }
              else
              {
                v38 = 0;
                v39 = (char *)(8 * v34);
                *(_QWORD *)(8 * v34) = v30;
                v40 = 8 * v34 + 8;
                if (v31 == v32)
                  goto LABEL_43;
              }
              v41 = v31 - 8 - v32;
              if (v41 < 0x58)
              {
                v10 = v103;
                do
                {
LABEL_48:
                  v50 = *((_QWORD *)v31 - 1);
                  v31 -= 8;
                  *((_QWORD *)v39 - 1) = v50;
                  v39 -= 8;
                }
                while (v31 != v32);
                goto LABEL_49;
              }
              v42 = v31 - &v38[v33];
              v10 = v103;
              if (v42 < 0x20)
                goto LABEL_48;
              v43 = (v41 >> 3) + 1;
              v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
              v45 = &v31[-v44];
              v39 -= v44;
              v46 = &v38[8 * v34 - 16];
              v47 = v31 - 16;
              v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v49 = *(_OWORD *)v47;
                *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
                *(_OWORD *)v46 = v49;
                v46 -= 32;
                v47 -= 32;
                v48 -= 4;
              }
              while (v48);
              v31 = v45;
              if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_48;
LABEL_49:
              v122 = v39;
              v123 = (char *)v40;
              v124 = &v38[8 * v37];
              if (v32)
                operator delete(v32);
              v9 = v102;
              v123 = (char *)v40;
              v6 = v100;
              v7 = v101;
            }
LABEL_52:
            v26 = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v118, &__dst, 16);
          }
          while (v26);
        }

        __p = 0;
        v116 = 0;
        v117 = 0;
        TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v97);
        ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
        v113 = 0u;
        v114 = 0u;
        v111 = 0u;
        v112 = 0u;
        v98 = v90;
        v53 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v111, v126, 16);
        v89 = TensorDataTypeRef;
        if (!v53)
          goto LABEL_83;
        v54 = *(_QWORD *)v112;
        do
        {
          v55 = 0;
          v96 = v53;
          do
          {
            while (1)
            {
              if (*(_QWORD *)v112 != v54)
                objc_enumerationMutation(v98);
              v56 = (int)(objc_msgSend(*(id *)(*((_QWORD *)&v111 + 1) + 8 * v55), "intValue") * ElementSize);
              v57 = v116;
              if (v116 >= v117)
                break;
              *(_QWORD *)v116 = v56;
              v10 = v103;
              v116 = v57 + 8;
              ++v55;
              v7 = v101;
              v9 = v102;
              if (v55 == v53)
                goto LABEL_82;
            }
            v58 = (char *)__p;
            v59 = v116 - (_BYTE *)__p;
            v60 = (v116 - (_BYTE *)__p) >> 3;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v62 = ElementSize;
            v63 = v117 - (_BYTE *)__p;
            if ((v117 - (_BYTE *)__p) >> 2 > v61)
              v61 = v63 >> 2;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
              v64 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v64 = v61;
            if (v64)
            {
              if (v64 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v65 = (char *)operator new(8 * v64);
              v66 = &v65[8 * v60];
              *(_QWORD *)v66 = v56;
              v67 = (uint64_t)(v66 + 8);
              if (v57 == v58)
              {
LABEL_80:
                v10 = v103;
                __p = v66;
                v116 = (char *)v67;
                v117 = &v65[8 * v64];
                if (v58)
                  goto LABEL_76;
                goto LABEL_77;
              }
            }
            else
            {
              v65 = 0;
              v66 = (char *)(8 * v60);
              *(_QWORD *)(8 * v60) = v56;
              v67 = 8 * v60 + 8;
              if (v57 == v58)
                goto LABEL_80;
            }
            v68 = v57 - 8 - v58;
            v10 = v103;
            if (v68 < 0x58)
              goto LABEL_108;
            if ((unint64_t)(v57 - &v65[v59]) < 0x20)
              goto LABEL_108;
            v69 = (v68 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v71 = &v57[-v70];
            v66 -= v70;
            v72 = &v65[8 * v60 - 16];
            v73 = v57 - 16;
            v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v75 = *(_OWORD *)v73;
              *((_OWORD *)v72 - 1) = *((_OWORD *)v73 - 1);
              *(_OWORD *)v72 = v75;
              v72 -= 32;
              v73 -= 32;
              v74 -= 4;
            }
            while (v74);
            v57 = v71;
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_108:
              do
              {
                v76 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v66 - 1) = v76;
                v66 -= 8;
              }
              while (v57 != v58);
            }
            __p = v66;
            v116 = (char *)v67;
            v117 = &v65[8 * v64];
            if (v58)
LABEL_76:
              operator delete(v58);
LABEL_77:
            v6 = v100;
            v7 = v101;
            ElementSize = v62;
            v53 = v96;
            v116 = (char *)v67;
            ++v55;
            v9 = v102;
          }
          while (v55 != v96);
LABEL_82:
          v53 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v111, v126, 16);
        }
        while (v53);
LABEL_83:

        if (__p == v116)
          E5RT::TensorDescriptor::CreateTensorDesc(v89, (uint64_t *)&v122, &v110);
        else
          E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(v89, (uint64_t *)&v122, &__p, &v110);
        v77 = v110;
        if (__p)
        {
          v116 = (char *)__p;
          operator delete(__p);
        }
        if (v122)
        {
          v123 = (char *)v122;
          operator delete(v122);
        }

        v104 = v77;
        if (v77)
        {
          v78 = (std::__shared_weak_count *)operator new();
          v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
          v78->__shared_owners_ = 0;
          v78->__shared_weak_owners_ = 0;
          v78[1].__vftable = v77;
        }
        else
        {
          v78 = 0;
        }
        v105 = v78;
        v79 = objc_retainAutorelease(v94);
        __dst = (char *)objc_msgSend(v79, "UTF8String");
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_impl<char const*,std::shared_ptr<E5RT::TensorDescriptor const> &>(v85, (const char **)&__dst, &v104);
        v80 = v105;
        if (v105)
        {
          v81 = (unint64_t *)&v105->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }

        ++v95;
      }
      while (v95 != v88);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v106, v125, 16);
    }
    while (v8);
  }

}

void sub_190EFE88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::UpdateOutputDesc(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  void (***OutputPortRef)(E5RT::IOPortPriv *__hidden);
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    OutputPortRef = (void (***)(E5RT::IOPortPriv *__hidden))E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(*(_QWORD *)(a1 + 8), (uint64_t)(i + 2));
    if (*OutputPortRef != &off_1E2D59AC8)
      OutputPortRef = 0;
    v5 = (std::__shared_weak_count *)i[6];
    v11 = i[5];
    v12 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    E5RT::IOPortPriv::SetPortDescriptor((uint64_t)OutputPortRef, &v11);
    v8 = v12;
    if (v12)
    {
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_190EFEB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_190EFED24(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = *(void ***)(a1 + 40);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_11:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_11;
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    operator delete(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t result;
  char v14;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x40uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = (uint64_t *)(v6 + 16);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 4) = *(_QWORD *)(a2 + 16);
  }
  v9 = (std::string *)(v7 + 40);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    *((_QWORD *)v7 + 7) = *(_QWORD *)(a2 + 40);
  }
  *(_BYTE *)(a3 + 16) = 1;
  v10 = v7[39];
  if (v10 >= 0)
    v11 = v8;
  else
    v11 = (uint64_t *)*((_QWORD *)v7 + 2);
  if (v10 >= 0)
    v12 = v7[39];
  else
    v12 = *((_QWORD *)v7 + 3);
  result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v14, v11, v12);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_190EFEEE8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
  {
    operator delete(*v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))

    operator delete(v2);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v6)
        {
          if (result[2] == v3)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v12 == v6)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_impl<char const*,std::shared_ptr<E5RT::TensorDescriptor const> &>(_QWORD *a1, const char **a2, _QWORD *a3)
{
  uint64_t *inserted;
  char v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  char v12;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__construct_node<char const*,std::shared_ptr<E5RT::TensorDescriptor const> &>((uint64_t)a1, a2, a3, (uint64_t *)&__p);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v5 & 1) == 0)
  {
    v6 = (char *)__p;
    __p = 0;
    if (v6)
    {
      if (v12)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v6[39] < 0)
          operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
    }
  }
  return inserted;
}

void sub_190EFF19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__construct_node<char const*,std::shared_ptr<E5RT::TensorDescriptor const> &>@<X0>(uint64_t a1@<X0>, const char **a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  const char *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t result;
  char v23;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *a4 = (uint64_t)v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  v9 = v8 + 16;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v10 = *a2;
  v11 = strlen(*a2);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v9 = operator new(v14 + 1);
    *((_QWORD *)v8 + 3) = v12;
    *((_QWORD *)v8 + 4) = v15 | 0x8000000000000000;
    *((_QWORD *)v8 + 2) = v9;
LABEL_9:
    memmove(v9, v10, v12);
    v9[v12] = 0;
    v13 = a3[1];
    *((_QWORD *)v8 + 5) = *a3;
    *((_QWORD *)v8 + 6) = v13;
    if (!v13)
      goto LABEL_12;
LABEL_10:
    v16 = (unint64_t *)(v13 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    goto LABEL_12;
  }
  v8[39] = v11;
  if (v11)
    goto LABEL_9;
  *v9 = 0;
  v13 = a3[1];
  *((_QWORD *)v8 + 5) = *a3;
  *((_QWORD *)v8 + 6) = v13;
  if (v13)
    goto LABEL_10;
LABEL_12:
  *((_BYTE *)a4 + 16) = 1;
  v18 = *a4;
  v19 = *(char *)(v18 + 39);
  if (v19 >= 0)
    v20 = (uint64_t *)(v18 + 16);
  else
    v20 = *(uint64_t **)(v18 + 16);
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(v18 + 39);
  else
    v21 = *(_QWORD *)(v18 + 24);
  result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v23, v20, v21);
  *(_QWORD *)(v18 + 8) = result;
  return result;
}

void sub_190EFF300(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *result;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;

  v4 = (unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    v11 = (int8x8_t)a1[1];
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v11)
        v12 %= *(_QWORD *)&v11;
    }
    else
    {
      v12 &= *(_QWORD *)&v11 - 1;
    }
    v14 = *(_QWORD **)(*a1 + 8 * v12);
    if (v14)
    {
      *(_QWORD *)a2 = *v14;
    }
    else
    {
      *(_QWORD *)a2 = a1[2];
      a1[2] = a2;
      *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(_QWORD *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v11)
          v15 %= *(_QWORD *)&v11;
      }
      else
      {
        v15 &= *(_QWORD *)&v11 - 1;
      }
      v14 = (_QWORD *)(*a1 + 8 * v15);
    }
    *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  size_t v27;
  uint8x8_t v28;
  uint64_t v29;
  size_t v30;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_50;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2)
      v7 = a2 % v4;
    else
      v7 = a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  else
  {
    v7 = (v4 - 1) & a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  v9 = *v8;
  if (*v8)
  {
    v10 = *((_BYTE *)a3 + 23);
    if (v10 >= 0)
      v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v11 = a3[1];
    if (v10 >= 0)
      v12 = (unsigned __int8 *)a3;
    else
      v12 = *a3;
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        v17 = v9[1];
        if (v17 == a2)
        {
          v18 = *((unsigned __int8 *)v9 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          else
            v19 = (unsigned __int8 *)v9[3];
          if (v19 == v11)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v9[2], v12, v9[3]))
                return v9;
            }
            else
            {
              if (!*((_BYTE *)v9 + 39))
                return v9;
              v20 = 0;
              while (*((unsigned __int8 *)v9 + v20 + 16) == v12[v20])
              {
                if (v18 == ++v20)
                  return v9;
              }
            }
          }
        }
        else if ((v17 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        v9 = (uint64_t *)*v9;
        if (!v9)
          goto LABEL_50;
      }
    }
    do
    {
      v13 = v9[1];
      if (v13 == a2)
      {
        v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0)
          v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        else
          v15 = (unsigned __int8 *)v9[3];
        if (v15 == v11)
        {
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp((const void *)v9[2], v12, v9[3]))
              return v9;
          }
          else
          {
            if (!*((_BYTE *)v9 + 39))
              return v9;
            v16 = 0;
            while (*((unsigned __int8 *)v9 + v16 + 16) == v12[v16])
            {
              if (v14 == ++v16)
                return v9;
            }
          }
        }
      }
      else
      {
        if (v13 >= v4)
          v13 %= v4;
        if (v13 != v7)
          break;
      }
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v4 && (float)(v22 * (float)v4) >= v21)
    return 0;
  v23 = 1;
  if (v4 >= 3)
    v23 = (v4 & (v4 - 1)) != 0;
  v24 = v23 | (2 * v4);
  v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25)
    prime = v25;
  else
    prime = v24;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v4)
    goto LABEL_74;
  if (prime < v4)
  {
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v30 = std::__next_prime(v27);
      if (prime <= v30)
        prime = v30;
      if (prime >= v4)
        return 0;
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
      if (prime <= v27)
        prime = v27;
      if (prime >= v4)
        return 0;
    }
LABEL_74:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

void sub_190EFF73C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_190EFF760()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190EFF754();
  sub_190EFF73C(&dword_190DAF000, v0, v1, "ANE JIT Model unload failed.", v2, v3, v4, v5, v6);
  sub_190EFF74C();
}

void sub_190EFF78C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190EFF754();
  sub_190EFF73C(&dword_190DAF000, v0, v1, "Detected ANE Inference overflow.", v2, v3, v4, v5, v6);
  sub_190EFF74C();
}

void sub_190EFF7B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190EFF754();
  sub_190EFF73C(&dword_190DAF000, v0, v1, "Detected ANE Inference overflow during async execution.", v2, v3, v4, v5, v6);
  sub_190EFF74C();
}

uint64_t sub_190EFF7E4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 64);
  if (v2 == a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 64) + 40))(*(_QWORD *)(result + 64));
  return result;
}

void sub_190EFF818()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190EFF754();
  sub_190EFF73C(&dword_190DAF000, v0, v1, "Detected call to mapIOSurfacesWithModel on VM run. Ignore return result as this API is not supported on VM.", v2, v3, v4, v5, v6);
  sub_190EFF74C();
}

void sub_190EFF844(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 16))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  operator delete(__p);
}

uint64_t e5rt_io_port_is_surface(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC81F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EFF92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_retain_surface_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC8278;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EFFA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_retain_buffer_object(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC83F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EFFAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_retain_memory_object(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC83F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EFFBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_retain_surface_object(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC8478;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EFFC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_bind_memory_object(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC84F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EFFD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_bind_surface_object(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC8578;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EFFE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_is_dynamic(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC85F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EFFEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_has_known_shape(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC8678;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EFFFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_get_supported_buffer_types(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC86F8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F000C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F000FC()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F00110(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC8178;
  result[1] = v3;
  return result;
}

uint64_t sub_190F00144(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC8178;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F00160(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v10 = operator new(0x30uLL);
      v11 = xmmword_191A6FF90;
      strcpy((char *)v10, "Invalid Function Argument: *handle is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10);
      return 1;
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190F00330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F00370(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z20e5rt_io_port_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z20e5rt_io_port_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z20e5rt_io_port_releaseE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z20e5rt_io_port_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F003DC()
{
  return &unk_1E2DC81D8;
}

void sub_190F003EC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F00400(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC81F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F00438(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC81F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F00458(uint64_t a1)
{
  E5RT::IOPortImpl ***v1;
  void *PortDescriptorRef;
  void *v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*v1);
      v4 = E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef);
      result = 0;
      **(_BYTE **)(a1 + 16) = v4 != 0;
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A6F7C0;
      strcpy((char *)v8, "Invalid Function Argument: is_surface is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F005E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F00620(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_io_port_is_surfaceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z23e5rt_io_port_is_surfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_io_port_is_surfaceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_io_port_is_surfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0068C()
{
  return &unk_1E2DC8258;
}

void sub_190F0069C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F006B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC8278;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F006E8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8278;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F00708(uint64_t a1)
{
  E5RT::IOPortImpl ***v1;
  void *PortDescriptorRef;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t result;
  void *exception;
  _BYTE v17[8];
  _BYTE __p[24];
  _BYTE lpsrc[24];

  v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*v1);
      if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        lpsrc[23] = 10;
        strcpy(lpsrc, "operator()");
        *(_QWORD *)__p = operator new(0x50uLL);
        *(_OWORD *)&__p[8] = xmmword_191A72670;
        strcpy(*(char **)__p, "e5rt_io_port_retain_surface_desc failed since IOPort isn't a surface port.");
        E5RT::Status::Status(v17, 2, __p);
        E5RT::E5RTError::E5RTError(exception, lpsrc, v17);
      }
      v4 = (_QWORD *)operator new();
      *v4 = 0;
      v4[1] = 0;
      E5RT::IOPort::GetPortDescriptor(**(E5RT::IOPort ***)(a1 + 8), lpsrc);
      v5 = *(void **)lpsrc;
      if (*(_QWORD *)lpsrc)
      {
        if (!v5)
        {
          v9 = (std::__shared_weak_count *)v4[1];
          *v4 = 0;
          v4[1] = 0;
          if (v9)
            goto LABEL_12;
          goto LABEL_17;
        }
        v6 = *(_QWORD *)&lpsrc[8];
        if (*(_QWORD *)&lpsrc[8])
        {
          v7 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
      }
      else
      {
        v6 = 0;
      }
      v9 = (std::__shared_weak_count *)v4[1];
      *v4 = v5;
      v4[1] = v6;
      if (v9)
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
LABEL_17:
      v12 = *(std::__shared_weak_count **)&lpsrc[8];
      if (*(_QWORD *)&lpsrc[8])
      {
        v13 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      result = 0;
      **(_QWORD **)(a1 + 16) = v4;
      return result;
    }
    *(_QWORD *)lpsrc = operator new(0x30uLL);
    *(_OWORD *)&lpsrc[8] = xmmword_191A6F7B0;
    strcpy(*(char **)lpsrc, "Invalid Function Argument: desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)lpsrc, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((lpsrc[23] & 0x80000000) != 0)
      operator delete(*(void **)lpsrc);
    return 1;
  }
  else
  {
    *(_QWORD *)lpsrc = operator new(0x30uLL);
    *(_OWORD *)&lpsrc[8] = xmmword_191A6F7A0;
    strcpy(*(char **)lpsrc, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)lpsrc, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((lpsrc[23] & 0x80000000) != 0)
      operator delete(*(void **)lpsrc);
    return 1;
  }
}

void sub_190F00A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F00B0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_io_port_retain_surface_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_io_port_retain_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_io_port_retain_surface_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_io_port_retain_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F00B78()
{
  return &unk_1E2DC82D8;
}

void sub_190F00B88()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F00B9C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC82F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F00BD4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC82F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F00BF4(uint64_t a1)
{
  E5RT::IOPortImpl ***v1;
  void *PortDescriptorRef;
  void *v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*v1);
      v4 = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      result = 0;
      **(_BYTE **)(a1 + 16) = v4 != 0;
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A6F790;
      strcpy((char *)v8, "Invalid Function Argument: is_tensor is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F00D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F00DBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z22e5rt_io_port_is_tensorE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z22e5rt_io_port_is_tensorE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z22e5rt_io_port_is_tensorE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z22e5rt_io_port_is_tensorE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F00E28()
{
  return &unk_1E2DC8358;
}

void sub_190F00E38()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F00E4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC8378;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F00E84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8378;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F00EA4(uint64_t a1)
{
  E5RT::IOPortImpl ***v1;
  void *PortDescriptorRef;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t result;
  void *exception;
  _BYTE v17[8];
  _BYTE __p[24];
  _BYTE lpsrc[24];

  v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*v1);
      if (!E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        lpsrc[23] = 10;
        strcpy(lpsrc, "operator()");
        *(_QWORD *)__p = operator new(0x50uLL);
        *(_OWORD *)&__p[8] = xmmword_191A72680;
        strcpy(*(char **)__p, "e5rt_io_port_retain_tensor_desc failed since IOPort isn't a tensor port.");
        E5RT::Status::Status(v17, 2, __p);
        E5RT::E5RTError::E5RTError(exception, lpsrc, v17);
      }
      v4 = (_QWORD *)operator new();
      *v4 = 0;
      v4[1] = 0;
      E5RT::IOPort::GetPortDescriptor(**(E5RT::IOPort ***)(a1 + 8), lpsrc);
      v5 = *(void **)lpsrc;
      if (*(_QWORD *)lpsrc)
      {
        if (!v5)
        {
          v9 = (std::__shared_weak_count *)v4[1];
          *v4 = 0;
          v4[1] = 0;
          if (v9)
            goto LABEL_12;
          goto LABEL_17;
        }
        v6 = *(_QWORD *)&lpsrc[8];
        if (*(_QWORD *)&lpsrc[8])
        {
          v7 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
      }
      else
      {
        v6 = 0;
      }
      v9 = (std::__shared_weak_count *)v4[1];
      *v4 = v5;
      v4[1] = v6;
      if (v9)
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
LABEL_17:
      v12 = *(std::__shared_weak_count **)&lpsrc[8];
      if (*(_QWORD *)&lpsrc[8])
      {
        v13 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      result = 0;
      **(_QWORD **)(a1 + 16) = v4;
      return result;
    }
    *(_QWORD *)lpsrc = operator new(0x30uLL);
    *(_OWORD *)&lpsrc[8] = xmmword_191A6F7B0;
    strcpy(*(char **)lpsrc, "Invalid Function Argument: desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)lpsrc, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((lpsrc[23] & 0x80000000) != 0)
      operator delete(*(void **)lpsrc);
    return 1;
  }
  else
  {
    *(_QWORD *)lpsrc = operator new(0x30uLL);
    *(_OWORD *)&lpsrc[8] = xmmword_191A6F7A0;
    strcpy(*(char **)lpsrc, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)lpsrc, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((lpsrc[23] & 0x80000000) != 0)
      operator delete(*(void **)lpsrc);
    return 1;
  }
}

void sub_190F011E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F012A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_io_port_retain_tensor_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z31e5rt_io_port_retain_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_io_port_retain_tensor_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_io_port_retain_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F01314()
{
  return &unk_1E2DC83D8;
}

void sub_190F01324()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F01338(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC83F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F01370(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC83F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F01390(uint64_t a1)
{
  E5RT::IOPort **v1;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *exception;
  char v13[8];
  void *lpsrc;
  std::__shared_weak_count *v15;
  _BYTE __p[24];
  _BYTE v17[24];

  v1 = *(E5RT::IOPort ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      E5RT::IOPort::GetMemoryObject(*v1, &lpsrc);
      if (!lpsrc)
      {
        **(_QWORD **)(a1 + 16) = 0;
        v8 = v15;
        if (v15)
          goto LABEL_15;
        return 0;
      }
      if (!E5RT::MemoryObject::TryAsBuffer(lpsrc))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v17[23] = 10;
        strcpy(v17, "operator()");
        *(_QWORD *)__p = operator new(0x60uLL);
        *(_OWORD *)&__p[8] = xmmword_191A72690;
        strcpy(*(char **)__p, "e5rt_io_port_retain_buffer_object failed since bound memory object isn't a buffer object.");
        E5RT::Status::Status(v13, 2, __p);
        E5RT::E5RTError::E5RTError(exception, v17, v13);
      }
      v3 = (_QWORD *)operator new();
      *v3 = 0;
      v3[1] = 0;
      v4 = lpsrc;
      if (lpsrc)
      {
        if (!v4)
        {
          *v3 = 0;
          v3[1] = 0;
          **(_QWORD **)(a1 + 16) = v3;
          v8 = v15;
          if (v15)
          {
LABEL_15:
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          return 0;
        }
        v5 = v15;
        if (v15)
        {
          v6 = (unint64_t *)&v15->__shared_owners_;
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 1, v6));
        }
      }
      else
      {
        v5 = 0;
      }
      *v3 = v4;
      v3[1] = v5;
      **(_QWORD **)(a1 + 16) = v3;
      v8 = v15;
      if (v15)
        goto LABEL_15;
      return 0;
    }
    *(_QWORD *)v17 = operator new(0x38uLL);
    *(_OWORD *)&v17[8] = xmmword_191A726A0;
    strcpy(*(char **)v17, "Invalid Function Argument: buffer_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v17, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v17[23] & 0x80000000) != 0)
      operator delete(*(void **)v17);
    return 1;
  }
  else
  {
    *(_QWORD *)v17 = operator new(0x30uLL);
    *(_OWORD *)&v17[8] = xmmword_191A6F7A0;
    strcpy(*(char **)v17, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v17, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v17[23] & 0x80000000) != 0)
      operator delete(*(void **)v17);
    return 1;
  }
}

void sub_190F016C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F01790(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_io_port_retain_buffer_objectE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z33e5rt_io_port_retain_buffer_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_io_port_retain_buffer_objectE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_io_port_retain_buffer_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F017FC()
{
  return &unk_1E2DC8458;
}

void sub_190F0180C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F01820(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC8478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F01858(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F01878(uint64_t a1)
{
  E5RT::IOPort **v1;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *exception;
  char v13[8];
  void *lpsrc;
  std::__shared_weak_count *v15;
  _BYTE __p[24];
  _BYTE v17[24];

  v1 = *(E5RT::IOPort ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      E5RT::IOPort::GetMemoryObject(*v1, &lpsrc);
      if (!lpsrc)
      {
        **(_QWORD **)(a1 + 16) = 0;
        v8 = v15;
        if (v15)
          goto LABEL_15;
        return 0;
      }
      if (!E5RT::MemoryObject::TryAsSurface(lpsrc))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v17[23] = 10;
        strcpy(v17, "operator()");
        *(_QWORD *)__p = operator new(0x60uLL);
        *(_OWORD *)&__p[8] = xmmword_191A726B0;
        strcpy(*(char **)__p, "e5rt_io_port_retain_surface_object failed since bound memory object isn't a surface object.");
        E5RT::Status::Status(v13, 2, __p);
        E5RT::E5RTError::E5RTError(exception, v17, v13);
      }
      v3 = (_QWORD *)operator new();
      *v3 = 0;
      v3[1] = 0;
      v4 = lpsrc;
      if (lpsrc)
      {
        if (!v4)
        {
          *v3 = 0;
          v3[1] = 0;
          **(_QWORD **)(a1 + 16) = v3;
          v8 = v15;
          if (v15)
          {
LABEL_15:
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          return 0;
        }
        v5 = v15;
        if (v15)
        {
          v6 = (unint64_t *)&v15->__shared_owners_;
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 1, v6));
        }
      }
      else
      {
        v5 = 0;
      }
      *v3 = v4;
      v3[1] = v5;
      **(_QWORD **)(a1 + 16) = v3;
      v8 = v15;
      if (v15)
        goto LABEL_15;
      return 0;
    }
    *(_QWORD *)v17 = operator new(0x38uLL);
    *(_OWORD *)&v17[8] = xmmword_191A726A0;
    strcpy(*(char **)v17, "Invalid Function Argument: memory_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v17, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v17[23] & 0x80000000) != 0)
      operator delete(*(void **)v17);
    return 1;
  }
  else
  {
    *(_QWORD *)v17 = operator new(0x30uLL);
    *(_OWORD *)&v17[8] = xmmword_191A6F7A0;
    strcpy(*(char **)v17, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v17, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v17[23] & 0x80000000) != 0)
      operator delete(*(void **)v17);
    return 1;
  }
}

void sub_190F01BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F01C78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_io_port_retain_surface_objectE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_io_port_retain_surface_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_io_port_retain_surface_objectE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_io_port_retain_surface_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F01CE4()
{
  return &unk_1E2DC84D8;
}

void sub_190F01CF4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F01D08(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC84F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F01D40(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC84F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F01D60(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v12;
  void *__p[2];
  char v14;
  void *v15;
  __int128 v16;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *v1;
    if (v2)
    {
      v5 = *(void **)v2;
      v4 = *(_QWORD *)(v2 + 8);
      v15 = v5;
      *(_QWORD *)&v16 = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      E5RT::IOPort::BindMemoryObject(v3, (uint64_t)&v15);
      v8 = (std::__shared_weak_count *)v16;
      if (!(_QWORD)v16)
        return 0;
      v9 = (unint64_t *)(v16 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
    }
    else
    {
      v15 = 0;
      *(_QWORD *)&v16 = 0;
      E5RT::IOPort::BindMemoryObject(v3, (uint64_t)&v15);
      v8 = (std::__shared_weak_count *)v16;
      if (!(_QWORD)v16)
        return 0;
      v12 = (unint64_t *)(v16 + 8);
      do
        v10 = __ldaxr(v12);
      while (__stlxr(v10 - 1, v12));
    }
    if (v10)
      return 0;
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    return 0;
  }
  else
  {
    v15 = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)v15, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
    if (v14 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15);
    return 1;
  }
}

void sub_190F01ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F01F64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_io_port_bind_buffer_objectE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z31e5rt_io_port_bind_buffer_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_io_port_bind_buffer_objectE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_io_port_bind_buffer_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F01FD0()
{
  return &unk_1E2DC8558;
}

void sub_190F01FE0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F01FF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC8578;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F0202C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8578;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0204C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  void *__p[2];
  char v14;
  void *v15;
  __int128 v16;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *v1;
    if (v2)
    {
      v5 = *(void **)v2;
      v4 = *(_QWORD *)(v2 + 8);
      v15 = v5;
      *(_QWORD *)&v16 = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      E5RT::IOPort::BindMemoryObject(v3, (uint64_t)&v15);
      v8 = (std::__shared_weak_count *)v16;
      if (!(_QWORD)v16)
        return 0;
      v9 = (unint64_t *)(v16 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
    }
    else
    {
      v15 = 0;
      *(_QWORD *)&v16 = 0;
      E5RT::IOPort::BindMemoryObject(v3, (uint64_t)&v15);
      v8 = (std::__shared_weak_count *)v16;
      if (!(_QWORD)v16)
        return 0;
      v11 = (unint64_t *)(v16 + 8);
      do
        v10 = __ldaxr(v11);
      while (__stlxr(v10 - 1, v11));
    }
    if (v10)
      return 0;
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    return 0;
  }
  else
  {
    v15 = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)v15, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
    if (v14 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15);
    return 1;
  }
}

void sub_190F021BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F02250(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_io_port_bind_surface_objectE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_io_port_bind_surface_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_io_port_bind_surface_objectE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_io_port_bind_surface_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F022BC()
{
  return &unk_1E2DC85D8;
}

void sub_190F022CC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F022E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC85F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F02318(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC85F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F02338(uint64_t a1)
{
  E5RT::IOPortImpl ***v1;
  char IsDynamic;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      IsDynamic = E5RT::IOPort::IsDynamic(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = IsDynamic;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FF90;
      strcpy((char *)v7, "Invalid Function Argument: dynamic is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F024B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F024F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_io_port_is_dynamicE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z23e5rt_io_port_is_dynamicE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_io_port_is_dynamicE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_io_port_is_dynamicE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F02560()
{
  return &unk_1E2DC8658;
}

void sub_190F02570()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F02584(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC8678;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F025BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8678;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F025DC(uint64_t a1)
{
  E5RT::IOPortImpl ***v1;
  char HasKnownShape;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      HasKnownShape = E5RT::IOPort::HasKnownShape(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = HasKnownShape;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: known is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F02758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F02798(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_io_port_has_known_shapeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z28e5rt_io_port_has_known_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_io_port_has_known_shapeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_io_port_has_known_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F02804()
{
  return &unk_1E2DC86D8;
}

void sub_190F02814()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F02828(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC86F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F02868(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC86F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F02890(uint64_t a1)
{
  void ****v1;
  void **SupportedBufferTypes;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(void *****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        **(_QWORD **)(a1 + 24) = *E5RT::IOPort::GetSupportedBufferTypes(*v1);
        SupportedBufferTypes = E5RT::IOPort::GetSupportedBufferTypes(**(void *****)(a1 + 8));
        result = 0;
        **(_QWORD **)(a1 + 16) = ((_BYTE *)SupportedBufferTypes[1] - (_BYTE *)*SupportedBufferTypes) >> 2;
      }
      else
      {
        v7 = operator new(0x30uLL);
        v8 = xmmword_191A6F7B0;
        strcpy((char *)v7, "Invalid Function Argument: bufferTypes is NULL.");
        v6 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v8) < 0)
          operator delete(v7);
        return 1;
      }
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: count is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F02AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F02B14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_io_port_get_supported_buffer_typesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z39e5rt_io_port_get_supported_buffer_typesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_io_port_get_supported_buffer_typesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_io_port_get_supported_buffer_typesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F02B80()
{
  return &unk_1E2DC8758;
}

void Espresso::create_context(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    OUTLINED_FUNCTION_31();
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t e5rt_program_function_get_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC87F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F02C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_get_num_extern_inputs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC8878;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F02D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_get_extern_input_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC88F8;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F02E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_retain_extern_input_io_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8978;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F02F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_get_num_extern_outputs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC89F8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F02FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_get_extern_output_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8A78;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F030EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_retain_extern_output_io_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8AF8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F031E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_get_num_extern_inouts(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC8B78;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F032B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_get_extern_inout_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8BF8;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F033A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_load_for_execution(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC8C78;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F0347C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_retain_input_tensor_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8CF8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F03570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_retain_output_tensor_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8D78;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F03664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_retain_inout_tensor_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8DF8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F03758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_retain_input_surface_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8E78;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F0384C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_retain_output_surface_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8EF8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F03940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_retain_inout_surface_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC8F78;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F03A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F03A70()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F03A84(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC8778;
  result[1] = v3;
  return result;
}

uint64_t sub_190F03AB8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC8778;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F03AD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      if (*(char *)(v2 + 39) < 0)
      {
        operator delete(*(void **)(v2 + 16));
        v4 = *(std::__shared_weak_count **)(v2 + 8);
        if (!v4)
        {
LABEL_11:
          MEMORY[0x19401CD90](v2, 0x1032C40A813E67FLL);
          **(_QWORD **)(a1 + 8) = 0;
          return 0;
        }
      }
      else
      {
        v4 = *(std::__shared_weak_count **)(v2 + 8);
        if (!v4)
          goto LABEL_11;
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      goto LABEL_11;
    }
  }
  return 0;
}

uint64_t sub_190F03B80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_program_function_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z29e5rt_program_function_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_program_function_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_program_function_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F03BEC()
{
  return &unk_1E2DC87D8;
}

void sub_190F03BFC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F03C10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC87F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F03C48(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC87F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F03C68(uint64_t a1)
{
  _QWORD *v1;
  const std::string *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  void *__p[2];
  char v8;
  void *v9;
  __int128 v10;

  v1 = *(_QWORD **)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = (const std::string *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 56))(*v1);
      std::string::operator=((std::string *)(*(_QWORD *)(a1 + 8) + 16), v3);
      v4 = *(_QWORD *)(a1 + 8);
      v5 = (_QWORD *)(v4 + 16);
      if (*(char *)(v4 + 39) < 0)
        v5 = (_QWORD *)*v5;
      result = 0;
      **(_QWORD **)(a1 + 16) = v5;
    }
    else
    {
      v9 = operator new(0x30uLL);
      v10 = xmmword_191A72DA0;
      strcpy((char *)v9, "Invalid Function Argument: name is NULL.");
      v8 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v10) < 0)
        operator delete(v9);
      return 1;
    }
  }
  else
  {
    v9 = operator new(0x30uLL);
    v10 = xmmword_191A6F7A0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9);
    return 1;
  }
  return result;
}

void sub_190F03E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F03E4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z30e5rt_program_function_get_nameE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z30e5rt_program_function_get_nameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z30e5rt_program_function_get_nameE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z30e5rt_program_function_get_nameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F03EB8()
{
  return &unk_1E2DC8858;
}

void sub_190F03EC8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F03EDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC8878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F03F14(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F03F34(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(_QWORD **)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 32))(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(v3 + 24);
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F790;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F040BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F040FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_program_function_get_num_extern_inputsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z43e5rt_program_function_get_num_extern_inputsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_program_function_get_num_extern_inputsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_program_function_get_num_extern_inputsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F04168()
{
  return &unk_1E2DC88D8;
}

void sub_190F04178()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0418C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC88F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F041CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC88F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F041F4(_QWORD *a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v2 = (_QWORD **)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    if (v3)
      return sub_190F04404(v2, 0, a1[3], v3);
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6FFC0;
    strcpy((char *)v7, "Invalid Function Argument: names is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
  }
  if (v6 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return 1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v7);
  return 1;
}

void sub_190F0434C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0438C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_program_function_get_extern_input_namesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z44e5rt_program_function_get_extern_input_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_program_function_get_extern_input_namesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_program_function_get_extern_input_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F043F8()
{
  return &unk_1E2DC8958;
}

uint64_t sub_190F04404(_QWORD **a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *i;
  _QWORD *v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  v6 = (*(uint64_t (**)(void))(**a1 + 8 * a2 + 32))();
  if (*(_QWORD *)(v6 + 24) == a3)
  {
    for (i = *(uint64_t **)(v6 + 16); i; i = (uint64_t *)*i)
    {
      v9 = i + 2;
      if (*((char *)i + 39) < 0)
        v9 = (_QWORD *)*v9;
      *a4++ = v9;
    }
    return 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "Invalid Function Argument: num_ports does not match number of ports in function.");
    std::string::basic_string[abi:ne180100]<0>(__p, "PopulatePortNames");
    E5RT::LogErrorMessage((uint64_t *)v12, (uint64_t *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
    return 1;
  }
}

void sub_190F044D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_190F04528()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0453C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F0457C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8978;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F045A4(_QWORD *a1)
{
  void *exception;
  _BYTE v3[8];
  _BYTE __p[24];
  _BYTE v5[24];

  if (a1[1])
  {
    if (a1[2])
    {
      if (a1[3])
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v5[23] = 10;
        strcpy(v5, "operator()");
        *(_QWORD *)__p = operator new(0x90uLL);
        *(_OWORD *)&__p[8] = xmmword_191A72DB0;
        strcpy(*(char **)__p, "e5rt_program_function_retain_extern_input_io_port() is no longer supported. Switch to using e5rt_execution_stream_operation_t APIs instead.");
        E5RT::Status::Status(v3, 2, __p);
        E5RT::E5RTError::E5RTError(exception, v5, v3);
      }
      *(_QWORD *)v5 = operator new(0x30uLL);
      *(_OWORD *)&v5[8] = xmmword_191A6F7B0;
      strcpy(*(char **)v5, "Invalid Function Argument: port_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
    }
    else
    {
      *(_QWORD *)v5 = operator new(0x30uLL);
      *(_OWORD *)&v5[8] = xmmword_191A72DA0;
      strcpy(*(char **)v5, "Invalid Function Argument: name is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
    }
  }
  else
  {
    *(_QWORD *)v5 = operator new(0x30uLL);
    *(_OWORD *)&v5[8] = xmmword_191A6F7A0;
    strcpy(*(char **)v5, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v5[23] & 0x80000000) == 0)
      return 1;
  }
  else if ((v5[23] & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(*(void **)v5);
  return 1;
}

void sub_190F0481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190F048B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190F048C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_program_function_retain_extern_input_io_portE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z49e5rt_program_function_retain_extern_input_io_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_program_function_retain_extern_input_io_portE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_program_function_retain_extern_input_io_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F04930()
{
  return &unk_1E2DC89D8;
}

void sub_190F04940()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F04954(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC89F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F0498C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC89F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F049AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(_QWORD **)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 40))(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(v3 + 24);
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F790;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F04B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F04B74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_program_function_get_num_extern_outputsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z44e5rt_program_function_get_num_extern_outputsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_program_function_get_num_extern_outputsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_program_function_get_num_extern_outputsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F04BE0()
{
  return &unk_1E2DC8A58;
}

void sub_190F04BF0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F04C04(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8A78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F04C44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8A78;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F04C6C(_QWORD *a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v2 = (_QWORD **)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    if (v3)
      return sub_190F04404(v2, 1u, a1[3], v3);
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6FFC0;
    strcpy((char *)v7, "Invalid Function Argument: names is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
  }
  if (v6 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return 1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v7);
  return 1;
}

void sub_190F04DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F04E04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_program_function_get_extern_output_namesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z45e5rt_program_function_get_extern_output_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_program_function_get_extern_output_namesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_program_function_get_extern_output_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F04E70()
{
  return &unk_1E2DC8AD8;
}

void sub_190F04E80()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F04E94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8AF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F04ED4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8AF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F04EFC(_QWORD *a1)
{
  void *exception;
  _BYTE v3[8];
  _BYTE __p[24];
  _BYTE v5[24];

  if (a1[1])
  {
    if (a1[2])
    {
      if (a1[3])
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v5[23] = 10;
        strcpy(v5, "operator()");
        *(_QWORD *)__p = operator new(0x90uLL);
        *(_OWORD *)&__p[8] = xmmword_191A72DC0;
        strcpy(*(char **)__p, "e5rt_program_function_retain_extern_output_io_port() is no longer supported. Switch to using e5rt_execution_stream_operation_t APIs instead.");
        E5RT::Status::Status(v3, 2, __p);
        E5RT::E5RTError::E5RTError(exception, v5, v3);
      }
      *(_QWORD *)v5 = operator new(0x30uLL);
      *(_OWORD *)&v5[8] = xmmword_191A6F7B0;
      strcpy(*(char **)v5, "Invalid Function Argument: port_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
    }
    else
    {
      *(_QWORD *)v5 = operator new(0x30uLL);
      *(_OWORD *)&v5[8] = xmmword_191A72DA0;
      strcpy(*(char **)v5, "Invalid Function Argument: name is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
    }
  }
  else
  {
    *(_QWORD *)v5 = operator new(0x30uLL);
    *(_OWORD *)&v5[8] = xmmword_191A6F7A0;
    strcpy(*(char **)v5, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v5[23] & 0x80000000) == 0)
      return 1;
  }
  else if ((v5[23] & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(*(void **)v5);
  return 1;
}

void sub_190F05174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190F05208(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190F0521C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z50e5rt_program_function_retain_extern_output_io_portE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z50e5rt_program_function_retain_extern_output_io_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z50e5rt_program_function_retain_extern_output_io_portE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50e5rt_program_function_retain_extern_output_io_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F05288()
{
  return &unk_1E2DC8B58;
}

void sub_190F05298()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F052AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC8B78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F052E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8B78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F05304(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(_QWORD **)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 48))(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(v3 + 24);
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F790;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F0548C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F054CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_program_function_get_num_extern_inoutsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z43e5rt_program_function_get_num_extern_inoutsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_program_function_get_num_extern_inoutsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_program_function_get_num_extern_inoutsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F05538()
{
  return &unk_1E2DC8BD8;
}

void sub_190F05548()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0555C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8BF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F0559C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8BF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F055C4(_QWORD *a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v2 = (_QWORD **)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    if (v3)
      return sub_190F04404(v2, 2u, a1[3], v3);
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6FFC0;
    strcpy((char *)v7, "Invalid Function Argument: names is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
  }
  if (v6 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return 1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v7);
  return 1;
}

void sub_190F0571C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0575C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_program_function_get_extern_inout_namesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z44e5rt_program_function_get_extern_inout_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_program_function_get_extern_inout_namesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_program_function_get_extern_inout_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F057C8()
{
  return &unk_1E2DC8C58;
}

void sub_190F057D8()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F057EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC8C78;
  result[1] = v3;
  return result;
}

uint64_t sub_190F05820(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC8C78;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F0583C(uint64_t a1)
{
  _QWORD *v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(_QWORD **)(a1 + 8);
  if (v1)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 64))(*v1);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F05910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0594C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_program_function_load_for_executionE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_program_function_load_for_executionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_program_function_load_for_executionE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_program_function_load_for_executionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F059B8()
{
  return &unk_1E2DC8CD8;
}

void sub_190F059C8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F059DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F05A1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8CF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F05A44(_QWORD *a1)
{
  _QWORD **v2;
  char *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v2 = (_QWORD **)a1[1];
  if (v2)
  {
    v3 = (char *)a1[2];
    if (v3)
    {
      v4 = (_QWORD *)a1[3];
      if (v4)
        return sub_190F05CCC(v2, 0, v3, v4);
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A71370;
      strcpy((char *)v8, "Invalid Function Argument: tensor_desc_handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A72DA0;
      strcpy((char *)v8, "Invalid Function Argument: name is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return 1;
  }
  else if ((SHIBYTE(v9) & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v8);
  return 1;
}

void sub_190F05C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F05C54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_program_function_retain_input_tensor_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z46e5rt_program_function_retain_input_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_program_function_retain_input_tensor_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_program_function_retain_input_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F05CC0()
{
  return &unk_1E2DC8D58;
}

uint64_t sub_190F05CCC(_QWORD **a1, unsigned int a2, char *a3, _QWORD *a4)
{
  _QWORD *v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string __p;
  __int128 __dst;
  unint64_t v37;

  v6 = (_QWORD *)(*(uint64_t (**)(void))(**a1 + 8 * a2 + 32))();
  v7 = strlen(a3);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v37 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v37) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memcpy(p_dst, a3, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(v6, (uint64_t)&__dst);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)__dst);
  if (v12)
  {
    v13 = (const void *)v12[5];
    v14 = (std::__shared_weak_count *)v12[6];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = (_QWORD *)operator new();
    *v17 = 0;
    v17[1] = 0;
    if (v13)
    {
      if (v18)
        v19 = v14 == 0;
      else
        v19 = 1;
      if (!v19)
      {
        v20 = (unint64_t *)&v14->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        v22 = (std::__shared_weak_count *)v17[1];
        *v17 = v18;
        v17[1] = v14;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
LABEL_29:
        if (*v17)
        {
          v25 = 0;
          *a4 = v17;
          v26 = v14;
          if (!v14)
            return v25;
          goto LABEL_31;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, a3);
        v30 = std::string::append(&__p, " is not of expected type. Likely trying to retain a tensor descriptor as surface descriptor or vice versa.");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v37 = v30->__r_.__value_.__r.__words[2];
        __dst = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "RetainOperandDescriptor");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v37) & 0x80000000) == 0)
          {
LABEL_45:
            v32 = (std::__shared_weak_count *)v17[1];
            if (!v32)
              goto LABEL_53;
            goto LABEL_49;
          }
        }
        else if ((SHIBYTE(v37) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete((void *)__dst);
        v32 = (std::__shared_weak_count *)v17[1];
        if (!v32)
          goto LABEL_53;
LABEL_49:
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
LABEL_53:
        MEMORY[0x19401CD90](v17, 0x60C405C6656D0);
        v25 = 2;
        v26 = v14;
        if (!v14)
          return v25;
LABEL_31:
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        return v25;
      }
    }
    else
    {
      v18 = 0;
    }
    *v17 = v18;
    v17[1] = 0;
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid Function Argument: port descriptor not found in function.");
  std::string::basic_string[abi:ne180100]<0>(&__p, "RetainOperandDescriptor");
  E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)__dst);
  return 1;
}

void sub_190F06028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::unique_ptr<e5rt_tensor_desc>::~unique_ptr[abi:ne180100](&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_tensor_desc>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C405C6656D0);
  }
  return a1;
}

void sub_190F0637C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F06390(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8D78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F063D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8D78;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F063F8(_QWORD *a1)
{
  _QWORD **v2;
  char *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v2 = (_QWORD **)a1[1];
  if (v2)
  {
    v3 = (char *)a1[2];
    if (v3)
    {
      v4 = (_QWORD *)a1[3];
      if (v4)
        return sub_190F05CCC(v2, 1u, v3, v4);
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A71370;
      strcpy((char *)v8, "Invalid Function Argument: tensor_desc_handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A72DA0;
      strcpy((char *)v8, "Invalid Function Argument: name is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return 1;
  }
  else if ((SHIBYTE(v9) & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v8);
  return 1;
}

void sub_190F065C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F06608(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_program_function_retain_output_tensor_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z47e5rt_program_function_retain_output_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_program_function_retain_output_tensor_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_program_function_retain_output_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F06674()
{
  return &unk_1E2DC8DD8;
}

void sub_190F06684()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F06698(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8DF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F066D8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8DF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F06700(_QWORD *a1)
{
  _QWORD **v2;
  char *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v2 = (_QWORD **)a1[1];
  if (v2)
  {
    v3 = (char *)a1[2];
    if (v3)
    {
      v4 = (_QWORD *)a1[3];
      if (v4)
        return sub_190F05CCC(v2, 2u, v3, v4);
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A71370;
      strcpy((char *)v8, "Invalid Function Argument: tensor_desc_handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A72DA0;
      strcpy((char *)v8, "Invalid Function Argument: name is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return 1;
  }
  else if ((SHIBYTE(v9) & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v8);
  return 1;
}

void sub_190F068CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F06910(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_program_function_retain_inout_tensor_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z46e5rt_program_function_retain_inout_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_program_function_retain_inout_tensor_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_program_function_retain_inout_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0697C()
{
  return &unk_1E2DC8E58;
}

void sub_190F0698C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F069A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8E78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F069E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8E78;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F06A08(_QWORD *a1)
{
  _QWORD **v2;
  char *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v2 = (_QWORD **)a1[1];
  if (v2)
  {
    v3 = (char *)a1[2];
    if (v3)
    {
      v4 = (_QWORD *)a1[3];
      if (v4)
        return sub_190F06C90(v2, 0, v3, v4);
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A6F7E0;
      strcpy((char *)v8, "Invalid Function Argument: surface_desc_handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A72DA0;
      strcpy((char *)v8, "Invalid Function Argument: name is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return 1;
  }
  else if ((SHIBYTE(v9) & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v8);
  return 1;
}

void sub_190F06BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F06C18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_program_function_retain_input_surface_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z47e5rt_program_function_retain_input_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_program_function_retain_input_surface_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_program_function_retain_input_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F06C84()
{
  return &unk_1E2DC8ED8;
}

uint64_t sub_190F06C90(_QWORD **a1, unsigned int a2, char *a3, _QWORD *a4)
{
  _QWORD *v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string __p;
  __int128 __dst;
  unint64_t v37;

  v6 = (_QWORD *)(*(uint64_t (**)(void))(**a1 + 8 * a2 + 32))();
  v7 = strlen(a3);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v37 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v37) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memcpy(p_dst, a3, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(v6, (uint64_t)&__dst);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)__dst);
  if (v12)
  {
    v13 = (const void *)v12[5];
    v14 = (std::__shared_weak_count *)v12[6];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = (_QWORD *)operator new();
    *v17 = 0;
    v17[1] = 0;
    if (v13)
    {
      if (v18)
        v19 = v14 == 0;
      else
        v19 = 1;
      if (!v19)
      {
        v20 = (unint64_t *)&v14->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        v22 = (std::__shared_weak_count *)v17[1];
        *v17 = v18;
        v17[1] = v14;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
LABEL_29:
        if (*v17)
        {
          v25 = 0;
          *a4 = v17;
          v26 = v14;
          if (!v14)
            return v25;
          goto LABEL_31;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, a3);
        v30 = std::string::append(&__p, " is not of expected type. Likely trying to retain a tensor descriptor as surface descriptor or vice versa.");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v37 = v30->__r_.__value_.__r.__words[2];
        __dst = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "RetainOperandDescriptor");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v37) & 0x80000000) == 0)
          {
LABEL_45:
            v32 = (std::__shared_weak_count *)v17[1];
            if (!v32)
              goto LABEL_53;
            goto LABEL_49;
          }
        }
        else if ((SHIBYTE(v37) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete((void *)__dst);
        v32 = (std::__shared_weak_count *)v17[1];
        if (!v32)
          goto LABEL_53;
LABEL_49:
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
LABEL_53:
        MEMORY[0x19401CD90](v17, 0x60C405C6656D0);
        v25 = 2;
        v26 = v14;
        if (!v14)
          return v25;
LABEL_31:
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        return v25;
      }
    }
    else
    {
      v18 = 0;
    }
    *v17 = v18;
    v17[1] = 0;
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid Function Argument: port descriptor not found in function.");
  std::string::basic_string[abi:ne180100]<0>(&__p, "RetainOperandDescriptor");
  E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)__dst);
  return 1;
}

void sub_190F06FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::unique_ptr<e5rt_tensor_desc>::~unique_ptr[abi:ne180100](&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_190F07090()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F070A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8EF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F070E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8EF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0710C(_QWORD *a1)
{
  _QWORD **v2;
  char *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v2 = (_QWORD **)a1[1];
  if (v2)
  {
    v3 = (char *)a1[2];
    if (v3)
    {
      v4 = (_QWORD *)a1[3];
      if (v4)
        return sub_190F06C90(v2, 1u, v3, v4);
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A6F7E0;
      strcpy((char *)v8, "Invalid Function Argument: surface_desc_handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A72DA0;
      strcpy((char *)v8, "Invalid Function Argument: name is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return 1;
  }
  else if ((SHIBYTE(v9) & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v8);
  return 1;
}

void sub_190F072D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0731C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_program_function_retain_output_surface_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z48e5rt_program_function_retain_output_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_program_function_retain_output_surface_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_program_function_retain_output_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F07388()
{
  return &unk_1E2DC8F58;
}

void sub_190F07398()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F073AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC8F78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F073EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC8F78;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F07414(_QWORD *a1)
{
  _QWORD **v2;
  char *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v2 = (_QWORD **)a1[1];
  if (v2)
  {
    v3 = (char *)a1[2];
    if (v3)
    {
      v4 = (_QWORD *)a1[3];
      if (v4)
        return sub_190F06C90(v2, 2u, v3, v4);
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A6F7E0;
      strcpy((char *)v8, "Invalid Function Argument: surface_desc_handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A72DA0;
      strcpy((char *)v8, "Invalid Function Argument: name is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return 1;
  }
  else if ((SHIBYTE(v9) & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(v8);
  return 1;
}

void sub_190F075E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F07624(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_program_function_retain_inout_surface_descE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z47e5rt_program_function_retain_inout_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_program_function_retain_inout_surface_descE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_program_function_retain_inout_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F07690()
{
  return &unk_1E2DC8FD8;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::AneInferenceOperationImplUsingDriverAPIs(uint64_t a1, E5RT::ExecutionStreamOperationInternal *a2, __int128 *a3, uint64_t a4)
{
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  id **v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id *v17;
  _DWORD *v18;
  uint64_t v19;
  void **v21;
  void **v22;
  void *exception;
  char v24[8];
  void *__p[2];
  void *v26[2];
  int v27;
  void *v28[2];
  void *v29[2];
  int v30;
  __int128 v31;

  v31 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_OWORD *)v28 = 0u;
  *(_OWORD *)v29 = 0u;
  v30 = 1065353216;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v26 = 0u;
  v27 = 1065353216;
  E5RT::Ops::Impl::AneInferenceOperationImpl::AneInferenceOperationImpl(a1, (uint64_t)a2, (uint64_t)&v31, a4, (uint64_t)v28, (uint64_t)__p);
  v6 = (void **)v26[0];
  if (v26[0])
  {
    do
    {
      v21 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0)
LABEL_25:
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_25;
      }
      operator delete(v6);
      v6 = v21;
    }
    while (v21);
  }
  v7 = __p[0];
  __p[0] = 0;
  if (v7)
    operator delete(v7);
  v8 = (void **)v29[0];
  if (v29[0])
  {
    do
    {
      v22 = (void **)*v8;
      if (*((char *)v8 + 63) < 0)
      {
        operator delete(v8[5]);
        if (*((char *)v8 + 39) < 0)
LABEL_31:
          operator delete(v8[2]);
      }
      else if (*((char *)v8 + 39) < 0)
      {
        goto LABEL_31;
      }
      operator delete(v8);
      v8 = v22;
    }
    while (v22);
  }
  v9 = v28[0];
  v28[0] = 0;
  if (v9)
    operator delete(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)a1 = &off_1E2D5BE90;
  v13 = (id **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 5;
  *(_QWORD *)(a1 + 192) = 0;
  v14 = (void *)operator new();
  bzero(v14, 0x3030uLL);
  v15 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v14;
  if (v15)
    MEMORY[0x19401CD90](v15, 0x1020C40CB9090B6);
  v16 = (void *)operator new();
  bzero(v16, 0x1008uLL);
  ANEProgramRequestSharedEventsStruct::ANEProgramRequestSharedEventsStruct((ANEProgramRequestSharedEventsStruct *)v16);
  v17 = *v13;
  *v13 = (id *)v16;
  if (v17)
  {
    ANEProgramRequestSharedEventsStruct::~ANEProgramRequestSharedEventsStruct(v17);
    MEMORY[0x19401CD90]();
  }
  v18 = (_DWORD *)operator new();
  bzero(v18, 0xC18uLL);
  v19 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v18;
  if (v19)
  {
    MEMORY[0x19401CD90](v19, 0x1020C403FFFDEEELL);
    v18 = *(_DWORD **)(a1 + 192);
  }
  v18[770] = 0;
  if (*(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(a2) + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, "AneInferenceOperationImplUsingDriverAPIs");
    std::string::basic_string[abi:ne180100]<0>(__p, "InOut ports are not supported by ANE yet.");
    E5RT::Status::Status(v24, 1, __p);
    E5RT::E5RTError::E5RTError(exception, v28, v24);
  }
  return a1;
}

void sub_190F07988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  E5RT::Ops::Impl::AneInferenceOperationImpl *v25;
  uint64_t v26;
  id **v27;
  uint64_t v29;
  uint64_t v30;

  v29 = *((_QWORD *)v25 + 24);
  *((_QWORD *)v25 + 24) = 0;
  if (v29)
  {
    MEMORY[0x19401CD90](v29, 0x1020C403FFFDEEELL);
    std::unique_ptr<ANEProgramRequestSharedEventsStruct>::~unique_ptr[abi:ne180100](v27);
    v30 = *((_QWORD *)v25 + 21);
    *((_QWORD *)v25 + 21) = 0;
    if (!v30)
    {
LABEL_3:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26);
      E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl(v25);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::unique_ptr<ANEProgramRequestSharedEventsStruct>::~unique_ptr[abi:ne180100](v27);
    v30 = *((_QWORD *)v25 + 21);
    *((_QWORD *)v25 + 21) = 0;
    if (!v30)
      goto LABEL_3;
  }
  MEMORY[0x19401CD90](v30, 0x1020C40CB9090B6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26);
  E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl(v25);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_10:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

id **std::unique_ptr<ANEProgramRequestSharedEventsStruct>::~unique_ptr[abi:ne180100](id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ANEProgramRequestSharedEventsStruct::~ANEProgramRequestSharedEventsStruct(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::~AneInferenceOperationImplUsingDriverAPIs(const void **this)
{
  E5RT::AneDeviceManager *v2;
  E5RT::AneDeviceManager *AneDeviceManager;
  const void *v4;
  id *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *this = &off_1E2D5BE90;
  if (this[19])
  {
    E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(this[4]);
    v2 = (E5RT::AneDeviceManager *)objc_claimAutoreleasedReturnValue();
    AneDeviceManager = (E5RT::AneDeviceManager *)E5RT::AneDeviceManager::GetAneDeviceManager(v2);
    E5RT::AneDeviceManager::DeviceClose(AneDeviceManager, *((_DWORD *)this[2] + 12), -[E5RT::AneDeviceManager programHandle](v2, "programHandle"));

  }
  v4 = this[24];
  this[24] = 0;
  if (v4)
    MEMORY[0x19401CD90](v4, 0x1020C403FFFDEEELL);
  v5 = (id *)this[22];
  this[22] = 0;
  if (v5)
  {
    ANEProgramRequestSharedEventsStruct::~ANEProgramRequestSharedEventsStruct(v5);
    MEMORY[0x19401CD90]();
  }
  v6 = this[21];
  this[21] = 0;
  if (v6)
    MEMORY[0x19401CD90](v6, 0x1020C40CB9090B6);
  v7 = (std::__shared_weak_count *)this[20];
  if (!v7)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl((E5RT::Ops::Impl::AneInferenceOperationImpl *)this);
  }
  else
  {
LABEL_13:
    E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl((E5RT::Ops::Impl::AneInferenceOperationImpl *)this);
  }
}

{
  E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::~AneInferenceOperationImplUsingDriverAPIs(this);
  JUMPOUT(0x19401CD90);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::PrepareOpForEncode(E5RT::ExecutionStreamOperationInternal **this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t InputPorts;
  uint64_t OutputPorts;
  uint64_t v18;
  uint64_t v19;
  E5RT::AneDeviceManager *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  const char *v30;
  size_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  E5RT::ExecutionStreamOperationInternal **v36;
  uint64_t v37;
  void *v38;
  void *v39;
  int v40;
  unsigned __int8 *v41;
  void **v42;
  _QWORD *Aliases;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 **v51;
  void *i;
  uint64_t v53;
  id v54;
  const char *v55;
  size_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  E5RT::ExecutionStreamOperationInternal **v61;
  uint64_t v62;
  void *v63;
  int v64;
  void *v65;
  unsigned __int8 *v66;
  void **v67;
  uint64_t v68;
  std::string::size_type size;
  unsigned __int8 *v70;
  std::string *p_s1;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  E5RT::AneDeviceManager *AneDeviceManager;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  void *exception;
  std::string *v90;
  __int128 v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  void *v102;
  void *v103;
  id obj;
  id obja;
  uint64_t v106;
  uint64_t v107;
  E5RT::Ops::Impl::AneInferenceOperationImpl *v108;
  void (**v109)(_QWORD);
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  std::string __s1;
  void *v119[2];
  std::string::size_type v120;
  _BYTE v121[8];
  _QWORD v122[6];
  void *__p[2];
  int64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[128];
  _BYTE v129[128];
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(this[1]))
    return;
  v108 = (E5RT::Ops::Impl::AneInferenceOperationImpl *)this;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this[1]);
  v125 = 0x2B23800400000000;
  v126 = 0u;
  v127 = 0u;
  kdebug_trace();
  HIBYTE(v124) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = os_signpost_id_generate(v2);

  if (SHIBYTE(v124) < 0)
    operator delete(__p[0]);
  HIBYTE(v124) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v4 = objc_claimAutoreleasedReturnValue();
  if ((SHIBYTE(v124) & 0x80000000) == 0)
  {
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_10;
LABEL_8:
    if (os_signpost_enabled(v4))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_190DAF000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "AneOpPrepareForEncode", (const char *)&unk_191C083FD, (uint8_t *)__p, 2u);
    }
    goto LABEL_10;
  }
  operator delete(__p[0]);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_8;
LABEL_10:

  v122[0] = MEMORY[0x1E0C809B0];
  v122[1] = 3221225472;
  v122[2] = sub_190F08E94;
  v122[3] = &__block_descriptor_48_e5_v8__0l;
  v122[4] = v108;
  v122[5] = v3;
  v5 = (void (**)(_QWORD))MEMORY[0x19401D648](v122);
  v109 = v5;
  E5RT::Ops::Impl::AneInferenceOperationImpl::LoadAneModel(v108);
  E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(*((const void **)v108 + 4));
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v96, "modelAttributes");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE010]);
  v95 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v95, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE088]);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v94, "objectAtIndexedSubscript:", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE070]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "unsignedIntValue");

  v10 = v94;
  if ((unint64_t)objc_msgSend(v94, "count") >= 2)
  {
    v11 = *((_QWORD *)v108 + 2);
    objc_msgSend(v95, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE078]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v11 + 24;
    if (*(char *)(v11 + 47) < 0)
      v13 = *(_QWORD *)(v11 + 24);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKeyedSubscript:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v15)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
      std::operator+<char>();
      v90 = std::string::append(&__s1, " not found in multi-procedure mach-o.");
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v120 = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)v119 = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(v121, 1, v119);
      E5RT::E5RTError::E5RTError(exception, __p, v121);
    }
    v9 = objc_msgSend(v15, "unsignedIntValue");

    v10 = v94;
  }
  objc_msgSend(v10, "objectAtIndexedSubscript:", v9);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v92, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE030]);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v92, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE058]);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE038]);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "objectForKeyedSubscript:", *MEMORY[0x1E0CFE060]);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*((E5RT::ExecutionStreamOperationInternal **)v108
                                                                     + 1));
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*((E5RT::ExecutionStreamOperationInternal **)v108
                                                                       + 1));
  if (objc_msgSend(v98, "count") != *(_QWORD *)(InputPorts + 24))
  {
    v86 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(v119, "Invalid number of inputs in mach-o.");
    E5RT::Status::Status(&__s1, 2, v119);
    E5RT::E5RTError::E5RTError(v86, __p, &__s1);
  }
  if (objc_msgSend(v97, "count") != *(_QWORD *)(OutputPorts + 24))
  {
    v87 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(v119, "Invalid number of outputs in mach-o.");
    E5RT::Status::Status(&__s1, 2, v119);
    E5RT::E5RTError::E5RTError(v87, __p, &__s1);
  }
  bzero(*((void **)v108 + 21), 0x3030uLL);
  **((_DWORD **)v108 + 21) = v9;
  v18 = objc_msgSend(v96, "programHandle");
  v19 = *((_QWORD *)v108 + 21);
  *(_QWORD *)(v19 + 12288) = v18;
  *(_BYTE *)(v19 + 12308) = 0;
  *(_DWORD *)(v19 + 4) = *(_QWORD *)(InputPorts + 24);
  *(_DWORD *)(v19 + 6128) = *(_QWORD *)(OutputPorts + 24);
  *(_QWORD *)(v19 + 12296) = 2;
  v20 = (E5RT::AneDeviceManager *)qos_class_main();
  v21 = *((_QWORD *)v108 + 21);
  *(_DWORD *)(v21 + 12304) = (_DWORD)v20;
  v22 = *(_QWORD *)(InputPorts + 24);
  v93 = OutputPorts;
  v23 = *((_QWORD *)v108 + 24);
  *(_DWORD *)(v23 + 3080) = *(_DWORD *)(OutputPorts + 24) + v22;
  *(_QWORD *)(v23 + 3072) = *(_QWORD *)(v21 + 12288);
  *(_DWORD *)(v23 + 3084) = *(_DWORD *)v21;
  v24 = *(uint64_t **)(InputPorts + 16);
  if (v24)
  {
    v99 = InputPorts;
    v25 = 0;
    while (1)
    {
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      obj = v98;
      v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v114, v129, 16);
      if (!v26)
        goto LABEL_60;
      v106 = *(_QWORD *)v115;
      do
      {
        v27 = 0;
        do
        {
          if (*(_QWORD *)v115 != v106)
            objc_enumerationMutation(obj);
          v28 = objc_msgSend(*(id *)(*((_QWORD *)&v114 + 1) + 8 * v27), "integerValue");
          objc_msgSend(v103, "objectAtIndexedSubscript:", v28);
          v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v30 = (const char *)objc_msgSend(v29, "UTF8String");
          v31 = strlen(v30);
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v32 = (void *)v31;
          if (v31 >= 0x17)
          {
            v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v34 = v31 | 7;
            v35 = v34 + 1;
            v33 = operator new(v34 + 1);
            __p[1] = v32;
            v124 = v35 | 0x8000000000000000;
            __p[0] = v33;
          }
          else
          {
            HIBYTE(v124) = v31;
            v33 = __p;
            if (!v31)
              goto LABEL_32;
          }
          memmove(v33, v30, (size_t)v32);
LABEL_32:
          v5 = v109;
          *((_BYTE *)v32 + (_QWORD)v33) = 0;

          v36 = (E5RT::ExecutionStreamOperationInternal **)v24[5];
          if (!v36 || *v36 != (E5RT::ExecutionStreamOperationInternal *)&off_1E2D59AC8)
            v36 = 0;
          v37 = HIBYTE(v124);
          if (v124 >= 0)
            v38 = (void *)HIBYTE(v124);
          else
            v38 = __p[1];
          v39 = (void *)*((unsigned __int8 *)v24 + 39);
          v40 = (char)v39;
          if ((char)v39 < 0)
            v39 = (void *)v24[3];
          if (v38 == v39)
          {
            if (v40 >= 0)
              v41 = (unsigned __int8 *)(v24 + 2);
            else
              v41 = (unsigned __int8 *)v24[2];
            if (v124 < 0)
            {
              if (!memcmp(__p[0], v41, (size_t)__p[1]))
                goto LABEL_52;
            }
            else
            {
              if (!HIBYTE(v124))
                goto LABEL_52;
              v42 = __p;
              while (*(unsigned __int8 *)v42 == *v41)
              {
                v42 = (void **)((char *)v42 + 1);
                ++v41;
                if (!--v37)
                  goto LABEL_52;
              }
            }
          }
          Aliases = (_QWORD *)E5RT::IOPortPriv::GetAliases(v36);
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(Aliases, (uint64_t)__p))
          {
LABEL_52:
            v44 = 0;
            v45 = *((_QWORD *)v108 + 21) + 24 * v25;
            *(_DWORD *)(v45 + 24) = 1;
            *(_DWORD *)(v45 + 16) = v28;
            v46 = *((_QWORD *)v108 + 24) + 24 * v25;
            *(_DWORD *)(v46 + 16) = 1;
            *(_DWORD *)(v46 + 8) = v28;
            ++v25;
            if ((SHIBYTE(v124) & 0x80000000) == 0)
              goto LABEL_54;
LABEL_53:
            operator delete(__p[0]);
            goto LABEL_54;
          }
          v44 = 1;
          if (SHIBYTE(v124) < 0)
            goto LABEL_53;
LABEL_54:
          if (!v44)
            goto LABEL_60;
          ++v27;
        }
        while (v27 != v26);
        v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v114, v129, 16);
        v26 = v47;
      }
      while (v47);
LABEL_60:

      v24 = (uint64_t *)*v24;
      if (!v24)
      {
        v22 = *(_QWORD *)(v99 + 24);
        if (v25 == v22)
          goto LABEL_62;
LABEL_127:
        v77 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
        std::string::basic_string[abi:ne180100]<0>(v119, "Unable to find ANE input index mappings for all op inputs.");
        E5RT::Status::Status(&__s1, 2, v119);
        E5RT::E5RTError::E5RTError(v77, __p, &__s1);
      }
    }
  }
  if (v22)
    goto LABEL_127;
LABEL_62:
  v101 = v22;
  v48 = *(uint64_t **)(v93 + 16);
  if (v48)
  {
    v49 = 0;
    while (1)
    {
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v100 = v97;
      v50 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v110, v128, 16);
      if (!v50)
        goto LABEL_124;
      v51 = (unsigned __int8 **)(v48 + 2);
      v107 = *(_QWORD *)v111;
      do
      {
        obja = (id)v50;
        for (i = 0; i != obja; i = (char *)i + 1)
        {
          if (*(_QWORD *)v111 != v107)
            objc_enumerationMutation(v100);
          v53 = objc_msgSend(*(id *)(*((_QWORD *)&v110 + 1) + 8 * (_QWORD)i), "integerValue");
          objc_msgSend(v102, "objectAtIndexedSubscript:", v53);
          v54 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v55 = (const char *)objc_msgSend(v54, "UTF8String");
          v56 = strlen(v55);
          if (v56 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v57 = (void *)v56;
          if (v56 >= 0x17)
          {
            v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v56 | 7) != 0x17)
              v59 = v56 | 7;
            v60 = v59 + 1;
            v58 = operator new(v59 + 1);
            __p[1] = v57;
            v124 = v60 | 0x8000000000000000;
            __p[0] = v58;
          }
          else
          {
            HIBYTE(v124) = v56;
            v58 = __p;
            if (!v56)
              goto LABEL_77;
          }
          memmove(v58, v55, (size_t)v57);
LABEL_77:
          v5 = v109;
          *((_BYTE *)v57 + (_QWORD)v58) = 0;

          HIBYTE(v120) = 7;
          strcpy((char *)v119, "@output");
          E5Common::StringUtils::GetSubstringBeforeSuffix((uint64_t)__p, (uint64_t)v119, &__s1);
          v61 = (E5RT::ExecutionStreamOperationInternal **)v48[5];
          if (!v61 || *v61 != (E5RT::ExecutionStreamOperationInternal *)&off_1E2D59AC8)
            v61 = 0;
          v62 = HIBYTE(v124);
          if (v124 >= 0)
            v63 = (void *)HIBYTE(v124);
          else
            v63 = __p[1];
          v64 = *((char *)v48 + 39);
          if (v64 >= 0)
            v65 = (void *)*((unsigned __int8 *)v48 + 39);
          else
            v65 = (void *)v48[3];
          if (v63 == v65)
          {
            if (v64 >= 0)
              v66 = (unsigned __int8 *)(v48 + 2);
            else
              v66 = *v51;
            if (v124 < 0)
            {
              if (!memcmp(__p[0], v66, (size_t)__p[1]))
                goto LABEL_113;
            }
            else
            {
              if (!HIBYTE(v124))
                goto LABEL_113;
              v67 = __p;
              while (*(unsigned __int8 *)v67 == *v66)
              {
                v67 = (void **)((char *)v67 + 1);
                ++v66;
                if (!--v62)
                  goto LABEL_113;
              }
            }
          }
          v68 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            size = __s1.__r_.__value_.__l.__size_;
          if ((void *)size == v65)
          {
            if (v64 >= 0)
              v70 = (unsigned __int8 *)(v48 + 2);
            else
              v70 = *v51;
            if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (!memcmp(__s1.__r_.__value_.__l.__data_, v70, __s1.__r_.__value_.__l.__size_))
                goto LABEL_113;
            }
            else
            {
              if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
                goto LABEL_113;
              p_s1 = &__s1;
              while (p_s1->__r_.__value_.__s.__data_[0] == *v70)
              {
                p_s1 = (std::string *)((char *)p_s1 + 1);
                ++v70;
                if (!--v68)
                  goto LABEL_113;
              }
            }
          }
          v72 = (_QWORD *)E5RT::IOPortPriv::GetAliases(v61);
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v72, (uint64_t)__p)|| (v73 = (_QWORD *)E5RT::IOPortPriv::GetAliases(v61), std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v73, (uint64_t)&__s1)))
          {
LABEL_113:
            v74 = 0;
            v75 = *((_QWORD *)v108 + 21) + 24 * v49;
            *(_DWORD *)(v75 + 6152) = 2;
            *(_DWORD *)(v75 + 6144) = v53;
            v76 = *((_QWORD *)v108 + 24) + 24 * (v49 + v101);
            *(_DWORD *)(v76 + 16) = 2;
            *(_DWORD *)(v76 + 8) = v53;
            ++v49;
            if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_114;
            goto LABEL_119;
          }
          v74 = 1;
          if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_114:
            if ((SHIBYTE(v120) & 0x80000000) == 0)
              goto LABEL_115;
            goto LABEL_120;
          }
LABEL_119:
          operator delete(__s1.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v120) & 0x80000000) == 0)
          {
LABEL_115:
            if ((SHIBYTE(v124) & 0x80000000) == 0)
              goto LABEL_116;
            goto LABEL_121;
          }
LABEL_120:
          operator delete(v119[0]);
          if ((SHIBYTE(v124) & 0x80000000) == 0)
          {
LABEL_116:
            if (!v74)
              goto LABEL_124;
            continue;
          }
LABEL_121:
          operator delete(__p[0]);
          if (!v74)
            goto LABEL_124;
        }
        v50 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v110, v128, 16);
      }
      while (v50);
LABEL_124:

      v48 = (uint64_t *)*v48;
      if (!v48)
        goto LABEL_129;
    }
  }
  v49 = 0;
LABEL_129:
  AneDeviceManager = (E5RT::AneDeviceManager *)E5RT::AneDeviceManager::GetAneDeviceManager(v20);
  E5RT::AneDeviceManager::GetAneDevice(AneDeviceManager, 0, objc_msgSend(v96, "programHandle"), __p);
  v79 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v80 = (std::__shared_weak_count *)*((_QWORD *)v108 + 20);
  *(_OWORD *)((char *)v108 + 152) = v79;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v84 = (unint64_t *)((char *)__p[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v49 != *(_QWORD *)(v93 + 24))
  {
    v88 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(v119, "Unable to find ANE output index mappings for all op outputs.");
    E5RT::Status::Status(&__s1, 2, v119);
    E5RT::E5RTError::E5RTError(v88, __p, &__s1);
  }
  *(_QWORD *)&v126 = objc_msgSend(v96, "programHandle");

  v5[2](v5);
  if (E5RT::g_trace_analysis_level >= v125)
    kdebug_trace();
}

void sub_190F08ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void (**a24)(void),uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;
  void *v60;

  a24[2]();
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a59);
  _Unwind_Resume(a1);
}

void sub_190F08E94(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _BYTE __p[12];
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v11 = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v3 = objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
  {
    operator delete(*(void **)__p);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  if (os_signpost_enabled(v3))
  {
    v5 = *(uint64_t **)(v2 + 16);
    v6 = v5;
    if (*((char *)v5 + 23) < 0)
    {
      v6 = (uint64_t *)*v5;
      v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
      v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0)
      {
LABEL_8:
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = v6;
        v9 = 2080;
        v10 = v7;
        _os_signpost_emit_with_name_impl(&dword_190DAF000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AneOpPrepareForEncode", "Model=%{signpost.description:attribute}s Procedure=%{signpost.description:attribute}s ", __p, 0x16u);
        goto LABEL_9;
      }
    }
    v7 = (_QWORD *)*v7;
    goto LABEL_8;
  }
LABEL_9:

}

void sub_190F08FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  E5RT::ExecutionStreamOperationInternal *v2;
  void *exception;
  void *v5;
  _QWORD v6[3];
  _BYTE v7[8];
  _QWORD v8[8];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(this[1]) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&v9, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v8, 2, &v9);
    E5RT::E5RTError::E5RTError(exception, &v13, v8);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this[1]);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this[1]);
  v13 = 0x2B23800C00000000;
  v14 = 0u;
  v15 = 0u;
  kdebug_trace();
  *((_DWORD *)this[21] + 3074) = *((_DWORD *)this + 46);
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v2 = this[19];
  v8[3] = MEMORY[0x1E0C809B0];
  v8[4] = 3221225472;
  v8[5] = sub_190F09318;
  v8[6] = &unk_1E2DC8FF0;
  v8[7] = &v9;
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)v2 + 8))(v2);
  if (*((_DWORD *)v10 + 6) != 8)
  {
    v5 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v6, "ANE inference operation failed.");
    E5RT::Status::Status(v7, 11, v6);
    E5RT::E5RTError::E5RTError(v5, v8, v7);
  }
  _Block_object_dispose(&v9, 8);
  return kdebug_trace();
}

void sub_190F09208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a28, 8);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v33 - 72));
  _Unwind_Resume(a1);
}

void sub_190F09318(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;

  if (*(_DWORD *)a2 != 19 || *(_QWORD *)(a2 + 8) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (!*(_DWORD *)(v3 + 24))
      *(_DWORD *)(v3 + 24) = *(_DWORD *)a2;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v4 = objc_claimAutoreleasedReturnValue();
    if (v13 < 0)
      operator delete(__p[0]);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_190F0A944(v4, v5, v6, v7, v8, v9, v10, v11);

  }
}

void sub_190F093E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DependentAsyncEvents;
  E5RT::AsyncEvent *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *exception;
  void *v18;
  _QWORD v19[3];
  char v20;
  _QWORD v21[3];
  _BYTE v22[8];
  E5RT::AsyncEvent *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[6];
  _BYTE v29[24];
  _BYTE *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8)) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v19, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v21, 2, v19);
    E5RT::E5RTError::E5RTError(exception, &v25, v21);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  v25 = 0x2B23801800000000;
  v26 = 0u;
  v27 = 0u;
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*(_QWORD *)(a1 + 8), &v23);
  DependentAsyncEvents = E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  v7 = v23;
  if (!v23)
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v21, "Completion AsyncEvent (internal or client bound) is required for async submit.");
    E5RT::Status::Status(v22, 11, v21);
    E5RT::E5RTError::E5RTError(v18, v19, v22);
  }
  v8 = *(uint64_t ***)(DependentAsyncEvents + 16);
  if (v8)
  {
    v9 = 16;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 176) + v9) = E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)v8[2]);
      v8 = (uint64_t **)*v8;
      v9 += 32;
    }
    while (v8);
    v7 = v23;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 176) + 2064) = E5RT::AsyncEvent::GetActiveFutureValue(v7);
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2020000000;
  v20 = 0;
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3321888768;
  v28[2] = sub_190F09938;
  v28[3] = &unk_1E2DC44B8;
  v28[5] = a1;
  v10 = v29;
  v29[0] = 0;
  v31 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v11 = *(_QWORD *)(a4 + 24);
    if (v11)
    {
      if (v11 == a4)
      {
        v30 = v29;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v29);
        goto LABEL_13;
      }
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
    v30 = (_BYTE *)v11;
LABEL_13:
    v31 = 1;
  }
  v28[4] = v19;
  v12 = (void *)MEMORY[0x19401D648](v28);
  (***(void (****)(_QWORD, _QWORD, void *, _QWORD))(a1 + 152))(*(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 168), v12, *(_QWORD *)(a1 + 176));

  if (v31)
  {
    if (v30 == v29)
    {
      v13 = 4;
      goto LABEL_19;
    }
    if (v30)
    {
      v13 = 5;
      v10 = v30;
LABEL_19:
      (*(void (**)(_QWORD *))(*v10 + 8 * v13))(v10);
    }
  }
  _Block_object_dispose(v19, 8);
  v14 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (E5RT::g_trace_analysis_level >= v25)
    kdebug_trace();
}

void sub_190F09768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,_QWORD *a34,char a35)
{
  _QWORD *v35;
  uint64_t v37;

  if (a35)
  {
    if (a34 == v35)
    {
      v37 = 4;
    }
    else
    {
      if (!a34)
        goto LABEL_7;
      v37 = 5;
      v35 = a34;
    }
    (*(void (**)(_QWORD *))(*v35 + 8 * v37))(v35);
  }
LABEL_7:
  _Block_object_dispose(&a10, 8);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a20);
  _Unwind_Resume(a1);
}

void sub_190F097F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va1);
  _Unwind_Resume(a1);
}

void sub_190F09830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  void *v29;
  int v30;

  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_190F09878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a15 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v29 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v28);
      _Unwind_Resume(a1);
    }
  }
  else if (v29)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_190F098C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (a15 < 0)
    operator delete(__p);
  __cxa_free_exception(v23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a23);
  _Unwind_Resume(a1);
}

void sub_190F098DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  if (a25 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v25);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

void sub_190F09938(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  uint64_t v29;

  if (!*(_BYTE *)(a1 + 80))
    return;
  v3 = *a2;
  if (*a2 == 19 && *((_QWORD *)a2 + 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v3 == 8)
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
LABEL_12:
      v15 = *(void **)(v5 + 8);
      v26 = 0;
      __p[0] = v15;
      v16 = *(_QWORD *)(a1 + 72);
      if (!v16)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v16 + 48))(v16, __p, &v26);
      v17 = v26;
      v26 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      return;
    }
    HIBYTE(v28) = 4;
    strcpy((char *)__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (SHIBYTE(v28) < 0)
    {
      operator delete(__p[0]);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:

        if (*(_BYTE *)(a1 + 80))
          goto LABEL_12;
LABEL_18:
        std::__throw_bad_optional_access[abi:ne180100]();
      }
    }
    else if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_11;
    }
    sub_190F0A978(v7, v8, v9, v10, v11, v12, v13, v14);

    if (*(_BYTE *)(a1 + 80))
      goto LABEL_12;
    goto LABEL_18;
  }
  __p[0] = 0;
  __p[1] = 0;
  v28 = 0;
  if ((v3 - 17) > 1)
  {
    MEMORY[0x19401C808](__p, "ANE op async execution has returned unexpected failure.");
    v18 = 11;
  }
  else
  {
    MEMORY[0x19401C808](__p, "ANE op async execution has timed out.");
    v18 = 10;
  }
  if (!*(_BYTE *)(a1 + 80))
    std::__throw_bad_optional_access[abi:ne180100]();
  v19 = *(_QWORD *)(v5 + 8);
  std::string::basic_string[abi:ne180100]<0>(v23, "SubmitAsync_block_invoke");
  E5RT::Status::Status(&v22, v18, __p);
  std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string,E5RT::Status>((uint64_t)v23, (uint64_t)&v22, &v25);
  v29 = v19;
  v20 = *(_QWORD *)(a1 + 72);
  if (!v20)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v29, &v25);
  v21 = v25;
  v25 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  E5RT::Status::~Status((E5RT::Status *)&v22);
  if (v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
}

void sub_190F09B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_BYTE *__copy_helper_block_ea8_48c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;

  result[48] = 0;
  v3 = result + 48;
  result[80] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v4 = result;
    result = *(_BYTE **)(a2 + 72);
    if (result)
    {
      if (result == (_BYTE *)(a2 + 48))
      {
        *((_QWORD *)v4 + 9) = v3;
        result = (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72));
        goto LABEL_7;
      }
      result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 16))(result);
    }
    *((_QWORD *)v4 + 9) = result;
LABEL_7:
    v4[80] = 1;
  }
  return result;
}

void sub_190F09C90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 80))
    sub_190F0A9AC(v1, v1 + 48);
  _Unwind_Resume(exception_object);
}

uint64_t __destroy_helper_block_ea8_48c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 80))
  {
    v1 = result + 48;
    result = *(_QWORD *)(result + 72);
    if (result == v1)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
    }
    else if (result)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    }
  }
  return result;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::PreWireMemoryObjects(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t result;
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(this[1]) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "PreWireMemoryObjects");
    std::string::basic_string[abi:ne180100]<0>(v4, "Operation hasn't been encoded yet.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  result = E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(this[1]);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *, E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)this[19] + 16))(this[19], this[24]);
  return result;
}

void sub_190F09DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::EncodeOperation(E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs *this)
{
  void *v2;
  uint64_t **v3;
  unsigned int v4;
  uint64_t v5;
  E5RT::MemoryObject *MemoryObjectRef;
  void *v7;
  void (**v8)(E5RT::IOBufferObject *__hidden);
  void *v9;
  uint64_t **v10;
  unsigned int v11;
  E5RT::MemoryObject *v12;
  void *v13;
  void (**v14)(E5RT::IOBufferObject *__hidden);
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  const void **StreamConfigOptions;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(*((const void **)this + 4));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "programHandle");
  v45 = 0x2B23800800000000;
  v46 = 0u;
  v47 = 0u;
  kdebug_trace();

  v3 = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                            + 1))
                    + 16);
  if (v3)
  {
    v4 = 0;
    do
    {
      MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v3[5]);
      if (E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef))
      {
        v7 = E5RT::MemoryObject::Buffer(MemoryObjectRef);
        v8 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v7);
      }
      else
      {
        v9 = E5RT::MemoryObject::Surface(MemoryObjectRef);
        v8 = (void (**)(E5RT::IOBufferObject *__hidden))E5RT::SurfaceObject::GetHandle<__IOSurface *>(v9);
      }
      v5 = 24 * v4;
      *(_QWORD *)(*((_QWORD *)this + 21) + v5 + 8) = v8;
      ++v4;
      *(_QWORD *)(*((_QWORD *)this + 24) + v5) = v8;
      v3 = (uint64_t **)*v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  v10 = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                              + 1))
                     + 16);
  if (v10)
  {
    v11 = 0;
    do
    {
      v12 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v10[5]);
      if (E5RT::MemoryObject::TryAsBuffer(v12))
      {
        v13 = E5RT::MemoryObject::Buffer(v12);
        v14 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v13);
      }
      else
      {
        v15 = E5RT::MemoryObject::Surface(v12);
        v14 = (void (**)(E5RT::IOBufferObject *__hidden))E5RT::SurfaceObject::GetHandle<__IOSurface *>(v15);
      }
      *(_QWORD *)(*((_QWORD *)this + 21) + 24 * v11 + 6136) = v14;
      *(_QWORD *)(*((_QWORD *)this + 24) + 24 * (v4 + v11++)) = v14;
      v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  v16 = *(_QWORD **)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                                     + 1))
                   + 16);
  if (v16)
  {
    v17 = 0;
    do
    {
      v21 = v16[2];
      v22 = (std::__shared_weak_count *)v16[3];
      v43 = v21;
      v44 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
      E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(v21);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        v26 = (unint64_t *)&v22->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v18 = *((_QWORD *)this + 22) + 32 * v17;
      v19 = *(void **)(v18 + 8);
      *(_QWORD *)(v18 + 8) = v25;
      v20 = v25;

      *(_QWORD *)(*((_QWORD *)this + 22) + 32 * v17 + 24) = 0;
      ++v17;
      v16 = (_QWORD *)*v16;
    }
    while (v16);
  }
  else
  {
    LODWORD(v17) = 0;
  }
  **((_DWORD **)this + 22) = v17;
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*((_QWORD *)this + 1), &v43);
  v28 = v43;
  if (v43)
  {
    v29 = v44;
    if (v44)
    {
      v30 = (unint64_t *)&v44->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(v28);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
    {
      v33 = (unint64_t *)&v29->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v35 = *((_QWORD *)this + 22);
    v36 = *(void **)(v35 + 2056);
    *(_QWORD *)(v35 + 2056) = v32;
    v37 = v32;

    v38 = *((_QWORD *)this + 22);
    *(_QWORD *)(v38 + 2072) = 0;
    *(_DWORD *)(v38 + 4) = 1;

  }
  StreamConfigOptions = (const void **)E5RT::ExecutionStreamOperationInternal::GetStreamConfigOptions(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  if (E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions))
    *(_BYTE *)(*((_QWORD *)this + 21) + 12309) = 1;
  v40 = v44;
  if (v44)
  {
    v41 = (unint64_t *)&v44->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (E5RT::g_trace_analysis_level >= v45)
    kdebug_trace();
}

void sub_190F0A1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va2);
  _Unwind_Resume(a1);
}

void sub_190F0A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F0A204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F0A218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F0A22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F0A240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va1);
  _Unwind_Resume(a1);
}

void sub_190F0A270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F0A284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F0A298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F0A2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::ResetOperation(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t result;

  result = E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(this[1]);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *, E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)this[19] + 24))(this[19], this[24]);
    *((_DWORD *)this[24] + 770) = 0;
  }
  *((_BYTE *)this[21] + 12309) = 0;
  return result;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::SetANEExecutionPriority(uint64_t result, int a2)
{
  *(_DWORD *)(result + 184) = a2;
  return result;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::GetANEExecutionPriority(E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs *this)
{
  return *((unsigned int *)this + 46);
}

void ANEProgramRequestSharedEventsStruct::~ANEProgramRequestSharedEventsStruct(id *this)
{

}

void ANEProgramRequestSharedEventsStruct::ANEProgramRequestSharedEventsStruct(ANEProgramRequestSharedEventsStruct *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 101) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 117) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 129) = 0;
  *((_QWORD *)this + 133) = 0;
  *((_QWORD *)this + 137) = 0;
  *((_QWORD *)this + 141) = 0;
  *((_QWORD *)this + 145) = 0;
  *((_QWORD *)this + 149) = 0;
  *((_QWORD *)this + 153) = 0;
  *((_QWORD *)this + 157) = 0;
  *((_QWORD *)this + 161) = 0;
  *((_QWORD *)this + 165) = 0;
  *((_QWORD *)this + 169) = 0;
  *((_QWORD *)this + 173) = 0;
  *((_QWORD *)this + 177) = 0;
  *((_QWORD *)this + 181) = 0;
  *((_QWORD *)this + 185) = 0;
  *((_QWORD *)this + 189) = 0;
  *((_QWORD *)this + 193) = 0;
  *((_QWORD *)this + 197) = 0;
  *((_QWORD *)this + 201) = 0;
  *((_QWORD *)this + 205) = 0;
  *((_QWORD *)this + 209) = 0;
  *((_QWORD *)this + 213) = 0;
  *((_QWORD *)this + 217) = 0;
  *((_QWORD *)this + 221) = 0;
  *((_QWORD *)this + 225) = 0;
  *((_QWORD *)this + 229) = 0;
  *((_QWORD *)this + 233) = 0;
  *((_QWORD *)this + 237) = 0;
  *((_QWORD *)this + 241) = 0;
  *((_QWORD *)this + 245) = 0;
  *((_QWORD *)this + 249) = 0;
  *((_QWORD *)this + 253) = 0;
  *((_QWORD *)this + 257) = 0;
  *((_QWORD *)this + 261) = 0;
  *((_QWORD *)this + 265) = 0;
  *((_QWORD *)this + 269) = 0;
  *((_QWORD *)this + 273) = 0;
  *((_QWORD *)this + 277) = 0;
  *((_QWORD *)this + 281) = 0;
  *((_QWORD *)this + 285) = 0;
  *((_QWORD *)this + 289) = 0;
  *((_QWORD *)this + 293) = 0;
  *((_QWORD *)this + 297) = 0;
  *((_QWORD *)this + 301) = 0;
  *((_QWORD *)this + 305) = 0;
  *((_QWORD *)this + 309) = 0;
  *((_QWORD *)this + 313) = 0;
  *((_QWORD *)this + 317) = 0;
  *((_QWORD *)this + 321) = 0;
  *((_QWORD *)this + 325) = 0;
  *((_QWORD *)this + 329) = 0;
  *((_QWORD *)this + 333) = 0;
  *((_QWORD *)this + 337) = 0;
  *((_QWORD *)this + 341) = 0;
  *((_QWORD *)this + 345) = 0;
  *((_QWORD *)this + 349) = 0;
  *((_QWORD *)this + 353) = 0;
  *((_QWORD *)this + 357) = 0;
  *((_QWORD *)this + 361) = 0;
  *((_QWORD *)this + 365) = 0;
  *((_QWORD *)this + 369) = 0;
  *((_QWORD *)this + 373) = 0;
  *((_QWORD *)this + 377) = 0;
  *((_QWORD *)this + 381) = 0;
  *((_QWORD *)this + 385) = 0;
  *((_QWORD *)this + 389) = 0;
  *((_QWORD *)this + 393) = 0;
  *((_QWORD *)this + 397) = 0;
  *((_QWORD *)this + 401) = 0;
  *((_QWORD *)this + 405) = 0;
  *((_QWORD *)this + 409) = 0;
  *((_QWORD *)this + 413) = 0;
  *((_QWORD *)this + 417) = 0;
  *((_QWORD *)this + 421) = 0;
  *((_QWORD *)this + 425) = 0;
  *((_QWORD *)this + 429) = 0;
  *((_QWORD *)this + 433) = 0;
  *((_QWORD *)this + 437) = 0;
  *((_QWORD *)this + 441) = 0;
  *((_QWORD *)this + 445) = 0;
  *((_QWORD *)this + 449) = 0;
  *((_QWORD *)this + 453) = 0;
  *((_QWORD *)this + 457) = 0;
  *((_QWORD *)this + 461) = 0;
  *((_QWORD *)this + 465) = 0;
  *((_QWORD *)this + 469) = 0;
  *((_QWORD *)this + 473) = 0;
  *((_QWORD *)this + 477) = 0;
  *((_QWORD *)this + 481) = 0;
  *((_QWORD *)this + 485) = 0;
  *((_QWORD *)this + 489) = 0;
  *((_QWORD *)this + 493) = 0;
  *((_QWORD *)this + 497) = 0;
  *((_QWORD *)this + 501) = 0;
  *((_QWORD *)this + 505) = 0;
  *((_QWORD *)this + 509) = 0;
}

void sub_190F0A944(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190EFF73C(&dword_190DAF000, a1, a3, "Detected ANE Inference overflow.", a5, a6, a7, a8, 0);
}

void sub_190F0A978(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190EFF73C(&dword_190DAF000, a1, a3, "Detected ANE Inference overflow during async execution.", a5, a6, a7, a8, 0);
}

uint64_t sub_190F0A9AC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 72);
  if (v2 == a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 72) + 40))(*(_QWORD *)(result + 72));
  return result;
}

E5RT::E5CompilerConfigOptions *E5RT::E5CompilerConfigOptions::E5CompilerConfigOptions(E5RT::E5CompilerConfigOptions *this)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  __int128 __p;
  uint64_t v12;
  void *v13[2];
  void *v14[2];
  int v15;
  unsigned __int8 v16;
  char **v17;

  *(_QWORD *)E5RT::ConfigOptions::ConfigOptions(this) = &off_1E2D36538;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 1065353216;
  __p = 0uLL;
  v12 = 0;
  v17 = &E5RT::E5CompilerConfigOptions::bundleCacheLocation;
  v2 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v13, (uint64_t)&E5RT::E5CompilerConfigOptions::bundleCacheLocation, (uint64_t)&std::piecewise_construct, (_OWORD **)&v17);
  std::any::operator=[abi:ne180100]<std::string,std::string,void>((uint64_t)v2 + 32, &__p);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__p);
  v16 = 1;
  *(_QWORD *)&__p = &E5RT::E5CompilerConfigOptions::bundleCacheAPFSPurgeable;
  v3 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v13, (uint64_t)&E5RT::E5CompilerConfigOptions::bundleCacheAPFSPurgeable, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v3 + 32, &v16);
  v4 = (_QWORD *)operator new();
  E5RT::ConfigOptionsImpl::ConfigOptionsImpl((uint64_t)v4, (uint64_t *)v13);
  *v4 = &off_1E2DC9058;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v14[0];
  if (v14[0])
  {
    do
    {
      v9 = (_QWORD *)*v6;
      v10 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6[4];
      if (v10)
        v10(0, v6 + 4, 0, 0, 0);
      operator delete(v6);
      v6 = v9;
    }
    while (v9);
  }
  v7 = v13[0];
  v13[0] = 0;
  if (v7)
    operator delete(v7);
  return this;
}

void sub_190F0AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  E5RT::ConfigOptions *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a5);
  v7 = v6;
  MEMORY[0x19401CD90](v7, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v5);
  _Unwind_Resume(a1);
}

void sub_190F0AB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  E5RT::ConfigOptions *v5;
  va_list va;

  va_start(va, a5);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v5);
  _Unwind_Resume(a1);
}

void sub_190F0ABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  E5RT::ConfigOptions *v16;

  if (a15 < 0)
    operator delete(__p);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  E5RT::ConfigOptions::~ConfigOptions(v16);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerConfigOptions::~E5CompilerConfigOptions(E5RT::E5CompilerConfigOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::E5CompilerConfigOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

E5RT::E5CompilerConfigOptions *E5RT::E5CompilerConfigOptions::defaultE5CompilerConfigOptions@<X0>(E5RT::E5CompilerConfigOptions *a1@<X8>)
{
  return E5RT::E5CompilerConfigOptions::E5CompilerConfigOptions(a1);
}

void E5RT::E5CompilerConfigOptions::SetBundleCacheLocation(uint64_t a1, uint64_t a2)
{
  const void *v3;
  void *v4;
  void (*v5)(int);
  std::string v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    v5 = 0;
    v6.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(std::string *)a2;
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_6:
  v5 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  (*(void (**)(void *, const char *, uint64_t, void (**)(int)))(*(_QWORD *)v4 + 24))(v4, "bundleCacheLocation<std::string>", 32, &v5);
  if (v5)
    v5(0);
}

void sub_190F0AD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerConfigOptions::GetBundleCacheLocation(const void **this)
{
  void *v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "bundleCacheLocation<std::string>", 32);
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

uint64_t E5RT::E5CompilerConfigOptions::SetBundleCacheAPFSPurgeable(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "bundleCacheAPFSPurgeable<BOOL>", 30, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190F0AEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerConfigOptions::GetBundleCacheAPFSPurgeable(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "bundleCacheAPFSPurgeable<BOOL>", 30);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

void sub_190F0AF70(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);
  JUMPOUT(0x19401CD90);
}

E5RT::E5CompilerImpl *E5RT::E5CompilerImpl::E5CompilerImpl(E5RT::E5CompilerImpl *this, const E5RT::E5CompilerConfigOptions *a2)
{
  E5RT::E5BundleCacheManager *v4;
  void *v5;
  void *v6;
  int v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  uint64_t BundleCacheLocation;
  uint64_t v15;
  NSObject *v17;
  void *exception;
  std::string v19;
  std::string v20;
  _BYTE v21[15];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  E5RT::OnDeviceAOTCompilerInterface::OnDeviceAOTCompilerInterface(this);
  v4 = (E5RT::E5BundleCacheManager *)operator new();
  E5RT::E5BundleCacheManager::E5BundleCacheManager(v4, a2);
  *((_QWORD *)this + 3) = v4;
  E5RT::E5CompilerOptions::Create((E5RT::E5CompilerOptions **)this + 4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 9) = 850045863;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "processIdentifier");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "e5rt");
    E5RT::GetE5RTLog((uint64_t)&v20);
    v17 = objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_190F0D0FC(v17);

    v7 = 0;
  }
  std::to_string(&v19, v7);
  v8 = std::string::insert(&v19, 0, ".tmp.");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v20, ".bundle");
  v11 = v10->__r_.__value_.__r.__words[0];
  *(_QWORD *)v21 = v10->__r_.__value_.__l.__size_;
  *(_QWORD *)&v21[7] = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  v13 = *(_QWORD *)v21;
  *((_QWORD *)this + 5) = v11;
  *((_QWORD *)this + 6) = v13;
  *(_QWORD *)((char *)this + 55) = *(_QWORD *)&v21[7];
  *((_BYTE *)this + 63) = v12;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
LABEL_7:
  BundleCacheLocation = E5RT::E5CompilerConfigOptions::GetBundleCacheLocation((const void **)a2);
  v15 = *(unsigned __int8 *)(BundleCacheLocation + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(BundleCacheLocation + 8);
  if (!v15 && (E5RT::E5CompilerConfigOptions::GetBundleCacheAPFSPurgeable((const void **)a2) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "E5CompilerImpl");
    std::string::basic_string[abi:ne180100]<0>(&v19, "APFS purgeable must be turned on while using default cache location");
    E5RT::Status::Status(v21, 2, &v19);
    E5RT::E5RTError::E5RTError(exception, &v20, v21);
  }
  *((_BYTE *)this + 64) = E5RT::E5CompilerConfigOptions::GetBundleCacheAPFSPurgeable((const void **)a2);

  return this;
}

void sub_190F0B23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t *v23;
  std::mutex *v24;
  void *v25;
  void **v26;
  uint64_t v28;
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);

  std::mutex::~mutex(v24);
  if (*(char *)(v22 + 63) < 0)
  {
    operator delete(*v26);
    v28 = *v23;
    *v23 = 0;
    if (!v28)
    {
LABEL_5:
      v29 = *(_QWORD *)(v22 + 24);
      *(_QWORD *)(v22 + 24) = 0;
      if (!v29)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = *v23;
    *v23 = 0;
    if (!v28)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v22 + 24) = 0;
  if (!v29)
  {
LABEL_6:
    E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v22);
    _Unwind_Resume(a1);
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v22);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerImpl::CompileInternal(uint64_t a1@<X0>, std::string::size_type a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  std::string::size_type v7;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  std::string::size_type size;
  std::string *p_p;
  int v17;
  std::string *v18;
  uint64_t v19;
  NSObject *v20;
  std::string *v21;
  __int128 v22;
  E5RT::E5BundleCacheManager *v23;
  void *v24;
  std::string::size_type v25;
  std::string *v26;
  unsigned __int8 v27;
  int v28;
  E5RT::E5BundleCacheManager *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  NSObject *v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string *v37;
  const std::__fs::filesystem::path *v38;
  uint64_t v39;
  std::string::size_type v40;
  std::string *v41;
  std::__fs::filesystem::path *p_from;
  std::__fs::filesystem::path *v43;
  std::string *v44;
  void *v45;
  void *v46;
  void *exception;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  void *v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  void *v57;
  std::string __p;
  std::string pn;
  std::string v60;
  std::__fs::filesystem::path __from;
  _BYTE __replacement[32];
  uint64_t v63;
  uint64_t v64;

  v7 = a2;
  v64 = *MEMORY[0x1E0C80C00];
  memset(__replacement, 0, 24);
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = *(_QWORD *)(a2 + 8);
  if ((v10 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v10 = v11;
  }
  std::string::append[abi:ne180100]<char const*,0>((std::string *)__replacement, (std::string *)a2, (std::string *)(a2 + v10));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__replacement, 0);
  if ((__replacement[23] & 0x80000000) != 0)
    operator delete(*(void **)__replacement);
  if (__from.__pn_.__r_.__value_.__s.__data_[0] == 255
    || __from.__pn_.__r_.__value_.__s.__data_[0] == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__replacement, "CompileInternal");
    std::operator+<char>();
    E5RT::Status::Status(&v60, 1, &__from);
    E5RT::E5RTError::E5RTError(exception, __replacement, &v60);
  }
  if (E5RT::E5CompilerOptions::GetForceRecompilation(a3)
    && E5RT::E5CompilerOptions::GetForceFetchFromCache(a3))
  {
    v46 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__replacement, "CompileInternal");
    std::string::basic_string[abi:ne180100]<0>(&__from, "ForceRecompilation and ForceFetchFromCache can not be set to true at the same time.");
    E5RT::Status::Status(&v60, 2, &__from);
    E5RT::E5RTError::E5RTError(v46, __replacement, &v60);
  }
  memset(&__p, 0, sizeof(__p));
  *a5 = 0;
  E5RT::E5CompilerImpl::IsNewCompileRequiredInternal(a3, a1, v7, (uint64_t)__replacement);
  v13 = __replacement[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = *(std::string *)&__replacement[8];
  v14 = v63;
  *a5 = v63;
  if (v13)
  {
    if (E5RT::E5CompilerOptions::GetForceFetchFromCache(a3))
    {
      v45 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__replacement, "CompileInternal");
      std::string::basic_string[abi:ne180100]<0>(&__from, "E5 bundle does not exist in cache, but skipping compiling based on forceFetchFromCache.");
      E5RT::Status::Status(&v60, 13, &__from);
      E5RT::E5RTError::E5RTError(v45, __replacement, &v60);
    }
    memset(&__from, 0, sizeof(__from));
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    std::string::append[abi:ne180100]<char const*,0>(&__from.__pn_, p_p, (std::string *)((char *)p_p + size));
    memset(__replacement, 0, 24);
    v17 = *(char *)(a1 + 63);
    if (v17 >= 0)
      v18 = (std::string *)(a1 + 40);
    else
      v18 = *(std::string **)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 48);
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a1 + 63);
    std::string::append[abi:ne180100]<char const*,0>((std::string *)__replacement, v18, (std::string *)((char *)v18 + v19));
    std::__fs::filesystem::path::replace_extension(&__from, (const std::__fs::filesystem::path *)__replacement);
    if ((__replacement[23] & 0x80000000) != 0)
      operator delete(*(void **)__replacement);
    __replacement[23] = 4;
    strcpy(__replacement, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__replacement);
    v20 = objc_claimAutoreleasedReturnValue();
    if ((__replacement[23] & 0x80000000) != 0)
      operator delete(*(void **)__replacement);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v7 + 23) >= 0)
        v40 = v7;
      else
        v40 = *(_QWORD *)v7;
      v41 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
      p_from = &__from;
      if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_from = (std::__fs::filesystem::path *)__from.__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)__replacement = 136315650;
      *(_QWORD *)&__replacement[4] = v40;
      *(_WORD *)&__replacement[12] = 2080;
      *(_QWORD *)&__replacement[14] = v41;
      *(_WORD *)&__replacement[22] = 2080;
      *(_QWORD *)&__replacement[24] = p_from;
      _os_log_debug_impl(&dword_190DAF000, v20, OS_LOG_TYPE_DEBUG, "E5CompilerImpl::CompileInternal::performCompilation input=%s output=%s tmp-output=%s\n", __replacement, 0x20u);
    }

    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)__replacement, __from.__pn_.__r_.__value_.__l.__data_, __from.__pn_.__r_.__value_.__l.__size_);
    else
      *(std::__fs::filesystem::path *)__replacement = __from;
    E5RT::OnDeviceAOTCompilerInterface::Compile(a1, v7, (uint64_t)__replacement, a3, a4);
    if ((__replacement[23] & 0x80000000) != 0)
      operator delete(*(void **)__replacement);
    memset(__replacement, 0, 24);
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &__p;
    else
      v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = __p.__r_.__value_.__l.__size_;
    std::string::append[abi:ne180100]<char const*,0>((std::string *)__replacement, v26, (std::string *)((char *)v26 + v25));
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__replacement, 0);
    v27 = v60.__r_.__value_.__s.__data_[0];
    if ((__replacement[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__replacement);
      v28 = v27;
      if (!v27)
        goto LABEL_58;
    }
    else
    {
      v28 = v60.__r_.__value_.__s.__data_[0];
      if (!v60.__r_.__value_.__s.__data_[0])
        goto LABEL_58;
    }
    if (v28 != 255)
    {
      v29 = *(E5RT::E5BundleCacheManager **)(a1 + 24);
      memset(__replacement, 0, 24);
      v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &__p;
      else
        v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v30 = __p.__r_.__value_.__l.__size_;
      std::string::append[abi:ne180100]<char const*,0>((std::string *)__replacement, v31, (std::string *)((char *)v31 + v30));
      E5RT::E5BundleCacheManager::PurgeBundle(v29, (std::__fs::filesystem::path *)__replacement);
      if ((__replacement[23] & 0x80000000) != 0)
        operator delete(*(void **)__replacement);
    }
LABEL_58:
    std::__fs::filesystem::__status(&__from, 0);
    if (v60.__r_.__value_.__s.__data_[0] == 255 || !v60.__r_.__value_.__s.__data_[0])
    {
      if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&pn, __from.__pn_.__r_.__value_.__l.__data_, __from.__pn_.__r_.__value_.__l.__size_);
      else
        pn = __from.__pn_;
      v48 = std::string::insert(&pn, 0, "Output at ");
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      v50 = std::string::append(&v60, " does not exist after invoking AOT compiler.");
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *(_QWORD *)&__replacement[16] = *((_QWORD *)&v50->__r_.__value_.__l + 2);
      *(_OWORD *)__replacement = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pn.__r_.__value_.__l.__data_);
      v52 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v60, "operator()");
      E5RT::Status::Status(&pn, 11, __replacement);
      E5RT::E5RTError::E5RTError(v52, &v60, &pn);
    }
    memset(__replacement, 0, 24);
    v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &__p;
    else
      v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = __p.__r_.__value_.__l.__size_;
    std::string::append[abi:ne180100]<char const*,0>((std::string *)__replacement, v33, (std::string *)((char *)v33 + v32));
    std::__fs::filesystem::__rename(&__from, (const std::__fs::filesystem::path *)__replacement, 0);
    if ((__replacement[23] & 0x80000000) != 0)
      operator delete(*(void **)__replacement);
    __replacement[23] = 4;
    strcpy(__replacement, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__replacement);
    v34 = objc_claimAutoreleasedReturnValue();
    if ((__replacement[23] & 0x80000000) != 0)
      operator delete(*(void **)__replacement);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      v43 = &__from;
      if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = (std::__fs::filesystem::path *)__from.__pn_.__r_.__value_.__r.__words[0];
      v44 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)__replacement = 136315394;
      *(_QWORD *)&__replacement[4] = v43;
      *(_WORD *)&__replacement[12] = 2080;
      *(_QWORD *)&__replacement[14] = v44;
      _os_log_debug_impl(&dword_190DAF000, v34, OS_LOG_TYPE_DEBUG, "E5CompilerImpl::CompileInternal::performCompilation renamed %s to %s\n", __replacement, 0x16u);
    }

    std::__fs::filesystem::__status(&__from, 0);
    if (v60.__r_.__value_.__s.__data_[0] && v60.__r_.__value_.__s.__data_[0] != 255)
    {
      if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&pn, __from.__pn_.__r_.__value_.__l.__data_, __from.__pn_.__r_.__value_.__l.__size_);
      else
        pn = __from.__pn_;
      v53 = std::string::insert(&pn, 0, "Temporary E5 bundle @ ");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      v55 = std::string::append(&v60, " should not exist anymore.");
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      *(_QWORD *)&__replacement[16] = *((_QWORD *)&v55->__r_.__value_.__l + 2);
      *(_OWORD *)__replacement = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pn.__r_.__value_.__l.__data_);
      v57 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v60, "operator()");
      E5RT::Status::Status(&pn, 11, __replacement);
      E5RT::E5RTError::E5RTError(v57, &v60, &pn);
    }
    E5RT::E5BundleCacheManager::MarkAsMobileOwned(*(_QWORD *)(a1 + 24), (std::string::size_type)&__p);
    E5RT::ProgramLibrary::OpenLibrary((E5RT::SharedResourceManager *)&__p, __replacement);
    v35 = *(_QWORD *)__replacement;
    if (!*(_BYTE *)(a1 + 64))
      goto LABEL_79;
    memset(__replacement, 0, 24);
    v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &__p;
    else
      v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = __p.__r_.__value_.__l.__size_;
    std::string::append[abi:ne180100]<char const*,0>((std::string *)__replacement, v37, (std::string *)((char *)v37 + v36));
    E5RT::MarkAllFilesAsAPFSPurgeable((const std::__fs::filesystem::path *)__replacement, v38);
    if ((__replacement[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__replacement);
      if ((SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_81:
        v39 = *a5;
        *a5 = v35;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        goto LABEL_83;
      }
    }
    else
    {
LABEL_79:
      if ((SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_81;
    }
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_81;
  }
  if (!v14)
  {
    std::operator+<char>();
    v21 = std::string::append(&__from.__pn_, " model was a cache hit but ProgramLibrary is null");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(_QWORD *)&__replacement[16] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
    *(_OWORD *)__replacement = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    v23 = *(E5RT::E5BundleCacheManager **)(a1 + 24);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__from.__pn_, &__p);
    E5RT::E5BundleCacheManager::PurgeBundle(v23, &__from);
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    v24 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__from, "CompileInternal");
    E5RT::Status::Status(&v60, 11, __replacement);
    E5RT::E5RTError::E5RTError(v24, &__from, &v60);
  }
LABEL_83:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_190F0BDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::__fs::filesystem::path *a29,std::__fs::filesystem::path *a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;
  int v39;
  E5RT::E5BundleCacheManager *v41;
  std::exception_ptr v42;

  if (!a2)
    _Unwind_Resume(exception_object);
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((v39 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v39)
  {
LABEL_7:
    if (a37 < 0)
      operator delete(a32);
    __cxa_begin_catch(exception_object);
    E5RT::E5BundleCacheManager::PurgeBundle(*(E5RT::E5BundleCacheManager **)(v37 + 24), (std::__fs::filesystem::path *)&a29);
    v41 = *(E5RT::E5BundleCacheManager **)(v37 + 24);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)&a32, (std::string *)&a9);
    E5RT::E5BundleCacheManager::PurgeBundle(v41, (std::__fs::filesystem::path *)&a32);
    if (a37 < 0)
      operator delete(a32);
    std::current_exception();
    v42.__ptr_ = &a32;
    std::rethrow_exception(v42);
    sub_190F0C020();
  }
  __cxa_free_exception(v38);
  goto LABEL_7;
}

void sub_190F0C024(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::exception_ptr a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::exception_ptr::~exception_ptr(&a23);
  __cxa_end_catch();
  JUMPOUT(0x190F0C05CLL);
}

void sub_190F0C084(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x190F0C248);
}

void sub_190F0C098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t *v31;
  void *v32;
  int v33;
  uint64_t v35;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      if (a31 < 0)
        operator delete(a26);
      v35 = *v31;
      *v31 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      if (SHIBYTE(a11) < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void sub_190F0C11C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    JUMPOUT(0x190F0C14CLL);
  JUMPOUT(0x190F0BEA8);
}

void sub_190F0C15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t *v31;
  void *v32;
  int v33;
  uint64_t v35;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
  {
    operator delete(a26);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      v35 = *v31;
      *v31 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      if (SHIBYTE(a11) < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void sub_190F0C1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t *v25;
  uint64_t v27;

  if (a25 < 0)
    operator delete(__p);
  v27 = *v25;
  *v25 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (SHIBYTE(a11) < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

void sub_190F0C1E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a28 < 0)
    operator delete(__p);
  __cxa_free_exception(v28);
  JUMPOUT(0x190F0C220);
}

void E5RT::E5CompilerImpl::SaveMILHashIntoBundleCache(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  std::string *v5;
  uint64_t v6;
  std::string v7;
  std::__fs::filesystem::path v8;
  std::string __p[17];
  _QWORD v10[20];

  v10[19] = *MEMORY[0x1E0C80C00];
  E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<MIL::IRProgram>(*(_QWORD *)(a1 + 24), a2, &v8);
  std::__fs::filesystem::__create_directories(&v8, 0);
  memset(__p, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__p, (std::string *)"model.milhash", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__p, (uint64_t)&v8, a3);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(a3, 0);
  if (__p[0].__r_.__value_.__s.__data_[0] != 255 && __p[0].__r_.__value_.__s.__data_[0])
    goto LABEL_14;
  E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(a2, 0, &v7);
  std::ofstream::basic_ofstream(__p);
  v5 = (v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? &v7
     : (std::string *)v7.__r_.__value_.__r.__words[0];
  v6 = (v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? HIBYTE(v7.__r_.__value_.__r.__words[2])
     : v7.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v5, v6);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) | 4);
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                 + 24);
  MEMORY[0x19401C8BC](&__p[0].__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v10);
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_15;
  }
  operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_15:
    operator delete(v8.__pn_.__r_.__value_.__l.__data_);
}

void sub_190F0C408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,_Unwind_Exception *exception_objecta,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, std::string *a2)
{
  std::string::size_type v3;
  BOOL v4;
  std::string::size_type size;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = (v3 & 0x80000000) != 0;
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0)
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v3 = v3;
  if (v4)
    v3 = size;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

{
  std::string::size_type v3;
  BOOL v4;
  std::string::size_type size;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = (v3 & 0x80000000) != 0;
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0)
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v3 = v3;
  if (v4)
    v3 = size;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

void sub_190F0C4CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void E5RT::E5CompilerImpl::IsNewCompileRequired(uint64_t a1@<X0>, std::string::size_type a2@<X1>, const void **a3@<X2>, _BYTE *a4@<X8>)
{
  std::mutex *v8;
  std::string *v9;
  int v10;
  _BYTE v11[8];
  __int128 __p;
  std::string::size_type v13;
  uint64_t v14;

  v8 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  E5RT::E5CompilerImpl::IsNewCompileRequiredInternal(a3, a1, a2, (uint64_t)v11);
  *a4 = v11[0];
  v9 = (std::string *)(a4 + 8);
  v10 = SHIBYTE(v13);
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = __p;
    v9->__r_.__value_.__r.__words[2] = v13;
  }
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v10 < 0)
    operator delete((void *)__p);
  std::mutex::unlock(v8);
}

void sub_190F0C5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::mutex *v14;
  void *v15;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  operator delete(v15);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_190F0C5D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerImpl::PurgeE5BundlesForInputModel<MIL::IRProgram>(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  E5RT::E5BundleCacheManager *v5;
  const std::__fs::filesystem::path *size;
  std::__fs::filesystem::path::__string_view v7;
  void *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v12;
  std::string __dst;

  v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  E5RT::E5CompilerImpl::SaveMILHashIntoBundleCache(a1, a2, &v12);
  v5 = *(E5RT::E5BundleCacheManager **)(a1 + 24);
  if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, v12.__pn_.__r_.__value_.__l.__data_, v12.__pn_.__r_.__value_.__l.__size_);
  else
    __dst = v12.__pn_;
  E5RT::E5BundleCacheManager::PurgeBundlesForInputPath(v5, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v7 = std::__fs::filesystem::path::__parent_path(&v12);
  size = (const std::__fs::filesystem::path *)v7.__size_;
  if (v7.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7.__size_ >= 0x17)
  {
    v9 = (v7.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7.__size_ | 7) != 0x17)
      v9 = v7.__size_ | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7.__size_;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_13;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7.__size_;
  p_dst = &__dst;
  if (v7.__size_)
LABEL_13:
    memmove(p_dst, v7.__data_, v7.__size_);
  *((_BYTE *)p_dst + v7.__size_) = 0;
  __p.__pn_ = __dst;
  E5RT::RemoveAll(&__p, size);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_18:
    operator delete(v12.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_16;
  }
  if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_16:
  std::mutex::unlock(v4);
}

void sub_190F0C758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::mutex *v26;

  if (a20 < 0)
    operator delete(__p);
  std::mutex::unlock(v26);
  _Unwind_Resume(a1);
}

E5RT::E5Compiler *E5RT::E5Compiler::E5Compiler(E5RT::E5Compiler *this, const E5RT::E5CompilerConfigOptions *a2)
{
  E5RT::E5CompilerImpl **v4;
  E5RT::E5CompilerImpl *v5;
  E5RT::E5CompilerImpl *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E2D59A48;
  *((_QWORD *)this + 1) = 0;
  v4 = (E5RT::E5CompilerImpl **)((char *)this + 8);
  v5 = (E5RT::E5CompilerImpl *)operator new();
  E5RT::E5CompilerImpl::E5CompilerImpl(v5, a2);
  v6 = *v4;
  *v4 = v5;
  if (v6)
  {
    std::mutex::~mutex((std::mutex *)((char *)v6 + 72));
    if (*((char *)v6 + 63) < 0)
      operator delete(*((void **)v6 + 5));
    v7 = *((_QWORD *)v6 + 4);
    *((_QWORD *)v6 + 4) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)v6 + 3);
    *((_QWORD *)v6 + 3) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v6);
    MEMORY[0x19401CD90]();
  }
  return this;
}

void sub_190F0C894(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x19401CD90](v2, 0x1032C40D076463ALL);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::E5CompilerImpl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

void sub_190F0C8C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::E5CompilerImpl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::E5CompilerImpl>>::~propagate_const(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  std::mutex::~mutex((std::mutex *)(v2 + 72));
  if (*(char *)(v2 + 63) < 0)
  {
    operator delete(*(void **)(v2 + 40));
    v3 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (!v3)
      goto LABEL_5;
    goto LABEL_4;
  }
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v3)
LABEL_4:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v2);
  MEMORY[0x19401CD90]();
  return a1;
}

void E5RT::E5Compiler::~E5Compiler(E5RT::E5Compiler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D59A48;
  *((_QWORD *)this + 1) = 0;
  if (!v1)
    return;
  std::mutex::~mutex((std::mutex *)(v1 + 72));
  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*(void **)(v1 + 40));
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v2)
LABEL_4:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
LABEL_5:
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v1);
  MEMORY[0x19401CD90]();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D59A48;
  *((_QWORD *)this + 1) = 0;
  if (!v1)
    return;
  std::mutex::~mutex((std::mutex *)(v1 + 72));
  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*(void **)(v1 + 40));
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v2)
LABEL_4:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
LABEL_5:
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v1);
  MEMORY[0x19401CD90]();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D59A48;
  *((_QWORD *)this + 1) = 0;
  if (!v1)
    goto LABEL_11;
  std::mutex::~mutex((std::mutex *)(v1 + 72));
  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*(void **)(v1 + 40));
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (!v2)
      goto LABEL_5;
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (!v2)
    {
LABEL_5:
      v3 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v1);
      MEMORY[0x19401CD90]();
LABEL_11:
      JUMPOUT(0x19401CD90);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_5;
}

void E5RT::E5Compiler::Compile(uint64_t a1@<X0>, std::string::size_type a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v7 + 72));
  E5RT::E5CompilerImpl::CompileInternal(v7, a2, a3, 0, a4);
  std::mutex::unlock((std::mutex *)(v7 + 72));
}

void sub_190F0CBE0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL E5RT::E5Compiler::IsNewCompileRequired(uint64_t a1, std::string::size_type a2, const void **a3)
{
  int v3;
  _BYTE v5[8];
  void *__p;
  char v7;

  E5RT::E5CompilerImpl::IsNewCompileRequired(*(_QWORD *)(a1 + 8), a2, a3, v5);
  v3 = v5[0];
  if (v7 < 0)
    operator delete(__p);
  return v3 != 0;
}

void E5RT::E5Compiler::PurgeE5BundlesForInputModel(uint64_t a1, std::string *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 72));
  E5RT::E5BundleCacheManager::PurgeBundlesForInputPath(*(E5RT::E5BundleCacheManager **)(v3 + 24), a2);
  std::mutex::unlock((std::mutex *)(v3 + 72));
}

void sub_190F0CC98(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void E5RT::E5Compiler::PurgeE5BundlesForInputModel(uint64_t a1, uint64_t a2)
{
  E5RT::E5CompilerImpl::PurgeE5BundlesForInputModel<MIL::IRProgram>(*(_QWORD *)(a1 + 8), a2);
}

void sub_190F0CCB4()
{
  E5RT::E5Compiler *v0;
  _BYTE v1[16];

  E5RT::E5CompilerConfigOptions::defaultE5CompilerConfigOptions((E5RT::E5CompilerConfigOptions *)v1);
  v0 = (E5RT::E5Compiler *)operator new();
  E5RT::E5Compiler::E5Compiler(v0, (const E5RT::E5CompilerConfigOptions *)v1);
  *(_QWORD *)v0 = off_1E2D364F8;
  qword_1EE2147A8 = (uint64_t)v0;
  E5RT::E5CompilerConfigOptions::~E5CompilerConfigOptions((E5RT::E5CompilerConfigOptions *)v1);
}

void sub_190F0CD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x19401CD90](v9, 0xA1C40BD48D6D6);
  E5RT::E5CompilerConfigOptions::~E5CompilerConfigOptions((E5RT::E5CompilerConfigOptions *)&a9);
  _Unwind_Resume(a1);
}

void sub_190F0CD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::E5CompilerConfigOptions::~E5CompilerConfigOptions((E5RT::E5CompilerConfigOptions *)&a9);
  _Unwind_Resume(a1);
}

E5RT::E5Compiler *E5RT::E5Compiler::MakeCompiler@<X0>(E5RT::E5Compiler *this@<X0>, E5RT::E5Compiler **a2@<X8>)
{
  E5RT::E5Compiler *v5;
  E5RT::E5Compiler *result;

  v5 = (E5RT::E5Compiler *)operator new();
  result = E5RT::E5Compiler::E5Compiler(v5, this);
  *(_QWORD *)v5 = off_1E2D364F8;
  *a2 = v5;
  return result;
}

void sub_190F0CDB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerPriv::getBundleRootPath(E5RT::E5CompilerPriv *this@<X0>, std::string *a2@<X8>)
{
  uint64_t RootPath;
  __int128 v4;

  RootPath = E5RT::E5BundleCacheManager::GetRootPath(*(E5RT::E5BundleCacheManager **)(*((_QWORD *)this + 1) + 24));
  if (*(char *)(RootPath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)RootPath, *(_QWORD *)(RootPath + 8));
  }
  else
  {
    v4 = *(_OWORD *)RootPath;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(RootPath + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void E5RT::E5CompilerPriv::~E5CompilerPriv(E5RT::E5CompilerPriv *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D59A48;
  *((_QWORD *)this + 1) = 0;
  if (!v1)
    return;
  std::mutex::~mutex((std::mutex *)(v1 + 72));
  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*(void **)(v1 + 40));
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v2)
LABEL_4:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
LABEL_5:
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v1);
  MEMORY[0x19401CD90]();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D59A48;
  *((_QWORD *)this + 1) = 0;
  if (!v1)
    goto LABEL_11;
  std::mutex::~mutex((std::mutex *)(v1 + 72));
  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*(void **)(v1 + 40));
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (!v2)
      goto LABEL_5;
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (!v2)
    {
LABEL_5:
      v3 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v1);
      MEMORY[0x19401CD90]();
LABEL_11:
      JUMPOUT(0x19401CD90);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_5;
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x19401C8BC](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](a1 + 52);
  return a1;
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x19401C8B0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x19401C8B0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_190F0D0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 416);
  _Unwind_Resume(a1);
}

void sub_190F0D0FC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "E5CompilerImpl:: processInfo is nil.\n", v1, 2u);
}

uint64_t e5rt_program_library_get_function_metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC92A8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F0D1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_library_get_build_info(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC93A8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F0D2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_library_get_segmentation_analytics(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9428;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F0D3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_library_get_e5_bundle_path(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC94A8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F0D474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F0D4B0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0D4C4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC90A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F0D4FC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC90A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0D51C(uint64_t a1)
{
  uint64_t *v2;
  const char *v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  void *__p[2];
  char v14;
  void *__dst;
  __int128 v16;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (uint64_t *)operator new();
      *v2 = 0;
      v3 = *(const char **)(a1 + 16);
      v4 = strlen(v3);
      if (v4 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v5 = v4;
      if (v4 >= 0x17)
      {
        v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v7 = v4 | 7;
        v8 = v7 + 1;
        p_dst = (void **)operator new(v7 + 1);
        *(_QWORD *)&v16 = v5;
        *((_QWORD *)&v16 + 1) = v8 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v16) = v4;
        p_dst = &__dst;
        if (!v4)
        {
LABEL_11:
          *((_BYTE *)p_dst + v5) = 0;
          E5RT::ProgramLibrary::OpenLibrary((E5RT::SharedResourceManager *)&__dst, __p);
          v9 = __p[0];
          __p[0] = 0;
          v10 = *v2;
          *v2 = (uint64_t)v9;
          if (v10)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            v11 = __p[0];
            __p[0] = 0;
            if (v11)
              (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
          }
          if (SHIBYTE(v16) < 0)
            operator delete(__dst);
          result = 0;
          **(_QWORD **)(a1 + 8) = v2;
          return result;
        }
      }
      memmove(p_dst, v3, v5);
      goto LABEL_11;
    }
    __dst = operator new(0x30uLL);
    v16 = xmmword_191A72DA0;
    strcpy((char *)__dst, "Invalid Function Argument: path is NULL.");
    v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    __dst = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190F0D76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0D7F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_program_library_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z27e5rt_program_library_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_program_library_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_program_library_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0D85C()
{
  return &unk_1E2DC9108;
}

void sub_190F0D86C()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F0D880(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC9128;
  result[1] = v3;
  return result;
}

uint64_t sub_190F0D8B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC9128;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F0D8D0(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *v2;
      *v2 = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      MEMORY[0x19401CD90](v2, 0x20C4093837F09);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A6FF90;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F0DA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0DAB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_program_library_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z28e5rt_program_library_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_program_library_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_program_library_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0DB1C()
{
  return &unk_1E2DC9188;
}

void sub_190F0DB2C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0DB40(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC91A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F0DB78(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC91A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0DB98(uint64_t a1)
{
  E5RT::ProgramLibrary **v1;
  uint64_t ExportedFunctions;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::ProgramLibrary ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(ExportedFunctions + 24);
    }
    else
    {
      v7 = operator new(0x38uLL);
      v8 = xmmword_191A726A0;
      strcpy((char *)v7, "Invalid Function Argument: num_functions is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F0DD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0DD5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z38e5rt_program_library_get_num_functionsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z38e5rt_program_library_get_num_functionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38e5rt_program_library_get_num_functionsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38e5rt_program_library_get_num_functionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0DDC8()
{
  return &unk_1E2DC9208;
}

void sub_190F0DDD8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0DDEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC9228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F0DE2C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9228;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0DE54(_QWORD *a1)
{
  E5RT::ProgramLibrary **v1;
  uint64_t ExportedFunctions;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = (E5RT::ProgramLibrary **)a1[1];
  if (v1)
  {
    if (a1[2])
    {
      ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(*v1);
      if (*(_QWORD *)(ExportedFunctions + 24) == a1[3])
      {
        v4 = *(uint64_t **)(ExportedFunctions + 16);
        if (v4)
        {
          v5 = 0;
          do
          {
            v6 = v4 + 2;
            if (*((char *)v4 + 39) < 0)
              v6 = (_QWORD *)*v6;
            *(_QWORD *)(a1[2] + v5) = v6;
            v4 = (uint64_t *)*v4;
            v5 += 8;
          }
          while (v4);
        }
        return 0;
      }
      v10 = operator new(0x58uLL);
      v11 = xmmword_191A73A50;
      strcpy((char *)v10, "Invalid Function Argument: num_functions does not match number of functions in library");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v11) & 0x80000000) == 0)
          return 1;
      }
      else if ((SHIBYTE(v11) & 0x80000000) == 0)
      {
        return 1;
      }
      operator delete(v10);
      return 1;
    }
    v10 = operator new(0x38uLL);
    v11 = xmmword_191A6F7D0;
    strcpy((char *)v10, "Invalid Function Argument: function_names is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
}

void sub_190F0E0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0E11C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_program_library_get_function_namesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z39e5rt_program_library_get_function_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_program_library_get_function_namesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_program_library_get_function_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0E188()
{
  return &unk_1E2DC9288;
}

void sub_190F0E198()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0E1AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC92A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F0E1EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC92A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0E214(uint64_t a1)
{
  uint64_t *v1;
  const void *v3;
  _QWORD *v4;
  uint64_t v6;
  size_t v7;
  size_t v8;
  void *p_dst;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void *__dst;
  __int128 v15;

  v1 = *(uint64_t **)(a1 + 8);
  if (!v1)
  {
    __dst = operator new(0x30uLL);
    v15 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_6;
  }
  v3 = *(const void **)(a1 + 16);
  if (!v3)
  {
    __dst = operator new(0x30uLL);
    v15 = xmmword_191A6F790;
    strcpy((char *)__dst, "Invalid Function Argument: func_name is NULL.");
    v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_6;
  }
  v4 = *(_QWORD **)(a1 + 24);
  if (!v4)
  {
    __dst = operator new(0x38uLL);
    v15 = xmmword_191A726A0;
    strcpy((char *)__dst, "Invalid Function Argument: metadata_dict is NULL.");
    v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
LABEL_6:
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        return 1;
    }
    else if ((SHIBYTE(v15) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(__dst);
    return 1;
  }
  if (*v4)
  {
    __dst = operator new(0x68uLL);
    v15 = xmmword_191A73A60;
    strcpy((char *)__dst, "Invalid Function Argument: *metadata_dict is non NULL. Potential memory leak if overwritten! Bailing.");
    v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_6;
  }
  v6 = *v1;
  v7 = strlen(*(const char **)(a1 + 16));
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = operator new(v10 + 1);
    *(_QWORD *)&v15 = v8;
    *((_QWORD *)&v15 + 1) = v11 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v15) = v7;
    p_dst = &__dst;
    if (!v7)
      goto LABEL_19;
  }
  memmove(p_dst, v3, v8);
LABEL_19:
  *((_BYTE *)p_dst + v8) = 0;
  **(_QWORD **)(a1 + 24) = E5RT::ProgramLibrary::GetFunctionMetadata(v6, (uint64_t)&__dst);
  if (SHIBYTE(v15) < 0)
    operator delete(__dst);
  return 0;
}

void sub_190F0E508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0E560(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_program_library_get_function_metadataE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z42e5rt_program_library_get_function_metadataE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_program_library_get_function_metadataE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_program_library_get_function_metadataE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0E5CC()
{
  return &unk_1E2DC9308;
}

void sub_190F0E5DC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0E5F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC9328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F0E630(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9328;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0E658(_QWORD *a1)
{
  E5RT::ProgramLibrary **v1;
  _QWORD *ExportedFunctions;
  const char *v4;
  size_t v5;
  size_t v6;
  char **p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  char **v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *__p[2];
  char v29;
  char *__dst;
  __int128 v31;

  v1 = (E5RT::ProgramLibrary **)a1[1];
  if (!v1)
  {
    __dst = (char *)operator new(0x30uLL);
    v31 = xmmword_191A6F7A0;
    strcpy(__dst, "Invalid Function Argument: handle is NULL.");
    v29 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_44;
  }
  if (!a1[2])
  {
    __dst = (char *)operator new(0x38uLL);
    v31 = xmmword_191A726A0;
    strcpy(__dst, "Invalid Function Argument: function_name is NULL.");
    v29 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_44;
  }
  if (!a1[3])
  {
    __dst = (char *)operator new(0x38uLL);
    v31 = xmmword_191A6FF80;
    strcpy(__dst, "Invalid Function Argument: function_handle is NULL.");
    v29 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
LABEL_44:
    if (v29 < 0)
      operator delete(__p[0]);
    goto LABEL_20;
  }
  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(*v1);
  v4 = (const char *)a1[2];
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (char **)operator new(v8 + 1);
    *(_QWORD *)&v31 = v6;
    *((_QWORD *)&v31 + 1) = v9 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_11;
  }
  HIBYTE(v31) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_11:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (uint64_t)&__dst);
  v11 = v10;
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if (v10)
      goto LABEL_14;
LABEL_19:
    __dst = (char *)operator new(0x40uLL);
    v31 = xmmword_191A73A70;
    strcpy(__dst, "Invalid Function Argument: function_name not found in library.");
    v29 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    if (v29 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v31) & 0x80000000) == 0)
        return 1;
      goto LABEL_40;
    }
LABEL_20:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      return 1;
LABEL_40:
    operator delete(__dst);
    return 1;
  }
  operator delete(__dst);
  if (!v11)
    goto LABEL_19;
LABEL_14:
  v12 = operator new();
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_QWORD *)(v12 + 32) = 0;
  v13 = (const char *)a1[2];
  v14 = strlen(v13);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v16 = (char **)operator new(v18 + 1);
    *(_QWORD *)&v31 = v15;
    *((_QWORD *)&v31 + 1) = v19 | 0x8000000000000000;
    __dst = (char *)v16;
    goto LABEL_25;
  }
  HIBYTE(v31) = v14;
  v16 = &__dst;
  if (v14)
LABEL_25:
    memmove(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (uint64_t)&__dst);
  if (!v20)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v22 = v20[5];
  v21 = v20[6];
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(std::__shared_weak_count **)(v12 + 8);
  *(_QWORD *)v12 = v22;
  *(_QWORD *)(v12 + 8) = v21;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if ((SHIBYTE(v31) & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
  if (SHIBYTE(v31) < 0)
LABEL_35:
    operator delete(__dst);
LABEL_36:
  result = 0;
  *(_QWORD *)a1[3] = v12;
  return result;
}

void sub_190F0EAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0EB84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_program_library_retain_program_functionE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z44e5rt_program_library_retain_program_functionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_program_library_retain_program_functionE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_program_library_retain_program_functionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0EBF0()
{
  return &unk_1E2DC9388;
}

void sub_190F0EC00()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0EC14(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC93A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F0EC4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC93A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0EC6C(uint64_t a1)
{
  E5RT::ProgramLibraryImpl ***v1;
  _QWORD *v3;
  uint64_t result;
  __CFDictionary *BuildInfo;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(E5RT::ProgramLibraryImpl ****)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD **)(a1 + 16);
    if (v3)
    {
      if (*v3)
      {
        v8 = operator new(0x68uLL);
        v9 = xmmword_191A73A80;
        strcpy((char *)v8, "Invalid Function Argument: *build_info_dict is non NULL. Potential memory leak if overwritten! Bailing.");
        v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v9) & 0x80000000) == 0)
            return 1;
        }
        else if ((SHIBYTE(v9) & 0x80000000) == 0)
        {
          return 1;
        }
        operator delete(v8);
        return 1;
      }
      else
      {
        BuildInfo = E5RT::ProgramLibrary::GetBuildInfo(*v1);
        result = 0;
        **(_QWORD **)(a1 + 16) = BuildInfo;
      }
    }
    else
    {
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A6FF80;
      strcpy((char *)v8, "Invalid Function Argument: build_info_dict is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F0EEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0EF04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z35e5rt_program_library_get_build_infoE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z35e5rt_program_library_get_build_infoE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35e5rt_program_library_get_build_infoE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35e5rt_program_library_get_build_infoE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0EF70()
{
  return &unk_1E2DC9408;
}

void sub_190F0EF80()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0EF94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F0EFCC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0EFEC(uint64_t a1)
{
  E5RT::ProgramLibraryImpl ***v1;
  _QWORD *v3;
  uint64_t result;
  __CFDictionary *SegmentationAnalytics;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(E5RT::ProgramLibraryImpl ****)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD **)(a1 + 16);
    if (v3)
    {
      if (*v3)
      {
        v8 = operator new(0x68uLL);
        v9 = xmmword_191A73A60;
        strcpy((char *)v8, "Invalid Function Argument: *metadata_dict is non NULL. Potential memory leak if overwritten! Bailing.");
        v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v9) & 0x80000000) == 0)
            return 1;
        }
        else if ((SHIBYTE(v9) & 0x80000000) == 0)
        {
          return 1;
        }
        operator delete(v8);
        return 1;
      }
      else
      {
        SegmentationAnalytics = E5RT::ProgramLibrary::GetSegmentationAnalytics(*v1);
        result = 0;
        **(_QWORD **)(a1 + 16) = SegmentationAnalytics;
      }
    }
    else
    {
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A726A0;
      strcpy((char *)v8, "Invalid Function Argument: metadata_dict is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F0F238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0F27C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_program_library_get_segmentation_analyticsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z47e5rt_program_library_get_segmentation_analyticsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_program_library_get_segmentation_analyticsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_program_library_get_segmentation_analyticsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0F2E8()
{
  return &unk_1E2DC9488;
}

void sub_190F0F2F8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F0F30C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC94A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F0F344(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC94A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F0F364(uint64_t a1, const E5RT::ProgramLibrary *a2)
{
  E5RT_Private **v2;
  uint64_t E5BundlePathFromProgramLibrary;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v2 = *(E5RT_Private ***)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      E5BundlePathFromProgramLibrary = E5RT_Private::GetE5BundlePathFromProgramLibrary(*v2, a2);
      result = 0;
      if (*(char *)(E5BundlePathFromProgramLibrary + 23) < 0)
        E5BundlePathFromProgramLibrary = *(_QWORD *)E5BundlePathFromProgramLibrary;
      **(_QWORD **)(a1 + 16) = E5BundlePathFromProgramLibrary;
    }
    else
    {
      v8 = operator new(0x38uLL);
      v9 = xmmword_191A6F7D0;
      strcpy((char *)v8, "Invalid Function Argument: e5_bundle_path is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F0F4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F0F538(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_program_library_get_e5_bundle_pathE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z39e5rt_program_library_get_e5_bundle_pathE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_program_library_get_e5_bundle_pathE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_program_library_get_e5_bundle_pathE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F0F5A4()
{
  return &unk_1E2DC9508;
}

E5RT::ExecutionStreamOperationInternal *E5RT::Ops::AneInferenceOperation::AneInferenceOperation(E5RT::ExecutionStreamOperationInternal *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  E5RT::ExecutionStreamOperationInternal *v14;
  uint64_t v15;
  void *exception;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v41;
  uint64_t v42;
  void *v43;
  void *__p[2];
  __int128 v45;
  int v46;
  _OWORD v47[2];
  _BYTE v48[8];
  uint64_t v49;

  v49 = a8;
  v14 = (E5RT::ExecutionStreamOperationInternal *)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, a6);
  *(_QWORD *)v14 = off_1E2D5B6C8;
  *((_QWORD *)v14 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(v14);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  v15 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(a1) + 16;
  while (1)
  {
    v15 = *(_QWORD *)v15;
    if (!v15)
      break;
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v15 + 40)))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "AneInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v47, "AneInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v48, 1, v47);
      E5RT::E5RTError::E5RTError(exception, __p, v48);
    }
  }
  v17 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a1) + 16;
  while (1)
  {
    v17 = *(_QWORD *)v17;
    if (!v17)
      break;
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v17 + 40)))
    {
      v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "AneInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v47, "AneInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v48, 1, v47);
      E5RT::E5RTError::E5RTError(v18, __p, v48);
    }
  }
  v19 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(a1) + 16;
  while (1)
  {
    v19 = *(_QWORD *)v19;
    if (!v19)
      break;
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v19 + 40)))
    {
      v20 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "AneInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v47, "AneInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v48, 1, v47);
      E5RT::E5RTError::E5RTError(v20, __p, v48);
    }
  }
  if ((a7 & 1) != 0)
  {
    *(_OWORD *)__p = 0u;
    v45 = 0u;
    v46 = 1065353216;
    v21 = *(uint64_t **)(a10 + 16);
    if (v21)
    {
      v22 = *(_QWORD *)a3;
      do
      {
        v23 = *(_QWORD *)(v22 + 56);
        v24 = *(_QWORD *)(v22 + 64);
        if (v23 != v24)
        {
          v25 = *((_BYTE *)v21 + 39);
          if (v25 >= 0)
            v26 = *((unsigned __int8 *)v21 + 39);
          else
            v26 = v21[3];
          if (v25 >= 0)
            v27 = (unsigned __int8 *)(v21 + 2);
          else
            v27 = (unsigned __int8 *)v21[2];
          while (1)
          {
            v28 = *(unsigned __int8 *)(v23 + 23);
            if ((v28 & 0x80u) == 0)
              v29 = *(unsigned __int8 *)(v23 + 23);
            else
              v29 = *(_QWORD *)(v23 + 8);
            if (v29 == v26)
            {
              if ((v28 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v23, v27, *(_QWORD *)(v23 + 8)))
                  break;
              }
              else
              {
                if (!*(_BYTE *)(v23 + 23))
                  break;
                v30 = 0;
                while (*(unsigned __int8 *)(v23 + v30) == v27[v30])
                {
                  if (v28 == ++v30)
                    goto LABEL_35;
                }
              }
            }
            v23 += 24;
            if (v23 == v24)
              goto LABEL_16;
          }
        }
LABEL_35:
        if (v23 != v24)
        {
          *(_QWORD *)&v47[0] = v21 + 2;
          v31 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)(v21 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)v47);
          std::string::operator=((std::string *)(v31 + 5), (const std::string *)(v21 + 5));
        }
LABEL_16:
        v21 = (uint64_t *)*v21;
      }
      while (v21);
    }
    v32 = operator new();
    v47[0] = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::AneInferenceOperationImplUsingAnefAPIs(v32, a1, v47, v49, __p, a11);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v47[0] + 1);
    if (*((_QWORD *)&v47[0] + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v47[0] + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = *((_QWORD *)a1 + 37);
    *((_QWORD *)a1 + 37) = v32;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = (char *)v45;
    if (!(_QWORD)v45)
    {
LABEL_52:
      v39 = __p[0];
      __p[0] = 0;
      if (v39)
        operator delete(v39);
      goto LABEL_54;
    }
    while (1)
    {
      v38 = *(char **)v37;
      if (v37[63] < 0)
      {
        operator delete(*((void **)v37 + 5));
        if ((v37[39] & 0x80000000) == 0)
          goto LABEL_48;
LABEL_51:
        operator delete(*((void **)v37 + 2));
        operator delete(v37);
        v37 = v38;
        if (!v38)
          goto LABEL_52;
      }
      else
      {
        if (v37[39] < 0)
          goto LABEL_51;
LABEL_48:
        operator delete(v37);
        v37 = v38;
        if (!v38)
          goto LABEL_52;
      }
    }
  }
  std::make_unique[abi:ne180100]<E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs,E5RT::Ops::AneInferenceOperation &,std::shared_ptr<AneInferenceOpT const>,unsigned long long &>((uint64_t)a1, a3, &v49, (uint64_t *)__p);
  v41 = __p[0];
  __p[0] = 0;
  v42 = *((_QWORD *)a1 + 37);
  *((_QWORD *)a1 + 37) = v41;
  if (v42)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    v43 = __p[0];
    __p[0] = 0;
    if (v43)
      (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  }
LABEL_54:
  *((_QWORD *)a1 + 29) |= 1uLL;
  kdebug_trace();
  return a1;
}

{
  return E5RT::Ops::AneInferenceOperation::AneInferenceOperation(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_190F0FA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  E5RT::ExecutionStreamOperationInternal *v27;
  uint64_t v29;

  kdebug_trace();
  v29 = *((_QWORD *)v27 + 37);
  *((_QWORD *)v27 + 37) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v27);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs,E5RT::Ops::AneInferenceOperation &,std::shared_ptr<AneInferenceOpT const>,unsigned long long &>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v8 = operator new();
  v12 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::AneInferenceOperationImplUsingDriverAPIs(v8, a1, &v12, *a3);
  *a4 = v8;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_190F0FCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x19401CD90](v9, 0x10E1C4027E53B28);
  _Unwind_Resume(a1);
}

void E5RT::Ops::AneInferenceOperation::~AneInferenceOperation(E5RT::Ops::AneInferenceOperation *this)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E2D5B6C8;
  v6[0] = &off_1E2DC9528;
  v6[1] = this;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v2)
    __assert_rtn("~AneInferenceOperation", "AneInferenceOperation.mm", 149, "ret == E5RT_ERROR_CODE_OK");
  v5 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E2D5B6C8;
  v6[0] = &off_1E2DC9528;
  v6[1] = this;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v2)
    __assert_rtn("~AneInferenceOperation", "AneInferenceOperation.mm", 149, "ret == E5RT_ERROR_CODE_OK");
  v5 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  MEMORY[0x19401CD90]();
}

void sub_190F0FDD8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_190F0FEF0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t E5RT::Ops::AneInferenceOperation::GetOpCode(E5RT::Ops::AneInferenceOperation *this)
{
  return 1;
}

uint64_t E5RT::Ops::AneInferenceOperation::ExecuteSync(E5RT::Ops::AneInferenceOperation *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 37) + 24))(*((_QWORD *)this + 37));
}

uint64_t E5RT::Ops::AneInferenceOperation::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t ActiveFutureValue;
  _BYTE v13[24];
  _BYTE *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 296);
  v13[0] = 0;
  v15 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v8 = *(_QWORD *)(a4 + 24);
    if (v8)
    {
      if (v8 == a4)
      {
        v14 = v13;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v13);
        goto LABEL_7;
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
    v14 = (_BYTE *)v8;
LABEL_7:
    v15 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v7 + 32))(v7, a2, a3, v13);
  if (v15)
  {
    v9 = v14;
    if (v14 == v13)
    {
      v10 = 4;
      v9 = v13;
      goto LABEL_13;
    }
    if (v14)
    {
      v10 = 5;
LABEL_13:
      (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
    }
  }
  ActiveFutureValue = E5RT::AsyncEvent::GetActiveFutureValue(*(E5RT::AsyncEvent **)(a1 + 176));
  return E5RT::ExecutionStreamOperationInternal::UpdateLastCompletionValue(a1, ActiveFutureValue);
}

void sub_190F10038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  if (a13)
  {
    if (a12 == &a9)
    {
      (*(void (**)(void))(a9 + 32))();
      _Unwind_Resume(exception_object);
    }
    if (a12)
    {
      (*(void (**)(void))(*a12 + 40))();
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::AneInferenceOperation::PreWireMemoryObjects(E5RT::Ops::AneInferenceOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 37) + 40))(*((_QWORD *)this + 37));
  E5RT::ExecutionStreamOperationInternal::PreWireMemoryObjects((uint64_t)this);
  return kdebug_trace();
}

void sub_190F10150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::AneInferenceOperation::EncodeOperation(E5RT::Ops::AneInferenceOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::EncodeOperation(this, a2, a3);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 37) + 48))(*((_QWORD *)this + 37));
}

uint64_t E5RT::Ops::AneInferenceOperation::ResetOperation(E5RT::Ops::AneInferenceOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 37) + 56))(*((_QWORD *)this + 37));
  E5RT::ExecutionStreamOperationInternal::ResetOperation(this);
  return kdebug_trace();
}

void sub_190F1022C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::AneInferenceOperation::SetANEExecutionPriority(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 64))(*(_QWORD *)(a1 + 296));
}

uint64_t E5RT::Ops::AneInferenceOperation::BindCompletionAsyncEvent(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  v7 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(a1, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 88))(*(_QWORD *)(a1 + 296));
}

void sub_190F102D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::AneInferenceOperation::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal *a1, uint64_t a2)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  kdebug_trace();
  (*(void (**)(_QWORD *, uint64_t))(**((_QWORD **)a1 + 37) + 96))(*((_QWORD **)a1 + 37), a2);
  E5RT::ExecutionStreamOperationInternal::UpdateDynamicPorts(a1);
  return kdebug_trace();
}

void sub_190F1037C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F10394()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F103A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC9528;
  result[1] = v3;
  return result;
}

uint64_t sub_190F103DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC9528;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F103F8(uint64_t a1)
{
  E5RT::ExecutionStreamOperationInternal *v1;

  v1 = *(E5RT::ExecutionStreamOperationInternal **)(a1 + 8);
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(v1) == 2)
    (*(void (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)v1 + 80))(v1);
  return 0;
}

uint64_t sub_190F10438(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT3Ops21AneInferenceOperationD1EvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT3Ops21AneInferenceOperationD1EvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT3Ops21AneInferenceOperationD1EvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT3Ops21AneInferenceOperationD1EvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F104A4()
{
  return &unk_1E2DC9588;
}

uint64_t E5RT::Ops::BarrierOperation::Impl::EncodeOperation(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  result = E5RT::ExecutionStreamOperationInternal::GetOpState(*this);
  if ((_DWORD)result != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v3, "Operation hasn't been prepared for encode.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190F10558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::Ops::BarrierOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  result = E5RT::ExecutionStreamOperationInternal::GetOpState(*this);
  if ((_DWORD)result != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v3, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190F10674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::ExecutionStreamOperationInternal *E5RT::Ops::BarrierOperation::BarrierOperation(E5RT::ExecutionStreamOperationInternal *a1, __int128 *a2)
{
  void **v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void **v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  void **v15;
  void **v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v24[2];
  void *__p[2];
  int v26;
  void *v27[2];
  void *v28[2];
  int v29;
  _OWORD v30[3];

  memset(v30, 0, 32);
  LODWORD(v30[2]) = 1065353216;
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)v28 = 0u;
  v29 = 1065353216;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)__p = 0u;
  v26 = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, (uint64_t)v30, (uint64_t)v27, (uint64_t)v24);
  v3 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v4 = (void **)*v3;
        v5 = (std::__shared_weak_count *)v3[6];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        if (*((char *)v3 + 39) < 0)
          break;
        operator delete(v3);
        v3 = v4;
        if (!v4)
          goto LABEL_11;
      }
      operator delete(v3[2]);
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
LABEL_11:
  v8 = v24[0];
  v24[0] = 0;
  if (v8)
    operator delete(v8);
  v9 = (void **)v28[0];
  if (v28[0])
  {
    do
    {
      while (1)
      {
        v10 = (void **)*v9;
        v11 = (std::__shared_weak_count *)v9[6];
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (*((char *)v9 + 39) < 0)
          break;
        operator delete(v9);
        v9 = v10;
        if (!v10)
          goto LABEL_23;
      }
      operator delete(v9[2]);
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
LABEL_23:
  v14 = v27[0];
  v27[0] = 0;
  if (v14)
    operator delete(v14);
  v15 = *(void ***)&v30[1];
  if (*(_QWORD *)&v30[1])
  {
    do
    {
      while (1)
      {
        v16 = (void **)*v15;
        v17 = (std::__shared_weak_count *)v15[6];
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (*((char *)v15 + 39) < 0)
          break;
        operator delete(v15);
        v15 = v16;
        if (!v16)
          goto LABEL_35;
      }
      operator delete(v15[2]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
LABEL_35:
  v20 = *(void **)&v30[0];
  *(_QWORD *)&v30[0] = 0;
  if (v20)
    operator delete(v20);
  *(_QWORD *)a1 = &off_1E2D5B4B8;
  *((_QWORD *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  *(_QWORD *)&v30[0] = 0x2B2381C000000000;
  memset((char *)v30 + 8, 0, 32);
  kdebug_trace();
  v21 = (_QWORD *)operator new();
  *v21 = a1;
  v22 = *((_QWORD *)a1 + 37);
  *((_QWORD *)a1 + 37) = v21;
  if (v22)
    MEMORY[0x19401CD90](v22, 0x20C4093837F09);
  *((_QWORD *)a1 + 29) |= 3uLL;
  kdebug_trace();
  return a1;
}

void sub_190F109B0(_Unwind_Exception *a1)
{
  E5RT::ExecutionStreamOperationInternal *v1;
  uint64_t v2;
  uint64_t v4;

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v2 - 80));
  v4 = *((_QWORD *)v1 + 37);
  *((_QWORD *)v1 + 37) = 0;
  if (v4)
    MEMORY[0x19401CD90](v4, 0x20C4093837F09);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

void sub_190F109FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v15 - 80);
  _Unwind_Resume(a1);
}

void E5RT::Ops::BarrierOperation::~BarrierOperation(E5RT::Ops::BarrierOperation *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2D5B4B8;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
    MEMORY[0x19401CD90](v2, 0x20C4093837F09);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2D5B4B8;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
    MEMORY[0x19401CD90](v2, 0x20C4093837F09);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::Ops::BarrierOperation::GetOpCode(E5RT::Ops::BarrierOperation *this)
{
  return 9;
}

uint64_t E5RT::Ops::BarrierOperation::PrepareOpForEncode(E5RT::Ops::BarrierOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_190F10B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BarrierOperation::EncodeOperation(E5RT::ExecutionStreamOperationInternal ***this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::BarrierOperation::Impl::EncodeOperation(this[37]);
  E5RT::ExecutionStreamOperationInternal::EncodeOperation((E5RT::ExecutionStreamOperationInternal *)this, a2, a3);
  return kdebug_trace();
}

void sub_190F10C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BarrierOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::BarrierOperation::Impl::ExecuteSync(this[37]);
  return kdebug_trace();
}

void sub_190F10CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void **E5RT::Ops::PerformDataFormatChange(E5RT::Ops *this, const E5RT::TensorDescriptor *a2, const E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, E5RT::BufferObject *a5)
{
  uint64_t TensorDataTypeRef;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **result;
  uint64_t v22;
  void *exception;
  _QWORD v24[3];
  _BYTE v25[8];
  void *v26;
  void *v27;
  void **v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v10 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<float>(v10))
  {
    v26 = &unk_1E2DAD930;
    v27 = E5RT::ElementwiseOpCast<float,float>;
    v28 = &v26;
    E5RT::ElementwiseOperationImplementation<float,float>(this, a2, a3, a4, (uint64_t)&v26);
  }
  else if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v10))
  {
    v26 = &unk_1E2DAD3B0;
    v27 = _ZN4E5RT17ElementwiseOpCastIDF16_fEEvPT_PKT0_m;
    v28 = &v26;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_fEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
  }
  else if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned char>(v10))
  {
    v26 = &unk_1E2DADBF0;
    v27 = E5RT::ElementwiseOpCast<unsigned char,float>;
    v28 = &v26;
    E5RT::ElementwiseOperationImplementation<unsigned char,float>(this, a2, a3, a4, (uint64_t)&v26);
  }
  else if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<signed char>(v10))
  {
    v26 = &unk_1E2DAD670;
    v27 = E5RT::ElementwiseOpCast<signed char,float>;
    v28 = &v26;
    E5RT::ElementwiseOperationImplementation<signed char,float>(this, a2, a3, a4, (uint64_t)&v26);
  }
  else if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned int>(v10))
  {
    v26 = &unk_1E2DAE170;
    v27 = E5RT::ElementwiseOpCast<unsigned int,float>;
    v28 = &v26;
    E5RT::ElementwiseOperationImplementation<unsigned int,float>(this, a2, a3, a4, (uint64_t)&v26);
  }
  else if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<int>(v10))
  {
    v26 = &unk_1E2DADEB0;
    v27 = E5RT::ElementwiseOpCast<int,float>;
    v28 = &v26;
    E5RT::ElementwiseOperationImplementation<int,float>(this, a2, a3, a4, (uint64_t)&v26);
  }
  else if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned short>(v10))
  {
    v26 = &unk_1E2DAE6F0;
    v27 = E5RT::ElementwiseOpCast<unsigned short,float>;
    v28 = &v26;
    E5RT::ElementwiseOperationImplementation<unsigned short,float>(this, a2, a3, a4, (uint64_t)&v26);
  }
  else if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<short>(v10))
  {
    v26 = &unk_1E2DAE430;
    v27 = E5RT::ElementwiseOpCast<short,float>;
    v28 = &v26;
    E5RT::ElementwiseOperationImplementation<short,float>(this, a2, a3, a4, (uint64_t)&v26);
  }
  else
  {
    v11 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
    v12 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
    if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v11) && E5RT::TensorDataType::IsType<float>(v12))
    {
      v26 = &unk_1E2DAD880;
      v27 = _ZN4E5RT17ElementwiseOpCastIfDF16_EEvPT_PKT0_m;
      v28 = &v26;
      _ZN4E5RT34ElementwiseOperationImplementationIfDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
    }
    else if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v11) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12))
    {
      v26 = &unk_1E2DAD300;
      v27 = _ZN4E5RT17ElementwiseOpCastIDF16_DF16_EEvPT_PKT0_m;
      v28 = &v26;
      _ZN4E5RT34ElementwiseOperationImplementationIDF16_DF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
    }
    else if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v11) && E5RT::TensorDataType::IsType<unsigned char>(v12))
    {
      v26 = &unk_1E2DADB40;
      v27 = _ZN4E5RT17ElementwiseOpCastIhDF16_EEvPT_PKT0_m;
      v28 = &v26;
      _ZN4E5RT34ElementwiseOperationImplementationIhDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
    }
    else if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v11) && E5RT::TensorDataType::IsType<signed char>(v12))
    {
      v26 = &unk_1E2DAD5C0;
      v27 = _ZN4E5RT17ElementwiseOpCastIaDF16_EEvPT_PKT0_m;
      v28 = &v26;
      _ZN4E5RT34ElementwiseOperationImplementationIaDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
    }
    else if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v11) && E5RT::TensorDataType::IsType<unsigned int>(v12))
    {
      v26 = &unk_1E2DAE0C0;
      v27 = _ZN4E5RT17ElementwiseOpCastIjDF16_EEvPT_PKT0_m;
      v28 = &v26;
      _ZN4E5RT34ElementwiseOperationImplementationIjDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
    }
    else if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v11) && E5RT::TensorDataType::IsType<int>(v12))
    {
      v26 = &unk_1E2DADE00;
      v27 = _ZN4E5RT17ElementwiseOpCastIiDF16_EEvPT_PKT0_m;
      v28 = &v26;
      _ZN4E5RT34ElementwiseOperationImplementationIiDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
    }
    else if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v11) && E5RT::TensorDataType::IsType<unsigned short>(v12))
    {
      v26 = &unk_1E2DAE640;
      v27 = _ZN4E5RT17ElementwiseOpCastItDF16_EEvPT_PKT0_m;
      v28 = &v26;
      _ZN4E5RT34ElementwiseOperationImplementationItDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
    }
    else if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v11) && E5RT::TensorDataType::IsType<short>(v12))
    {
      v26 = &unk_1E2DAE380;
      v27 = _ZN4E5RT17ElementwiseOpCastIsDF16_EEvPT_PKT0_m;
      v28 = &v26;
      _ZN4E5RT34ElementwiseOperationImplementationIsDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
    }
    else
    {
      v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
      v14 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
      if (E5RT::TensorDataType::IsType<unsigned char>(v13) && E5RT::TensorDataType::IsType<float>(v14))
      {
        v26 = &unk_1E2DAD988;
        v27 = E5RT::ElementwiseOpCast<float,unsigned char>;
        v28 = &v26;
        E5RT::ElementwiseOperationImplementation<float,unsigned char>(this, a2, a3, a4, (uint64_t)&v26);
      }
      else if (E5RT::TensorDataType::IsType<unsigned char>(v13) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v14))
      {
        v26 = &unk_1E2DAD408;
        v27 = _ZN4E5RT17ElementwiseOpCastIDF16_hEEvPT_PKT0_m;
        v28 = &v26;
        _ZN4E5RT34ElementwiseOperationImplementationIDF16_hEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
      }
      else if (E5RT::TensorDataType::IsType<unsigned char>(v13) && E5RT::TensorDataType::IsType<unsigned char>(v14))
      {
        v26 = &unk_1E2DADC48;
        v27 = E5RT::ElementwiseOpCast<unsigned char,unsigned char>;
        v28 = &v26;
        E5RT::ElementwiseOperationImplementation<unsigned char,unsigned char>(this, a2, a3, a4, (uint64_t)&v26);
      }
      else if (E5RT::TensorDataType::IsType<unsigned char>(v13) && E5RT::TensorDataType::IsType<signed char>(v14))
      {
        v26 = &unk_1E2DAD6C8;
        v27 = E5RT::ElementwiseOpCast<signed char,unsigned char>;
        v28 = &v26;
        E5RT::ElementwiseOperationImplementation<signed char,unsigned char>(this, a2, a3, a4, (uint64_t)&v26);
      }
      else if (E5RT::TensorDataType::IsType<unsigned char>(v13) && E5RT::TensorDataType::IsType<unsigned int>(v14))
      {
        v26 = &unk_1E2DAE1C8;
        v27 = E5RT::ElementwiseOpCast<unsigned int,unsigned char>;
        v28 = &v26;
        E5RT::ElementwiseOperationImplementation<unsigned int,unsigned char>(this, a2, a3, a4, (uint64_t)&v26);
      }
      else if (E5RT::TensorDataType::IsType<unsigned char>(v13) && E5RT::TensorDataType::IsType<int>(v14))
      {
        v26 = &unk_1E2DADF08;
        v27 = E5RT::ElementwiseOpCast<int,unsigned char>;
        v28 = &v26;
        E5RT::ElementwiseOperationImplementation<int,unsigned char>(this, a2, a3, a4, (uint64_t)&v26);
      }
      else if (E5RT::TensorDataType::IsType<unsigned char>(v13) && E5RT::TensorDataType::IsType<unsigned short>(v14))
      {
        v26 = &unk_1E2DAE748;
        v27 = E5RT::ElementwiseOpCast<unsigned short,unsigned char>;
        v28 = &v26;
        E5RT::ElementwiseOperationImplementation<unsigned short,unsigned char>(this, a2, a3, a4, (uint64_t)&v26);
      }
      else if (E5RT::TensorDataType::IsType<unsigned char>(v13) && E5RT::TensorDataType::IsType<short>(v14))
      {
        v26 = &unk_1E2DAE488;
        v27 = E5RT::ElementwiseOpCast<short,unsigned char>;
        v28 = &v26;
        E5RT::ElementwiseOperationImplementation<short,unsigned char>(this, a2, a3, a4, (uint64_t)&v26);
      }
      else
      {
        v15 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
        v16 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
        if (E5RT::TensorDataType::IsType<signed char>(v15) && E5RT::TensorDataType::IsType<float>(v16))
        {
          v26 = &unk_1E2DAD8D8;
          v27 = E5RT::ElementwiseOpCast<float,signed char>;
          v28 = &v26;
          E5RT::ElementwiseOperationImplementation<float,signed char>(this, a2, a3, a4, (uint64_t)&v26);
        }
        else if (E5RT::TensorDataType::IsType<signed char>(v15) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v16))
        {
          v26 = &unk_1E2DAD358;
          v27 = _ZN4E5RT17ElementwiseOpCastIDF16_aEEvPT_PKT0_m;
          v28 = &v26;
          _ZN4E5RT34ElementwiseOperationImplementationIDF16_aEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
        }
        else if (E5RT::TensorDataType::IsType<signed char>(v15) && E5RT::TensorDataType::IsType<unsigned char>(v16))
        {
          v26 = &unk_1E2DADB98;
          v27 = E5RT::ElementwiseOpCast<unsigned char,signed char>;
          v28 = &v26;
          E5RT::ElementwiseOperationImplementation<unsigned char,signed char>(this, a2, a3, a4, (uint64_t)&v26);
        }
        else if (E5RT::TensorDataType::IsType<signed char>(v15) && E5RT::TensorDataType::IsType<signed char>(v16))
        {
          v26 = &unk_1E2DAD618;
          v27 = E5RT::ElementwiseOpCast<signed char,signed char>;
          v28 = &v26;
          E5RT::ElementwiseOperationImplementation<signed char,signed char>(this, a2, a3, a4, (uint64_t)&v26);
        }
        else if (E5RT::TensorDataType::IsType<signed char>(v15) && E5RT::TensorDataType::IsType<unsigned int>(v16))
        {
          v26 = &unk_1E2DAE118;
          v27 = E5RT::ElementwiseOpCast<unsigned int,signed char>;
          v28 = &v26;
          E5RT::ElementwiseOperationImplementation<unsigned int,signed char>(this, a2, a3, a4, (uint64_t)&v26);
        }
        else if (E5RT::TensorDataType::IsType<signed char>(v15) && E5RT::TensorDataType::IsType<int>(v16))
        {
          v26 = &unk_1E2DADE58;
          v27 = E5RT::ElementwiseOpCast<int,signed char>;
          v28 = &v26;
          E5RT::ElementwiseOperationImplementation<int,signed char>(this, a2, a3, a4, (uint64_t)&v26);
        }
        else if (E5RT::TensorDataType::IsType<signed char>(v15) && E5RT::TensorDataType::IsType<unsigned short>(v16))
        {
          v26 = &unk_1E2DAE698;
          v27 = E5RT::ElementwiseOpCast<unsigned short,signed char>;
          v28 = &v26;
          E5RT::ElementwiseOperationImplementation<unsigned short,signed char>(this, a2, a3, a4, (uint64_t)&v26);
        }
        else if (E5RT::TensorDataType::IsType<signed char>(v15) && E5RT::TensorDataType::IsType<short>(v16))
        {
          v26 = &unk_1E2DAE3D8;
          v27 = E5RT::ElementwiseOpCast<short,signed char>;
          v28 = &v26;
          E5RT::ElementwiseOperationImplementation<short,signed char>(this, a2, a3, a4, (uint64_t)&v26);
        }
        else
        {
          v17 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
          v18 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
          if (E5RT::TensorDataType::IsType<unsigned int>(v17) && E5RT::TensorDataType::IsType<float>(v18))
          {
            v26 = &unk_1E2DADA38;
            v27 = E5RT::ElementwiseOpCast<float,unsigned int>;
            v28 = &v26;
            E5RT::ElementwiseOperationImplementation<float,unsigned int>(this, a2, a3, a4, (uint64_t)&v26);
          }
          else if (E5RT::TensorDataType::IsType<unsigned int>(v17) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v18))
          {
            v26 = &unk_1E2DAD4B8;
            v27 = _ZN4E5RT17ElementwiseOpCastIDF16_jEEvPT_PKT0_m;
            v28 = &v26;
            _ZN4E5RT34ElementwiseOperationImplementationIDF16_jEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
          }
          else if (E5RT::TensorDataType::IsType<unsigned int>(v17) && E5RT::TensorDataType::IsType<unsigned char>(v18))
          {
            v26 = &unk_1E2DADCF8;
            v27 = E5RT::ElementwiseOpCast<unsigned char,unsigned int>;
            v28 = &v26;
            E5RT::ElementwiseOperationImplementation<unsigned char,unsigned int>(this, a2, a3, a4, (uint64_t)&v26);
          }
          else if (E5RT::TensorDataType::IsType<unsigned int>(v17) && E5RT::TensorDataType::IsType<signed char>(v18))
          {
            v26 = &unk_1E2DAD778;
            v27 = E5RT::ElementwiseOpCast<signed char,unsigned int>;
            v28 = &v26;
            E5RT::ElementwiseOperationImplementation<signed char,unsigned int>(this, a2, a3, a4, (uint64_t)&v26);
          }
          else if (E5RT::TensorDataType::IsType<unsigned int>(v17) && E5RT::TensorDataType::IsType<unsigned int>(v18))
          {
            v26 = &unk_1E2DAE278;
            v27 = E5RT::ElementwiseOpCast<unsigned int,unsigned int>;
            v28 = &v26;
            E5RT::ElementwiseOperationImplementation<unsigned int,unsigned int>(this, a2, a3, a4, (uint64_t)&v26);
          }
          else if (E5RT::TensorDataType::IsType<unsigned int>(v17) && E5RT::TensorDataType::IsType<int>(v18))
          {
            v26 = &unk_1E2DADFB8;
            v27 = E5RT::ElementwiseOpCast<int,unsigned int>;
            v28 = &v26;
            E5RT::ElementwiseOperationImplementation<int,unsigned int>(this, a2, a3, a4, (uint64_t)&v26);
          }
          else if (E5RT::TensorDataType::IsType<unsigned int>(v17) && E5RT::TensorDataType::IsType<unsigned short>(v18))
          {
            v26 = &unk_1E2DAE7F8;
            v27 = E5RT::ElementwiseOpCast<unsigned short,unsigned int>;
            v28 = &v26;
            E5RT::ElementwiseOperationImplementation<unsigned short,unsigned int>(this, a2, a3, a4, (uint64_t)&v26);
          }
          else if (E5RT::TensorDataType::IsType<unsigned int>(v17) && E5RT::TensorDataType::IsType<short>(v18))
          {
            v26 = &unk_1E2DAE538;
            v27 = E5RT::ElementwiseOpCast<short,unsigned int>;
            v28 = &v26;
            E5RT::ElementwiseOperationImplementation<short,unsigned int>(this, a2, a3, a4, (uint64_t)&v26);
          }
          else
          {
            v19 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
            v20 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
            if (E5RT::TensorDataType::IsType<int>(v19) && E5RT::TensorDataType::IsType<float>(v20))
            {
              v26 = &unk_1E2DAD9E0;
              v27 = E5RT::ElementwiseOpCast<float,int>;
              v28 = &v26;
              E5RT::ElementwiseOperationImplementation<float,int>(this, a2, a3, a4, (uint64_t)&v26);
            }
            else if (E5RT::TensorDataType::IsType<int>(v19) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v20))
            {
              v26 = &unk_1E2DAD460;
              v27 = _ZN4E5RT17ElementwiseOpCastIDF16_iEEvPT_PKT0_m;
              v28 = &v26;
              _ZN4E5RT34ElementwiseOperationImplementationIDF16_iEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v26);
            }
            else if (E5RT::TensorDataType::IsType<int>(v19) && E5RT::TensorDataType::IsType<unsigned char>(v20))
            {
              v26 = &unk_1E2DADCA0;
              v27 = E5RT::ElementwiseOpCast<unsigned char,int>;
              v28 = &v26;
              E5RT::ElementwiseOperationImplementation<unsigned char,int>(this, a2, a3, a4, (uint64_t)&v26);
            }
            else if (E5RT::TensorDataType::IsType<int>(v19) && E5RT::TensorDataType::IsType<signed char>(v20))
            {
              v26 = &unk_1E2DAD720;
              v27 = E5RT::ElementwiseOpCast<signed char,int>;
              v28 = &v26;
              E5RT::ElementwiseOperationImplementation<signed char,int>(this, a2, a3, a4, (uint64_t)&v26);
            }
            else if (E5RT::TensorDataType::IsType<int>(v19) && E5RT::TensorDataType::IsType<unsigned int>(v20))
            {
              v26 = &unk_1E2DAE220;
              v27 = E5RT::ElementwiseOpCast<unsigned int,int>;
              v28 = &v26;
              E5RT::ElementwiseOperationImplementation<unsigned int,int>(this, a2, a3, a4, (uint64_t)&v26);
            }
            else if (E5RT::TensorDataType::IsType<int>(v19) && E5RT::TensorDataType::IsType<int>(v20))
            {
              v26 = &unk_1E2DADF60;
              v27 = E5RT::ElementwiseOpCast<int,int>;
              v28 = &v26;
              E5RT::ElementwiseOperationImplementation<int,int>(this, a2, a3, a4, (uint64_t)&v26);
            }
            else if (E5RT::TensorDataType::IsType<int>(v19) && E5RT::TensorDataType::IsType<unsigned short>(v20))
            {
              v26 = &unk_1E2DAE7A0;
              v27 = E5RT::ElementwiseOpCast<unsigned short,int>;
              v28 = &v26;
              E5RT::ElementwiseOperationImplementation<unsigned short,int>(this, a2, a3, a4, (uint64_t)&v26);
            }
            else
            {
              if (!E5RT::TensorDataType::IsType<int>(v19) || !E5RT::TensorDataType::IsType<short>(v20))
              {
                result = (void **)sub_190F122A0(this, a2, a3, a4);
                if ((result & 1) == 0)
                {
                  result = (void **)sub_190F126AC(this, a2, a3, a4);
                  if ((result & 1) == 0)
                  {
                    exception = __cxa_allocate_exception(0x18uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v26, "PerformDataFormatChange");
                    std::string::basic_string[abi:ne180100]<0>(v24, "Unsupported data format change.");
                    E5RT::Status::Status(v25, 2, v24);
                    E5RT::E5RTError::E5RTError(exception, &v26, v25);
                  }
                }
                return result;
              }
              v26 = &unk_1E2DAE4E0;
              v27 = E5RT::ElementwiseOpCast<short,int>;
              v28 = &v26;
              E5RT::ElementwiseOperationImplementation<short,int>(this, a2, a3, a4, (uint64_t)&v26);
            }
          }
        }
      }
    }
  }
  result = v28;
  if (v28 == &v26)
  {
    v22 = 4;
    result = &v26;
  }
  else
  {
    if (!v28)
      return result;
    v22 = 5;
  }
  return (void **)(*((uint64_t (**)(void))*result + v22))();
}

void sub_190F11E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

BOOL sub_190F122A0(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4)
{
  uint64_t TensorDataTypeRef;
  uint64_t v9;
  _BOOL8 result;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  v9 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<float>(v9))
  {
    v13 = &unk_1E2DADAE8;
    v14 = E5RT::ElementwiseOpCast<float,unsigned short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<float,unsigned short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v9))
  {
    v13 = &unk_1E2DAD568;
    v14 = _ZN4E5RT17ElementwiseOpCastIDF16_tEEvPT_PKT0_m;
    v15 = &v13;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_tEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef)
    && E5RT::TensorDataType::IsType<unsigned char>(v9))
  {
    v13 = &unk_1E2DADDA8;
    v14 = E5RT::ElementwiseOpCast<unsigned char,unsigned short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<unsigned char,unsigned short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<signed char>(v9))
  {
    v13 = &unk_1E2DAD828;
    v14 = E5RT::ElementwiseOpCast<signed char,unsigned short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<signed char,unsigned short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned int>(v9))
  {
    v13 = &unk_1E2DAE328;
    v14 = E5RT::ElementwiseOpCast<unsigned int,unsigned short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<unsigned int,unsigned short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<int>(v9))
  {
    v13 = &unk_1E2DAE068;
    v14 = E5RT::ElementwiseOpCast<int,unsigned short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<int,unsigned short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef)
    && E5RT::TensorDataType::IsType<unsigned short>(v9))
  {
    v13 = &unk_1E2DAE8A8;
    v14 = E5RT::ElementwiseOpCast<unsigned short,unsigned short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<unsigned short,unsigned short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  result = E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef);
  if (result)
  {
    result = E5RT::TensorDataType::IsType<short>(v9);
    if (result)
    {
      v13 = &unk_1E2DAE5E8;
      v14 = E5RT::ElementwiseOpCast<short,unsigned short>;
      v15 = &v13;
      E5RT::ElementwiseOperationImplementation<short,unsigned short>(a1, a2, a3, a4, (uint64_t)&v13);
LABEL_25:
      v11 = v15;
      if (v15 == &v13)
      {
        v12 = 4;
        v11 = &v13;
      }
      else
      {
        if (!v15)
          return 1;
        v12 = 5;
      }
      (*((void (**)(void))*v11 + v12))();
      return 1;
    }
  }
  return result;
}

void sub_190F125EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_190F126AC(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4)
{
  uint64_t TensorDataTypeRef;
  uint64_t v9;
  _BOOL8 result;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  v9 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<float>(v9))
  {
    v13 = &unk_1E2DADA90;
    v14 = E5RT::ElementwiseOpCast<float,short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<float,short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v9))
  {
    v13 = &unk_1E2DAD510;
    v14 = _ZN4E5RT17ElementwiseOpCastIDF16_sEEvPT_PKT0_m;
    v15 = &v13;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_sEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned char>(v9))
  {
    v13 = &unk_1E2DADD50;
    v14 = E5RT::ElementwiseOpCast<unsigned char,short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<unsigned char,short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<signed char>(v9))
  {
    v13 = &unk_1E2DAD7D0;
    v14 = E5RT::ElementwiseOpCast<signed char,short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<signed char,short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned int>(v9))
  {
    v13 = &unk_1E2DAE2D0;
    v14 = E5RT::ElementwiseOpCast<unsigned int,short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<unsigned int,short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<int>(v9))
  {
    v13 = &unk_1E2DAE010;
    v14 = E5RT::ElementwiseOpCast<int,short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<int,short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned short>(v9))
  {
    v13 = &unk_1E2DAE850;
    v14 = E5RT::ElementwiseOpCast<unsigned short,short>;
    v15 = &v13;
    E5RT::ElementwiseOperationImplementation<unsigned short,short>(a1, a2, a3, a4, (uint64_t)&v13);
    goto LABEL_25;
  }
  result = E5RT::TensorDataType::IsType<short>(TensorDataTypeRef);
  if (result)
  {
    result = E5RT::TensorDataType::IsType<short>(v9);
    if (result)
    {
      v13 = &unk_1E2DAE590;
      v14 = E5RT::ElementwiseOpCast<short,short>;
      v15 = &v13;
      E5RT::ElementwiseOperationImplementation<short,short>(a1, a2, a3, a4, (uint64_t)&v13);
LABEL_25:
      v11 = v15;
      if (v15 == &v13)
      {
        v12 = 4;
        v11 = &v13;
      }
      else
      {
        if (!v15)
          return 1;
        v12 = 5;
      }
      (*((void (**)(void))*v11 + v12))();
      return 1;
    }
  }
  return result;
}

void sub_190F129F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::CastOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  E5RT::IOPortImpl **v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  E5RT::IOPort *v9;
  unint64_t *v10;
  unint64_t v11;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v13;
  E5RT::MemoryObject *MemoryObjectRef;
  const E5RT::TensorDescriptor *v15;
  void *v16;
  E5RT::TensorDescriptor *v17;
  E5RT::IOPortImpl **v18;
  uint64_t TensorShape;
  uint64_t v20;
  size_t v21;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  uint64_t *v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  E5RT::MemoryObject *v27;
  E5RT::BufferObject *v28;
  unint64_t Size;
  E5RT::TensorDescriptor *v30;
  char IsBoundMemoryObjectInternal;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  E5RT::MemoryObject *v38;
  E5RT::BufferObject *v39;
  const E5RT::TensorDescriptor *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *exception;
  void *v80;
  __int128 v81;
  E5RT::TensorDescriptor *v82;
  E5RT::TensorDescriptor *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  E5RT::TensorDescriptor *v87[2];
  E5RT::IOPort *v88;
  std::__shared_weak_count *v89;
  E5RT::IOPortImpl **v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v92, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v95, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v87, 2, v95);
    E5RT::E5RTError::E5RTError(exception, &v92, v87);
  }
  v92 = 0x2B23808C00000000;
  v93 = 0u;
  v94 = 0u;
  kdebug_trace();
  v2 = *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16);
  v4 = *(E5RT::IOPortImpl ***)(v2 + 40);
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  v90 = v4;
  v91 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this) + 16);
  v9 = *(E5RT::IOPort **)(v7 + 40);
  v8 = *(std::__shared_weak_count **)(v7 + 48);
  v88 = v9;
  v89 = v8;
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v4);
  v13 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  if ((E5RT::TensorDescriptor::HasKnownShape(v13) & 1) == 0)
  {
    v80 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v95, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v87, "Cast op requires the input tensor descriptor to be fully known.");
    E5RT::Status::Status(&v86, 2, v87);
    E5RT::E5RTError::E5RTError(v80, v95, &v86);
  }
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v4);
  v15 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(MemoryObjectRef);
  v16 = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v9);
  v17 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v16);
  if (!E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v9))
  {
    v38 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v9);
    v40 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v38);
    goto LABEL_75;
  }
  if (!v9 || (v18 = (E5RT::IOPortImpl **)v9, *(void (***)(E5RT::IOPortPriv *__hidden))v9 != &off_1E2D59AC8))
    v18 = 0;
  v87[0] = 0;
  v87[1] = 0;
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(v13);
  v20 = E5RT::TensorDescriptor::GetTensorShape(v17);
  v21 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v21 == *(_QWORD *)(v20 + 8) - *(_QWORD *)v20 && !memcmp(*(const void **)TensorShape, *(const void **)v20, v21))
  {
    E5RT::IOPort::GetPortDescriptor(v9, v95);
    v73 = v95[0];
    if (*((_QWORD *)&v95[0] + 1))
    {
      v74 = (unint64_t *)(*((_QWORD *)&v95[0] + 1) + 8);
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v95[0] + 1);
      *(_OWORD *)v87 = v73;
      if (*((_QWORD *)&v95[0] + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v95[0] + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
    else
    {
      v87[0] = *(E5RT::TensorDescriptor **)&v95[0];
      v87[1] = 0;
    }
    v9 = v88;
  }
  else
  {
    TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v17);
    v23 = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v13);
    E5RT::Ops::CastOperation::Impl::CreateOutputDescFromInput(TensorDataTypeRef, (uint64_t)this, v23, v95);
    *(_OWORD *)v87 = v95[0];
  }
  v86 = 0uLL;
  E5RT::IOPort::GetMemoryObject(v9, v95);
  v24 = v95[0];
  if (!*((_QWORD *)&v95[0] + 1))
    goto LABEL_20;
  v25 = (unint64_t *)(*((_QWORD *)&v95[0] + 1) + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_20:
    if ((_QWORD)v24)
      goto LABEL_21;
LABEL_32:
    v30 = v87[0];
    goto LABEL_33;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
  if (!(_QWORD)v24)
    goto LABEL_32;
LABEL_21:
  v27 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v88);
  v28 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v27);
  Size = E5RT::BufferObject::GetSize(v28);
  v30 = v87[0];
  if (Size < E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)v87[0]))
  {
LABEL_33:
    E5RT::TensorDescriptor::AllocateMemory((uint64_t)v30, 0, 1uLL, v95);
    v41 = *(_QWORD *)&v95[0];
    if (*(_QWORD *)&v95[0])
    {
      v42 = (_QWORD *)operator new();
      v43 = *(_QWORD *)&v95[0];
      *v42 = &unk_1E2DC3190;
      v42[1] = 0;
      v42[2] = 0;
      v42[3] = v43;
      *(_QWORD *)&v95[0] = 0;
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      *(_QWORD *)&v86 = v41;
      *((_QWORD *)&v86 + 1) = v42;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
    }
    else
    {
      *(_QWORD *)&v95[0] = 0;
      v86 = 0uLL;
    }
    v47 = *(_QWORD *)&v95[0];
    *(_QWORD *)&v95[0] = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    IsBoundMemoryObjectInternal = 1;
    goto LABEL_44;
  }
  IsBoundMemoryObjectInternal = E5RT::IOPortPriv::IsBoundMemoryObjectInternal(v18);
  E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v18, v95);
  v32 = v95[0];
  if (*((_QWORD *)&v95[0] + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v95[0] + 1) + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v86 = v32;
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v95[0] + 1);
  if (*((_QWORD *)&v95[0] + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v95[0] + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_44:
  E5RT::IOPortPriv::LockPort((E5RT::IOPortPriv *)v18, 0);
  v84 = 0;
  v85 = 0;
  E5RT::IOPortPriv::BindMemoryObject((uint64_t)v18, (uint64_t)&v84, 0);
  v48 = v85;
  if (v85)
  {
    v49 = (unint64_t *)&v85->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v82 = v87[0];
  v83 = v87[1];
  if (v87[1])
  {
    v51 = (unint64_t *)((char *)v87[1] + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v18, (uint64_t *)&v82);
  v53 = (std::__shared_weak_count *)v83;
  if (v83)
  {
    v54 = (unint64_t *)((char *)v83 + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v81 = v86;
  if (*((_QWORD *)&v86 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  E5RT::IOPortPriv::BindMemoryObject((uint64_t)v18, (uint64_t)&v81, IsBoundMemoryObjectInternal);
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  E5RT::IOPortPriv::LockPort((E5RT::IOPortPriv *)v18, 1);
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  v17 = v87[0];
  v40 = (const E5RT::TensorDescriptor *)v86;
  if (*((_QWORD *)&v86 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)v87[1];
  if (v87[1])
  {
    v65 = (unint64_t *)((char *)v87[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_75:
  E5RT::Ops::PerformDataFormatChange(v13, v15, v17, v40, v39);
  v67 = v89;
  if (v89)
  {
    v68 = (unint64_t *)&v89->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v91;
  if (v91)
  {
    v71 = (unint64_t *)&v91->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (E5RT::g_trace_analysis_level >= v92)
    kdebug_trace();
}

void sub_190F13210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a27);
  _Unwind_Resume(a1);
}

void E5RT::Ops::CastOperation::Impl::CreateOutputDescFromInput(E5RT::TensorDataType::Impl **this@<X2>, uint64_t a2@<X0>, uint64_t *a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  _OWORD *v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *__p;
  char *v34;
  char *v35;

  v7 = *(_QWORD *)(a2 + 8);
  *a4 = 0;
  a4[1] = 0;
  v9 = *(_QWORD *)(v7 + 8);
  v8 = *(uint64_t **)(v7 + 16);
  v10 = (char *)v8 - v9;
  if (v8 == (uint64_t *)v9)
  {
    E5RT::TensorDescriptor::CreateTensorDesc(this, a3, &__p);
    v18 = __p;
    if (__p)
    {
      v19 = (_QWORD *)operator new();
      v20 = __p;
      *v19 = &unk_1E2DC3270;
      v19[1] = 0;
      v19[2] = 0;
      v19[3] = v20;
    }
    else
    {
      v19 = 0;
    }
    *a4 = v18;
    a4[1] = v19;
    return;
  }
  v12 = *a3;
  v11 = a3[1];
  v34 = 0;
  v35 = 0;
  __p = 0;
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = operator new(v11 - v12);
    __p = v14;
    v35 = (char *)v14 + 8 * (v13 >> 3);
    bzero(v14, v13);
    v34 = (char *)v14 + v13;
    v15 = v10 - 8;
    if ((unint64_t)(v10 - 8) < 0x18)
      goto LABEL_5;
LABEL_9:
    v21 = ((unint64_t)v15 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v16 = (_QWORD *)((char *)v14 + v22);
    v17 = (uint64_t *)(v9 + v22);
    v23 = (__int128 *)(v9 + 16);
    v24 = v14 + 1;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v23;
      *(v24 - 1) = *(v23 - 1);
      *v24 = v26;
      v23 += 2;
      v24 += 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_13;
    goto LABEL_12;
  }
  v14 = 0;
  v15 = v10 - 8;
  if ((unint64_t)(v10 - 8) >= 0x18)
    goto LABEL_9;
LABEL_5:
  v16 = v14;
  v17 = (uint64_t *)v9;
  do
  {
LABEL_12:
    v27 = *v17++;
    *v16++ = v27;
  }
  while (v17 != v8);
LABEL_13:
  E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignments(this, a3, &__p, &v32);
  v28 = v32;
  if (v32)
  {
    v29 = (_QWORD *)operator new();
    v30 = v32;
    *v29 = &unk_1E2DC3270;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v30;
    *a4 = v28;
    a4[1] = v29;
    v31 = (char *)__p;
    if (!__p)
      return;
LABEL_17:
    v34 = v31;
    operator delete(v31);
    return;
  }
  *a4 = 0;
  a4[1] = 0;
  v31 = (char *)__p;
  if (__p)
    goto LABEL_17;
}

void sub_190F135C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v11);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void E5RT::Ops::CastOperation::Impl::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  _QWORD *InputPorts;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  void *PortDescriptorRef;
  E5RT::TensorDescriptor *v9;
  E5RT::TensorDescriptor *v10;
  unint64_t Rank;
  uint64_t TensorDataTypeRef;
  uint64_t v13;
  uint64_t *TensorShape;
  uint64_t v15;
  E5RT::OperandDescriptor *v16;
  E5RT::TensorDescriptor *v17;
  E5RT::TensorDataType::Impl **v18;
  void (***v19)(E5RT::IOPortPriv *__hidden);
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void (***v26)(E5RT::IOPortPriv *__hidden);
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *exception;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD v45[3];
  char v46[8];
  uint64_t v47;
  std::__shared_weak_count *v48;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v47, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v45, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(v46, 2, v45);
    E5RT::E5RTError::E5RTError(exception, &v47, v46);
  }
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
  if (*(_QWORD *)(a2 + 24) != InputPorts[3])
  {
    v36 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v47, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v45, "Require new shapes for all inputs to reshape.");
    E5RT::Status::Status(v46, 1, v45);
    E5RT::E5RTError::E5RTError(v36, &v47, v46);
  }
  v5 = *(_QWORD *)(a2 + 16);
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v5 + 16);
  if (!v6)
  {
    v37 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v47, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v45, "Unknown operand name given for reshaping.");
    E5RT::Status::Status(v46, 1, v45);
    E5RT::E5RTError::E5RTError(v37, &v47, v46);
  }
  v7 = v6;
  PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v6[5]);
  if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
  {
    v38 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v47, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v45, "Cast op cannot reshape a surface descriptor.");
    E5RT::Status::Status(v46, 2, v45);
    E5RT::E5RTError::E5RTError(v38, &v47, v46);
  }
  v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)(v5 + 40));
  v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)PortDescriptorRef);
  Rank = E5RT::TensorDescriptor::GetRank(v9);
  if (E5RT::TensorDescriptor::GetRank(v10) != Rank)
  {
    v39 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v47, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v45, "Cast op reshape cannot change rank.");
    E5RT::Status::Status(v46, 1, v45);
    E5RT::E5RTError::E5RTError(v39, &v47, v46);
  }
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v9);
  v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v10);
  if (E5RT::operator!=(TensorDataTypeRef, v13))
  {
    v40 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v47, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v45, "Cast op reshape cannot change TensorDataType for input.");
    E5RT::Status::Status(v46, 1, v45);
    E5RT::E5RTError::E5RTError(v40, &v47, v46);
  }
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v9);
  v15 = *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*a1) + 16);
  v16 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v15 + 40));
  v17 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v16);
  v18 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v17);
  E5RT::Ops::CastOperation::Impl::CreateOutputDescFromInput(v18, (uint64_t)a1, TensorShape, &v47);
  v19 = (void (***)(E5RT::IOPortPriv *__hidden))v7[5];
  if (!v19 || *v19 != &off_1E2D59AC8)
    v19 = 0;
  v20 = *(std::__shared_weak_count **)(v5 + 48);
  v43 = *(_QWORD *)(v5 + 40);
  v44 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v19, &v43);
  v23 = v44;
  if (!v44)
    goto LABEL_17;
  v24 = (unint64_t *)&v44->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v26 = *(void (****)(E5RT::IOPortPriv *__hidden))(v15 + 40);
    if (v26)
    {
LABEL_18:
      if (*v26 == &off_1E2D59AC8)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_17:
    v26 = *(void (****)(E5RT::IOPortPriv *__hidden))(v15 + 40);
    if (v26)
      goto LABEL_18;
  }
  v26 = 0;
LABEL_20:
  v41 = v47;
  v42 = v48;
  if (v48)
  {
    v27 = (unint64_t *)&v48->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v26, &v41);
  v29 = v42;
  if (!v42)
    goto LABEL_27;
  v30 = (unint64_t *)&v42->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v32 = v48;
    if (!v48)
      return;
  }
  else
  {
LABEL_27:
    v32 = v48;
    if (!v48)
      return;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
}

void sub_190F13B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_190F13B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_190F13BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;

  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

uint64_t *std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::CastOperation::Impl>>::~propagate_const(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40A44E5E0CLL);
  }
  return a1;
}

void E5RT::Ops::CastOperation::~CastOperation(E5RT::Ops::CastOperation *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E2D5B358;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40A44E5E0CLL);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E2D5B358;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40A44E5E0CLL);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::Ops::CastOperation::GetOpCode(E5RT::Ops::CastOperation *this)
{
  return 3;
}

uint64_t E5RT::Ops::CastOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::CastOperation::Impl::ExecuteSync(this[37]);
  return kdebug_trace();
}

void sub_190F13F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::CastOperation::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal ***a1, uint64_t a2)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)a1);
  kdebug_trace();
  E5RT::Ops::CastOperation::Impl::ReshapeOperationInternal(a1[37], a2);
  E5RT::ExecutionStreamOperationInternal::UpdateDynamicPorts(a1);
  return kdebug_trace();
}

void sub_190F14008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

float E5RT::ElementwiseOpCast<float,float>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;

  if (a3)
  {
    v3 = 0;
    if (a3 < 8)
      goto LABEL_7;
    if ((unint64_t)(a1 - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(a1 + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v7 = *(v4 - 1);
      v8 = *v4;
      *(v5 - 1) = v7;
      *v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v9 = a3 - v3;
      v10 = 4 * v3;
      v11 = (_DWORD *)(a1 + 4 * v3);
      v12 = (int *)(a2 + v10);
      do
      {
        v13 = *v12++;
        LODWORD(v7) = v13;
        *v11++ = v13;
        --v9;
      }
      while (v9);
    }
  }
  return *(float *)&v7;
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_fEEvPT_PKT0_m@<H0>(_QWORD *a1@<X0>, float32x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  float32x4_t *v7;
  float32x4_t v8;
  unint64_t v10;
  float32x4_t *v11;
  float16x8_t *v12;
  unint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float16x8_t v18;
  unint64_t v19;
  _WORD *v20;
  __int32 *v21;
  __int32 v22;

  if (a3 >= 4)
  {
    v5 = a3 >> 2;
    v6 = a1;
    v7 = a2;
    do
    {
      v8 = *v7++;
      *(float16x4_t *)_Q0.i8 = vcvt_f16_f32(v8);
      *v6++ = _Q0.i64[0];
      --v5;
    }
    while (v5);
    v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v4 = a3 - (a3 & 0xFFFFFFFFFFFFFFFCLL);
    if (a3 <= (a3 & 0xFFFFFFFFFFFFFFFCLL))
      return _Q0.i16[0];
  }
  else
  {
    v3 = 0;
    v4 = a3;
    if (!a3)
      return _Q0.i16[0];
  }
  if (v4 < 0x10)
  {
    v10 = v3;
LABEL_12:
    v19 = a3 - v10;
    v20 = (_WORD *)a1 + v10;
    v21 = &a2->i32[v10];
    do
    {
      v22 = *v21++;
      _Q0.i32[0] = v22;
      __asm { FCVT            H0, S0 }
      *v20++ = _Q0.i16[0];
      --v19;
    }
    while (v19);
    return _Q0.i16[0];
  }
  v10 = v3 + (v4 & 0xFFFFFFFFFFFFFFF0);
  v11 = (float32x4_t *)((char *)a2 + 4 * v3 + 32);
  v12 = (float16x8_t *)((char *)a1 + 2 * v3 + 16);
  v13 = v4 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v15 = v11[-2];
    v14 = v11[-1];
    v17 = *v11;
    v16 = v11[1];
    v11 += 4;
    v18 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v15), v14);
    _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v17), v16);
    v12[-1] = v18;
    *v12 = _Q0;
    v12 += 2;
    v13 -= 16;
  }
  while (v13);
  if (v4 != (v4 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_12;
  return _Q0.i16[0];
}

void E5RT::ElementwiseOpCast<unsigned char,float>(unsigned __int8 *__C, const float *__A, vDSP_Length __N)
{
  vDSP_vfixu8(__A, 1, __C, 1, __N);
}

void E5RT::ElementwiseOpCast<signed char,float>(char *__C, const float *__A, vDSP_Length __N)
{
  vDSP_vfix8(__A, 1, __C, 1, __N);
}

void E5RT::ElementwiseOpCast<unsigned int,float>(unsigned int *__C, const float *__A, vDSP_Length __N)
{
  vDSP_vfixu32(__A, 1, __C, 1, __N);
}

void E5RT::ElementwiseOpCast<int,float>(int *__C, const float *__A, vDSP_Length __N)
{
  vDSP_vfix32(__A, 1, __C, 1, __N);
}

void E5RT::ElementwiseOpCast<unsigned short,float>(unsigned __int16 *__C, const float *__A, vDSP_Length __N)
{
  vDSP_vfixu16(__A, 1, __C, 1, __N);
}

void E5RT::ElementwiseOpCast<short,float>(__int16 *__C, const float *__A, vDSP_Length __N)
{
  vDSP_vfix16(__A, 1, __C, 1, __N);
}

void std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD930;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD930;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74270)
    return a1 + 8;
  if (((v3 & 0x8000000191A74270 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74270))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74270 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD3B0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD3B0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A742F2)
    return a1 + 8;
  if (((v3 & 0x8000000191A742F2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A742F2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A742F2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKfmE;
}

void std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADBF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADBF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74374)
    return a1 + 8;
  if (((v3 & 0x8000000191A74374 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74374))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74374 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD670;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD670;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A743EELL)
    return a1 + 8;
  if (((v3 & 0x8000000191A743EELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A743EELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A743EELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE170;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE170;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74468)
    return a1 + 8;
  if (((v3 & 0x8000000191A74468 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74468))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74468 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADEB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADEB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A744E2)
    return a1 + 8;
  if (((v3 & 0x8000000191A744E2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A744E2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A744E2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE6F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE6F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7455CLL)
    return a1 + 8;
  if (((v3 & 0x8000000191A7455CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7455CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7455CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE430;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE430;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A745D6)
    return a1 + 8;
  if (((v3 & 0x8000000191A745D6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A745D6))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A745D6 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::target_type()
{
}

float32_t _ZN4E5RT17ElementwiseOpCastIfDF16_EEvPT_PKT0_m(float32x4_t *a1, float16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  float16x4_t *v7;
  float16x4_t v8;
  unint64_t v10;
  float16x4_t *v11;
  float32x4_t *v12;
  unint64_t v13;
  float16x8_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;
  __int32 *v19;
  __int16 *v20;
  __int16 v21;

  if (a3 >= 4)
  {
    v5 = a3 >> 2;
    v6 = a1;
    v7 = a2;
    do
    {
      v8 = *v7++;
      _Q0 = vcvtq_f32_f16(v8);
      *v6++ = _Q0;
      --v5;
    }
    while (v5);
    v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v4 = a3 - (a3 & 0xFFFFFFFFFFFFFFFCLL);
    if (a3 <= (a3 & 0xFFFFFFFFFFFFFFFCLL))
      return _Q0.f32[0];
  }
  else
  {
    v3 = 0;
    v4 = a3;
    if (!a3)
      return _Q0.f32[0];
  }
  if (v4 < 0x10)
  {
    v10 = v3;
LABEL_12:
    v18 = a3 - v10;
    v19 = &a1->i32[v10];
    v20 = (__int16 *)a2 + v10;
    do
    {
      v21 = *v20++;
      _H0 = v21;
      __asm { FCVT            S0, H0 }
      *v19++ = _Q0.i32[0];
      --v18;
    }
    while (v18);
    return _Q0.f32[0];
  }
  v10 = v3 + (v4 & 0xFFFFFFFFFFFFFFF0);
  v11 = (float16x4_t *)((char *)a2 + 2 * v3 + 16);
  v12 = (float32x4_t *)((char *)a1 + 4 * v3 + 32);
  v13 = v4 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v14 = *(float16x8_t *)v11[-2].i8;
    v15 = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
    _Q0 = vcvt_hight_f32_f16(v14);
    v16 = vcvtq_f32_f16(*v11);
    v17 = vcvt_hight_f32_f16(*(float16x8_t *)v11->i8);
    v12[-2] = v15;
    v12[-1] = _Q0;
    *v12 = v16;
    v12[1] = v17;
    v12 += 4;
    v11 += 4;
    v13 -= 16;
  }
  while (v13);
  if (v4 != (v4 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_12;
  return _Q0.f32[0];
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_DF16_EEvPT_PKT0_m@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  _WORD *v11;
  __int16 *v12;
  __int16 v13;

  if (a3)
  {
    v3 = 0;
    if (a3 < 0x10)
      goto LABEL_7;
    if ((unint64_t)(a1 - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(a1 + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v7 = *(v4 - 1);
      v8 = *v4;
      *(v5 - 1) = v7;
      *v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v9 = a3 - v3;
      v10 = 2 * v3;
      v11 = (_WORD *)(a1 + 2 * v3);
      v12 = (__int16 *)(a2 + v10);
      do
      {
        v13 = *v12++;
        LOWORD(v7) = v13;
        *v11++ = v13;
        --v9;
      }
      while (v9);
    }
  }
  return v7;
}

__n64 _ZN4E5RT17ElementwiseOpCastIhDF16_EEvPT_PKT0_m(unint64_t a1, float16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  __int16 *v6;
  __int16 v7;
  __n64 result;
  float16x4_t *v14;
  unint64_t v15;
  unint64_t v16;
  int16x8_t v17;
  int16x8_t v18;

  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 2 * a3 > a1 && a1 + a3 > (unint64_t)a2)
    {
      v3 = 0;
LABEL_6:
      v4 = a3 - v3;
      v5 = (_BYTE *)(a1 + v3);
      v6 = (__int16 *)a2 + v3;
      do
      {
        v7 = *v6++;
        _H0 = v7;
        __asm { FCVT            S0, H0 }
        *v5++ = (int)result.n64_f32[0];
        --v4;
      }
      while (v4);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v14 = a2 + 1;
    v15 = a1 + 4;
    v16 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = (int16x8_t)vcvtq_s32_f32(vcvtq_f32_f16(v14[-1]));
      *(int16x4_t *)v17.i8 = vmovn_s32((int32x4_t)v17);
      v18 = (int16x8_t)vcvtq_s32_f32(vcvtq_f32_f16(*v14));
      *(int16x4_t *)v18.i8 = vmovn_s32((int32x4_t)v18);
      result.n64_u32[0] = vmovn_s16(v17).u32[0];
      result.n64_u32[1] = vmovn_s16(v18).u32[0];
      *(__n64 *)(v15 - 4) = result;
      v14 += 2;
      v15 += 8;
      v16 -= 8;
    }
    while (v16);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

__n64 _ZN4E5RT17ElementwiseOpCastIaDF16_EEvPT_PKT0_m(unint64_t a1, float16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  __int16 *v6;
  __int16 v7;
  __n64 result;
  float16x4_t *v14;
  unint64_t v15;
  unint64_t v16;
  int16x8_t v17;
  int16x8_t v18;

  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 2 * a3 > a1 && a1 + a3 > (unint64_t)a2)
    {
      v3 = 0;
LABEL_6:
      v4 = a3 - v3;
      v5 = (_BYTE *)(a1 + v3);
      v6 = (__int16 *)a2 + v3;
      do
      {
        v7 = *v6++;
        _H0 = v7;
        __asm { FCVT            S0, H0 }
        *v5++ = (int)result.n64_f32[0];
        --v4;
      }
      while (v4);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v14 = a2 + 1;
    v15 = a1 + 4;
    v16 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = (int16x8_t)vcvtq_s32_f32(vcvtq_f32_f16(v14[-1]));
      *(int16x4_t *)v17.i8 = vmovn_s32((int32x4_t)v17);
      v18 = (int16x8_t)vcvtq_s32_f32(vcvtq_f32_f16(*v14));
      *(int16x4_t *)v18.i8 = vmovn_s32((int32x4_t)v18);
      result.n64_u32[0] = vmovn_s16(v17).u32[0];
      result.n64_u32[1] = vmovn_s16(v18).u32[0];
      *(__n64 *)(v15 - 4) = result;
      v14 += 2;
      v15 += 8;
      v16 -= 8;
    }
    while (v16);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

float _ZN4E5RT17ElementwiseOpCastIjDF16_EEvPT_PKT0_m(uint64_t a1, uint64_t a2, unint64_t a3, __n128 _Q0, float16x4_t a5)
{
  unint64_t v5;
  __int32 *v6;
  uint64_t v7;
  unint64_t v8;
  __int32 v9;
  unint64_t v10;
  _DWORD *v11;
  __int16 *v12;
  __int16 v13;

  if (a3)
  {
    if (a3 < 4)
    {
      v5 = 0;
LABEL_7:
      v10 = a3 - v5;
      v11 = (_DWORD *)(a1 + 4 * v5);
      v12 = (__int16 *)(a2 + 2 * v5);
      do
      {
        v13 = *v12++;
        _H0 = v13;
        __asm { FCVT            S0, H0 }
        *v11++ = _Q0.n128_f32[0];
        --v10;
      }
      while (v10);
      return _Q0.n128_f32[0];
    }
    v5 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v6 = (__int32 *)(a2 + 4);
    v7 = a1 + 8;
    v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0.n128_u32[0] = *(v6 - 1);
      v9 = *v6;
      v6 += 2;
      a5.i32[0] = v9;
      _Q0.n128_u64[0] = vcvtq_u32_f32(vcvtq_f32_f16((float16x4_t)_Q0.n128_u64[0])).u64[0];
      a5 = (float16x4_t)vcvtq_u32_f32(vcvtq_f32_f16(a5)).u64[0];
      *(float16x4_t *)&_Q0.n128_i8[8] = a5;
      *(__n128 *)(v7 - 8) = _Q0;
      v7 += 16;
      v8 -= 4;
    }
    while (v8);
    if (v5 != a3)
      goto LABEL_7;
  }
  return _Q0.n128_f32[0];
}

float _ZN4E5RT17ElementwiseOpCastIiDF16_EEvPT_PKT0_m(uint64_t a1, uint64_t a2, unint64_t a3, __n128 _Q0, float16x4_t a5)
{
  unint64_t v5;
  __int32 *v6;
  uint64_t v7;
  unint64_t v8;
  __int32 v9;
  unint64_t v10;
  _DWORD *v11;
  __int16 *v12;
  __int16 v13;

  if (a3)
  {
    if (a3 < 4)
    {
      v5 = 0;
LABEL_7:
      v10 = a3 - v5;
      v11 = (_DWORD *)(a1 + 4 * v5);
      v12 = (__int16 *)(a2 + 2 * v5);
      do
      {
        v13 = *v12++;
        _H0 = v13;
        __asm { FCVT            S0, H0 }
        *v11++ = (int)_Q0.n128_f32[0];
        --v10;
      }
      while (v10);
      return _Q0.n128_f32[0];
    }
    v5 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v6 = (__int32 *)(a2 + 4);
    v7 = a1 + 8;
    v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0.n128_u32[0] = *(v6 - 1);
      v9 = *v6;
      v6 += 2;
      a5.i32[0] = v9;
      _Q0.n128_u64[0] = vcvtq_s32_f32(vcvtq_f32_f16((float16x4_t)_Q0.n128_u64[0])).u64[0];
      a5 = (float16x4_t)vcvtq_s32_f32(vcvtq_f32_f16(a5)).u64[0];
      *(float16x4_t *)&_Q0.n128_i8[8] = a5;
      *(__n128 *)(v7 - 8) = _Q0;
      v7 += 16;
      v8 -= 4;
    }
    while (v8);
    if (v5 != a3)
      goto LABEL_7;
  }
  return _Q0.n128_f32[0];
}

float _ZN4E5RT17ElementwiseOpCastItDF16_EEvPT_PKT0_m(int16x8_t *a1, float16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  float16x4_t *v4;
  int16x8_t *v5;
  unint64_t v6;
  int16x8_t v8;
  unint64_t v9;
  uint64_t v10;
  __int16 *v11;
  float16x4_t *v12;
  __int16 v13;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v9 = a3 - v3;
      v10 = 2 * v3;
      v11 = &a1->i16[v3];
      v12 = (float16x4_t *)((char *)a2 + v10);
      do
      {
        v13 = v12->i16[0];
        v12 = (float16x4_t *)((char *)v12 + 2);
        _H0 = v13;
        __asm { FCVT            S0, H0 }
        *v11++ = (int)*(float *)_Q0.i32;
        --v9;
      }
      while (v9);
      return *(float *)_Q0.i32;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = a1 + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      _Q0 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vcvtq_f32_f16(v4[-2])), (int16x8_t)vcvtq_u32_f32(vcvt_hight_f32_f16(*(float16x8_t *)v4[-2].i8)));
      v8 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vcvtq_f32_f16(*v4)), (int16x8_t)vcvtq_u32_f32(vcvt_hight_f32_f16(*(float16x8_t *)v4->i8)));
      v5[-1] = _Q0;
      *v5 = v8;
      v4 += 4;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return *(float *)_Q0.i32;
}

float _ZN4E5RT17ElementwiseOpCastIsDF16_EEvPT_PKT0_m(int16x8_t *a1, float16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  float16x4_t *v4;
  int16x8_t *v5;
  unint64_t v6;
  int16x8_t v8;
  unint64_t v9;
  uint64_t v10;
  __int16 *v11;
  float16x4_t *v12;
  __int16 v13;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v9 = a3 - v3;
      v10 = 2 * v3;
      v11 = &a1->i16[v3];
      v12 = (float16x4_t *)((char *)a2 + v10);
      do
      {
        v13 = v12->i16[0];
        v12 = (float16x4_t *)((char *)v12 + 2);
        _H0 = v13;
        __asm { FCVT            S0, H0 }
        *v11++ = (int)*(float *)_Q0.i32;
        --v9;
      }
      while (v9);
      return *(float *)_Q0.i32;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = a1 + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      _Q0 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vcvtq_f32_f16(v4[-2])), (int16x8_t)vcvtq_s32_f32(vcvt_hight_f32_f16(*(float16x8_t *)v4[-2].i8)));
      v8 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vcvtq_f32_f16(*v4)), (int16x8_t)vcvtq_s32_f32(vcvt_hight_f32_f16(*(float16x8_t *)v4->i8)));
      v5[-1] = _Q0;
      *v5 = v8;
      v4 += 4;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return *(float *)_Q0.i32;
}

void _ZNSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD880;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD880;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74658)
    return a1 + 8;
  if (((v3 & 0x8000000191A74658 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74658))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74658 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPfPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD300;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD300;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A746EALL)
    return a1 + 8;
  if (((v3 & 0x8000000191A746EALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A746EALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A746EALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADB40;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADB40;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7477CLL)
    return a1 + 8;
  if (((v3 & 0x8000000191A7477CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7477CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7477CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPhPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD5C0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD5C0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74806)
    return a1 + 8;
  if (((v3 & 0x8000000191A74806 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74806))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74806 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPaPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE0C0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE0C0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74890)
    return a1 + 8;
  if (((v3 & 0x8000000191A74890 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74890))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74890 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPjPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADE00;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADE00;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7491ALL)
    return a1 + 8;
  if (((v3 & 0x8000000191A7491ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7491ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7491ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPiPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE640;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE640;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A749A4)
    return a1 + 8;
  if (((v3 & 0x8000000191A749A4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A749A4))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A749A4 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPtPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE380;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE380;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74A2ELL)
    return a1 + 8;
  if (((v3 & 0x8000000191A74A2ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74A2ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74A2ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPsPKDF16_mE;
}

void E5RT::ElementwiseOpCast<float,unsigned char>(float *__C, unsigned __int8 *__A, vDSP_Length __N)
{
  vDSP_vfltu8(__A, 1, __C, 1, __N);
}

float32x4_t _ZN4E5RT17ElementwiseOpCastIDF16_hEEvPT_PKT0_m(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _WORD *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  float32x4_t result;
  uint8x8_t *v13;
  float16x8_t *v14;
  unint64_t v15;
  uint8x16_t v16;
  uint16x8_t v17;
  float16x8_t v18;
  uint16x8_t v19;
  float16x8_t v20;
  uint16x8_t v21;
  float16x8_t v22;
  uint16x8_t v23;
  int16x4_t v24;
  unint64_t v25;
  uint8x8_t *v26;
  float16x8_t *v27;
  unint64_t v28;
  uint8x8_t v29;
  uint16x8_t v30;
  int16x4_t v31;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v13 = (uint8x8_t *)(a2 + 16);
      v14 = (float16x8_t *)(a1 + 32);
      v15 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *(uint8x16_t *)v13[-2].i8;
        v17 = vmovl_u8(*(uint8x8_t *)v16.i8);
        v18 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v17.i8))), vcvtq_f32_u32(vmovl_high_u16(v17)));
        v19 = vmovl_high_u8(v16);
        v20 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19.i8))), vcvtq_f32_u32(vmovl_high_u16(v19)));
        v21 = vmovl_u8(*v13);
        v22 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v21.i8))), vcvtq_f32_u32(vmovl_high_u16(v21)));
        v23 = vmovl_high_u8(*(uint8x16_t *)v13->i8);
        v24 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v23.i8)));
        result = vcvtq_f32_u32(vmovl_high_u16(v23));
        v14[-2] = v18;
        v14[-1] = v20;
        *v14 = v22;
        v14[1] = vcvt_hight_f16_f32(v24, result);
        v14 += 4;
        v13 += 4;
        v15 -= 32;
      }
      while (v15);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_WORD *)(a1 + 2 * v3);
        v6 = (unsigned __int8 *)(a2 + v3);
        do
        {
          v7 = *v6++;
          result.f32[0] = (float)v7;
          __asm { FCVT            H0, S0 }
          *v5++ = result.i16[0];
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v25 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v26 = (uint8x8_t *)(a2 + v25);
    v27 = (float16x8_t *)(a1 + 2 * v25);
    v28 = v25 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v29 = *v26++;
      v30 = vmovl_u8(v29);
      v31 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v30.i8)));
      result = vcvtq_f32_u32(vmovl_high_u16(v30));
      *v27++ = vcvt_hight_f16_f32(v31, result);
      v28 += 8;
    }
    while (v28);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<unsigned char,unsigned char>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  char v16;

  if (a3)
  {
    v3 = 0;
    if (a3 < 8 || (unint64_t)(result - a2) < 0x20)
      goto LABEL_13;
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v4 = (__int128 *)(a2 + 16);
      v5 = (_OWORD *)(result + 16);
      v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v7 = *v4;
        *(v5 - 1) = *(v4 - 1);
        *v5 = v7;
        v4 += 2;
        v5 += 2;
        v6 -= 32;
      }
      while (v6);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_13:
        v13 = a3 - v3;
        v14 = (_BYTE *)(result + v3);
        v15 = (char *)(a2 + v3);
        do
        {
          v16 = *v15++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v8 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v9 = (uint64_t *)(a2 + v8);
    v10 = (_QWORD *)(result + v8);
    v11 = v8 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v12 = *v9++;
      *v10++ = v12;
      v11 += 8;
    }
    while (v11);
    if (v3 != a3)
      goto LABEL_13;
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<signed char,unsigned char>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  char v16;

  if (a3)
  {
    v3 = 0;
    if (a3 < 8 || (unint64_t)(result - a2) < 0x20)
      goto LABEL_13;
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v4 = (__int128 *)(a2 + 16);
      v5 = (_OWORD *)(result + 16);
      v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v7 = *v4;
        *(v5 - 1) = *(v4 - 1);
        *v5 = v7;
        v4 += 2;
        v5 += 2;
        v6 -= 32;
      }
      while (v6);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_13:
        v13 = a3 - v3;
        v14 = (_BYTE *)(result + v3);
        v15 = (char *)(a2 + v3);
        do
        {
          v16 = *v15++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v8 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v9 = (uint64_t *)(a2 + v8);
    v10 = (_QWORD *)(result + v8);
    v11 = v8 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v12 = *v9++;
      *v10++ = v12;
      v11 += 8;
    }
    while (v11);
    if (v3 != a3)
      goto LABEL_13;
  }
  return result;
}

unint64_t E5RT::ElementwiseOpCast<unsigned int,unsigned char>(unint64_t result, unint64_t a2, unint64_t a3, double a4, double a5, int8x16_t a6)
{
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unsigned __int8 *v9;
  int v10;
  int8x16_t *v11;
  int8x16_t *v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t v23;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > result && result + 4 * a3 > a2)
    {
      v6 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      v11 = (int8x16_t *)(a2 + 16);
      v12 = (int8x16_t *)(result + 64);
      a6.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      v13 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v14 = v11[-1];
        v15 = *v11;
        v16 = vqtbl1q_s8(*v11, (int8x16_t)xmmword_191A74190);
        v17 = vqtbl1q_s8(*v11, (int8x16_t)xmmword_191A741A0);
        v12[-2] = vqtbl1q_s8(v14, (int8x16_t)xmmword_191A741B0);
        v12[-1] = vqtbl1q_s8(v14, (int8x16_t)xmmword_191A741C0);
        v12[-4] = vqtbl1q_s8(v14, (int8x16_t)xmmword_191A74190);
        v12[-3] = vqtbl1q_s8(v14, (int8x16_t)xmmword_191A741A0);
        v12[2] = vqtbl1q_s8(v15, (int8x16_t)xmmword_191A741B0);
        v12[3] = vqtbl1q_s8(v15, (int8x16_t)xmmword_191A741C0);
        *v12 = v16;
        v12[1] = v17;
        v12 += 8;
        v11 += 2;
        v13 -= 32;
      }
      while (v13);
      if (v6 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v7 = a3 - v6;
        v8 = (_DWORD *)(result + 4 * v6);
        v9 = (unsigned __int8 *)(a2 + v6);
        do
        {
          v10 = *v9++;
          *v8++ = v10;
          --v7;
        }
        while (v7);
        return result;
      }
    }
    else
    {
      v6 = 0;
    }
    v18 = v6;
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    v19 = (unint64_t *)(a2 + v18);
    v20 = (int8x16_t *)(result + 4 * v18);
    v21 = v18 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v22 = *v19++;
      a6.i64[0] = v22;
      v23 = vqtbl1q_s8(a6, (int8x16_t)xmmword_191A74190);
      a6 = vqtbl1q_s8(a6, (int8x16_t)xmmword_191A741A0);
      *v20 = v23;
      v20[1] = a6;
      v20 += 2;
      v21 += 8;
    }
    while (v21);
    if (v6 != a3)
      goto LABEL_6;
  }
  return result;
}

unint64_t E5RT::ElementwiseOpCast<int,unsigned char>(unint64_t result, unint64_t a2, unint64_t a3, double a4, double a5, int8x16_t a6)
{
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unsigned __int8 *v9;
  int v10;
  int8x16_t *v11;
  int8x16_t *v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t v23;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > result && result + 4 * a3 > a2)
    {
      v6 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      v11 = (int8x16_t *)(a2 + 16);
      v12 = (int8x16_t *)(result + 64);
      a6.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      v13 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v14 = v11[-1];
        v15 = *v11;
        v16 = vqtbl1q_s8(*v11, (int8x16_t)xmmword_191A74190);
        v17 = vqtbl1q_s8(*v11, (int8x16_t)xmmword_191A741A0);
        v12[-2] = vqtbl1q_s8(v14, (int8x16_t)xmmword_191A741B0);
        v12[-1] = vqtbl1q_s8(v14, (int8x16_t)xmmword_191A741C0);
        v12[-4] = vqtbl1q_s8(v14, (int8x16_t)xmmword_191A74190);
        v12[-3] = vqtbl1q_s8(v14, (int8x16_t)xmmword_191A741A0);
        v12[2] = vqtbl1q_s8(v15, (int8x16_t)xmmword_191A741B0);
        v12[3] = vqtbl1q_s8(v15, (int8x16_t)xmmword_191A741C0);
        *v12 = v16;
        v12[1] = v17;
        v12 += 8;
        v11 += 2;
        v13 -= 32;
      }
      while (v13);
      if (v6 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v7 = a3 - v6;
        v8 = (_DWORD *)(result + 4 * v6);
        v9 = (unsigned __int8 *)(a2 + v6);
        do
        {
          v10 = *v9++;
          *v8++ = v10;
          --v7;
        }
        while (v7);
        return result;
      }
    }
    else
    {
      v6 = 0;
    }
    v18 = v6;
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    v19 = (unint64_t *)(a2 + v18);
    v20 = (int8x16_t *)(result + 4 * v18);
    v21 = v18 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v22 = *v19++;
      a6.i64[0] = v22;
      v23 = vqtbl1q_s8(a6, (int8x16_t)xmmword_191A74190);
      a6 = vqtbl1q_s8(a6, (int8x16_t)xmmword_191A741A0);
      *v20 = v23;
      v20[1] = a6;
      v20 += 2;
      v21 += 8;
    }
    while (v21);
    if (v6 != a3)
      goto LABEL_6;
  }
  return result;
}

uint16x8_t E5RT::ElementwiseOpCast<unsigned short,unsigned char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _WORD *v5;
  unsigned __int8 *v6;
  __int16 v7;
  uint8x8_t *v8;
  uint16x8_t *v9;
  unint64_t v10;
  uint8x16_t v11;
  uint16x8_t v12;
  uint16x8_t result;
  uint16x8_t v14;
  uint16x8_t v15;
  unint64_t v16;
  uint8x8_t *v17;
  uint16x8_t *v18;
  unint64_t v19;
  uint8x8_t v20;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (uint8x8_t *)(a2 + 16);
      v9 = (uint16x8_t *)(a1 + 32);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v11 = *(uint8x16_t *)v8[-2].i8;
        v12 = vmovl_u8(*(uint8x8_t *)v11.i8);
        result = vmovl_high_u8(v11);
        v14 = vmovl_u8(*v8);
        v15 = vmovl_high_u8(*(uint8x16_t *)v8->i8);
        v9[-2] = v12;
        v9[-1] = result;
        *v9 = v14;
        v9[1] = v15;
        v9 += 4;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_WORD *)(a1 + 2 * v3);
        v6 = (unsigned __int8 *)(a2 + v3);
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v16 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v17 = (uint8x8_t *)(a2 + v16);
    v18 = (uint16x8_t *)(a1 + 2 * v16);
    v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      result = vmovl_u8(v20);
      *v18++ = result;
      v19 += 8;
    }
    while (v19);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

uint16x8_t E5RT::ElementwiseOpCast<short,unsigned char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _WORD *v5;
  unsigned __int8 *v6;
  __int16 v7;
  uint8x8_t *v8;
  uint16x8_t *v9;
  unint64_t v10;
  uint8x16_t v11;
  uint16x8_t v12;
  uint16x8_t result;
  uint16x8_t v14;
  uint16x8_t v15;
  unint64_t v16;
  uint8x8_t *v17;
  uint16x8_t *v18;
  unint64_t v19;
  uint8x8_t v20;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (uint8x8_t *)(a2 + 16);
      v9 = (uint16x8_t *)(a1 + 32);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v11 = *(uint8x16_t *)v8[-2].i8;
        v12 = vmovl_u8(*(uint8x8_t *)v11.i8);
        result = vmovl_high_u8(v11);
        v14 = vmovl_u8(*v8);
        v15 = vmovl_high_u8(*(uint8x16_t *)v8->i8);
        v9[-2] = v12;
        v9[-1] = result;
        *v9 = v14;
        v9[1] = v15;
        v9 += 4;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_WORD *)(a1 + 2 * v3);
        v6 = (unsigned __int8 *)(a2 + v3);
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v16 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v17 = (uint8x8_t *)(a2 + v16);
    v18 = (uint16x8_t *)(a1 + 2 * v16);
    v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      result = vmovl_u8(v20);
      *v18++ = result;
      v19 += 8;
    }
    while (v19);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

void std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD988;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD988;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74AB0)
    return a1 + 8;
  if (((v3 & 0x8000000191A74AB0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74AB0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74AB0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD408;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD408;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74B32)
    return a1 + 8;
  if (((v3 & 0x8000000191A74B32 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74B32))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74B32 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKhmE;
}

void std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADC48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADC48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74BB4)
    return a1 + 8;
  if (((v3 & 0x8000000191A74BB4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74BB4))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74BB4 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD6C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD6C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74C2ELL)
    return a1 + 8;
  if (((v3 & 0x8000000191A74C2ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74C2ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74C2ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE1C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE1C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74CA8)
    return a1 + 8;
  if (((v3 & 0x8000000191A74CA8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74CA8))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74CA8 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADF08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADF08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74D22)
    return a1 + 8;
  if (((v3 & 0x8000000191A74D22 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74D22))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74D22 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE748;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE748;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74D9CLL)
    return a1 + 8;
  if (((v3 & 0x8000000191A74D9CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74D9CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74D9CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE488;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE488;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74E16)
    return a1 + 8;
  if (((v3 & 0x8000000191A74E16 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74E16))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74E16 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::target_type()
{
}

void E5RT::ElementwiseOpCast<float,signed char>(float *__C, char *__A, vDSP_Length __N)
{
  vDSP_vflt8(__A, 1, __C, 1, __N);
}

float32x4_t _ZN4E5RT17ElementwiseOpCastIDF16_aEEvPT_PKT0_m(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _WORD *v5;
  char *v6;
  int v7;
  float32x4_t result;
  int8x8_t *v13;
  float16x8_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int16x8_t v17;
  float16x8_t v18;
  int16x8_t v19;
  float16x8_t v20;
  int16x8_t v21;
  float16x8_t v22;
  int16x8_t v23;
  int16x4_t v24;
  unint64_t v25;
  int8x8_t *v26;
  float16x8_t *v27;
  unint64_t v28;
  int8x8_t v29;
  int16x8_t v30;
  int16x4_t v31;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v13 = (int8x8_t *)(a2 + 16);
      v14 = (float16x8_t *)(a1 + 32);
      v15 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *(int8x16_t *)v13[-2].i8;
        v17 = vmovl_s8(*(int8x8_t *)v16.i8);
        v18 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v17.i8))), vcvtq_f32_s32(vmovl_high_s16(v17)));
        v19 = vmovl_high_s8(v16);
        v20 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v19.i8))), vcvtq_f32_s32(vmovl_high_s16(v19)));
        v21 = vmovl_s8(*v13);
        v22 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v21.i8))), vcvtq_f32_s32(vmovl_high_s16(v21)));
        v23 = vmovl_high_s8(*(int8x16_t *)v13->i8);
        v24 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v23.i8)));
        result = vcvtq_f32_s32(vmovl_high_s16(v23));
        v14[-2] = v18;
        v14[-1] = v20;
        *v14 = v22;
        v14[1] = vcvt_hight_f16_f32(v24, result);
        v14 += 4;
        v13 += 4;
        v15 -= 32;
      }
      while (v15);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_WORD *)(a1 + 2 * v3);
        v6 = (char *)(a2 + v3);
        do
        {
          v7 = *v6++;
          result.f32[0] = (float)v7;
          __asm { FCVT            H0, S0 }
          *v5++ = result.i16[0];
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v25 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v26 = (int8x8_t *)(a2 + v25);
    v27 = (float16x8_t *)(a1 + 2 * v25);
    v28 = v25 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v29 = *v26++;
      v30 = vmovl_s8(v29);
      v31 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v30.i8)));
      result = vcvtq_f32_s32(vmovl_high_s16(v30));
      *v27++ = vcvt_hight_f16_f32(v31, result);
      v28 += 8;
    }
    while (v28);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<unsigned char,signed char>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  char v16;

  if (a3)
  {
    v3 = 0;
    if (a3 < 8 || (unint64_t)(result - a2) < 0x20)
      goto LABEL_13;
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v4 = (__int128 *)(a2 + 16);
      v5 = (_OWORD *)(result + 16);
      v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v7 = *v4;
        *(v5 - 1) = *(v4 - 1);
        *v5 = v7;
        v4 += 2;
        v5 += 2;
        v6 -= 32;
      }
      while (v6);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_13:
        v13 = a3 - v3;
        v14 = (_BYTE *)(result + v3);
        v15 = (char *)(a2 + v3);
        do
        {
          v16 = *v15++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v8 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v9 = (uint64_t *)(a2 + v8);
    v10 = (_QWORD *)(result + v8);
    v11 = v8 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v12 = *v9++;
      *v10++ = v12;
      v11 += 8;
    }
    while (v11);
    if (v3 != a3)
      goto LABEL_13;
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<signed char,signed char>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  char v16;

  if (a3)
  {
    v3 = 0;
    if (a3 < 8 || (unint64_t)(result - a2) < 0x20)
      goto LABEL_13;
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v4 = (__int128 *)(a2 + 16);
      v5 = (_OWORD *)(result + 16);
      v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v7 = *v4;
        *(v5 - 1) = *(v4 - 1);
        *v5 = v7;
        v4 += 2;
        v5 += 2;
        v6 -= 32;
      }
      while (v6);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_13:
        v13 = a3 - v3;
        v14 = (_BYTE *)(result + v3);
        v15 = (char *)(a2 + v3);
        do
        {
          v16 = *v15++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v8 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v9 = (uint64_t *)(a2 + v8);
    v10 = (_QWORD *)(result + v8);
    v11 = v8 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v12 = *v9++;
      *v10++ = v12;
      v11 += 8;
    }
    while (v11);
    if (v3 != a3)
      goto LABEL_13;
  }
  return result;
}

int32x4_t E5RT::ElementwiseOpCast<unsigned int,signed char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  char *v6;
  int v7;
  int8x8_t *v8;
  int32x4_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t result;
  unint64_t v19;
  int8x8_t *v20;
  int32x4_t *v21;
  unint64_t v22;
  int8x8_t v23;
  int16x8_t v24;
  int32x4_t v25;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 4 * a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (int8x8_t *)(a2 + 16);
      v9 = (int32x4_t *)(a1 + 64);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v11 = *(int8x16_t *)v8[-2].i8;
        v12 = *(int8x16_t *)v8->i8;
        v13 = vmovl_s8(*(int8x8_t *)v11.i8);
        v14 = vmovl_high_s8(v11);
        v15 = vmovl_s8(*v8);
        v9[-2] = vmovl_s16(*(int16x4_t *)v14.i8);
        v9[-1] = vmovl_high_s16(v14);
        v16 = vmovl_high_s8(v12);
        v17 = vmovl_s16(*(int16x4_t *)v16.i8);
        v9[-4] = vmovl_s16(*(int16x4_t *)v13.i8);
        v9[-3] = vmovl_high_s16(v13);
        result = vmovl_high_s16(v16);
        v9[2] = v17;
        v9[3] = result;
        *v9 = vmovl_s16(*(int16x4_t *)v15.i8);
        v9[1] = vmovl_high_s16(v15);
        v9 += 8;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_DWORD *)(a1 + 4 * v3);
        v6 = (char *)(a2 + v3);
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v19 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v20 = (int8x8_t *)(a2 + v19);
    v21 = (int32x4_t *)(a1 + 4 * v19);
    v22 = v19 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v20++;
      v24 = vmovl_s8(v23);
      v25 = vmovl_s16(*(int16x4_t *)v24.i8);
      result = vmovl_high_s16(v24);
      *v21 = v25;
      v21[1] = result;
      v21 += 2;
      v22 += 8;
    }
    while (v22);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

int32x4_t E5RT::ElementwiseOpCast<int,signed char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  char *v6;
  int v7;
  int8x8_t *v8;
  int32x4_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t result;
  unint64_t v19;
  int8x8_t *v20;
  int32x4_t *v21;
  unint64_t v22;
  int8x8_t v23;
  int16x8_t v24;
  int32x4_t v25;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 4 * a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (int8x8_t *)(a2 + 16);
      v9 = (int32x4_t *)(a1 + 64);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v11 = *(int8x16_t *)v8[-2].i8;
        v12 = *(int8x16_t *)v8->i8;
        v13 = vmovl_s8(*(int8x8_t *)v11.i8);
        v14 = vmovl_high_s8(v11);
        v15 = vmovl_s8(*v8);
        v9[-2] = vmovl_s16(*(int16x4_t *)v14.i8);
        v9[-1] = vmovl_high_s16(v14);
        v16 = vmovl_high_s8(v12);
        v17 = vmovl_s16(*(int16x4_t *)v16.i8);
        v9[-4] = vmovl_s16(*(int16x4_t *)v13.i8);
        v9[-3] = vmovl_high_s16(v13);
        result = vmovl_high_s16(v16);
        v9[2] = v17;
        v9[3] = result;
        *v9 = vmovl_s16(*(int16x4_t *)v15.i8);
        v9[1] = vmovl_high_s16(v15);
        v9 += 8;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_DWORD *)(a1 + 4 * v3);
        v6 = (char *)(a2 + v3);
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v19 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v20 = (int8x8_t *)(a2 + v19);
    v21 = (int32x4_t *)(a1 + 4 * v19);
    v22 = v19 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v20++;
      v24 = vmovl_s8(v23);
      v25 = vmovl_s16(*(int16x4_t *)v24.i8);
      result = vmovl_high_s16(v24);
      *v21 = v25;
      v21[1] = result;
      v21 += 2;
      v22 += 8;
    }
    while (v22);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

int16x8_t E5RT::ElementwiseOpCast<unsigned short,signed char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _WORD *v5;
  char *v6;
  __int16 v7;
  int8x8_t *v8;
  int16x8_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t result;
  int16x8_t v14;
  int16x8_t v15;
  unint64_t v16;
  int8x8_t *v17;
  int16x8_t *v18;
  unint64_t v19;
  int8x8_t v20;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (int8x8_t *)(a2 + 16);
      v9 = (int16x8_t *)(a1 + 32);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v11 = *(int8x16_t *)v8[-2].i8;
        v12 = vmovl_s8(*(int8x8_t *)v11.i8);
        result = vmovl_high_s8(v11);
        v14 = vmovl_s8(*v8);
        v15 = vmovl_high_s8(*(int8x16_t *)v8->i8);
        v9[-2] = v12;
        v9[-1] = result;
        *v9 = v14;
        v9[1] = v15;
        v9 += 4;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_WORD *)(a1 + 2 * v3);
        v6 = (char *)(a2 + v3);
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v16 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v17 = (int8x8_t *)(a2 + v16);
    v18 = (int16x8_t *)(a1 + 2 * v16);
    v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      result = vmovl_s8(v20);
      *v18++ = result;
      v19 += 8;
    }
    while (v19);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

int16x8_t E5RT::ElementwiseOpCast<short,signed char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _WORD *v5;
  char *v6;
  __int16 v7;
  int8x8_t *v8;
  int16x8_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t result;
  int16x8_t v14;
  int16x8_t v15;
  unint64_t v16;
  int8x8_t *v17;
  int16x8_t *v18;
  unint64_t v19;
  int8x8_t v20;

  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (int8x8_t *)(a2 + 16);
      v9 = (int16x8_t *)(a1 + 32);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v11 = *(int8x16_t *)v8[-2].i8;
        v12 = vmovl_s8(*(int8x8_t *)v11.i8);
        result = vmovl_high_s8(v11);
        v14 = vmovl_s8(*v8);
        v15 = vmovl_high_s8(*(int8x16_t *)v8->i8);
        v9[-2] = v12;
        v9[-1] = result;
        *v9 = v14;
        v9[1] = v15;
        v9 += 4;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_WORD *)(a1 + 2 * v3);
        v6 = (char *)(a2 + v3);
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v16 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v17 = (int8x8_t *)(a2 + v16);
    v18 = (int16x8_t *)(a1 + 2 * v16);
    v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      result = vmovl_s8(v20);
      *v18++ = result;
      v19 += 8;
    }
    while (v19);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

void std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD8D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD8D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74E90)
    return a1 + 8;
  if (((v3 & 0x8000000191A74E90 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74E90))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74E90 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD358;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD358;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74F12)
    return a1 + 8;
  if (((v3 & 0x8000000191A74F12 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74F12))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74F12 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKamE;
}

void std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADB98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADB98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A74F94)
    return a1 + 8;
  if (((v3 & 0x8000000191A74F94 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A74F94))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A74F94 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD618;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD618;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7500ELL)
    return a1 + 8;
  if (((v3 & 0x8000000191A7500ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7500ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7500ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE118;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE118;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75088)
    return a1 + 8;
  if (((v3 & 0x8000000191A75088 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75088))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75088 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADE58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADE58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75102)
    return a1 + 8;
  if (((v3 & 0x8000000191A75102 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75102))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75102 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE698;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE698;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7517CLL)
    return a1 + 8;
  if (((v3 & 0x8000000191A7517CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7517CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7517CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE3D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE3D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A751F6)
    return a1 + 8;
  if (((v3 & 0x8000000191A751F6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A751F6))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A751F6 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::target_type()
{
}

float32_t E5RT::ElementwiseOpCast<float,unsigned int>(float32x4_t *a1, uint32x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint32x4_t *v4;
  float32x4_t *v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unsigned int *v12;
  unsigned int v13;

  if (a3)
  {
    if (a3 < 8)
    {
      v3 = 0;
LABEL_7:
      v9 = a3 - v3;
      v10 = v3;
      v11 = &a1->f32[v3];
      v12 = &a2->u32[v10];
      do
      {
        v13 = *v12++;
        v7.f32[0] = (float)v13;
        *v11++ = (float)v13;
        --v9;
      }
      while (v9);
      return v7.f32[0];
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v4 = a2 + 1;
    v5 = a1 + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v7 = vcvtq_f32_u32(v4[-1]);
      v8 = vcvtq_f32_u32(*v4);
      v5[-1] = v7;
      *v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return v7.f32[0];
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_jEEvPT_PKT0_m@<H0>(float16x8_t *a1@<X0>, uint32x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  unint64_t v3;
  uint32x4_t *v4;
  float16x8_t *v5;
  unint64_t v6;
  uint32x4_t v7;
  uint32x4_t v8;
  uint32x4_t v9;
  uint32x4_t v10;
  float16x8_t v11;
  unint64_t v13;
  __int16 *v14;
  unsigned int *v15;
  unsigned int v16;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v13 = a3 - v3;
      v14 = &a1->i16[v3];
      v15 = (unsigned int *)a2 + v3;
      do
      {
        v16 = *v15++;
        *(float *)_Q0.i32 = (float)v16;
        __asm { FCVT            H0, S0 }
        *v14++ = _Q0.i16[0];
        --v13;
      }
      while (v13);
      return _Q0.i16[0];
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = a1 + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v8 = v4[-2];
      v7 = v4[-1];
      v10 = *v4;
      v9 = v4[1];
      v4 += 4;
      v11 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(v8)), vcvtq_f32_u32(v7));
      _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(v10)), vcvtq_f32_u32(v9));
      v5[-1] = v11;
      *v5 = _Q0;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return _Q0.i16[0];
}

unint64_t E5RT::ElementwiseOpCast<unsigned char,unsigned int>(unint64_t result, int8x16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  int *v6;
  int v7;
  int8x16x4_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  unint64_t v11;
  int8x16x2_t *v12;
  _QWORD *v13;
  unint64_t v14;
  int8x16x2_t v15;
  int8x16x4_t v16;

  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 4 * a3 > result && result + a3 > (unint64_t)a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = a2 + 1;
      v9 = (int8x16_t *)(result + 16);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v8;
        v9[-1] = vqtbl4q_s8(v8[-1], (int8x16_t)xmmword_191A741D0);
        *v9 = vqtbl4q_s8(v16, (int8x16_t)xmmword_191A741D0);
        v8 += 2;
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_BYTE *)(result + v3);
        v6 = (int *)a2 + v3;
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v11 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v12 = (int8x16x2_t *)((char *)a2 + 4 * v11);
    v13 = (_QWORD *)(result + v11);
    v14 = v11 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v15 = *v12++;
      *v13++ = vqtbl2q_s8(v15, (int8x16_t)xmmword_191A741E0).u64[0];
      v14 += 8;
    }
    while (v14);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

unint64_t E5RT::ElementwiseOpCast<signed char,unsigned int>(unint64_t result, int8x16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  int *v6;
  int v7;
  int8x16x4_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  unint64_t v11;
  int8x16x2_t *v12;
  _QWORD *v13;
  unint64_t v14;
  int8x16x2_t v15;
  int8x16x4_t v16;

  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 4 * a3 > result && result + a3 > (unint64_t)a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = a2 + 1;
      v9 = (int8x16_t *)(result + 16);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v8;
        v9[-1] = vqtbl4q_s8(v8[-1], (int8x16_t)xmmword_191A741D0);
        *v9 = vqtbl4q_s8(v16, (int8x16_t)xmmword_191A741D0);
        v8 += 2;
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_BYTE *)(result + v3);
        v6 = (int *)a2 + v3;
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v11 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v12 = (int8x16x2_t *)((char *)a2 + 4 * v11);
    v13 = (_QWORD *)(result + v11);
    v14 = v11 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v15 = *v12++;
      *v13++ = vqtbl2q_s8(v15, (int8x16_t)xmmword_191A741E0).u64[0];
      v14 += 8;
    }
    while (v14);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<unsigned int,unsigned int>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int v12;

  if (a3)
  {
    v3 = 0;
    if (a3 < 8)
      goto LABEL_7;
    if ((unint64_t)(result - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(result + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v8 = a3 - v3;
      v9 = 4 * v3;
      v10 = (_DWORD *)(result + 4 * v3);
      v11 = (int *)(a2 + v9);
      do
      {
        v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<int,unsigned int>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int v12;

  if (a3)
  {
    v3 = 0;
    if (a3 < 8)
      goto LABEL_7;
    if ((unint64_t)(result - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(result + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v8 = a3 - v3;
      v9 = 4 * v3;
      v10 = (_DWORD *)(result + 4 * v3);
      v11 = (int *)(a2 + v9);
      do
      {
        v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

int16x8_t *E5RT::ElementwiseOpCast<unsigned short,unsigned int>(int16x8_t *result, int16x8_t *a2, unint64_t a3)
{
  unint64_t v3;
  int16x8_t *v4;
  int16x8_t *v5;
  unint64_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  unint64_t v11;
  __int16 *v12;
  __int32 *v13;
  int v14;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v11 = a3 - v3;
      v12 = &result->i16[v3];
      v13 = &a2->i32[v3];
      do
      {
        v14 = *v13++;
        *v12++ = v14;
        --v11;
      }
      while (v11);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = result + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v8 = v4[-2];
      v7 = v4[-1];
      v10 = *v4;
      v9 = v4[1];
      v4 += 4;
      v5[-1] = vuzp1q_s16(v8, v7);
      *v5 = vuzp1q_s16(v10, v9);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return result;
}

int16x8_t *E5RT::ElementwiseOpCast<short,unsigned int>(int16x8_t *result, int16x8_t *a2, unint64_t a3)
{
  unint64_t v3;
  int16x8_t *v4;
  int16x8_t *v5;
  unint64_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  unint64_t v11;
  __int16 *v12;
  __int32 *v13;
  int v14;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v11 = a3 - v3;
      v12 = &result->i16[v3];
      v13 = &a2->i32[v3];
      do
      {
        v14 = *v13++;
        *v12++ = v14;
        --v11;
      }
      while (v11);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = result + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v8 = v4[-2];
      v7 = v4[-1];
      v10 = *v4;
      v9 = v4[1];
      v4 += 4;
      v5[-1] = vuzp1q_s16(v8, v7);
      *v5 = vuzp1q_s16(v10, v9);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return result;
}

void std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADA38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADA38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75270)
    return a1 + 8;
  if (((v3 & 0x8000000191A75270 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75270))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75270 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD4B8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD4B8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A752F2)
    return a1 + 8;
  if (((v3 & 0x8000000191A752F2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A752F2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A752F2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKjmE;
}

void std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADCF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADCF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75374)
    return a1 + 8;
  if (((v3 & 0x8000000191A75374 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75374))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75374 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD778;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD778;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A753EELL)
    return a1 + 8;
  if (((v3 & 0x8000000191A753EELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A753EELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A753EELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE278;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE278;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75468)
    return a1 + 8;
  if (((v3 & 0x8000000191A75468 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75468))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75468 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADFB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADFB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A754E2)
    return a1 + 8;
  if (((v3 & 0x8000000191A754E2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A754E2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A754E2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE7F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE7F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7555CLL)
    return a1 + 8;
  if (((v3 & 0x8000000191A7555CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7555CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7555CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE538;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE538;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A755D6)
    return a1 + 8;
  if (((v3 & 0x8000000191A755D6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A755D6))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A755D6 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::target_type()
{
}

float32_t E5RT::ElementwiseOpCast<float,int>(float32x4_t *a1, int32x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  int32x4_t *v4;
  float32x4_t *v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  int *v12;
  int v13;

  if (a3)
  {
    if (a3 < 8)
    {
      v3 = 0;
LABEL_7:
      v9 = a3 - v3;
      v10 = v3;
      v11 = &a1->f32[v3];
      v12 = &a2->i32[v10];
      do
      {
        v13 = *v12++;
        v7.f32[0] = (float)v13;
        *v11++ = (float)v13;
        --v9;
      }
      while (v9);
      return v7.f32[0];
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v4 = a2 + 1;
    v5 = a1 + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v7 = vcvtq_f32_s32(v4[-1]);
      v8 = vcvtq_f32_s32(*v4);
      v5[-1] = v7;
      *v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return v7.f32[0];
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_iEEvPT_PKT0_m@<H0>(float16x8_t *a1@<X0>, int32x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  unint64_t v3;
  int32x4_t *v4;
  float16x8_t *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  float16x8_t v11;
  unint64_t v13;
  __int16 *v14;
  int *v15;
  int v16;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v13 = a3 - v3;
      v14 = &a1->i16[v3];
      v15 = &a2->i32[v3];
      do
      {
        v16 = *v15++;
        *(float *)_Q0.i32 = (float)v16;
        __asm { FCVT            H0, S0 }
        *v14++ = _Q0.i16[0];
        --v13;
      }
      while (v13);
      return _Q0.i16[0];
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = a1 + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v8 = v4[-2];
      v7 = v4[-1];
      v10 = *v4;
      v9 = v4[1];
      v4 += 4;
      v11 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v8)), vcvtq_f32_s32(v7));
      _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v10)), vcvtq_f32_s32(v9));
      v5[-1] = v11;
      *v5 = _Q0;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return _Q0.i16[0];
}

unint64_t E5RT::ElementwiseOpCast<unsigned char,int>(unint64_t result, int8x16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  int *v6;
  int v7;
  int8x16x4_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  unint64_t v11;
  int8x16x2_t *v12;
  _QWORD *v13;
  unint64_t v14;
  int8x16x2_t v15;
  int8x16x4_t v16;

  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 4 * a3 > result && result + a3 > (unint64_t)a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = a2 + 1;
      v9 = (int8x16_t *)(result + 16);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v8;
        v9[-1] = vqtbl4q_s8(v8[-1], (int8x16_t)xmmword_191A741D0);
        *v9 = vqtbl4q_s8(v16, (int8x16_t)xmmword_191A741D0);
        v8 += 2;
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_BYTE *)(result + v3);
        v6 = (int *)a2 + v3;
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v11 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v12 = (int8x16x2_t *)((char *)a2 + 4 * v11);
    v13 = (_QWORD *)(result + v11);
    v14 = v11 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v15 = *v12++;
      *v13++ = vqtbl2q_s8(v15, (int8x16_t)xmmword_191A741E0).u64[0];
      v14 += 8;
    }
    while (v14);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

unint64_t E5RT::ElementwiseOpCast<signed char,int>(unint64_t result, int8x16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  int *v6;
  int v7;
  int8x16x4_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  unint64_t v11;
  int8x16x2_t *v12;
  _QWORD *v13;
  unint64_t v14;
  int8x16x2_t v15;
  int8x16x4_t v16;

  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 4 * a3 > result && result + a3 > (unint64_t)a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = a2 + 1;
      v9 = (int8x16_t *)(result + 16);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v8;
        v9[-1] = vqtbl4q_s8(v8[-1], (int8x16_t)xmmword_191A741D0);
        *v9 = vqtbl4q_s8(v16, (int8x16_t)xmmword_191A741D0);
        v8 += 2;
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return result;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_BYTE *)(result + v3);
        v6 = (int *)a2 + v3;
        do
        {
          v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      v3 = 0;
    }
    v11 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v12 = (int8x16x2_t *)((char *)a2 + 4 * v11);
    v13 = (_QWORD *)(result + v11);
    v14 = v11 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v15 = *v12++;
      *v13++ = vqtbl2q_s8(v15, (int8x16_t)xmmword_191A741E0).u64[0];
      v14 += 8;
    }
    while (v14);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<unsigned int,int>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int v12;

  if (a3)
  {
    v3 = 0;
    if (a3 < 8)
      goto LABEL_7;
    if ((unint64_t)(result - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(result + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v8 = a3 - v3;
      v9 = 4 * v3;
      v10 = (_DWORD *)(result + 4 * v3);
      v11 = (int *)(a2 + v9);
      do
      {
        v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<int,int>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int v12;

  if (a3)
  {
    v3 = 0;
    if (a3 < 8)
      goto LABEL_7;
    if ((unint64_t)(result - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(result + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v8 = a3 - v3;
      v9 = 4 * v3;
      v10 = (_DWORD *)(result + 4 * v3);
      v11 = (int *)(a2 + v9);
      do
      {
        v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

int16x8_t *E5RT::ElementwiseOpCast<unsigned short,int>(int16x8_t *result, int16x8_t *a2, unint64_t a3)
{
  unint64_t v3;
  int16x8_t *v4;
  int16x8_t *v5;
  unint64_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  unint64_t v11;
  __int16 *v12;
  __int32 *v13;
  int v14;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v11 = a3 - v3;
      v12 = &result->i16[v3];
      v13 = &a2->i32[v3];
      do
      {
        v14 = *v13++;
        *v12++ = v14;
        --v11;
      }
      while (v11);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = result + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v8 = v4[-2];
      v7 = v4[-1];
      v10 = *v4;
      v9 = v4[1];
      v4 += 4;
      v5[-1] = vuzp1q_s16(v8, v7);
      *v5 = vuzp1q_s16(v10, v9);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return result;
}

int16x8_t *E5RT::ElementwiseOpCast<short,int>(int16x8_t *result, int16x8_t *a2, unint64_t a3)
{
  unint64_t v3;
  int16x8_t *v4;
  int16x8_t *v5;
  unint64_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  unint64_t v11;
  __int16 *v12;
  __int32 *v13;
  int v14;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v11 = a3 - v3;
      v12 = &result->i16[v3];
      v13 = &a2->i32[v3];
      do
      {
        v14 = *v13++;
        *v12++ = v14;
        --v11;
      }
      while (v11);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = result + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v8 = v4[-2];
      v7 = v4[-1];
      v10 = *v4;
      v9 = v4[1];
      v4 += 4;
      v5[-1] = vuzp1q_s16(v8, v7);
      *v5 = vuzp1q_s16(v10, v9);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return result;
}

void std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD9E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD9E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75650)
    return a1 + 8;
  if (((v3 & 0x8000000191A75650 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75650))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75650 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD460;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD460;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A756D2)
    return a1 + 8;
  if (((v3 & 0x8000000191A756D2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A756D2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A756D2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKimE;
}

void std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADCA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADCA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75754)
    return a1 + 8;
  if (((v3 & 0x8000000191A75754 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75754))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75754 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD720;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD720;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A757CELL)
    return a1 + 8;
  if (((v3 & 0x8000000191A757CELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A757CELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A757CELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE220;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE220;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75848)
    return a1 + 8;
  if (((v3 & 0x8000000191A75848 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75848))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75848 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADF60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADF60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A758C2)
    return a1 + 8;
  if (((v3 & 0x8000000191A758C2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A758C2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A758C2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE7A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE7A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A7593CLL)
    return a1 + 8;
  if (((v3 & 0x8000000191A7593CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A7593CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A7593CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE4E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE4E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A759B6)
    return a1 + 8;
  if (((v3 & 0x8000000191A759B6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A759B6))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A759B6 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::target_type()
{
}

void E5RT::ElementwiseOpCast<float,unsigned short>(float *__C, unsigned __int16 *__A, vDSP_Length __N)
{
  vDSP_vfltu16(__A, 1, __C, 1, __N);
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_tEEvPT_PKT0_m@<H0>(float16x8_t *a1@<X0>, uint16x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  unint64_t v3;
  uint16x4_t *v4;
  float16x8_t *v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  __int16 *v10;
  uint16x4_t *v11;
  unsigned int v12;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v8 = a3 - v3;
      v9 = 2 * v3;
      v10 = &a1->i16[v3];
      v11 = (uint16x4_t *)((char *)a2 + v9);
      do
      {
        v12 = v11->u16[0];
        v11 = (uint16x4_t *)((char *)v11 + 2);
        *(float *)_Q0.i32 = (float)v12;
        __asm { FCVT            H0, S0 }
        *v10++ = _Q0.i16[0];
        --v8;
      }
      while (v8);
      return _Q0.i16[0];
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = a1 + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*v4))), vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v4->i8)));
      v5[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(v4[-2]))), vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v4[-2].i8)));
      *v5 = _Q0;
      v4 += 4;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return _Q0.i16[0];
}

double E5RT::ElementwiseOpCast<unsigned char,unsigned short>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  char *v6;
  char v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t v16;
  int16x8_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int16x8_t v20;

  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (int8x16_t *)(a2 + 32);
      v9 = (int8x16_t *)(a1 + 16);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v12 = v8[-2];
        v11 = v8[-1];
        v14 = *v8;
        v13 = v8[1];
        v8 += 4;
        v15 = vuzp1q_s8(v12, v11);
        v9[-1] = v15;
        *v9 = vuzp1q_s8(v14, v13);
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return *(double *)v15.i64;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_BYTE *)(a1 + v3);
        v6 = (char *)(a2 + 2 * v3);
        do
        {
          v7 = *v6;
          v6 += 2;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return *(double *)v15.i64;
      }
    }
    else
    {
      v3 = 0;
    }
    v16 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v17 = (int16x8_t *)(a2 + 2 * v16);
    v18 = (_QWORD *)(a1 + v16);
    v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      *(int8x8_t *)v15.i8 = vmovn_s16(v20);
      *v18++ = v15.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3)
      goto LABEL_6;
  }
  return *(double *)v15.i64;
}

double E5RT::ElementwiseOpCast<signed char,unsigned short>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  char *v6;
  char v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t v16;
  int16x8_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int16x8_t v20;

  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (int8x16_t *)(a2 + 32);
      v9 = (int8x16_t *)(a1 + 16);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v12 = v8[-2];
        v11 = v8[-1];
        v14 = *v8;
        v13 = v8[1];
        v8 += 4;
        v15 = vuzp1q_s8(v12, v11);
        v9[-1] = v15;
        *v9 = vuzp1q_s8(v14, v13);
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return *(double *)v15.i64;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_BYTE *)(a1 + v3);
        v6 = (char *)(a2 + 2 * v3);
        do
        {
          v7 = *v6;
          v6 += 2;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return *(double *)v15.i64;
      }
    }
    else
    {
      v3 = 0;
    }
    v16 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v17 = (int16x8_t *)(a2 + 2 * v16);
    v18 = (_QWORD *)(a1 + v16);
    v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      *(int8x8_t *)v15.i8 = vmovn_s16(v20);
      *v18++ = v15.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3)
      goto LABEL_6;
  }
  return *(double *)v15.i64;
}

uint32x4_t *E5RT::ElementwiseOpCast<unsigned int,unsigned short>(uint32x4_t *result, uint16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint16x4_t *v4;
  uint32x4_t *v5;
  unint64_t v6;
  uint16x8_t v7;
  uint32x4_t v8;
  uint32x4_t v9;
  unint64_t v10;
  __int32 *v11;
  unsigned __int16 *v12;
  int v13;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v10 = a3 - v3;
      v11 = &result->i32[v3];
      v12 = (unsigned __int16 *)a2 + v3;
      do
      {
        v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = result + 2;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v7 = *(uint16x8_t *)v4[-2].i8;
      v8 = vmovl_u16(*v4);
      v9 = vmovl_high_u16(*(uint16x8_t *)v4->i8);
      v5[-2] = vmovl_u16(*(uint16x4_t *)v7.i8);
      v5[-1] = vmovl_high_u16(v7);
      *v5 = v8;
      v5[1] = v9;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return result;
}

uint32x4_t *E5RT::ElementwiseOpCast<int,unsigned short>(uint32x4_t *result, uint16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint16x4_t *v4;
  uint32x4_t *v5;
  unint64_t v6;
  uint16x8_t v7;
  uint32x4_t v8;
  uint32x4_t v9;
  unint64_t v10;
  __int32 *v11;
  unsigned __int16 *v12;
  int v13;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v10 = a3 - v3;
      v11 = &result->i32[v3];
      v12 = (unsigned __int16 *)a2 + v3;
      do
      {
        v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = result + 2;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v7 = *(uint16x8_t *)v4[-2].i8;
      v8 = vmovl_u16(*v4);
      v9 = vmovl_high_u16(*(uint16x8_t *)v4->i8);
      v5[-2] = vmovl_u16(*(uint16x4_t *)v7.i8);
      v5[-1] = vmovl_high_u16(v7);
      *v5 = v8;
      v5[1] = v9;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<unsigned short,unsigned short>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _WORD *v10;
  __int16 *v11;
  __int16 v12;

  if (a3)
  {
    v3 = 0;
    if (a3 < 0x10)
      goto LABEL_7;
    if ((unint64_t)(result - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(result + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v8 = a3 - v3;
      v9 = 2 * v3;
      v10 = (_WORD *)(result + 2 * v3);
      v11 = (__int16 *)(a2 + v9);
      do
      {
        v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<short,unsigned short>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _WORD *v10;
  __int16 *v11;
  __int16 v12;

  if (a3)
  {
    v3 = 0;
    if (a3 < 0x10)
      goto LABEL_7;
    if ((unint64_t)(result - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(result + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v8 = a3 - v3;
      v9 = 2 * v3;
      v10 = (_WORD *)(result + 2 * v3);
      v11 = (__int16 *)(a2 + v9);
      do
      {
        v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADAE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADAE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75A30)
    return a1 + 8;
  if (((v3 & 0x8000000191A75A30 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75A30))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75A30 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD568;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD568;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75AB2)
    return a1 + 8;
  if (((v3 & 0x8000000191A75AB2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75AB2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75AB2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKtmE;
}

void std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADDA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADDA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75B34)
    return a1 + 8;
  if (((v3 & 0x8000000191A75B34 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75B34))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75B34 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD828;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD828;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75BAELL)
    return a1 + 8;
  if (((v3 & 0x8000000191A75BAELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75BAELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75BAELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE328;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75C28)
    return a1 + 8;
  if (((v3 & 0x8000000191A75C28 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75C28))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75C28 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE068;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE068;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75CA2)
    return a1 + 8;
  if (((v3 & 0x8000000191A75CA2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75CA2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75CA2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE8A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE8A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75D1CLL)
    return a1 + 8;
  if (((v3 & 0x8000000191A75D1CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75D1CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75D1CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE5E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE5E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75D96)
    return a1 + 8;
  if (((v3 & 0x8000000191A75D96 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75D96))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75D96 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::target_type()
{
}

void E5RT::ElementwiseOpCast<float,short>(float *__C, __int16 *__A, vDSP_Length __N)
{
  vDSP_vflt16(__A, 1, __C, 1, __N);
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_sEEvPT_PKT0_m@<H0>(float16x8_t *a1@<X0>, int16x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  unint64_t v3;
  int16x4_t *v4;
  float16x8_t *v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  __int16 *v10;
  int16x4_t *v11;
  int v12;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v8 = a3 - v3;
      v9 = 2 * v3;
      v10 = &a1->i16[v3];
      v11 = (int16x4_t *)((char *)a2 + v9);
      do
      {
        v12 = v11->i16[0];
        v11 = (int16x4_t *)((char *)v11 + 2);
        *(float *)_Q0.i32 = (float)v12;
        __asm { FCVT            H0, S0 }
        *v10++ = _Q0.i16[0];
        --v8;
      }
      while (v8);
      return _Q0.i16[0];
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = a1 + 1;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*v4))), vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v4->i8)));
      v5[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(v4[-2]))), vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v4[-2].i8)));
      *v5 = _Q0;
      v4 += 4;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return _Q0.i16[0];
}

double E5RT::ElementwiseOpCast<unsigned char,short>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  char *v6;
  char v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t v16;
  int16x8_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int16x8_t v20;

  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (int8x16_t *)(a2 + 32);
      v9 = (int8x16_t *)(a1 + 16);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v12 = v8[-2];
        v11 = v8[-1];
        v14 = *v8;
        v13 = v8[1];
        v8 += 4;
        v15 = vuzp1q_s8(v12, v11);
        v9[-1] = v15;
        *v9 = vuzp1q_s8(v14, v13);
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return *(double *)v15.i64;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_BYTE *)(a1 + v3);
        v6 = (char *)(a2 + 2 * v3);
        do
        {
          v7 = *v6;
          v6 += 2;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return *(double *)v15.i64;
      }
    }
    else
    {
      v3 = 0;
    }
    v16 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v17 = (int16x8_t *)(a2 + 2 * v16);
    v18 = (_QWORD *)(a1 + v16);
    v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      *(int8x8_t *)v15.i8 = vmovn_s16(v20);
      *v18++ = v15.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3)
      goto LABEL_6;
  }
  return *(double *)v15.i64;
}

double E5RT::ElementwiseOpCast<signed char,short>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  char *v6;
  char v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t v16;
  int16x8_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int16x8_t v20;

  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      v8 = (int8x16_t *)(a2 + 32);
      v9 = (int8x16_t *)(a1 + 16);
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v12 = v8[-2];
        v11 = v8[-1];
        v14 = *v8;
        v13 = v8[1];
        v8 += 4;
        v15 = vuzp1q_s8(v12, v11);
        v9[-1] = v15;
        *v9 = vuzp1q_s8(v14, v13);
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3)
        return *(double *)v15.i64;
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        v4 = a3 - v3;
        v5 = (_BYTE *)(a1 + v3);
        v6 = (char *)(a2 + 2 * v3);
        do
        {
          v7 = *v6;
          v6 += 2;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return *(double *)v15.i64;
      }
    }
    else
    {
      v3 = 0;
    }
    v16 = v3;
    v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    v17 = (int16x8_t *)(a2 + 2 * v16);
    v18 = (_QWORD *)(a1 + v16);
    v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      *(int8x8_t *)v15.i8 = vmovn_s16(v20);
      *v18++ = v15.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3)
      goto LABEL_6;
  }
  return *(double *)v15.i64;
}

int32x4_t *E5RT::ElementwiseOpCast<unsigned int,short>(int32x4_t *result, int16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  int16x4_t *v4;
  int32x4_t *v5;
  unint64_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  unint64_t v10;
  __int32 *v11;
  __int16 *v12;
  int v13;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v10 = a3 - v3;
      v11 = &result->i32[v3];
      v12 = (__int16 *)a2 + v3;
      do
      {
        v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = result + 2;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v7 = *(int16x8_t *)v4[-2].i8;
      v8 = vmovl_s16(*v4);
      v9 = vmovl_high_s16(*(int16x8_t *)v4->i8);
      v5[-2] = vmovl_s16(*(int16x4_t *)v7.i8);
      v5[-1] = vmovl_high_s16(v7);
      *v5 = v8;
      v5[1] = v9;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return result;
}

int32x4_t *E5RT::ElementwiseOpCast<int,short>(int32x4_t *result, int16x4_t *a2, unint64_t a3)
{
  unint64_t v3;
  int16x4_t *v4;
  int32x4_t *v5;
  unint64_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  unint64_t v10;
  __int32 *v11;
  __int16 *v12;
  int v13;

  if (a3)
  {
    if (a3 < 0x10)
    {
      v3 = 0;
LABEL_7:
      v10 = a3 - v3;
      v11 = &result->i32[v3];
      v12 = (__int16 *)a2 + v3;
      do
      {
        v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = a2 + 2;
    v5 = result + 2;
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v7 = *(int16x8_t *)v4[-2].i8;
      v8 = vmovl_s16(*v4);
      v9 = vmovl_high_s16(*(int16x8_t *)v4->i8);
      v5[-2] = vmovl_s16(*(int16x4_t *)v7.i8);
      v5[-1] = vmovl_high_s16(v7);
      *v5 = v8;
      v5[1] = v9;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
      goto LABEL_7;
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<unsigned short,short>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _WORD *v10;
  __int16 *v11;
  __int16 v12;

  if (a3)
  {
    v3 = 0;
    if (a3 < 0x10)
      goto LABEL_7;
    if ((unint64_t)(result - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(result + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v8 = a3 - v3;
      v9 = 2 * v3;
      v10 = (_WORD *)(result + 2 * v3);
      v11 = (__int16 *)(a2 + v9);
      do
      {
        v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t E5RT::ElementwiseOpCast<short,short>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __int128 *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _WORD *v10;
  __int16 *v11;
  __int16 v12;

  if (a3)
  {
    v3 = 0;
    if (a3 < 0x10)
      goto LABEL_7;
    if ((unint64_t)(result - a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    v4 = (__int128 *)(a2 + 16);
    v5 = (_OWORD *)(result + 16);
    v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v8 = a3 - v3;
      v9 = 2 * v3;
      v10 = (_WORD *)(result + 2 * v3);
      v11 = (__int16 *)(a2 + v9);
      do
      {
        v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADA90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADA90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75E10)
    return a1 + 8;
  if (((v3 & 0x8000000191A75E10 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75E10))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75E10 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_ED0Ev()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *_ZNKSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD510;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD510;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75E92)
    return a1 + 8;
  if (((v3 & 0x8000000191A75E92 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75E92))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75E92 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKsmE;
}

void std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DADD50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DADD50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75F14)
    return a1 + 8;
  if (((v3 & 0x8000000191A75F14 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75F14))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75F14 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD7D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD7D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A75F8ELL)
    return a1 + 8;
  if (((v3 & 0x8000000191A75F8ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A75F8ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A75F8ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE2D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE2D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A76008)
    return a1 + 8;
  if (((v3 & 0x8000000191A76008 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A76008))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A76008 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE010;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE010;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A76082)
    return a1 + 8;
  if (((v3 & 0x8000000191A76082 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A76082))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A76082 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE850;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE850;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A760FCLL)
    return a1 + 8;
  if (((v3 & 0x8000000191A760FCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A760FCLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A760FCLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAE590;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAE590;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A76176)
    return a1 + 8;
  if (((v3 & 0x8000000191A76176 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A76176))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A76176 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::target_type()
{
}

void E5RT::Ops::CpuInferenceOperation::~CpuInferenceOperation(E5RT::Ops::CpuInferenceOperation *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2D5B778;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);
  }
  else
  {
LABEL_5:
    E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2D5B778;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);
  JUMPOUT(0x19401CD90);
}

void *sub_190F1A8E8(E5RT::IOPortImpl **a1)
{
  void *PortDescriptorRef;
  void *result;
  void *exception;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(a1);
  result = E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef);
  if (result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "CheckPortIsSupported");
    std::string::basic_string[abi:ne180100]<0>(v4, "Input port cannot be converted to BNNS tensor descriptor");
    E5RT::Status::Status(v5, 1, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return result;
}

void sub_190F1A98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void **std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void E5RT::Ops::BnnsCpuInferenceOperation::Impl::~Impl(E5RT::Ops::BnnsCpuInferenceOperation::Impl *this)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void **v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  if (*((_QWORD *)this + 5))
    BNNSGraphContextDestroy_v2();
  v2 = (void **)*((_QWORD *)this + 40);
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_13;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_13:
  v7 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v7)
    operator delete(v7);
  v8 = (void **)*((_QWORD *)this + 35);
  if (v8)
  {
    do
    {
      v17 = (void **)*v8;
      if (*((char *)v8 + 63) < 0)
      {
        operator delete(v8[5]);
        if (*((char *)v8 + 39) < 0)
LABEL_34:
          operator delete(v8[2]);
      }
      else if (*((char *)v8 + 39) < 0)
      {
        goto LABEL_34;
      }
      operator delete(v8);
      v8 = v17;
    }
    while (v17);
  }
  v9 = (void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v9)
    operator delete(v9);
  v10 = (void *)*((_QWORD *)this + 30);
  if (v10)
  {
    *((_QWORD *)this + 31) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 27);
  if (v11)
  {
    *((_QWORD *)this + 28) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 24);
  if (v12)
  {
    *((_QWORD *)this + 25) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 21);
  if (v13)
  {
    *((_QWORD *)this + 22) = v13;
    operator delete(v13);
  }
  v14 = *((_QWORD *)this + 18);
  if (v14)
  {
    v15 = *((_QWORD *)this + 19);
    v16 = (void *)*((_QWORD *)this + 18);
    if (v15 != v14)
    {
      do
      {
        v18 = *(std::__shared_weak_count **)(v15 - 8);
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 19) = v14;
    operator delete(v16);
  }
  v21 = (void *)*((_QWORD *)this + 15);
  if (v21)
  {
    *((_QWORD *)this + 16) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 12);
  if (v22)
  {
    *((_QWORD *)this + 13) = v22;
    operator delete(v22);
  }
  v23 = *((_QWORD *)this + 7);
  if (v23)
  {
    v24 = *((_QWORD *)this + 8);
    v25 = (void *)*((_QWORD *)this + 7);
    if (v24 != v23)
    {
      do
      {
        if (*(char *)(v24 - 1) < 0)
          operator delete(*(void **)(v24 - 24));
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v23;
    operator delete(v25);
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeBnnsGraphContextBasedOnE5InputPorts(E5RT::Ops::BnnsCpuInferenceOperation::Impl *this, int a2, int a3)
{
  E5RT::Ops::BnnsCpuInferenceOperation::Impl *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  E5RT::TensorDescriptor *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  size_t v12;
  std::string::size_type v13;
  std::string *p_dst;
  uint64_t v15;
  uint64_t v16;
  E5RT::Ops::BnnsCpuInferenceOperation::Impl *v17;
  void **v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t Rank;
  uint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  _QWORD *v35;
  void **v36;
  unint64_t v37;
  uint64_t v38;
  int8x16_t *v39;
  uint64_t v40;
  int8x16_t *v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t result;
  unint64_t v48;
  uint64_t v49;
  E5RT::IOPortImpl **v50;
  void *PortDescriptorRef;
  E5RT::TensorDescriptor *v52;
  E5RT::TensorDescriptor *v53;
  uint64_t v54;
  int8x16_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int8x16_t *v64;
  int8x16_t *v65;
  uint64_t v66;
  int64x2_t v67;
  int8x16_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int8x16_t *v80;
  int8x16_t *v81;
  uint64_t v82;
  int8x16_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  std::string::size_type v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  E5RT::TensorDescriptor *v91;
  uint64_t TensorShape;
  uint64_t v93;
  unint64_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  const void *v98;
  int64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  int8x16_t v116;
  int32x4_t v117;
  _QWORD *v118;
  unint64_t v119;
  int32x4_t v120;
  int32x4_t v121;
  uint32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int16x4_t v125;
  int32x4_t v126;
  std::string::size_type v127;
  _QWORD *v128;
  std::string::size_type v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::string::size_type v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  E5RT::TensorDescriptor *v139;
  char **TensorStrides;
  unsigned int ComponentSize;
  const char *v142;
  size_t v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  void *exception;
  void *v154;
  int v155;
  uint64_t v158;
  __int128 v159;
  E5RT::TensorDescriptor *v160;
  std::string::size_type v161;
  E5RT::TensorDescriptor *v162;
  std::string::size_type size;
  uint64_t v164;
  std::__shared_weak_count *v165;
  E5RT::TensorDataType::Impl *v166[2];
  std::string::size_type v167;
  void *__p[2];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  std::string __dst;

  v3 = this;
  if (*((_QWORD *)this + 13) != *((_QWORD *)this + 12))
  {
    v4 = 0;
    v5 = &__p[1];
    v6 = 16;
    do
    {
      E5RT::IOPort::GetPortDescriptor(*(E5RT::IOPort **)(*((_QWORD *)v3 + 18) + 16 * v4), __p);
      v7 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(__p[0]);
      v8 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v9 = (unint64_t *)((char *)__p[1] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (!v7)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "ReshapeBnnsGraphContextBasedOnE5InputPorts");
        std::string::basic_string[abi:ne180100]<0>(&__dst, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
        E5RT::Status::Status(v166, 6, &__dst);
        E5RT::E5RTError::E5RTError(exception, __p, v166);
      }
      v177 = 0u;
      v178 = 0u;
      v175 = 0u;
      v176 = 0u;
      v173 = 0u;
      v174 = 0u;
      v171 = 0u;
      v172 = 0u;
      v169 = 0u;
      v170 = 0u;
      *(_OWORD *)__p = 0u;
      v11 = *(const char **)(*((_QWORD *)v3 + 21) + 8 * v4);
      v12 = strlen(v11);
      if (v12 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v13 = v12;
      if (v12 >= 0x17)
      {
        v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v15 = v12 | 7;
        v16 = v6;
        v17 = v3;
        v18 = v5;
        v19 = v15 + 1;
        p_dst = (std::string *)operator new(v15 + 1);
        v20 = v19 | 0x8000000000000000;
        v5 = v18;
        v3 = v17;
        v6 = v16;
        __dst.__r_.__value_.__l.__size_ = v13;
        __dst.__r_.__value_.__r.__words[2] = v20;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
        p_dst = &__dst;
        if (!v12)
          goto LABEL_18;
      }
      memmove(p_dst, v11, v13);
LABEL_18:
      p_dst->__r_.__value_.__s.__data_[v13] = 0;
      sub_190F1BD3C((uint64_t)__p, v7);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v21 = (_OWORD *)(*((_QWORD *)v3 + 12) + 176 * v4);
      v22 = *(_OWORD *)__p;
      v23 = v170;
      v21[1] = v169;
      v21[2] = v23;
      *v21 = v22;
      v24 = v171;
      v25 = v172;
      v26 = v174;
      v21[5] = v173;
      v21[6] = v26;
      v21[3] = v24;
      v21[4] = v25;
      v27 = v175;
      v28 = v176;
      v29 = v178;
      v21[9] = v177;
      v21[10] = v29;
      v21[7] = v27;
      v21[8] = v28;
      *(_QWORD *)(*((_QWORD *)v3 + 24) + 16 * v4) = E5RT::TensorDescriptor::GetRank(v7);
      Rank = E5RT::TensorDescriptor::GetRank(v7);
      v31 = *((_QWORD *)v3 + 27);
      v32 = v31 + (v4 << 6);
      v33.i64[0] = -1;
      v33.i64[1] = -1;
      if (Rank)
      {
        v34 = (Rank - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v35 = (_QWORD *)(v31 + (v4 << 6));
        v36 = v5;
        if (v34 < 3)
          goto LABEL_174;
        v37 = v34 + 1;
        v38 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        v35 = (_QWORD *)(v32 + v38 * 8);
        v36 = &v5[v38];
        v39 = (int8x16_t *)(v31 + v6);
        v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        v41 = (int8x16_t *)((char *)&v169 + 8);
        do
        {
          v42 = vbicq_s8(*v41, (int8x16_t)vceqq_s64(*(int64x2_t *)v41, v33));
          v39[-1] = vbicq_s8(v41[-1], (int8x16_t)vceqq_s64((int64x2_t)v41[-1], v33));
          *v39 = v42;
          v41 += 2;
          v39 += 2;
          v40 -= 4;
        }
        while (v40);
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_174:
          do
          {
            v44 = (uint64_t)*v36++;
            v43 = v44;
            if (v44 == -1)
              v43 = 0;
            *v35++ = v43;
          }
          while (v36 != &v5[Rank]);
        }
      }
      *(_QWORD *)(*((_QWORD *)v3 + 24) + 16 * v4++ + 8) = v32;
      v6 += 64;
    }
    while (v4 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)v3 + 13) - *((_QWORD *)v3 + 12)) >> 4));
  }
  v155 = BNNSGraphContextSetDynamicShapes_v2();
  if (v155 < 0)
  {
    v152 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "ReshapeBnnsGraphContextBasedOnE5InputPorts");
    E5Common::StringUtils::SummarizeBNNSErrorMessages("Error(s) occurred reshaping a BNNS Op:\n", (uint64_t *)v3 + 7, &__dst);
    E5RT::Status::Status(v166, 11, &__dst);
    E5RT::E5RTError::E5RTError(v152, __p, v166);
  }
  v45 = *((_QWORD *)v3 + 7);
  for (i = *((_QWORD *)v3 + 8); i != v45; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  *((_QWORD *)v3 + 8) = v45;
  result = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v3);
  if (*(_QWORD *)(result + 24))
  {
    v48 = 0;
    v49 = 24;
    do
    {
      v50 = *(E5RT::IOPortImpl ***)(*((_QWORD *)v3 + 18) + 16 * v48);
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(v50);
      v52 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      if (!v52)
      {
        v154 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "ReshapeBnnsGraphContextBasedOnE5InputPorts");
        std::string::basic_string[abi:ne180100]<0>(&__dst, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
        E5RT::Status::Status(v166, 6, &__dst);
        E5RT::E5RTError::E5RTError(v154, __p, v166);
      }
      v53 = v52;
      v54 = *((_QWORD *)v3 + 12);
      v55 = *(int8x16_t **)(*((_QWORD *)v3 + 24) + 16 * v48 + 8);
      v56 = E5RT::TensorDescriptor::GetRank(v52);
      v57 = v54 + 176 * v48;
      v58 = (uint64_t *)(v57 + 8);
      if (v56)
      {
        v59 = (v56 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v60 = (uint64_t *)(v57 + 8);
        v61 = (uint64_t *)v55;
        if (v59 < 3)
          goto LABEL_175;
        v62 = v59 + 1;
        v63 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        v60 = &v58[v63];
        v61 = &v55->i64[v63];
        v64 = v55 + 1;
        v65 = (int8x16_t *)(v54 + v49);
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        v67.i64[0] = -1;
        v67.i64[1] = -1;
        do
        {
          v68 = vbicq_s8(*v64, (int8x16_t)vceqq_s64(*(int64x2_t *)v64, v67));
          v65[-1] = vbicq_s8(v64[-1], (int8x16_t)vceqq_s64((int64x2_t)v64[-1], v67));
          *v65 = v68;
          v64 += 2;
          v65 += 2;
          v66 -= 4;
        }
        while (v66);
        if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_175:
          do
          {
            v70 = *v61++;
            v69 = v70;
            if (v70 == -1)
              v69 = 0;
            *v60++ = v69;
          }
          while (v61 != (uint64_t *)((char *)v55 + 8 * v56));
        }
      }
      v158 = v49;
      E5RT::TensorDescriptor::GetTensorDataType(v53, (E5RT::TensorDataType *)v166);
      v71 = E5RT::TensorDescriptor::GetRank(v53);
      v72 = v71;
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v169 = 0;
      if (v71)
      {
        if (v71 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v73 = v71;
        v74 = (uint64_t *)operator new(8 * v71);
        __p[0] = v74;
        *(_QWORD *)&v169 = &v74[v73];
        bzero(v74, 8 * v72);
        __p[1] = &v74[v73];
        v75 = (v72 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v75 >= 5)
        {
          v76 = v58;
          if ((unint64_t)v74 - ((176 * v48) | 8) - v54 >= 0x20)
          {
            v77 = v75 + 1;
            v78 = v77 & 0x3FFFFFFFFFFFFFFCLL;
            v76 = &v58[v78];
            v79 = &v74[v78];
            v80 = (int8x16_t *)(v74 + 2);
            v81 = (int8x16_t *)(v54 + v49);
            v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v83 = vorrq_s8(*v81, (int8x16_t)vceqzq_s64(*(int64x2_t *)v81));
              v80[-1] = vorrq_s8(v81[-1], (int8x16_t)vceqzq_s64((int64x2_t)v81[-1]));
              *v80 = v83;
              v80 += 2;
              v81 += 2;
              v82 -= 4;
            }
            while (v82);
            v74 = v79;
            if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_58;
          }
        }
        else
        {
          v76 = v58;
        }
        do
        {
          v85 = *v76++;
          v84 = v85;
          if (!v85)
            v84 = -1;
          *v74++ = v84;
        }
        while (v76 != &v58[v73]);
      }
LABEL_58:
      E5RT::TensorDescriptor::CreateTensorDesc(v166, (uint64_t *)__p, &v167);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __dst.__r_.__value_.__r.__words[0] = v167;
      if (v167)
      {
        v86 = (_QWORD *)operator new();
        v87 = v167;
        *v86 = &unk_1E2DC3270;
        v86[1] = 0;
        v86[2] = 0;
        v86[3] = v87;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v86;
        v167 = 0;
        E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v166);
        if (v50)
          goto LABEL_64;
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
        v167 = 0;
        E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v166);
        if (v50)
        {
LABEL_64:
          if (*v50 == (E5RT::IOPortImpl *)&off_1E2D59AC8)
            goto LABEL_66;
        }
      }
      v50 = 0;
LABEL_66:
      if (a3)
      {
        E5RT::IOPortPriv::LockPort((E5RT::IOPortPriv *)v50, 0);
        v164 = 0;
        v165 = 0;
        E5RT::IOPortPriv::BindMemoryObject((uint64_t)v50, (uint64_t)&v164, 0);
        v88 = v165;
        if (v165)
        {
          p_shared_owners = (unint64_t *)&v165->__shared_owners_;
          do
            v90 = __ldaxr(p_shared_owners);
          while (__stlxr(v90 - 1, p_shared_owners));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
      }
      v91 = (E5RT::TensorDescriptor *)__dst.__r_.__value_.__r.__words[0];
      TensorShape = E5RT::TensorDescriptor::GetTensorShape((E5RT::TensorDescriptor *)__dst.__r_.__value_.__l.__data_);
      v93 = E5RT::TensorDescriptor::GetTensorShape(v53);
      v94 = v48 + 1;
      v95 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
      if (v95 == *(_QWORD *)(v93 + 8) - *(_QWORD *)v93
        && !memcmp(*(const void **)TensorShape, *(const void **)v93, v95))
      {
        goto LABEL_144;
      }
      if (!v155)
      {
        v162 = v91;
        size = __dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v105 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
        }
        E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v50, (uint64_t *)&v162);
        v107 = (std::__shared_weak_count *)size;
        if (!size)
          goto LABEL_91;
        v108 = (unint64_t *)(size + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
          if ((a2 & 1) == 0)
            goto LABEL_144;
        }
        else
        {
LABEL_91:
          if ((a2 & 1) == 0)
            goto LABEL_144;
        }
        v110 = 0;
        goto LABEL_102;
      }
      if (!*(_BYTE *)(*((_QWORD *)v3 + 30) + v48))
      {
        v160 = v91;
        v161 = __dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v111 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
        }
        E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v50, (uint64_t *)&v160);
        v113 = (std::__shared_weak_count *)v161;
        if (!v161)
          goto LABEL_100;
        v114 = (unint64_t *)(v161 + 8);
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
          if (!a2)
            goto LABEL_144;
        }
        else
        {
LABEL_100:
          if (!a2)
            goto LABEL_144;
        }
        v110 = E5RT::TensorDescriptor::HasKnownShape((E5RT::TensorDescriptor *)__dst.__r_.__value_.__l.__data_) ^ 1;
LABEL_102:
        E5RT::IOPortPriv::SetDynamic((E5RT::IOPortPriv *)v50, v110);
        goto LABEL_144;
      }
      if (!a2)
        goto LABEL_144;
      v96 = E5RT::TensorDescriptor::GetTensorShape(v91);
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v169 = 0;
      v98 = *(const void **)v96;
      v97 = *(_QWORD *)(v96 + 8);
      v99 = v97 - *(_QWORD *)v96;
      if (v97 == *(_QWORD *)v96)
        goto LABEL_125;
      if (v99 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v100 = operator new(v99);
      __p[0] = v100;
      __p[1] = v100;
      *(_QWORD *)&v169 = &v100[v99 >> 3];
      memcpy(v100, v98, v99);
      __p[1] = &v100[v99 >> 3];
      v101 = *((_QWORD *)v3 + 30);
      v102 = (unsigned __int8 *)(v101 + v48);
      if ((unint64_t)(v99 >> 3) <= 1)
        v103 = 1;
      else
        v103 = v99 >> 3;
      if (v103 < 8)
      {
        v104 = 0;
        v94 = v48 + 1;
        goto LABEL_121;
      }
      v94 = v48 + 1;
      if ((unint64_t)v100 < v101 + v48 + 1 && v102 < (unsigned __int8 *)&v100[v103])
      {
        v104 = 0;
        goto LABEL_121;
      }
      v104 = v103 & 0xFFFFFFFFFFFFFFFCLL;
      v116.i64[0] = 0xFF000000FFLL;
      v116.i64[1] = 0xFF000000FFLL;
      v117 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vdup_n_s16(*v102)), v116);
      v118 = v100 + 2;
      v119 = v103 & 0xFFFFFFFFFFFFFFFCLL;
      v120 = (int32x4_t)xmmword_191A761E0;
      do
      {
        v122.i64[0] = 0x100000001;
        v122.i64[1] = 0x100000001;
        v123 = (int32x4_t)vshlq_u32(v122, (uint32x4_t)v120);
        if ((vmovn_s32(vtstq_s32(v123, v117)).u8[0] & 1) != 0)
        {
          *(v118 - 2) = -1;
          v124 = (int32x4_t)vandq_s8((int8x16_t)v123, (int8x16_t)v117);
          v125 = vmovn_s32(vtstq_s32(v124, v124));
          if ((v125.i8[2] & 1) == 0)
            goto LABEL_114;
        }
        else
        {
          v126 = (int32x4_t)vandq_s8((int8x16_t)v123, (int8x16_t)v117);
          v125 = vmovn_s32(vtstq_s32(v126, v126));
          if ((v125.i8[2] & 1) == 0)
          {
LABEL_114:
            if ((v125.i8[4] & 1) == 0)
              goto LABEL_119;
            goto LABEL_115;
          }
        }
        *(v118 - 1) = -1;
        if ((v125.i8[4] & 1) == 0)
        {
LABEL_119:
          if ((v125.i8[6] & 1) == 0)
            goto LABEL_111;
          goto LABEL_120;
        }
LABEL_115:
        *v118 = -1;
        if ((v125.i8[6] & 1) == 0)
          goto LABEL_111;
LABEL_120:
        v118[1] = -1;
LABEL_111:
        v121.i64[0] = 0x400000004;
        v121.i64[1] = 0x400000004;
        v120 = vaddq_s32(v120, v121);
        v118 += 4;
        v119 -= 4;
      }
      while (v119);
      while (v103 != v104)
      {
LABEL_121:
        if (((*v102 >> v104) & 1) != 0)
          v100[v104] = -1;
        ++v104;
      }
LABEL_125:
      E5RT::TensorDescriptor::GetTensorDataType(v53, (E5RT::TensorDataType *)v166);
      E5RT::TensorDescriptor::CreateTensorDesc(v166, (uint64_t *)__p, &v167);
      v127 = v167;
      if (v167)
      {
        v128 = (_QWORD *)operator new();
        v129 = v167;
        *v128 = &unk_1E2DC3270;
        v128[1] = 0;
        v128[2] = 0;
        v128[3] = v129;
        v167 = 0;
        v130 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        __dst.__r_.__value_.__r.__words[0] = v127;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v128;
        if (!v130)
          goto LABEL_134;
      }
      else
      {
        v167 = 0;
        v130 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
        if (!v130)
          goto LABEL_134;
      }
      v131 = (unint64_t *)&v130->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (v132)
      {
        v133 = v167;
        v167 = 0;
        if (!v133)
          goto LABEL_134;
        goto LABEL_133;
      }
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
      v133 = v167;
      v167 = 0;
      if (v133)
LABEL_133:
        (*(void (**)(std::string::size_type))(*(_QWORD *)v133 + 8))(v133);
LABEL_134:
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v166);
      v159 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v134 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
      }
      E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v50, (uint64_t *)&v159);
      v136 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
      if (*((_QWORD *)&v159 + 1))
      {
        v137 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      E5RT::IOPortPriv::SetDynamic((E5RT::IOPortPriv *)v50, 1);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
LABEL_144:
      if (a3)
        E5RT::IOPortPriv::LockPort((E5RT::IOPortPriv *)v50, 1);
      v139 = (E5RT::TensorDescriptor *)__dst.__r_.__value_.__r.__words[0];
      TensorStrides = (char **)E5RT::TensorDescriptor::GetTensorStrides((E5RT::TensorDescriptor *)__dst.__r_.__value_.__l.__data_);
      E5RT::TensorDescriptor::GetTensorDataType(v139, (E5RT::TensorDataType *)v166);
      ComponentSize = E5RT::TensorDataType::GetComponentSize(v166);
      v142 = *(const char **)(*((_QWORD *)v3 + 21) + 8 * v48);
      v143 = strlen(v142);
      if (v143 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v144 = (void *)v143;
      if (v143 >= 0x17)
      {
        v146 = v54;
        v147 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v143 | 7) != 0x17)
          v147 = v143 | 7;
        v148 = v147 + 1;
        v145 = operator new(v147 + 1);
        __p[1] = v144;
        *(_QWORD *)&v169 = v148 | 0x8000000000000000;
        __p[0] = v145;
        v54 = v146;
LABEL_153:
        memmove(v145, v142, (size_t)v144);
        goto LABEL_154;
      }
      BYTE7(v169) = v143;
      v145 = __p;
      if (v143)
        goto LABEL_153;
LABEL_154:
      *((_BYTE *)v144 + (_QWORD)v145) = 0;
      sub_190F1C1E4((unint64_t *)(v54 + 176 * v48 + 72), *TensorStrides, TensorStrides[1], ComponentSize);
      if (SBYTE7(v169) < 0)
      {
        operator delete(__p[0]);
        E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v166);
        v149 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (!__dst.__r_.__value_.__l.__size_)
          goto LABEL_37;
      }
      else
      {
        E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v166);
        v149 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (!__dst.__r_.__value_.__l.__size_)
          goto LABEL_37;
      }
      v150 = (unint64_t *)&v149->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
LABEL_37:
      result = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v3);
      v49 = v158 + 176;
      v48 = v94;
    }
    while (v94 < *(_QWORD *)(result + 24));
  }
  return result;
}

void sub_190F1BAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v36;

  v36 = a28;
  a28 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a26);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v34 - 120);
  _Unwind_Resume(a1);
}

unint64_t sub_190F1BD3C(uint64_t a1, E5RT::TensorDescriptor *this)
{
  uint64_t *TensorShape;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  unint64_t v13;
  char **TensorStrides;
  unint64_t result;
  int ComponentSize;
  void *exception;
  std::string *v18;
  __int128 v19;
  void *v20;
  void *v21;
  std::string v22;
  _BYTE v23[8];
  __int128 v24;
  std::string::size_type v25;
  _QWORD v26[3];

  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(this);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  if (E5RT::TensorDescriptor::GetRank(this) >= 9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "TensorDescriptorToBnns");
    std::operator+<char>();
    v18 = std::string::append(&v22, "' is too high rank to use with BNNS");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v25 = v18->__r_.__value_.__r.__words[2];
    v24 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v23, 6, &v24);
    E5RT::E5RTError::E5RTError(exception, v26, v23);
  }
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v6 = *TensorShape;
  if (TensorShape[1] != *TensorShape)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v6 + 8 * v7);
      if (v8 == -1)
        v9 = 0;
      else
        v9 = v8;
      if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) >= 2
        && v7 == E5RT::TensorDescriptor::GetComponentAxis(this))
      {
        v9 *= E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
      }
      *(_QWORD *)(a1 + 8 + 8 * v7++) = v9;
      v6 = *TensorShape;
    }
    while (v7 < (TensorShape[1] - *TensorShape) >> 3);
  }
  switch(E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)TensorDataTypeRef))
  {
    case 0u:
    case 2u:
      LOBYTE(v10) = E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) - 1;
      if (v10 >= 8u || ((0x8Bu >> v10) & 1) == 0)
        goto LABEL_27;
      v10 = (char)v10;
      v11 = "\b";
      goto LABEL_18;
    case 1u:
    case 3u:
      LOBYTE(v10) = E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) - 1;
      if (v10 >= 8u || ((0x8Bu >> v10) & 1) == 0)
        goto LABEL_27;
      v10 = (char)v10;
      v11 = (const char *)&unk_191A762A8;
LABEL_18:
      v12 = *(_DWORD *)&v11[4 * v10];
      break;
    case 4u:
      v12 = 65552;
      ComponentSize = E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef);
      if (ComponentSize == 2)
        break;
      if (ComponentSize != 4)
      {
LABEL_27:
        v20 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v26, "TensorDataTypeToBnns");
        std::string::basic_string[abi:ne180100]<0>(&v24, "Unhandled data type in TensorDataTypeToBnns");
        E5RT::Status::Status(&v22, 6, &v24);
        E5RT::E5RTError::E5RTError(v20, v26, &v22);
      }
      v12 = 65568;
      break;
    default:
      goto LABEL_27;
  }
  *(_DWORD *)(a1 + 144) = v12;
  if ((E5RT::TensorDescriptor::HasKnownShape(this) & 1) != 0)
  {
    v13 = sub_190F1EA90(v12);
    TensorStrides = (char **)E5RT::TensorDescriptor::GetTensorStrides(this);
    sub_190F1C1E4((unint64_t *)(a1 + 72), *TensorStrides, TensorStrides[1], v13);
  }
  result = E5RT::TensorDescriptor::GetRank(this);
  if (result >= 9)
  {
    v21 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "TensorDescriptorToBnns");
    std::string::basic_string[abi:ne180100]<0>(&v24, "Unhandled tensor rank in TensorDescriptorToBnns (this is probably an E5RT defect, please file a radar)");
    E5RT::Status::Status(&v22, 6, &v24);
    E5RT::E5RTError::E5RTError(v21, v26, &v22);
  }
  *(_DWORD *)(a1 + 4) = dword_191A762C8[result];
  return result;
}

void sub_190F1C0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  char v28;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v28 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_190F1C1E4(unint64_t *a1, char *a2, char *a3, unint64_t a4)
{
  int64_t v4;
  char *v6;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *exception;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  __int128 v37;
  std::string::size_type v38;
  char v39[8];
  char v40[24];

  memset(&v29, 0, sizeof(v29));
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = a3;
    v9 = operator new(a3 - a2);
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v29.__r_.__value_.__r.__words[2] = (std::string::size_type)v9 + 8 * (v4 >> 3);
    memcpy(v9, a2, v4);
    v29.__r_.__value_.__l.__size_ = v29.__r_.__value_.__r.__words[2];
    do
    {
      v12 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      v11 = v12;
      if (v12 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v10 = 0x8000000000000000;
      }
      else
      {
        v10 = v11 / a4;
        if (v11 % a4)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          v40[23] = 10;
          strcpy(v40, "operator()");
          std::operator+<char>();
          v14 = std::string::append(&v32, "' strides (");
          v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v33.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          E5Common::StringUtils::IntsVectorToString<long>(&v29, &v31);
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = &v31;
          else
            v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          else
            size = v31.__r_.__value_.__l.__size_;
          v18 = std::string::append(&v33, (const std::string::value_type *)v16, size);
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          v20 = std::string::append(&v34, ") are not a multiple of the element size (");
          v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v30, a4);
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &v30;
          else
            v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
          else
            v23 = v30.__r_.__value_.__l.__size_;
          v24 = std::string::append(&v35, (const std::string::value_type *)v22, v23);
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          v26 = std::string::append(&v36, "). The E5 BNNS backend requires that all strides are a multiple of element size.");
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v38 = v26->__r_.__value_.__r.__words[2];
          v37 = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          E5RT::Status::Status(v39, 2, &v37);
          E5RT::E5RTError::E5RTError(exception, v40, v39);
        }
      }
      *a1++ = v10;
    }
    while (v6 != a2);
    operator delete(v9);
  }
}

void sub_190F1C474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_190F1C624(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE __p[12];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v8 = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v3 = objc_claimAutoreleasedReturnValue();
  if (v8 < 0)
  {
    operator delete(*(void **)__p);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  if (os_signpost_enabled(v3))
  {
    v5 = *(_QWORD *)(v2 + 8);
    v6 = (_QWORD *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v6;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v3, OS_SIGNPOST_INTERVAL_END, v4, "BnnsCpuOpPrepareForEncode", "FunctionName=%{signpost.description:attribute}s ", __p, 0xCu);
  }
LABEL_9:

}

void sub_190F1C744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_190F1C760(uint64_t *a1, __int128 *a2, uint64_t *a3, uint64_t a4)
{
  void *v7;
  void *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  E5RT::SharedResourceManager *v15;
  uint64_t SharedResourceManager;
  void *__p;
  char v18;
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v19[0] = E5Common::kBnnsGraphPrecompiledStrKey[0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v7;
  v19[1] = E5Common::kBnnsGraphFunctionNameStrKey[0];
  v8 = (void *)MEMORY[0x1E0CB3940];
  v9 = *((char *)a3 + 23);
  v10 = (uint64_t *)*a3;
  v11 = objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding");
  if (v9 >= 0)
    v12 = a3;
  else
    v12 = v10;
  objc_msgSend(v8, "stringWithCString:encoding:", v12, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v20[1] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(v15);
  v18 = 0;
  LOBYTE(__p) = 0;
  E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, a2, 2, (uint64_t *)&__p, v14, a1);
  if (v18 < 0)
    operator delete(__p);

}

void sub_190F1C8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<E5RT::SharedResource>::operator=[abi:ne180100](uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)result = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

uint64_t sub_190F1C960(const void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = E5RT::SharedResource::GetResourceHandle<E5Common::AutoResourcePtr &>(a1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  return v2;
}

void sub_190F1C9A4(int a1, char *__s, const std::string::value_type *a3, uint64_t a4)
{
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  std::string *v16;
  NSObject *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  std::string __dst;
  _BYTE __p[12];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = strlen(__s);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (!v8)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (!a3)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  memcpy(p_dst, __s, v9);
  p_dst->__r_.__value_.__s.__data_[v9] = 0;
  if (a3)
  {
LABEL_10:
    std::string::append(&__dst, "\nOp info: ");
    std::string::append(&__dst, a3);
  }
LABEL_11:
  switch(a1)
  {
    case 1:
      v24 = 4;
      strcpy(__p, "e5rt");
      E5RT::GetE5RTLog((uint64_t)__p);
      v15 = objc_claimAutoreleasedReturnValue();
      if (v24 < 0)
        operator delete(*(void **)__p);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v16 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v16;
        _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "[BnnsCpuInferenceOperation]: %s", __p, 0xCu);
      }
      goto LABEL_21;
    case 2:
    case 8:
      v24 = 4;
      strcpy(__p, "e5rt");
      E5RT::GetE5RTLog((uint64_t)__p);
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v24 < 0)
      {
        operator delete(*(void **)__p);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          goto LABEL_29;
      }
      else if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_29;
      }
      sub_190F1F288();
LABEL_29:

      v18 = *(_QWORD *)(a4 + 8);
      v19 = *(_QWORD *)(v18 + 8);
      if (v19 >= *(_QWORD *)(v18 + 16))
      {
        v21 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v18, (uint64_t)&__dst);
      }
      else
      {
        v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(_QWORD *)(v19 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
        *(_OWORD *)v19 = v20;
        memset(&__dst, 0, sizeof(__dst));
        v21 = (char *)(v19 + 24);
      }
      *(_QWORD *)(v18 + 8) = v21;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_33;
      return;
    case 4:
      v24 = 4;
      strcpy(__p, "e5rt");
      E5RT::GetE5RTLog((uint64_t)__p);
      v17 = objc_claimAutoreleasedReturnValue();
      v15 = v17;
      if (v24 < 0)
      {
        operator delete(*(void **)__p);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          goto LABEL_21;
      }
      else if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_21;
      }
      sub_190F1F288();
LABEL_21:

LABEL_22:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_33:
        operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_22;
  }
}

void sub_190F1CCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<char const*>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_190F1CD88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t std::find[abi:ne180100]<std::__wrap_iter<std::string const*>,std::string>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 == a2)
    return v3;
  v5 = *((_BYTE *)a3 + 23);
  if (v5 >= 0)
    v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
  else
    v6 = a3[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a3;
  else
    v7 = *a3;
  do
  {
    v8 = *(unsigned __int8 *)(v3 + 23);
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    else
      v9 = *(unsigned __int8 **)(v3 + 8);
    if (v9 == v6)
    {
      if ((v8 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
          return v3;
      }
      else
      {
        if (!*(_BYTE *)(v3 + 23))
          return v3;
        v10 = 0;
        while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
        {
          if (v8 == ++v10)
            return v3;
        }
      }
    }
    v3 += 24;
  }
  while (v3 != a2);
  return a2;
}

void std::vector<function_graph_map_t>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
    v7 = v5 + 24;
LABEL_3:
    a1[1] = v7;
    return;
  }
  v8 = (char *)*a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
  v10 = v9 + 1;
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[24 * v9];
  *(_OWORD *)v14 = *a2;
  *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
  v7 = v14 + 24;
  if (v5 != v8)
  {
    do
    {
      v15 = *(_OWORD *)(v5 - 24);
      *((_QWORD *)v14 - 1) = *((_QWORD *)v5 - 1);
      *(_OWORD *)(v14 - 24) = v15;
      v14 -= 24;
      v5 -= 24;
    }
    while (v5 != v8);
    v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[24 * v12];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v7;
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::EncodeOperation(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  E5RT::IOPortImpl **v6;
  void *MemoryObjectRef;

  v1 = *(_QWORD *)(this + 144);
  if (*(_QWORD *)(this + 152) != v1)
  {
    v2 = (_QWORD *)this;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(E5RT::IOPortImpl ***)(v1 + v4);
      this = E5RT::IOPort::IsDynamic(v6);
      if ((this & 1) == 0)
      {
        MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef(v6);
        this = sub_190F1D100(MemoryObjectRef, v2[12] + v3);
      }
      ++v5;
      v1 = v2[18];
      v4 += 16;
      v3 += 176;
    }
    while (v5 < (v2[19] - v1) >> 4);
  }
  return this;
}

uint64_t sub_190F1D100(void *a1, uint64_t a2)
{
  E5RT::BufferObject *v3;
  uint64_t result;
  void *exception;
  _QWORD v6[3];
  _BYTE v7[8];
  _QWORD v8[3];

  v3 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(a1);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "BindMemoryObjectToBnns");
    std::string::basic_string[abi:ne180100]<0>(v6, "MemoryObjects bound to BNNS op ports must be buffers, not surfaces");
    E5RT::Status::Status(v7, 6, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  result = E5RT::BufferObject::GetDataSpan(v3);
  *(_QWORD *)(a2 + 136) = result;
  return result;
}

void sub_190F1D1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::ResetOperation(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(this + 96);
  v2 = *(_QWORD *)(this + 104) - v1;
  if (v2)
  {
    v3 = v2 / 176;
    if (v3 <= 1)
      v3 = 1;
    if (v3 < 2)
    {
      v4 = 0;
LABEL_9:
      v7 = v3 - v4;
      v8 = (_QWORD *)(v1 + 176 * v4 + 136);
      do
      {
        *v8 = 0;
        v8 += 22;
        --v7;
      }
      while (v7);
      return this;
    }
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    v5 = (_QWORD *)(v1 + 312);
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v5 - 22) = 0;
      *v5 = 0;
      v5 += 44;
      v6 -= 2;
    }
    while (v6);
    if (v3 != v4)
      goto LABEL_9;
  }
  return this;
}

void E5RT::Ops::BnnsCpuInferenceOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  E5RT::ExecutionStreamOperationInternal **v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  E5RT::ExecutionStreamOperationInternal *v6;
  void *MemoryObjectRef;
  E5RT::ExecutionStreamOperationInternal *v8;
  E5RT::ExecutionStreamOperationInternal *i;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  E5RT::IOPortImpl **v14;
  E5RT::IOPortPriv *v15;
  E5RT::ExecutionStreamOperationInternal *v16;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v18;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  unint64_t Rank;
  unint64_t v21;
  size_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  size_t v39;
  void *v40;
  std::string::size_type v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  E5RT::BufferObject *v50;
  _QWORD *v51;
  E5RT::BufferObject *v52;
  void *DataSpan;
  const void *v54;
  size_t Size;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  std::__shared_weak_count *v59;
  std::string::size_type v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::string::size_type v73;
  void *v74;
  std::string *v75;
  __int128 v76;
  void *exception;
  void *v78;
  E5RT::ExecutionStreamOperationInternal **v79;
  unint64_t v80;
  __int128 v81;
  std::string::size_type v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::string v86;
  __int128 v87;
  std::string::size_type v88;
  E5RT::BufferObject *v89;
  std::string v90;
  char *v91;
  char *v92;
  char *v93;

  v1 = this;
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v91, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&v90, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(&v87, 2, &v90);
    E5RT::E5RTError::E5RTError(exception, &v91, &v87);
  }
  v2 = *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*v1) + 24);
  if (E5RT::ExecutionStreamOperationInternal::HasDynamicInputPorts(*v1))
  {
    E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeBnnsGraphContextBasedOnE5InputPorts((E5RT::Ops::BnnsCpuInferenceOperation::Impl *)v1, 0, 1);
    if (v2 < (v1[16] - v1[15]) >> 4)
    {
      v3 = 16 * v2;
      v4 = 176 * v2;
      v5 = v2;
      do
      {
        v6 = v1[18];
        if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)((char *)v6 + v3)))
        {
          MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef(*(E5RT::IOPortImpl ***)((char *)v6 + v3));
          sub_190F1D100(MemoryObjectRef, (uint64_t)v1[12] + v4);
        }
        ++v5;
        v3 += 16;
        v4 += 176;
      }
      while (v5 < (v1[16] - v1[15]) >> 4);
    }
  }
  if (BNNSGraphContextExecute_v2())
  {
    v78 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v91, "ExecuteSync");
    E5Common::StringUtils::SummarizeBNNSErrorMessages("Error(s) occurred executing a BNNS Op:\n", (uint64_t *)v1 + 7, &v90);
    E5RT::Status::Status(&v87, 11, &v90);
    E5RT::E5RTError::E5RTError(v78, &v91, &v87);
  }
  v8 = v1[7];
  for (i = v1[8]; i != v8; i = (E5RT::ExecutionStreamOperationInternal *)((char *)i - 24))
  {
    if (*((char *)i - 1) < 0)
      operator delete(*((void **)i - 3));
  }
  v1[8] = v8;
  if (E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*v1))
    v10 = v2 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 80;
    v79 = v1;
    v80 = v2;
    while (1)
    {
      v14 = (E5RT::IOPortImpl **)*((_QWORD *)v1[18] + 2 * v12);
      if (E5RT::IOPort::IsDynamic(v14))
        break;
LABEL_20:
      ++v12;
      v11 += 176;
      v13 += 176;
      if (v12 == v2)
        return;
    }
    if (!v14 || (v15 = (E5RT::IOPortPriv *)v14, *v14 != (E5RT::IOPortImpl *)&off_1E2D59AC8))
      v15 = 0;
    v16 = v1[12];
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v14);
    v18 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v18);
    Rank = E5RT::TensorDescriptor::GetRank(v18);
    v92 = 0;
    v93 = 0;
    v91 = 0;
    if (Rank)
    {
      v21 = Rank;
      if ((Rank & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v22 = 8 * Rank;
      v91 = (char *)operator new(8 * Rank);
      v92 = v91;
      v23 = &v91[8 * v21];
      v93 = v23;
      memcpy(v91, (char *)v16 + 176 * v12 + 8, v22);
      v92 = v23;
    }
    v24 = E5RT::TensorDescriptor::GetRank(v18);
    if (v24)
    {
      v25 = *((_QWORD *)v16 + 22 * v12 + 9);
      if ((v25 & 0x7FFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_89;
      v26 = v24 < 2;
      v27 = v24 - 1;
      if (v24 != 1)
      {
        v28 = (char *)v16 + 176 * v12;
        v29 = *((_QWORD *)v28 + 10);
        if (v29 != 0x8000000000000000 && v29 >= *(_QWORD *)&v28[8 * v24] * v25)
        {
          v30 = (char *)v16 + v11;
          v31 = 11;
          do
          {
            v32 = v31;
            v33 = v27 - 1;
            if (v27 == 1)
              break;
            v34 = *(_QWORD *)&v30[8 * v27] * v29;
            v29 = *(_QWORD *)&v30[8 * v31++];
            v35 = v29 != 0x8000000000000000 && v29 >= v34;
            v27 = v33;
          }
          while (v35);
          v26 = v32 - 9 >= v24;
        }
      }
      if (!v26)
      {
LABEL_89:
        v74 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v90, "ExecuteSync");
        std::to_string(&v86, v12);
        v75 = std::string::insert(&v86, 0, "BNNS returned invalid strides for output ");
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v88 = v75->__r_.__value_.__r.__words[2];
        v87 = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v89, 2, &v87);
        E5RT::E5RTError::E5RTError(v74, &v90, &v89);
      }
    }
    v36 = E5RT::TensorDescriptor::GetRank(v18);
    v37 = v36;
    v38 = (uint64_t *)((char *)v16 + 176 * v12 + 72);
    memset(&v90, 0, sizeof(v90));
    if (v36)
    {
      if ((v36 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v39 = 8 * v36;
      v40 = operator new(8 * v36);
      v41 = (std::string::size_type)v40 + 8 * v37;
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      v90.__r_.__value_.__r.__words[2] = v41;
      memcpy(v40, v38, v39);
      v90.__r_.__value_.__l.__size_ = v41;
    }
    v42 = E5RT::TensorDescriptor::GetRank(v18);
    if (v42)
    {
      v43 = &v38[v42 - 1];
      if (v43 > v38)
      {
        v44 = (unint64_t)v16 + v13;
        do
        {
          v45 = *(_QWORD *)(v44 - 8);
          *(_QWORD *)(v44 - 8) = *v43;
          *v43-- = v45;
          v35 = v44 >= (unint64_t)v43;
          v44 += 8;
        }
        while (!v35);
      }
    }
    v46 = E5RT::TensorDescriptor::GetRank(v18);
    if (v46)
    {
      v47 = (_QWORD *)v90.__r_.__value_.__r.__words[0];
      v48 = 8 * v46;
      do
      {
        v49 = *v38;
        *v47++ = v49 * E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef);
        ++v38;
        v48 -= 8;
      }
      while (v48);
    }
    E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(TensorDataTypeRef, (uint64_t *)&v91, &v90, &v86);
    E5RT::TensorDescriptor::AllocateMemory((uint64_t)v86.__r_.__value_.__l.__data_, 0, 1uLL, &v89);
    v2 = v80;
    v50 = v89;
    *(_QWORD *)&v87 = v89;
    if (v89)
    {
      v51 = (_QWORD *)operator new();
      v52 = v89;
      *v51 = &unk_1E2DC3190;
      v51[1] = 0;
      v51[2] = 0;
      v51[3] = v52;
    }
    else
    {
      v51 = 0;
    }
    *((_QWORD *)&v87 + 1) = v51;
    DataSpan = (void *)E5RT::BufferObject::GetDataSpan(v50);
    v54 = (const void *)*((_QWORD *)v16 + 22 * v12 + 17);
    Size = E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)v86.__r_.__value_.__l.__data_);
    memcpy(DataSpan, v54, Size);
    E5RT::IOPortPriv::LockPort(v15, 0);
    v84 = 0;
    v85 = 0;
    E5RT::IOPortPriv::BindMemoryObject((uint64_t)v15, (uint64_t)&v84, 0);
    v56 = v85;
    if (!v85)
      goto LABEL_59;
    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
      v82 = v86.__r_.__value_.__r.__words[0];
      if (v86.__r_.__value_.__r.__words[0])
        goto LABEL_60;
    }
    else
    {
LABEL_59:
      v82 = v86.__r_.__value_.__r.__words[0];
      if (v86.__r_.__value_.__r.__words[0])
      {
LABEL_60:
        v59 = (std::__shared_weak_count *)operator new();
        v60 = v86.__r_.__value_.__r.__words[0];
        v59->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
        v59->__shared_owners_ = 0;
        v59->__shared_weak_owners_ = 0;
        v59[1].__vftable = (std::__shared_weak_count_vtbl *)v60;
LABEL_63:
        v83 = v59;
        v86.__r_.__value_.__r.__words[0] = 0;
        E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v15, (uint64_t *)&v82);
        v61 = v83;
        if (!v83)
          goto LABEL_67;
        v62 = (unint64_t *)&v83->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
          v64 = *((_QWORD *)&v87 + 1);
          v81 = v87;
          if (!*((_QWORD *)&v87 + 1))
            goto LABEL_70;
        }
        else
        {
LABEL_67:
          v64 = *((_QWORD *)&v87 + 1);
          v81 = v87;
          if (!*((_QWORD *)&v87 + 1))
            goto LABEL_70;
        }
        v65 = (unint64_t *)(v64 + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
LABEL_70:
        E5RT::IOPortPriv::BindMemoryObject((uint64_t)v15, (uint64_t)&v81, 1);
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
        if (*((_QWORD *)&v81 + 1))
        {
          v68 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        E5RT::IOPortPriv::LockPort(v15, 1);
        v70 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
        v1 = v79;
        if (!*((_QWORD *)&v87 + 1))
          goto LABEL_79;
        v71 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
          v73 = v86.__r_.__value_.__r.__words[0];
          v86.__r_.__value_.__r.__words[0] = 0;
          if (!v73)
            goto LABEL_81;
        }
        else
        {
LABEL_79:
          v73 = v86.__r_.__value_.__r.__words[0];
          v86.__r_.__value_.__r.__words[0] = 0;
          if (!v73)
          {
LABEL_81:
            if (v90.__r_.__value_.__r.__words[0])
            {
              v90.__r_.__value_.__l.__size_ = v90.__r_.__value_.__r.__words[0];
              operator delete(v90.__r_.__value_.__l.__data_);
            }
            if (v91)
            {
              v92 = v91;
              operator delete(v91);
            }
            goto LABEL_20;
          }
        }
        (*(void (**)(std::string::size_type))(*(_QWORD *)v73 + 8))(v73);
        goto LABEL_81;
      }
    }
    v59 = 0;
    goto LABEL_63;
  }
}

void sub_190F1DA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  v35 = *(void **)(v33 - 136);
  if (v35)
  {
    *(_QWORD *)(v33 - 128) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 112);
  if (v36)
  {
    *(_QWORD *)(v33 - 104) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeOperationInternal(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t ArgumentPosition;
  E5RT::IOPortImpl **v7;
  uint64_t v8;
  E5RT::TensorDescriptor *v9;
  E5RT::TensorDescriptor *v10;
  void *PortDescriptorRef;
  E5RT::TensorDescriptor *v12;
  E5RT::TensorDescriptor *v13;
  unint64_t Rank;
  _BOOL4 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  const void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *exception;
  void *v34;
  void *v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  _QWORD v38[3];
  char v39[8];
  _QWORD v40[3];

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v38, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(v39, 2, v38);
    E5RT::E5RTError::E5RTError(exception, v40, v39);
  }
  v4 = a2[3];
  if (v4 != *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                       + 24))
  {
    v34 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v38, "New shapes are required for all inputs during reshape.");
    E5RT::Status::Status(v39, 2, v38);
    E5RT::E5RTError::E5RTError(v34, v40, v39);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 40))
  {
    for (i = (uint64_t **)a2[2]; i; i = (uint64_t **)*i)
    {
      if (*(char *)(*(_QWORD *)(a1 + 8) + 39) < 0)
      {
        if (*((char *)i + 39) < 0)
        {
LABEL_12:
          ArgumentPosition = BNNSGraphContextGetArgumentPosition();
          if (ArgumentPosition == -1)
          {
LABEL_35:
            v28 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(v40, "ReshapeOperationInternal");
            std::string::basic_string[abi:ne180100]<0>(v38, "No argument found in BNNS graph for new input descriptor passed to BNNS op reshape");
            E5RT::Status::Status(v39, 2, v38);
            E5RT::E5RTError::E5RTError(v28, v40, v39);
          }
          goto LABEL_13;
        }
      }
      else if (*((char *)i + 39) < 0)
      {
        goto LABEL_12;
      }
      ArgumentPosition = BNNSGraphContextGetArgumentPosition();
      if (ArgumentPosition == -1)
        goto LABEL_35;
LABEL_13:
      v7 = *(E5RT::IOPortImpl ***)(*(_QWORD *)(a1 + 144) + 16 * ArgumentPosition);
      if (!v7
        || (v8 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 16 * ArgumentPosition), *v7 != (E5RT::IOPortImpl *)&off_1E2D59AC8))
      {
        v8 = 0;
      }
      v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(i[5]);
      if (!v9)
      {
        v35 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v40, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(v38, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
        E5RT::Status::Status(v39, 6, v38);
        E5RT::E5RTError::E5RTError(v35, v40, v39);
      }
      v10 = v9;
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(v7);
      v12 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      if (!v12)
      {
        v29 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v40, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(v38, "Cannot change descriptor type during reshape.");
        E5RT::Status::Status(v39, 2, v38);
        E5RT::E5RTError::E5RTError(v29, v40, v39);
      }
      v13 = v12;
      Rank = E5RT::TensorDescriptor::GetRank(v12);
      if (Rank != E5RT::TensorDescriptor::GetRank(v10))
      {
        v30 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v40, "ReshapeOperationInternal");
        std::operator+<char>();
        E5RT::Status::Status(v39, 2, v38);
        E5RT::E5RTError::E5RTError(v30, v40, v39);
      }
      E5RT::TensorDescriptor::GetTensorDataType(v13, (E5RT::TensorDataType *)v40);
      E5RT::TensorDescriptor::GetTensorDataType(v10, (E5RT::TensorDataType *)v38);
      v15 = E5RT::operator!=((uint64_t)v40, (uint64_t)v38);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v38);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v40);
      if (v15)
      {
        v31 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v40, "ReshapeOperationInternal");
        std::operator+<char>();
        E5RT::Status::Status(v39, 2, v38);
        E5RT::E5RTError::E5RTError(v31, v40, v39);
      }
      v16 = (std::__shared_weak_count *)i[6];
      v36 = i[5];
      v37 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      E5RT::IOPortPriv::SetPortDescriptor(v8, (uint64_t *)&v36);
      v19 = v37;
      if (v37)
      {
        v20 = (unint64_t *)&v37->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    return E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeBnnsGraphContextBasedOnE5InputPorts((E5RT::Ops::BnnsCpuInferenceOperation::Impl *)a1, 1, 0);
  }
  else
  {
    result = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
    v23 = result + 16;
    while (1)
    {
      v23 = *(_QWORD *)v23;
      if (!v23)
        break;
      v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(a2, v23 + 16);
      if (!v24)
      {
        v32 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v40, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(v38, "New shapes are required for all inputs during reshape.");
        E5RT::Status::Status(v39, 2, v38);
        E5RT::E5RTError::E5RTError(v32, v40, v39);
      }
      v25 = v24;
      v26 = (const void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v23 + 40));
      result = E5RT::OperandDescriptor::operator!=(v26, (const void *)v25[5]);
      if ((_DWORD)result)
      {
        v27 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v40, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(v38, "Cannot change shape of a fixed-shape program segment.");
        E5RT::Status::Status(v39, 2, v38);
        E5RT::E5RTError::E5RTError(v27, v40, v39);
      }
    }
  }
  return result;
}

void sub_190F1E34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if (!v25)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

E5RT::Ops::BnnsCpuInferenceOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BnnsCpuInferenceOperation::Impl>>::~propagate_const(E5RT::Ops::BnnsCpuInferenceOperation::Impl **a1)
{
  E5RT::Ops::BnnsCpuInferenceOperation::Impl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::BnnsCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void E5RT::Ops::BnnsCpuInferenceOperation::~BnnsCpuInferenceOperation(E5RT::Ops::BnnsCpuInferenceOperation *this)
{
  E5RT::Ops::BnnsCpuInferenceOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5BB90;
  v2 = (E5RT::Ops::BnnsCpuInferenceOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::BnnsCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::BnnsCpuInferenceOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5BB90;
  v2 = (E5RT::Ops::BnnsCpuInferenceOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::BnnsCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::GetOpCode(E5RT::Ops::BnnsCpuInferenceOperation *this)
{
  return 12;
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::EncodeOperation(E5RT::Ops::BnnsCpuInferenceOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  E5RT::IOPortImpl **v11;
  void *MemoryObjectRef;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::EncodeOperation(this, a2, a3);
  v6 = (_QWORD *)*((_QWORD *)this + 37);
  v7 = v6[18];
  if (v6[19] != v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(E5RT::IOPortImpl ***)(v7 + v8);
      if ((E5RT::IOPort::IsDynamic(v11) & 1) == 0)
      {
        MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef(v11);
        sub_190F1D100(MemoryObjectRef, v6[12] + v9);
      }
      ++v10;
      v7 = v6[18];
      v9 += 176;
      v8 += 16;
    }
    while (v10 < (v6[19] - v7) >> 4);
  }
  return kdebug_trace();
}

void sub_190F1E7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F1E7FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::ResetOperation(E5RT::Ops::BnnsCpuInferenceOperation *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  v2 = *(_QWORD *)(*((_QWORD *)this + 37) + 96);
  v3 = *(_QWORD *)(*((_QWORD *)this + 37) + 104) - v2;
  if (v3)
  {
    v4 = v3 / 176;
    if (v4 <= 1)
      v4 = 1;
    if (v4 < 2)
    {
      v5 = 0;
LABEL_9:
      v8 = v4 - v5;
      v9 = (_QWORD *)(v2 + 176 * v5 + 136);
      do
      {
        *v9 = 0;
        v9 += 22;
        --v8;
      }
      while (v8);
      goto LABEL_11;
    }
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = (_QWORD *)(v2 + 312);
    v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v6 - 22) = 0;
      *v6 = 0;
      v6 += 44;
      v7 -= 2;
    }
    while (v7);
    if (v4 != v5)
      goto LABEL_9;
  }
LABEL_11:
  E5RT::ExecutionStreamOperationInternal::ResetOperation(this);
  return kdebug_trace();
}

void sub_190F1E924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::BnnsCpuInferenceOperation::Impl::ExecuteSync(this[37]);
  return kdebug_trace();
}

void sub_190F1E9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::ReshapeOperationInternal(uint64_t *a1, _QWORD *a2)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)a1);
  kdebug_trace();
  E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeOperationInternal(a1[37], a2);
  E5RT::ExecutionStreamOperationInternal::UpdateDynamicPorts(a1);
  return kdebug_trace();
}

void sub_190F1EA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_190F1EA90(int a1)
{
  uint64_t v1;
  int v2;
  void *exception;
  _QWORD v5[3];
  _BYTE v6[8];
  _QWORD v7[3];

  if (a1 > 131103)
  {
    v1 = 8;
    if (a1 <= 262159)
    {
      if (a1 != 131104)
      {
        if (a1 != 131136)
        {
          if (a1 != 262152)
            goto LABEL_22;
          return 1;
        }
        return v1;
      }
      return 4;
    }
    if (a1 != 262160)
    {
      if (a1 == 262208)
        return v1;
      v2 = 262176;
      goto LABEL_17;
    }
    return 2;
  }
  if (a1 <= 98319)
  {
    if (a1 != 65552)
    {
      v2 = 65568;
LABEL_17:
      if (a1 != v2)
        goto LABEL_22;
      return 4;
    }
    return 2;
  }
  if (a1 == 98320)
    return 2;
  if (a1 != 131080)
  {
    if (a1 != 131088)
    {
LABEL_22:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v7, "SizeOfBnnsDataType");
      std::string::basic_string[abi:ne180100]<0>(v5, "Unsupported BNNS data type in SizeOfBnnsDataType (this is probably an E5RT defect, please file a radar)");
      E5RT::Status::Status(v6, 6, v5);
      E5RT::E5RTError::E5RTError(exception, v7, v6);
    }
    return 2;
  }
  return 1;
}

void sub_190F1EC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void std::vector<std::array<unsigned long long,8ul>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 6)
  {
    if (a2)
    {
      v12 = a2 << 6;
      bzero(a1[1], a2 << 6);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 6;
    v8 = v7 + a2;
    if ((v7 + a2) >> 58)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (v9 >> 5 > v8)
      v8 = v9 >> 5;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v10 = 0x3FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 58)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(v10 << 6);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[64 * v7];
    v14 = a2 << 6;
    v15 = &v11[64 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 4);
        v18 = *((_OWORD *)v5 - 3);
        v19 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v19;
        *((_OWORD *)v13 - 4) = v17;
        *((_OWORD *)v13 - 3) = v18;
        v13 -= 64;
        v5 -= 64;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190F1F234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F1F248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F1F260(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_190F1F270(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_190F1F288()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_190F1F270(*MEMORY[0x1E0C80C00]);
  sub_190F1F260(&dword_190DAF000, v0, v1, "[BnnsCpuInferenceOperation]: %s", v2, v3, v4, v5, 2u);
}

_QWORD *E5RT::Ops::EIRInferenceOperation::EIRInferenceOperation(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;

  v10 = *(__int128 **)a3;
  v11 = atomic_load((unsigned __int8 *)&qword_1EE2147C8);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1EE2147C8))
  {
    v16 = operator new();
    *(_OWORD *)v16 = xmmword_191A76320;
    *(_QWORD *)(v16 + 16) = 0x2B23825C2B238250;
    qword_1EE2147C0 = v16;
    __cxa_guard_release(&qword_1EE2147C8);
  }
  E5RT::Ops::BaseEirInferenceOperation::BaseEirInferenceOperation((uint64_t)a1, 11, v10, a2, (__int128 *)qword_1EE2147C0, a4, a5);
  *a1 = &off_1E2D5B910;
  v12 = *(_QWORD *)(a3 + 8);
  a1[48] = *(_QWORD *)a3;
  a1[49] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void sub_190F1F3EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE2147C8);
  _Unwind_Resume(a1);
}

BOOL E5RT::Ops::EIRInferenceOperation::SupportsReshaping(E5RT::Ops::EIRInferenceOperation *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 48) + 24) == 2;
}

_OWORD *E5RT::Ops::EIRInferenceOperation::SupportedInputsOutputsTypes@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  _OWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(0x10uLL);
  *a1 = v3;
  *v3 = xmmword_191A761A0;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

_OWORD *E5RT::Ops::EIRInferenceOperation::SupportedSurfaceTypes@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  _OWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(0x10uLL);
  *a1 = v3;
  *v3 = xmmword_191A71260;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t E5RT::Ops::EIRInferenceOperation::PlatformEngine(E5RT::Ops::EIRInferenceOperation *this)
{
  if ((E5RT::IsAVirtualMachine(this) & 1) != 0)
    return 0;
  if (*(_DWORD *)(*((_QWORD *)this + 48) + 24) == 2)
    return 50005;
  return 10007;
}

uint64_t E5RT::Ops::EIRInferenceOperation::StorageTypeForLayers(E5RT::Ops::EIRInferenceOperation *this)
{
  if (*(_DWORD *)(*((_QWORD *)this + 48) + 24) == 2)
    return 65568;
  else
    return 65552;
}

void E5RT::Ops::EIRInferenceOperation::ConfigurationName(E5RT::Ops::EIRInferenceOperation *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 48);
  if (*(char *)(v2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 32), *(_QWORD *)(v2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 32);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 48);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

_QWORD *E5RT::Ops::EIRInferenceOperation::AllowedBackends@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v3 = this[48];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = *(_BYTE **)(v3 + 56);
  v4 = *(_BYTE **)(v3 + 64);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a2[2] = v8;
    this = memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  return this;
}

void sub_190F1F5A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::EIRInferenceOperation::~EIRInferenceOperation(E5RT::Ops::EIRInferenceOperation *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2D5B910;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);
  }
  else
  {
LABEL_5:
    E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2D5B910;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);
  JUMPOUT(0x19401CD90);
}

void E5RT::ExecutionOperationTelemetryEmitter::Create(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  std::string *v5;

  v4 = (_QWORD *)operator new();
  *v4 = off_1E2D36578;
  v5 = (std::string *)(v4 + 1);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v4[3] = *(_QWORD *)(a1 + 16);
  }
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  *a2 = v4;
}

void sub_190F1F730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10B3C40284C18D2);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::ExecutionOperationTelemetryEmitter::AddContainer(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = (uint64_t *)a1[5];
  if ((unint64_t)v3 >= a1[6])
  {
    result = std::vector<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>::__push_back_slow_path<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>(a1 + 4, a2);
  }
  else
  {
    v4 = *a2;
    *a2 = 0;
    *v3 = v4;
    result = v3 + 1;
  }
  a1[5] = result;
  return result;
}

void E5RT::ExecutionOperationTelemetryEmitter::EmitToOSSignpost(E5RT::ExecutionOperationTelemetryEmitter *this)
{
  uint64_t *v2;
  uint64_t *v3;
  double i;
  double v5;
  uint64_t v6;
  double GPUTelemetryData;
  NSObject *v8;
  _BOOL4 v9;
  NSObject *v10;
  _QWORD *v11;
  _BYTE __p[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  for (i = 0.0; v2 != v3; ++v2)
  {
    v6 = *v2;
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_191A72DA0;
    strcpy(*(char **)__p, "MPSGRAPH_PROFILING_FIRST_COMMIT_DURATION");
    GPUTelemetryData = E5RT::ExecutionStreamTelemetryContainer::GetGPUTelemetryData(v6, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v5 = -0.0;
    if (GPUTelemetryData != 0.0)
      v5 = GPUTelemetryData;
    i = i + v5;
  }
  __p[23] = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_signpost_enabled(v8);

  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v10 = objc_claimAutoreleasedReturnValue();
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (os_signpost_enabled(v10))
    {
      v11 = (_QWORD *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v11;
      *(_WORD *)&__p[12] = 2048;
      *(double *)&__p[14] = i;
      _os_signpost_emit_with_name_impl(&dword_190DAF000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "E5MLExecutionStreamSyncTelemetry", "RequestID=%{signpost.description:attribute}sGPUResourceCommitDuration=%{signpost.description:attribute}f", __p, 0x16u);
    }

  }
}

void sub_190F1F998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::ExecutionOperationTelemetryEmitter::EmitToCoreAnalytics(E5RT::ExecutionOperationTelemetryEmitter *this)
{
  uint64_t *v2;
  uint64_t *v3;
  double v4;
  double v5;
  uint64_t v6;
  char *v7;
  double GPUTelemetryData;
  void *v9;
  _BYTE v10[48];
  _QWORD v11[6];
  char *v12;
  __int128 v13;

  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = 0.0;
  if (v2 != v3)
  {
    *(_WORD *)&v10[34] = 0;
    *(_DWORD *)&v10[36] = 0;
    *(_QWORD *)&v10[40] = 0x8000000000000030;
    strcpy(v10, "NG_FIRST_COMMIT_MPSGRAPH_PROFILI(");
    do
    {
      v6 = *v2;
      v7 = (char *)operator new(0x30uLL);
      v12 = v7;
      v13 = *(_OWORD *)&v10[32];
      *(_OWORD *)v7 = *(_OWORD *)&v10[16];
      *((_OWORD *)v7 + 1) = *(_OWORD *)v10;
      strcpy(v7 + 32, "DURATION");
      GPUTelemetryData = E5RT::ExecutionStreamTelemetryContainer::GetGPUTelemetryData(v6, (uint64_t)&v12);
      if (SHIBYTE(v13) < 0)
        operator delete(v12);
      v5 = -0.0;
      if (GPUTelemetryData != 0.0)
        v5 = GPUTelemetryData;
      v4 = v4 + v5;
      ++v2;
    }
    while (v2 != v3);
  }
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_190F1FB2C;
  v11[3] = &__block_descriptor_48_e30___NSObject_OS_xpc_object__8__0l;
  v11[4] = this;
  *(double *)&v11[5] = v4;
  v9 = (void *)MEMORY[0x19401D648](v11);
  analytics_send_event_lazy();

}

void sub_190F1FAFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_190F1FB10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(exception_object);
}

void *sub_190F1FB2C(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  void *v4;
  const char *v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  v5 = (const char *)(v2 + 8);
  if (*(char *)(v2 + 31) < 0)
    v5 = *(const char **)v5;
  xpc_dictionary_set_string(v3, "ExecutionIdentifier", v5);
  xpc_dictionary_set_double(v4, "MpsGaphResourceManagementTime", *(double *)(a1 + 40));
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "bundleIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
    xpc_dictionary_set_string(v4, "BundleIdentifier", (const char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"));

  return v4;
}

void sub_190F1FBF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F1FC18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void E5RT::ExecutionOperationTelemetryEmitter::~ExecutionOperationTelemetryEmitter(E5RT::ExecutionOperationTelemetryEmitter *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D36578;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D36578;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x19401CD90);
}

_QWORD *std::vector<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>::__push_back_slow_path<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

uint64_t E5RT::Ops::DequantOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t InputPorts;
  uint64_t OutputPorts;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v8;
  E5RT::OperandDescriptor *v9;
  E5RT::TensorDescriptor *v10;
  uint64_t TensorDataTypeRef;
  uint64_t v12;
  void *exception;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[3];
  _BYTE v20[8];
  _QWORD v21[3];

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  v4 = a1 + 8;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (*(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "InOut ports are not supported by Dequant op yet.");
    E5RT::Status::Status(v20, 1, v19);
    E5RT::E5RTError::E5RTError(exception, v21, v20);
  }
  E5RT::Ops::ValidateInOutsForQuantDequantOperation(InputPorts, OutputPorts);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(_QWORD *)(InputPorts + 16) + 40));
  v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  v9 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(_QWORD *)(OutputPorts + 16)
                                                                                           + 40));
  v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v9);
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v8);
  v12 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v10);
  if (!E5RT::TensorDataType::IsType<unsigned char>(TensorDataTypeRef)
    && !E5RT::TensorDataType::IsType<signed char>(TensorDataTypeRef))
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Input to Dequant op must be U8 or S8.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v17, v21, v20);
  }
  if (!E5RT::TensorDataType::IsType<float>(v12) && !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Output from Dequant op must be FP32 or FP16.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v18, v21, v20);
  }
  if (**(_DWORD **)v4 != 1)
  {
    v15 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Dequant op not yet supported on non-CPU devices.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v15, v21, v20);
  }
  if (*(_QWORD *)(*(_QWORD *)v4 + 16) - *(_QWORD *)(*(_QWORD *)v4 + 8) != 4)
  {
    v16 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Dequant op currently only supports a single scale factor for all channels.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v16, v21, v20);
  }
  return a1;
}

void sub_190F20258(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F2026C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F20280(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F20294(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F202A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F202BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F202D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void E5RT::Ops::DequantOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  E5RT::IOPortImpl **v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  E5RT::IOPortImpl **v9;
  unint64_t *v10;
  unint64_t v11;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::BufferObject *v13;
  E5RT::MemoryObject *MemoryObjectRef;
  const E5RT::TensorDescriptor *v15;
  E5RT::OperandDescriptor *v16;
  E5RT *v17;
  E5RT::MemoryObject *v18;
  const E5RT::TensorDescriptor *v19;
  const E5RT::BufferObject *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  void *exception;
  _QWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  E5RT::IOPortImpl **v30;
  std::__shared_weak_count *v31;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v27, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&v30, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v26, 2, &v30);
    E5RT::E5RTError::E5RTError(exception, &v27, v26);
  }
  v27 = 0x2B23810C00000000;
  v29 = 0u;
  v28 = 0u;
  kdebug_trace();
  v2 = *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16);
  v4 = *(E5RT::IOPortImpl ***)(v2 + 40);
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  v30 = v4;
  v31 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this) + 16);
  v9 = *(E5RT::IOPortImpl ***)(v7 + 40);
  v8 = *(std::__shared_weak_count **)(v7 + 48);
  v26[0] = v9;
  v26[1] = v8;
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v4);
  v13 = (E5RT::BufferObject *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v4);
  v15 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(MemoryObjectRef);
  v16 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v9);
  v17 = (E5RT *)E5RT::OperandDescriptor::TensorDescriptor(v16);
  v18 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v9);
  v19 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v18);
  E5RT::TensorDequantize(v17, v19, v13, v15, v20, **((float **)this[1] + 1));
  if (v8)
  {
    v21 = (unint64_t *)&v8->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v31)
  {
    v23 = &v31->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (E5RT::g_trace_analysis_level >= v27)
    kdebug_trace();
}

void sub_190F205FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F2063C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    if ((v25 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v24);
      _Unwind_Resume(a1);
    }
  }
  else if (v25)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

E5RT::ExecutionStreamOperationInternal *E5RT::Ops::DequantOperation::DequantOperation(E5RT::ExecutionStreamOperationInternal *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *exception;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD v30[3];
  _BYTE v31[8];
  void *v32[2];
  void *__p[2];
  int v34;

  *(_OWORD *)v32 = 0u;
  *(_OWORD *)__p = 0u;
  v34 = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v32);
  v7 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v8 = (void **)*v7;
        v9 = (std::__shared_weak_count *)v7[6];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (*((char *)v7 + 39) < 0)
          break;
        operator delete(v7);
        v7 = v8;
        if (!v8)
          goto LABEL_11;
      }
      operator delete(v7[2]);
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
LABEL_11:
  v12 = v32[0];
  v32[0] = 0;
  if (v12)
    operator delete(v12);
  *(_QWORD *)a1 = &off_1E2D5B568;
  *((_QWORD *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  v13 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(a1) + 16;
  while (1)
  {
    v13 = *(_QWORD *)v13;
    if (!v13)
      break;
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v13 + 40)))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v32, "DequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v30, "DequantOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v31, 1, v30);
      E5RT::E5RTError::E5RTError(exception, v32, v31);
    }
  }
  v15 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a1) + 16;
  while (1)
  {
    v15 = *(_QWORD *)v15;
    if (!v15)
      break;
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v15 + 40)))
    {
      v16 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v32, "DequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v30, "DequantOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v31, 1, v30);
      E5RT::E5RTError::E5RTError(v16, v32, v31);
    }
  }
  v17 = operator new();
  v18 = v17;
  v19 = *(unint64_t **)(a3 + 8);
  v32[0] = *(void **)a3;
  v32[1] = v19;
  if (v19)
  {
    v20 = v19 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  E5RT::Ops::DequantOperation::Impl::Impl(v17, (uint64_t)a1, (uint64_t)v32);
  v22 = (std::__shared_weak_count *)v32[1];
  if (v32[1])
  {
    v23 = (unint64_t *)((char *)v32[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *((_QWORD *)a1 + 37);
  *((_QWORD *)a1 + 37) = v18;
  if (v25)
  {
    v26 = *(std::__shared_weak_count **)(v25 + 16);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    MEMORY[0x19401CD90](v25, 0x60C40A44E5E0CLL);
  }
  *((_QWORD *)a1 + 29) |= 3uLL;
  kdebug_trace();
  return a1;
}

void sub_190F20A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::ExecutionStreamOperationInternal *v21;
  uint64_t v22;
  uint64_t v24;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x19401CD90](v22, 0x60C40A44E5E0CLL);
  kdebug_trace();
  v24 = *((_QWORD *)v21 + 37);
  *((_QWORD *)v21 + 37) = 0;
  if (v24)
    sub_190F20DD4(v24);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::DequantOperation::~DequantOperation(E5RT::Ops::DequantOperation *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E2D5B568;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40A44E5E0CLL);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E2D5B568;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40A44E5E0CLL);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::Ops::DequantOperation::GetOpCode(E5RT::Ops::DequantOperation *this)
{
  return 5;
}

uint64_t E5RT::Ops::DequantOperation::PrepareOpForEncode(E5RT::Ops::DequantOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_190F20D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::DequantOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::DequantOperation::Impl::ExecuteSync(this[37]);
  return kdebug_trace();
}

void sub_190F20DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_190F20DD4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return MEMORY[0x19401CD90](a1, 0x60C40A44E5E0CLL);
}

_QWORD *E5RT::ComputeDevice::ComputeDevice(_QWORD *this)
{
  *this = &off_1E2D59C48;
  return this;
}

{
  *this = &off_1E2D59C48;
  return this;
}

void E5RT::ComputeDevice::~ComputeDevice(E5RT::ComputeDevice *this)
{
  JUMPOUT(0x19401CD90);
}

void *E5RT::ComputeDevice::TryAsComputeGPUDevice(void *this)
{
  if (this)
  return this;
}

void *E5RT::ComputeDevice::AsComputeGPUDevice(E5RT::ComputeDevice *this)
{
  void *result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "AsComputeGPUDevice");
    std::string::basic_string[abi:ne180100]<0>(v3, "ComputeDevice is not a ComputeGPUDevice.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190F20F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ComputeDevice::GetDeviceType(E5RT::ComputeDevice *this)
{
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetDeviceType");
    std::string::basic_string[abi:ne180100]<0>(v3, "Unexpected compute device object encountered.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return 2;
}

void sub_190F21084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ComputeDevice::GetAllAvailableComputeDevices(E5RT::ComputeDevice *this)
{
  if (qword_1EE2147D8 != -1)
    dispatch_once(&qword_1EE2147D8, &unk_1E2DC95B8);
  return qword_1EE2147D0;
}

void sub_190F21144()
{
  E5RT::ComputeGPUDevice *v0;
  uint64_t AllAvailableComputeGPUDevices;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  char **v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;

  v0 = (E5RT::ComputeGPUDevice *)operator new();
  *((_QWORD *)v0 + 1) = 0;
  *((_QWORD *)v0 + 2) = 0;
  *(_QWORD *)v0 = 0;
  qword_1EE2147D0 = (uint64_t)v0;
  AllAvailableComputeGPUDevices = E5RT::ComputeGPUDevice::GetAllAvailableComputeGPUDevices(v0);
  v3 = *(uint64_t **)AllAvailableComputeGPUDevices;
  v2 = *(uint64_t **)(AllAvailableComputeGPUDevices + 8);
  if (*(uint64_t **)AllAvailableComputeGPUDevices != v2)
  {
    v26 = *(uint64_t **)(AllAvailableComputeGPUDevices + 8);
    while (1)
    {
      while (1)
      {
        v4 = *v3;
        v5 = (char **)qword_1EE2147D0;
        v7 = *(char **)(qword_1EE2147D0 + 8);
        v6 = *(_QWORD *)(qword_1EE2147D0 + 16);
        if ((unint64_t)v7 >= v6)
          break;
        *(_QWORD *)v7 = v4;
        v5[1] = v7 + 8;
        if (++v3 == v2)
          return;
      }
      v8 = *(char **)qword_1EE2147D0;
      v9 = (uint64_t)&v7[-*(_QWORD *)qword_1EE2147D0];
      v10 = v9 >> 3;
      v11 = (v9 >> 3) + 1;
      if (v11 >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v12 = v6 - (_QWORD)v8;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
      if (v13)
        break;
      v14 = 0;
      v15 = (char *)(8 * v10);
      *(_QWORD *)(8 * v10) = v4;
      v16 = 8 * v10 + 8;
      if (v7 != v8)
        goto LABEL_16;
LABEL_23:
      *v5 = v15;
      v5[1] = (char *)v16;
      v5[2] = &v14[8 * v13];
      if (v7)
        operator delete(v7);
      v2 = v26;
      v5[1] = (char *)v16;
      if (++v3 == v26)
        return;
    }
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = operator new(8 * v13);
    v15 = &v14[8 * v10];
    *(_QWORD *)v15 = v4;
    v16 = (uint64_t)(v15 + 8);
    if (v7 == v8)
      goto LABEL_23;
LABEL_16:
    v17 = v7 - 8 - v8;
    if (v17 < 0x58)
      goto LABEL_31;
    if ((unint64_t)(v7 - &v14[v9]) < 0x20)
      goto LABEL_31;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = &v7[-v19];
    v15 -= v19;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v7 - 16);
    v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *(v21 - 1) = *(v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    v7 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v8);
    }
    v7 = *v5;
    goto LABEL_23;
  }
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  uint64_t InputPorts;
  uint64_t OutputPorts;
  const std::string *v11;
  uint64_t v12;
  uint64_t v13;
  void *PortDescriptorRef;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  E5RT::IOPortImpl **v18;
  void *v19;
  void *v20;
  const void **v21;
  void *v23;
  void *exception;
  void *v25;
  void *v26;
  _QWORD v27[3];
  char v28[8];
  _QWORD v29[3];

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = a1 + 32;
  v5 = (uint64_t **)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = (uint64_t *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = a1 + 56;
  v7 = (uint64_t **)(a1 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v8 = (std::string *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (!*(_QWORD *)(OutputPorts + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v27, "No outputs specified.");
    E5RT::Status::Status(v28, 1, v27);
    E5RT::E5RTError::E5RTError(exception, v29, v28);
  }
  if (*(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    v25 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v27, "InOut ports are not supported by MLC op yet.");
    E5RT::Status::Status(v28, 1, v27);
    E5RT::E5RTError::E5RTError(v25, v29, v28);
  }
  v11 = *(const std::string **)(a1 + 8);
  if (!v11)
  {
    v26 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v27, "Op params not specified.");
    E5RT::Status::Status(v28, 1, v27);
    E5RT::E5RTError::E5RTError(v26, v29, v28);
  }
  std::string::operator=(v8, v11);
  v12 = InputPorts + 16;
  v13 = v12;
  while (1)
  {
    v13 = *(_QWORD *)v13;
    if (!v13)
      break;
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v13 + 40));
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      v15 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v27, "Input surface ports aren't supported with MLC CPU inference yet.");
      E5RT::Status::Status(v28, 1, v27);
      E5RT::E5RTError::E5RTError(v15, v29, v28);
    }
  }
  v16 = (_QWORD *)(OutputPorts + 16);
  v17 = v16;
  while (1)
  {
    v17 = (_QWORD *)*v17;
    if (!v17)
      break;
    v18 = (E5RT::IOPortImpl **)v17[5];
    if (!v18)
    {
      v23 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v27, "Invalid output port.");
      E5RT::Status::Status(v28, 1, v27);
      E5RT::E5RTError::E5RTError(v23, v29, v28);
    }
    v19 = (void *)E5RT::IOPort::GetPortDescriptorRef(v18);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v19))
    {
      v20 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v27, "Output surface ports aren't supported with MLC CPU inference yet.");
      E5RT::Status::Status(v28, 1, v27);
      E5RT::E5RTError::E5RTError(v20, v29, v28);
    }
  }
  while (1)
  {
    v12 = *(_QWORD *)v12;
    if (!v12)
      break;
    std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(v5, v4, (const void **)(v12 + 16), v12 + 16);
  }
  v21 = (const void **)*v16;
  if (*v16)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(v7, v6, v21 + 2, (uint64_t)(v21 + 2));
      v21 = (const void **)*v21;
    }
    while (v21);
  }
  return a1;
}

void sub_190F21718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (*(char *)(v22 + 103) < 0)
    operator delete(*v25);
  std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(v24, *(_QWORD *)(v22 + 56));
  std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(v23, *(_QWORD *)(v22 + 32));
  v27 = *(std::__shared_weak_count **)(v22 + 16);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::MlcCpuInferenceOperation::Impl::~Impl(E5RT::Ops::MlcCpuInferenceOperation::Impl *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*((_QWORD *)this + 9))
  {
    mlc_services_model_teardown();
    *((_QWORD *)this + 9) = 0;
  }
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy((uint64_t)this + 48, *((_QWORD *)this + 7));
  std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy((uint64_t)this + 24, *((_QWORD *)this + 4));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void E5RT::Ops::MlcCpuInferenceOperation::Impl::PrepareOpForEncode(E5RT::Ops::MlcCpuInferenceOperation::Impl *this)
{
  uint64_t bundled;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v3;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v4;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v6;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v7;
  BOOL v8;
  E5RT::OperandDescriptor *v9;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v10;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v11;
  void *exception;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD v17[3];
  std::string __p;

  if (!E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this))
  {
    E5RT::PathWrapper::PathWrapper(&__p, (uint64_t)this + 80);
    if (!E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&__p))
    {
      std::operator+<char>();
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v16, "PrepareOpForEncode");
      E5RT::Status::Status(&v15, 13, v17);
      E5RT::E5RTError::E5RTError(exception, v16, &v15);
    }
    bundled = mlc_services_model_create_bundled();
    *((_QWORD *)this + 9) = bundled;
    if (!bundled)
    {
      v13 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v17, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(v16, "Unable to create MLC model");
      E5RT::Status::Status(&v15, 2, v16);
      E5RT::E5RTError::E5RTError(v13, v17, &v15);
    }
    if ((mlc_services_model_load() & 1) == 0)
    {
      v14 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v17, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(v16, "Unable to load MLC model");
      E5RT::Status::Status(&v15, 2, v16);
      E5RT::E5RTError::E5RTError(v14, v17, &v15);
    }
    v3 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)this + 3);
    if (v3 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32))
    {
      do
      {
        PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPortImpl ***)v3 + 7));
        sub_190F21D28((int)this, (uint64_t)v3 + 32, PortDescriptorRef);
        v6 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v3 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v3 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v3;
            v3 = v7;
          }
          while (!v8);
        }
        v3 = v7;
      }
      while (v7 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32));
    }
    v4 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)this + 6);
    if (v4 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56))
    {
      do
      {
        v9 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPortImpl ***)v4 + 7));
        sub_190F21D28((int)this, (uint64_t)v4 + 32, v9);
        v10 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v4 + 1);
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v4 + 2);
            v8 = *(_QWORD *)v11 == (_QWORD)v4;
            v4 = v11;
          }
          while (!v8);
        }
        v4 = v11;
      }
      while (v11 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_190F21BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_190F21D28(int a1, uint64_t a2, E5RT::OperandDescriptor *this)
{
  E5RT::TensorDescriptor *v4;
  unint64_t Rank;
  _QWORD *TensorShape;
  _QWORD *TensorStrides;
  char *v8;
  void *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *exception;
  void *v21;
  char v22[8];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[33];
  char *v26;
  uint64_t v27;
  char *v28;

  v4 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  Rank = E5RT::TensorDescriptor::GetRank(v4);
  TensorShape = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v4);
  TensorStrides = (_QWORD *)E5RT::TensorDescriptor::GetTensorStrides(v4);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (Rank)
  {
    if (Rank >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(8 * Rank);
    v26 = v8;
    v28 = &v8[8 * Rank];
    bzero(v8, 8 * Rank);
    v9 = operator new(8 * Rank);
    bzero(v9, 8 * Rank);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = mlc_services_model_get_tensor_shape() ^ 1;
  if (!Rank)
    LOBYTE(v10) = 1;
  if ((v10 & 1) != 0)
  {
    if (!v9)
      goto LABEL_15;
  }
  else
  {
    v11 = 0;
    do
    {
      if (*(_QWORD *)&v8[8 * v11] != *(_QWORD *)(*TensorShape + 8 * v11))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Shape in E5 does not match shape in MLC binary for tensor = ", 60);
        v13 = *(char *)(a2 + 23);
        if (v13 >= 0)
          v14 = a2;
        else
          v14 = *(_QWORD *)a2;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(a2 + 23);
        else
          v15 = *(_QWORD *)(a2 + 8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" dim: ", 6);
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" e5: ", 5);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" mlc: ", 6);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v19);
        std::stringbuf::str();
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v23, "operator()");
        E5RT::Status::Status(v22, 2, v24);
        E5RT::E5RTError::E5RTError(exception, v23, v22);
      }
      if (*((_QWORD *)v9 + v11) != *(_QWORD *)(*TensorStrides + 8 * v11))
      {
        std::operator+<char>();
        v21 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v24, "operator()");
        E5RT::Status::Status(v23, 2, v25);
        E5RT::E5RTError::E5RTError(v21, v24, v23);
      }
      ++v11;
    }
    while (Rank != v11);
  }
  operator delete(v9);
LABEL_15:
  if (v8)
    operator delete(v8);
}

void sub_190F22014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;

  *(_QWORD *)(v29 - 96) = v28;
  operator delete(v28);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::Impl::GetPortBoundBufferType(E5RT::Ops::MlcCpuInferenceOperation::Impl *this)
{
  char *v1;
  E5RT::MemoryObject *MemoryObjectRef;
  E5RT::BufferObject *v3;
  void *exception;
  _QWORD v6[3];
  _BYTE v7[8];
  _QWORD v8[3];

  if (*((_QWORD *)this + 5))
  {
    v1 = (char *)this + 24;
  }
  else
  {
    if (!*((_QWORD *)this + 8))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "GetPortBoundBufferType");
      std::string::basic_string[abi:ne180100]<0>(v6, "MLC op has both input and output ports empty.");
      E5RT::Status::Status(v7, 6, v6);
      E5RT::E5RTError::E5RTError(exception, v8, v7);
    }
    v1 = (char *)this + 48;
  }
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(*(E5RT::IOPortImpl ***)(*(_QWORD *)v1 + 56));
  v3 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(MemoryObjectRef);
  return E5RT::BufferObject::GetBufferType(v3);
}

void sub_190F22204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::MlcCpuInferenceOperation::Impl::EncodeOperation(E5RT::Ops::MlcCpuInferenceOperation::Impl *this)
{
  unint64_t v2;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v3;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v4;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v5;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v6;
  BOOL v7;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v8;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v9;
  unint64_t v10;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v11;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v12;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v13;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v14;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v15;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v16;
  void *exception;
  void *v18;
  char **v19[3];
  _BYTE v20[8];
  char **v21[2];
  _QWORD v22[3];
  void *__p;
  void *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;

  if (E5RT::Ops::MlcCpuInferenceOperation::Impl::GetPortBoundBufferType(this))
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    __p = 0;
    v24 = 0;
    v25 = 0;
    v2 = *((_QWORD *)this + 8) + *((_QWORD *)this + 5);
    if (v2)
    {
      if (v2 >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v26 = (char *)operator new(8 * v2);
      v27 = v26;
      v28 = &v26[8 * v2];
      __p = operator new(8 * v2);
      v24 = __p;
      v25 = (char *)__p + 8 * v2;
    }
    v21[0] = &v26;
    v21[1] = (char **)&__p;
    v3 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)this + 3);
    if (v3 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32))
    {
      do
      {
        sub_190F228C0(v21, *((E5RT::IOPortImpl ***)v3 + 7));
        v5 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v3 + 1);
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v3 + 2);
            v7 = *(_QWORD *)v6 == (_QWORD)v3;
            v3 = v6;
          }
          while (!v7);
        }
        v3 = v6;
      }
      while (v6 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32));
    }
    v4 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)this + 6);
    if (v4 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56))
    {
      do
      {
        sub_190F228C0(v21, *((E5RT::IOPortImpl ***)v4 + 7));
        v8 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v4 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v4 + 2);
            v7 = *(_QWORD *)v9 == (_QWORD)v4;
            v4 = v9;
          }
          while (!v7);
        }
        v4 = v9;
      }
      while (v9 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56));
    }
    if ((mlc_services_model_bind_raw_ports() & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v22, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v19, "Unable to bind raw ports to MLC model");
      E5RT::Status::Status(v20, 2, v19);
      E5RT::E5RTError::E5RTError(exception, v22, v20);
    }
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v10 = *((_QWORD *)this + 8) + *((_QWORD *)this + 5);
    if (v10)
    {
      if (v10 >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v26 = (char *)operator new(8 * v10);
      v27 = v26;
      v28 = &v26[8 * v10];
    }
    v19[0] = &v26;
    v11 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)this + 3);
    if (v11 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32))
    {
      do
      {
        sub_190F22738(v19, *((E5RT::IOPortImpl ***)v11 + 7));
        v13 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v11 + 1);
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v11 + 2);
            v7 = *(_QWORD *)v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v7);
        }
        v11 = v14;
      }
      while (v14 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32));
    }
    v12 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)this + 6);
    if (v12 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56))
    {
      do
      {
        sub_190F22738(v19, *((E5RT::IOPortImpl ***)v12 + 7));
        v15 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v12 + 1);
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v12 + 2);
            v7 = *(_QWORD *)v16 == (_QWORD)v12;
            v12 = v16;
          }
          while (!v7);
        }
        v12 = v16;
      }
      while (v16 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56));
    }
    if ((mlc_services_model_bind_ports() & 1) == 0)
    {
      v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v22, "Unable to bind ports to MLC model");
      E5RT::Status::Status(v21, 2, v22);
      E5RT::E5RTError::E5RTError(v18, &__p, v21);
    }
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_190F22600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 56);
  if (v35)
  {
    *(_QWORD *)(v33 - 48) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void sub_190F22738(char ***a1, E5RT::IOPortImpl **this)
{
  E5RT::MemoryObject *MemoryObjectRef;
  void *v4;
  void (**v5)(E5RT::IOBufferObject *__hidden);
  void (**v6)(E5RT::IOBufferObject *__hidden);
  char **v7;
  unint64_t v8;
  void (***v9)(E5RT::IOBufferObject *__hidden);
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  void (***v19)(E5RT::IOBufferObject *__hidden);
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  void (***v26)(E5RT::IOBufferObject *__hidden);
  uint64_t v27;
  __int128 v28;
  void (**v29)(E5RT::IOBufferObject *__hidden);

  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(this);
  v4 = E5RT::MemoryObject::Buffer(MemoryObjectRef);
  v5 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v4);
  v6 = v5;
  v7 = *a1;
  v9 = (void (***)(E5RT::IOBufferObject *__hidden))v7[1];
  v8 = (unint64_t)v7[2];
  v10 = (char *)v9;
  if ((unint64_t)v9 < v8)
  {
    *v9 = v5;
    v11 = (uint64_t)(v9 + 1);
    goto LABEL_23;
  }
  v12 = *v7;
  v13 = (char *)v9 - *v7;
  v14 = v13 >> 3;
  v15 = (v13 >> 3) + 1;
  if (v15 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v16 = v8 - (_QWORD)v12;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = operator new(8 * v17);
    v19 = (void (***)(E5RT::IOBufferObject *__hidden))&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v6;
    v11 = (uint64_t)(v19 + 1);
    v21 = (char *)((char *)v9 - v12);
    if (v9 == (void (***)(E5RT::IOBufferObject *__hidden))v12)
      goto LABEL_21;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (void (***)(E5RT::IOBufferObject *__hidden))(8 * v14);
  v20 = 0;
  *(_QWORD *)(8 * v14) = v6;
  v11 = 8 * v14 + 8;
  v21 = (char *)((char *)v9 - v12);
  if (v9 != (void (***)(E5RT::IOBufferObject *__hidden))v12)
  {
LABEL_14:
    v22 = (unint64_t)(v21 - 8);
    if (v22 < 0x58)
      goto LABEL_28;
    if ((unint64_t)((char *)v9 - &v18[v13]) < 0x20)
      goto LABEL_28;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v10 = (char *)&v9[v24 / 0xFFFFFFFFFFFFFFF8];
    v19 = (void (***)(E5RT::IOBufferObject *__hidden))((char *)v19 - v24);
    v25 = &v18[8 * v14 - 16];
    v26 = v9 - 2;
    v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 4;
      v27 -= 4;
    }
    while (v27);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v29 = (void (**)(E5RT::IOBufferObject *__hidden))*((_QWORD *)v10 - 1);
        v10 -= 8;
        *--v19 = v29;
      }
      while (v10 != v12);
    }
    v10 = *v7;
  }
LABEL_21:
  *v7 = (char *)v19;
  v7[1] = (char *)v11;
  v7[2] = v20;
  if (v10)
    operator delete(v10);
LABEL_23:
  v7[1] = (char *)v11;
}

void sub_190F228C0(char ***a1, E5RT::IOPortImpl **this)
{
  E5RT::MemoryObject *MemoryObjectRef;
  void *v4;
  void (**v5)(E5RT::HeapAllocatedBufferObject *__hidden);
  void (**v6)(E5RT::HeapAllocatedBufferObject *__hidden);
  uint64_t v7;
  uint64_t v8;
  char **v9;
  unint64_t v10;
  void (***v11)(E5RT::HeapAllocatedBufferObject *__hidden);
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  void (***v21)(E5RT::HeapAllocatedBufferObject *__hidden);
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  void (***v28)(E5RT::HeapAllocatedBufferObject *__hidden);
  uint64_t v29;
  __int128 v30;
  void (**v31)(E5RT::HeapAllocatedBufferObject *__hidden);
  char **v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(this);
  v4 = E5RT::MemoryObject::Buffer(MemoryObjectRef);
  v5 = E5RT::BufferObject::GetHandle<E5RT::HeapAllocatedBufferHandle>((uint64_t)v4);
  v6 = v5;
  v8 = v7;
  v9 = *a1;
  v11 = (void (***)(E5RT::HeapAllocatedBufferObject *__hidden))(*a1)[1];
  v10 = (unint64_t)(*a1)[2];
  v12 = (char *)v11;
  if ((unint64_t)v11 < v10)
  {
    *v11 = v5;
    v13 = (uint64_t)(v11 + 1);
    goto LABEL_23;
  }
  v14 = *v9;
  v15 = (char *)v11 - *v9;
  v16 = v15 >> 3;
  v17 = (v15 >> 3) + 1;
  if (v17 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v18 = v10 - (_QWORD)v14;
  if (v18 >> 2 > v17)
    v17 = v18 >> 2;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
    v19 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 >> 61)
      goto LABEL_45;
    v20 = operator new(8 * v19);
    v21 = (void (***)(E5RT::HeapAllocatedBufferObject *__hidden))&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v6;
    v13 = (uint64_t)(v21 + 1);
    v23 = (char *)((char *)v11 - v14);
    if (v11 == (void (***)(E5RT::HeapAllocatedBufferObject *__hidden))v14)
      goto LABEL_21;
    goto LABEL_14;
  }
  v20 = 0;
  v21 = (void (***)(E5RT::HeapAllocatedBufferObject *__hidden))(8 * v16);
  v22 = 0;
  *(_QWORD *)(8 * v16) = v6;
  v13 = 8 * v16 + 8;
  v23 = (char *)((char *)v11 - v14);
  if (v11 != (void (***)(E5RT::HeapAllocatedBufferObject *__hidden))v14)
  {
LABEL_14:
    v24 = (unint64_t)(v23 - 8);
    if (v24 < 0x58)
      goto LABEL_50;
    if ((unint64_t)((char *)v11 - &v20[v15]) < 0x20)
      goto LABEL_50;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v12 = (char *)&v11[v26 / 0xFFFFFFFFFFFFFFF8];
    v21 = (void (***)(E5RT::HeapAllocatedBufferObject *__hidden))((char *)v21 - v26);
    v27 = &v20[8 * v16 - 16];
    v28 = v11 - 2;
    v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 4;
      v29 -= 4;
    }
    while (v29);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        v31 = (void (**)(E5RT::HeapAllocatedBufferObject *__hidden))*((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v21 = v31;
      }
      while (v12 != v14);
    }
    v12 = *v9;
  }
LABEL_21:
  *v9 = (char *)v21;
  v9[1] = (char *)v13;
  v9[2] = v22;
  if (v12)
    operator delete(v12);
LABEL_23:
  v9[1] = (char *)v13;
  v32 = a1[1];
  v34 = v32[1];
  v33 = (unint64_t)v32[2];
  if ((unint64_t)v34 < v33)
  {
    *(_QWORD *)v34 = v8;
    v35 = (uint64_t)(v34 + 8);
    goto LABEL_44;
  }
  v36 = *v32;
  v37 = v34 - *v32;
  v38 = v37 >> 3;
  v39 = (v37 >> 3) + 1;
  if (v39 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v40 = v33 - (_QWORD)v36;
  if (v40 >> 2 > v39)
    v39 = v40 >> 2;
  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
    v41 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v41 = v39;
  if (!v41)
  {
    v42 = 0;
    v43 = (char *)(8 * v38);
    v44 = 0;
    *(_QWORD *)(8 * v38) = v8;
    v35 = 8 * v38 + 8;
    v45 = v34 - v36;
    if (v34 == v36)
      goto LABEL_42;
LABEL_36:
    v46 = v45 - 8;
    if (v46 < 0x58)
      goto LABEL_51;
    if ((unint64_t)(v34 - &v42[v37]) < 0x20)
      goto LABEL_51;
    v47 = (v46 >> 3) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v49 = &v34[-v48];
    v43 -= v48;
    v50 = &v42[8 * v38 - 16];
    v51 = v34 - 16;
    v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 4;
    }
    while (v52);
    v34 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_51:
      do
      {
        v54 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *((_QWORD *)v43 - 1) = v54;
        v43 -= 8;
      }
      while (v34 != v36);
    }
    goto LABEL_42;
  }
  if (v41 >> 61)
LABEL_45:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v42 = operator new(8 * v41);
  v43 = &v42[8 * v38];
  v44 = &v42[8 * v41];
  *(_QWORD *)v43 = v8;
  v35 = (uint64_t)(v43 + 8);
  v45 = v34 - v36;
  if (v34 != v36)
    goto LABEL_36;
LABEL_42:
  *v32 = v43;
  v32[1] = (char *)v35;
  v32[2] = v44;
  if (v36)
    operator delete(v36);
LABEL_44:
  v32[1] = (char *)v35;
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::Impl::ResetOperation(uint64_t this)
{
  void *exception;
  _QWORD v2[3];
  _BYTE v3[8];
  _QWORD v4[3];

  if (*(_QWORD *)(this + 72))
  {
    if (E5RT::Ops::MlcCpuInferenceOperation::Impl::GetPortBoundBufferType((E5RT::Ops::MlcCpuInferenceOperation::Impl *)this))
    {
      this = mlc_services_model_bind_raw_ports();
      if ((this & 1) != 0)
        return this;
LABEL_6:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v4, "ResetOperation");
      std::string::basic_string[abi:ne180100]<0>(v2, "Unable to un-bind ports in MLC model");
      E5RT::Status::Status(v3, 2, v2);
      E5RT::E5RTError::E5RTError(exception, v4, v3);
    }
    this = mlc_services_model_bind_ports();
    if ((this & 1) == 0)
      goto LABEL_6;
  }
  return this;
}

void sub_190F22C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t result;
  void *exception;
  void *v3;
  _QWORD v4[3];
  _BYTE v5[8];
  _QWORD v6[3];

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v4, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  result = mlc_services_model_exec_sync();
  if ((result & 1) == 0)
  {
    v3 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v4, "Internal MLC error during execution.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(v3, v6, v5);
  }
  return result;
}

void sub_190F22E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::MlcCpuInferenceOperation::Impl::ReshapeOperationInternal(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  _BOOL4 v16;
  BOOL v17;
  uint64_t *v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  int v23;
  _BOOL4 v24;
  void *PortDescriptorRef;
  E5RT::TensorDescriptor *v26;
  E5RT::TensorDescriptor *v27;
  char **TensorShape;
  char **TensorStrides;
  unint64_t Rank;
  uint64_t TensorDataTypeRef;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  _OWORD *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  size_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  size_t v67;
  const void *v68;
  size_t v69;
  int v70;
  _BOOL4 v71;
  BOOL v72;
  uint64_t *v73;
  int v74;
  size_t v75;
  const void *v76;
  size_t v77;
  int v78;
  _BOOL4 v79;
  void (***v80)(E5RT::IOPortPriv *__hidden);
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  _QWORD *v88;
  E5RT::OperandDescriptor *v89;
  E5RT::TensorDescriptor *v90;
  unint64_t v91;
  E5RT::TensorDataType::Impl **v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  _OWORD *v98;
  _OWORD *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  _OWORD *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  void (***v125)(E5RT::IOPortPriv *__hidden);
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  void *v136;
  void *exception;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t *v149;
  std::__shared_weak_count *v150;
  void *__p;
  char *v152;
  char *v153;
  void *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v157, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v154, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(&__p, 2, &v154);
    E5RT::E5RTError::E5RTError(exception, &v157, &__p);
  }
  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(a1 + 40))
  {
    v138 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v157, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v154, "Require new shapes for all inputs to reshape.");
    E5RT::Status::Status(&__p, 2, &v154);
    E5RT::E5RTError::E5RTError(v138, &v157, &__p);
  }
  v4 = *(uint64_t ***)(a2 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(a1 + 32);
    while (1)
    {
      v6 = *v5;
      if (!*v5)
        goto LABEL_124;
      v7 = *((char *)v4 + 39);
      v8 = v7 >= 0 ? *((unsigned __int8 *)v4 + 39) : (size_t)v4[3];
      v9 = v7 >= 0 ? (uint64_t *)(v4 + 2) : v4[2];
      v10 = a1 + 32;
      do
      {
        v11 = *(char *)(v6 + 55);
        if (v11 >= 0)
          v12 = *(unsigned __int8 *)(v6 + 55);
        else
          v12 = *(_QWORD *)(v6 + 40);
        if (v11 >= 0)
          v13 = (const void *)(v6 + 32);
        else
          v13 = *(const void **)(v6 + 32);
        if (v8 >= v12)
          v14 = v12;
        else
          v14 = v8;
        v15 = memcmp(v13, v9, v14);
        v16 = v12 < v8;
        if (v15)
          v16 = v15 < 0;
        v17 = !v16;
        if (v16)
          v18 = (uint64_t *)(v6 + 8);
        else
          v18 = (uint64_t *)v6;
        if (v17)
          v10 = v6;
        v6 = *v18;
      }
      while (*v18);
      if ((uint64_t *)v10 == v5)
        goto LABEL_124;
      v19 = *(char *)(v10 + 55);
      if (v19 >= 0)
        v20 = *(unsigned __int8 *)(v10 + 55);
      else
        v20 = *(_QWORD *)(v10 + 40);
      if (v19 >= 0)
        v21 = (const void *)(v10 + 32);
      else
        v21 = *(const void **)(v10 + 32);
      if (v20 >= v8)
        v22 = v8;
      else
        v22 = v20;
      v23 = memcmp(v9, v21, v22);
      v24 = v8 < v20;
      if (v23)
        v24 = v23 < 0;
      if (v24)
      {
LABEL_124:
        v87 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v157, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(&v154, "Unknown operand name given for reshaping.");
        E5RT::Status::Status(&__p, 2, &v154);
        E5RT::E5RTError::E5RTError(v87, &v157, &__p);
      }
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v10 + 56));
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        v139 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v157, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(&v154, "MLC op cannot reshape a surface descriptor.");
        E5RT::Status::Status(&__p, 2, &v154);
        E5RT::E5RTError::E5RTError(v139, &v157, &__p);
      }
      v26 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)PortDescriptorRef);
      v27 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v4[5]);
      TensorShape = (char **)E5RT::TensorDescriptor::GetTensorShape(v27);
      TensorStrides = (char **)E5RT::TensorDescriptor::GetTensorStrides(v27);
      Rank = E5RT::TensorDescriptor::GetRank(v26);
      if (Rank != E5RT::TensorDescriptor::GetRank(v27))
      {
        std::operator+<char>();
        v140 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v154, "ReshapeOperationInternal");
        E5RT::Status::Status(&__p, 2, &v157);
        E5RT::E5RTError::E5RTError(v140, &v154, &__p);
      }
      TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v26);
      v32 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v27);
      if (E5RT::operator!=(TensorDataTypeRef, v32))
      {
        std::operator+<char>();
        v141 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v154, "ReshapeOperationInternal");
        E5RT::Status::Status(&__p, 2, &v157);
        E5RT::E5RTError::E5RTError(v141, &v154, &__p);
      }
      v157 = 0;
      v158 = 0;
      v159 = 0;
      if (Rank)
        break;
      v34 = 0;
      v33 = 0;
      v36 = *TensorShape;
      v35 = TensorShape[1];
      if (*TensorShape != v35)
        goto LABEL_52;
LABEL_57:
      v48 = *TensorStrides;
      v47 = TensorStrides[1];
      if (*TensorStrides != v47)
      {
        v49 = v47 - v48 - 8;
        v50 = v33;
        v51 = *TensorStrides;
        if (v49 < 0x18)
          goto LABEL_196;
        v52 = (v49 >> 3) + 1;
        v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
        v50 = &v33[v53];
        v51 = &v48[v53];
        v54 = (__int128 *)(v48 + 16);
        v55 = v33 + 16;
        v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v57 = *v54;
          *(v55 - 1) = *(v54 - 1);
          *v55 = v57;
          v54 += 2;
          v55 += 2;
          v56 -= 4;
        }
        while (v56);
        if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_196:
          do
          {
            v58 = *(_QWORD *)v51;
            v51 += 8;
            *(_QWORD *)v50 = v58;
            v50 += 8;
          }
          while (v51 != v47);
        }
      }
      if ((mlc_services_model_set_tensor_shape() & 1) == 0)
      {
        std::operator+<char>();
        v142 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "ReshapeOperationInternal");
        E5RT::Status::Status(&v147, 2, &v154);
        E5RT::E5RTError::E5RTError(v142, &__p, &v147);
      }
      if (v33)
        operator delete(v33);
      if (v157)
        operator delete(v157);
      v4 = (uint64_t **)*v4;
      if (!v4)
        goto LABEL_69;
    }
    if (Rank >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v157 = (char *)operator new(8 * Rank);
    v159 = &v157[8 * Rank];
    bzero(v157, 8 * Rank);
    v158 = v159;
    v33 = (char *)operator new(8 * Rank);
    bzero(v33, 8 * Rank);
    v34 = v157;
    v36 = *TensorShape;
    v35 = TensorShape[1];
    if (*TensorShape == v35)
      goto LABEL_57;
LABEL_52:
    v37 = v35 - v36 - 8;
    v38 = v34;
    v39 = (uint64_t *)v36;
    if (v37 < 0x18)
      goto LABEL_197;
    v40 = (v37 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v38 = &v34[v41];
    v39 = (uint64_t *)&v36[v41];
    v42 = (__int128 *)(v36 + 16);
    v43 = v34 + 16;
    v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v42;
      *(v43 - 1) = *(v42 - 1);
      *v43 = v45;
      v42 += 2;
      v43 += 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_197:
      do
      {
        v46 = *v39++;
        *(_QWORD *)v38 = v46;
        v38 += 8;
      }
      while (v39 != (uint64_t *)v35);
    }
    goto LABEL_57;
  }
LABEL_69:
  if (!mlc_services_model_reshape())
  {
    v143 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v157, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v154, "MLC model reshape failed.");
    E5RT::Status::Status(&__p, 2, &v154);
    E5RT::E5RTError::E5RTError(v143, &v157, &__p);
  }
  v59 = *(uint64_t ***)(a2 + 16);
  if (v59)
  {
    v60 = (uint64_t *)(a1 + 32);
    do
    {
      v61 = *v60;
      if (!*v60)
        goto LABEL_112;
      v62 = *((char *)v59 + 39);
      v63 = v62 >= 0 ? *((unsigned __int8 *)v59 + 39) : (size_t)v59[3];
      v64 = v62 >= 0 ? (uint64_t *)(v59 + 2) : v59[2];
      v65 = a1 + 32;
      do
      {
        v66 = *(char *)(v61 + 55);
        if (v66 >= 0)
          v67 = *(unsigned __int8 *)(v61 + 55);
        else
          v67 = *(_QWORD *)(v61 + 40);
        if (v66 >= 0)
          v68 = (const void *)(v61 + 32);
        else
          v68 = *(const void **)(v61 + 32);
        if (v63 >= v67)
          v69 = v67;
        else
          v69 = v63;
        v70 = memcmp(v68, v64, v69);
        v71 = v67 < v63;
        if (v70)
          v71 = v70 < 0;
        v72 = !v71;
        if (v71)
          v73 = (uint64_t *)(v61 + 8);
        else
          v73 = (uint64_t *)v61;
        if (v72)
          v65 = v61;
        v61 = *v73;
      }
      while (*v73);
      if ((uint64_t *)v65 == v60)
        goto LABEL_112;
      v74 = *(char *)(v65 + 55);
      if (v74 >= 0)
        v75 = *(unsigned __int8 *)(v65 + 55);
      else
        v75 = *(_QWORD *)(v65 + 40);
      if (v74 >= 0)
        v76 = (const void *)(v65 + 32);
      else
        v76 = *(const void **)(v65 + 32);
      if (v75 >= v63)
        v77 = v63;
      else
        v77 = v75;
      v78 = memcmp(v64, v76, v77);
      v79 = v63 < v75;
      if (v78)
        v79 = v78 < 0;
      if (v79)
LABEL_112:
        v65 = a1 + 32;
      v80 = *(void (****)(E5RT::IOPortPriv *__hidden))(v65 + 56);
      if (!v80 || *v80 != &off_1E2D59AC8)
        v80 = 0;
      v81 = (std::__shared_weak_count *)v59[6];
      v149 = v59[5];
      v150 = v81;
      if (v81)
      {
        p_shared_owners = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(p_shared_owners);
        while (__stxr(v83 + 1, p_shared_owners));
      }
      E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v80, (uint64_t *)&v149);
      v84 = v150;
      if (v150)
      {
        v85 = (unint64_t *)&v150->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v59 = (uint64_t **)*v59;
    }
    while (v59);
  }
  v88 = *(_QWORD **)(a1 + 48);
  if (v88 != (_QWORD *)(a1 + 56))
  {
    while (1)
    {
      v89 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v88[7]);
      v90 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v89);
      v91 = E5RT::TensorDescriptor::GetRank(v90);
      v92 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v90);
      v157 = 0;
      v158 = 0;
      v93 = 8 * v91;
      v159 = 0;
      if (v91)
      {
        if (v91 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v94 = (char *)operator new(8 * v91);
        v95 = &v94[v93];
        v157 = v94;
        v159 = &v94[v93];
        bzero(v94, 8 * v91);
        v158 = v95;
        v96 = (char *)operator new(8 * v91);
        bzero(v96, 8 * v91);
        v97 = &v96[v93];
      }
      else
      {
        v97 = 0;
        v96 = 0;
      }
      if ((mlc_services_model_get_tensor_shape() & 1) == 0)
      {
        std::operator+<char>();
        v136 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "ReshapeOperationInternal");
        E5RT::Status::Status(&v147, 2, &v154);
        E5RT::E5RTError::E5RTError(v136, &__p, &v147);
      }
      v154 = 0;
      v155 = 0;
      v156 = 0;
      if (v91)
      {
        v98 = operator new(8 * v91);
        v154 = v98;
        v156 = (char *)v98 + 8 * v91;
        bzero(v98, 8 * v91);
        v155 = (char *)v98 + v93;
        v99 = operator new(8 * v91);
        __p = v99;
        v153 = (char *)v99 + 8 * v91;
        bzero(v99, 8 * v91);
        v152 = (char *)v99 + v93;
        v101 = v157;
        v100 = v158;
        if (v157 == v158)
          goto LABEL_143;
      }
      else
      {
        v99 = 0;
        v98 = 0;
        __p = 0;
        v152 = 0;
        v153 = 0;
        v101 = v157;
        v100 = v158;
        if (v157 == v158)
          goto LABEL_143;
      }
      v102 = v100 - v101 - 8;
      if (v102 < 0x18)
        break;
      v105 = (v102 >> 3) + 1;
      v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
      v103 = (_QWORD *)((char *)v98 + v106);
      v104 = &v101[v106];
      v107 = (__int128 *)(v101 + 16);
      v108 = v98 + 1;
      v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v110 = *v107;
        *(v108 - 1) = *(v107 - 1);
        *v108 = v110;
        v107 += 2;
        v108 += 2;
        v109 -= 4;
      }
      while (v109);
      if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_142;
LABEL_143:
      if (v96 == v97)
        goto LABEL_150;
      v112 = v97 - v96 - 8;
      if (v112 < 0x18)
      {
        v113 = v99;
        v114 = v96;
        do
        {
LABEL_149:
          v121 = *(_QWORD *)v114;
          v114 += 8;
          *v113++ = v121;
        }
        while (v114 != v97);
        goto LABEL_150;
      }
      v115 = (v112 >> 3) + 1;
      v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
      v113 = (_QWORD *)((char *)v99 + v116);
      v114 = &v96[v116];
      v117 = (__int128 *)(v96 + 16);
      v118 = v99 + 1;
      v119 = v115 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v120 = *v117;
        *(v118 - 1) = *(v117 - 1);
        *v118 = v120;
        v117 += 2;
        v118 += 2;
        v119 -= 4;
      }
      while (v119);
      if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_149;
LABEL_150:
      E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(v92, (uint64_t *)&v154, &__p, &v146);
      v122 = v146;
      v147 = v146;
      if (v146)
      {
        v123 = (std::__shared_weak_count *)operator new();
        v124 = v146;
        v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
        v123->__shared_owners_ = 0;
        v123->__shared_weak_owners_ = 0;
        v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
        v148 = v123;
        v125 = (void (***)(E5RT::IOPortPriv *__hidden))v88[7];
        if (v125)
          goto LABEL_154;
      }
      else
      {
        v123 = 0;
        v148 = 0;
        v125 = (void (***)(E5RT::IOPortPriv *__hidden))v88[7];
        if (v125)
        {
LABEL_154:
          if (*v125 == &off_1E2D59AC8)
            goto LABEL_156;
        }
      }
      v125 = 0;
LABEL_156:
      v144 = v122;
      v145 = v123;
      if (v123)
      {
        v126 = (unint64_t *)&v123->__shared_owners_;
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
      }
      E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v125, &v144);
      v128 = v145;
      if (!v145)
        goto LABEL_163;
      v129 = (unint64_t *)&v145->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
        v131 = v148;
        if (v148)
        {
LABEL_164:
          v132 = (unint64_t *)&v131->__shared_owners_;
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
      }
      else
      {
LABEL_163:
        v131 = v148;
        if (v148)
          goto LABEL_164;
      }
      if (__p)
      {
        v152 = (char *)__p;
        operator delete(__p);
      }
      if (v154)
      {
        v155 = (char *)v154;
        operator delete(v154);
      }
      if (v96)
        operator delete(v96);
      if (v157)
        operator delete(v157);
      v134 = (_QWORD *)v88[1];
      if (v134)
      {
        do
        {
          v135 = v134;
          v134 = (_QWORD *)*v134;
        }
        while (v134);
      }
      else
      {
        do
        {
          v135 = (_QWORD *)v88[2];
          v17 = *v135 == (_QWORD)v88;
          v88 = v135;
        }
        while (!v17);
      }
      v88 = v135;
      if (v135 == (_QWORD *)(a1 + 56))
        return;
    }
    v103 = v98;
    v104 = v101;
    do
    {
LABEL_142:
      v111 = *(_QWORD *)v104;
      v104 += 8;
      *v103++ = v111;
    }
    while (v104 != v100);
    goto LABEL_143;
  }
}

void sub_190F23BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)(v29 - 104);
  if (v31)
  {
    *(_QWORD *)(v29 - 96) = v31;
    operator delete(v31);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190F23F94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

E5RT::ExecutionStreamOperationInternal *E5RT::Ops::MlcCpuInferenceOperation::MlcCpuInferenceOperation(E5RT::ExecutionStreamOperationInternal *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *exception;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v21;
  _QWORD v23[3];
  _BYTE v24[8];
  void *v25[2];
  void *__p[2];
  int v27;

  *(_OWORD *)v25 = 0u;
  *(_OWORD *)__p = 0u;
  v27 = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v25);
  v7 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v8 = (void **)*v7;
        v9 = (std::__shared_weak_count *)v7[6];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (*((char *)v7 + 39) < 0)
          break;
        operator delete(v7);
        v7 = v8;
        if (!v8)
          goto LABEL_11;
      }
      operator delete(v7[2]);
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
LABEL_11:
  v12 = v25[0];
  v25[0] = 0;
  if (v12)
    operator delete(v12);
  *(_QWORD *)a1 = &off_1E2D5B9F8;
  *((_QWORD *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  v13 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(a1) + 16;
  while (1)
  {
    v13 = *(_QWORD *)v13;
    if (!v13)
      break;
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v13 + 40)))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v25, "MlcCpuInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v23, "MlcCpuInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v24, 1, v23);
      E5RT::E5RTError::E5RTError(exception, v25, v24);
    }
  }
  v15 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a1) + 16;
  while (1)
  {
    v15 = *(_QWORD *)v15;
    if (!v15)
      break;
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v15 + 40)))
    {
      v16 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v25, "MlcCpuInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v23, "MlcCpuInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v24, 1, v23);
      E5RT::E5RTError::E5RTError(v16, v25, v24);
    }
  }
  v17 = operator new();
  *(_OWORD *)v25 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  E5RT::Ops::MlcCpuInferenceOperation::Impl::Impl(v17, (uint64_t)a1, (uint64_t)v25);
  v18 = (std::__shared_weak_count *)v25[1];
  if (v25[1])
  {
    v19 = (unint64_t *)((char *)v25[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)a1 + 37);
  *((_QWORD *)a1 + 37) = v17;
  if (v21)
  {
    E5RT::Ops::MlcCpuInferenceOperation::Impl::~Impl(v21);
    MEMORY[0x19401CD90]();
  }
  *((_QWORD *)a1 + 29) |= 3uLL;
  kdebug_trace();
  return a1;
}

void sub_190F242B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::ExecutionStreamOperationInternal *v21;
  uint64_t v22;
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v24;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x19401CD90](v22, 0x10F2C40F8C5B503);
  kdebug_trace();
  v24 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)v21 + 37);
  *((_QWORD *)v21 + 37) = 0;
  if (v24)
  {
    E5RT::Ops::MlcCpuInferenceOperation::Impl::~Impl(v24);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::MlcCpuInferenceOperation::~MlcCpuInferenceOperation(E5RT::Ops::MlcCpuInferenceOperation *this)
{
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5B9F8;
  v2 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::MlcCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5B9F8;
  v2 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::MlcCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::GetOpCode(E5RT::Ops::MlcCpuInferenceOperation *this)
{
  return 7;
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::PrepareOpForEncode(E5RT::Ops::MlcCpuInferenceOperation::Impl **this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::MlcCpuInferenceOperation::Impl::PrepareOpForEncode(this[37]);
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_190F24554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::EncodeOperation(E5RT::Ops::MlcCpuInferenceOperation::Impl **this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::EncodeOperation((E5RT::ExecutionStreamOperationInternal *)this, a2, a3);
  E5RT::Ops::MlcCpuInferenceOperation::Impl::EncodeOperation(this[37]);
  return kdebug_trace();
}

void sub_190F24608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::ResetOperation(E5RT::Ops::MlcCpuInferenceOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  E5RT::Ops::MlcCpuInferenceOperation::Impl::ResetOperation(*((_QWORD *)this + 37));
  E5RT::ExecutionStreamOperationInternal::ResetOperation(this);
  return kdebug_trace();
}

void sub_190F246B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::MlcCpuInferenceOperation::Impl::ExecuteSync(this[37]);
  return kdebug_trace();
}

void sub_190F24750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::ReshapeOperationInternal(uint64_t *a1, uint64_t a2)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)a1);
  kdebug_trace();
  E5RT::Ops::MlcCpuInferenceOperation::Impl::ReshapeOperationInternal(a1[37], a2);
  return kdebug_trace();
}

void sub_190F24800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_190F24890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    v4 = *(std::__shared_weak_count **)(a2 + 64);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a2);
        return;
      }
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  _QWORD *v9;
  std::string *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, a2, &v18, &v17, a3);
  if (*v6)
    return (_QWORD *)*v6;
  v8 = v6;
  v9 = operator new(0x48uLL);
  v10 = (std::string *)(v9 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v9[6] = *(_QWORD *)(a4 + 16);
  }
  v11 = *(_QWORD *)(a4 + 32);
  v9[7] = *(_QWORD *)(a4 + 24);
  v9[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v18;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v14;
  *v8 = (uint64_t)v9;
  v15 = (uint64_t *)**a1;
  v16 = v9;
  if (v15)
  {
    *a1 = v15;
    v16 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_190F24A44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t **v38;
  _QWORD *v39;
  const void *v40;
  const void *v41;
  int v42;
  size_t v43;
  const void *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  int v48;
  _BOOL4 v49;
  uint64_t *v50;
  int v51;
  size_t v52;
  uint64_t *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  _QWORD *v60;
  const void *v61;
  const void *v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  _BOOL4 v68;
  int v69;
  _BOOL4 v70;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_20;
  v10 = *((char *)a2 + 55);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *((unsigned __int8 *)a2 + 55);
  else
    v14 = a2[5];
  if (v10 >= 0)
    v15 = a2 + 4;
  else
    v15 = (const void *)a2[4];
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v18 = v12 < v14;
  if (v17)
    v18 = v17 < 0;
  if (v18)
  {
LABEL_20:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      v20 = (uint64_t *)*a2;
      do
      {
        v21 = v20;
        v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      v26 = a2;
      do
      {
        v21 = (uint64_t *)v26[2];
        v27 = *v21 == (_QWORD)v26;
        v26 = v21;
      }
      while (v27);
    }
    v28 = *((char *)a5 + 23);
    v29 = *((char *)v21 + 55);
    if (v29 >= 0)
      v30 = *((unsigned __int8 *)v21 + 55);
    else
      v30 = v21[5];
    if (v29 >= 0)
      v31 = v21 + 4;
    else
      v31 = (const void *)v21[4];
    if (v28 >= 0)
      v32 = *((unsigned __int8 *)a5 + 23);
    else
      v32 = (size_t)a5[1];
    if (v28 >= 0)
      v33 = a5;
    else
      v33 = *a5;
    if (v32 >= v30)
      v34 = v30;
    else
      v34 = v32;
    v35 = memcmp(v31, v33, v34);
    v36 = v30 < v32;
    if (v35)
      v36 = v35 < 0;
    if (v36)
      goto LABEL_53;
    v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          v38 = (uint64_t **)v37;
          v41 = (const void *)v37[4];
          v39 = v37 + 4;
          v40 = v41;
          v42 = *((char *)v39 + 23);
          if (v42 >= 0)
            v43 = *((unsigned __int8 *)v39 + 23);
          else
            v43 = v39[1];
          if (v42 >= 0)
            v44 = v39;
          else
            v44 = v40;
          if (v43 >= v32)
            v45 = v32;
          else
            v45 = v43;
          v46 = memcmp(v33, v44, v45);
          v47 = v32 < v43;
          if (v46)
            v47 = v46 < 0;
          if (!v47)
            break;
          v37 = *v38;
          v8 = v38;
          if (!*v38)
            goto LABEL_74;
        }
        v48 = memcmp(v44, v33, v45);
        v49 = v43 < v32;
        if (v48)
          v49 = v48 < 0;
        if (!v49)
          break;
        v8 = v38 + 1;
        v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  v22 = memcmp(v15, v13, v16);
  v23 = v14 < v12;
  if (v22)
    v23 = v22 < 0;
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v24 = a2[1];
  if (v24)
  {
    v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      v27 = *a4 == v50;
      v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    v51 = *((char *)a4 + 55);
    if (v51 >= 0)
      v52 = *((unsigned __int8 *)a4 + 55);
    else
      v52 = (size_t)a4[5];
    if (v51 >= 0)
      v53 = (uint64_t *)(a4 + 4);
    else
      v53 = a4[4];
    if (v52 >= v12)
      v54 = v12;
    else
      v54 = v52;
    v55 = memcmp(v13, v53, v54);
    v56 = v12 < v52;
    if (v55)
      v56 = v55 < 0;
    if (!v56)
    {
      v57 = *v8;
      if (*v8)
      {
        v58 = a3;
        do
        {
          while (1)
          {
            v59 = (uint64_t **)v57;
            v62 = (const void *)v57[4];
            v60 = v57 + 4;
            v61 = v62;
            v63 = *((char *)v60 + 23);
            if (v63 >= 0)
              v64 = *((unsigned __int8 *)v60 + 23);
            else
              v64 = v60[1];
            if (v63 >= 0)
              v65 = v60;
            else
              v65 = v61;
            if (v64 >= v12)
              v66 = v12;
            else
              v66 = v64;
            v67 = memcmp(v13, v65, v66);
            v68 = v12 < v64;
            if (v67)
              v68 = v67 < 0;
            if (!v68)
              break;
            v57 = *v59;
            v8 = v59;
            if (!*v59)
              goto LABEL_119;
          }
          v69 = memcmp(v65, v13, v66);
          v70 = v64 < v12;
          if (v69)
            v70 = v69 < 0;
          if (!v70)
            break;
          v8 = v59 + 1;
          v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        v59 = v8;
        v58 = a3;
      }
LABEL_119:
      *v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t e5rt_e5_compiler_options_get_compute_device_types_mask(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9768;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F250A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_mil_entry_points(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC97E8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F25194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_retain_mil_entry_points(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC9868;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F25288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_enable_profiling(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC98E8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F25360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_enable_profiling(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9968;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F25434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_force_recompilation(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC99E8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F2550C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_force_recompilation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9A68;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F255E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_force_fetch_from_cache(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9AE8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F256B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_force_fetch_from_cache(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9B68;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F2578C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backend(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9BE8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F25864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backend(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9C68;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F25938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_force_bnns_graph(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9CE8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F25A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_force_bnns_graph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9D68;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F25AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_preferred_cpu_backends(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC9E68;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F25BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_preferred_cpu_backend(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9DE8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F25CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_preferred_cpu_backends(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC9EE8;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190F25DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9F68;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F25E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC9FE8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F25F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocations(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA068;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F26024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_states(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA0E8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F260FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_states(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA168;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F261D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocations(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA1E8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F262A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_force_classic_aot_old_hw(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA268;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F2637C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_force_classic_aot_old_hw(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA2E8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F26450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_custom_ane_compiler_options(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA368;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F26524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_custom_ane_compiler_options(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA3E8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F265F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shape(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA4E8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F266CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dim(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA568;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F267A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dim(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA5E8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F26878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inference(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA668;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F26950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inference(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA6E8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F26A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F26A60()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F26A74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC95E8;
  result[1] = v3;
  return result;
}

uint64_t sub_190F26AA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC95E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F26AC4(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  void *__p[2];
  char v8;
  void *v9;
  __int128 v10;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (uint64_t *)operator new();
    *v2 = 0;
    E5RT::E5CompilerOptions::Create((E5RT::E5CompilerOptions **)&v9);
    v3 = v9;
    v9 = 0;
    v4 = *v2;
    *v2 = (uint64_t)v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = v9;
      v9 = 0;
      if (v5)
        (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
    }
    result = 0;
    **(_QWORD **)(a1 + 8) = v2;
  }
  else
  {
    v9 = operator new(0x30uLL);
    v10 = xmmword_191A6F7A0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9);
    return 1;
  }
  return result;
}

void sub_190F26BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F26C5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_e5_compiler_options_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z31e5rt_e5_compiler_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_e5_compiler_options_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_e5_compiler_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F26CC8()
{
  return &unk_1E2DC9648;
}

void sub_190F26CD8()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F26CEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC9668;
  result[1] = v3;
  return result;
}

uint64_t sub_190F26D20(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC9668;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F26D3C(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *v2;
      *v2 = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      MEMORY[0x19401CD90](v2, 0x20C4093837F09);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A6FF90;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F26EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F26F1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_e5_compiler_options_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z32e5rt_e5_compiler_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_e5_compiler_options_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_e5_compiler_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F26F88()
{
  return &unk_1E2DC96C8;
}

void sub_190F26F98()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F26FAC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC96E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F26FE4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC96E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F27004(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  void *__p[2];
  char v36;
  _BYTE v37[24];
  void *v38;
  __int128 v39;

  if (!*(_QWORD *)(a1 + 16))
  {
    v38 = operator new(0x30uLL);
    v39 = xmmword_191A6F7A0;
    strcpy((char *)v38, "Invalid Function Argument: handle is NULL.");
    v37[23] = 10;
    strcpy(v37, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v38, (uint64_t *)v37);
    if ((v37[23] & 0x80000000) != 0)
      operator delete(*(void **)v37);
    if (SHIBYTE(v39) < 0)
      operator delete(v38);
    return 1;
  }
  v38 = 0;
  v39 = 0uLL;
  v2 = *(unint64_t **)(a1 + 8);
  v3 = *v2;
  if ((*v2 & 4) != 0)
  {
    v4 = (char *)operator new(8uLL);
    *(_QWORD *)v4 = 4;
    v5 = v4 + 8;
    v38 = v4;
    *((_QWORD *)&v39 + 1) = v4 + 8;
    v11 = *v2;
    *(_QWORD *)&v39 = v4 + 8;
    v3 = v11 & 0xFFFFFFFFFFFFFFFBLL;
    *v2 = v3;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      v6 = v4;
      v7 = v5;
      v8 = v5;
      if ((v3 & 1) == 0)
        goto LABEL_5;
      goto LABEL_29;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_4;
  }
  v12 = v5 - v4;
  v13 = (v5 - v4) >> 3;
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (v12 >> 2 > v14)
    v14 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v14;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
  }
  else
  {
    v16 = 0;
  }
  v6 = &v16[8 * v13];
  v7 = &v16[8 * v15];
  *(_QWORD *)v6 = 2;
  v8 = v6 + 8;
  if (v5 != v4)
  {
    v6 = &v16[v12 & 7];
    memcpy(v6, &v5[-(v12 & 0xFFFFFFFFFFFFFFF8)], v12 & 0xFFFFFFFFFFFFFFF8);
  }
  v38 = v6;
  *((_QWORD *)&v39 + 1) = v7;
  if (v4)
  {
    operator delete(v4);
    v2 = *(unint64_t **)(a1 + 8);
  }
  *(_QWORD *)&v39 = v8;
  v3 = *v2 & 0xFFFFFFFFFFFFFFFDLL;
  *v2 = v3;
  if ((v3 & 1) == 0)
  {
LABEL_5:
    if (v3)
    {
LABEL_6:
      *(_QWORD *)v37 = operator new(0x38uLL);
      *(_OWORD *)&v37[8] = xmmword_191A6F7D0;
      strcpy(*(char **)v37, "Invalid bits set in the provided allowed bit mask.");
      v36 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v37, (uint64_t *)__p);
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if ((v37[23] & 0x80000000) == 0)
        {
LABEL_8:
          v9 = 1;
          v10 = v38;
          if (!v38)
            return v9;
          goto LABEL_54;
        }
      }
      else if ((v37[23] & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)v37);
      v9 = 1;
      v10 = v38;
      if (!v38)
        return v9;
LABEL_54:
      *(_QWORD *)&v39 = v10;
      operator delete(v10);
      return v9;
    }
    goto LABEL_53;
  }
LABEL_29:
  if (v8 < v7)
  {
    *(_QWORD *)v8 = 1;
    v17 = v8 + 8;
    goto LABEL_52;
  }
  v18 = (v8 - v6) >> 3;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if ((v7 - v6) >> 2 > v19)
    v19 = (v7 - v6) >> 2;
  if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v19;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = operator new(8 * v20);
  }
  else
  {
    v21 = 0;
  }
  v22 = &v21[8 * v18];
  v23 = &v21[8 * v20];
  *v22 = 1;
  v17 = v22 + 1;
  if (v8 != v6)
  {
    v24 = v8 - v6 - 8;
    if (v24 < 0x58)
    {
      v25 = v8;
      goto LABEL_49;
    }
    if ((unint64_t)(v6 - v21) < 0x20)
    {
      v25 = v8;
      do
      {
LABEL_49:
        v32 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v22 = v32;
      }
      while (v25 != v6);
      goto LABEL_50;
    }
    v26 = (v24 >> 3) + 1;
    v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    v25 = &v8[-v27];
    v22 = (_QWORD *)((char *)v22 - v27);
    v28 = &v21[8 * v18 - 16];
    v29 = v8 - 16;
    v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_49;
  }
LABEL_50:
  v38 = v22;
  *((_QWORD *)&v39 + 1) = v23;
  if (v6)
  {
    operator delete(v6);
    v2 = *(unint64_t **)(a1 + 8);
  }
LABEL_52:
  *(_QWORD *)&v39 = v17;
  v33 = *v2 & 0xFFFFFFFFFFFFFFFELL;
  *v2 = v33;
  if (v33)
    goto LABEL_6;
LABEL_53:
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed(**(_QWORD **)(a1 + 16), (uint64_t)&v38);
  v9 = 0;
  v10 = v38;
  if (v38)
    goto LABEL_54;
  return v9;
}

void sub_190F27420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F274B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z54e5rt_e5_compiler_options_set_compute_device_types_maskE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z54e5rt_e5_compiler_options_set_compute_device_types_maskE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z54e5rt_e5_compiler_options_set_compute_device_types_maskE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z54e5rt_e5_compiler_options_set_compute_device_types_maskE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F27520()
{
  return &unk_1E2DC9748;
}

void sub_190F27530()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F27544(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9768;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2757C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9768;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2759C(uint64_t a1)
{
  const void ***v1;
  _QWORD *v3;
  uint64_t ComputeDeviceTypesAllowed;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p[2];
  char v11;
  void *v12;
  __int128 v13;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD **)(a1 + 16);
    if (v3)
    {
      *v3 = 0;
      ComputeDeviceTypesAllowed = E5RT::E5CompilerOptions::GetComputeDeviceTypesAllowed(*v1);
      v5 = *(_QWORD **)ComputeDeviceTypesAllowed;
      v6 = *(_QWORD **)(ComputeDeviceTypesAllowed + 8);
      if (*(_QWORD **)ComputeDeviceTypesAllowed != v6)
      {
        v7 = *(_QWORD **)(a1 + 16);
        do
        {
          if (*v5 <= 4uLL && ((1 << *v5) & 0x16) != 0)
            *v7 |= *v5;
          ++v5;
        }
        while (v5 != v6);
      }
      return 0;
    }
    else
    {
      v12 = operator new(0x30uLL);
      v13 = xmmword_191A72DA0;
      strcpy((char *)v12, "Invalid Function Argument: mask is NULL.");
      v11 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
      if (v11 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v13) < 0)
        operator delete(v12);
      return 1;
    }
  }
  else
  {
    v12 = operator new(0x30uLL);
    v13 = xmmword_191A6F7A0;
    strcpy((char *)v12, "Invalid Function Argument: handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v13) < 0)
      operator delete(v12);
    return 1;
  }
}

void sub_190F27760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F277A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z54e5rt_e5_compiler_options_get_compute_device_types_maskE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z54e5rt_e5_compiler_options_get_compute_device_types_maskE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z54e5rt_e5_compiler_options_get_compute_device_types_maskE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z54e5rt_e5_compiler_options_get_compute_device_types_maskE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2780C()
{
  return &unk_1E2DC97C8;
}

void sub_190F2781C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F27830(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC97E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F27870(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC97E8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F27898(_QWORD *a1)
{
  uint64_t *v1;
  unint64_t v3;
  __int128 v4;
  const char *v5;
  size_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void *v14;
  void *__p[2];
  unint64_t v17;
  void *v18;
  __int128 v19;

  v1 = (uint64_t *)a1[1];
  if (!v1)
  {
    v18 = operator new(0x30uLL);
    v19 = xmmword_191A6F7A0;
    strcpy((char *)v18, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v17) = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v18, (uint64_t *)__p);
LABEL_31:
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v19) < 0)
      operator delete(v18);
    return 1;
  }
  if (!a1[2])
  {
    v18 = operator new(0x38uLL);
    v19 = xmmword_191A764A0;
    strcpy((char *)v18, "Invalid Function Argument: entry_points is NULL.");
    HIBYTE(v17) = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v18, (uint64_t *)__p);
    goto LABEL_31;
  }
  v18 = 0;
  v19 = 0uLL;
  if (!a1[3])
    goto LABEL_19;
  v3 = 0;
  do
  {
    v5 = *(const char **)(a1[2] + 8 * v3);
    v6 = strlen(v5);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v10 = v6 | 7;
      v11 = v10 + 1;
      v8 = operator new(v10 + 1);
      __p[1] = v7;
      v17 = v11 | 0x8000000000000000;
      __p[0] = v8;
    }
    else
    {
      HIBYTE(v17) = v6;
      v8 = __p;
      if (!v6)
      {
        LOBYTE(__p[0]) = 0;
        v9 = v19;
        if ((unint64_t)v19 < *((_QWORD *)&v19 + 1))
          goto LABEL_5;
        goto LABEL_16;
      }
    }
    memmove(v8, v5, (size_t)v7);
    *((_BYTE *)v7 + (_QWORD)v8) = 0;
    v9 = v19;
    if ((unint64_t)v19 < *((_QWORD *)&v19 + 1))
    {
LABEL_5:
      v4 = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 16) = v17;
      *(_OWORD *)v9 = v4;
      *(_QWORD *)&v19 = v9 + 24;
      goto LABEL_6;
    }
LABEL_16:
    *(_QWORD *)&v19 = std::vector<std::string>::__push_back_slow_path<std::string>(&v18, (uint64_t)__p);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
LABEL_6:
    ++v3;
  }
  while (v3 < a1[3]);
  v1 = (uint64_t *)a1[1];
LABEL_19:
  E5RT::E5CompilerOptions::SetMilEntryPoints(*v1, (uint64_t *)&v18);
  v12 = (void **)v18;
  if (v18)
  {
    v13 = (void **)v19;
    v14 = v18;
    if ((void *)v19 != v18)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v12);
      v14 = v18;
    }
    *(_QWORD *)&v19 = v12;
    operator delete(v14);
  }
  return 0;
}

void sub_190F27B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F27BD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_set_mil_entry_pointsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_set_mil_entry_pointsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_set_mil_entry_pointsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_set_mil_entry_pointsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F27C40()
{
  return &unk_1E2DC9848;
}

void sub_190F27C50()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F27C64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC9868;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F27CA4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9868;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F27CCC(uint64_t a1)
{
  const void ***v1;
  _QWORD *MilEntryPoints;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t **v7;
  void *__p[2];
  char v10;
  void *v11;
  __int128 v12;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        MilEntryPoints = (_QWORD *)E5RT::E5CompilerOptions::GetMilEntryPoints(*v1);
        v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(MilEntryPoints[1] - *MilEntryPoints) >> 3);
        **(_QWORD **)(a1 + 24) = v4;
        **(_QWORD **)(a1 + 16) = malloc_type_malloc(8 * v4, 0x50040EE9192B6uLL);
        if (**(_QWORD **)(a1 + 24))
        {
          v5 = 0;
          v6 = 0;
          do
          {
            v7 = (uint64_t **)(*MilEntryPoints + v5);
            if (*((char *)v7 + 23) < 0)
              v7 = (uint64_t **)*v7;
            *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v6++) = v7;
            v5 += 24;
          }
          while (v6 < **(_QWORD **)(a1 + 24));
        }
        return 0;
      }
      else
      {
        v11 = operator new(0x38uLL);
        v12 = xmmword_191A764A0;
        strcpy((char *)v11, "Invalid Function Argument: num_elements is NULL.");
        v10 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
        if (v10 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v12) < 0)
          operator delete(v11);
        return 1;
      }
    }
    else
    {
      v11 = operator new(0x38uLL);
      v12 = xmmword_191A764A0;
      strcpy((char *)v11, "Invalid Function Argument: entry_points is NULL.");
      v10 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v12) < 0)
        operator delete(v11);
      return 1;
    }
  }
  else
  {
    v11 = operator new(0x30uLL);
    v12 = xmmword_191A6F7A0;
    strcpy((char *)v11, "Invalid Function Argument: handle is NULL.");
    v10 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11);
    return 1;
  }
}

void sub_190F27F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F27FB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_e5_compiler_options_retain_mil_entry_pointsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z48e5rt_e5_compiler_options_retain_mil_entry_pointsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_e5_compiler_options_retain_mil_entry_pointsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_e5_compiler_options_retain_mil_entry_pointsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F28024()
{
  return &unk_1E2DC98C8;
}

void sub_190F28034()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F28048(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC98E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F28080(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC98E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F280A0(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetEnableProfiling(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F28178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F281B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_set_enable_profilingE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_set_enable_profilingE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_set_enable_profilingE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_set_enable_profilingE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F28220()
{
  return &unk_1E2DC9948;
}

void sub_190F28230()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F28244(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2827C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2829C(uint64_t a1)
{
  const void ***v1;
  char EnableProfiling;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      EnableProfiling = E5RT::E5CompilerOptions::GetEnableProfiling(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = EnableProfiling;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F28418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F28458(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_get_enable_profilingE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_get_enable_profilingE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_get_enable_profilingE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_get_enable_profilingE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F284C4()
{
  return &unk_1E2DC99C8;
}

void sub_190F284D4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F284E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC99E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F28520(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC99E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F28540(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetForceRecompilation(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F28618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F28654(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_e5_compiler_options_set_force_recompilationE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z48e5rt_e5_compiler_options_set_force_recompilationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_e5_compiler_options_set_force_recompilationE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_e5_compiler_options_set_force_recompilationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F286C0()
{
  return &unk_1E2DC9A48;
}

void sub_190F286D0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F286E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9A68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2871C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9A68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2873C(uint64_t a1)
{
  const void ***v1;
  char ForceRecompilation;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ForceRecompilation = E5RT::E5CompilerOptions::GetForceRecompilation(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ForceRecompilation;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F288B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F288F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_e5_compiler_options_get_force_recompilationE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z48e5rt_e5_compiler_options_get_force_recompilationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_e5_compiler_options_get_force_recompilationE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_e5_compiler_options_get_force_recompilationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F28964()
{
  return &unk_1E2DC9AC8;
}

void sub_190F28974()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F28988(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9AE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F289C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9AE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F289E0(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetForceFetchFromCache(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F28AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F28AF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_e5_compiler_options_set_force_fetch_from_cacheE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z51e5rt_e5_compiler_options_set_force_fetch_from_cacheE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_e5_compiler_options_set_force_fetch_from_cacheE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_e5_compiler_options_set_force_fetch_from_cacheE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F28B60()
{
  return &unk_1E2DC9B48;
}

void sub_190F28B70()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F28B84(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9B68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F28BBC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9B68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F28BDC(uint64_t a1)
{
  const void ***v1;
  char v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = E5RT::E5CompilerOptions::GetForceFetchFromCache(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = v3;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F28D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F28D98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_e5_compiler_options_get_force_fetch_from_cacheE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z51e5rt_e5_compiler_options_get_force_fetch_from_cacheE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_e5_compiler_options_get_force_fetch_from_cacheE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_e5_compiler_options_get_force_fetch_from_cacheE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F28E04()
{
  return &unk_1E2DC9BC8;
}

void sub_190F28E14()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F28E28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9BE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F28E60(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9BE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F28E80(uint64_t a1)
{
  E5RT::E5CompilerOptions **v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalForceClassicCpuBackend(*v1, *(unsigned __int8 *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F28F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F28F94(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z67e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backendE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z67e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backendE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z67e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backendE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z67e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backendE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F29000()
{
  return &unk_1E2DC9C48;
}

void sub_190F29010()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F29024(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9C68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2905C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9C68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2907C(uint64_t a1)
{
  const void ***v1;
  BOOL ExperimentalForceClassicCpuBackend;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ExperimentalForceClassicCpuBackend = E5RT::E5CompilerOptions::GetExperimentalForceClassicCpuBackend(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ExperimentalForceClassicCpuBackend;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F291F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F29238(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z67e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backendE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z67e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backendE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z67e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backendE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z67e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backendE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F292A4()
{
  return &unk_1E2DC9CC8;
}

void sub_190F292B4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F292C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F29300(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F29320(uint64_t a1)
{
  E5RT::E5CompilerOptions **v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetForceBNNSGraph(*v1, *(unsigned __int8 *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F293F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F29434(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_set_force_bnns_graphE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_set_force_bnns_graphE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_set_force_bnns_graphE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_set_force_bnns_graphE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F294A0()
{
  return &unk_1E2DC9D48;
}

void sub_190F294B0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F294C4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9D68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F294FC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9D68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2951C(uint64_t a1)
{
  const void ***v1;
  BOOL ForceBNNSGraph;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ForceBNNSGraph = E5RT::E5CompilerOptions::GetForceBNNSGraph(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ForceBNNSGraph;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F29698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F296D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_get_force_bnns_graphE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_get_force_bnns_graphE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_get_force_bnns_graphE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_get_force_bnns_graphE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F29744()
{
  return &unk_1E2DC9DC8;
}

void sub_190F29754()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F29768(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9DE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F297A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9DE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F297C0(uint64_t a1)
{
  void *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  __int128 v14;
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = 0;
  v2 = *(void **)(a1 + 8);
  v3 = (void **)operator new(0x20uLL);
  *v3 = &off_1E2DC9EE8;
  v3[1] = v2;
  v3[2] = &v11;
  v3[3] = &v12;
  v15 = v3;
  v4 = E5RT::ExceptionSafeExecute((uint64_t)&v13);
  v5 = v15;
  if (v15 == &v13)
  {
    v6 = 4;
    v5 = &v13;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v6 = 5;
  }
  (*((void (**)(void))*v5 + v6))();
LABEL_6:
  if ((_DWORD)v4)
    return v4;
  if (v11 != 1)
  {
    v13 = operator new(0x20uLL);
    v14 = xmmword_191A72610;
    strcpy((char *)v13, "Multiple CPU backends are set.");
    v10 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        return 1;
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v13);
    return 1;
  }
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v4 = 0;
    *v7 = *v12;
  }
  else
  {
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A6F7B0;
    strcpy((char *)v13, "Invalid Function Argument: cpu_backend is NULL.");
    v10 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
  return v4;
}

void sub_190F299FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F29A80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z50e5rt_e5_compiler_options_get_preferred_cpu_backendE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z50e5rt_e5_compiler_options_get_preferred_cpu_backendE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z50e5rt_e5_compiler_options_get_preferred_cpu_backendE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50e5rt_e5_compiler_options_get_preferred_cpu_backendE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F29AEC()
{
  return &unk_1E2DC9E48;
}

void sub_190F29AFC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F29B10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC9E68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F29B50(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9E68;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F29B78(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  uint64_t v18[2];
  char v19;
  _BYTE __dst[24];
  void *__p;
  __int128 v22;

  v1 = (uint64_t *)a1[1];
  if (v1)
  {
    if (a1[2])
    {
      __p = 0;
      v22 = 0uLL;
      if (!a1[3])
      {
LABEL_20:
        E5RT::E5CompilerOptions::SetPreferredCpuBackends(*v1, (uint64_t *)&__p);
        v13 = 0;
        v14 = (void **)__p;
        if (!__p)
          return v13;
        goto LABEL_21;
      }
      v3 = 0;
      while (1)
      {
        v5 = a1[2];
        v6 = *(const void **)(v5 + 8 * v3);
        if (!v6)
        {
          *(_QWORD *)__dst = operator new(0x38uLL);
          *(_OWORD *)&__dst[8] = xmmword_191A6FF80;
          strcpy(*(char **)__dst, "Invalid Function Argument: cpu_backends[i] is NULL.");
          v19 = 10;
          strcpy((char *)v18, "operator()");
          E5RT::LogErrorMessage((uint64_t *)__dst, v18);
          if (v19 < 0)
            operator delete((void *)v18[0]);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v13 = 1;
          v14 = (void **)__p;
          if (!__p)
            return v13;
LABEL_21:
          v15 = (void **)v22;
          v16 = v14;
          if ((void **)v22 != v14)
          {
            do
            {
              if (*((char *)v15 - 1) < 0)
                operator delete(*(v15 - 3));
              v15 -= 3;
            }
            while (v15 != v14);
            v16 = __p;
          }
          *(_QWORD *)&v22 = v14;
          operator delete(v16);
          return v13;
        }
        v7 = strlen(*(const char **)(v5 + 8 * v3));
        if (v7 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v8 = v7;
        if (v7 >= 0x17)
        {
          v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v11 = v7 | 7;
          v12 = v11 + 1;
          v9 = operator new(v11 + 1);
          *(_QWORD *)&__dst[8] = v8;
          *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
          *(_QWORD *)__dst = v9;
        }
        else
        {
          __dst[23] = v7;
          v9 = __dst;
          if (!v7)
          {
            __dst[0] = 0;
            v10 = v22;
            if ((unint64_t)v22 >= *((_QWORD *)&v22 + 1))
              goto LABEL_17;
            goto LABEL_5;
          }
        }
        memmove(v9, v6, v8);
        v9[v8] = 0;
        v10 = v22;
        if ((unint64_t)v22 >= *((_QWORD *)&v22 + 1))
        {
LABEL_17:
          *(_QWORD *)&v22 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)__dst);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_5:
        v4 = *(_OWORD *)__dst;
        *(_QWORD *)(v10 + 16) = *(_QWORD *)&__dst[16];
        *(_OWORD *)v10 = v4;
        *(_QWORD *)&v22 = v10 + 24;
LABEL_6:
        if ((unint64_t)++v3 >= a1[3])
        {
          v1 = (uint64_t *)a1[1];
          goto LABEL_20;
        }
      }
    }
    __p = operator new(0x38uLL);
    v22 = xmmword_191A764A0;
    strcpy((char *)__p, "Invalid Function Argument: cpu_backends is NULL.");
    __dst[23] = 10;
    strcpy(__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, (uint64_t *)__dst);
  }
  else
  {
    __p = operator new(0x30uLL);
    v22 = xmmword_191A6F7A0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    __dst[23] = 10;
    strcpy(__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, (uint64_t *)__dst);
  }
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  return 1;
}

void sub_190F29EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F29F9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_e5_compiler_options_set_preferred_cpu_backendsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z51e5rt_e5_compiler_options_set_preferred_cpu_backendsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_e5_compiler_options_set_preferred_cpu_backendsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_e5_compiler_options_set_preferred_cpu_backendsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2A008()
{
  return &unk_1E2DC9EC8;
}

void sub_190F2A018()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2A02C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC9EE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190F2A06C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9EE8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2A094(uint64_t a1)
{
  const void ***v1;
  _QWORD *PreferredCpuBackends;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t **v7;
  void *__p[2];
  char v10;
  void *v11;
  __int128 v12;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        PreferredCpuBackends = (_QWORD *)E5RT::E5CompilerOptions::GetPreferredCpuBackends(*v1);
        v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(PreferredCpuBackends[1] - *PreferredCpuBackends) >> 3);
        **(_QWORD **)(a1 + 16) = v4;
        **(_QWORD **)(a1 + 24) = malloc_type_malloc(8 * v4, 0x50040EE9192B6uLL);
        if (**(_QWORD **)(a1 + 16))
        {
          v5 = 0;
          v6 = 0;
          do
          {
            v7 = (uint64_t **)(*PreferredCpuBackends + v5);
            if (*((char *)v7 + 23) < 0)
              v7 = (uint64_t **)*v7;
            *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8 * v6++) = v7;
            v5 += 24;
          }
          while (v6 < **(_QWORD **)(a1 + 16));
        }
        return 0;
      }
      else
      {
        v11 = operator new(0x38uLL);
        v12 = xmmword_191A764A0;
        strcpy((char *)v11, "Invalid Function Argument: cpu_backends is NULL.");
        v10 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
        if (v10 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v12) < 0)
          operator delete(v11);
        return 1;
      }
    }
    else
    {
      v11 = operator new(0x38uLL);
      v12 = xmmword_191A764A0;
      strcpy((char *)v11, "Invalid Function Argument: num_elements is NULL.");
      v10 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v12) < 0)
        operator delete(v11);
      return 1;
    }
  }
  else
  {
    v11 = operator new(0x30uLL);
    v12 = xmmword_191A6F7A0;
    strcpy((char *)v11, "Invalid Function Argument: handle is NULL.");
    v10 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11);
    return 1;
  }
}

void sub_190F2A33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2A380(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_e5_compiler_options_get_preferred_cpu_backendsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z51e5rt_e5_compiler_options_get_preferred_cpu_backendsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_e5_compiler_options_get_preferred_cpu_backendsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_e5_compiler_options_get_preferred_cpu_backendsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2A3EC()
{
  return &unk_1E2DC9F48;
}

void sub_190F2A3FC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2A410(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9F68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2A448(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9F68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2A468(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatterns(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F2A540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2A57C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patternsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z71e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patternsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patternsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patternsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2A5E8()
{
  return &unk_1E2DC9FC8;
}

void sub_190F2A5F8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2A60C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC9FE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2A644(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC9FE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2A664(uint64_t a1)
{
  const void ***v1;
  char ExperimentalMatchE5MinimalCpuPatterns;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ExperimentalMatchE5MinimalCpuPatterns = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatterns(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ExperimentalMatchE5MinimalCpuPatterns;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F2A7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2A820(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patternsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z71e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patternsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patternsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patternsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2A88C()
{
  return &unk_1E2DCA048;
}

void sub_190F2A89C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2A8B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA068;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2A8E8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA068;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2A908(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetEnableReshapeWithMinimalAllocations(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F2A9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2AA1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z68e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocationsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z68e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocationsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z68e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocationsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z68e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocationsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2AA88()
{
  return &unk_1E2DCA0C8;
}

void sub_190F2AA98()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2AAAC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA0E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2AAE4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA0E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2AB04(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatternsForStates(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F2ABDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2AC18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z82e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z82e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z82e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z82e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2AC84()
{
  return &unk_1E2DCA148;
}

void sub_190F2AC94()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2ACA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2ACE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2AD00(uint64_t a1)
{
  const void ***v1;
  char ExperimentalMatchE5MinimalCpuPatternsForStates;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ExperimentalMatchE5MinimalCpuPatternsForStates = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatternsForStates(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ExperimentalMatchE5MinimalCpuPatternsForStates;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F2AE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2AEBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z82e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z82e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z82e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z82e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2AF28()
{
  return &unk_1E2DCA1C8;
}

void sub_190F2AF38()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2AF4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA1E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2AF84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA1E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2AFA4(uint64_t a1)
{
  const void ***v1;
  char EnableReshapeWithMinimalAllocations;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      EnableReshapeWithMinimalAllocations = E5RT::E5CompilerOptions::GetEnableReshapeWithMinimalAllocations(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = EnableReshapeWithMinimalAllocations;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F2B120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2B160(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z68e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocationsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z68e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocationsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z68e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocationsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z68e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocationsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2B1CC()
{
  return &unk_1E2DCA248;
}

void sub_190F2B1DC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2B1F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2B228(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2B248(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetForceClassicAotOldHw(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F2B320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2B35C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_e5_compiler_options_set_force_classic_aot_old_hwE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z53e5rt_e5_compiler_options_set_force_classic_aot_old_hwE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_e5_compiler_options_set_force_classic_aot_old_hwE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_e5_compiler_options_set_force_classic_aot_old_hwE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2B3C8()
{
  return &unk_1E2DCA2C8;
}

void sub_190F2B3D8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2B3EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA2E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2B424(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA2E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2B444(uint64_t a1)
{
  const void ***v1;
  char ForceClassicAotOldHw;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ForceClassicAotOldHw = E5RT::E5CompilerOptions::GetForceClassicAotOldHw(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ForceClassicAotOldHw;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F2B5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2B600(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_e5_compiler_options_get_force_classic_aot_old_hwE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z53e5rt_e5_compiler_options_get_force_classic_aot_old_hwE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_e5_compiler_options_get_force_classic_aot_old_hwE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_e5_compiler_options_get_force_classic_aot_old_hwE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2B66C()
{
  return &unk_1E2DCA348;
}

void sub_190F2B67C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2B690(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2B6C8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2B6E8(uint64_t a1)
{
  uint64_t *v1;
  const void *v2;
  uint64_t v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  void *__dst;
  __int128 v13;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      v3 = *v1;
      v4 = strlen(*(const char **)(a1 + 16));
      if (v4 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v5 = v4;
      if (v4 >= 0x17)
      {
        v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v7 = v4 | 7;
        v8 = v7 + 1;
        p_dst = (void **)operator new(v7 + 1);
        *(_QWORD *)&v13 = v5;
        *((_QWORD *)&v13 + 1) = v8 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v13) = v4;
        p_dst = &__dst;
        if (!v4)
          goto LABEL_11;
      }
      memcpy(p_dst, v2, v5);
LABEL_11:
      *((_BYTE *)p_dst + v5) = 0;
      E5RT::E5CompilerOptions::SetCustomAneCompilerOptions(v3, (uint64_t)&__dst);
      if (SHIBYTE(v13) < 0)
        operator delete(__dst);
      return 0;
    }
    __dst = operator new(0x30uLL);
    v13 = xmmword_191A6FF90;
    strcpy((char *)__dst, "Invalid Function Argument: options is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    __dst = operator new(0x30uLL);
    v13 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190F2B8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190F2B920(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z56e5rt_e5_compiler_options_set_custom_ane_compiler_optionsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z56e5rt_e5_compiler_options_set_custom_ane_compiler_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z56e5rt_e5_compiler_options_set_custom_ane_compiler_optionsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z56e5rt_e5_compiler_options_set_custom_ane_compiler_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2B98C()
{
  return &unk_1E2DCA3C8;
}

void sub_190F2B99C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2B9B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA3E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2B9E8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA3E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2BA08(uint64_t a1)
{
  const void ***v1;
  uint64_t CustomAneCompilerOptions;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      CustomAneCompilerOptions = E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(*v1);
      result = 0;
      if (*(char *)(CustomAneCompilerOptions + 23) < 0)
        CustomAneCompilerOptions = *(_QWORD *)CustomAneCompilerOptions;
      **(_QWORD **)(a1 + 16) = CustomAneCompilerOptions;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FF90;
      strcpy((char *)v7, "Invalid Function Argument: options is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F2BB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2BBD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z56e5rt_e5_compiler_options_get_custom_ane_compiler_optionsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z56e5rt_e5_compiler_options_get_custom_ane_compiler_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z56e5rt_e5_compiler_options_get_custom_ane_compiler_optionsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z56e5rt_e5_compiler_options_get_custom_ane_compiler_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2BC40()
{
  return &unk_1E2DCA448;
}

void sub_190F2BC50()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2BC64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2BC9C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2BCBC(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalDisableDataDependentShape(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F2BD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2BDD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z70e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shapeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z70e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z70e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shapeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z70e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2BE3C()
{
  return &unk_1E2DCA4C8;
}

void sub_190F2BE4C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2BE60(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA4E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2BE98(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA4E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2BEB8(uint64_t a1)
{
  const void ***v1;
  char ExperimentalDisableDataDependentShape;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ExperimentalDisableDataDependentShape = E5RT::E5CompilerOptions::GetExperimentalDisableDataDependentShape(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ExperimentalDisableDataDependentShape;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FF90;
      strcpy((char *)v7, "Invalid Function Argument: disable is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F2C034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2C074(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z70e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shapeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z70e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z70e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shapeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z70e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2C0E0()
{
  return &unk_1E2DCA548;
}

void sub_190F2C0F0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2C104(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2C13C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2C15C(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalEnableDefaultFunctionForRangeDim(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F2C234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2C270(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z79e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dimE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z79e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dimE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z79e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dimE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z79e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dimE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2C2DC()
{
  return &unk_1E2DCA5C8;
}

void sub_190F2C2EC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2C300(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2C338(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2C358(uint64_t a1)
{
  const void ***v1;
  char ExperimentalEnableDefaultFunctionForRangeDim;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ExperimentalEnableDefaultFunctionForRangeDim = E5RT::E5CompilerOptions::GetExperimentalEnableDefaultFunctionForRangeDim(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ExperimentalEnableDefaultFunctionForRangeDim;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F2C4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2C514(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z79e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dimE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z79e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dimE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z79e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dimE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z79e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dimE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2C580()
{
  return &unk_1E2DCA648;
}

void sub_190F2C590()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2C5A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2C5DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2C5FC(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F2C6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2C710(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z86e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z86e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z86e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z86e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2C77C()
{
  return &unk_1E2DCA6C8;
}

void sub_190F2C78C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F2C7A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCA6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F2C7D8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCA6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F2C7F8(uint64_t a1)
{
  const void ***v1;
  char ExperimentalDisableCompileTimeMPSGraphTypeInference;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ExperimentalDisableCompileTimeMPSGraphTypeInference = E5RT::E5CompilerOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = ExperimentalDisableCompileTimeMPSGraphTypeInference;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FF90;
      strcpy((char *)v7, "Invalid Function Argument: disable is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F2C974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F2C9B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z86e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z86e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z86e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z86e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F2CA20()
{
  return &unk_1E2DCA748;
}

double E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel(E5RT::Ops::E5MinimalCpu::BaseKernel *this)
{
  double result;

  *(_QWORD *)this = off_1E2D5B308;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  return result;
}

void E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(E5RT::Ops::E5MinimalCpu::BaseKernel *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = off_1E2D5B308;
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    operator delete(v4);
  }
  v5 = (void **)*((_QWORD *)this + 3);
  if (v5)
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_18:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    operator delete(v6);
}

uint64_t *E5RT::Ops::E5MinimalCpu::BaseKernel::CheckName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *result;
  void *exception;
  _BYTE v5[24];
  _BYTE v6[8];
  _QWORD v7[3];

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a3, a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "CheckName");
    std::operator+<char>();
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return result;
}

void sub_190F2CBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t *v4;
  void *MemoryObjectRef;
  void *result;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a3, (uint64_t)a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v4[5]);
  result = E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetBuffer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" memory object is not a buffer", a2, v8);
    E5RT::Status::Status(v9, 1, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  return result;
}

void sub_190F2CD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, _QWORD *a3@<X8>)
{
  int v6;
  size_t v7;
  _QWORD *result;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  char *v14;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  result = (_QWORD *)strlen(__s);
  v9 = (unint64_t)result + v7;
  if ((unint64_t)result + v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (size_t)result;
  if (v9 <= 0x16)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_BYTE *)a3 + 23) = v9;
    if (!v7)
      goto LABEL_15;
LABEL_11:
    if (v6 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    result = memmove(a3, v13, v7);
    goto LABEL_15;
  }
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v11 = v9 | 7;
  v12 = v11 + 1;
  result = operator new(v11 + 1);
  a3[1] = v9;
  a3[2] = v12 | 0x8000000000000000;
  *a3 = result;
  a3 = result;
  if (v7)
    goto LABEL_11;
LABEL_15:
  v14 = (char *)a3 + v7;
  if (v10)
    result = memmove(v14, __s, v10);
  v14[v10] = 0;
  return result;
}

void *E5RT::Ops::E5MinimalCpu::BaseKernel::GetTensorDescriptor(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *exception;
  _QWORD v11[3];
  _BYTE v12[8];
  E5RT::OperandDescriptor *v13;
  std::__shared_weak_count *v14;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a3, (uint64_t)a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v4[5], &v13);
  v5 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v13);
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "GetTensorDescriptor");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not a tensor", a2, v11);
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(exception, &v13, v12);
  }
  return v5;
}

void sub_190F2CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F2CFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::JitCallOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *InputPorts;
  uint64_t OutputPorts;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v22;
  void *exception;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD v28[3];
  _BYTE v29[8];
  __int128 *v30[3];

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  v5 = a1 + 8;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a4 + 24))
  {
    if (*((char *)a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
    }
    else
    {
      v6 = *a4;
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (!*(_QWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "Op params not specified.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(exception, v30, v29);
  }
  v7 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v10 = InputPorts[3];
  if (!v10)
  {
    v24 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "No inputs specified.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(v24, v30, v29);
  }
  v11 = (_QWORD *)OutputPorts;
  v12 = *(_QWORD *)(OutputPorts + 24);
  if (!v12)
  {
    v25 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "No outputs specified.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(v25, v30, v29);
  }
  v13 = *(_QWORD **)v5;
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 56) - *(_QWORD *)(*(_QWORD *)v5 + 48)) >> 3);
  v15 = *(_QWORD *)(*(_QWORD *)v5 + 72);
  v16 = *(_QWORD *)(*(_QWORD *)v5 + 80);
  if (v14 != 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3))
  {
    v26 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "Mismatch in # of params and # of args for JitCall op.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(v26, v30, v29);
  }
  if (v14 != v12 + v10 + v7[3])
  {
    v27 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "# of args must be equal to # of input ports + # of output ports.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(v27, v30, v29);
  }
  if (v16 != v15)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v15 + v17)&& !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v11, v13[9] + v17)&& !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v7, v13[9] + v17))
      {
        v22 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
        std::operator+<char>();
        E5RT::Status::Status(v29, 1, v28);
        E5RT::E5RTError::E5RTError(v22, v30, v29);
      }
      v19 = v13[6];
      v30[0] = (__int128 *)(v13[9] + v17);
      v20 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 56, (uint64_t)v30[0], (uint64_t)&std::piecewise_construct, v30);
      std::string::operator=((std::string *)(v20 + 5), (const std::string *)(v19 + v17));
      ++v18;
      v15 = v13[9];
      v17 += 24;
    }
    while (v18 < 0xAAAAAAAAAAAAAAABLL * ((v13[10] - v15) >> 3));
  }
  return a1;
}

void sub_190F2D4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  void **v28;

  if (*(_BYTE *)(v27 + 48))
  {
    if (*(char *)(v27 + 47) < 0)
      operator delete(*v28);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void E5RT::Ops::JitCallOperation::Impl::~Impl(E5RT::Ops::JitCallOperation::Impl *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void **v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void **)*((_QWORD *)this + 9);
      if (!v5)
        goto LABEL_8;
      while (1)
      {
LABEL_18:
        v10 = (void **)*v5;
        if (*((char *)v5 + 63) < 0)
        {
          operator delete(v5[5]);
          if (*((char *)v5 + 39) < 0)
LABEL_22:
            operator delete(v5[2]);
        }
        else if (*((char *)v5 + 39) < 0)
        {
          goto LABEL_22;
        }
        operator delete(v5);
        v5 = v10;
        if (!v10)
          goto LABEL_8;
      }
    }
  }
  v5 = (void **)*((_QWORD *)this + 9);
  if (v5)
    goto LABEL_18;
LABEL_8:
  v6 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    operator delete(v6);
  if (*((_BYTE *)this + 48) && *((char *)this + 47) < 0)
  {
    operator delete(*((void **)this + 3));
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v7)
      return;
  }
  else
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v7)
      return;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::Ops::JitCallOperation::Impl::ValidatePortsMatchWithCalleeFunction(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t InputPorts;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  const void *PortDescriptorRef;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  void *v27;
  void *v28;
  void *v29;
  std::string *v30;
  __int128 v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  std::string *v41;
  __int128 v42;
  void *v43;
  std::string *v44;
  __int128 v45;
  void *exception;
  void *v47;
  uint64_t v48;
  std::string v49;
  std::string v50;
  __int128 v51;
  std::string::size_type v52;

  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
  result = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*a1);
  if (v4[3] != *(_QWORD *)(InputPorts + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
    std::string::basic_string[abi:ne180100]<0>(&v50, "Callee MIL function has different # of inputs than JITCall op.");
    E5RT::Status::Status(&v49, 1, &v50);
    E5RT::E5RTError::E5RTError(exception, &v51, &v49);
  }
  v8 = result;
  if (v5[3] != *(_QWORD *)(result + 24))
  {
    v47 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
    std::string::basic_string[abi:ne180100]<0>(&v50, "Callee MIL function has different # of outputs than JITCall op.");
    E5RT::Status::Status(&v49, 1, &v50);
    E5RT::E5RTError::E5RTError(v47, &v51, &v49);
  }
  v9 = InputPorts + 16;
  v10 = a1 + 7;
  while (1)
  {
    v9 = *(_QWORD *)v9;
    if (!v9)
      break;
    v11 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v10, v9 + 16);
    if (!v11)
LABEL_44:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(v4, (uint64_t)(v11 + 5));
    if (!v12)
    {
      v38 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
      std::operator+<char>();
      E5RT::Status::Status(&v49, 1, &v50);
      E5RT::E5RTError::E5RTError(v38, &v51, &v49);
    }
    v13 = v12;
    PortDescriptorRef = (const void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v9 + 40));
    result = E5RT::OperandDescriptor::operator!=(PortDescriptorRef, (const void *)v13[5]);
    if ((_DWORD)result)
    {
      std::operator+<char>();
      v15 = std::string::append(&v49, " arg = ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = *(char *)(v9 + 39);
      if (v17 >= 0)
        v18 = (const std::string::value_type *)(v9 + 16);
      else
        v18 = *(const std::string::value_type **)(v9 + 16);
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(v9 + 39);
      else
        v19 = *(_QWORD *)(v9 + 24);
      v20 = std::string::append(&v50, v18, v19);
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v52 = v20->__r_.__value_.__r.__words[2];
      v51 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      v22 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v50, "ValidatePortsMatchWithCalleeFunction");
      E5RT::Status::Status(&v49, 1, &v51);
      E5RT::E5RTError::E5RTError(v22, &v50, &v49);
    }
  }
  v23 = v8 + 16;
  while (1)
  {
    v23 = *(_QWORD *)v23;
    if (!v23)
      return result;
    v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v10, v23 + 16);
    if (!v24)
      goto LABEL_44;
    v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(v5, (uint64_t)(v24 + 5));
    if (!v25)
    {
      v39 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
      std::operator+<char>();
      E5RT::Status::Status(&v49, 1, &v50);
      E5RT::E5RTError::E5RTError(v39, &v51, &v49);
    }
    v26 = v25;
    v27 = (void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v23 + 40));
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v27))
    {
      v40 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
      std::operator+<char>();
      v41 = std::string::append(&v49, ". Not currently supported.");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(&v48, 1, &v50);
      E5RT::E5RTError::E5RTError(v40, &v51, &v48);
    }
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor((void *)v26[5]))
    {
      v43 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
      std::operator+<char>();
      v44 = std::string::append(&v49, ". Not currently supported.");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(&v48, 1, &v50);
      E5RT::E5RTError::E5RTError(v43, &v51, &v48);
    }
    v28 = E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v26[5]);
    v29 = E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v27);
    result = E5RT::operator!=((uint64_t)v28, (uint64_t)v29);
    if ((_DWORD)result)
    {
      std::operator+<char>();
      v30 = std::string::append(&v49, " arg = ");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = *(char *)(v23 + 39);
      if (v32 >= 0)
        v33 = (const std::string::value_type *)(v23 + 16);
      else
        v33 = *(const std::string::value_type **)(v23 + 16);
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(v23 + 39);
      else
        v34 = *(_QWORD *)(v23 + 24);
      v35 = std::string::append(&v50, v33, v34);
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v52 = v35->__r_.__value_.__r.__words[2];
      v51 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      v37 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v50, "ValidatePortsMatchWithCalleeFunction");
      E5RT::Status::Status(&v49, 1, &v51);
      E5RT::E5RTError::E5RTError(v37, &v50, &v49);
    }
  }
}

void sub_190F2DE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v29 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void E5RT::Ops::JitCallOperation::Impl::EncodeOperation(E5RT::ExecutionStreamOperationInternal **this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  uint64_t **i;
  uint64_t v7;
  uint64_t *v8;
  uint64_t InputPortRef;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t **j;
  uint64_t v14;
  uint64_t *v15;
  uint64_t OutputPortRef;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t **k;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t DependentAsyncEvents;
  E5RT::ExecutionStreamOperationInternal *v28;
  uint64_t HasInternalCompletionEventBound;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *__p[2];
  void *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  for (i = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16); i; i = (uint64_t **)*i)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)i[5]) & 1) == 0)
    {
      v7 = (uint64_t)this[12];
      v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(this + 7, (uint64_t)(i + 2));
      if (!v8)
LABEL_46:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      InputPortRef = E5RT::ExecutionStreamOperationInternal::GetInputPortRef(v7, (uint64_t)(v8 + 5));
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)i[5], &v47);
      E5RT::IOPort::BindMemoryObject(InputPortRef, (uint64_t)&v47);
      v10 = v48;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  for (j = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this) + 16); j; j = (uint64_t **)*j)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)j[5]) & 1) == 0)
    {
      v14 = (uint64_t)this[12];
      v15 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(this + 7, (uint64_t)(j + 2));
      if (!v15)
        goto LABEL_46;
      OutputPortRef = E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(v14, (uint64_t)(v15 + 5));
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)j[5], &v45);
      E5RT::IOPort::BindMemoryObject(OutputPortRef, (uint64_t)&v45);
      v17 = v46;
      if (v46)
      {
        v18 = (unint64_t *)&v46->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  for (k = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*this) + 16); k; k = (uint64_t **)*k)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)k[5]) & 1) == 0)
    {
      v21 = (uint64_t)this[12];
      v22 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(this + 7, (uint64_t)(k + 2));
      if (!v22)
        goto LABEL_46;
      v23 = E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(v21, (uint64_t)(v22 + 5));
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)k[5], &v43);
      E5RT::IOPort::BindMemoryObject(v23, (uint64_t)&v43);
      v24 = v44;
      if (v44)
      {
        v25 = (unint64_t *)&v44->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
  DependentAsyncEvents = E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*this);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::unordered_set((uint64_t)__p, DependentAsyncEvents);
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, void **))(*(_QWORD *)this[12] + 48))(this[12], __p);
  v28 = this[12];
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent((uint64_t)*this, &v39);
  HasInternalCompletionEventBound = E5RT::ExecutionStreamOperationInternal::HasInternalCompletionEventBound(*this);
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, uint64_t *, uint64_t))(*(_QWORD *)v28 + 64))(v28, &v39, HasInternalCompletionEventBound);
  v30 = v40;
  if (v40)
  {
    v31 = (unint64_t *)&v40->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, const E5RT::ExecutionStreamConfigOptions *, uint64_t))(*(_QWORD *)this[12] + 72))(this[12], a2, a3);
  v33 = v42;
  if (v42)
  {
    do
    {
      v35 = v33;
      v33 = (_QWORD *)*v33;
      v36 = (std::__shared_weak_count *)v35[3];
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      operator delete(v35);
    }
    while (v33);
  }
  v34 = __p[0];
  __p[0] = 0;
  if (v34)
    operator delete(v34);
}

void sub_190F2E3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_190F2E418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F2E42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F2E440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F2E454(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

const void **E5RT::Ops::JitCallOperation::Impl::PrepareOpForEncode(E5RT::Ops::JitCallOperation::Impl *this)
{
  E5RT::E5CompilerOptions *v2;
  uint64_t v3;
  E5RT::E5Compiler *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  uint64_t Compiler;
  char *v9;
  _QWORD *ExportedFunctions;
  uint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  E5RT::ExecutionStreamOperationInternal *v19;
  _QWORD *v20;
  E5RT::ExecutionStreamOperationInternal *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  E5RT::ExecutionStreamOperationInternal *v25;
  E5RT::Ops::PreCompiledComputeOperation *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string::size_type v30;
  const void **result;
  E5RT::ExecutionStreamOperationInternal *v32;
  void *v33;
  std::__shared_weak_count *v34;
  E5RT::Ops::PreCompiledComputeOperation *v35;
  void *__p;
  std::__shared_weak_count *v37;
  const void **v38;
  std::string v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  E5RT::E5CompilerOptions::Create((E5RT::E5CompilerOptions **)&v38);
  v2 = (E5RT::E5CompilerOptions *)v38;
  v3 = *((_QWORD *)this + 1);
  if (*(char *)(v3 + 47) < 0)
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v3 + 24), *(_QWORD *)(v3 + 32));
  else
    v39 = *(std::string *)(v3 + 24);
  std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v39, 1uLL);
  E5RT::E5CompilerOptions::SetMilEntryPoints((uint64_t)v2, (uint64_t *)&__p);
  v5 = (std::__shared_weak_count *)__p;
  if (__p)
  {
    v6 = v37;
    v7 = __p;
    if (v37 != __p)
    {
      do
      {
        if (SHIBYTE(v6[-1].__shared_weak_owners_) < 0)
          operator delete(v6[-1].__vftable);
        --v6;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v37 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  Compiler = E5RT::E5Compiler::GetCompiler(v4);
  if (*((_BYTE *)this + 48))
    v9 = (char *)this + 24;
  else
    v9 = (char *)*((_QWORD *)this + 1);
  E5RT::E5Compiler::Compile(Compiler, (std::string::size_type)v9, v38, (uint64_t *)&v39);
  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions((E5RT::ProgramLibrary *)v39.__r_.__value_.__l.__data_);
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, *((_QWORD *)this + 1) + 24);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v12 = (void *)v11[5];
  v13 = (unint64_t *)v11[6];
  __p = v12;
  v37 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = v13 + 1;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  E5RT::Ops::JitCallOperation::Impl::ValidatePortsMatchWithCalleeFunction((E5RT::ExecutionStreamOperationInternal **)this, (uint64_t)v12);
  v33 = v12;
  v34 = (std::__shared_weak_count *)v13;
  __p = 0;
  v37 = 0;
  E5RT::PrecompiledComputeOpCreateOptions::Create(&v33, &v35);
  v16 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(v35, &v32);
  v19 = v32;
  if (v32)
  {
    v20 = (_QWORD *)operator new();
    v21 = v32;
    *v20 = &off_1E2DC3318;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v21;
    v32 = 0;
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 12) = v19;
    *((_QWORD *)this + 13) = v20;
    if (!v22)
      goto LABEL_34;
  }
  else
  {
    v32 = 0;
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
    if (!v22)
      goto LABEL_34;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_34:
  v25 = v32;
  v32 = 0;
  if (v25)
    (*(void (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)v25 + 8))(v25);
  v26 = v35;
  v35 = 0;
  if (v26)
    (*(void (**)(E5RT::Ops::PreCompiledComputeOperation *))(*(_QWORD *)v26 + 8))(v26);
  v27 = v37;
  if (v37)
  {
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v39.__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = 0;
  if (v30)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v30 + 8))(v30);
  result = v38;
  v38 = 0;
  if (result)
    return (const void **)(*((uint64_t (**)(const void **))*result + 1))(result);
  return result;
}

void sub_190F2E7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a16)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

E5RT::ExecutionStreamOperationInternal *E5RT::Ops::JitCallOperation::JitCallOperation(E5RT::ExecutionStreamOperationInternal *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  E5RT::Ops::JitCallOperation::Impl **v10;
  E5RT::Ops::JitCallOperation::Impl **v11;
  E5RT::Ops::JitCallOperation::Impl *v12;
  E5RT::Ops::JitCallOperation::Impl *v13;
  E5RT::Ops::JitCallOperation::Impl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  E5RT::Ops::JitCallOperation::Impl *v21[2];
  __int128 v22;
  __int128 v23;

  v10 = (E5RT::Ops::JitCallOperation::Impl **)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, a6);
  *v10 = (E5RT::Ops::JitCallOperation::Impl *)&off_1E2D5B618;
  v11 = v10 + 37;
  v10[37] = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)v10);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  v21[1] = (E5RT::Ops::JitCallOperation::Impl *)0x2B23830000000000;
  v22 = 0u;
  v23 = 0u;
  kdebug_trace();
  std::make_unique[abi:ne180100]<E5RT::Ops::JitCallOperation::Impl,E5RT::Ops::JitCallOperation&,std::shared_ptr<JitCallOpT const>,std::optional<std::string> &>((uint64_t)a1, a3, a7, (uint64_t *)v21);
  v12 = v21[0];
  v21[0] = 0;
  v13 = *v11;
  *v11 = v12;
  if (v13)
  {
    E5RT::Ops::JitCallOperation::Impl::~Impl(v13);
    MEMORY[0x19401CD90]();
    v14 = v21[0];
    v21[0] = 0;
    if (v14)
    {
      E5RT::Ops::JitCallOperation::Impl::~Impl(v14);
      MEMORY[0x19401CD90](v15, 0x10F2C4057798EFFLL, v16, v17, v18, v19);
    }
  }
  *((_QWORD *)a1 + 29) |= 1uLL;
  kdebug_trace();
  return a1;
}

void sub_190F2EA0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  E5RT::ExecutionStreamOperationInternal *v2;
  E5RT::Ops::JitCallOperation::Impl **v3;
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::JitCallOperation::Impl>>::~propagate_const(v3);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v2);
  _Unwind_Resume(a1);
}

void sub_190F2EA30(_Unwind_Exception *a1)
{
  E5RT::ExecutionStreamOperationInternal *v1;
  E5RT::Ops::JitCallOperation::Impl **v2;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::JitCallOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<E5RT::Ops::JitCallOperation::Impl,E5RT::Ops::JitCallOperation&,std::shared_ptr<JitCallOpT const>,std::optional<std::string> &>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;
  char v13;
  __int128 v14;

  v8 = operator new();
  v14 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v13 = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    v13 = 1;
  }
  E5RT::Ops::JitCallOperation::Impl::Impl(v8, a1, (uint64_t)&v14, (__int128 *)&__p);
  *a4 = v8;
  if (v13 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_190F2EB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  MEMORY[0x19401CD90](v19, 0x10F2C4057798EFFLL);
  _Unwind_Resume(a1);
}

E5RT::Ops::JitCallOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::JitCallOperation::Impl>>::~propagate_const(E5RT::Ops::JitCallOperation::Impl **a1)
{
  E5RT::Ops::JitCallOperation::Impl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::JitCallOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void E5RT::Ops::JitCallOperation::~JitCallOperation(E5RT::Ops::JitCallOperation *this)
{
  E5RT::Ops::JitCallOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5B618;
  v2 = (E5RT::Ops::JitCallOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::JitCallOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::JitCallOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5B618;
  v2 = (E5RT::Ops::JitCallOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::JitCallOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::Ops::JitCallOperation::GetOpCode(E5RT::Ops::JitCallOperation *this)
{
  return 13;
}

uint64_t E5RT::Ops::JitCallOperation::GetCalleeOperation@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 296);
  v4 = *(_QWORD *)(v2 + 96);
  v3 = *(_QWORD *)(v2 + 104);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

uint64_t E5RT::Ops::JitCallOperation::EncodeOperation(E5RT::ExecutionStreamOperationInternal ***this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::EncodeOperation((E5RT::ExecutionStreamOperationInternal *)this, a2, a3);
  E5RT::Ops::JitCallOperation::Impl::EncodeOperation(this[37], a2, a3);
  return kdebug_trace();
}

void sub_190F2ED98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::JitCallOperation::PrepareOpForEncode(E5RT::Ops::JitCallOperation::Impl **this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::JitCallOperation::Impl::PrepareOpForEncode(this[37]);
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_190F2EE34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::JitCallOperation::ResetOperation(E5RT::Ops::JitCallOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 37) + 96) + 80))(*(_QWORD *)(*((_QWORD *)this + 37) + 96));
  E5RT::ExecutionStreamOperationInternal::ResetOperation(this);
  return kdebug_trace();
}

void sub_190F2EEE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::JitCallOperation::ExecuteSync(E5RT::Ops::JitCallOperation *this)
{
  void *exception;
  char *v2;
  __int128 v3;
  _BYTE v4[8];
  char v5[24];

  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 11;
  strcpy(v5, "ExecuteSync");
  v2 = (char *)operator new(0x28uLL);
  v3 = xmmword_191A78120;
  strcpy(v2, "JITCall Op cannot be executed directly.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_190F2EFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v23)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_190F2F01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F2F00CLL);
}

void E5RT::Ops::JitCallOperation::SubmitAsync()
{
  void *exception;
  char *v1;
  __int128 v2;
  _BYTE v3[8];
  char v4[24];

  exception = __cxa_allocate_exception(0x18uLL);
  v4[23] = 11;
  strcpy(v4, "SubmitAsync");
  v1 = (char *)operator new(0x28uLL);
  v2 = xmmword_191A78120;
  strcpy(v1, "JITCall Op cannot be executed directly.");
  E5RT::Status::Status(v3, 2, &v1);
  E5RT::E5RTError::E5RTError(exception, v4, v3);
}

void sub_190F2F100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v23)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_190F2F160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F2F150);
}

uint64_t std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_190F2F4C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F2F4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperationInternal  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperationInternal  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperationInternal  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT32ExecutionStreamOperationInternalEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT32ExecutionStreamOperationInternalEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT32ExecutionStreamOperationInternalEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT32ExecutionStreamOperationInternalEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::Impl::Impl(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, id **a7, uint64_t a8, char a9, char a10, uint64_t a11)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  const void **v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *InputPorts;
  _QWORD *OutputPorts;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  void *PortDescriptorRef;
  uint64_t *v32;
  E5RT::IOPortImpl **v33;
  void *v34;
  uint64_t i;
  uint64_t v36;
  uint64_t *v37;
  E5RT::IOPortImpl **v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *exception;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  _QWORD v71[3];
  _BYTE v72[8];
  _QWORD v73[3];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = *a3;
  v13 = a3[1];
  *(_QWORD *)(a1 + 16) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a6;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  v16 = (void **)(a1 + 208);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = objc_opt_new();
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 320, a8);
  *(_BYTE *)(a1 + 360) = a9;
  *(_BYTE *)(a1 + 361) = a10;
  *(_QWORD *)(a1 + 368) = a11;
  std::vector<std::string>::reserve((std::vector<std::string> *)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)(a1 + 96), *(_QWORD *)(a1 + 104), *(std::string **)(a1 + 24), *(std::string **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)(a1 + 96), *(_QWORD *)(a1 + 104), *(std::string **)(a1 + 72), *(std::string **)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3));
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(const void ***)(a1 + 104);
  v19 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v17) >> 3));
  if (v18 == (const void **)v17)
    v20 = 0;
  else
    v20 = v19;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v17, v18, (uint64_t)v73, v20, 1);
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v23 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v25 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 32);
  if (InputPorts[3] != 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v71, "Input count doesn't match ordered E5 input count.");
    E5RT::Status::Status(v72, 1, v71);
    E5RT::E5RTError::E5RTError(exception, v73, v72);
  }
  v26 = OutputPorts[3];
  if (!v26)
  {
    v65 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v71, "No outputs specified.");
    E5RT::Status::Status(v72, 1, v71);
    E5RT::E5RTError::E5RTError(v65, v73, v72);
  }
  v28 = *(_QWORD *)(a1 + 48);
  v27 = *(_QWORD *)(a1 + 56);
  if (v26 != 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 3))
  {
    v66 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v71, "Output count doesn't match ordered E5 output count.");
    E5RT::Status::Status(v72, 1, v71);
    E5RT::E5RTError::E5RTError(v66, v73, v72);
  }
  v29 = (_QWORD *)v23;
  if (*(_QWORD *)(v23 + 24) != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3))
  {
    v67 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v71, "InOut count doesn't match ordered E5 inOut count.");
    E5RT::Status::Status(v72, 1, v71);
    E5RT::E5RTError::E5RTError(v67, v73, v72);
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    v68 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v71, "Op params not specified.");
    E5RT::Status::Status(v72, 1, v71);
    E5RT::E5RTError::E5RTError(v68, v73, v72);
  }
  if (v25 != v24)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v25))
      {
        v56 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
        std::string::basic_string[abi:ne180100]<0>(v71, "Input port corresponding to E5 input in ordered list not found.");
        E5RT::Status::Status(v72, 2, v71);
        E5RT::E5RTError::E5RTError(v56, v73, v72);
      }
      v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v25);
      if (!v30)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v30[5]);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        v57 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
        std::string::basic_string[abi:ne180100]<0>(v71, "Input surface ports aren't supported with MPS Graph inference yet.");
        E5RT::Status::Status(v72, 2, v71);
        E5RT::E5RTError::E5RTError(v57, v73, v72);
      }
      v25 += 24;
    }
    while (v25 != v24);
    v28 = *(_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(a1 + 56);
  }
  while (v28 != v27)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v28))
    {
      v58 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v71, "Output port corresponding to E5 output in ordered list not found.");
      E5RT::Status::Status(v72, 2, v71);
      E5RT::E5RTError::E5RTError(v58, v73, v72);
    }
    v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v28);
    if (!v32)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v33 = (E5RT::IOPortImpl **)v32[5];
    if (!v33)
    {
      v59 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v71, "Invalid output port.");
      E5RT::Status::Status(v72, 1, v71);
      E5RT::E5RTError::E5RTError(v59, v73, v72);
    }
    v34 = (void *)E5RT::IOPort::GetPortDescriptorRef(v33);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v34))
    {
      v60 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v71, "Output surface ports aren't supported with MPS Graph inference yet.");
      E5RT::Status::Status(v72, 2, v71);
      E5RT::E5RTError::E5RTError(v60, v73, v72);
    }
    v28 += 24;
  }
  v36 = *(_QWORD *)(a1 + 72);
  for (i = *(_QWORD *)(a1 + 80); v36 != i; v36 += 24)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v29, v36))
    {
      v61 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v71, "InOut port corresponding to E5 inOut in ordered list not found.");
      E5RT::Status::Status(v72, 2, v71);
      E5RT::E5RTError::E5RTError(v61, v73, v72);
    }
    v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v29, v36);
    if (!v37)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v38 = (E5RT::IOPortImpl **)v37[5];
    if (!v38)
    {
      v62 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v71, "Invalid inOut port.");
      E5RT::Status::Status(v72, 1, v71);
      E5RT::E5RTError::E5RTError(v62, v73, v72);
    }
    v39 = (void *)E5RT::IOPort::GetPortDescriptorRef(v38);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v39))
    {
      v63 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v71, "InOut surface ports aren't supported with MPS Graph inference yet.");
      E5RT::Status::Status(v72, 2, v71);
      E5RT::E5RTError::E5RTError(v63, v73, v72);
    }
  }
  if (a7)
  {
    E5RT::ComputeGPUDevice::GetMTLDevice(a7);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v40 = MTLCreateSystemDefaultDevice();
  }
  v41 = v40;
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  if (!v42 || v42 == objc_msgSend(v40, "registryID"))
    objc_storeStrong((id *)(a1 + 280), v41);
  if (!*(_QWORD *)(a1 + 280))
  {
    v69 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v73, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v71, "Target MTLDevice not found.");
    E5RT::Status::Status(v72, 11, v71);
    E5RT::E5RTError::E5RTError(v69, v73, v72);
  }
  v43 = objc_alloc_init(MEMORY[0x1E0CC7638]);
  v44 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v43;

  objc_msgSend(*(id *)(a1 + 136), "setWaitUntilCompleted:", 0);
  if (*(_QWORD *)(a1 + 368) >= 2uLL)
    objc_msgSend(*(id *)(a1 + 136), "setMaximumNumberOfEncodingThreads:");
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 56))
  {
    objc_msgSend(*(id *)(a1 + 136), "setEnableProfilingOpNames:", 1);
    objc_msgSend(*(id *)(a1 + 136), "setBreakUpMetalEncoders:", 1);
    objc_msgSend(*(id *)(a1 + 136), "setBriefProfilingOpNames:", 1);
  }
  v45 = objc_opt_new();
  v46 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v45;

  v47 = objc_opt_new();
  v48 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v47;

  v49 = objc_opt_new();
  v50 = *v16;
  *v16 = (void *)v49;

  v51 = objc_opt_new();
  v52 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v51;

  v53 = objc_opt_new();
  v54 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v53;

  return a1;
}

{
  return E5RT::Ops::MpsGraphInferenceOperation::Impl::Impl(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_190F302D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  char *v31;
  char *v32;
  void *v33;
  id *v34;
  id *v35;
  void *v36;
  void **v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;
  std::__shared_weak_count *v46;
  void **v47;
  void **v48;
  void *v49;
  void **v50;
  void *v51;
  void **v52;
  void *v53;
  void **v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;

  v31 = *(char **)(v28 + 336);
  if (!v31)
  {
LABEL_8:
    v33 = *a10;
    *a10 = 0;
    if (v33)
      operator delete(v33);

    v34 = *(id **)(v28 + 248);
    if (v34)
    {
      do
      {
        v35 = (id *)*v34;

        operator delete(v34);
        v34 = v35;
      }
      while (v35);
    }
    v36 = *(void **)(v28 + 232);
    *(_QWORD *)(v28 + 232) = 0;
    if (v36)
      operator delete(v36);

    v37 = *(void ***)(v28 + 184);
    if (v37)
    {
      do
      {
        v47 = (void **)*v37;
        if (*((char *)v37 + 39) < 0)
          operator delete(v37[2]);
        operator delete(v37);
        v37 = v47;
      }
      while (v47);
    }
    v38 = *v29;
    *v29 = 0;
    if (v38)
      operator delete(v38);

    v39 = *(std::__shared_weak_count **)(v28 + 128);
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (void **)*a14;
    if (*a14)
    {
      v48 = *(void ***)(v28 + 104);
      v49 = *a14;
      if (v48 != v42)
      {
        do
        {
          if (*((char *)v48 - 1) < 0)
            operator delete(*(v48 - 3));
          v48 -= 3;
        }
        while (v48 != v42);
        v49 = *a14;
      }
      *(_QWORD *)(v28 + 104) = v42;
      operator delete(v49);
      v43 = (void **)*a12;
      if (!*a12)
      {
LABEL_24:
        v44 = (void **)*a13;
        if (!*a13)
          goto LABEL_25;
        goto LABEL_45;
      }
    }
    else
    {
      v43 = (void **)*a12;
      if (!*a12)
        goto LABEL_24;
    }
    v50 = *(void ***)(v28 + 80);
    v51 = v43;
    if (v50 != v43)
    {
      do
      {
        if (*((char *)v50 - 1) < 0)
          operator delete(*(v50 - 3));
        v50 -= 3;
      }
      while (v50 != v43);
      v51 = *a12;
    }
    *(_QWORD *)(v28 + 80) = v43;
    operator delete(v51);
    v44 = (void **)*a13;
    if (!*a13)
    {
LABEL_25:
      v45 = (void **)*a11;
      if (!*a11)
        goto LABEL_26;
      goto LABEL_52;
    }
LABEL_45:
    v52 = *(void ***)(v28 + 56);
    v53 = v44;
    if (v52 != v44)
    {
      do
      {
        if (*((char *)v52 - 1) < 0)
          operator delete(*(v52 - 3));
        v52 -= 3;
      }
      while (v52 != v44);
      v53 = *a13;
    }
    *(_QWORD *)(v28 + 56) = v44;
    operator delete(v53);
    v45 = (void **)*a11;
    if (!*a11)
    {
LABEL_26:
      v46 = *(std::__shared_weak_count **)(v28 + 16);
      if (!v46)
        goto LABEL_63;
      goto LABEL_59;
    }
LABEL_52:
    v54 = *(void ***)(v28 + 32);
    v55 = v45;
    if (v54 != v45)
    {
      do
      {
        if (*((char *)v54 - 1) < 0)
          operator delete(*(v54 - 3));
        v54 -= 3;
      }
      while (v54 != v45);
      v55 = *a11;
    }
    *(_QWORD *)(v28 + 32) = v45;
    operator delete(v55);
    v46 = *(std::__shared_weak_count **)(v28 + 16);
    if (!v46)
LABEL_63:
      _Unwind_Resume(a1);
LABEL_59:
    v56 = (unint64_t *)&v46->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      _Unwind_Resume(a1);
    }
    goto LABEL_63;
  }
  while (1)
  {
    v32 = *(char **)v31;
    if (v31[63] < 0)
    {
      operator delete(*((void **)v31 + 5));
      if ((v31[39] & 0x80000000) == 0)
        goto LABEL_4;
LABEL_7:
      operator delete(*((void **)v31 + 2));
      operator delete(v31);
      v31 = v32;
      if (!v32)
        goto LABEL_8;
    }
    else
    {
      if (v31[39] < 0)
        goto LABEL_7;
LABEL_4:
      operator delete(v31);
      v31 = v32;
      if (!v32)
        goto LABEL_8;
    }
  }
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateOutputDtypeSizeForTensorBuffer(E5RT::Ops::MpsGraphInferenceOperation::Impl *this)
{
  uint64_t v2;
  char v3;
  std::string *v4;
  uint64_t v5;
  std::__fs::filesystem::path::__string_view v6;
  std::string *v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  std::__fs::filesystem::path::__string_view v10;
  int v11;
  uint64_t MILProgram;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  MIL::IRMemoryLayoutValueType *v27;
  MIL::IRTensorBufferValueType *v28;
  int DataType;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *exception;
  __int128 v35;
  _BYTE v36[8];
  __int128 v37;
  std::string __dst[2];
  std::__fs::filesystem::path v39;
  std::__fs::filesystem::path v40;

  v2 = *((_QWORD *)this + 1);
  memset(&v40, 0, sizeof(v40));
  v3 = *(_BYTE *)(v2 + 23);
  if (v3 >= 0)
    v4 = (std::string *)v2;
  else
    v4 = *(std::string **)v2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(v2 + 23);
  else
    v5 = *(_QWORD *)(v2 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&v40.__pn_, v4, (std::string *)((char *)v4 + v5));
  v6 = std::__fs::filesystem::path::__extension(&v40);
  if (v6.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6.__size_ >= 0x17)
  {
    v8 = (v6.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6.__size_ | 7) != 0x17)
      v8 = v6.__size_ | 7;
    v9 = v8 + 1;
    v7 = (std::string *)operator new(v8 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v6.__size_;
    __dst[0].__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_14;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v6.__size_;
  v7 = __dst;
  if (v6.__size_)
LABEL_14:
    memmove(v7, v6.__data_, v6.__size_);
  v7->__r_.__value_.__s.__data_[v6.__size_] = 0;
  v39 = (std::__fs::filesystem::path)__dst[0];
  memset(__dst, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__dst, (std::string *)".mpsgraphpackage", (std::string *)"");
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10.__data_ = (const std::string_view::value_type *)__dst;
  else
    v10.__data_ = (const std::string_view::value_type *)__dst[0].__r_.__value_.__r.__words[0];
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10.__size_ = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
  else
    v10.__size_ = __dst[0].__r_.__value_.__l.__size_;
  v11 = std::__fs::filesystem::path::__compare(&v39, v10);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if (!v11)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v39.__pn_.__r_.__value_.__l.__data_);
  if (!v11)
  {
LABEL_24:
    if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_55:
    operator delete(v40.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_28:
  E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)__dst, &v40, 1);
  MILProgram = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)__dst);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)MILProgram + 64))(&v37, MILProgram, *((_QWORD *)this + 1) + 24);
  v13 = v37;
  if (!(_QWORD)v37)
  {
    *((_BYTE *)&v39.__pn_.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v39, "main");
    (*(void (**)(__int128 *__return_ptr, uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)MILProgram + 64))(&v35, MILProgram, &v39);
    v14 = v35;
    v35 = 0uLL;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    v37 = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__pn_.__r_.__value_.__l.__data_);
    v13 = v37;
    if (!(_QWORD)v37)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v39, "PopulateOutputDtypeSizeForTensorBuffer");
      std::string::basic_string[abi:ne180100]<0>(&v35, "MPSGraph op: No function found in the mil model.");
      E5RT::Status::Status(v36, 13, &v35);
      E5RT::E5RTError::E5RTError(exception, &v39, v36);
    }
  }
  (*(void (**)(std::__fs::filesystem::path *__return_ptr))(*(_QWORD *)v13 + 160))(&v39);
  v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v37 + 48))(v37);
  v22 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 88))(v21);
  v23 = *v22;
  if (v22[1] != *v22)
  {
    v24 = 0;
    v25 = 0;
    v26 = (char *)this + 168;
    do
    {
      v27 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(*(MIL::IRValueType **)(v39.__pn_.__r_.__value_.__r.__words[0] + 8 * v25));
      if (v27)
      {
        v28 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v27);
        if (v28)
        {
          DataType = MIL::IRTensorBufferValueType::GetDataType(v28);
          v30 = E5RT::MILProgramUtils::BuildE5RTTensorComponentSize(DataType);
          *(_QWORD *)&v35 = v23 + v24;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v26, v23 + v24, (uint64_t)&std::piecewise_construct, (__int128 **)&v35)[5] = v30;
        }
      }
      ++v25;
      v23 = *v22;
      v24 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v22[1] - *v22) >> 3) > v25);
  }
  if (v39.__pn_.__r_.__value_.__r.__words[0])
  {
    v39.__pn_.__r_.__value_.__l.__size_ = v39.__pn_.__r_.__value_.__r.__words[0];
    operator delete(v39.__pn_.__r_.__value_.__l.__data_);
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (!*((_QWORD *)&v37 + 1))
    goto LABEL_54;
  v32 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)__dst);
    if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_55;
  }
  else
  {
LABEL_54:
    E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)__dst);
    if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_55;
  }
}

void sub_190F30CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a21);
  if (*(char *)(v35 - 65) < 0)
    operator delete(*(void **)(v35 - 88));
  _Unwind_Resume(a1);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::PrepareOpForEncode(E5RT::Ops::MpsGraphInferenceOperation::Impl *this)
{
  uint64_t v2;
  char v3;
  std::string *v4;
  uint64_t v5;
  NSObject *v7;
  os_signpost_id_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  E5RT::SharedResourceManager *v17;
  uint64_t SharedResourceManager;
  __int128 *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  E5RT::IOPortImpl **v35;
  E5RT::IOPortImpl **v36;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  void *v42;
  char v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  uint64_t *v49;
  int v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  char v55;
  NSObject *v56;
  NSObject *v57;
  void *v58;
  void *v59;
  _BOOL4 v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  BOOL v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t i;
  E5RT::IOPortImpl **OutputPortRef;
  uint64_t v71;
  E5RT::OperandDescriptor *v72;
  E5RT::TensorDescriptor *v73;
  _QWORD *v74;
  void *v75;
  _BOOL4 v76;
  NSObject *v77;
  NSObject *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  E5RT::SharedResourceManager *v86;
  void *v87;
  void **v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *exception;
  void (**v93)(_QWORD);
  void *v94;
  void *v95;
  int v96;
  void *v97;
  _QWORD v98[2];
  _QWORD v99[6];
  _BYTE v100[8];
  void *__p[2];
  char v102;
  std::__fs::filesystem::path v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  memset(&v103, 0, sizeof(v103));
  v3 = *(_BYTE *)(v2 + 23);
  if (v3 >= 0)
    v4 = (std::string *)v2;
  else
    v4 = *(std::string **)v2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(v2 + 23);
  else
    v5 = *(_QWORD *)(v2 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&v103.__pn_, v4, (std::string *)((char *)v4 + v5));
  std::__fs::filesystem::__status(&v103, 0);
  if (SHIBYTE(v103.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__pn_.__r_.__value_.__l.__data_);
  if (LOBYTE(__p[0]) == 255 || LOBYTE(__p[0]) == 0)
  {
    std::operator+<char>();
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    E5RT::Status::Status(v100, 13, &v103);
    E5RT::E5RTError::E5RTError(exception, __p, v100);
  }
  *((_BYTE *)&v103.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v103, "e5rt");
  E5RT::GetE5RTLog((uint64_t)&v103);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_signpost_id_generate(v7);

  if (SHIBYTE(v103.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__pn_.__r_.__value_.__l.__data_);
  *((_BYTE *)&v103.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v103, "e5rt");
  E5RT::GetE5RTLog((uint64_t)&v103);
  v9 = objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v103.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v103.__pn_.__r_.__value_.__l.__data_);
    if (v8 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_21;
  }
  else if (v8 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_21;
  }
  if (os_signpost_enabled(v9))
  {
    LOWORD(v103.__pn_.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v8, "MpsGraphOpPrepareForEncode", (const char *)&unk_191C083FD, (uint8_t *)&v103, 2u);
  }
LABEL_21:

  v99[0] = MEMORY[0x1E0C809B0];
  v99[1] = 3221225472;
  v99[2] = sub_190F31D00;
  v99[3] = &__block_descriptor_48_e5_v8__0l;
  v99[4] = this;
  v99[5] = v8;
  v93 = (void (**)(_QWORD))MEMORY[0x19401D648](v99);
  v95 = (void *)objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
  v10 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v10 + 56))
  {
    objc_msgSend(v95, "setObject:forKeyedSubscript:", &unk_1E2DED970, E5Common::kMpsgGraphEnableShaderProfilingStrKey[0]);
    v10 = *((_QWORD *)this + 1);
  }
  if (*((_QWORD *)this + 43))
  {
    v82 = *((_QWORD *)this + 2);
    v98[0] = v10;
    v98[1] = v82;
    if (v82)
    {
      v83 = (unint64_t *)(v82 + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    sub_190F31E78((uint64_t)this + 320, (uint64_t)v98);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)v98);
    objc_msgSend(v95, "setObject:forKeyedSubscript:", v85, E5Common::kMpsgGraphDynamicCallableStrKey[0]);
    memset(&v103, 0, sizeof(v103));
    std::vector<std::string>::reserve((std::vector<std::string> *)&v103, *((_QWORD *)this + 43) + 1);
    std::vector<std::string>::push_back[abi:ne180100]((uint64_t)&v103, *((_QWORD *)this + 1));
    v86 = (E5RT::SharedResourceManager *)sub_190F32450(*((uint64_t **)this + 42), 0, (uint64_t)&v103);
    v87 = (void *)MEMORY[0x1E0CB3940];
    E5RT::SharedResourceManager::GetSharedResourceManager(v86);
    E5RT::SharedResourceManager::GenerateConcatenatedSortedURIs((uint64_t *)&v103, (uint64_t)__p);
    if (v102 >= 0)
      v88 = __p;
    else
      v88 = (void **)__p[0];
    objc_msgSend(v87, "stringWithUTF8String:", v88);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v95, "setObject:forKeyedSubscript:", v89, E5Common::kSharedResourceManagerStrKey[0]);

    if (v102 < 0)
      operator delete(__p[0]);
    std::vector<std::string>::~vector[abi:ne180100]((void **)&v103.__pn_.__r_.__value_.__l.__data_);

    v90 = *((_QWORD *)this + 1);
    v11 = (void *)MEMORY[0x1E0CB3940];
    v12 = (_QWORD *)(v90 + 24);
    if (*(char *)(v90 + 47) < 0)
      goto LABEL_25;
  }
  else
  {
    v11 = (void *)MEMORY[0x1E0CB3940];
    v12 = (_QWORD *)(v10 + 24);
    if (*(char *)(v10 + 47) < 0)
LABEL_25:
      v12 = (_QWORD *)*v12;
  }
  objc_msgSend(v11, "stringWithUTF8String:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "setObject:forKeyedSubscript:", v13, E5Common::kMpsgGraphFunctionNameStrKey[0]);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)this + 360));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "setObject:forKeyedSubscript:", v14, E5Common::kMpsgGraphDisableTypeInferenceStrKey[0]);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)this + 361));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "setObject:forKeyedSubscript:", v15, E5Common::kMpsgGraphEnableGPUQuantOpsStrKey[0]);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((_QWORD *)this + 46));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "setObject:forKeyedSubscript:", v16, E5Common::kMpsgGraphMaximumNumberOfEncodingThreadsStrKey[0]);

  SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(v17);
  v19 = (__int128 *)*((_QWORD *)this + 1);
  *((_BYTE *)&v103.__pn_.__r_.__value_.__s + 23) = 0;
  v103.__pn_.__r_.__value_.__s.__data_[0] = 0;
  E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, v19, 4, (uint64_t *)&v103, v95, (uint64_t *)__p);
  v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *(_OWORD *)((char *)this + 120) = v20;
  if (!v21)
    goto LABEL_30;
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v24 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_34;
  }
  else
  {
LABEL_30:
    v24 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_34;
  }
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if ((SHIBYTE(v103.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_34:
  if (SHIBYTE(v103.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_35:
    operator delete(v103.__pn_.__r_.__value_.__l.__data_);
LABEL_36:
  E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(*((const void **)this + 15));
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateOutputDtypeSizeForTensorBuffer(this);
  objc_msgSend(v94, "getInputShapes");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0;
  v96 = 0;
  while (1)
  {
    v29 = objc_msgSend(v27, "count");
    if (v28 >= v29)
    {
      v55 = v96;
      goto LABEL_68;
    }
    v30 = *((_QWORD *)this + 12);
    v31 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    v32 = v30 + 24 * v28;
    v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v31, v32);
    v34 = *(_QWORD *)this;
    v35 = (E5RT::IOPortImpl **)(v33
                              ? E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(v34, v30 + 24 * v28)
                              : E5RT::ExecutionStreamOperationInternal::GetInputPortRef(v34, v30 + 24 * v28));
    v36 = v35;
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v35);
    v38 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    if (E5RT::IOPort::IsDynamic(v36))
    {
      if ((E5RT::IOPort::HasKnownShape(v36) & 1) == 0)
        break;
    }
    objc_msgSend(v27, "objectAtIndexedSubscript:", v28);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "shape");
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    v41 = 0;
    while (v41 < objc_msgSend(v40, "count"))
    {
      objc_msgSend(v40, "objectAtIndexedSubscript:", v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v42, "isEqual:", &unk_1E2DED988);

      ++v41;
      if ((v43 & 1) != 0)
      {
        v96 = 1;
        break;
      }
    }
    sub_190F3256C(v38);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_alloc(MEMORY[0x1E0CC7650]);
    objc_msgSend(v27, "objectAtIndexedSubscript:", v28);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = (void *)objc_msgSend(v45, "initWithShape:dataType:", v44, objc_msgSend(v46, "dataType"));
    objc_msgSend(v97, "addObject:", v47);

    v48 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v48, v32);
    v50 = *(char *)(v32 + 23);
    if (v49)
    {
      if (v50 < 0)
        v32 = *(_QWORD *)v32;
      v51 = (void *)*((_QWORD *)this + 28);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v32);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "setObject:forKeyedSubscript:", v44, v52);
    }
    else
    {
      if (v50 < 0)
        v32 = *(_QWORD *)v32;
      v53 = (void *)*((_QWORD *)this + 26);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v32);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "setObject:forKeyedSubscript:", v44, v52);
    }

    objc_msgSend(v27, "objectAtIndexedSubscript:", v28);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    sub_190F3265C(v38, v54);

    ++v28;
  }
  *((_BYTE *)&v103.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v103, "e5rt");
  E5RT::GetE5RTLog((uint64_t)&v103);
  v56 = objc_claimAutoreleasedReturnValue();
  v57 = v56;
  if (SHIBYTE(v103.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v103.__pn_.__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      goto LABEL_67;
  }
  else if (!os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
  {
    goto LABEL_67;
  }
  if (*(char *)(v32 + 23) < 0)
    v32 = *(_QWORD *)v32;
  LODWORD(v103.__pn_.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v103.__pn_.__r_.__value_.__r.__words + 4) = v32;
  _os_log_impl(&dword_190DAF000, v57, OS_LOG_TYPE_INFO, "MPSGraph op: E5 Input shape is unknown for input/inOut = %s. Skipping input validation and reshape as part of PrepareOpForEncode().", (uint8_t *)&v103, 0xCu);
LABEL_67:

  v55 = 1;
LABEL_68:
  objc_msgSend(v94, "getOutputShapes");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = v58;
  if ((v55 & 1) != 0)
  {
    v60 = 0;
  }
  else
  {
    v61 = v58;
    v62 = 0;
    do
    {
      v63 = objc_msgSend(v61, "count");
      v60 = v62 < v63;
      if (v62 >= v63)
        break;
      objc_msgSend(v61, "objectAtIndexedSubscript:", v62);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = sub_190F33468(v64);

      ++v62;
    }
    while (!v65);

  }
  if (v28 >= v29 && ((v96 | v60) & 1) != 0)
  {
    if (objc_msgSend(v97, "count") != 0xAAAAAAAAAAAAAAABLL
                                     * ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3))
    {
      v91 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v103, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(__p, "Mismatch in number of inputs between E5 operation and MPS types array.");
      E5RT::Status::Status(v100, 2, __p);
      E5RT::E5RTError::E5RTError(v91, &v103, v100);
    }
    objc_msgSend(MEMORY[0x1E0CC7620], "deviceWithMTLDevice:", *((_QWORD *)this + 35));
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    sub_190F33194(v94, v66, v97, *((unsigned __int8 *)this + 360));
    v67 = objc_claimAutoreleasedReturnValue();

    *((_BYTE *)this + 160) = 1;
    v59 = (void *)v67;
  }
  v68 = 0;
  for (i = 0; i < objc_msgSend(v59, "count"); ++i)
  {
    OutputPortRef = (E5RT::IOPortImpl **)E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(*(_QWORD *)this, *((_QWORD *)this + 6) + v68);
    v71 = *((_QWORD *)this + 6);
    v72 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
    v73 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v72);
    v74 = (_QWORD *)(v71 + v68);
    if (E5RT::IOPort::HasKnownShape(OutputPortRef)
      && (objc_msgSend(v59, "objectAtIndexedSubscript:", i),
          v75 = (void *)objc_claimAutoreleasedReturnValue(),
          v76 = sub_190F33468(v75),
          v75,
          !v76))
    {
      objc_msgSend(v59, "objectAtIndexedSubscript:", i);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      sub_190F3265C(v73, v79);

      sub_190F3256C(v73);
      v78 = objc_claimAutoreleasedReturnValue();
      if (*(char *)(v71 + v68 + 23) < 0)
        v74 = (_QWORD *)*v74;
      v80 = (void *)*((_QWORD *)this + 27);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v74);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v80, "setObject:forKeyedSubscript:", v78, v81);

    }
    else
    {
      *((_BYTE *)&v103.__pn_.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v103, "e5rt");
      E5RT::GetE5RTLog((uint64_t)&v103);
      v77 = objc_claimAutoreleasedReturnValue();
      v78 = v77;
      if (SHIBYTE(v103.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v103.__pn_.__r_.__value_.__l.__data_);
        if (!os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
          goto LABEL_92;
      }
      else if (!os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
      {
        goto LABEL_92;
      }
      if (*(char *)(v71 + v68 + 23) < 0)
        v74 = (_QWORD *)*v74;
      LODWORD(v103.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v103.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
      _os_log_impl(&dword_190DAF000, v78, OS_LOG_TYPE_INFO, "MPSGraph op: Skipping output tensor validation for output = %s", (uint8_t *)&v103, 0xCu);
    }
LABEL_92:

    v68 += 24;
  }

  v93[2](v93);
}

void sub_190F319B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**a10)(void), uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  uint64_t v32;

  if (a30 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v32 - 128));

  a10[2]();
  _Unwind_Resume(a1);
}

void sub_190F31D00(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  _BYTE __p[12];
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  HIBYTE(v12) = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v3 = objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v12) < 0)
  {
    operator delete(*(void **)__p);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  if (os_signpost_enabled(v3))
  {
    v5 = *(uint64_t **)(v2 + 8);
    v6 = v5;
    if (*((char *)v5 + 23) < 0)
    {
      v6 = (uint64_t *)*v5;
      v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
      v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0)
      {
LABEL_8:
        v8 = *((unsigned __int8 *)v5 + 56);
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v6;
        v10 = 2080;
        v11 = v7;
        v12 = 1024;
        v13 = v8;
        _os_signpost_emit_with_name_impl(&dword_190DAF000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MpsGraphOpPrepareForEncode", "Model=%{signpost.description:attribute}s Function=%{signpost.description:attribute}s ShaderProfiling=%{signpost.description:attribute}d ", __p, 0x1Cu);
        goto LABEL_9;
      }
    }
    v7 = (_QWORD *)*v7;
    goto LABEL_8;
  }
LABEL_9:

}

void sub_190F31E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_190F31E78(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *i;
  void *v6;
  std::string *v7;
  int v8;
  std::string *v9;
  uint64_t v10;
  _QWORD *v11;
  std::string::size_type size;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  E5RT::SharedResourceManager *v24;
  uint64_t SharedResourceManager;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  void *exception;
  std::string v42;
  std::string v43;
  void *v44[2];
  std::string::size_type v45;
  std::string __p;
  _BYTE v47[56];

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    v7 = (std::string *)i[5];
    memset(&__p, 0, sizeof(__p));
    v8 = *((char *)i + 63);
    if (v8 >= 0)
      v9 = (std::string *)(i + 5);
    else
      v9 = v7;
    v10 = i[6];
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)i + 63);
    std::string::append[abi:ne180100]<char const*,0>(&__p, v9, (std::string *)((char *)v9 + v10));
    E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)v47, (const std::__fs::filesystem::path *)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    E5RT::MILProgramUtils::GetFunctionNames((E5RT::MILProgramUtils *)v47, (std::vector<std::string> *)&__p);
    v11 = i + 2;
    size = __p.__r_.__value_.__l.__size_;
    v13 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
    {
      v14 = *((_BYTE *)i + 39);
      if (v14 >= 0)
        v15 = *((unsigned __int8 *)i + 39);
      else
        v15 = i[3];
      if (v14 >= 0)
        v16 = (unsigned __int8 *)(i + 2);
      else
        v16 = (unsigned __int8 *)i[2];
      while (1)
      {
        v17 = *(unsigned __int8 *)(v13 + 23);
        if ((v17 & 0x80u) == 0)
          v18 = *(unsigned __int8 *)(v13 + 23);
        else
          v18 = *(_QWORD *)(v13 + 8);
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v13, v16, *(_QWORD *)(v13 + 8)))
              break;
          }
          else
          {
            if (!*(_BYTE *)(v13 + 23))
              break;
            v19 = 0;
            while (*(unsigned __int8 *)(v13 + v19) == v16[v19])
            {
              if (v17 == ++v19)
                goto LABEL_31;
            }
          }
        }
        v13 += 24;
        if (v13 == size)
          goto LABEL_52;
      }
    }
LABEL_31:
    if (v13 == size)
    {
LABEL_52:
      std::operator+<char>();
      v33 = std::string::append(&v42, " in callable mil program: ");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = *((char *)i + 63);
      if (v35 >= 0)
        v36 = (const std::string::value_type *)(i + 5);
      else
        v36 = (const std::string::value_type *)i[5];
      if (v35 >= 0)
        v37 = *((unsigned __int8 *)i + 63);
      else
        v37 = i[6];
      v38 = std::string::append(&v43, v36, v37);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v45 = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)v44 = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v43, "CreateCallableExecutables");
      E5RT::Status::Status(&v42, 13, v44);
      E5RT::E5RTError::E5RTError(exception, &v43, &v42);
    }
    v20 = (void *)objc_msgSend(MEMORY[0x1E0C9AA70], "mutableCopy");
    v21 = v20;
    if (*(_BYTE *)(*(_QWORD *)a2 + 56))
      objc_msgSend(v20, "setObject:forKeyedSubscript:", &unk_1E2DED970, E5Common::kMpsgGraphEnableShaderProfilingStrKey[0]);
    v22 = i + 2;
    if (*((char *)i + 39) < 0)
      v22 = (_QWORD *)*v11;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setObject:forKeyedSubscript:", v23, E5Common::kMpsgGraphFunctionNameStrKey[0]);

    SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(v24);
    HIBYTE(v45) = 0;
    LOBYTE(v44[0]) = 0;
    E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, (__int128 *)(i + 5), 4, (uint64_t *)v44, v21, (uint64_t *)&v43);
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
    E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(v43.__r_.__value_.__l.__data_);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setOptions:", 0);
    if (*((char *)i + 39) < 0)
      v11 = (_QWORD *)*v11;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v26, v27);

    v28 = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
    if (!v43.__r_.__value_.__l.__size_)
      goto LABEL_44;
    v29 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);

      v31 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
LABEL_45:
        v32 = __p.__r_.__value_.__l.__size_;
        v6 = (void *)v31;
        if (__p.__r_.__value_.__l.__size_ != v31)
        {
          do
          {
            if (*(char *)(v32 - 1) < 0)
              operator delete(*(void **)(v32 - 24));
            v32 -= 24;
          }
          while (v32 != v31);
          v6 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v31;
        operator delete(v6);
      }
    }
    else
    {
LABEL_44:

      v31 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
        goto LABEL_45;
    }
    E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)v47);
  }
  return v4;
}

void sub_190F32274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  void *v36;
  void *v37;
  int v38;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
        operator delete(a23);
      std::vector<std::string>::~vector[abi:ne180100](&a30);
      E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a36);

      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

std::string *std::vector<std::string>::push_back[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  std::string *result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, a2);
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v3 = v4;
    }
    result = (std::string *)(v3 + 24);
    *(_QWORD *)(a1 + 8) = v3 + 24;
    *(_QWORD *)(a1 + 8) = v3 + 24;
  }
  return result;
}

void sub_190F32448(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_190F32450(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  std::string __p;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*((char *)v5 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v5[5], v5[6]);
        v7 = *(_QWORD *)(a3 + 8);
        if (v7 >= *(_QWORD *)(a3 + 16))
        {
LABEL_9:
          v8 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)&__p);
          v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a3 + 8) = v8;
          if (v9 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_4;
        }
      }
      else
      {
        __p = *(std::string *)(v5 + 5);
        v7 = *(_QWORD *)(a3 + 8);
        if (v7 >= *(_QWORD *)(a3 + 16))
          goto LABEL_9;
      }
      v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v7 = v6;
      *(_QWORD *)(a3 + 8) = v7 + 24;
LABEL_4:
      v5 = (uint64_t *)*v5;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_190F3251C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL E5RT::Ops::MpsGraphInferenceOperation::Impl::IsInOutPort(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*a1);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v3, a2) != 0;
}

id sub_190F3256C(E5RT::TensorDescriptor *a1)
{
  void *v2;
  uint64_t TensorShape;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
  v4 = *(_QWORD **)TensorShape;
  v5 = *(_QWORD **)(TensorShape + 8);
  if (*(_QWORD **)TensorShape != v5)
  {
    do
    {
      if (*v4 == -1)
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:");
      else
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v6);

      ++v4;
    }
    while (v4 != v5);
  }
  return v2;
}

void sub_190F32624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F32634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F3264C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F3265C(E5RT::TensorDescriptor *a1, void *a2)
{
  void *v3;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t Rank;
  _QWORD *TensorShape;
  unint64_t i;
  void *v17;
  char v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  void *exception;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  _QWORD v31[3];
  _BYTE v32[8];
  _QWORD v33[3];

  v30 = a2;
  objc_msgSend(v30, "shape");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v31, "MPSGraph doesn't support more than 1 component.");
    E5RT::Status::Status(v32, 6, v31);
    E5RT::E5RTError::E5RTError(exception, v33, v32);
  }
  v5 = objc_msgSend(v30, "dataType");
  if (v5 <= 268435471)
  {
    if (v5 > 15)
    {
      if (v5 == 16)
      {
        if (!E5RT::TensorDataType::IsType<unsigned short>((uint64_t)TensorDataTypeRef))
        {
          v11 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v11, v33, v32);
        }
      }
      else
      {
        if (v5 != 32)
          goto LABEL_47;
        if (!E5RT::TensorDataType::IsType<unsigned int>((uint64_t)TensorDataTypeRef))
        {
          v8 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v8, v33, v32);
        }
      }
    }
    else if (v5 == -2147483640)
    {
      if (!E5RT::TensorDataType::IsType<BOOL>((uint64_t)TensorDataTypeRef))
      {
        v10 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
        std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v10, v33, v32);
      }
    }
    else
    {
      if (v5 != 8)
        goto LABEL_47;
      if (!E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef))
      {
        v7 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
        std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v7, v33, v32);
      }
    }
  }
  else if (v5 <= 536870919)
  {
    if (v5 == 268435472)
    {
      if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef))
      {
        v12 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
        std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v12, v33, v32);
      }
    }
    else
    {
      if (v5 != 268435488)
        goto LABEL_47;
      if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef))
      {
        v9 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
        std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v9, v33, v32);
      }
    }
  }
  else
  {
    switch(v5)
    {
      case 536870920:
        if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef))
        {
          v13 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v13, v33, v32);
        }
        break;
      case 536870928:
        if (!E5RT::TensorDataType::IsType<short>((uint64_t)TensorDataTypeRef))
        {
          v27 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v27, v33, v32);
        }
        break;
      case 536870944:
        if (!E5RT::TensorDataType::IsType<int>((uint64_t)TensorDataTypeRef))
        {
          v6 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v6, v33, v32);
        }
        break;
      default:
LABEL_47:
        v29 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
        std::string::basic_string[abi:ne180100]<0>(v31, "Unsupported MPSDataType.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v29, v33, v32);
    }
  }
  if (E5RT::TensorDescriptor::GetRank(a1))
  {
    Rank = E5RT::TensorDescriptor::GetRank(a1);
    if (Rank != objc_msgSend(v3, "count"))
    {
      v26 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor rank doesn't match MPSGraphTensor.");
      E5RT::Status::Status(v32, 6, v31);
      E5RT::E5RTError::E5RTError(v26, v33, v32);
    }
    TensorShape = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(a1);
    for (i = 0; i < objc_msgSend(v3, "count"); ++i)
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", i);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "isEqual:", &unk_1E2DED988);

      if ((v18 & 1) == 0)
      {
        objc_msgSend(v3, "objectAtIndexedSubscript:", i);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "unsignedIntValue");
        v21 = *(_QWORD *)(*TensorShape + 8 * i);

        if (v21 != v20)
        {
          v22 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dims don't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v22, v33, v32);
        }
      }
    }
  }
  else if ((unint64_t)objc_msgSend(v3, "count") > 1
         || objc_msgSend(v3, "count") == 1
         && (objc_msgSend(v3, "objectAtIndexedSubscript:", 0),
             v24 = (void *)objc_claimAutoreleasedReturnValue(),
             v25 = objc_msgSend(v24, "intValue"),
             v24,
             v25 != 1))
  {
    v28 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor rank (=0) doesn't match the shape of MPSGraphTensor.");
    E5RT::Status::Status(v32, 6, v31);
    E5RT::E5RTError::E5RTError(v28, v33, v32);
  }

}

void sub_190F32EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_190F32F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

id sub_190F33194(void *a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *exception;
  uint64_t v15;
  _QWORD v16[3];
  _BYTE v17[24];
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = objc_alloc_init(MEMORY[0x1E0CC7600]);
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x4812000000;
  v23[3] = sub_190F3501C;
  v23[4] = sub_190F35038;
  v24 = 0u;
  v25 = 0u;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_190F37F24;
  v18[3] = &unk_1E2DCA828;
  v18[4] = &v19;
  v18[5] = v23;
  v11 = (void *)MEMORY[0x19401D648](v18);
  objc_msgSend(v10, "setCompilationCompletionHandler:", v11);
  objc_msgSend(v10, "setOptimizationLevel:", 0);
  if (a4)
    objc_msgSend(v10, "disableTypeInference");
  objc_msgSend(v7, "getOutputTypesWithDevice:inputTypes:compilationDescriptor:", v8, v9, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((_BYTE *)v20 + 24))
  {
    std::operator+<char>();
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SpecializeMPSGraphExecutableAndReturnOutputs");
    E5RT::Status::Status(&v15, 11, v17);
    E5RT::E5RTError::E5RTError(exception, v16, &v15);
  }

  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(v23, 8);
  if (SHIBYTE(v25) < 0)
    operator delete(*((void **)&v24 + 1));

  return v12;
}

void sub_190F33394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  if (a43 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_190F33468(void *a1)
{
  void *v1;
  unint64_t v2;
  unint64_t v3;
  _BOOL8 v4;
  void *v5;
  char v6;

  objc_msgSend(a1, "shape");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = 0;
    while (1)
    {
      v3 = objc_msgSend(v1, "count");
      v4 = v2 < v3;
      if (v2 >= v3)
        break;
      objc_msgSend(v1, "objectAtIndexedSubscript:", v2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "isEqual:", &unk_1E2DED988);

      ++v2;
      if ((v6 & 1) != 0)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v4 = 1;
  }

  return v4;
}

void sub_190F334F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F3350C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeMemoryBuffers(E5RT::Ops::MpsGraphInferenceOperation::Impl *this, char a2)
{
  uint64_t v4;
  unint64_t i;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _BOOL4 v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;

  objc_msgSend(MEMORY[0x1E0CC7620], "deviceWithMTLDevice:", *((_QWORD *)this + 35));
  v20 = (id)objc_claimAutoreleasedReturnValue();
  E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(*((const void **)this + 15));
  v18 = (id)objc_claimAutoreleasedReturnValue();
  LOBYTE(v17) = a2;
  objc_msgSend(*((id *)this + 18), "removeAllObjects", this, &v18, &v20, &v19, v17);
  v4 = 0;
  for (i = 0; ; ++i)
  {
    objc_msgSend(v18, "getInputShapes");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "count");

    if (i >= v7)
      break;
    v8 = *((_QWORD *)this + 12);
    v9 = (void *)*((_QWORD *)this + 18);
    v10 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v10, v8 + v4) != 0;
    sub_190F33720(&v16, 2 * v11, i);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "addObject:", v12);

    v4 += 24;
  }
  objc_msgSend(*((id *)this + 19), "removeAllObjects");
  if (*((_QWORD *)this + 7) != *((_QWORD *)this + 6))
  {
    v13 = 0;
    do
    {
      v14 = (void *)*((_QWORD *)this + 19);
      sub_190F33720(&v16, 1, v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObject:", v15);

      ++v13;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3));
  }
  objc_msgSend(v18, "setOptions:", 0);

}

void sub_190F336A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F336B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

id sub_190F33720(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  E5RT::IOPortPriv *v9;
  E5RT::OperandDescriptor *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  E5RT::TensorDescriptor *v14;
  unsigned int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id *v27;
  void *v28;
  std::__shared_weak_count *v29;
  void *v30;
  E5RT::MemoryObject *MemoryObjectRef;
  E5RT::BufferObject *v32;
  int BufferType;
  id v34;
  void *v35;
  void *v36;
  uint64_t TensorStrides;
  uint64_t v38;
  const void *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  unsigned int ElementSize;
  E5RT::TensorDataType::Impl **v45;
  uint64_t v46;
  uint64_t *v47;
  void *v48;
  void *v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v60;
  void *v61;
  void *exception;
  int v63;
  void *v64;
  void *v66;
  std::__shared_weak_count *v67;
  E5RT::OperandDescriptor *v68;
  std::__shared_weak_count *v69;
  E5RT::IOPortPriv *v70;
  std::__shared_weak_count *v71;
  _QWORD v72[3];
  char v73[8];
  _QWORD v74[3];
  __int128 v75;
  uint64_t *v76;

  v5 = *a1;
  v6 = 96;
  if (a2 == 1)
    v6 = 48;
  v7 = *(_QWORD *)(v5 + v6) + 24 * a3;
  v8 = v7;
  if (*(char *)(v7 + 23) < 0)
    v8 = *(_QWORD *)v7;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPort((E5RT::ExecutionStreamOperationInternal **)v5, a2, v7, &v70);
  v9 = v70;
  E5RT::IOPortPriv::GetMaxPortDescriptor(v70, &v68);
  if (E5RT::IOPortPriv::IsDynamicBounded((E5RT::IOPortImpl **)v9))
  {
    v10 = v68;
    v11 = v69;
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v67 = v11;
  }
  else
  {
    E5RT::IOPort::GetPortDescriptor(v9, &v75);
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    v10 = (E5RT::OperandDescriptor *)v75;
  }
  v14 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v10);
  v15 = a2 & 0xFFFFFFFD;
  if ((a2 & 0xFFFFFFFD) == 0 && E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v9))
  {
    if (*((_BYTE *)a1 + 32))
      goto LABEL_38;
    if ((E5RT::TensorDescriptor::HasKnownShape(v14) & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v75, "operator()");
      std::operator+<char>();
      E5RT::Status::Status(v72, 2, v74);
      E5RT::E5RTError::E5RTError(exception, &v75, v72);
    }
  }
  E5RT::IOPort::GetMemoryObject(v9, &v75);
  if ((_QWORD)v75)
  {
    v16 = E5RT::IOPortPriv::IsBoundMemoryObjectInternal((E5RT::IOPortImpl **)v9) ^ 1;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    if (!*((_QWORD *)&v75 + 1))
      goto LABEL_22;
  }
  else
  {
    v16 = 0;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    if (!*((_QWORD *)&v75 + 1))
      goto LABEL_22;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (v15)
      goto LABEL_23;
    goto LABEL_30;
  }
LABEL_22:
  if (v15)
  {
LABEL_23:
    if (!E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v70))
    {
LABEL_28:
      objc_msgSend(*(id *)a1[1], "getOutputShapes");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "objectAtIndexedSubscript:", a3);
      v23 = objc_claimAutoreleasedReturnValue();
      goto LABEL_31;
    }
    if (v16)
    {
      if (*(char *)(v7 + 23) < 0)
        v7 = *(_QWORD *)v7;
      v20 = *(void **)(v5 + 312);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "addObject:", v21);

      goto LABEL_28;
    }
LABEL_38:
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = v67;
    if (!v67)
      goto LABEL_67;
    goto LABEL_63;
  }
LABEL_30:
  objc_msgSend(*(id *)a1[1], "getInputShapes");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "objectAtIndexedSubscript:", a3);
  v23 = objc_claimAutoreleasedReturnValue();
LABEL_31:
  v24 = (void *)v23;

  objc_msgSend(v24, "shape");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (E5RT::IOPortPriv::IsDynamicBounded((E5RT::IOPortImpl **)v9))
  {
    sub_190F3256C(v14);
    v26 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (!*(_BYTE *)(v5 + 160))
      goto LABEL_44;
    if (a2 == 2)
    {
      v27 = (id *)(v5 + 224);
    }
    else if (a2 == 1)
    {
      v27 = (id *)(v5 + 216);
    }
    else
    {
      if (a2)
        goto LABEL_44;
      v27 = (id *)(v5 + 208);
    }
    objc_msgSend(*v27, "objectForKeyedSubscript:", v64);
    v26 = objc_claimAutoreleasedReturnValue();
  }
  v30 = (void *)v26;

  v25 = v30;
LABEL_44:
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v70);
  v32 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(MemoryObjectRef);
  BufferType = E5RT::BufferObject::GetBufferType(v32);
  v34 = v25;
  v35 = (void *)objc_opt_new();
  v36 = (void *)objc_opt_new();
  v66 = v34;
  TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v14);
  v75 = 0uLL;
  v76 = 0;
  v39 = *(const void **)TensorStrides;
  v38 = *(_QWORD *)(TensorStrides + 8);
  v40 = v38 - *(_QWORD *)TensorStrides;
  v63 = BufferType;
  if (v38 == *(_QWORD *)TensorStrides)
  {
    v42 = 0;
    v41 = 0;
  }
  else
  {
    if (v40 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v41 = (uint64_t *)operator new(v40);
    v42 = &v41[v40 >> 3];
    *(_QWORD *)&v75 = v41;
    v76 = v42;
    memcpy(v41, v39, v40);
    *((_QWORD *)&v75 + 1) = v42;
  }
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v14);
  ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
  v45 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v14);
  if (E5RT::TensorDataType::GetNumComponents(v45) != 1)
  {
    v61 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v74, "MpsStridesAndInterleaves");
    std::string::basic_string[abi:ne180100]<0>(v72, "interleave for MPSGraph is not yet supported");
    E5RT::Status::Status(v73, 2, v72);
    E5RT::E5RTError::E5RTError(v61, v74, v73);
  }
  if (E5RT::TensorDescriptor::GetRank(v14))
  {
    if (v41 != v42)
    {
      v46 = ElementSize;
      v47 = v41;
      do
      {
        if (*v47 % v46)
        {
          v60 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v74, "MpsStridesAndInterleaves");
          std::string::basic_string[abi:ne180100]<0>(v72, "stride not divisible by element size");
          E5RT::Status::Status(v73, 2, v72);
          E5RT::E5RTError::E5RTError(v60, v74, v73);
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "addObject:", v48);

        objc_msgSend(v36, "addObject:", &unk_1E2DED970);
        ++v47;
      }
      while (v47 != v42);
    }
  }
  else if (objc_msgSend(v66, "count"))
  {
    objc_msgSend(v35, "addObject:", &unk_1E2DED970);
    objc_msgSend(v36, "addObject:", &unk_1E2DED970);
  }
  if (v41)
    operator delete(v41);

  if (v63)
  {
    E5RT::BufferObject::GetHandle<objc_object  {objcproto9MTLBuffer}* {__strong}>((uint64_t)v32);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(*(id *)a1[2], "metalDevice");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = (void *)objc_msgSend(v50, "newBufferWithIOSurface:", E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v32));

  }
  v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC7660]), "initWithMTLBuffer:shape:strides:interleaves:dataType:", v49, v66, v35, v36, objc_msgSend(v24, "dataType"));

  v29 = v67;
  if (v67)
  {
LABEL_63:
    v51 = (unint64_t *)&v29->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_67:
  v53 = v69;
  if (v69)
  {
    v54 = (unint64_t *)&v69->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v71;
  if (v71)
  {
    v57 = (unint64_t *)&v71->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  return v28;
}

void sub_190F33E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);

  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPortName(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;

  v3 = 96;
  if (a2 == 1)
    v3 = 48;
  return *(_QWORD *)(a1 + v3) + 24 * a3;
}

uint64_t *E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPort@<X0>(E5RT::ExecutionStreamOperationInternal **a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *OutputPorts;
  uint64_t *result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a2 == 2)
  {
    OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*a1);
  }
  else if (a2 == 1)
  {
    OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*a1);
  }
  else
  {
    OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
  }
  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, a3);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = result[6];
  *a4 = result[5];
  a4[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeOperation(id *this, char a2)
{
  id v3;
  _QWORD *i;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  const void **StreamConfigOptions;
  id v17;
  int SkipIOFences;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  int EnableLowLatencyAsyncEvents;
  int v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;

  E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeMemoryBuffers((E5RT::Ops::MpsGraphInferenceOperation::Impl *)this, a2);
  v3 = this[35];
  for (i = *(_QWORD **)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents((E5RT::ExecutionStreamOperationInternal *)*this)
                       + 16); i; i = (_QWORD *)*i)
  {
    E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(i[2]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v3, "newSharedEventWithMachPort:", objc_msgSend(v5, "eventPort"));
    v29 = i[2];
    v27 = &v29;
    v7 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong},std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto14MTLSharedEvent}* {__strong}>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::piecewise_construct_t const&<>>((uint64_t)(this + 29), &v29, (uint64_t)&std::piecewise_construct, &v27);
    v8 = (void *)v7[3];
    v7[3] = v6;

  }
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent((uint64_t)*this, &v27);
  v9 = v27;
  v10 = v28;
  if (!v28)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_7:
    if (!v9)
      goto LABEL_9;
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (v9)
  {
LABEL_8:
    E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>((uint64_t)v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v3, "newSharedEventWithMachPort:", objc_msgSend(v13, "eventPort"));
    v15 = this[34];
    this[34] = (id)v14;

  }
LABEL_9:
  StreamConfigOptions = (const void **)E5RT::ExecutionStreamOperationInternal::GetStreamConfigOptions((E5RT::ExecutionStreamOperationInternal *)*this);
  if (this[36])
  {
    v17 = this[37];
    if (v17
      && (SkipIOFences = E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions),
          SkipIOFences == objc_msgSend(v17, "disableIOFencing"))
      && (v19 = E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(StreamConfigOptions),
          v19 == objc_msgSend(v17, "enableLowLatencyWaitSharedEvent")))
    {
      EnableLowLatencyAsyncEvents = E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(StreamConfigOptions);
      v26 = objc_msgSend(v17, "enableLowLatencySignalSharedEvent");

      if (EnableLowLatencyAsyncEvents == v26)
        goto LABEL_18;
    }
    else
    {

    }
  }
  v20 = (void *)objc_opt_new();
  v21 = E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(StreamConfigOptions);
  if (!(_DWORD)v21 || (E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions) & 1) != 0)
  {
    objc_msgSend(v20, "setEnableLowLatencySignalSharedEvent:", v21);
    objc_msgSend(v20, "setEnableLowLatencyWaitSharedEvent:", v21);
  }
  objc_msgSend(v20, "setDisableIOFencing:", E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions));
  objc_msgSend(v20, "setCommitsWithQoS:", 1);
  v22 = objc_msgSend(v3, "newCommandQueueWithDescriptor:", v20);
  v23 = this[36];
  this[36] = (id)v22;

  v24 = this[37];
  this[37] = v20;

LABEL_18:
}

void sub_190F3441C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F34480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::Impl::ResetOperation(id *this)
{
  id *v2;
  id *v3;
  char *v4;
  char *i;
  id v6;
  id v7;

  objc_msgSend(this[18], "removeAllObjects");
  objc_msgSend(this[19], "removeAllObjects");
  if (this[32])
  {
    v2 = (id *)this[31];
    if (v2)
    {
      do
      {
        v3 = (id *)*v2;

        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    this[31] = 0;
    v4 = (char *)this[30];
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *((_QWORD *)this[29] + (_QWORD)i) = 0;
    }
    this[32] = 0;
  }
  v6 = this[34];
  this[34] = 0;

  v7 = this[38];
  this[38] = 0;

  return objc_msgSend(this[39], "removeAllObjects");
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitWorkToMpsGraph(E5RT::Ops::MpsGraphInferenceOperation::Impl *this, int a2)
{
  void *v4;
  uint64_t *i;
  void *PortDescriptorRef;
  E5RT::TensorDescriptor *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t *j;
  void *v13;
  E5RT::TensorDescriptor *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t OpName;
  uint64_t v24;
  void *v25;
  uint64_t **k;
  _QWORD *v27;
  int HasDynamicOutputPorts;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  E5RT::AsyncEvent *v40;
  std::__shared_weak_count *v41;

  v4 = (void *)MEMORY[0x19401D4A4]();
  if ((E5RT::ExecutionStreamOperationInternal::HasDynamicInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this) & 1) != 0
    || E5RT::ExecutionStreamOperationInternal::HasDynamicInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this))
  {
    for (i = *(uint64_t **)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                          + 16); i; i = (uint64_t *)*i)
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)i[5]);
      v7 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      if (v7)
      {
        v8 = i + 2;
        sub_190F3256C(v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (*((char *)i + 39) < 0)
          v8 = (_QWORD *)*v8;
        v10 = (void *)*((_QWORD *)this + 26);
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, v11);

      }
    }
    for (j = *(uint64_t **)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                          + 16); j; j = (uint64_t *)*j)
    {
      v13 = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)j[5]);
      v14 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v13);
      if (v14)
      {
        v15 = j + 2;
        sub_190F3256C(v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (*((char *)j + 39) < 0)
          v15 = (_QWORD *)*v15;
        v17 = (void *)*((_QWORD *)this + 28);
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v16, v18);

      }
    }
    *((_BYTE *)this + 160) = 1;
    E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeMemoryBuffers(this, 0);
  }
  E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(*((const void **)this + 15));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*((id *)this + 36), "commandBuffer");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CC6DE0], "commandBufferWithCommandBuffer:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = (void *)MEMORY[0x1E0CB3940];
  OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(*(E5RT::ExecutionStreamOperationInternal **)this);
  if (*(char *)(OpName + 23) >= 0)
    v24 = OpName;
  else
    v24 = *(_QWORD *)OpName;
  objc_msgSend(v22, "stringWithUTF8String:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setLabel:", v25);

  if (a2)
  {
    for (k = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*(E5RT::ExecutionStreamOperationInternal **)this)
                           + 16); k; k = (uint64_t **)*k)
    {
      v40 = (E5RT::AsyncEvent *)k[2];
      v27 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((_QWORD *)this + 29, (uint64_t *)&v40);
      if (!v27)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      objc_msgSend(v20, "encodeWaitForEvent:value:", v27[3], E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)k[2]));
    }
  }
  HasDynamicOutputPorts = E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
  v29 = *((_QWORD *)this + 18);
  v30 = *((_QWORD *)this + 19);
  v31 = *((_QWORD *)this + 17);
  if (HasDynamicOutputPorts)
  {
    objc_msgSend(v19, "encodeToCommandBuffer:inputsArray:resultsArray:executionDescriptor:", v21, v29, v30, v31);
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = (void *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = v32;

  }
  else
  {
    v34 = (id)objc_msgSend(v19, "encodeToCommandBuffer:inputsArray:resultsArray:executionDescriptor:", v21, v29, v30, v31);
  }
  objc_msgSend(v21, "rootCommandBuffer");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    v36 = *((_QWORD *)this + 34);
    E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*(_QWORD *)this, &v40);
    objc_msgSend(v35, "encodeSignalEvent:value:", v36, E5RT::AsyncEvent::GetActiveFutureValue(v40));
    v37 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  objc_msgSend(v35, "commit");

  objc_autoreleasePoolPop(v4);
}

void sub_190F3486C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_190F348D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F348E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F348F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190F3490C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F3491C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F34930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190F34940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F34954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190F3496C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::ExecuteSync(E5RT::Ops::MpsGraphInferenceOperation::Impl *this, const void **a2)
{
  dispatch_semaphore_t v4;
  dispatch_semaphore_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *exception;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  E5RT::ExecutionStreamOperationInternal *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _BYTE v23[8];
  uint64_t v24[3];
  uint64_t v25;
  void *__p[2];
  char v27;
  _QWORD v28[4];
  NSObject *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD v33[4];
  NSObject *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  _QWORD v41[5];
  __int128 v42;
  __int128 v43;
  _QWORD v44[3];
  _QWORD v45[5];

  v45[3] = *MEMORY[0x1E0C80C00];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v41, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&v37, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(&v31, 2, &v37);
    E5RT::E5RTError::E5RTError(exception, v41, &v31);
  }
  v4 = dispatch_semaphore_create(0);
  v5 = dispatch_semaphore_create(0);
  v41[0] = 0;
  v41[1] = v41;
  v41[2] = 0x4812000000;
  v41[3] = sub_190F3501C;
  v41[4] = sub_190F35038;
  v42 = 0u;
  v43 = 0u;
  v37 = 0;
  v38 = &v37;
  v39 = 0x2020000000;
  v40 = 0;
  v6 = MEMORY[0x1E0C809B0];
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = sub_190F3504C;
  v33[3] = &unk_1E2DCA760;
  v35 = &v37;
  v36 = v41;
  v7 = v4;
  v34 = v7;
  v8 = (void *)MEMORY[0x19401D648](v33);
  v31 = 0;
  v32[0] = &v31;
  v32[1] = 0x2020000000;
  v32[2] = 0;
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    v28[0] = v6;
    v28[1] = 3221225472;
    v28[2] = sub_190F350F4;
    v28[3] = &unk_1E2DCA788;
    v30 = &v31;
    v29 = v5;
    v22 = (void *)MEMORY[0x19401D648](v28);
    v10 = (void *)*((_QWORD *)this + 17);
    v44[0] = CFSTR("MPSGRAPH_PROFILING_BEFORE_FIRST_COMMIT_TIMESTAMP");
    v11 = (void *)objc_opt_new();
    v45[0] = v11;
    v44[1] = CFSTR("MPSGRAPH_PROFILING_AFTER_FIRST_COMMIT_TIMESTAMP");
    v12 = (void *)objc_opt_new();
    v45[1] = v12;
    v44[2] = CFSTR("MPSGRAPH_PROFILING_FIRST_MTLCOMMANDBUFFER_SCHEDULED_TIMESTAMP");
    v13 = (void *)objc_opt_new();
    v45[2] = v13;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v45, v44, 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "requestProfilingStatsWithDictionary:profilingCallback:", v14, v22);

  }
  objc_msgSend(*((id *)this + 17), "setCompletionHandler:", v8);
  E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitWorkToMpsGraph(this, 0);
  dispatch_semaphore_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    E5RT::ExecutionStreamTelemetryContainer::Create(v24);
    v15 = v24[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "MPSGRAPH_PROFILING_FIRST_COMMIT_DURATION");
    E5RT::ExecutionStreamTelemetryContainer::AddGPUTelemetryValue(v15, (__int128 *)__p, *(double *)(v32[0] + 24));
    if (v27 < 0)
      operator delete(__p[0]);
    v16 = *(E5RT::ExecutionStreamOperationInternal **)this;
    v17 = v24[0];
    v24[0] = 0;
    v25 = v17;
    E5RT::ExecutionStreamOperationInternal::SetTelemetryContainer((uint64_t)v16, &v25);
    v18 = v25;
    v25 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    std::string::basic_string[abi:ne180100]<0>(__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v19 = objc_claimAutoreleasedReturnValue();
    if (v27 < 0)
      operator delete(__p[0]);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      sub_190F3A7E4((uint64_t)v32, v19);

    v20 = v24[0];
    v24[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (*((_BYTE *)v38 + 24))
  {
    std::operator+<char>();
    v21 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "ExecuteSync");
    E5RT::Status::Status(v23, 11, __p);
    E5RT::E5RTError::E5RTError(v21, v24, v23);
  }
  if (E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this))
    E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateDataDependentOutputPorts(this);
  _Block_object_dispose(&v31, 8);

  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(v41, 8);
  if (SHIBYTE(v43) < 0)
    operator delete(*((void **)&v42 + 1));

}

void sub_190F34E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;

  if (a24 < 0)
    operator delete(__p);
  if (a12)
    (*(void (**)(void *))(*(_QWORD *)a12 + 8))(a12);
  _Block_object_dispose(&a31, 8);

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose((const void *)(v50 - 232), 8);
  if (*(char *)(v50 - 161) < 0)
    operator delete(*(void **)(v50 - 184));

  _Unwind_Resume(a1);
}

__n128 sub_190F3501C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void sub_190F35038(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_190F3504C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;

  v4 = a3;
  v6 = v4;
  if (v4)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    objc_msgSend(v4, "localizedDescription");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x19401C808](*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, objc_msgSend(v5, "UTF8String"));

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_190F350C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_190F350DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_190F350F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char isKindOfClass;
  uint32_t numer;
  uint32_t denom;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  mach_timebase_info info;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("MPSGRAPH_PROFILING_AFTER_FIRST_COMMIT_TIMESTAMP"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("MPSGRAPH_PROFILING_BEFORE_FIRST_COMMIT_TIMESTAMP"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v8)
      {
LABEL_6:

        goto LABEL_7;
      }
      objc_msgSend(v5, "valueForKey:", CFSTR("MPSGRAPH_PROFILING_AFTER_FIRST_COMMIT_TIMESTAMP"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {

        goto LABEL_6;
      }
      objc_msgSend(v5, "valueForKey:", CFSTR("MPSGRAPH_PROFILING_BEFOR_FIRST_COMMIT_TIMESTAMP"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0)
      {
        mach_timebase_info(&info);
        numer = info.numer;
        denom = info.denom;
        objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("MPSGRAPH_PROFILING_AFTER_FIRST_COMMIT_TIMESTAMP"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "unsignedIntegerValue");

        objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("MPSGRAPH_PROFILING_BEFORE_FIRST_COMMIT_TIMESTAMP"));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "unsignedIntegerValue");

        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (double)(numer / denom)
                                                                    / 1000000.0
                                                                    * (double)(unint64_t)(v15 - v17);
      }
    }
  }
LABEL_7:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_190F352A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190F352BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F352D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_190F352E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F352FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F35310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_190F35370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateDataDependentOutputPorts(E5RT::Ops::MpsGraphInferenceOperation::Impl *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *OutputPorts;
  uint64_t *v6;
  uint64_t *v7;
  E5RT::IOPort *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  void *v13;
  E5RT::IOPortPriv *v14;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v16;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  void *v18;
  void *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  E5RT::MemoryObject *v22;
  E5RT::MemoryObject *v23;
  std::__shared_weak_count *v24;
  E5RT::MemoryObject *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void (**v43)(E5RT::IOBufferObject *__hidden);
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *exception;
  E5RT::MemoryObject *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  E5RT::MemoryObject *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  E5RT::IOPort *v63;
  std::__shared_weak_count *v64;
  E5RT::MemoryObject *v65;
  std::__shared_weak_count *v66;

  if (!*((_QWORD *)this + 38))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v65, "PopulateDataDependentOutputPorts");
    std::string::basic_string[abi:ne180100]<0>(&v63, "Data dependent outputs array is not populated.");
    E5RT::Status::Status(&v61, 2, &v63);
    E5RT::E5RTError::E5RTError(exception, &v65, &v61);
  }
  v2 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 7) != v2)
  {
    v3 = 0;
    while (1)
    {
      v4 = v2 + 24 * v3;
      OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
      v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v4);
      if (!v6)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v7 = v6;
      v8 = (E5RT::IOPort *)v6[5];
      v9 = (std::__shared_weak_count *)v7[6];
      v63 = v8;
      v64 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (!E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v8))
        goto LABEL_58;
      if (*(char *)(v4 + 23) < 0)
        v4 = *(_QWORD *)v4;
      v12 = (void *)*((_QWORD *)this + 39);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v12) = objc_msgSend(v12, "containsObject:", v13);

      if ((v12 & 1) != 0)
        goto LABEL_58;
      if (!v63 || (v14 = v63, *(void (***)(E5RT::IOPortPriv *__hidden))v63 != &off_1E2D59AC8))
        v14 = 0;
      PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v63);
      v16 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
      TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v16);
      objc_msgSend(*((id *)this + 38), "objectAtIndexedSubscript:", v3);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "shape");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      sub_190F36C74(&v65, v19);
      E5RT::TensorDescriptor::CreateTensorDesc(TensorDataTypeRef, (uint64_t *)&v65, &v60);
      v20 = (uint64_t)v60;
      v61 = (uint64_t)v60;
      if (v60)
        break;
      v62 = 0;
      v60 = 0;
      v23 = v65;
      if (v65)
        goto LABEL_18;
LABEL_19:
      E5RT::TensorDescriptor::AllocateMemory(v20, 0, 1uLL, &v60);
      v65 = v60;
      if (v60)
      {
        v24 = (std::__shared_weak_count *)operator new();
        v25 = v60;
        v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3190;
        v24->__shared_owners_ = 0;
        v24->__shared_weak_owners_ = 0;
        v24[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
      }
      else
      {
        v24 = 0;
      }
      v66 = v24;
      E5RT::IOPortPriv::LockPort(v14, 0);
      v58 = 0;
      v59 = 0;
      E5RT::IOPortPriv::BindMemoryObject((uint64_t)v14, (uint64_t)&v58, 0);
      v26 = v59;
      if (!v59)
        goto LABEL_28;
      v27 = (unint64_t *)&v59->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v29 = v62;
        v56 = v61;
        v57 = v62;
        if (!v62)
          goto LABEL_31;
      }
      else
      {
LABEL_28:
        v29 = v62;
        v56 = v61;
        v57 = v62;
        if (!v62)
          goto LABEL_31;
      }
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
LABEL_31:
      E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v14, &v56);
      v32 = v57;
      if (!v57)
        goto LABEL_35;
      v33 = (unint64_t *)&v57->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
        v35 = v66;
        v54 = v65;
        v55 = v66;
        if (!v66)
          goto LABEL_38;
      }
      else
      {
LABEL_35:
        v35 = v66;
        v54 = v65;
        v55 = v66;
        if (!v66)
          goto LABEL_38;
      }
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
LABEL_38:
      E5RT::IOPortPriv::BindMemoryObject((uint64_t)v14, (uint64_t)&v54, 1);
      v38 = v55;
      if (v55)
      {
        v39 = (unint64_t *)&v55->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      E5RT::IOPortPriv::LockPort(v14, 1);
      objc_msgSend(v18, "mpsndarray");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = E5RT::MemoryObject::Buffer(v65);
      v43 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v42);
      objc_msgSend(v41, "readBytes:strideBytes:", IOSurfaceGetBaseAddress((IOSurfaceRef)v43), 0);

      v44 = v66;
      if (!v66)
        goto LABEL_47;
      v45 = (unint64_t *)&v66->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        v47 = v62;
        if (v62)
        {
LABEL_48:
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      else
      {
LABEL_47:
        v47 = v62;
        if (v62)
          goto LABEL_48;
      }

LABEL_58:
      v50 = v64;
      if (v64)
      {
        v51 = (unint64_t *)&v64->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      ++v3;
      v2 = *((_QWORD *)this + 6);
      if (v3 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 7) - v2) >> 3))
        return;
    }
    v21 = (std::__shared_weak_count *)operator new();
    v22 = v60;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
    v62 = v21;
    v60 = 0;
    v23 = v65;
    if (!v65)
      goto LABEL_19;
LABEL_18:
    v66 = (std::__shared_weak_count *)v23;
    operator delete(v23);
    goto LABEL_19;
  }
}

void sub_190F3589C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_190F3599C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;

  E5RT::Status::~Status((E5RT::Status *)&a19);
  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 81) < 0)
  {
    operator delete(*(void **)(v28 - 104));
    if ((v27 & 1) != 0)
    {
LABEL_7:
      __cxa_free_exception(v26);
      _Unwind_Resume(a1);
    }
  }
  else if (v27)
  {
    goto LABEL_7;
  }
  JUMPOUT(0x190F35994);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal **a1, _QWORD *a2)
{
  E5RT::ExecutionStreamOperationInternal **v3;
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _BOOL4 v9;
  E5RT::IOPortImpl **v10;
  void *PortDescriptorRef;
  E5RT::OperandDescriptor *v12;
  E5RT::TensorDescriptor *v13;
  E5RT::TensorDescriptor *v14;
  unint64_t Rank;
  uint64_t TensorDataTypeRef;
  uint64_t v17;
  int HasKnownShape;
  char v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  uint64_t *v25;
  int v26;
  E5RT::ExecutionStreamOperationInternal *v27;
  void *v28;
  std::__shared_weak_count *v29;
  E5RT::ExecutionStreamOperationInternal *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *j;
  _QWORD *v38;
  _BOOL4 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  E5RT::ExecutionStreamOperationInternal *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  E5RT::IOPortImpl **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  E5RT::OperandDescriptor *v59;
  E5RT::TensorDescriptor *v60;
  E5RT::TensorDataType::Impl **v61;
  unint64_t v62;
  size_t v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  E5RT::ExecutionStreamOperationInternal *v68;
  void *v69;
  void *v70;
  unint64_t v71;
  const void *v72;
  int64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  void *v88;
  E5RT::IOPortImpl **v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  E5RT::IOPortImpl **v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  E5RT::IOPortImpl **v104;
  std::__shared_weak_count *v105;
  E5RT::IOPortImpl **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  E5RT::IOPortImpl **v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  void *exception;
  void *v129;
  void *v130;
  E5RT::ExecutionStreamOperationInternal **v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  char v135;
  _QWORD *OutputPorts;
  void *v137;
  void *v138;
  E5RT::IOPortImpl **v139;
  std::__shared_weak_count *v140;
  E5RT::IOPortImpl **v141;
  char *v142;
  char *v143;
  char *v144;
  void (***v145)(E5RT::IOPortPriv *__hidden);
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  E5RT::IOPortImpl **v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  char *v152;
  __int128 v153;
  unint64_t v154;

  v3 = a1;
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v153, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v151, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(&v149, 2, &v151);
    E5RT::E5RTError::E5RTError(exception, &v153, &v149);
  }
  if (a2[3] != 0xAAAAAAAAAAAAAAABLL * ((v3[13] - v3[12]) >> 3))
  {
    v129 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v153, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v151, "Require new shapes for all inputs/inOuts to reshape.");
    E5RT::Status::Status(&v149, 2, &v151);
    E5RT::E5RTError::E5RTError(v129, &v153, &v149);
  }
  E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(v3[15]);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v130, "getInputShapes");
  v137 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 0;
  v135 = 0;
  for (i = objc_msgSend(v137, "count"); v4 < i; i = objc_msgSend(v137, "count"))
  {
    v6 = (uint64_t)v3[12] + 24 * v4;
    v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(a2, v6);
    if (!v7)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v8 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*v3);
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v8, v6) != 0;
    E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPort(v3, 2 * v9, v6, &v149);
    v10 = v149;
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(v149);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      v125 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v153, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(&v151, "MPSGraph op cannot reshape a surface descriptor.");
      E5RT::Status::Status(&v145, 2, &v151);
      E5RT::E5RTError::E5RTError(v125, &v153, &v145);
    }
    v12 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v10);
    v13 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v12);
    v14 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v7[5]);
    Rank = E5RT::TensorDescriptor::GetRank(v13);
    if (Rank != E5RT::TensorDescriptor::GetRank(v14))
    {
      std::operator+<char>();
      v126 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v151, "ReshapeOperationInternal");
      E5RT::Status::Status(&v145, 2, &v153);
      E5RT::E5RTError::E5RTError(v126, &v151, &v145);
    }
    TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v13);
    v17 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v14);
    if (E5RT::operator!=(TensorDataTypeRef, v17))
    {
      std::operator+<char>();
      v127 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v151, "ReshapeOperationInternal");
      E5RT::Status::Status(&v145, 2, &v153);
      E5RT::E5RTError::E5RTError(v127, &v151, &v145);
    }
    HasKnownShape = E5RT::TensorDescriptor::HasKnownShape(v14);
    v19 = HasKnownShape;
    if (!HasKnownShape)
    {
      v135 = 1;
      v29 = v150;
      if (!v150)
        goto LABEL_4;
LABEL_22:
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      goto LABEL_4;
    }
    sub_190F3256C(v14);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_alloc(MEMORY[0x1E0CC7650]);
    objc_msgSend(v137, "objectAtIndexedSubscript:", v4);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (void *)objc_msgSend(v21, "initWithShape:dataType:", v20, objc_msgSend(v22, "dataType"));
    objc_msgSend(v133, "addObject:", v23);

    v24 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*v3);
    v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v24, v6);
    v26 = *(char *)(v6 + 23);
    if (v25)
    {
      if (v26 < 0)
        v6 = *(_QWORD *)v6;
      v27 = v3[28];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[E5RT::ExecutionStreamOperationInternal setObject:forKeyedSubscript:](v27, "setObject:forKeyedSubscript:", v20, v28);
    }
    else
    {
      if (v26 < 0)
        v6 = *(_QWORD *)v6;
      v30 = v3[26];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[E5RT::ExecutionStreamOperationInternal setObject:forKeyedSubscript:](v30, "setObject:forKeyedSubscript:", v20, v28);
    }

    v29 = v150;
    if (v150)
      goto LABEL_22;
LABEL_4:
    ++v4;
    if ((v19 & 1) == 0)
      break;
  }
  objc_msgSend(v130, "getOutputShapes");
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = v135;
  if ((v135 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CC7620], "deviceWithMTLDevice:", v3[35]);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    sub_190F33194(v130, v34, v133, *((unsigned __int8 *)v3 + 360));
    v35 = objc_claimAutoreleasedReturnValue();

    *((_BYTE *)v3 + 160) = 1;
    v132 = (void *)v35;
  }
  v36 = (_QWORD *)a2[2];
  for (j = v132; v36; v36 = (_QWORD *)*v36)
  {
    v38 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*v3);
    v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v38, (uint64_t)(v36 + 2)) != 0;
    E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPort(v3, 2 * v39, (uint64_t)(v36 + 2), &v153);
    v40 = v153;
    if (!(_QWORD)v153 || *(void (***)(E5RT::IOPortPriv *__hidden))v153 != &off_1E2D59AC8)
      v40 = 0;
    v41 = (std::__shared_weak_count *)v36[6];
    v147 = v36[5];
    v148 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    E5RT::IOPortPriv::SetPortDescriptor(v40, &v147);
    v44 = v148;
    if (!v148)
      goto LABEL_41;
    v45 = (unint64_t *)&v148->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
      if (*((_QWORD *)&v153 + 1))
      {
LABEL_42:
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    else
    {
LABEL_41:
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
      if (*((_QWORD *)&v153 + 1))
        goto LABEL_42;
    }
  }
  v149 = 0;
  v150 = 0;
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*v3);
  v50 = v3[6];
  if (v3[7] == v50)
    goto LABEL_144;
  v51 = 0;
  v134 = v3 + 21;
  v131 = v3;
  do
  {
    v52 = (uint64_t)v50 + 24 * v51;
    v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v52);
    v54 = v53;
    if (!v53)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v55 = (E5RT::IOPortImpl **)v53[5];
    v56 = (std::__shared_weak_count *)v54[6];
    v145 = (void (***)(E5RT::IOPortPriv *__hidden))v55;
    v146 = v56;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v59 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v55);
    v60 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v59);
    v61 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v60);
    v62 = E5RT::TensorDescriptor::GetRank(v60);
    objc_msgSend(j, "objectAtIndexedSubscript:", v51);
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    v153 = 0uLL;
    v63 = 8 * v62;
    v154 = 0;
    if (v62)
    {
      if (v62 >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      *(_QWORD *)&v153 = operator new(8 * v62);
      *((_QWORD *)&v153 + 1) = v153;
      v154 = v153 + 8 * v62;
    }
    if ((v33 & 1) != 0
      || (objc_msgSend(v138, "shape"), v64 = (void *)objc_claimAutoreleasedReturnValue(), v64, !v64))
    {
      if (v62)
      {
        v87 = operator new(8 * v62);
        v62 = (unint64_t)v87 + 8 * v62;
        memset(v87, 255, v63);
        v88 = (void *)v153;
        if (!(_QWORD)v153)
        {
LABEL_82:
          *(_QWORD *)&v153 = v87;
          *((_QWORD *)&v153 + 1) = v62;
          v154 = v62;
          E5RT::TensorDescriptor::CreateTensorDesc(v61, (uint64_t *)&v153, &v151);
          v89 = (E5RT::IOPortImpl **)v151;
          if ((_QWORD)v151)
          {
            v90 = (std::__shared_weak_count *)operator new();
            v92 = v150;
            v91 = (std::__shared_weak_count_vtbl *)v151;
            v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
            v90->__shared_owners_ = 0;
            v90->__shared_weak_owners_ = 0;
            v90[1].__vftable = v91;
            v149 = v89;
            v150 = v90;
            *(_QWORD *)&v151 = 0;
            if (!v92)
              goto LABEL_114;
          }
          else
          {
            v92 = v150;
            v149 = 0;
            v150 = 0;
            *(_QWORD *)&v151 = 0;
            if (!v92)
              goto LABEL_114;
          }
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          goto LABEL_90;
        }
      }
      else
      {
        v87 = 0;
        v88 = (void *)v153;
        if (!(_QWORD)v153)
          goto LABEL_82;
      }
      *((_QWORD *)&v153 + 1) = v88;
      operator delete(v88);
      goto LABEL_82;
    }
    objc_msgSend(v138, "shape");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    v66 = (void *)objc_msgSend(v65, "copy");
    v67 = v52;
    if (*(char *)(v52 + 23) < 0)
      v67 = *(_QWORD *)v52;
    v68 = v3[27];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v67);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    -[E5RT::ExecutionStreamOperationInternal setObject:forKeyedSubscript:](v68, "setObject:forKeyedSubscript:", v66, v69);

    objc_msgSend(v138, "shape");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    sub_190F36C74(&v151, v70);
    if ((_QWORD)v153)
    {
      *((_QWORD *)&v153 + 1) = v153;
      operator delete((void *)v153);
    }
    v153 = v151;
    v154 = (unint64_t)v152;
    v152 = 0;
    v151 = 0uLL;

    if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v134, v52))
    {
      *(_QWORD *)&v151 = v52;
      v71 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v134, v52, (uint64_t)&std::piecewise_construct, (__int128 **)&v151)[5];
      v143 = 0;
      v144 = 0;
      v142 = 0;
      v72 = (const void *)v153;
      v73 = *((_QWORD *)&v153 + 1) - v153;
      if (*((_QWORD *)&v153 + 1) == (_QWORD)v153)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      if (v73 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v74 = (char *)operator new(*((_QWORD *)&v153 + 1) - v153);
      v75 = v73 >> 3;
      v142 = v74;
      v143 = v74;
      v144 = &v74[8 * (v73 >> 3)];
      memcpy(v74, v72, v73);
      v143 = &v74[8 * (v73 >> 3)];
      v76 = *(_QWORD *)&v74[8 * (v73 >> 3) - 8];
      v152 = 0;
      v151 = 0uLL;
      v77 = (char *)operator new(v73);
      *(_QWORD *)&v151 = v77;
      v152 = &v77[8 * (v73 >> 3)];
      bzero(v77, v73);
      *((_QWORD *)&v151 + 1) = &v77[v73];
      if ((unint64_t)(v73 >> 3) <= 1)
        v78 = 1;
      else
        v78 = v73 >> 3;
      *(_QWORD *)&v77[8 * v75 - 8] = 1;
      if ((unint64_t)v73 >= 0x10)
      {
        *(_QWORD *)&v77[8 * (v73 >> 3) - 16] = ((v76 * v71 + 63) & 0xFFFFFFFFFFFFFFC0) / v71;
        v79 = v78 - 2;
        if (v79)
        {
          v80 = *(_QWORD *)&v77[(v73 & 0xFFFFFFFFFFFFFFF8) - 16];
          v81 = &v74[8 * v75 - 16];
          v82 = &v77[8 * v75 - 24];
          do
          {
            v83 = *(_QWORD *)v81;
            v81 -= 8;
            v80 *= v83;
            *(_QWORD *)v82 = v80;
            v82 -= 8;
            --v79;
          }
          while (v79);
        }
      }
      v143 = v74;
      operator delete(v74);
      v84 = v151;
      v3 = v131;
      j = v132;
      v33 = v135;
      if (*((_QWORD *)&v151 + 1) != (_QWORD)v151)
      {
        v85 = (uint64_t)(*((_QWORD *)&v151 + 1) - v151) >> 3;
        if (v85 <= 1)
          v85 = 1;
        if (v85 < 2)
        {
          v86 = 0;
LABEL_101:
          v102 = (_QWORD *)(v84 + 8 * v86);
          v103 = v85 - v86;
          do
          {
            *v102++ *= v71;
            --v103;
          }
          while (v103);
          goto LABEL_103;
        }
        v86 = v85 & 0xFFFFFFFFFFFFFFFELL;
        v99 = (unint64_t *)(v151 + 8);
        v100 = v85 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v101 = *v99 * v71;
          *(v99 - 1) *= v71;
          *v99 = v101;
          v99 += 2;
          v100 -= 2;
        }
        while (v100);
        if (v85 != v86)
          goto LABEL_101;
      }
LABEL_103:
      E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(v61, (uint64_t *)&v153, &v151, &v141);
      v104 = v141;
      if (v141)
      {
        v105 = (std::__shared_weak_count *)operator new();
        v106 = v141;
        v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
        v105->__shared_owners_ = 0;
        v105->__shared_weak_owners_ = 0;
        v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
        v141 = 0;
        v107 = v150;
        v149 = v104;
        v150 = v105;
        if (!v107)
          goto LABEL_112;
      }
      else
      {
        v141 = 0;
        v107 = v150;
        v149 = 0;
        v150 = 0;
        if (!v107)
          goto LABEL_112;
      }
      v108 = (unint64_t *)&v107->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (v109)
      {
        v110 = v141;
        v141 = 0;
        if (!v110)
          goto LABEL_112;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
        v110 = v141;
        v141 = 0;
        if (!v110)
        {
LABEL_112:
          if ((_QWORD)v151)
          {
            *((_QWORD *)&v151 + 1) = v151;
            operator delete((void *)v151);
          }
          goto LABEL_114;
        }
      }
      (*((void (**)(E5RT::IOPortImpl **))*v110 + 1))(v110);
      goto LABEL_112;
    }
    E5RT::TensorDescriptor::CreateTensorDesc(v61, (uint64_t *)&v153, &v151);
    v96 = (E5RT::IOPortImpl **)v151;
    if ((_QWORD)v151)
    {
      v97 = (std::__shared_weak_count *)operator new();
      v92 = v150;
      v98 = (std::__shared_weak_count_vtbl *)v151;
      v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
      v97->__shared_owners_ = 0;
      v97->__shared_weak_owners_ = 0;
      v97[1].__vftable = v98;
      v149 = v96;
      v150 = v97;
      *(_QWORD *)&v151 = 0;
      if (!v92)
        goto LABEL_114;
    }
    else
    {
      v92 = v150;
      v149 = 0;
      v150 = 0;
      *(_QWORD *)&v151 = 0;
      if (!v92)
        goto LABEL_114;
    }
    v121 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v121);
    while (__stlxr(v94 - 1, v121));
LABEL_90:
    if (v94)
    {
      v95 = v151;
      *(_QWORD *)&v151 = 0;
      if (!v95)
        goto LABEL_114;
LABEL_94:
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
      goto LABEL_114;
    }
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v95 = v151;
    *(_QWORD *)&v151 = 0;
    if (v95)
      goto LABEL_94;
LABEL_114:
    v111 = (uint64_t)v145;
    if (!v145 || *v145 != &off_1E2D59AC8)
      v111 = 0;
    v139 = v149;
    v140 = v150;
    if (v150)
    {
      v112 = (unint64_t *)&v150->__shared_owners_;
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    E5RT::IOPortPriv::SetPortDescriptor(v111, (uint64_t *)&v139);
    v114 = v140;
    if (v140)
    {
      v115 = (unint64_t *)&v140->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
        v117 = (void *)v153;
        if (!(_QWORD)v153)
          goto LABEL_126;
LABEL_125:
        *((_QWORD *)&v153 + 1) = v117;
        operator delete(v117);
        goto LABEL_126;
      }
    }
    v117 = (void *)v153;
    if ((_QWORD)v153)
      goto LABEL_125;
LABEL_126:

    v118 = v146;
    if (v146)
    {
      v119 = (unint64_t *)&v146->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    ++v51;
    v50 = v3[6];
  }
  while (v51 < 0xAAAAAAAAAAAAAAABLL * ((v3[7] - v50) >> 3));
  v122 = v150;
  if (v150)
  {
    v123 = (unint64_t *)&v150->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
LABEL_144:

}

void sub_190F367F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_190F36C74(_QWORD *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t i;
  void *v8;
  uint64_t v9;
  void *exception;
  int v11;
  std::string *v12;
  __int128 v13;
  id v14;
  std::string v15;
  __int128 v16;
  std::string::size_type v17;
  _BYTE v18[8];
  _QWORD v19[3];

  v14 = a2;
  v3 = objc_msgSend(v14, "count");
  v4 = v3;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v3)
  {
    if (v3 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = 8 * v3;
    v6 = (char *)operator new(8 * v3);
    *a1 = v6;
    a1[2] = &v6[8 * v4];
    bzero(v6, 8 * v4);
    a1[1] = &v6[v5];
  }
  else
  {
    v6 = 0;
  }
  for (i = 0; i < objc_msgSend(v14, "count"); ++i)
  {
    objc_msgSend(v14, "objectAtIndexedSubscript:", i);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "integerValue");

    if (v9 < -1)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v19, "MakeTensorDescShapeVectorFromNSArray");
      objc_msgSend(v14, "objectAtIndexedSubscript:", i);
      v11 = objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "intValue");
      std::to_string(&v15, v11);
      v12 = std::string::insert(&v15, 0, "MPSGraph returned an expected shape = ");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v17 = v12->__r_.__value_.__r.__words[2];
      v16 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(v18, 2, &v16);
      E5RT::E5RTError::E5RTError(exception, v19, v18);
    }
    *(_QWORD *)&v6[8 * i] = v9;
  }

}

void sub_190F36E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;

  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:

      if (a29 < 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);

  if (a29 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_10:
      if (v30)
      {
        *(_QWORD *)(v29 + 8) = v30;
        operator delete(v30);
      }

      _Unwind_Resume(a1);
    }
LABEL_9:
    __cxa_free_exception(v31);
    goto LABEL_10;
  }
LABEL_8:
  if (!v33)
    goto LABEL_10;
  goto LABEL_9;
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *exception;
  _QWORD v11[3];
  _BYTE v12[8];
  id location[3];
  _QWORD v14[4];
  id v15[2];
  _BYTE v16[24];
  _BYTE *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 272))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(location, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v11, "Completion AsyncEvent (internal or client bound) is required for async submit.");
    E5RT::Status::Status(v12, 11, v11);
    E5RT::E5RTError::E5RTError(exception, location, v12);
  }
  objc_initWeak(location, *(id *)(a1 + 136));
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3321888768;
  v14[2] = sub_190F3721C;
  v14[3] = &unk_1E2DCA7F0;
  v15[1] = (id)a1;
  objc_copyWeak(v15, location);
  v6 = v16;
  v16[0] = 0;
  v18 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v7 = *(_QWORD *)(a4 + 24);
    if (v7)
    {
      if (v7 == a4)
      {
        v17 = v16;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v16);
        goto LABEL_8;
      }
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    v17 = (_BYTE *)v7;
LABEL_8:
    v18 = 1;
  }
  v8 = (void *)MEMORY[0x19401D648](v14);
  objc_msgSend(*(id *)(a1 + 136), "setCompletionHandler:", v8);
  E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitWorkToMpsGraph((E5RT::Ops::MpsGraphInferenceOperation::Impl *)a1, 1);

  if (v18)
  {
    if (v17 == v16)
    {
      v9 = 4;
      goto LABEL_14;
    }
    if (v17)
    {
      v9 = 5;
      v6 = v17;
LABEL_14:
      (*(void (**)(_QWORD *))(*v6 + 8 * v9))(v6);
    }
  }
  objc_destroyWeak(v15);
  objc_destroyWeak(location);
}

void sub_190F37128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, id location, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32,char a33)
{
  id *v33;
  _QWORD *v34;
  uint64_t v36;

  if (a33)
  {
    if (a32 == v34)
    {
      v36 = 4;
    }
    else
    {
      if (!a32)
        goto LABEL_7;
      v36 = 5;
      v34 = a32;
    }
    (*(void (**)(_QWORD *))(*v34 + 8 * v36))(v34);
  }
LABEL_7:
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190F371E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_190F3721C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  E5RT::Ops::MpsGraphInferenceOperation::Impl *v7;
  id WeakRetained;
  id v9;
  E5RT::ExecutionStreamOperationInternal *v10;
  uint64_t v11;
  uint64_t v12;
  E5RT::ExecutionStreamOperationInternal *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  uint64_t v19;
  void *v20[2];
  char v21;
  uint64_t v22;
  E5RT::ExecutionStreamOperationInternal *v23;

  v5 = a2;
  v6 = a3;
  v7 = *(E5RT::Ops::MpsGraphInferenceOperation::Impl **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setCompletionHandler:", &unk_1E2DCA7C8);

  if (v6)
  {
    if (*(_BYTE *)(a1 + 80))
    {
      objc_msgSend(v6, "localizedDescription");
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(v20, (char *)objc_msgSend(v9, "UTF8String"));

      if (!*(_BYTE *)(a1 + 80))
        std::__throw_bad_optional_access[abi:ne180100]();
      v10 = *(E5RT::ExecutionStreamOperationInternal **)v7;
      std::string::basic_string[abi:ne180100]<0>(__p, "SubmitAsync_block_invoke");
      E5RT::Status::Status(&v16, 11, v20);
      std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string,E5RT::Status>((uint64_t)__p, (uint64_t)&v16, &v19);
      v23 = v10;
      v11 = *(_QWORD *)(a1 + 72);
      if (!v11)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, E5RT::ExecutionStreamOperationInternal **, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v23, &v19);
      v12 = v19;
      v19 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      E5RT::Status::~Status((E5RT::Status *)&v16);
      if (v18 < 0)
      {
        operator delete(__p[0]);
        if (v21 < 0)
LABEL_17:
          operator delete(v20[0]);
      }
      else if (v21 < 0)
      {
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v7))
      E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateDataDependentOutputPorts(v7);
    if (*(_BYTE *)(a1 + 80))
    {
      v13 = *(E5RT::ExecutionStreamOperationInternal **)v7;
      v22 = 0;
      v20[0] = v13;
      v14 = *(_QWORD *)(a1 + 72);
      if (!v14)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v14 + 48))(v14, v20, &v22);
      v15 = v22;
      v22 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }

}

void sub_190F373E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190F373F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  void *v23;
  void *v24;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

E5RT::ExecutionStreamOperationInternal *E5RT::Ops::MpsGraphInferenceOperation::MpsGraphInferenceOperation(E5RT::ExecutionStreamOperationInternal *a1, __int128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id **a10, uint64_t a11, char a12, char a13, uint64_t a14)
{
  E5RT::Ops::MpsGraphInferenceOperation::Impl **v18;
  E5RT::Ops::MpsGraphInferenceOperation::Impl **v19;
  uint64_t v20;
  E5RT::Ops::MpsGraphInferenceOperation::Impl *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  E5RT::Ops::MpsGraphInferenceOperation::Impl *v28;
  _QWORD v30[2];

  v18 = (E5RT::Ops::MpsGraphInferenceOperation::Impl **)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, a6);
  *v18 = (E5RT::Ops::MpsGraphInferenceOperation::Impl *)&off_1E2D5BC40;
  v19 = v18 + 37;
  v18[37] = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)v18);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  v20 = operator new();
  v21 = (E5RT::Ops::MpsGraphInferenceOperation::Impl *)v20;
  v22 = *a3;
  v23 = (std::__shared_weak_count *)a3[1];
  v30[0] = v22;
  v30[1] = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  E5RT::Ops::MpsGraphInferenceOperation::Impl::Impl(v20, (uint64_t)a1, v30, a7, a8, a9, a10, a11, a12, a13, a14);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v28 = *v19;
  *v19 = v21;
  if (v28)
  {
    E5RT::Ops::MpsGraphInferenceOperation::Impl::~Impl(v28);
    MEMORY[0x19401CD90]();
  }
  kdebug_trace();
  *((_QWORD *)a1 + 29) |= 5uLL;
  return a1;
}

{
  return E5RT::Ops::MpsGraphInferenceOperation::MpsGraphInferenceOperation(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_190F3767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  E5RT::ExecutionStreamOperationInternal *v4;
  E5RT::Ops::MpsGraphInferenceOperation::Impl **v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MEMORY[0x19401CD90](v6, 0x10E0C40F1B7D6C0);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::MpsGraphInferenceOperation::Impl>>::~propagate_const(v5);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v4);
  _Unwind_Resume(a1);
}

void sub_190F376C8(_Unwind_Exception *a1)
{
  E5RT::ExecutionStreamOperationInternal *v1;
  E5RT::Ops::MpsGraphInferenceOperation::Impl **v2;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::MpsGraphInferenceOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

E5RT::Ops::MpsGraphInferenceOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::MpsGraphInferenceOperation::Impl>>::~propagate_const(E5RT::Ops::MpsGraphInferenceOperation::Impl **a1)
{
  E5RT::Ops::MpsGraphInferenceOperation::Impl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::MpsGraphInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void E5RT::Ops::MpsGraphInferenceOperation::~MpsGraphInferenceOperation(E5RT::Ops::MpsGraphInferenceOperation *this)
{
  E5RT::Ops::MpsGraphInferenceOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5BC40;
  v2 = (E5RT::Ops::MpsGraphInferenceOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::MpsGraphInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::MpsGraphInferenceOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5BC40;
  v2 = (E5RT::Ops::MpsGraphInferenceOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::MpsGraphInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::GetOpCode(E5RT::Ops::MpsGraphInferenceOperation *this)
{
  return 8;
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::EncodeOperation(id **this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  void *v6;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::EncodeOperation((E5RT::ExecutionStreamOperationInternal *)this, a2, a3);
  v6 = (void *)MEMORY[0x19401D4A4]();
  E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeOperation(this[37], 1);
  objc_autoreleasePoolPop(v6);
  return kdebug_trace();
}

void sub_190F378CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::ResetOperation(id **this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::MpsGraphInferenceOperation::Impl::ResetOperation(this[37]);
  E5RT::ExecutionStreamOperationInternal::ResetOperation((E5RT::ExecutionStreamOperationInternal *)this);
  return kdebug_trace();
}

void sub_190F37974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::ExecuteSync(E5RT::Ops::MpsGraphInferenceOperation::Impl **this, const void **a2)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::MpsGraphInferenceOperation::Impl::ExecuteSync(this[37], a2);
  return kdebug_trace();
}

void sub_190F37A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::ExecuteSync(E5RT::Ops::MpsGraphInferenceOperation::Impl **this)
{
  E5RT::ExecuteOptions *v2;
  E5RT::Ops::MpsGraphInferenceOperation::Impl *v3;
  const void **v4;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  v2 = (E5RT::ExecuteOptions *)kdebug_trace();
  v3 = this[37];
  v4 = (const void **)E5RT::ExecuteOptions::SharedDefaultOption(v2);
  E5RT::Ops::MpsGraphInferenceOperation::Impl::ExecuteSync(v3, v4);
  return kdebug_trace();
}

void sub_190F37AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal ***a1, _QWORD *a2)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  kdebug_trace();
  E5RT::Ops::MpsGraphInferenceOperation::Impl::ReshapeOperationInternal(a1[37], a2);
  E5RT::ExecutionStreamOperationInternal::UpdateDynamicPorts(a1);
  return kdebug_trace();
}

void sub_190F37B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t ActiveFutureValue;
  void *exception;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[3];
  _BYTE v19[8];
  _BYTE v20[24];
  _BYTE *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState((E5RT::ExecutionStreamOperationInternal *)a1) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v15, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v18, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v19, 2, v18);
    E5RT::E5RTError::E5RTError(exception, &v15, v19);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)a1);
  v15 = 0x2B23819800000000;
  v16 = 0u;
  v17 = 0u;
  kdebug_trace();
  v8 = *(_QWORD *)(a1 + 296);
  v20[0] = 0;
  v22 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v9 = *(_QWORD *)(a4 + 24);
    if (v9)
    {
      if (v9 == a4)
      {
        v21 = v20;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v20);
        goto LABEL_8;
      }
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
    v21 = (_BYTE *)v9;
LABEL_8:
    v22 = 1;
  }
  E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitAsync(v8, v6, v7, (uint64_t)v20);
  if (v22)
  {
    v10 = v21;
    if (v21 == v20)
    {
      v11 = 4;
      v10 = v20;
      goto LABEL_14;
    }
    if (v21)
    {
      v11 = 5;
LABEL_14:
      (*(void (**)(void))(*v10 + 8 * v11))();
    }
  }
  ActiveFutureValue = E5RT::AsyncEvent::GetActiveFutureValue(*(E5RT::AsyncEvent **)(a1 + 176));
  E5RT::ExecutionStreamOperationInternal::UpdateLastCompletionValue(a1, ActiveFutureValue);
  return kdebug_trace();
}

void sub_190F37D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,char a23)
{
  char *v24;
  uint64_t v25;

  if (a23)
  {
    v24 = a22;
    if (a22 == &a19)
    {
      v25 = 4;
      v24 = &a19;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a10);
      _Unwind_Resume(a1);
    }
    if (a22)
    {
      v25 = 5;
      goto LABEL_6;
    }
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a10);
  _Unwind_Resume(a1);
}

void sub_190F37E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a24);
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v25 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v24);
      _Unwind_Resume(a1);
    }
  }
  else if (v25)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_190F37E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v15);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::PrepareOpForEncode(E5RT::Ops::MpsGraphInferenceOperation::Impl **this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::MpsGraphInferenceOperation::Impl::PrepareOpForEncode(this[37]);
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_190F37F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F37F24(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;

  v4 = a3;
  if (v4)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    v6 = v4;
    objc_msgSend(v4, "localizedDescription");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x19401C808](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, objc_msgSend(v5, "UTF8String"));

  }
  else
  {

  }
}

void sub_190F37FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_190F37FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::~Impl(E5RT::Ops::MpsGraphInferenceOperation::Impl *this)
{
  void **v2;
  void *v3;
  id *v4;
  id *v5;
  void *v6;
  void **v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  v2 = (void **)*((_QWORD *)this + 42);
  if (v2)
  {
    do
    {
      v15 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_23:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_23;
      }
      operator delete(v2);
      v2 = v15;
    }
    while (v15);
  }
  v3 = (void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v3)
    operator delete(v3);

  v4 = (id *)*((_QWORD *)this + 31);
  if (v4)
  {
    do
    {
      v5 = (id *)*v4;

      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
    operator delete(v6);

  v7 = (void **)*((_QWORD *)this + 23);
  if (v7)
  {
    do
    {
      v16 = (void **)*v7;
      if (*((char *)v7 + 39) < 0)
        operator delete(v7[2]);
      operator delete(v7);
      v7 = v16;
    }
    while (v16);
  }
  v8 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v8)
    operator delete(v8);

  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v9)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (void **)*((_QWORD *)this + 12);
    if (!v12)
      goto LABEL_32;
  }
  else
  {
LABEL_15:
    v12 = (void **)*((_QWORD *)this + 12);
    if (!v12)
      goto LABEL_32;
  }
  v13 = (void **)*((_QWORD *)this + 13);
  v14 = v12;
  if (v13 != v12)
  {
    do
    {
      if (*((char *)v13 - 1) < 0)
        operator delete(*(v13 - 3));
      v13 -= 3;
    }
    while (v13 != v12);
    v14 = (void **)*((_QWORD *)this + 12);
  }
  *((_QWORD *)this + 13) = v12;
  operator delete(v14);
LABEL_32:
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = *((_QWORD *)this + 10);
    v19 = (void *)*((_QWORD *)this + 9);
    if (v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0)
          operator delete(*(void **)(v18 - 24));
        v18 -= 24;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v17;
    operator delete(v19);
  }
  v20 = *((_QWORD *)this + 6);
  if (v20)
  {
    v21 = *((_QWORD *)this + 7);
    v22 = (void *)*((_QWORD *)this + 6);
    if (v21 != v20)
    {
      do
      {
        if (*(char *)(v21 - 1) < 0)
          operator delete(*(void **)(v21 - 24));
        v21 -= 24;
      }
      while (v21 != v20);
      v22 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v20;
    operator delete(v22);
  }
  v23 = *((_QWORD *)this + 3);
  if (v23)
  {
    v24 = *((_QWORD *)this + 4);
    v25 = (void *)*((_QWORD *)this + 3);
    if (v24 != v23)
    {
      do
      {
        if (*(char *)(v24 - 1) < 0)
          operator delete(*(void **)(v24 - 24));
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v23;
    operator delete(v25);
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  char *v9;
  std::string *v10;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  v9 = v8;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  v10 = (std::string *)(v9 + 40);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v9 + 7) = *(_QWORD *)(a3 + 40);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_190F3839C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
  {
    operator delete(*v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v9;
  _BYTE *v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  std::string *v20;
  uint64_t v21;
  __int128 v22;
  std::string *v23;
  std::string *v24;
  char *v25;
  std::string *v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  void *v31;
  std::string *v32;
  std::string *v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  __int128 *v40;
  char *v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  std::string *v47;
  std::string *v49;
  char *v50;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 24;
  v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1)
    return (std::string *)v7;
  v9 = __str;
  v11 = a1[2];
  v12 = (__int128 *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v12) >> 3)) >= a5)
  {
    v18 = (uint64_t)v12 - v7;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      v20 = &__str[a5];
      v25 = (char *)a1[1];
      goto LABEL_42;
    }
    v20 = (std::string *)((char *)__str + 8 * (((uint64_t)v12 - v7) >> 3));
    if (v20 != a4)
    {
      v21 = 0;
      do
      {
        v23 = (std::string *)((char *)v12 + v21 * 24);
        v24 = &v20[v21];
        if (SHIBYTE(v20[v21].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v23, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
        }
        else
        {
          v22 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v23->__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v22;
        }
        ++v21;
      }
      while (&v20[v21] != a4);
      v25 = (char *)v12 + v21 * 24;
      a1[1] = (char *)v12 + v21 * 24;
      if (v18 < 1)
        return (std::string *)v7;
LABEL_42:
      v39 = v7 + 24 * a5;
      v40 = (__int128 *)&v25[-24 * a5];
      v41 = v25;
      if (v40 < v12)
      {
        v41 = v25;
        do
        {
          v42 = *v40;
          *((_QWORD *)v41 + 2) = *((_QWORD *)v40 + 2);
          *(_OWORD *)v41 = v42;
          v41 += 24;
          *((_QWORD *)v40 + 1) = 0;
          *((_QWORD *)v40 + 2) = 0;
          *(_QWORD *)v40 = 0;
          v40 = (__int128 *)((char *)v40 + 24);
        }
        while (v40 < v12);
      }
      a1[1] = v41;
      if (v25 != (char *)v39)
      {
        v43 = v25 - 24;
        v44 = 8 * ((uint64_t)&v25[-v39] >> 3);
        do
        {
          if (v43[23] < 0)
            operator delete(*(void **)v43);
          v45 = (__int128 *)(v7 + v44 - 24);
          v46 = *v45;
          *((_QWORD *)v43 + 2) = *(_QWORD *)(v7 + v44 - 8);
          *(_OWORD *)v43 = v46;
          v43 -= 24;
          *(_BYTE *)(v7 + v44 - 1) = 0;
          *(_BYTE *)v45 = 0;
          v44 -= 24;
        }
        while (v44);
      }
      if (v20 != v9)
      {
        v47 = (std::string *)v7;
        do
          std::string::operator=(v47++, v9++);
        while (v9 != v20);
      }
      return (std::string *)v7;
    }
    v25 = (char *)a1[1];
    a1[1] = v12;
    if (v18 >= 1)
      goto LABEL_42;
    return (std::string *)v7;
  }
  v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = (char *)operator new(24 * v16);
  }
  else
  {
    v17 = 0;
  }
  v26 = (std::string *)&v17[24 * v6];
  v49 = v26;
  v50 = &v17[24 * v16];
  v27 = a5;
  v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v26->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
    }
    ++v26;
    ++v9;
    --v27;
  }
  while (v27 * 24);
  v30 = v49;
  v31 = *a1;
  v32 = v49;
  if (*a1 != (void *)v7)
  {
    v33 = v49;
    v34 = v7;
    do
    {
      v32 = v33 - 1;
      v35 = *(_OWORD *)(v34 - 24);
      v33[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v34 - 8);
      *(_OWORD *)&v33[-1].__r_.__value_.__l.__data_ = v35;
      *(_QWORD *)(v34 - 16) = 0;
      *(_QWORD *)(v34 - 8) = 0;
      *(_QWORD *)(v34 - 24) = 0;
      --v33;
      v34 -= 24;
    }
    while ((void *)v34 != v31);
  }
  v36 = a1[1];
  if (v36 != (void *)v7)
  {
    do
    {
      v37 = *(_OWORD *)v7;
      v28->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v37;
      ++v28;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v36);
    v7 = (uint64_t)a1[1];
  }
  v38 = *a1;
  *a1 = v32;
  a1[1] = v28;
  a1[2] = v50;
  while ((void *)v7 != v38)
  {
    if (*(char *)(v7 - 1) < 0)
      operator delete(*(void **)(v7 - 24));
    v7 -= 24;
  }
  if (v38)
    operator delete(v38);
  return v30;
}

void sub_190F387C0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const void **v17;
  __int128 v18;
  int v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  BOOL v27;
  const void **v28;
  char v29;
  BOOL v30;
  const void **v31;
  const void **v32;
  const void **v33;
  int v34;
  int v35;
  size_t v36;
  const void **v37;
  size_t v38;
  const void *v39;
  size_t v40;
  int v41;
  _BOOL4 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  __n128 *v46;
  unint64_t v47;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  const void *v52;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t result, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  const void **v10;
  int v11;
  int v12;
  size_t v13;
  const void **v14;
  size_t v15;
  const void *v16;
  size_t v17;
  _BOOL4 v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  const void *v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  BOOL v32;
  __int128 v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;

  if ((const void **)result != a2)
  {
    v35 = v2;
    v36 = v3;
    v5 = result;
    v6 = (const void **)(result + 24);
    if ((const void **)(result + 24) != a2)
    {
      v7 = 0;
      v8 = (const void **)result;
      do
      {
        v10 = v8;
        v8 = v6;
        v11 = *((char *)v10 + 23);
        v12 = *((char *)v10 + 47);
        if (v12 >= 0)
          v13 = *((unsigned __int8 *)v10 + 47);
        else
          v13 = (size_t)v10[4];
        if (v12 >= 0)
          v14 = v6;
        else
          v14 = (const void **)v10[3];
        if (v11 >= 0)
          v15 = *((unsigned __int8 *)v10 + 23);
        else
          v15 = (size_t)v10[1];
        if (v11 >= 0)
          v16 = v10;
        else
          v16 = *v10;
        if (v15 >= v13)
          v17 = v13;
        else
          v17 = v15;
        result = memcmp(v14, v16, v17);
        v18 = v13 < v15;
        if ((_DWORD)result)
          v18 = (int)result < 0;
        if (v18)
        {
          v34 = v8[2];
          v19 = (unint64_t)v34;
          v33 = *(_OWORD *)v8;
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          v20 = HIBYTE(v19);
          if ((v20 & 0x80u) == 0)
            v21 = v20;
          else
            v21 = *((_QWORD *)&v33 + 1);
          if ((v20 & 0x80u) == 0)
            v22 = &v33;
          else
            v22 = (__int128 *)v33;
          v23 = v7;
          do
          {
            v24 = v5 + v23;
            *(_OWORD *)(v24 + 24) = *(_OWORD *)(v5 + v23);
            *(_QWORD *)(v24 + 40) = *(_QWORD *)(v5 + v23 + 16);
            *(_BYTE *)(v24 + 23) = 0;
            *(_BYTE *)v24 = 0;
            if (!v23)
            {
              v9 = v5;
              goto LABEL_5;
            }
            v27 = *(const void **)(v24 - 24);
            v25 = v24 - 24;
            v26 = v27;
            v28 = *(char *)(v25 + 23);
            if (v28 >= 0)
              v29 = *(unsigned __int8 *)(v25 + 23);
            else
              v29 = *(_QWORD *)(v25 + 8);
            if (v28 >= 0)
              v30 = (const void *)v25;
            else
              v30 = v26;
            if (v29 >= v21)
              v31 = v21;
            else
              v31 = v29;
            result = memcmp(v22, v30, v31);
            v32 = v21 < v29;
            if ((_DWORD)result)
              v32 = (int)result < 0;
            v23 -= 24;
          }
          while (v32);
          v9 = v5 + v23 + 24;
LABEL_5:
          *(_OWORD *)v9 = v33;
          *(_QWORD *)(v9 + 16) = v34;
        }
        v6 = v8 + 3;
        v7 += 24;
      }
      while (v8 + 3 != a2);
    }
  }
  return result;
}

const void **std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **result, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  const void **v5;
  const void **i;
  const void **v7;
  int v8;
  int v9;
  size_t v10;
  const void **v11;
  size_t v12;
  const void *v13;
  size_t v14;
  _BOOL4 v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  __int128 *v19;
  const void **v20;
  const void **v21;
  size_t v22;
  const void **v23;
  const void **v24;
  size_t v25;
  size_t v26;
  const void **v27;
  size_t v28;
  BOOL v29;
  __int128 v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;

  if (result != a2)
  {
    v32 = v2;
    v33 = v3;
    v5 = result;
    for (i = result + 3; v5 + 3 != a2; i = v5 + 3)
    {
      v7 = v5;
      v5 = i;
      v8 = *((char *)v7 + 23);
      v9 = *((char *)v7 + 47);
      if (v9 >= 0)
        v10 = *((unsigned __int8 *)v7 + 47);
      else
        v10 = (size_t)v7[4];
      if (v9 >= 0)
        v11 = i;
      else
        v11 = (const void **)v7[3];
      if (v8 >= 0)
        v12 = *((unsigned __int8 *)v7 + 23);
      else
        v12 = (size_t)v7[1];
      if (v8 >= 0)
        v13 = v7;
      else
        v13 = *v7;
      if (v12 >= v10)
        v14 = v10;
      else
        v14 = v12;
      result = (const void **)memcmp(v11, v13, v14);
      v15 = v10 < v12;
      if ((_DWORD)result)
        v15 = (int)result < 0;
      if (v15)
      {
        v31 = v5[2];
        v16 = (unint64_t)v31;
        v30 = *(_OWORD *)v5;
        v5[1] = 0;
        v5[2] = 0;
        *v5 = 0;
        v17 = HIBYTE(v16);
        if ((v17 & 0x80u) == 0)
          v18 = v17;
        else
          v18 = *((_QWORD *)&v30 + 1);
        if ((v17 & 0x80u) == 0)
          v19 = &v30;
        else
          v19 = (__int128 *)v30;
        v20 = v5;
        do
        {
          v21 = v20 - 3;
          *(_OWORD *)v20 = *(_OWORD *)(v20 - 3);
          v20[2] = *(v20 - 1);
          *((_BYTE *)v20 - 1) = 0;
          *((_BYTE *)v20 - 24) = 0;
          v22 = *((unsigned __int8 *)v20 - 25);
          v23 = v20 - 6;
          v24 = (const void **)*(v20 - 6);
          v25 = (size_t)*(v20 - 5);
          if ((v22 & 0x80u) == 0)
            v26 = v22;
          else
            v26 = v25;
          if ((v22 & 0x80u) == 0)
            v27 = v23;
          else
            v27 = v24;
          if (v26 >= v18)
            v28 = v18;
          else
            v28 = v26;
          result = (const void **)memcmp(v19, v27, v28);
          v29 = (int)result < 0;
          if (!(_DWORD)result)
            v29 = v18 < v26;
          v20 = v21;
        }
        while (v29);
        *(_OWORD *)v21 = v30;
        v21[2] = v31;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3)
{
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  BOOL v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  const void *v21;
  __int128 v22;
  const void *v23;
  const void *v24;
  __int128 v25;
  const void *v26;
  int v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  const void *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  const void *v36;
  __int128 v37;
  const void *v38;
  unint64_t v39;
  __int128 v40;
  const void *v41;
  size_t v42;
  int v43;
  size_t v44;
  const void *v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  const void *v51;
  __int128 v52;
  const void *v53;

  v6 = *((char *)a1 + 23);
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v7 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v6 >= 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = (size_t)a1[1];
  if (v6 >= 0)
    v11 = a1;
  else
    v11 = *a1;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v13)
    v14 = v13 < 0;
  else
    v14 = v8 < v10;
  v15 = *((char *)a3 + 23);
  if (v15 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  if (v15 >= 0)
    v17 = a3;
  else
    v17 = *a3;
  if (v8 >= v16)
    v18 = v16;
  else
    v18 = v8;
  v19 = memcmp(v17, v9, v18);
  v20 = v16 < v8;
  if (v19)
    v20 = v19 < 0;
  if (v14)
  {
    if (v20)
    {
      v21 = a1[2];
      v22 = *(_OWORD *)a1;
      v23 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v23;
      *(_OWORD *)a3 = v22;
      a3[2] = v21;
      return 1;
    }
    v39 = (unint64_t)a1[2];
    v40 = *(_OWORD *)a1;
    v41 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v41;
    *(_OWORD *)a2 = v40;
    a2[2] = (const void *)v39;
    v42 = HIBYTE(v39);
    v43 = *((char *)a3 + 23);
    if (v43 >= 0)
      v44 = *((unsigned __int8 *)a3 + 23);
    else
      v44 = (size_t)a3[1];
    if (v43 >= 0)
      v45 = a3;
    else
      v45 = *a3;
    if ((v42 & 0x80u) == 0)
      v46 = v42;
    else
      v46 = (size_t)a2[1];
    if ((v42 & 0x80u) == 0)
      v47 = a2;
    else
      v47 = *a2;
    if (v46 >= v44)
      v48 = v44;
    else
      v48 = v46;
    v49 = memcmp(v45, v47, v48);
    v50 = v44 < v46;
    if (v49)
      v50 = v49 < 0;
    if (!v50)
      return 1;
    v51 = a2[2];
    v52 = *(_OWORD *)a2;
    v53 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v53;
    *(_OWORD *)a3 = v52;
    a3[2] = v51;
    return 2;
  }
  if (v20)
  {
    v24 = a2[2];
    v25 = *(_OWORD *)a2;
    v26 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v26;
    *(_OWORD *)a3 = v25;
    a3[2] = v24;
    v27 = *((char *)a1 + 23);
    v28 = *((char *)a2 + 23);
    if (v28 >= 0)
      v29 = *((unsigned __int8 *)a2 + 23);
    else
      v29 = (size_t)a2[1];
    if (v28 >= 0)
      v30 = a2;
    else
      v30 = *a2;
    if (v27 >= 0)
      v31 = *((unsigned __int8 *)a1 + 23);
    else
      v31 = (size_t)a1[1];
    if (v27 >= 0)
      v32 = a1;
    else
      v32 = *a1;
    if (v31 >= v29)
      v33 = v29;
    else
      v33 = v31;
    v34 = memcmp(v30, v32, v33);
    v35 = v29 < v31;
    if (v34)
      v35 = v34 < 0;
    if (!v35)
      return 1;
    v36 = a1[2];
    v37 = *(_OWORD *)a1;
    v38 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v38;
    *(_OWORD *)a2 = v37;
    a2[2] = v36;
    return 2;
  }
  return 0;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, const void **a2)
{
  const void **v2;
  int v4;
  size_t v5;
  __int128 *v6;
  size_t v7;
  const void **v8;
  size_t v9;
  int v10;
  BOOL v11;
  const void **v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  BOOL v18;
  const void **v19;
  const void **v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  BOOL v26;
  const void **v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  const void **v36;
  __int128 v37;
  size_t v38;
  __int128 *v39;
  int v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  _BOOL4 v45;
  const void **v46;
  int v47;
  size_t v48;
  const void *v49;
  size_t v50;
  int v51;
  BOOL v52;
  void **v53;
  __int128 v54;
  __int128 v55;
  __int128 v57;
  const void *v58;
  __int128 v59;
  const void *v60;

  v2 = a2;
  v58 = a1[2];
  v57 = *(_OWORD *)a1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v4 = *((char *)a2 - 1);
  if (SHIBYTE(v58) >= 0)
    v5 = HIBYTE(v58);
  else
    v5 = *((_QWORD *)&v57 + 1);
  if (SHIBYTE(v58) >= 0)
    v6 = &v57;
  else
    v6 = (__int128 *)v57;
  if (v4 >= 0)
    v7 = *((unsigned __int8 *)a2 - 1);
  else
    v7 = (size_t)*(a2 - 2);
  if (v4 >= 0)
    v8 = a2 - 3;
  else
    v8 = (const void **)*(a2 - 3);
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  v11 = v5 < v7;
  if (v10)
    v11 = v10 < 0;
  if (v11)
  {
    v12 = a1 + 3;
    do
    {
      v13 = *((char *)v12 + 23);
      if (v13 >= 0)
        v14 = *((unsigned __int8 *)v12 + 23);
      else
        v14 = (size_t)v12[1];
      if (v13 >= 0)
        v15 = v12;
      else
        v15 = *v12;
      if (v14 >= v5)
        v16 = v5;
      else
        v16 = v14;
      v17 = memcmp(v6, v15, v16);
      v18 = v5 < v14;
      if (v17)
        v18 = v17 < 0;
      v12 += 3;
    }
    while (!v18);
    v19 = v12 - 3;
  }
  else
  {
    v20 = a1 + 3;
    do
    {
      v19 = v20;
      if (v20 >= v2)
        break;
      v21 = *((char *)v20 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v20 + 23);
      else
        v22 = (size_t)v20[1];
      if (v21 >= 0)
        v23 = v20;
      else
        v23 = *v20;
      if (v22 >= v5)
        v24 = v5;
      else
        v24 = v22;
      v25 = memcmp(v6, v23, v24);
      v26 = v25 < 0;
      if (!v25)
        v26 = v5 < v22;
      v20 = v19 + 3;
    }
    while (!v26);
  }
  if (v19 < v2)
  {
    v27 = v2 - 3;
    do
    {
      v28 = *((char *)v27 + 23);
      if (v28 >= 0)
        v29 = *((unsigned __int8 *)v27 + 23);
      else
        v29 = (size_t)v27[1];
      if (v28 >= 0)
        v30 = v27;
      else
        v30 = *v27;
      if (v29 >= v5)
        v31 = v5;
      else
        v31 = v29;
      v32 = memcmp(v6, v30, v31);
      v33 = v5 < v29;
      if (v32)
        v33 = v32 < 0;
      v27 -= 3;
    }
    while (v33);
    v2 = v27 + 3;
  }
  for (; v19 < v2; v2 = v46 + 3)
  {
    v34 = *(_OWORD *)v19;
    v60 = v19[2];
    v59 = v34;
    v35 = *(_OWORD *)v2;
    v19[2] = v2[2];
    *(_OWORD *)v19 = v35;
    v36 = v19 + 3;
    v37 = v59;
    v2[2] = v60;
    *(_OWORD *)v2 = v37;
    if (SHIBYTE(v58) >= 0)
      v38 = HIBYTE(v58);
    else
      v38 = *((_QWORD *)&v57 + 1);
    if (SHIBYTE(v58) >= 0)
      v39 = &v57;
    else
      v39 = (__int128 *)v57;
    do
    {
      v40 = *((char *)v36 + 23);
      if (v40 >= 0)
        v41 = *((unsigned __int8 *)v36 + 23);
      else
        v41 = (size_t)v36[1];
      if (v40 >= 0)
        v42 = v36;
      else
        v42 = *v36;
      if (v41 >= v38)
        v43 = v38;
      else
        v43 = v41;
      v44 = memcmp(v39, v42, v43);
      v45 = v38 < v41;
      if (v44)
        v45 = v44 < 0;
      v36 += 3;
    }
    while (!v45);
    v19 = v36 - 3;
    v46 = v2 - 3;
    do
    {
      v47 = *((char *)v46 + 23);
      if (v47 >= 0)
        v48 = *((unsigned __int8 *)v46 + 23);
      else
        v48 = (size_t)v46[1];
      if (v47 >= 0)
        v49 = v46;
      else
        v49 = *v46;
      if (v48 >= v38)
        v50 = v38;
      else
        v50 = v48;
      v51 = memcmp(v39, v49, v50);
      v52 = v38 < v48;
      if (v51)
        v52 = v51 < 0;
      v46 -= 3;
    }
    while (v52);
  }
  v53 = (void **)(v19 - 3);
  if (v19 - 3 == a1)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*v53);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v54 = *(_OWORD *)v53;
    a1[2] = *(v19 - 1);
    *(_OWORD *)a1 = v54;
    *((_BYTE *)v19 - 1) = 0;
    *((_BYTE *)v19 - 24) = 0;
  }
  v55 = v57;
  *(v19 - 1) = v58;
  *(_OWORD *)v53 = v55;
  return v19;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  size_t v7;
  __int128 *v8;
  int v9;
  size_t v10;
  char *v11;
  size_t v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  const void **v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  const void **v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  const void **v32;
  __int128 v33;
  __int128 v34;
  const void **v35;
  __int128 v36;
  size_t v37;
  __int128 *v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  int v43;
  BOOL v44;
  const void **v45;
  int v46;
  size_t v47;
  const void *v48;
  size_t v49;
  int v50;
  _BOOL4 v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  const void *v59;

  v4 = 0;
  v57 = *((_QWORD *)a1 + 2);
  v5 = v57;
  v56 = *a1;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v6 = HIBYTE(v5);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  else
    v7 = *((_QWORD *)&v56 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = &v56;
  else
    v8 = (__int128 *)v56;
  do
  {
    v9 = *((char *)a1 + v4 + 47);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)a1 + v4 + 47);
    else
      v10 = *(_QWORD *)((char *)a1 + v4 + 32);
    if (v9 >= 0)
      v11 = (char *)a1 + v4 + 24;
    else
      v11 = *(char **)((char *)a1 + v4 + 24);
    if (v7 >= v10)
      v12 = v10;
    else
      v12 = v7;
    v13 = memcmp(v11, v8, v12);
    v14 = v10 < v7;
    if (v13)
      v14 = v13 < 0;
    v4 += 24;
  }
  while (v14);
  v15 = (unint64_t)a1 + v4;
  if (v4 == 24)
  {
    v24 = (const void **)(a2 - 24);
    while (1)
    {
      v23 = (unint64_t)(v24 + 3);
      if (v15 >= (unint64_t)(v24 + 3))
        break;
      v25 = *((char *)v24 + 23);
      if (v25 >= 0)
        v26 = *((unsigned __int8 *)v24 + 23);
      else
        v26 = (size_t)v24[1];
      if (v25 >= 0)
        v27 = v24;
      else
        v27 = *v24;
      if (v7 >= v26)
        v28 = v26;
      else
        v28 = v7;
      v29 = memcmp(v27, v8, v28);
      v30 = v26 < v7;
      if (v29)
        v30 = v29 < 0;
      v24 -= 3;
      if (v30)
      {
        v23 = (unint64_t)(v24 + 3);
        break;
      }
    }
  }
  else
  {
    v16 = (const void **)(a2 - 24);
    do
    {
      v17 = *((char *)v16 + 23);
      if (v17 >= 0)
        v18 = *((unsigned __int8 *)v16 + 23);
      else
        v18 = (size_t)v16[1];
      if (v17 >= 0)
        v19 = v16;
      else
        v19 = *v16;
      if (v7 >= v18)
        v20 = v18;
      else
        v20 = v7;
      v21 = memcmp(v19, v8, v20);
      v22 = v18 < v7;
      if (v21)
        v22 = v21 < 0;
      v16 -= 3;
    }
    while (!v22);
    v23 = (unint64_t)(v16 + 3);
  }
  if (v15 >= v23)
  {
    v31 = v15;
    v52 = v15 - 24;
    if ((__int128 *)(v15 - 24) != a1)
    {
LABEL_84:
      if (*((char *)a1 + 23) < 0)
        operator delete(*(void **)a1);
      v53 = *(_OWORD *)v52;
      *((_QWORD *)a1 + 2) = *(_QWORD *)(v52 + 16);
      *a1 = v53;
      *(_BYTE *)(v31 - 1) = 0;
      *(_BYTE *)(v31 - 24) = 0;
      goto LABEL_90;
    }
  }
  else
  {
    v31 = v15;
    v32 = (const void **)v23;
    do
    {
      v33 = *(_OWORD *)v31;
      v59 = *(const void **)(v31 + 16);
      v58 = v33;
      v34 = *(_OWORD *)v32;
      *(_QWORD *)(v31 + 16) = v32[2];
      *(_OWORD *)v31 = v34;
      v35 = (const void **)(v31 + 24);
      v36 = v58;
      v32[2] = v59;
      *(_OWORD *)v32 = v36;
      if (v57 >= 0)
        v37 = HIBYTE(v57);
      else
        v37 = *((_QWORD *)&v56 + 1);
      if (v57 >= 0)
        v38 = &v56;
      else
        v38 = (__int128 *)v56;
      do
      {
        v39 = *((char *)v35 + 23);
        if (v39 >= 0)
          v40 = *((unsigned __int8 *)v35 + 23);
        else
          v40 = (size_t)v35[1];
        if (v39 >= 0)
          v41 = v35;
        else
          v41 = *v35;
        if (v37 >= v40)
          v42 = v40;
        else
          v42 = v37;
        v43 = memcmp(v41, v38, v42);
        v44 = v40 < v37;
        if (v43)
          v44 = v43 < 0;
        v35 += 3;
      }
      while (v44);
      v31 = (unint64_t)(v35 - 3);
      v45 = v32 - 3;
      do
      {
        v46 = *((char *)v45 + 23);
        if (v46 >= 0)
          v47 = *((unsigned __int8 *)v45 + 23);
        else
          v47 = (size_t)v45[1];
        if (v46 >= 0)
          v48 = v45;
        else
          v48 = *v45;
        if (v37 >= v47)
          v49 = v47;
        else
          v49 = v37;
        v50 = memcmp(v48, v38, v49);
        v51 = v47 < v37;
        if (v50)
          v51 = v50 < 0;
        v45 -= 3;
      }
      while (!v51);
      v32 = v45 + 3;
    }
    while (v31 < (unint64_t)v32);
    v52 = v31 - 24;
    if ((__int128 *)(v31 - 24) != a1)
      goto LABEL_84;
  }
  if (*(char *)(v31 - 1) < 0)
    operator delete(*(void **)v52);
LABEL_90:
  v54 = v56;
  *(_QWORD *)(v52 + 16) = v57;
  *(_OWORD *)v52 = v54;
  return v52;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2)
{
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  int v8;
  size_t v9;
  const void **v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  _BOOL4 v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void **v19;
  const void **v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  const void *v37;
  int v38;
  size_t v39;
  __int128 *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  BOOL v45;
  __int128 v46;
  const void *v47;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *(char *)(a1 + 23);
      v8 = *((char *)a2 - 1);
      if (v8 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      if (v8 >= 0)
        v10 = a2 - 3;
      else
        v10 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      if (v7 >= 0)
        v12 = (const void *)a1;
      else
        v12 = *(const void **)a1;
      if (v11 >= v9)
        v13 = v9;
      else
        v13 = v11;
      v14 = memcmp(v10, v12, v13);
      v15 = v9 < v11;
      if (v14)
        v15 = v14 < 0;
      if (v15)
      {
        v16 = *(const void **)(a1 + 16);
        v17 = *(_OWORD *)a1;
        v18 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v18;
        *(_OWORD *)v6 = v17;
        v6[2] = v16;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a1 + 24, a1 + 48, (__int128 *)(a1 + 72), a2 - 3);
      return 1;
    default:
      v19 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      v20 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    v24 = *((char *)v19 + 23);
    v25 = *((char *)v20 + 23);
    if (v25 >= 0)
      v26 = *((unsigned __int8 *)v20 + 23);
    else
      v26 = (size_t)v20[1];
    if (v25 >= 0)
      v27 = v20;
    else
      v27 = *v20;
    if (v24 >= 0)
      v28 = *((unsigned __int8 *)v19 + 23);
    else
      v28 = (size_t)v19[1];
    if (v24 >= 0)
      v29 = v19;
    else
      v29 = *v19;
    if (v28 >= v26)
      v30 = v26;
    else
      v30 = v28;
    v31 = memcmp(v27, v29, v30);
    v32 = v26 < v28;
    if (v31)
      v32 = v31 < 0;
    if (v32)
    {
      v46 = *(_OWORD *)v20;
      v47 = v20[2];
      v20[1] = 0;
      v20[2] = 0;
      *v20 = 0;
      v33 = v21;
      do
      {
        v34 = a1 + v33;
        *(_OWORD *)(v34 + 72) = *(_OWORD *)(a1 + v33 + 48);
        *(_QWORD *)(v34 + 88) = *(_QWORD *)(a1 + v33 + 64);
        *(_BYTE *)(v34 + 71) = 0;
        *(_BYTE *)(v34 + 48) = 0;
        if (v33 == -48)
        {
          v23 = a1;
          goto LABEL_24;
        }
        v37 = *(const void **)(v34 + 24);
        v35 = v34 + 24;
        v36 = v37;
        v38 = *(char *)(v35 + 23);
        if (SHIBYTE(v47) >= 0)
          v39 = HIBYTE(v47);
        else
          v39 = *((_QWORD *)&v46 + 1);
        if (SHIBYTE(v47) >= 0)
          v40 = &v46;
        else
          v40 = (__int128 *)v46;
        if (v38 >= 0)
          v41 = *(unsigned __int8 *)(v35 + 23);
        else
          v41 = *(_QWORD *)(v35 + 8);
        if (v38 >= 0)
          v42 = (const void *)v35;
        else
          v42 = v36;
        if (v41 >= v39)
          v43 = v39;
        else
          v43 = v41;
        v44 = memcmp(v40, v42, v43);
        v45 = v39 < v41;
        if (v44)
          v45 = v44 < 0;
        v33 -= 24;
      }
      while (v45);
      v23 = a1 + v33 + 72;
LABEL_24:
      *(_OWORD *)v23 = v46;
      *(_QWORD *)(v23 + 16) = v47;
      if (++v22 == 8)
        return v20 + 3 == a2;
    }
    v19 = v20;
    v21 += 24;
    v20 += 3;
    if (v20 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  __n128 result;
  _BOOL4 v17;
  const void *v18;
  __int128 v19;
  const void *v20;
  int v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  const void *v26;
  size_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  size_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a3 + 23);
  v9 = *((char *)a4 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  if (v9 >= 0)
    v11 = a4;
  else
    v11 = *a4;
  if (v8 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = *((_QWORD *)a3 + 1);
  if (v8 >= 0)
    v13 = a3;
  else
    v13 = *(const void **)a3;
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  v17 = v10 < v12;
  if (v15)
    v17 = v15 < 0;
  if (v17)
  {
    v18 = (const void *)*((_QWORD *)a3 + 2);
    v19 = *a3;
    v20 = a4[2];
    *a3 = *(_OWORD *)a4;
    *((_QWORD *)a3 + 2) = v20;
    *(_OWORD *)a4 = v19;
    a4[2] = v18;
    v21 = *((char *)a2 + 23);
    v22 = *((char *)a3 + 23);
    if (v22 >= 0)
      v23 = *((unsigned __int8 *)a3 + 23);
    else
      v23 = *((_QWORD *)a3 + 1);
    if (v22 >= 0)
      v24 = a3;
    else
      v24 = *(const void **)a3;
    if (v21 >= 0)
      v25 = *((unsigned __int8 *)a2 + 23);
    else
      v25 = *((_QWORD *)a2 + 1);
    if (v21 >= 0)
      v26 = a2;
    else
      v26 = *(const void **)a2;
    if (v25 >= v23)
      v27 = v23;
    else
      v27 = v25;
    v28 = memcmp(v24, v26, v27);
    v29 = v23 < v25;
    if (v28)
      v29 = v28 < 0;
    if (v29)
    {
      v30 = *((_QWORD *)a2 + 2);
      v31 = *a2;
      v32 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v32;
      *a3 = v31;
      *((_QWORD *)a3 + 2) = v30;
      v33 = *(char *)(a1 + 23);
      v34 = *((char *)a2 + 23);
      if (v34 >= 0)
        v35 = *((unsigned __int8 *)a2 + 23);
      else
        v35 = *((_QWORD *)a2 + 1);
      if (v34 >= 0)
        v36 = a2;
      else
        v36 = *(const void **)a2;
      if (v33 >= 0)
        v37 = *(unsigned __int8 *)(a1 + 23);
      else
        v37 = *(_QWORD *)(a1 + 8);
      if (v33 >= 0)
        v38 = (const void *)a1;
      else
        v38 = *(const void **)a1;
      if (v37 >= v35)
        v39 = v35;
      else
        v39 = v37;
      v40 = memcmp(v36, v38, v39);
      v41 = v35 < v37;
      if (v40)
        v41 = v40 < 0;
      if (v41)
      {
        v42 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v43 = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 16) = v43;
        *a2 = (__int128)result;
        *((_QWORD *)a2 + 2) = v42;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  __int128 *v15;
  size_t v16;
  int v17;
  __n128 result;
  _BOOL4 v19;
  const void *v20;
  __int128 v21;
  const void *v22;
  int v23;
  int v24;
  size_t v25;
  __int128 *v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  int v36;
  size_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  int v48;
  size_t v49;
  const void *v50;
  size_t v51;
  const void *v52;
  size_t v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a4 + 23);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *((unsigned __int8 *)a4 + 23);
  else
    v14 = *((_QWORD *)a4 + 1);
  if (v10 >= 0)
    v15 = a4;
  else
    v15 = *(__int128 **)a4;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v19 = v12 < v14;
  if (v17)
    v19 = v17 < 0;
  if (v19)
  {
    v20 = (const void *)*((_QWORD *)a4 + 2);
    v21 = *a4;
    v22 = a5[2];
    *a4 = *(_OWORD *)a5;
    *((_QWORD *)a4 + 2) = v22;
    *(_OWORD *)a5 = v21;
    a5[2] = v20;
    v23 = *(char *)(a3 + 23);
    v24 = *((char *)a4 + 23);
    if (v24 >= 0)
      v25 = *((unsigned __int8 *)a4 + 23);
    else
      v25 = *((_QWORD *)a4 + 1);
    if (v24 >= 0)
      v26 = a4;
    else
      v26 = *(__int128 **)a4;
    if (v23 >= 0)
      v27 = *(unsigned __int8 *)(a3 + 23);
    else
      v27 = *(_QWORD *)(a3 + 8);
    if (v23 >= 0)
      v28 = (const void *)a3;
    else
      v28 = *(const void **)a3;
    if (v27 >= v25)
      v29 = v25;
    else
      v29 = v27;
    v30 = memcmp(v26, v28, v29);
    v31 = v25 < v27;
    if (v30)
      v31 = v30 < 0;
    if (v31)
    {
      v32 = *(_QWORD *)(a3 + 16);
      v33 = *(_OWORD *)a3;
      v34 = *((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      *(_QWORD *)(a3 + 16) = v34;
      *a4 = v33;
      *((_QWORD *)a4 + 2) = v32;
      v35 = *(char *)(a2 + 23);
      v36 = *(char *)(a3 + 23);
      if (v36 >= 0)
        v37 = *(unsigned __int8 *)(a3 + 23);
      else
        v37 = *(_QWORD *)(a3 + 8);
      if (v36 >= 0)
        v38 = (const void *)a3;
      else
        v38 = *(const void **)a3;
      if (v35 >= 0)
        v39 = *(unsigned __int8 *)(a2 + 23);
      else
        v39 = *(_QWORD *)(a2 + 8);
      if (v35 >= 0)
        v40 = (const void *)a2;
      else
        v40 = *(const void **)a2;
      if (v39 >= v37)
        v41 = v37;
      else
        v41 = v39;
      v42 = memcmp(v38, v40, v41);
      v43 = v37 < v39;
      if (v42)
        v43 = v42 < 0;
      if (v43)
      {
        v44 = *(_QWORD *)(a2 + 16);
        v45 = *(_OWORD *)a2;
        v46 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v46;
        *(_OWORD *)a3 = v45;
        *(_QWORD *)(a3 + 16) = v44;
        v47 = *(char *)(a1 + 23);
        v48 = *(char *)(a2 + 23);
        if (v48 >= 0)
          v49 = *(unsigned __int8 *)(a2 + 23);
        else
          v49 = *(_QWORD *)(a2 + 8);
        if (v48 >= 0)
          v50 = (const void *)a2;
        else
          v50 = *(const void **)a2;
        if (v47 >= 0)
          v51 = *(unsigned __int8 *)(a1 + 23);
        else
          v51 = *(_QWORD *)(a1 + 8);
        if (v47 >= 0)
          v52 = (const void *)a1;
        else
          v52 = *(const void **)a1;
        if (v51 >= v49)
          v53 = v49;
        else
          v53 = v51;
        v54 = memcmp(v50, v52, v53);
        v55 = v49 < v51;
        if (v54)
          v55 = v54 < 0;
        if (v55)
        {
          v56 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v57 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v57;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v56;
        }
      }
    }
  }
  return result;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  signed __int8 v14;
  signed __int8 v15;
  size_t v16;
  const void *v17;
  unint64_t v18;
  size_t v19;
  __int8 *v20;
  size_t v21;
  int v22;
  BOOL v23;
  _BOOL4 v24;
  __n128 *v25;
  int v26;
  int v27;
  size_t v28;
  __n128 *v29;
  size_t v30;
  __n128 *v31;
  size_t v32;
  int v33;
  __n128 result;
  BOOL v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  __n128 *v42;
  size_t v43;
  __int8 *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  BOOL v48;
  __n128 *v49;
  int v50;
  unint64_t v51;
  __n128 *v52;
  unint64_t v53;
  __n128 *v54;
  size_t v55;
  int v56;
  _BOOL4 v57;
  __n128 *v58;
  __n128 v59;
  uint64_t v60;
  __n128 *v61;
  __n128 *v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v67 = v4;
    v68 = v5;
    v7 = a4;
    v8 = a1;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v10 = a3;
      v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v12 = (__n128 *)(a1 + 24 * v11);
      v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 >= a3)
      {
        v25 = (__n128 *)v12->n128_u64[0];
      }
      else
      {
        v14 = v12[2].n128_i8[15];
        v15 = v12[1].n128_i8[7];
        v61 = (__n128 *)v12[1].n128_u64[1];
        v62 = (__n128 *)v12->n128_u64[0];
        if (v15 >= 0)
          v16 = v12[1].n128_u8[7];
        else
          v16 = v12->n128_u64[1];
        if (v15 >= 0)
          v17 = (const void *)(a1 + 24 * v11);
        else
          v17 = (const void *)v12->n128_u64[0];
        v18 = v6 >> 1;
        if (v14 >= 0)
          v19 = v12[2].n128_u8[15];
        else
          v19 = v12[2].n128_u64[0];
        if (v14 >= 0)
          v20 = &v12[1].n128_i8[8];
        else
          v20 = (__int8 *)v12[1].n128_u64[1];
        if (v19 >= v16)
          v21 = v16;
        else
          v21 = v19;
        v22 = memcmp(v17, v20, v21);
        v23 = v16 >= v19;
        v9 = v18;
        v24 = !v23;
        if (v22)
          v24 = v22 < 0;
        v48 = !v24;
        v25 = v62;
        if (!v48)
        {
          v25 = v61;
          v12 = (__n128 *)((char *)v12 + 24);
          v11 = v13;
        }
      }
      v26 = v7[1].n128_i8[7];
      v27 = v12[1].n128_i8[7];
      if (v27 >= 0)
        v28 = v12[1].n128_u8[7];
      else
        v28 = v12->n128_u64[1];
      if (v27 >= 0)
        v29 = v12;
      else
        v29 = v25;
      if (v26 >= 0)
        v30 = v7[1].n128_u8[7];
      else
        v30 = v7->n128_u64[1];
      if (v26 >= 0)
        v31 = v7;
      else
        v31 = (__n128 *)v7->n128_u64[0];
      if (v30 >= v28)
        v32 = v28;
      else
        v32 = v30;
      v33 = memcmp(v29, v31, v32);
      v35 = v28 < v30;
      if (v33)
        v35 = v33 < 0;
      if (!v35)
      {
        v65 = *v7;
        v66 = v7[1].n128_i64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v63 = v9;
        v64 = v10;
        do
        {
          v58 = v12;
          v59 = *v12;
          v7[1].n128_u64[0] = v12[1].n128_u64[0];
          *v7 = v59;
          v12[1].n128_u8[7] = 0;
          v12->n128_u8[0] = 0;
          if (v9 < v11)
            break;
          v60 = (2 * v11) | 1;
          v12 = (__n128 *)(v8 + 24 * v60);
          v11 = 2 * v11 + 2;
          if (v11 < v10)
          {
            v36 = v12[2].n128_i8[15];
            v37 = v12[1].n128_u64[1];
            v38 = v12[1].n128_i8[7];
            v39 = v12->n128_u64[0];
            v40 = v8;
            if (v38 >= 0)
              v41 = v12[1].n128_u8[7];
            else
              v41 = v12->n128_u64[1];
            if (v38 >= 0)
              v42 = v12;
            else
              v42 = (__n128 *)v12->n128_u64[0];
            if (v36 >= 0)
              v43 = v12[2].n128_u8[15];
            else
              v43 = v12[2].n128_u64[0];
            if (v36 >= 0)
              v44 = &v12[1].n128_i8[8];
            else
              v44 = (__int8 *)v12[1].n128_u64[1];
            if (v43 >= v41)
              v45 = v41;
            else
              v45 = v43;
            v46 = memcmp(v42, v44, v45);
            v23 = v41 >= v43;
            v8 = v40;
            v47 = !v23;
            if (v46)
              v47 = v46 < 0;
            v48 = !v47;
            if (v47)
              v49 = (__n128 *)v37;
            else
              v49 = (__n128 *)v39;
            if (!v48)
              v12 = (__n128 *)((char *)v12 + 24);
            v9 = v63;
            v10 = v64;
            if (v48)
              v11 = v60;
          }
          else
          {
            v49 = (__n128 *)v12->n128_u64[0];
            v11 = v60;
          }
          v50 = v12[1].n128_i8[7];
          v51 = v50 >= 0 ? v12[1].n128_u8[7] : v12->n128_u64[1];
          v52 = v50 >= 0 ? v12 : v49;
          v53 = v66 >= 0 ? HIBYTE(v66) : v65.n128_u64[1];
          v54 = v66 >= 0 ? &v65 : (__n128 *)v65.n128_u64[0];
          v55 = v53 >= v51 ? v51 : v53;
          v56 = memcmp(v52, v54, v55);
          v57 = v51 < v53;
          if (v56)
            v57 = v56 < 0;
          v7 = v58;
        }
        while (!v57);
        result = v65;
        v58[1].n128_u64[0] = v66;
        *v58 = result;
      }
    }
  }
  return result;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  __int128 v21;
  uint64_t v24;
  char v25;
  _BYTE v27[15];

  if (a4 >= 2)
  {
    v5 = 0;
    v24 = *(_QWORD *)a1;
    *(_QWORD *)v27 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v27[7] = *(_QWORD *)(a1 + 15);
    v25 = *(_BYTE *)(a1 + 23);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v6 = (unint64_t)(a4 - 2) >> 1;
    v7 = a1;
    do
    {
      v9 = v7 + 24 * v5 + 24;
      v10 = 2 * v5;
      v5 = (2 * v5) | 1;
      v11 = v10 + 2;
      if (v10 + 2 < a4)
      {
        v12 = *(char *)(v9 + 47);
        v13 = *(char *)(v9 + 23);
        if (v13 >= 0)
          v14 = *(unsigned __int8 *)(v9 + 23);
        else
          v14 = *(_QWORD *)(v9 + 8);
        if (v13 >= 0)
          v15 = (const void *)v9;
        else
          v15 = *(const void **)v9;
        if (v12 >= 0)
          v16 = *(unsigned __int8 *)(v9 + 47);
        else
          v16 = *(_QWORD *)(v9 + 32);
        if (v12 >= 0)
          v17 = (const void *)(v9 + 24);
        else
          v17 = *(const void **)(v9 + 24);
        if (v16 >= v14)
          v18 = v14;
        else
          v18 = v16;
        v19 = memcmp(v15, v17, v18);
        v20 = v14 < v16;
        if (v19)
          v20 = v19 < 0;
        if (v20)
        {
          v9 += 24;
          v5 = v11;
        }
      }
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)v9;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v9 + 23) = 0;
      *(_BYTE *)v9 = 0;
      v7 = v9;
    }
    while (v5 <= v6);
    if (v9 == a2 - 24)
    {
      *(_QWORD *)v9 = v24;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)v27;
      *(_QWORD *)(v9 + 15) = *(_QWORD *)&v27[7];
      *(_BYTE *)(v9 + 23) = v25;
    }
    else
    {
      v21 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)v9 = v21;
      *(_QWORD *)(a2 - 24) = v24;
      *(_QWORD *)(a2 - 16) = *(_QWORD *)v27;
      *(_QWORD *)(a2 - 9) = *(_QWORD *)&v27[7];
      *(_BYTE *)(a2 - 1) = v25;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v9 + 24, a3, 0xAAAAAAAAAAAAAAABLL * ((v9 + 24 - a1) >> 3));
    }
  }
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  int v12;
  size_t v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  double result;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 *v24;
  __int128 *v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  int v31;
  BOOL v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v35 = v4;
    v36 = v5;
    v8 = v6 >> 1;
    v9 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v10 = (__int128 *)(a2 - 24);
    v11 = *(char *)(a2 - 1);
    v12 = *((char *)v9 + 23);
    if (v12 >= 0)
      v13 = *((unsigned __int8 *)v9 + 23);
    else
      v13 = *((_QWORD *)v9 + 1);
    if (v12 >= 0)
      v14 = (const void *)(a1 + 24 * (v6 >> 1));
    else
      v14 = *(const void **)v9;
    if (v11 >= 0)
      v15 = *(unsigned __int8 *)(a2 - 1);
    else
      v15 = *(_QWORD *)(a2 - 16);
    if (v11 >= 0)
      v16 = (const void *)(a2 - 24);
    else
      v16 = *(const void **)(a2 - 24);
    if (v15 >= v13)
      v17 = v13;
    else
      v17 = v15;
    v18 = memcmp(v14, v16, v17);
    v20 = v13 < v15;
    if (v18)
      v20 = v18 < 0;
    if (v20)
    {
      v34 = *((_QWORD *)v10 + 2);
      v21 = v34;
      v33 = *v10;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      v22 = HIBYTE(v21);
      if ((v22 & 0x80u) == 0)
        v23 = v22;
      else
        v23 = *((_QWORD *)&v33 + 1);
      if ((v22 & 0x80u) == 0)
        v24 = &v33;
      else
        v24 = (__int128 *)v33;
      do
      {
        v25 = v9;
        v26 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v26;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v27 = *((char *)v9 + 23);
        v28 = v27 >= 0 ? *((unsigned __int8 *)v9 + 23) : *((_QWORD *)v9 + 1);
        v29 = v27 >= 0 ? (const void *)(a1 + 24 * v8) : *(const void **)v9;
        v30 = v23 >= v28 ? v28 : v23;
        v31 = memcmp(v29, v24, v30);
        v32 = v28 < v23;
        if (v31)
          v32 = v31 < 0;
        v10 = v25;
      }
      while (v32);
      result = *(double *)&v33;
      *v25 = v33;
      *((_QWORD *)v25 + 2) = v34;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong},std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto14MTLSharedEvent}* {__strong}>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::piecewise_construct_t const&<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[3] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    v30 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190F3A7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F3A7E4(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v3 = 134217984;
  v4 = v2;
  _os_log_debug_impl(&dword_190DAF000, a2, OS_LOG_TYPE_DEBUG, "Profiling Callback invoked. Reported Duration = %f ms\n", (uint8_t *)&v3, 0xCu);
}

_QWORD *std::string::basic_string<std::string_view,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((_BYTE *)v5 + v3) = 0;
  return __dst;
}

_QWORD *std::any::operator=[abi:ne180100](_QWORD *a1, void (**a2)(uint64_t))
{
  _QWORD v4[9];

  v4[8] = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v4[1] = 0;
  if (*a2)
    (*a2)(1);
  if (v4 != a1 && *a1 != (unsigned __int128)0)
    ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))*a1)(2, a1, v4, 0, 0);
  if (v4[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v4[0])(0, v4, 0, 0, 0);
  return a1;
}

void sub_190F3AAE8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_190F3AB88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *E5RT::ConfigOptions::ConfigOptions(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D59C68;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D59C68;
  result[1] = v2;
  return result;
}

uint64_t E5RT::ConfigOptions::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v8;
  void (*v9)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  void *__p[2];
  void *v11[2];
  int v12;
  _OWORD *v13;

  *(_OWORD *)__p = 0u;
  *(_OWORD *)v11 = 0u;
  v12 = 1065353216;
  for (i = *(_QWORD *)(a2 + 8) + 24; ; std::any::operator=[abi:ne180100](v4 + 4, (void (**)(uint64_t))(i + 32)))
  {
    i = *(_QWORD *)i;
    if (!i)
      break;
    v13 = (_OWORD *)(i + 16);
    v4 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)__p, i + 16, (uint64_t)&std::piecewise_construct, &v13);
  }
  std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__move_assign(*(_QWORD *)(a1 + 8) + 8, (uint64_t *)__p);
  v5 = v11[0];
  if (v11[0])
  {
    do
    {
      v8 = (_QWORD *)*v5;
      v9 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[4];
      if (v9)
        v9(0, v5 + 4, 0, 0, 0);
      operator delete(v5);
      v5 = v8;
    }
    while (v8);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

void sub_190F3AD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ConfigOptions::GetAllConfigOptions(E5RT::ConfigOptions *this)
{
  return *((_QWORD *)this + 1) + 8;
}

uint64_t E5RT::ConfigOptions::GetConfigOption(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t E5RT::ConfigOptions::GetNumConfigOptions(E5RT::ConfigOptions *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32);
}

void std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v16 = (_QWORD *)*v4;
        v17 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v4[4];
        if (v17)
          v17(0, v4 + 4, 0, 0, 0);
        operator delete(v4);
        v4 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

E5RT::ExecutionStreamConfigOptions *E5RT::ExecutionStreamConfigOptions::ExecutionStreamConfigOptions(E5RT::ExecutionStreamConfigOptions *this)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v10;
  void (*v11)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  unsigned __int8 v12;
  void *__p[2];
  void *v14[2];
  int v15;
  char **v16;

  *(_QWORD *)E5RT::ConfigOptions::ConfigOptions(this) = &off_1E2D5B1D8;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 1065353216;
  v12 = 0;
  v16 = &E5RT::ExecutionStreamConfigOptions::skipIOFences;
  v2 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)__p, (uint64_t)&E5RT::ExecutionStreamConfigOptions::skipIOFences, (uint64_t)&std::piecewise_construct, (_OWORD **)&v16);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v2 + 32, &v12);
  v12 = 0;
  v16 = &E5RT::ExecutionStreamConfigOptions::enableLowLatencyAsyncEvents;
  v3 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)__p, (uint64_t)&E5RT::ExecutionStreamConfigOptions::enableLowLatencyAsyncEvents, (uint64_t)&std::piecewise_construct, (_OWORD **)&v16);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v3 + 32, &v12);
  v12 = 0;
  v16 = &E5RT::ExecutionStreamConfigOptions::enableConcurrentSyncExecution;
  v4 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)__p, (uint64_t)&E5RT::ExecutionStreamConfigOptions::enableConcurrentSyncExecution, (uint64_t)&std::piecewise_construct, (_OWORD **)&v16);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v4 + 32, &v12);
  v5 = (_QWORD *)operator new();
  E5RT::ConfigOptionsImpl::ConfigOptionsImpl((uint64_t)v5, (uint64_t *)__p);
  *v5 = &off_1E2DCA8A0;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v14[0];
  if (v14[0])
  {
    do
    {
      v10 = (_QWORD *)*v7;
      v11 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v7[4];
      if (v11)
        v11(0, v7 + 4, 0, 0, 0);
      operator delete(v7);
      v7 = v10;
    }
    while (v10);
  }
  v8 = __p[0];
  __p[0] = 0;
  if (v8)
    operator delete(v8);
  return this;
}

void sub_190F3B02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  E5RT::ConfigOptions *v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  v5 = v4;
  MEMORY[0x19401CD90](v5, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v3);
  _Unwind_Resume(a1);
}

void sub_190F3B064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  E5RT::ConfigOptions *v3;
  va_list va;

  va_start(va, a3);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v3);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamConfigOptions::~ExecutionStreamConfigOptions(E5RT::ExecutionStreamConfigOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::ExecutionStreamConfigOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

uint64_t E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "skipIOFences<BOOL>", 18);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecutionStreamConfigOptions::SetSkipIOFences(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "skipIOFences<BOOL>", 18, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190F3B218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "enableLowLatencyAsyncEvents<BOOL>", 33);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecutionStreamConfigOptions::SetEnableLowLatencyAsyncEvents(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "enableLowLatencyAsyncEvents<BOOL>", 33, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190F3B390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::ExecutionStreamConfigOptions::GetEnableConcurrentSyncExecution(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "enableConcurrentSyncExecution<BOOL>", 35);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecutionStreamConfigOptions::SetEnableConcurrentSyncExecution(const void **this, unsigned __int8 a2)
{
  void *v3;
  uint64_t result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  v5[1] = a2;
  result = (*(uint64_t (**)(void *, const char *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, "enableConcurrentSyncExecution<BOOL>", 35, v5);
  if (v5[0])
    return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5[0])(0, v5, 0, 0, 0);
  return result;
}

void sub_190F3B508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

E5RT::ExecutionStreamConfigOptions *E5RT::ExecutionStreamConfigOptions::Create@<X0>(E5RT::ExecutionStreamConfigOptions **a1@<X8>)
{
  E5RT::ExecutionStreamConfigOptions *v3;
  E5RT::ExecutionStreamConfigOptions *result;

  v3 = (E5RT::ExecutionStreamConfigOptions *)operator new();
  result = E5RT::ExecutionStreamConfigOptions::ExecutionStreamConfigOptions(v3);
  *a1 = v3;
  return result;
}

void sub_190F3B58C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_190F3B5B4(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);
  JUMPOUT(0x19401CD90);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateMutableMILWeightPaths(uint64_t a1, const void ***a2)
{
  const void **v3;
  const void **v4;
  char v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  const void **v14;
  std::string *v15;
  std::string *v16;
  const void **v17;
  void *v18;
  std::string *v19;
  int v20;
  const void *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  std::string::size_type size;
  uint64_t v25;
  std::string *v26;
  void *v27;
  void *exception;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p;
  std::string *v34;
  unint64_t v35;

  __p = 0;
  v34 = 0;
  v35 = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    if (*(_QWORD *)(a1 + 232))
    {
LABEL_60:
      std::string::basic_string[abi:ne180100]<0>(&v31, "Mutable weights feature is only supported on ANE.");
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v30, "ValidateMutableMILWeightPaths");
      E5RT::Status::Status(&v29, 1, &v31);
      E5RT::E5RTError::E5RTError(exception, v30, &v29);
    }
LABEL_50:
    v15 = (std::string *)__p;
    goto LABEL_51;
  }
  v5 = 0;
  do
  {
    if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v3 + 16))(*v3) == 1)
    {
      E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(*v3, &v31);
      v7 = v31;
      v6 = v32;
      if (!v32)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v10 = *(_QWORD *)(v7 + 56);
        v11 = *(_QWORD *)(v7 + 64);
        if (v10 != v11)
        {
LABEL_11:
          v12 = v34;
          do
          {
            if ((unint64_t)v12 < v35)
            {
              if (*(char *)(v10 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
              }
              else
              {
                v13 = *(_OWORD *)v10;
                v12->__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
                *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
              }
              ++v12;
            }
            else
            {
              v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p, v10);
            }
            v34 = v12;
            v10 += 24;
          }
          while (v10 != v11);
        }
      }
      else
      {
LABEL_10:
        v10 = *(_QWORD *)(v7 + 56);
        v11 = *(_QWORD *)(v7 + 64);
        if (v10 != v11)
          goto LABEL_11;
      }
      v5 = 1;
    }
    v3 += 2;
  }
  while (v3 != v4);
  if (!*(_QWORD *)(a1 + 232))
    goto LABEL_50;
  if ((v5 & 1) == 0)
    goto LABEL_60;
  v14 = (const void **)(a1 + 224);
  v15 = (std::string *)__p;
  v16 = v34;
  if (__p == v34)
  {
    if (*v14)
    {
      v17 = (const void **)((char *)*v14 + 16);
LABEL_26:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is provided using SetMutableMILWeightPaths API, but not found on the base model.", v17, &v31);
      v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v30, "ValidateMutableMILWeightPaths");
      E5RT::Status::Status(&v29, 1, &v31);
      E5RT::E5RTError::E5RTError(v18, v30, &v29);
    }
  }
  else
  {
    while (1)
    {
      v14 = (const void **)*v14;
      if (!v14)
        break;
      v17 = v14 + 2;
      v20 = *((char *)v14 + 39);
      if (v20 >= 0)
        v21 = (const void *)*((unsigned __int8 *)v14 + 39);
      else
        v21 = v14[3];
      if (v20 >= 0)
        v22 = (unsigned __int8 *)(v14 + 2);
      else
        v22 = (unsigned __int8 *)v14[2];
      v19 = v15;
      do
      {
        v23 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
        if ((v23 & 0x80u) == 0)
          size = HIBYTE(v19->__r_.__value_.__r.__words[2]);
        else
          size = v19->__r_.__value_.__l.__size_;
        if ((const void *)size == v21)
        {
          if ((v23 & 0x80) != 0)
          {
            if (!memcmp(v19->__r_.__value_.__l.__data_, v22, v19->__r_.__value_.__l.__size_))
              goto LABEL_28;
          }
          else
          {
            if (!*((_BYTE *)&v19->__r_.__value_.__s + 23))
              goto LABEL_28;
            v25 = 0;
            while (v19->__r_.__value_.__s.__data_[v25] == v22[v25])
            {
              if (v23 == ++v25)
                goto LABEL_28;
            }
          }
        }
        ++v19;
      }
      while (v19 != v16);
      v19 = v16;
LABEL_28:
      if (v19 == v16)
        goto LABEL_26;
    }
  }
LABEL_51:
  if (v15)
  {
    v26 = v34;
    v27 = v15;
    if (v34 != v15)
    {
      do
      {
        if (SHIBYTE(v26[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26[-1].__r_.__value_.__l.__data_);
        --v26;
      }
      while (v26 != v15);
      v27 = __p;
    }
    v34 = v15;
    operator delete(v27);
  }
}

void sub_190F3B918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v24)
  {
LABEL_6:
    if (a21 < 0)
    {
      operator delete(a16);
      std::vector<std::string>::~vector[abi:ne180100](&a22);
      _Unwind_Resume(a1);
    }
    std::vector<std::string>::~vector[abi:ne180100](&a22);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v16;
  E5RT *v17;
  int IsIOSurfaceSharedEventAvailable;
  E5RT::BufferObjectPriv *v19;
  E5RT::BufferObject *v20;
  E5RT::BufferObject *v21;
  uint64_t v22;
  _QWORD **v23;
  uint64_t v24;
  uint64_t *v25;
  const void **v26;
  const void *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char HasKnownShape;
  uint64_t v68;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptorImpl **v70;
  E5RT::BufferObjectPriv *Size;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  __int128 v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD **v101;
  uint64_t v102;
  const void **v103;
  void *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t OpName;
  uint64_t v163;
  uint64_t v164;
  const void **v165;
  int v166;
  size_t v167;
  unint64_t v168;
  char *p_dst;
  const std::string *v170;
  uint64_t v171;
  uint64_t v172;
  const void *v173;
  uint64_t v174;
  int v175;
  const std::string::value_type *v176;
  std::string::size_type v177;
  std::string *v178;
  std::string::size_type v179;
  char v180;
  E5RT::ExecutionStreamOperationInternal *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  std::string *v197;
  uint64_t *v198;
  __int128 *v199;
  _OWORD *v200;
  __int128 v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  _QWORD *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  std::string *v216;
  uint64_t *v217;
  __int128 *v218;
  _OWORD *v219;
  __int128 v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  std::string *v226;
  uint64_t *v227;
  __int128 *v228;
  _OWORD *v229;
  __int128 v230;
  E5RT::ExecutionStreamOperationInternal *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  _QWORD *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  _QWORD *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t *v259;
  std::string::size_type v260;
  std::string::size_type v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  std::string::size_type v266;
  std::string::size_type v267;
  void *v268;
  _OWORD *v269;
  void **v270;
  char *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  void **v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  void *v279;
  void **v280;
  void **v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  void *v285;
  void **v286;
  void **v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  void *v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  _QWORD *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t *v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  _QWORD *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  _QWORD *v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t *v327;
  uint64_t *v328;
  std::string::size_type v329;
  uint64_t v330;
  std::string::size_type v331;
  E5RT::ExecutionStreamOperationInternal **v332;
  E5RT::ExecutionStreamOperationInternal **v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  char *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  char *v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  _BYTE *v354;
  _DWORD *v355;
  unint64_t v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  _OWORD *v360;
  char *v361;
  uint64_t v362;
  __int128 v363;
  int v364;
  _QWORD *v365;
  _QWORD *v366;
  void *v367;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  void *exception;
  std::logic_error *v374;
  std::logic_error *v375;
  std::logic_error *v376;
  std::logic_error *v377;
  std::logic_error *v378;
  std::logic_error *v379;
  std::logic_error *v380;
  std::logic_error *v381;
  std::logic_error *v382;
  void *v383;
  unsigned int v384;
  std::string *v385;
  __int128 v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  char **v390;
  const void **v391;
  const void **v392;
  int v393;
  E5RT::BufferObject **v394;
  const void *v395;
  std::__shared_weak_count *v396;
  _QWORD *v398;
  _QWORD *InputPorts;
  _QWORD *OutputPorts;
  const void **v401;
  _QWORD *v402;
  __int128 v403;
  std::string __p;
  __int128 v405;
  std::string v406;
  uint64_t v407;
  std::__shared_weak_count *v408;
  std::string __dst;
  uint64_t v410;
  std::__shared_weak_count *v411;
  void *v412[2];
  void *v413[2];
  int v414;
  __int128 v415[2];
  int v416;
  __int128 v417;
  __int128 v418;
  int v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  __int128 v422;
  __int128 v423;
  unint64_t v424;
  uint64_t v425;

  v425 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  v16 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = 0;
  v390 = (char **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = a4;
  *(_QWORD *)(a1 + 160) = a5;
  v394 = (E5RT::BufferObject **)(a1 + 120);
  v387 = (_QWORD *)(a1 + 168);
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 168, a6);
  v389 = a1 + 208;
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 208, a7);
  v388 = a1 + 248;
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 248, a8);
  *(_QWORD *)(a1 + 288) = a9;
  *(_QWORD *)(a1 + 296) = a12;
  *(_BYTE *)(a1 + 304) = a10;
  *(_BYTE *)(a1 + 305) = a11;
  *(_QWORD *)(a1 + 312) = a13;
  v17 = (E5RT *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
  if (*((_QWORD *)v17 + 1) - *(_QWORD *)v17 != 16)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v417, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v415, "Execution of functions with multiple blocks not supported yet.");
    E5RT::Status::Status(v412, 1, v415);
    E5RT::E5RTError::E5RTError(exception, &v417, v412);
  }
  IsIOSurfaceSharedEventAvailable = E5RT::IsIOSurfaceSharedEventAvailable(v17);
  if (IsIOSurfaceSharedEventAvailable)
  {
    v19 = (E5RT::BufferObjectPriv *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
    if (v19)
    {
      E5RT::BufferObjectPriv::AllocBufferObjectFromIOSurfaceMemoryPool(v19, *(_QWORD *)(a1 + 160), &v417);
      v20 = (E5RT::BufferObject *)v417;
      *(_QWORD *)&v417 = 0;
      v21 = *v394;
      *v394 = v20;
      if (v21)
      {
        (*(void (**)(E5RT::BufferObject *))(*(_QWORD *)v21 + 8))(v21);
        v22 = v417;
        *(_QWORD *)&v417 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
    }
  }
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v398 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v393 = IsIOSurfaceSharedEventAvailable;
  v23 = (_QWORD **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
  v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v23 + 16))(**v23);
  E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateDynamicCallables((void **)a1, (const void ***)v24);
  E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateMutableMILWeightPaths(a1, (const void ***)v24);
  v26 = *(const void ***)v24;
  v391 = *(const void ***)(v24 + 8);
  v402 = v16;
  if (*(const void ***)v24 != v391)
  {
    while (1)
    {
      v27 = *v26;
      v392 = v26;
      v396 = (std::__shared_weak_count *)v26[1];
      if (v396)
      {
        p_shared_owners = (unint64_t *)&v396->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      v395 = v27;
      v30 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v27 + 32))();
      v31 = v30[1] - *v30;
      if (v31)
      {
        v32 = 0;
        v33 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
        do
        {
          if (v32 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[1] - *v30) >> 3))
          {
            v378 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v378, "iterator out of range");
            v378->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v378, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v30 + 8, *v30 + 24 * v32)+ 2;
          v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v16, (uint64_t)v34);
          v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)v34);
          if (!v35)
          {
            v37 = v36;
            if (!v36)
            {
              v370 = __cxa_allocate_exception(0x18uLL);
              BYTE7(v418) = 4;
              strcpy((char *)&v417, "Impl");
              *(_QWORD *)&v415[0] = operator new(0x38uLL);
              *(__int128 *)((char *)v415 + 8) = xmmword_191A726A0;
              strcpy(*(char **)&v415[0], "Operations in block must be topologically sorted.");
              E5RT::Status::Status(v412, 2, v415);
              E5RT::E5RTError::E5RTError(v370, &v417, v412);
            }
            if (!v36[5])
            {
              v371 = __cxa_allocate_exception(0x18uLL);
              BYTE7(v418) = 4;
              strcpy((char *)&v417, "Impl");
              *(_QWORD *)&v415[0] = operator new(0x28uLL);
              *(__int128 *)((char *)v415 + 8) = xmmword_191A72430;
              strcpy(*(char **)&v415[0], "Extern input port not initialized.");
              E5RT::Status::Status(v412, 2, v415);
              E5RT::E5RTError::E5RTError(v371, &v417, v412);
            }
            *(_QWORD *)&v417 = v34;
            v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (uint64_t)v34, (uint64_t)&std::piecewise_construct, (__int128 **)&v417);
            v40 = v37[5];
            v39 = v37[6];
            if (v39)
            {
              v41 = (unint64_t *)(v39 + 8);
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v43 = (std::__shared_weak_count *)v38[6];
            v38[5] = v40;
            v38[6] = v39;
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
          }
          ++v32;
        }
        while (v32 != v33);
      }
      v46 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)v395 + 40))(v395);
      v47 = v46[1] - *v46;
      if (v47)
        break;
LABEL_74:
      v25 = (uint64_t *)(*(uint64_t (**)(const void *))(*(_QWORD *)v395 + 48))(v395);
      v85 = v25;
      v86 = v25[1] - *v25;
      v16 = v402;
      if (v86)
      {
        v87 = 0;
        v88 = 0xAAAAAAAAAAAAAAABLL * (v86 >> 3);
        do
        {
          if (v87 >= 0xAAAAAAAAAAAAAAABLL * ((v85[1] - *v85) >> 3))
          {
            v379 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v379, "iterator out of range");
            v379->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v379, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v85 + 8, *v85 + 24 * v87)+ 2;
          v90 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v402, (uint64_t)v89);
          v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v398, (uint64_t)v89);
          v91 = v25;
          if (!v25)
          {
            v369 = __cxa_allocate_exception(0x18uLL);
            BYTE7(v418) = 4;
            strcpy((char *)&v417, "Impl");
            *(_QWORD *)&v415[0] = operator new(0x38uLL);
            *(__int128 *)((char *)v415 + 8) = xmmword_191A6FF70;
            strcpy(*(char **)&v415[0], "An inOut operand must be an external function inOut.");
            E5RT::Status::Status(v412, 2, v415);
            E5RT::E5RTError::E5RTError(v369, &v417, v412);
          }
          if (!v90)
          {
            *(_QWORD *)&v417 = v89;
            v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v402, (uint64_t)v89, (uint64_t)&std::piecewise_construct, (__int128 **)&v417);
            v93 = v91[5];
            v92 = v91[6];
            if (v92)
            {
              v94 = (unint64_t *)(v92 + 8);
              do
                v95 = __ldxr(v94);
              while (__stxr(v95 + 1, v94));
            }
            v96 = (std::__shared_weak_count *)v25[6];
            v25[5] = v93;
            v25[6] = v92;
            if (v96)
            {
              v97 = (unint64_t *)&v96->__shared_owners_;
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
          }
          ++v87;
        }
        while (v87 != v88);
      }
      if (v396)
      {
        v99 = (unint64_t *)&v396->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
          std::__shared_weak_count::__release_weak(v396);
        }
      }
      v26 = v392 + 2;
      if (v392 + 2 == v391)
        goto LABEL_93;
    }
    v48 = 0;
    v49 = 0xAAAAAAAAAAAAAAABLL * (v47 >> 3);
    while (1)
    {
      if (v48 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46[1] - *v46) >> 3))
      {
        v377 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v377, "iterator out of range");
        v377->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v377, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v46 + 8, *v46 + 24 * v48);
      v51 = (uint64_t)(v50 + 2);
      v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v402, (uint64_t)(v50 + 2));
      v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (uint64_t)(v50 + 2));
      if (v52)
        goto LABEL_30;
      v54 = v53;
      if (v53)
        break;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v50[5] + 16))(v415);
      (*(void (**)(uint64_t))(*(_QWORD *)v50[5] + 56))(v50[5]);
      v63 = (char *)operator new(0x28uLL);
      std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>((uint64_t)v63, v415);
      *(_QWORD *)&v417 = v63 + 24;
      *((_QWORD *)&v417 + 1) = v63;
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v415[0] + 1);
      if (*((_QWORD *)&v415[0] + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v415[0] + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      HasKnownShape = E5RT::IOPort::HasKnownShape((E5RT::IOPortImpl **)v417);
      v68 = v417;
      if ((HasKnownShape & 1) != 0)
      {
        PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v417);
        v70 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
        Size = (E5RT::BufferObjectPriv *)E5RT::TensorDescriptor::GetSize(v70);
        if (v393)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v50[5] + 48))(v50[5]);
          E5RT::BufferObject::CreateBufferAlias(*v394, v415);
        }
        else
        {
          E5RT::BufferObjectPriv::AllocBufferObjectFromIOSurfaceMemoryPool(Size, *(_QWORD *)(a1 + 160), v415);
        }
        v72 = *(std::__shared_weak_count_vtbl **)&v415[0];
        v68 = v417;
        v420 = *(_QWORD *)&v415[0];
        if (*(_QWORD *)&v415[0])
        {
          v73 = (std::__shared_weak_count *)operator new();
          v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3190;
          v73->__shared_owners_ = 0;
          v73->__shared_weak_owners_ = 0;
          v73[1].__vftable = v72;
        }
        else
        {
          v73 = 0;
        }
      }
      else
      {
        v73 = 0;
        v420 = 0;
      }
      v421 = v73;
      E5RT::IOPortPriv::BindMemoryObject(v68, (uint64_t)&v420, 1);
      v74 = v421;
      if (v421)
      {
        v75 = (unint64_t *)&v421->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      *(_QWORD *)&v415[0] = v51;
      v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v402, v51, (uint64_t)&std::piecewise_construct, (__int128 **)v415);
      v78 = v417;
      if (*((_QWORD *)&v417 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v417 + 1) + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v81 = (std::__shared_weak_count *)v77[6];
      *(_OWORD *)(v77 + 5) = v78;
      if (!v81)
        goto LABEL_65;
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v417 + 1);
        if (*((_QWORD *)&v417 + 1))
        {
LABEL_66:
          v84 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v84);
          while (__stlxr(v62 - 1, v84));
LABEL_68:
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
      }
      else
      {
LABEL_65:
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v417 + 1);
        if (*((_QWORD *)&v417 + 1))
          goto LABEL_66;
      }
LABEL_30:
      if (++v48 == v49)
        goto LABEL_74;
    }
    if (!v53[5])
    {
      v372 = __cxa_allocate_exception(0x18uLL);
      BYTE7(v418) = 4;
      strcpy((char *)&v417, "Impl");
      *(_QWORD *)&v415[0] = operator new(0x28uLL);
      *(__int128 *)((char *)v415 + 8) = xmmword_191A78320;
      strcpy(*(char **)&v415[0], "Extern output port not initialized.");
      E5RT::Status::Status(v412, 2, v415);
      E5RT::E5RTError::E5RTError(v372, &v417, v412);
    }
    *(_QWORD *)&v417 = v50 + 2;
    v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v402, v51, (uint64_t)&std::piecewise_construct, (__int128 **)&v417);
    v57 = v54[5];
    v56 = v54[6];
    if (v56)
    {
      v58 = (unint64_t *)(v56 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    v60 = (std::__shared_weak_count *)v55[6];
    v55[5] = v57;
    v55[6] = v56;
    if (!v60)
      goto LABEL_30;
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    goto LABEL_68;
  }
LABEL_93:
  E5RT::IsAVirtualMachine((E5RT *)v25);
  v101 = (_QWORD **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
  v102 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v101 + 16))(**v101);
  v103 = *(const void ***)v102;
  v401 = *(const void ***)(v102 + 8);
  if (*(const void ***)v102 != v401)
  {
    while (1)
    {
      v104 = (void *)MEMORY[0x19401D4A4]();
      v417 = 0u;
      v418 = 0u;
      v419 = 1065353216;
      memset(v415, 0, sizeof(v415));
      v416 = 1065353216;
      *(_OWORD *)v412 = 0u;
      *(_OWORD *)v413 = 0u;
      v414 = 1065353216;
      v105 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v103 + 32))(*v103);
      v106 = v105[1] - *v105;
      if (v106)
      {
        v107 = 0;
        v108 = 0xAAAAAAAAAAAAAAABLL * (v106 >> 3);
        while (1)
        {
          if (v107 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105[1] - *v105) >> 3))
          {
            v374 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v374, "iterator out of range");
            v374->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v374, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v105 + 8, *v105 + 24 * v107);
          v110 = v109;
          if (*((char *)v109 + 39) < 0)
            std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v109[2], v109[3]);
          else
            __dst = *(std::string *)(v109 + 2);
          v111 = (std::__shared_weak_count *)v110[6];
          v410 = v110[5];
          v411 = v111;
          if (v111)
          {
            v112 = (unint64_t *)&v111->__shared_owners_;
            do
              v113 = __ldxr(v112);
            while (__stxr(v113 + 1, v112));
          }
          v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v16, (uint64_t)&__dst);
          if (!v114)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v406, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            v406 = __dst;
          v115 = v114[6];
          v407 = v114[5];
          v408 = (std::__shared_weak_count *)v115;
          if (v115)
          {
            v116 = (unint64_t *)(v115 + 8);
            do
              v117 = __ldxr(v116);
            while (__stxr(v117 + 1, v116));
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>((uint64_t)&v417, (uint64_t)&v406, (uint64_t)&v406);
          v118 = v408;
          if (!v408)
            goto LABEL_116;
          v119 = (unint64_t *)&v408->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
            if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_117:
              v121 = v411;
              if (v411)
                goto LABEL_123;
              goto LABEL_96;
            }
          }
          else
          {
LABEL_116:
            if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_117;
          }
          operator delete(v406.__r_.__value_.__l.__data_);
          v121 = v411;
          if (v411)
          {
LABEL_123:
            v122 = (unint64_t *)&v121->__shared_owners_;
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
LABEL_96:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (++v107 == v108)
              break;
          }
          else if (++v107 == v108)
          {
            break;
          }
        }
      }
      v124 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v103 + 40))(*v103);
      v125 = v124[1] - *v124;
      if (v125)
      {
        v126 = 0;
        v127 = 0xAAAAAAAAAAAAAAABLL * (v125 >> 3);
        while (1)
        {
          if (v126 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124[1] - *v124) >> 3))
          {
            v375 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v375, "iterator out of range");
            v375->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v375, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          v128 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v124 + 8, *v124 + 24 * v126);
          v129 = v128;
          if (*((char *)v128 + 39) < 0)
            std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v128[2], v128[3]);
          else
            __dst = *(std::string *)(v128 + 2);
          v130 = (std::__shared_weak_count *)v129[6];
          v410 = v129[5];
          v411 = v130;
          if (v130)
          {
            v131 = (unint64_t *)&v130->__shared_owners_;
            do
              v132 = __ldxr(v131);
            while (__stxr(v132 + 1, v131));
          }
          v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v16, (uint64_t)&__dst);
          if (!v133)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v406, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            v406 = __dst;
          v134 = v133[6];
          v407 = v133[5];
          v408 = (std::__shared_weak_count *)v134;
          if (v134)
          {
            v135 = (unint64_t *)(v134 + 8);
            do
              v136 = __ldxr(v135);
            while (__stxr(v136 + 1, v135));
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>((uint64_t)v415, (uint64_t)&v406, (uint64_t)&v406);
          v137 = v408;
          if (!v408)
            goto LABEL_149;
          v138 = (unint64_t *)&v408->__shared_owners_;
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
            if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_150:
              v140 = v411;
              if (v411)
                goto LABEL_156;
              goto LABEL_129;
            }
          }
          else
          {
LABEL_149:
            if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_150;
          }
          operator delete(v406.__r_.__value_.__l.__data_);
          v140 = v411;
          if (v411)
          {
LABEL_156:
            v141 = (unint64_t *)&v140->__shared_owners_;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
LABEL_129:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (++v126 == v127)
              break;
          }
          else if (++v126 == v127)
          {
            break;
          }
        }
      }
      v143 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v103 + 48))(*v103);
      v144 = v143[1] - *v143;
      if (v144)
      {
        v145 = 0;
        v146 = 0xAAAAAAAAAAAAAAABLL * (v144 >> 3);
        while (1)
        {
          if (v145 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143[1] - *v143) >> 3))
          {
            v376 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v376, "iterator out of range");
            v376->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v376, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v143 + 8, *v143 + 24 * v145);
          v148 = v147;
          if (*((char *)v147 + 39) < 0)
            std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v147[2], v147[3]);
          else
            __dst = *(std::string *)(v147 + 2);
          v149 = (std::__shared_weak_count *)v148[6];
          v410 = v148[5];
          v411 = v149;
          if (v149)
          {
            v150 = (unint64_t *)&v149->__shared_owners_;
            do
              v151 = __ldxr(v150);
            while (__stxr(v151 + 1, v150));
          }
          v152 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v16, (uint64_t)&__dst);
          if (!v152)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v406, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            v406 = __dst;
          v153 = v152[6];
          v407 = v152[5];
          v408 = (std::__shared_weak_count *)v153;
          if (v153)
          {
            v154 = (unint64_t *)(v153 + 8);
            do
              v155 = __ldxr(v154);
            while (__stxr(v155 + 1, v154));
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>((uint64_t)v412, (uint64_t)&v406, (uint64_t)&v406);
          v156 = v408;
          if (!v408)
            goto LABEL_182;
          v157 = (unint64_t *)&v408->__shared_owners_;
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
            if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_183:
              v159 = v411;
              if (v411)
                goto LABEL_189;
              goto LABEL_162;
            }
          }
          else
          {
LABEL_182:
            if ((SHIBYTE(v406.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_183;
          }
          operator delete(v406.__r_.__value_.__l.__data_);
          v159 = v411;
          if (v411)
          {
LABEL_189:
            v160 = (unint64_t *)&v159->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
LABEL_162:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (++v145 == v146)
              break;
          }
          else if (++v145 == v146)
          {
            break;
          }
        }
      }
      memset(&v406, 0, sizeof(v406));
      OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(*(E5RT::ExecutionStreamOperationInternal **)a1);
      v163 = *(unsigned __int8 *)(OpName + 23);
      if ((v163 & 0x80u) != 0)
        v163 = *(_QWORD *)(OpName + 8);
      if (!v163)
      {
        v170 = (const std::string *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v103 + 24))(*v103);
        std::string::operator=(&v406, v170);
        goto LABEL_221;
      }
      v164 = E5RT::ExecutionStreamOperationInternal::GetOpName(*(E5RT::ExecutionStreamOperationInternal **)a1);
      v165 = (const void **)v164;
      v166 = *(char *)(v164 + 23);
      if (v166 >= 0)
        v167 = *(unsigned __int8 *)(v164 + 23);
      else
        v167 = *(_QWORD *)(v164 + 8);
      v168 = v167 + 1;
      if (v167 + 1 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v168 >= 0x17)
        break;
      memset(&__dst, 0, sizeof(__dst));
      p_dst = (char *)&__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v167 + 1;
      if (v167)
        goto LABEL_207;
LABEL_211:
      *(_WORD *)&p_dst[v167] = 95;
      v16 = v402;
      v174 = (*(uint64_t (**)(const void *))(*(_QWORD *)*v103 + 24))(*v103);
      v175 = *(char *)(v174 + 23);
      if (v175 >= 0)
        v176 = (const std::string::value_type *)v174;
      else
        v176 = *(const std::string::value_type **)v174;
      if (v175 >= 0)
        v177 = *(unsigned __int8 *)(v174 + 23);
      else
        v177 = *(_QWORD *)(v174 + 8);
      v178 = std::string::append(&__dst, v176, v177);
      v179 = v178->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v423 = v178->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v423 + 7) = *(std::string::size_type *)((char *)&v178->__r_.__value_.__r.__words[1] + 7);
      v180 = HIBYTE(v178->__r_.__value_.__r.__words[2]);
      v178->__r_.__value_.__l.__size_ = 0;
      v178->__r_.__value_.__r.__words[2] = 0;
      v178->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v406.__r_.__value_.__l.__data_);
      v406.__r_.__value_.__r.__words[0] = v179;
      v406.__r_.__value_.__l.__size_ = v423;
      *(std::string::size_type *)((char *)&v406.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v423 + 7);
      *((_BYTE *)&v406.__r_.__value_.__s + 23) = v180;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_221:
      v405 = 0uLL;
      if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 1)
      {
        E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(*v103, &v423);
        v181 = (E5RT::ExecutionStreamOperationInternal *)operator new();
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v423;
        v423 = 0uLL;
        E5RT::Ops::AneInferenceOperation::AneInferenceOperation(v181, (__int128 *)&v406, (__int128 *)&__dst, (uint64_t)&v417, (uint64_t)v415, (uint64_t)v412, 1, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 288), v389, v388);
        v182 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v183 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        v185 = (_QWORD *)operator new();
        *v185 = &off_1E2DC3468;
        v185[1] = 0;
        v185[2] = 0;
        v185[3] = v181;
        v186 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)&v405 = v181;
        *((_QWORD *)&v405 + 1) = v185;
        if (!v186)
          goto LABEL_231;
        v187 = (unint64_t *)&v186->__shared_owners_;
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if (!v188)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
          v189 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
          if (!*((_QWORD *)&v423 + 1))
            goto LABEL_354;
        }
        else
        {
LABEL_231:
          v189 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
          if (!*((_QWORD *)&v423 + 1))
            goto LABEL_354;
        }
        v190 = (unint64_t *)&v189->__shared_owners_;
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        goto LABEL_234;
      }
      if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 8)
      {
        memset(&__dst, 0, sizeof(__dst));
        v423 = 0uLL;
        v424 = 0;
        memset(&__p, 0, sizeof(__p));
        v192 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v103 + 32))(*v103);
        v193 = v192[1] - *v192;
        if (v193)
        {
          v194 = 0;
          v195 = 0;
          v196 = v193 / 24;
          do
          {
            if (v195 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v192[1] - *v192) >> 3))
            {
              v380 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v380, "iterator out of range");
              v380->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
              __cxa_throw(v380, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
            }
            v198 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v192 + 8, *v192 + v194);
            v199 = (__int128 *)(v198 + 2);
            v200 = (_OWORD *)__dst.__r_.__value_.__l.__size_;
            if (__dst.__r_.__value_.__l.__size_ >= __dst.__r_.__value_.__r.__words[2])
            {
              v197 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&__dst.__r_.__value_.__l.__data_, (uint64_t)v199);
            }
            else
            {
              if (*((char *)v198 + 39) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__dst.__r_.__value_.__l.__size_, (const std::string::value_type *)v198[2], v198[3]);
              }
              else
              {
                v201 = *v199;
                *(_QWORD *)(__dst.__r_.__value_.__l.__size_ + 16) = v198[4];
                *v200 = v201;
              }
              v197 = (std::string *)((char *)v200 + 24);
            }
            __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v197;
            ++v195;
            v194 += 24;
          }
          while (v196 != v195);
        }
        v211 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v103 + 40))(*v103);
        v212 = v211[1] - *v211;
        if (v212)
        {
          v213 = 0;
          v214 = 0;
          v215 = v212 / 24;
          do
          {
            if (v214 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211[1] - *v211) >> 3))
            {
              v381 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v381, "iterator out of range");
              v381->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
              __cxa_throw(v381, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
            }
            v217 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v211 + 8, *v211 + v213);
            v218 = (__int128 *)(v217 + 2);
            v219 = (_OWORD *)*((_QWORD *)&v423 + 1);
            if (*((_QWORD *)&v423 + 1) >= v424)
            {
              v216 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v423, (uint64_t)v218);
            }
            else
            {
              if (*((char *)v217 + 39) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)&v423 + 1), (const std::string::value_type *)v217[2], v217[3]);
              }
              else
              {
                v220 = *v218;
                *(_QWORD *)(*((_QWORD *)&v423 + 1) + 16) = v217[4];
                *v219 = v220;
              }
              v216 = (std::string *)((char *)v219 + 24);
            }
            *((_QWORD *)&v423 + 1) = v216;
            ++v214;
            v213 += 24;
          }
          while (v215 != v214);
        }
        v221 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v103 + 48))(*v103);
        v222 = v221[1] - *v221;
        if (v222)
        {
          v223 = 0;
          v224 = 0;
          v225 = v222 / 24;
          do
          {
            if (v224 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v221[1] - *v221) >> 3))
            {
              v382 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v382, "iterator out of range");
              v382->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
              __cxa_throw(v382, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
            }
            v227 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v221 + 8, *v221 + v223);
            v228 = (__int128 *)(v227 + 2);
            v229 = (_OWORD *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              v226 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&__p.__r_.__value_.__l.__data_, (uint64_t)v228);
            }
            else
            {
              if (*((char *)v227 + 39) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, (const std::string::value_type *)v227[2], v227[3]);
              }
              else
              {
                v230 = *v228;
                *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = v227[4];
                *v229 = v230;
              }
              v226 = (std::string *)((char *)v229 + 24);
            }
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v226;
            ++v224;
            v223 += 24;
          }
          while (v225 != v224);
        }
        E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>(*v103, &v403);
        v16 = v402;
        v231 = (E5RT::ExecutionStreamOperationInternal *)operator new();
        v422 = v403;
        v403 = 0uLL;
        E5RT::Ops::MpsGraphInferenceOperation::MpsGraphInferenceOperation(v231, (__int128 *)&v406, (uint64_t *)&v422, (uint64_t)&v417, (uint64_t)v415, (uint64_t)v412, (uint64_t)&__dst, (uint64_t)&v423, (uint64_t)&__p, *(id ***)(a1 + 152), (uint64_t)v387, *(_WORD *)(a1 + 304), HIBYTE(*(_WORD *)(a1 + 304)), *(_QWORD *)(a1 + 312));
        v232 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
        if (*((_QWORD *)&v422 + 1))
        {
          v233 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
          do
            v234 = __ldaxr(v233);
          while (__stlxr(v234 - 1, v233));
          if (!v234)
          {
            ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
            std::__shared_weak_count::__release_weak(v232);
          }
        }
        v235 = (_QWORD *)operator new();
        *v235 = &off_1E2DC35B8;
        v235[1] = 0;
        v235[2] = 0;
        v235[3] = v231;
        v236 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)&v405 = v231;
        *((_QWORD *)&v405 + 1) = v235;
        if (!v236)
          goto LABEL_291;
        v237 = (unint64_t *)&v236->__shared_owners_;
        do
          v238 = __ldaxr(v237);
        while (__stlxr(v238 - 1, v237));
        if (!v238)
        {
          ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
          std::__shared_weak_count::__release_weak(v236);
          v239 = (std::__shared_weak_count *)*((_QWORD *)&v403 + 1);
          if (*((_QWORD *)&v403 + 1))
          {
LABEL_292:
            v240 = (unint64_t *)&v239->__shared_owners_;
            do
              v241 = __ldaxr(v240);
            while (__stlxr(v241 - 1, v240));
            if (!v241)
            {
              ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
              std::__shared_weak_count::__release_weak(v239);
            }
          }
        }
        else
        {
LABEL_291:
          v239 = (std::__shared_weak_count *)*((_QWORD *)&v403 + 1);
          if (*((_QWORD *)&v403 + 1))
            goto LABEL_292;
        }
        v260 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
          v261 = __p.__r_.__value_.__l.__size_;
          v262 = (void *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v261 - 1) < 0)
                operator delete(*(void **)(v261 - 24));
              v261 -= 24;
            }
            while (v261 != v260);
            v262 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v260;
          operator delete(v262);
        }
        v263 = v423;
        if ((_QWORD)v423)
        {
          v264 = *((_QWORD *)&v423 + 1);
          v265 = (void *)v423;
          if (*((_QWORD *)&v423 + 1) != (_QWORD)v423)
          {
            do
            {
              if (*(char *)(v264 - 1) < 0)
                operator delete(*(void **)(v264 - 24));
              v264 -= 24;
            }
            while (v264 != v263);
            v265 = (void *)v423;
          }
          *((_QWORD *)&v423 + 1) = v263;
          operator delete(v265);
        }
        v266 = __dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__r.__words[0])
        {
          v267 = __dst.__r_.__value_.__l.__size_;
          v268 = (void *)__dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v267 - 1) < 0)
                operator delete(*(void **)(v267 - 24));
              v267 -= 24;
            }
            while (v267 != v266);
            v268 = (void *)__dst.__r_.__value_.__r.__words[0];
          }
          __dst.__r_.__value_.__l.__size_ = v266;
          goto LABEL_353;
        }
        goto LABEL_354;
      }
      if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 2)
      {
        E5RT::E5Operation::GetOperationAttributes<CpuInferenceOpT>(*v103, &v423);
        v202 = operator new();
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v423;
        v423 = 0uLL;
        E5RT::Ops::CpuInferenceOperation::CpuInferenceOperation(v202, &v406, &__dst, &v417, v415);
        v203 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v204 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
            std::__shared_weak_count::__release_weak(v203);
          }
        }
        v206 = (_QWORD *)operator new();
        *v206 = &off_1E2DC34A0;
        v206[1] = 0;
        v206[2] = 0;
        v206[3] = v202;
        v207 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)&v405 = v202;
        *((_QWORD *)&v405 + 1) = v206;
        if (v207)
        {
          v208 = (unint64_t *)&v207->__shared_owners_;
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        v189 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
        if (*((_QWORD *)&v423 + 1))
        {
          v210 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
          do
            v191 = __ldaxr(v210);
          while (__stlxr(v191 - 1, v210));
          goto LABEL_234;
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 3)
      {
        E5RT::E5Operation::GetOperationAttributes<CastOpT>(*v103, &v423);
        v242 = operator new();
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v423;
        v423 = 0uLL;
        E5RT::Ops::CastOperation::CastOperation(v242, &v406, &__dst, &v417, v415);
        v243 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v244 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        v246 = (_QWORD *)operator new();
        *v246 = &off_1E2DC3350;
        v246[1] = 0;
        v246[2] = 0;
        v246[3] = v242;
        v247 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)&v405 = v242;
        *((_QWORD *)&v405 + 1) = v246;
        if (v247)
        {
          v248 = (unint64_t *)&v247->__shared_owners_;
          do
            v249 = __ldaxr(v248);
          while (__stlxr(v249 - 1, v248));
          if (!v249)
          {
            ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
            std::__shared_weak_count::__release_weak(v247);
          }
        }
        v189 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
        if (*((_QWORD *)&v423 + 1))
        {
          v250 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
          do
            v191 = __ldaxr(v250);
          while (__stlxr(v191 - 1, v250));
          goto LABEL_234;
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 4)
      {
        E5RT::E5Operation::GetOperationAttributes<QuantOpT>(*v103, &v423);
        v251 = operator new();
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v423;
        v423 = 0uLL;
        E5RT::Ops::QuantOperation::QuantOperation(v251, &v406, &__dst, &v417, v415);
        v252 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v253 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v254 = __ldaxr(v253);
          while (__stlxr(v254 - 1, v253));
          if (!v254)
          {
            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
            std::__shared_weak_count::__release_weak(v252);
          }
        }
        v255 = (_QWORD *)operator new();
        *v255 = &off_1E2DC3388;
        v255[1] = 0;
        v255[2] = 0;
        v255[3] = v251;
        v256 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)&v405 = v251;
        *((_QWORD *)&v405 + 1) = v255;
        if (v256)
        {
          v257 = (unint64_t *)&v256->__shared_owners_;
          do
            v258 = __ldaxr(v257);
          while (__stlxr(v258 - 1, v257));
          if (!v258)
          {
            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
            std::__shared_weak_count::__release_weak(v256);
          }
        }
        v189 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
        if (*((_QWORD *)&v423 + 1))
        {
          v259 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
          do
            v191 = __ldaxr(v259);
          while (__stlxr(v191 - 1, v259));
          goto LABEL_234;
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 5)
      {
        E5RT::E5Operation::GetOperationAttributes<DequantOpT>(*v103, &v423);
        v292 = operator new();
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v423;
        v423 = 0uLL;
        E5RT::Ops::DequantOperation::DequantOperation(v292, &v406, &__dst, &v417, v415);
        v293 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v294 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v295 = __ldaxr(v294);
          while (__stlxr(v295 - 1, v294));
          if (!v295)
          {
            ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
            std::__shared_weak_count::__release_weak(v293);
          }
        }
        v296 = (_QWORD *)operator new();
        *v296 = &off_1E2DC33F8;
        v296[1] = 0;
        v296[2] = 0;
        v296[3] = v292;
        v297 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)&v405 = v292;
        *((_QWORD *)&v405 + 1) = v296;
        if (v297)
        {
          v298 = (unint64_t *)&v297->__shared_owners_;
          do
            v299 = __ldaxr(v298);
          while (__stlxr(v299 - 1, v298));
          if (!v299)
          {
            ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
            std::__shared_weak_count::__release_weak(v297);
          }
        }
        v189 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
        if (*((_QWORD *)&v423 + 1))
        {
          v300 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
          do
            v191 = __ldaxr(v300);
          while (__stlxr(v191 - 1, v300));
          goto LABEL_234;
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 7)
      {
        E5RT::E5Operation::GetOperationAttributes<MlcCpuInferenceOpT>(*v103, &v423);
        v301 = operator new();
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v423;
        v423 = 0uLL;
        E5RT::Ops::MlcCpuInferenceOperation::MlcCpuInferenceOperation(v301, &v406, &__dst, &v417, v415);
        v302 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v303 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v304 = __ldaxr(v303);
          while (__stlxr(v304 - 1, v303));
          if (!v304)
          {
            ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
            std::__shared_weak_count::__release_weak(v302);
          }
        }
        v305 = (_QWORD *)operator new();
        *v305 = &off_1E2DC3548;
        v305[1] = 0;
        v305[2] = 0;
        v305[3] = v301;
        v306 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)&v405 = v301;
        *((_QWORD *)&v405 + 1) = v305;
        if (v306)
        {
          v307 = (unint64_t *)&v306->__shared_owners_;
          do
            v308 = __ldaxr(v307);
          while (__stlxr(v308 - 1, v307));
          if (!v308)
          {
            ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
            std::__shared_weak_count::__release_weak(v306);
          }
        }
        v189 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
        if (*((_QWORD *)&v423 + 1))
        {
          v309 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
          do
            v191 = __ldaxr(v309);
          while (__stlxr(v191 - 1, v309));
          goto LABEL_234;
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 12)
      {
        E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>(*v103, &v423);
        v310 = operator new();
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v423;
        v423 = 0uLL;
        E5RT::Ops::BnnsCpuInferenceOperation::BnnsCpuInferenceOperation(v310, &v406, &__dst, &v417, v415, v387);
        v311 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v312 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v313 = __ldaxr(v312);
          while (__stlxr(v313 - 1, v312));
          if (!v313)
          {
            ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
            std::__shared_weak_count::__release_weak(v311);
          }
        }
        v314 = (_QWORD *)operator new();
        *v314 = &off_1E2DC3580;
        v314[1] = 0;
        v314[2] = 0;
        v314[3] = v310;
        v315 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)&v405 = v310;
        *((_QWORD *)&v405 + 1) = v314;
        if (v315)
        {
          v316 = (unint64_t *)&v315->__shared_owners_;
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
            std::__shared_weak_count::__release_weak(v315);
          }
        }
        v189 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
        if (*((_QWORD *)&v423 + 1))
        {
          v318 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
          do
            v191 = __ldaxr(v318);
          while (__stlxr(v191 - 1, v318));
          goto LABEL_234;
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 11)
      {
        E5RT::E5Operation::GetOperationAttributes<EirInferenceOpT>(*v103, &v423);
        v319 = operator new();
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v423;
        v423 = 0uLL;
        E5RT::Ops::EIRInferenceOperation::EIRInferenceOperation(v319, &v406, &__dst, &v417, v415);
        v320 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v321 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
        }
        v323 = (_QWORD *)operator new();
        *v323 = &off_1E2DC3510;
        v323[1] = 0;
        v323[2] = 0;
        v323[3] = v319;
        v324 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)&v405 = v319;
        *((_QWORD *)&v405 + 1) = v323;
        if (v324)
        {
          v325 = (unint64_t *)&v324->__shared_owners_;
          do
            v326 = __ldaxr(v325);
          while (__stlxr(v326 - 1, v325));
          if (!v326)
          {
            ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
            std::__shared_weak_count::__release_weak(v324);
          }
        }
        v189 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
        if (*((_QWORD *)&v423 + 1))
        {
          v327 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
          do
            v191 = __ldaxr(v327);
          while (__stlxr(v191 - 1, v327));
LABEL_234:
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 13)
      {
        __dst.__r_.__value_.__s.__data_[0] = 0;
        LOBYTE(v410) = 0;
        E5RT::E5Operation::GetOperationAttributes<JitCallOpT>(*v103, &v423);
        v328 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v387, v423 + 24);
        if (v328)
          std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&__dst, (const std::string *)(v328 + 5));
        std::make_unique[abi:ne180100]<E5RT::Ops::JitCallOperation,std::string &,std::shared_ptr<JitCallOpT const>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::optional<std::string> &>((uint64_t)&v406, &v423, (uint64_t)&v417, (uint64_t)v415, (uint64_t)v412, (uint64_t)&__dst, (uint64_t *)&__p);
        std::shared_ptr<E5RT::ExecutionStreamOperationInternal>::operator=[abi:ne180100]<E5RT::Ops::JitCallOperation,std::default_delete<E5RT::Ops::JitCallOperation>,void>(&v405, (uint64_t *)&__p);
        v329 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v329)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v329 + 8))(v329);
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&v423);
        if ((_BYTE)v410 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          v268 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_353:
          operator delete(v268);
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) == 14)
      {
        E5RT::E5Operation::GetOperationAttributes<E5MinimalCpuOpT>(*v103, &__dst);
        std::make_unique[abi:ne180100]<E5RT::Ops::E5MinimalCpuOperation,std::string &,std::shared_ptr<E5MinimalCpuOpT const>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>((uint64_t)&v406, (__int128 *)&__dst, (uint64_t)&v417, (uint64_t)v415, (uint64_t)v412, (uint64_t *)&v423);
        std::shared_ptr<E5RT::ExecutionStreamOperationInternal>::operator=[abi:ne180100]<E5RT::Ops::E5MinimalCpuOperation,std::default_delete<E5RT::Ops::E5MinimalCpuOperation>,void>(&v405, (uint64_t *)&v423);
        v330 = v423;
        *(_QWORD *)&v423 = 0;
        if (v330)
          (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&__dst);
      }
      else
      {
        if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103) != 9)
        {
          v383 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__dst, "Impl");
          v384 = (*(uint64_t (**)(const void *))(*(_QWORD *)*v103 + 16))(*v103);
          std::to_string(&__p, v384);
          v385 = std::string::insert(&__p, 0, "Unknown opcode type: ");
          v386 = *(_OWORD *)&v385->__r_.__value_.__l.__data_;
          v424 = v385->__r_.__value_.__r.__words[2];
          v423 = v386;
          v385->__r_.__value_.__l.__size_ = 0;
          v385->__r_.__value_.__r.__words[2] = 0;
          v385->__r_.__value_.__r.__words[0] = 0;
          E5RT::Status::Status(&v422, 2, &v423);
          E5RT::E5RTError::E5RTError(v383, &__dst, &v422);
        }
        std::make_unique[abi:ne180100]<E5RT::Ops::BarrierOperation,std::string &>((uint64_t)&v406, (uint64_t *)&__dst);
        std::shared_ptr<E5RT::ExecutionStreamOperationInternal>::operator=[abi:ne180100]<E5RT::Ops::BarrierOperation,std::default_delete<E5RT::Ops::BarrierOperation>,void>(&v405, (uint64_t *)&__dst);
        v331 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v331)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v331 + 8))(v331);
      }
LABEL_354:
      v269 = *(_OWORD **)(a1 + 56);
      if ((unint64_t)v269 >= *(_QWORD *)(a1 + 64))
      {
        v271 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(v390, (uint64_t)&v405);
        v272 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
        *(_QWORD *)(a1 + 56) = v271;
        if (!v272)
          goto LABEL_362;
        v273 = (unint64_t *)&v272->__shared_owners_;
        do
          v274 = __ldaxr(v273);
        while (__stlxr(v274 - 1, v273));
        if (!v274)
        {
          ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
          std::__shared_weak_count::__release_weak(v272);
          if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_356:
            operator delete(v406.__r_.__value_.__l.__data_);
            v270 = (void **)v413[0];
            if (v413[0])
            {
              do
              {
                while (1)
                {
LABEL_367:
                  v275 = (void **)*v270;
                  v276 = (std::__shared_weak_count *)v270[6];
                  if (v276)
                  {
                    v277 = (unint64_t *)&v276->__shared_owners_;
                    do
                      v278 = __ldaxr(v277);
                    while (__stlxr(v278 - 1, v277));
                    if (!v278)
                    {
                      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                      std::__shared_weak_count::__release_weak(v276);
                    }
                  }
                  if (*((char *)v270 + 39) < 0)
                    break;
                  operator delete(v270);
                  v270 = v275;
                  if (!v275)
                    goto LABEL_373;
                }
                operator delete(v270[2]);
                operator delete(v270);
                v270 = v275;
              }
              while (v275);
            }
            goto LABEL_373;
          }
        }
        else
        {
LABEL_362:
          if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_356;
        }
      }
      else
      {
        *v269 = v405;
        *(_QWORD *)(a1 + 56) = v269 + 1;
        if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_356;
      }
      v270 = (void **)v413[0];
      if (v413[0])
        goto LABEL_367;
LABEL_373:
      v279 = v412[0];
      v412[0] = 0;
      if (v279)
        operator delete(v279);
      v280 = *(void ***)&v415[1];
      if (*(_QWORD *)&v415[1])
      {
        do
        {
          while (1)
          {
            v281 = (void **)*v280;
            v282 = (std::__shared_weak_count *)v280[6];
            if (v282)
            {
              v283 = (unint64_t *)&v282->__shared_owners_;
              do
                v284 = __ldaxr(v283);
              while (__stlxr(v284 - 1, v283));
              if (!v284)
              {
                ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                std::__shared_weak_count::__release_weak(v282);
              }
            }
            if (*((char *)v280 + 39) < 0)
              break;
            operator delete(v280);
            v280 = v281;
            if (!v281)
              goto LABEL_385;
          }
          operator delete(v280[2]);
          operator delete(v280);
          v280 = v281;
        }
        while (v281);
      }
LABEL_385:
      v285 = *(void **)&v415[0];
      *(_QWORD *)&v415[0] = 0;
      if (v285)
        operator delete(v285);
      v286 = (void **)v418;
      if ((_QWORD)v418)
      {
        do
        {
          while (1)
          {
            v287 = (void **)*v286;
            v288 = (std::__shared_weak_count *)v286[6];
            if (v288)
            {
              v289 = (unint64_t *)&v288->__shared_owners_;
              do
                v290 = __ldaxr(v289);
              while (__stlxr(v290 - 1, v289));
              if (!v290)
              {
                ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                std::__shared_weak_count::__release_weak(v288);
              }
            }
            if (*((char *)v286 + 39) < 0)
              break;
            operator delete(v286);
            v286 = v287;
            if (!v287)
              goto LABEL_397;
          }
          operator delete(v286[2]);
          operator delete(v286);
          v286 = v287;
        }
        while (v287);
      }
LABEL_397:
      v291 = (void *)v417;
      *(_QWORD *)&v417 = 0;
      if (v291)
        operator delete(v291);
      objc_autoreleasePoolPop(v104);
      v103 += 2;
      if (v103 == v401)
        goto LABEL_478;
    }
    v171 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v168 | 7) != 0x17)
      v171 = v168 | 7;
    v172 = v171 + 1;
    p_dst = (char *)operator new(v171 + 1);
    __dst.__r_.__value_.__l.__size_ = v167 + 1;
    __dst.__r_.__value_.__r.__words[2] = v172 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_207:
    if (v166 >= 0)
      v173 = v165;
    else
      v173 = *v165;
    memmove(p_dst, v173, v167);
    goto LABEL_211;
  }
LABEL_478:
  v417 = 0u;
  v418 = 0u;
  v419 = 1065353216;
  v332 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 48);
  v333 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 56);
  if (v332 != v333)
  {
    do
    {
      *(_QWORD *)&v415[0] = *(_QWORD *)E5RT::ExecutionStreamOperationInternal::GetOpSupportedBufferTypes(*v332);
      v334 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*v332);
      sub_190F3F7EC(*(uint64_t **)(v334 + 16), v415, &v417);
      v335 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*v332);
      sub_190F3F7EC(*(uint64_t **)(v335 + 16), v415, &v417);
      v332 += 2;
    }
    while (v332 != v333);
    v336 = (_QWORD *)v418;
    if (!(_QWORD)v418)
      goto LABEL_531;
    while (1)
    {
      v337 = 0;
      v338 = 0;
      v339 = v336[2];
      v340 = v336[3];
      memset(v415, 0, 24);
      if ((v340 & 1) != 0)
      {
        v341 = (char *)operator new(4uLL);
        *(_DWORD *)v341 = 0;
        v338 = v341 + 4;
        *((_QWORD *)&v415[0] + 1) = v341 + 4;
        *(_QWORD *)&v415[1] = v341 + 4;
        *(_QWORD *)&v415[0] = v341;
        v337 = v341;
      }
      if ((v340 & 2) != 0)
        break;
      v342 = v337;
      v343 = v338;
      if ((v340 & 4) == 0)
        goto LABEL_527;
LABEL_501:
      if (v343 >= v338)
      {
        v351 = (v343 - v342) >> 2;
        v352 = v351 + 1;
        if ((unint64_t)(v351 + 1) >> 62)
LABEL_552:
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v338 - v342) >> 1 > v352)
          v352 = (v338 - v342) >> 1;
        if ((unint64_t)(v338 - v342) >= 0x7FFFFFFFFFFFFFFCLL)
          v353 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v353 = v352;
        if (v353)
        {
          if (v353 >> 62)
LABEL_553:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v354 = operator new(4 * v353);
          v355 = &v354[4 * v351];
          *v355 = 2;
          v350 = (uint64_t)(v355 + 1);
          if (v343 == v342)
            goto LABEL_524;
LABEL_516:
          v356 = v343 - 4 - v342;
          if (v356 < 0x2C)
          {
            v357 = v343;
            goto LABEL_523;
          }
          if ((unint64_t)(v342 - v354) < 0x20)
          {
            v357 = v343;
            goto LABEL_523;
          }
          v358 = (v356 >> 2) + 1;
          v359 = 4 * (v358 & 0x7FFFFFFFFFFFFFF8);
          v357 = &v343[-v359];
          v355 = (_DWORD *)((char *)v355 - v359);
          v360 = &v354[4 * v351 - 16];
          v361 = v343 - 16;
          v362 = v358 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v363 = *(_OWORD *)v361;
            *(v360 - 1) = *((_OWORD *)v361 - 1);
            *v360 = v363;
            v360 -= 2;
            v361 -= 32;
            v362 -= 8;
          }
          while (v362);
          if (v358 != (v358 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_523:
              v364 = *((_DWORD *)v357 - 1);
              v357 -= 4;
              *--v355 = v364;
            }
            while (v357 != v342);
          }
        }
        else
        {
          v354 = 0;
          v355 = (_DWORD *)(4 * v351);
          *(_DWORD *)(4 * v351) = 2;
          v350 = 4 * v351 + 4;
          if (v343 != v342)
            goto LABEL_516;
        }
LABEL_524:
        *(_QWORD *)&v415[0] = v355;
        *(_QWORD *)&v415[1] = &v354[4 * v353];
        if (v342)
          operator delete(v342);
        goto LABEL_526;
      }
      *(_DWORD *)v343 = 2;
      v350 = (uint64_t)(v343 + 4);
LABEL_526:
      *((_QWORD *)&v415[0] + 1) = v350;
LABEL_527:
      E5RT::IOPortPriv::SetSupportedBufferTypes(v339, (char **)v415);
      if (*(_QWORD *)&v415[0])
      {
        *((_QWORD *)&v415[0] + 1) = *(_QWORD *)&v415[0];
        operator delete(*(void **)&v415[0]);
      }
      v336 = (_QWORD *)*v336;
      if (!v336)
        goto LABEL_529;
    }
    v344 = v338 - v337;
    v345 = (v338 - v337) >> 2;
    v346 = v345 + 1;
    if ((unint64_t)(v345 + 1) >> 62)
      goto LABEL_552;
    if (v344 >> 1 > v346)
      v346 = v344 >> 1;
    if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFFCLL)
      v347 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v347 = v346;
    if (v347)
    {
      if (v347 >> 62)
        goto LABEL_553;
      v348 = (char *)operator new(4 * v347);
      v342 = &v348[4 * v345];
      *(_DWORD *)v342 = 1;
      v343 = v342 + 4;
      if (v338 != v337)
        goto LABEL_497;
    }
    else
    {
      v348 = 0;
      v342 = (char *)(4 * v345);
      *(_DWORD *)v342 = 1;
      v343 = v342 + 4;
      if (v338 != v337)
      {
LABEL_497:
        v349 = (v338 - 4 - v337) & 0xFFFFFFFFFFFFFFFCLL;
        v342 = &v348[v344 - v349 - 4];
        memcpy(v342, &v338[-v349 - 4], v349 + 4);
      }
    }
    v338 = &v348[4 * v347];
    *(_QWORD *)&v415[0] = v342;
    *(_QWORD *)&v415[1] = v338;
    if (v337)
      operator delete(v337);
    *((_QWORD *)&v415[0] + 1) = v343;
    if ((v340 & 4) == 0)
      goto LABEL_527;
    goto LABEL_501;
  }
LABEL_529:
  v365 = (_QWORD *)v418;
  if ((_QWORD)v418)
  {
    do
    {
      v366 = (_QWORD *)*v365;
      operator delete(v365);
      v365 = v366;
    }
    while (v366);
  }
LABEL_531:
  v367 = (void *)v417;
  *(_QWORD *)&v417 = 0;
  if (v367)
    operator delete(v367);
  return a1;
}

void sub_190F3E4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t a24,uint64_t a25,_QWORD *a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58,uint64_t a59,char a60)
{
  int v60;
  void *v61;
  uint64_t v62;
  void **v64;
  char *v65;
  char *v66;
  void *v67;
  char *v68;
  char *v69;
  void *v70;
  char *v71;
  char *v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  _QWORD *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  void **v92;
  void **v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;

  E5RT::Status::~Status((E5RT::Status *)(v62 - 144));
  if (*(char *)(v62 - 105) < 0)
  {
    operator delete(*(void **)(v62 - 128));
    if (a39 < 0)
    {
LABEL_5:
      operator delete(__p);
      if ((a56 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a39 < 0)
  {
    goto LABEL_5;
  }
  if ((a56 & 0x80000000) == 0)
  {
LABEL_6:
    v64 = a30;
    if (!v60)
    {
LABEL_11:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
      if (a47 < 0)
        operator delete(a42);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a60);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v62 - 256);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v62 - 208);
      v65 = (char *)a26[33];
      if (!v65)
      {
LABEL_20:
        v67 = *a16;
        *a16 = 0;
        if (v67)
          operator delete(v67);
        v68 = (char *)a26[28];
        if (!v68)
        {
LABEL_29:
          v70 = *a17;
          *a17 = 0;
          if (v70)
            operator delete(v70);
          v71 = (char *)a26[23];
          if (!v71)
          {
LABEL_38:
            v73 = *a15;
            *a15 = 0;
            if (v73)
            {
              operator delete(v73);
              v74 = (_QWORD *)a26[16];
              if (!v74)
              {
LABEL_40:
                v75 = *a23;
                *a23 = 0;
                if (!v75)
                  goto LABEL_41;
LABEL_46:
                (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
                v76 = (std::__shared_weak_count *)a26[12];
                if (!v76)
                  goto LABEL_51;
                goto LABEL_47;
              }
            }
            else
            {
              v74 = (_QWORD *)a26[16];
              if (!v74)
                goto LABEL_40;
            }
            v77 = (_QWORD *)a26[17];
            if (v77 == v74)
            {
              a26[17] = v74;
              operator delete(v74);
              v75 = *a23;
              *a23 = 0;
              if (v75)
                goto LABEL_46;
            }
            else
            {
              do
              {
                v87 = *--v77;
                v86 = v87;
                *v77 = 0;
                if (v87)
                  (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
              }
              while (v77 != v74);
              v91 = (void *)a26[16];
              a26[17] = v74;
              operator delete(v91);
              v75 = *a23;
              *a23 = 0;
              if (v75)
                goto LABEL_46;
            }
LABEL_41:
            v76 = (std::__shared_weak_count *)a26[12];
            if (!v76)
              goto LABEL_51;
LABEL_47:
            p_shared_owners = (unint64_t *)&v76->__shared_owners_;
            do
              v79 = __ldaxr(p_shared_owners);
            while (__stlxr(v79 - 1, p_shared_owners));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
LABEL_51:
            v80 = (std::__shared_weak_count *)a26[10];
            if (v80)
            {
              v81 = (unint64_t *)&v80->__shared_owners_;
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
            v83 = (char *)*a18;
            if (*a18)
            {
              v84 = (char *)a26[7];
              v85 = *a18;
              if (v84 != v83)
              {
                do
                {
                  v88 = (std::__shared_weak_count *)*((_QWORD *)v84 - 1);
                  if (v88)
                  {
                    v89 = (unint64_t *)&v88->__shared_owners_;
                    do
                      v90 = __ldaxr(v89);
                    while (__stlxr(v90 - 1, v89));
                    if (!v90)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                    }
                  }
                  v84 -= 16;
                }
                while (v84 != v83);
                v85 = *a18;
              }
              a26[7] = v83;
              operator delete(v85);
            }
            v92 = (void **)a26[3];
            if (v92)
            {
              do
              {
                while (1)
                {
                  v93 = (void **)*v92;
                  v94 = (std::__shared_weak_count *)v92[6];
                  if (v94)
                  {
                    v95 = (unint64_t *)&v94->__shared_owners_;
                    do
                      v96 = __ldaxr(v95);
                    while (__stlxr(v96 - 1, v95));
                    if (!v96)
                    {
                      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                      std::__shared_weak_count::__release_weak(v94);
                    }
                  }
                  if (*((char *)v92 + 39) < 0)
                    break;
                  operator delete(v92);
                  v92 = v93;
                  if (!v93)
                    goto LABEL_82;
                }
                operator delete(v92[2]);
                operator delete(v92);
                v92 = v93;
              }
              while (v93);
            }
LABEL_82:
            v97 = *v64;
            *v64 = 0;
            if (!v97)
              _Unwind_Resume(a1);
            operator delete(v97);
            _Unwind_Resume(a1);
          }
          while (1)
          {
            v72 = *(char **)v71;
            if (v71[63] < 0)
            {
              operator delete(*((void **)v71 + 5));
              if ((v71[39] & 0x80000000) == 0)
                goto LABEL_34;
LABEL_37:
              operator delete(*((void **)v71 + 2));
              operator delete(v71);
              v71 = v72;
              if (!v72)
                goto LABEL_38;
            }
            else
            {
              if (v71[39] < 0)
                goto LABEL_37;
LABEL_34:
              operator delete(v71);
              v71 = v72;
              if (!v72)
                goto LABEL_38;
            }
          }
        }
        while (1)
        {
          v69 = *(char **)v68;
          if (v68[63] < 0)
          {
            operator delete(*((void **)v68 + 5));
            if ((v68[39] & 0x80000000) == 0)
              goto LABEL_25;
LABEL_28:
            operator delete(*((void **)v68 + 2));
            operator delete(v68);
            v68 = v69;
            if (!v69)
              goto LABEL_29;
          }
          else
          {
            if (v68[39] < 0)
              goto LABEL_28;
LABEL_25:
            operator delete(v68);
            v68 = v69;
            if (!v69)
              goto LABEL_29;
          }
        }
      }
      while (1)
      {
        v66 = *(char **)v65;
        if (v65[63] < 0)
        {
          operator delete(*((void **)v65 + 5));
          if ((v65[39] & 0x80000000) == 0)
            goto LABEL_16;
LABEL_19:
          operator delete(*((void **)v65 + 2));
          operator delete(v65);
          v65 = v66;
          if (!v66)
            goto LABEL_20;
        }
        else
        {
          if (v65[39] < 0)
            goto LABEL_19;
LABEL_16:
          operator delete(v65);
          v65 = v66;
          if (!v66)
            goto LABEL_20;
        }
      }
    }
LABEL_10:
    __cxa_free_exception(v61);
    goto LABEL_11;
  }
LABEL_9:
  operator delete(a51);
  v64 = a30;
  if ((v60 & 1) == 0)
    goto LABEL_11;
  goto LABEL_10;
}

uint64_t std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(std::string *this, const std::string *a2)
{
  std::string *v2;
  __int128 v3;

  v2 = this;
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
    return v2;
  }
  else if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    v2[1].__r_.__value_.__s.__data_[0] = 1;
    return v2;
  }
  else
  {
    v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void std::make_unique[abi:ne180100]<E5RT::Ops::JitCallOperation,std::string &,std::shared_ptr<JitCallOpT const>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::optional<std::string> &>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string __p;
  char v19;
  __int128 v20;

  v14 = operator new();
  v20 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v19 = 0;
  if (*(_BYTE *)(a6 + 24))
  {
    if (*(char *)(a6 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
    else
      __p = *(std::string *)a6;
    v19 = 1;
  }
  E5RT::Ops::JitCallOperation::JitCallOperation(v14, a1, &v20, a3, a4, a5, &__p);
  *a7 = v14;
  if (v19 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_190F3F3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  MEMORY[0x19401CD90](v19, 0x10F3C409D8ED1DCLL);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<E5RT::ExecutionStreamOperationInternal>::operator=[abi:ne180100]<E5RT::Ops::JitCallOperation,std::default_delete<E5RT::Ops::JitCallOperation>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E2DC3430;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    *a2 = 0;
    v7 = (std::__shared_weak_count *)a1[1];
    *a1 = v4;
    a1[1] = v5;
    if (!v7)
      return a1;
  }
  else
  {
    *a2 = 0;
    v7 = (std::__shared_weak_count *)a1[1];
    *a1 = 0;
    a1[1] = 0;
    if (!v7)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void std::make_unique[abi:ne180100]<E5RT::Ops::E5MinimalCpuOperation,std::string &,std::shared_ptr<E5MinimalCpuOpT const>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  v12 = operator new();
  v16 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  E5RT::Ops::E5MinimalCpuOperation::E5MinimalCpuOperation(v12, a1, &v16, a3, a4, a5);
  *a6 = v12;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_190F3F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x19401CD90](v9, 0x10F3C409D8ED1DCLL);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<E5RT::ExecutionStreamOperationInternal>::operator=[abi:ne180100]<E5RT::Ops::E5MinimalCpuOperation,std::default_delete<E5RT::Ops::E5MinimalCpuOperation>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E2DC34D8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    *a2 = 0;
    v7 = (std::__shared_weak_count *)a1[1];
    *a1 = v4;
    a1[1] = v5;
    if (!v7)
      return a1;
  }
  else
  {
    *a2 = 0;
    v7 = (std::__shared_weak_count *)a1[1];
    *a1 = 0;
    a1[1] = 0;
    if (!v7)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t std::make_unique[abi:ne180100]<E5RT::Ops::BarrierOperation,std::string &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = E5RT::Ops::BarrierOperation::BarrierOperation(v4, a1);
  *a2 = v4;
  return result;
}

void sub_190F3F700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10F3C409D8ED1DCLL);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<E5RT::ExecutionStreamOperationInternal>::operator=[abi:ne180100]<E5RT::Ops::BarrierOperation,std::default_delete<E5RT::Ops::BarrierOperation>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E2DC33C0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    *a2 = 0;
    v7 = (std::__shared_weak_count *)a1[1];
    *a1 = v4;
    a1[1] = v5;
    if (!v7)
      return a1;
  }
  else
  {
    *a2 = 0;
    v7 = (std::__shared_weak_count *)a1[1];
    *a1 = 0;
    a1[1] = 0;
    if (!v7)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_190F3F7EC(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t *v18;

  if (a1)
  {
    v5 = a1;
    while (1)
    {
      if (*((char *)v5 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)v5[2], v5[3]);
        v6 = (uint64_t *)v5[5];
        v7 = (std::__shared_weak_count *)v5[6];
        v16 = (uint64_t)v6;
        v17 = v7;
        if (!v7)
          goto LABEL_12;
      }
      else
      {
        v15 = *(std::string *)(v5 + 2);
        v6 = (uint64_t *)v5[5];
        v7 = (std::__shared_weak_count *)v5[6];
        v16 = (uint64_t)v6;
        v17 = v7;
        if (!v7)
          goto LABEL_12;
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v6 = (uint64_t *)v16;
LABEL_12:
      v18 = v6;
      v10 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(a3, (uint64_t *)&v18);
      if (v10)
      {
        v10[3] &= *a2;
        v11 = v17;
        if (v17)
          goto LABEL_16;
      }
      else
      {
        v14 = v16;
        v18 = &v14;
        std::__hash_table<std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::__unordered_map_hasher<E5RT::IOPort *,std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::hash<E5RT::IOPort *>,std::equal_to<E5RT::IOPort *>,true>,std::__unordered_map_equal<E5RT::IOPort *,std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::equal_to<E5RT::IOPort *>,std::hash<E5RT::IOPort *>,true>,std::allocator<std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>>>::__emplace_unique_key_args<E5RT::IOPort *,std::piecewise_construct_t const&,std::tuple<E5RT::IOPort *&&>,std::tuple<>>((uint64_t)a3, &v14, (uint64_t)&std::piecewise_construct, &v18)[3] = *a2;
        v11 = v17;
        if (v17)
        {
LABEL_16:
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v15.__r_.__value_.__l.__data_);
        v5 = (uint64_t *)*v5;
        if (!v5)
          return;
      }
      else
      {
        v5 = (uint64_t *)*v5;
        if (!v5)
          return;
      }
    }
  }
}

void sub_190F3F950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F3F964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::~Impl(E5RT::Ops::PreCompiledComputeOperation::Impl *this)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;

  v2 = (void **)*((_QWORD *)this + 33);
  if (v2)
  {
    do
    {
      v11 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_18:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v2);
      v2 = v11;
    }
    while (v11);
  }
  v3 = (void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void **)*((_QWORD *)this + 28);
  if (v4)
  {
    do
    {
      v12 = (void **)*v4;
      if (*((char *)v4 + 63) < 0)
      {
        operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0)
LABEL_24:
          operator delete(v4[2]);
      }
      else if (*((char *)v4 + 39) < 0)
      {
        goto LABEL_24;
      }
      operator delete(v4);
      v4 = v12;
    }
    while (v12);
  }
  v5 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v5)
    operator delete(v5);
  v6 = (void **)*((_QWORD *)this + 23);
  if (v6)
  {
    do
    {
      v13 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0)
LABEL_30:
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_30;
      }
      operator delete(v6);
      v6 = v13;
    }
    while (v13);
  }
  v7 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 16);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 17);
    v10 = (void *)*((_QWORD *)this + 16);
    if (v9 != v8)
    {
      do
      {
        v15 = *--v9;
        v14 = v15;
        *v9 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v8;
    operator delete(v10);
  }
  v16 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v17)
    goto LABEL_42;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v20)
      goto LABEL_48;
  }
  else
  {
LABEL_42:
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v20)
      goto LABEL_48;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_48:
  v23 = *((_QWORD *)this + 6);
  if (v23)
  {
    v24 = *((_QWORD *)this + 7);
    v25 = (void *)*((_QWORD *)this + 6);
    if (v24 != v23)
    {
      do
      {
        v26 = *(std::__shared_weak_count **)(v24 - 8);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 16;
      }
      while (v24 != v23);
      v25 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v23;
    operator delete(v25);
  }
  v29 = (void **)*((_QWORD *)this + 3);
  if (v29)
  {
    do
    {
      while (1)
      {
        v30 = (void **)*v29;
        v31 = (std::__shared_weak_count *)v29[6];
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (*((char *)v29 + 39) < 0)
          break;
        operator delete(v29);
        v29 = v30;
        if (!v30)
          goto LABEL_69;
      }
      operator delete(v29[2]);
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
LABEL_69:
  v34 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v34)
    operator delete(v34);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::BindEventsForOpsParallel(E5RT::Ops::PreCompiledComputeOperation::Impl *this)
{
  _QWORD **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::string::size_type v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  std::string *v48;
  __int128 v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *exception;
  void *v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::string v78;
  std::string __p;
  uint64_t v80;
  unint64_t v81;
  void *v82[2];
  void *v83[2];
  int v84;
  __int128 v85;
  __int128 v86;
  int v87;
  _QWORD *v88[3];

  v1 = (_QWORD **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9));
  v2 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v1 + 16))(**v1);
  v85 = 0u;
  v86 = 0u;
  v87 = 1065353216;
  v3 = *v2;
  if (v2[1] == *v2)
    goto LABEL_109;
  v4 = v2;
  v5 = 0;
  v73 = v2;
  do
  {
    v6 = *(_QWORD *)(v3 + 16 * v5);
    v75 = *(_QWORD *)(*((_QWORD *)this + 6) + 16 * v5);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    if (v5)
    {
      *(_OWORD *)v82 = 0u;
      *(_OWORD *)v83 = 0u;
      v84 = 1065353216;
      v8 = *(unint64_t **)v7;
      v9 = *(unint64_t **)(v7 + 8);
      while (1)
      {
        if (v8 == v9)
        {
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 48))(v75, v82);
          v34 = v83[0];
          v4 = v73;
          if (v83[0])
          {
            do
            {
              v36 = v34;
              v34 = (_QWORD *)*v34;
              v37 = (std::__shared_weak_count *)v36[3];
              if (v37)
              {
                p_shared_owners = (unint64_t *)&v37->__shared_owners_;
                do
                  v39 = __ldaxr(p_shared_owners);
                while (__stlxr(v39 - 1, p_shared_owners));
                if (!v39)
                {
                  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                  std::__shared_weak_count::__release_weak(v37);
                }
              }
              operator delete(v36);
            }
            while (v34);
          }
          v35 = v82[0];
          v82[0] = 0;
          if (v35)
            operator delete(v35);
          goto LABEL_63;
        }
        v81 = 0;
        v10 = *v8;
        v81 = *v8;
        if (*((_QWORD *)&v85 + 1))
        {
          v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v85 + 8));
          v11.i16[0] = vaddlv_u8(v11);
          if (v11.u32[0] > 1uLL)
          {
            v12 = v10;
            if (v10 >= *((_QWORD *)&v85 + 1))
              v12 = v10 % *((_QWORD *)&v85 + 1);
          }
          else
          {
            v12 = (*((_QWORD *)&v85 + 1) - 1) & v10;
          }
          v13 = *(_QWORD **)(v85 + 8 * v12);
          if (v13)
          {
            v14 = (_QWORD *)*v13;
            if (v14)
            {
              if (v11.u32[0] < 2uLL)
              {
                while (1)
                {
                  v16 = v14[1];
                  if (v16 == v10)
                  {
                    if (v14[2] == v10)
                      goto LABEL_40;
                  }
                  else if ((v16 & (*((_QWORD *)&v85 + 1) - 1)) != v12)
                  {
                    goto LABEL_29;
                  }
                  v14 = (_QWORD *)*v14;
                  if (!v14)
                    goto LABEL_29;
                }
              }
              do
              {
                v15 = v14[1];
                if (v15 == v10)
                {
                  if (v14[2] == v10)
                    goto LABEL_40;
                }
                else
                {
                  if (v15 >= *((_QWORD *)&v85 + 1))
                    v15 %= *((_QWORD *)&v85 + 1);
                  if (v15 != v12)
                    break;
                }
                v14 = (_QWORD *)*v14;
              }
              while (v14);
            }
          }
        }
LABEL_29:
        std::to_string(&v78, v10);
        v17 = std::string::insert(&v78, 0, "Compute-Unit-Parallel event:");
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        E5RT::AsyncEvent::CreateEvent((__int128 *)&__p, 0, &v80);
        v88[0] = &v81;
        v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v85, &v81, (uint64_t)&std::piecewise_construct, v88);
        v20 = v80;
        if (v80)
        {
          v21 = (_QWORD *)operator new();
          v22 = v80;
          *v21 = &unk_1E2DC3158;
          v21[1] = 0;
          v21[2] = 0;
          v21[3] = v22;
          v80 = 0;
          v23 = (std::__shared_weak_count *)v19[4];
          v19[3] = v20;
          v19[4] = v21;
          if (!v23)
            break;
        }
        else
        {
          v80 = 0;
          v23 = (std::__shared_weak_count *)v19[4];
          v19[3] = 0;
          v19[4] = 0;
          if (!v23)
            break;
        }
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (v25)
          break;
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        v26 = v80;
        v80 = 0;
        if (v26)
          goto LABEL_37;
LABEL_38:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_40;
        }
        else if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_40;
        }
        operator delete(v78.__r_.__value_.__l.__data_);
LABEL_40:
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
        v27 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v85, &v81, (uint64_t)&std::piecewise_construct, &v78);
        v28 = v27[4];
        __p.__r_.__value_.__r.__words[0] = v27[3];
        __p.__r_.__value_.__l.__size_ = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const>>((uint64_t)v82, (uint64_t *)&__p, (uint64_t)&__p);
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        ++v8;
      }
      v26 = v80;
      v80 = 0;
      if (!v26)
        goto LABEL_38;
LABEL_37:
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      goto LABEL_38;
    }
    if (*(_QWORD *)(v7 + 8) - *(_QWORD *)v7 != 8 || **(_QWORD **)v7)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v82, "BindEventsForOpsParallel");
      std::string::basic_string[abi:ne180100]<0>(&__p, "First operation must have and only have 0 (no event) as dependent event id.");
      E5RT::Status::Status(&v78, 2, &__p);
      E5RT::E5RTError::E5RTError(exception, v82, &v78);
    }
LABEL_63:
    v88[0] = 0;
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
    if (!*(_BYTE *)(v40 + 8))
      std::__throw_bad_optional_access[abi:ne180100]();
    v41 = *(_QWORD *)v40;
    v88[0] = (_QWORD *)v41;
    if (v5 < ((v4[1] - *v4) >> 4) - 1)
    {
      if (*((_QWORD *)&v85 + 1))
      {
        v42 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v85 + 8));
        v42.i16[0] = vaddlv_u8(v42);
        if (v42.u32[0] > 1uLL)
        {
          v43 = v41;
          if (v41 >= *((_QWORD *)&v85 + 1))
            v43 = v41 % *((_QWORD *)&v85 + 1);
        }
        else
        {
          v43 = (*((_QWORD *)&v85 + 1) - 1) & v41;
        }
        v44 = *(_QWORD **)(v85 + 8 * v43);
        if (v44)
        {
          v45 = (_QWORD *)*v44;
          if (v45)
          {
            if (v42.u32[0] < 2uLL)
            {
              while (1)
              {
                v47 = v45[1];
                if (v47 == v41)
                {
                  if (v45[2] == v41)
                    goto LABEL_96;
                }
                else if ((v47 & (*((_QWORD *)&v85 + 1) - 1)) != v43)
                {
                  goto LABEL_85;
                }
                v45 = (_QWORD *)*v45;
                if (!v45)
                  goto LABEL_85;
              }
            }
            do
            {
              v46 = v45[1];
              if (v46 == v41)
              {
                if (v45[2] == v41)
                  goto LABEL_96;
              }
              else
              {
                if (v46 >= *((_QWORD *)&v85 + 1))
                  v46 %= *((_QWORD *)&v85 + 1);
                if (v46 != v43)
                  break;
              }
              v45 = (_QWORD *)*v45;
            }
            while (v45);
          }
        }
      }
LABEL_85:
      std::to_string(&__p, v41);
      v48 = std::string::insert(&__p, 0, "Compute-Unit-Parallel event:");
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v83[0] = (void *)v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)v82 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      E5RT::AsyncEvent::CreateEvent((__int128 *)v82, 0, &v81);
      v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
      v50 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v85, (unint64_t *)v88, (uint64_t)&std::piecewise_construct, &v78);
      v51 = v81;
      if (v81)
      {
        v52 = (_QWORD *)operator new();
        v53 = v81;
        *v52 = &unk_1E2DC3158;
        v52[1] = 0;
        v52[2] = 0;
        v52[3] = v53;
        v81 = 0;
        v54 = (std::__shared_weak_count *)v50[4];
        v50[3] = v51;
        v50[4] = v52;
        if (!v54)
          goto LABEL_92;
      }
      else
      {
        v81 = 0;
        v54 = (std::__shared_weak_count *)v50[4];
        v50[3] = 0;
        v50[4] = 0;
        if (!v54)
          goto LABEL_92;
      }
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        v57 = v81;
        v81 = 0;
        if (!v57)
        {
LABEL_94:
          if (SHIBYTE(v83[0]) < 0)
          {
            operator delete(v82[0]);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_96;
          }
          else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_96:
            v82[0] = v88;
            v58 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v85, (unint64_t *)v88, (uint64_t)&std::piecewise_construct, (_QWORD **)v82);
            v59 = (std::__shared_weak_count *)v58[4];
            v76 = v58[3];
            v77 = v59;
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v75 + 64))(v75, &v76, 1);
            v62 = v77;
            if (v77)
            {
              v63 = (unint64_t *)&v77->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            goto LABEL_4;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_96;
        }
LABEL_93:
        (*(void (**)(unint64_t))(*(_QWORD *)v57 + 8))(v57);
        goto LABEL_94;
      }
LABEL_92:
      v57 = v81;
      v81 = 0;
      if (!v57)
        goto LABEL_94;
      goto LABEL_93;
    }
    if (v41)
    {
      v72 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v82, "BindEventsForOpsParallel");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Last operation must have 0 (no event) as completion event id.");
      E5RT::Status::Status(&v78, 2, &__p);
      E5RT::E5RTError::E5RTError(v72, v82, &v78);
    }
LABEL_4:
    ++v5;
    v3 = *v4;
  }
  while (v5 < (v4[1] - *v4) >> 4);
  v65 = (_QWORD *)v86;
  while (v65)
  {
    v67 = v65;
    v65 = (_QWORD *)*v65;
    v68 = (std::__shared_weak_count *)v67[4];
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    operator delete(v67);
  }
LABEL_109:
  v66 = (void *)v85;
  *(_QWORD *)&v85 = 0;
  if (v66)
    operator delete(v66);
}

void sub_190F4051C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;

  if (a27 < 0)
    operator delete(__p);
  v38 = *(_QWORD **)(v36 - 144);
  while (v38)
  {
    v40 = v38;
    v38 = (_QWORD *)*v38;
    v41 = (std::__shared_weak_count *)v40[4];
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    operator delete(v40);
  }
  v39 = *(void **)(v36 - 160);
  *(_QWORD *)(v36 - 160) = 0;
  if (v39)
    operator delete(v39);
  _Unwind_Resume(exception_object);
}

void sub_190F40764(uint64_t a1, uint64_t a2, void **a3)
{
  E5RT::TensorDescriptor *v6;
  E5RT::TensorDescriptor *v7;
  uint64_t *v8;
  uint64_t TensorShape;
  size_t v10;
  uint64_t *v11;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;

  v6 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(*a3);
  if (!v6)
  {
LABEL_18:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<E5RT::OperandDescriptor const>&>(*(_QWORD *)(a1 + 8), a2, a2, a3);
    return;
  }
  v7 = v6;
  E5RT::TensorDescriptor::TryGetDefaultTensorShape((uint64_t)v6, &v21);
  v8 = v21;
  if (!v21
    || *v21 == v21[1]
    || (TensorShape = E5RT::TensorDescriptor::GetTensorShape(v7),
        v10 = v8[1] - *v8,
        v10 == *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape)
    && !memcmp((const void *)*v8, *(const void **)TensorShape, v10))
  {
    v17 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    goto LABEL_18;
  }
  **(_BYTE **)a1 = 1;
  v11 = v21;
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v7);
  E5RT::TensorDescriptor::CreateTensorDesc(TensorDataTypeRef, v11, &v20);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<E5RT::TensorDescriptor>>(*(_QWORD *)(a1 + 8), a2, a2, &v20);
  v13 = v20;
  v20 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_190F40900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F40944(uint64_t *a1, _QWORD *a2)
{
  uint64_t *i;
  uint64_t *v5;
  void (***v6)(E5RT::IOPortPriv *__hidden);
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *exception;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _QWORD v18[3];
  _BYTE v19[8];
  __int128 *v20[3];

  for (i = (uint64_t *)a2[2]; i; i = (uint64_t *)*i)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>((_QWORD *)*a1, (uint64_t)(i + 2)))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v20, "operator()");
      std::string::basic_string[abi:ne180100]<0>(v18, "Reshaping error. Unable to find new shape for op's input.");
      E5RT::Status::Status(v19, 11, v18);
      E5RT::E5RTError::E5RTError(exception, v20, v19);
    }
    v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, (uint64_t)(i + 2));
    if (!v5)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v6 = (void (***)(E5RT::IOPortPriv *__hidden))v5[5];
    if (!v6 || *v6 != &off_1E2D59AC8)
      v6 = 0;
    v7 = *a1;
    v20[0] = (__int128 *)(i + 2);
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, v20);
    v9 = v8[6];
    v16 = v8[5];
    v17 = (std::__shared_weak_count *)v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v6, &v16);
    v12 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_190F40AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F40AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v24);
      _Unwind_Resume(a1);
    }
  }
  else if (v25)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::Impl::ResetConfigOptions@<X0>(E5RT::Ops::PreCompiledComputeOperation::Impl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = (uint64_t *)((char *)this + 128);
  if (*((_QWORD *)this + 17) == *((_QWORD *)this + 16))
  {
    v5 = (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4;
    if (v5)
      std::vector<std::unique_ptr<E5RT::ExecutionStreamOperationConfigOptions>>::__append((_QWORD *)this + 16, v5);
  }
  v6 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 7) != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v6 + v7) + 128))(&v14);
      v9 = *v4;
      v10 = v14;
      v14 = 0;
      v11 = *(_QWORD *)(v9 + 8 * v8);
      *(_QWORD *)(v9 + 8 * v8) = v10;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = v14;
      v14 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      ++v8;
      v6 = *((_QWORD *)this + 6);
      v7 += 16;
    }
    while (v8 < (*((_QWORD *)this + 7) - v6) >> 4);
  }
  return E5RT::ExecutionStreamOperationInternal::ResetConfigOptions(*(_QWORD *)this, a2);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::Impl::SetConfigOptions(E5RT::Ops::PreCompiledComputeOperation::Impl *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  E5RT::ExecutionStreamOperationConfigOptions *v10;
  uint64_t v11;
  E5RT::ExecutionStreamOperationConfigOptions *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *exception;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _BYTE v25[8];
  E5RT::ExecutionStreamOperationConfigOptions *v26[3];

  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v24, "ConfigOptions provided is null.");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(exception, v26, v25);
  }
  E5RT::Ops::PreCompiledComputeOperation::Impl::ResetConfigOptions(a1, &v23);
  v4 = v23;
  v23 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)a1 + 6);
  if (*((_QWORD *)a1 + 7) != v5)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)a1 + 16);
      v9 = *(_QWORD *)(v8 + 8 * v7);
      if (!v9)
      {
        E5RT::ExecutionStreamOperationConfigOptions::Create(v26);
        v10 = v26[0];
        v26[0] = 0;
        v11 = *(_QWORD *)(v8 + 8 * v7);
        *(_QWORD *)(v8 + 8 * v7) = v10;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v12 = v26[0];
        v26[0] = 0;
        if (v12)
          (*(void (**)(E5RT::ExecutionStreamOperationConfigOptions *))(*(_QWORD *)v12 + 8))(v12);
        v9 = *(_QWORD *)(v8 + 8 * v7);
      }
      E5RT::ExecutionStreamOperationConfigOptions::operator=(v9, *a2);
      v13 = *(_QWORD *)(v5 + v6);
      v14 = *(_QWORD *)(v8 + 8 * v7);
      *(_QWORD *)(v8 + 8 * v7) = 0;
      v22 = v14;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 136))(v13, &v22);
      v15 = v22;
      v22 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v16 = *(_QWORD *)(v8 + 8 * v7);
      *(_QWORD *)(v8 + 8 * v7) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      ++v7;
      v5 = *((_QWORD *)a1 + 6);
      v6 += 16;
    }
    while (v7 < (*((_QWORD *)a1 + 7) - v5) >> 4);
  }
  v17 = *(_QWORD *)a1;
  v18 = *a2;
  *a2 = 0;
  v21 = v18;
  E5RT::ExecutionStreamOperationInternal::SetConfigOptions(v17, &v21);
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190F40E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190F40EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v21);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::BindDependentAsyncEventsImpl(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t DependentAsyncEvents;
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  E5RT::ExecutionStreamOperationInternal *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15[2];
  void *__p[2];
  int v17;

  DependentAsyncEvents = E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*this);
  if (*(_QWORD *)(DependentAsyncEvents + 24))
  {
    std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::unordered_set((uint64_t)v15, DependentAsyncEvents);
    (*(void (**)(E5RT::ExecutionStreamOperationInternal *, void **))(*(_QWORD *)this[13] + 48))(this[13], v15);
    v3 = __p[0];
    if (__p[0])
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
        v5 = (std::__shared_weak_count *)v4[3];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        operator delete(v4);
      }
      while (v3);
    }
  }
  else
  {
    v8 = this[13];
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)__p = 0u;
    v17 = 1065353216;
    (*(void (**)(E5RT::ExecutionStreamOperationInternal *, void **))(*(_QWORD *)v8 + 48))(v8, v15);
    v9 = __p[0];
    if (__p[0])
    {
      do
      {
        v11 = v9;
        v9 = (_QWORD *)*v9;
        v12 = (std::__shared_weak_count *)v11[3];
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        operator delete(v11);
      }
      while (v9);
    }
  }
  v10 = v15[0];
  v15[0] = 0;
  if (v10)
    operator delete(v10);
}

void sub_190F41064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190F41078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(E5RT::Ops::PreCompiledComputeOperation::Impl *this)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t HasInternalCompletionEventBound;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*(_QWORD *)this, &v20);
  v2 = *((_QWORD *)this + 14);
  if (v20)
  {
    v18 = v20;
    v19 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    HasInternalCompletionEventBound = E5RT::ExecutionStreamOperationInternal::HasInternalCompletionEventBound(*(E5RT::ExecutionStreamOperationInternal **)this);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v2 + 64))(v2, &v18, HasInternalCompletionEventBound);
    v6 = v19;
    if (!v19)
      goto LABEL_16;
    v7 = (unint64_t *)&v19->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  else
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    v16 = *((_QWORD *)this + 11);
    v17 = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v2 + 64))(v2, &v16, 1);
    v6 = v17;
    if (!v17)
      goto LABEL_16;
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v12);
    while (__stlxr(v8 - 1, v12));
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v13 = v21;
    if (!v21)
      return;
    goto LABEL_17;
  }
LABEL_16:
  v13 = v21;
  if (!v21)
    return;
LABEL_17:
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_190F411EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_190F41208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::SerializeInferenceFrameDataPerSegment(uint64_t a1, uint64_t a2, const void **a3, int a4)
{
  E5RT::ExecutionStreamOperationInternal **v4;
  uint64_t OpName;
  __int128 v8;
  int v9;
  size_t v10;
  int v11;
  size_t size;
  unint64_t v13;
  std::string *p_dst;
  const void *v15;
  char *v16;
  std::string *v17;
  std::string *v18;
  std::string::value_type *v19;
  std::string::size_type v20;
  int v21;
  E5RT::ExecutionStreamOperationInternal *v22;
  uint64_t v23;
  uint64_t v24;
  E5RT::ExecutionStreamOperationInternal **v25;
  std::string v27;
  std::string v28;
  std::string __dst;
  _DWORD v30[2];
  std::string v31;

  v4 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 48);
  v25 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 56);
  if (v4 != v25)
  {
    while (1)
    {
      OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(*v4);
      if (*(char *)(OpName + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)OpName, *(_QWORD *)(OpName + 8));
      }
      else
      {
        v8 = *(_OWORD *)OpName;
        v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(OpName + 16);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v8;
      }
      v9 = *((char *)a3 + 23);
      if (v9 >= 0)
        v10 = *((unsigned __int8 *)a3 + 23);
      else
        v10 = (size_t)a3[1];
      v11 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      else
        size = v31.__r_.__value_.__l.__size_;
      v13 = size + v10;
      if (size + v10 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v13 <= 0x16)
        break;
      v23 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v23 = v13 | 7;
      v24 = v23 + 1;
      p_dst = (std::string *)operator new(v23 + 1);
      __dst.__r_.__value_.__l.__size_ = size + v10;
      __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (v10)
        goto LABEL_16;
LABEL_20:
      v16 = (char *)p_dst + v10;
      if (size)
      {
        if (v11 >= 0)
          v17 = &v31;
        else
          v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
        memmove(v16, v17, size);
      }
      v16[size] = 0;
      v18 = std::string::append(&__dst, "-");
      v19 = (std::string::value_type *)v18->__r_.__value_.__r.__words[0];
      v20 = v18->__r_.__value_.__l.__size_;
      v30[0] = v18->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v30 + 3) = *(_DWORD *)((char *)&v18->__r_.__value_.__r.__words[2] + 3);
      v21 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v22 = *v4;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_27:
          v28 = *(std::string *)a2;
          goto LABEL_34;
        }
      }
      else
      {
        v22 = *v4;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          goto LABEL_27;
      }
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_34:
      if (v21 < 0)
      {
        std::string::__init_copy_ctor_external(&v27, v19, v20);
      }
      else
      {
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        v27.__r_.__value_.__l.__size_ = v20;
        LODWORD(v27.__r_.__value_.__r.__words[2]) = v30[0];
        *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v30 + 3);
        *((_BYTE *)&v27.__r_.__value_.__s + 23) = v21;
      }
      E5RT::ExecutionStreamOperationInternal::SerializeInferenceFrameData((uint64_t)v22, (const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)&v27, a4);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v27.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_39:
          if ((v21 & 0x80000000) == 0)
            goto LABEL_40;
          goto LABEL_44;
        }
      }
      else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_39;
      }
      operator delete(v28.__r_.__value_.__l.__data_);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_40:
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_45;
        goto LABEL_3;
      }
LABEL_44:
      operator delete(v19);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
LABEL_45:
        operator delete(v31.__r_.__value_.__l.__data_);
LABEL_3:
      v4 += 2;
      if (v4 == v25)
        return;
    }
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + v10;
    if (!v10)
      goto LABEL_20;
LABEL_16:
    if (v9 >= 0)
      v15 = a3;
    else
      v15 = *a3;
    memmove(p_dst, v15, v10);
    goto LABEL_20;
  }
}

void sub_190F414C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  int v38;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v38 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((v38 & 0x80000000) == 0)
  {
LABEL_6:
    if (a37 < 0)
      operator delete(a32);
    _Unwind_Resume(exception_object);
  }
  operator delete(v37);
  goto LABEL_6;
}

E5RT::ExecutionStreamOperationInternal *E5RT::Ops::PreCompiledComputeOperation::PreCompiledComputeOperation(E5RT::ExecutionStreamOperationInternal *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  E5RT::Ops::PreCompiledComputeOperation::Impl **v21;
  E5RT::Ops::PreCompiledComputeOperation::Impl **v22;
  NSObject *v23;
  os_signpost_id_t v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void (**v29)(_QWORD);
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  E5RT::Ops::PreCompiledComputeOperation::Impl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD v39[7];
  std::__shared_weak_count *v40;
  void *__p[2];
  char v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;

  v21 = (E5RT::Ops::PreCompiledComputeOperation::Impl **)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a3, a4, a5);
  *v21 = (E5RT::Ops::PreCompiledComputeOperation::Impl *)&off_1E2D5BCF0;
  v22 = v21 + 37;
  v21[37] = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)v21);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  v43 = 0x2B23820000000000;
  v44 = 0u;
  v45 = 0u;
  kdebug_trace();
  v42 = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = os_signpost_id_generate(v23);

  if (v42 < 0)
    operator delete(__p[0]);
  v42 = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v25 = objc_claimAutoreleasedReturnValue();
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if (v24 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  else if (v24 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_9;
  }
  if (os_signpost_enabled(v25))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v25, OS_SIGNPOST_INTERVAL_BEGIN, v24, "PreCompiledOpCreate", (const char *)&unk_191C083FD, (uint8_t *)__p, 2u);
  }
LABEL_9:

  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3321888768;
  v39[2] = sub_190F41930;
  v39[3] = &__block_descriptor_64_ea8_48c46_ZTSNSt3__110shared_ptrIKN4E5RT10E5FunctionEEE_e5_v8__0l;
  v39[4] = v24;
  v39[5] = a2;
  v26 = (std::__shared_weak_count *)a6[1];
  v39[6] = *a6;
  v40 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  v29 = (void (**)(_QWORD))MEMORY[0x19401D648](v39);
  v30 = operator new();
  *(_OWORD *)__p = *(_OWORD *)a6;
  *a6 = 0;
  a6[1] = 0;
  E5RT::Ops::PreCompiledComputeOperation::Impl::Impl(v30, (uint64_t)a1, (uint64_t)__p, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  v31 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v32 = (unint64_t *)((char *)__p[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *v22;
  *v22 = (E5RT::Ops::PreCompiledComputeOperation::Impl *)v30;
  if (v34)
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::~Impl(v34);
    MEMORY[0x19401CD90]();
  }
  *((_QWORD *)a1 + 29) |= 7uLL;
  v29[2](v29);

  v35 = v40;
  if (v40)
  {
    v36 = (unint64_t *)&v40->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (E5RT::g_trace_analysis_level >= v43)
    kdebug_trace();
  return a1;
}

void sub_190F41878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  E5RT::ExecutionStreamOperationInternal *v27;
  E5RT::Ops::PreCompiledComputeOperation::Impl **v28;
  void *v29;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a27);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::PreCompiledComputeOperation::Impl>>::~propagate_const(v28);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v27);
  _Unwind_Resume(a1);
}

void sub_190F4190C(_Unwind_Exception *a1)
{
  E5RT::ExecutionStreamOperationInternal *v1;
  E5RT::Ops::PreCompiledComputeOperation::Impl **v2;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::PreCompiledComputeOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

void sub_190F41930(uint64_t a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE __p[12];
  __int16 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v2 = objc_claimAutoreleasedReturnValue();
  if (v10 < 0)
  {
    operator delete(*(void **)__p);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_12;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_12;
  }
  if (os_signpost_enabled(v2))
  {
    v4 = *(uint64_t ***)(a1 + 40);
    if (*((char *)v4 + 23) < 0)
      v4 = (uint64_t **)*v4;
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
    if (*(char *)(v5 + 23) >= 0)
      v6 = v5;
    else
      v6 = *(_QWORD *)v5;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v4;
    v8 = 2080;
    v9 = v6;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v2, OS_SIGNPOST_INTERVAL_END, v3, "PreCompiledOpCreate", "OperationName=%{signpost.description:attribute}s E5Function=%{signpost.description:attribute}s", __p, 0x16u);
  }
LABEL_12:

}

void sub_190F41A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

E5RT::Ops::PreCompiledComputeOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::PreCompiledComputeOperation::Impl>>::~propagate_const(E5RT::Ops::PreCompiledComputeOperation::Impl **a1)
{
  E5RT::Ops::PreCompiledComputeOperation::Impl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void E5RT::Ops::PreCompiledComputeOperation::~PreCompiledComputeOperation(E5RT::Ops::PreCompiledComputeOperation *this)
{
  E5RT::Ops::PreCompiledComputeOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5BCF0;
  v2 = (E5RT::Ops::PreCompiledComputeOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::PreCompiledComputeOperation::Impl *v2;

  *(_QWORD *)this = &off_1E2D5BCF0;
  v2 = (E5RT::Ops::PreCompiledComputeOperation::Impl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::~Impl(v2);
    MEMORY[0x19401CD90]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

void sub_190F41B9C(uint64_t a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  void *__p[2];
  char v5;

  v5 = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v2 = objc_claimAutoreleasedReturnValue();
  if (v5 < 0)
  {
    operator delete(__p[0]);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_3:

      return;
    }
  }
  if (!os_signpost_enabled(v2))
    goto LABEL_3;
  LOWORD(__p[0]) = 0;
  _os_signpost_emit_with_name_impl(&dword_190DAF000, v2, OS_SIGNPOST_INTERVAL_END, v3, "PreCompiledOpPrepareOpForEncode", (const char *)&unk_191C083FD, (uint8_t *)__p, 2u);

}

void sub_190F41C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::ExecuteSync(E5RT::Ops::PreCompiledComputeOperation *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  v2 = *((_QWORD *)this + 37);
  v3 = *(_QWORD **)(v2 + 48);
  for (i = *(_QWORD **)(v2 + 56); v3 != i; v3 += 2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 104))(*v3);
  return kdebug_trace();
}

void sub_190F41D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::CreateResourceSharingPreCompiledComputeOps(E5RT::PrecompiledComputeOpCreateOptions ***a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  E5RT::PrecompiledComputeOpCreateOptions **v3;
  E5RT::PrecompiledComputeOpCreateOptions **v4;
  const std::string *LibraryPath;
  const std::string *v6;
  size_t v7;
  int v8;
  size_t size;
  _BYTE *v10;
  size_t v11;
  E5RT::ProgramFunctionPriv *ProgramFunction;
  uint64_t FunctionName;
  const void **v15;
  _QWORD *v16;
  int v17;
  size_t v18;
  const void *v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  BOOL v25;
  int v26;
  _BOOL4 v27;
  uint64_t *v28;
  E5RT::PrecompiledComputeOpCreateOptions **v29;
  uint64_t v30;
  _QWORD **v31;
  const void **v32;
  const void **v33;
  char *v34;
  __int128 v35;
  uint64_t MutableMILWeightPaths;
  uint64_t *v37;
  char *v38;
  char **v39;
  char **v40;
  size_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;
  size_t v47;
  char *v48;
  size_t v49;
  int v50;
  _BOOL4 v51;
  _BOOL4 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_size;
  unint64_t v72;
  uint64_t SharedResourceManager;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  char v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 *v83;
  _OWORD *v84;
  void *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  char *v95;
  void *v96;
  int v97;
  size_t v98;
  const void *v99;
  int v100;
  size_t v101;
  const void *v102;
  size_t v103;
  int v104;
  BOOL v105;
  int v106;
  _BOOL4 v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  int v119;
  size_t v120;
  unint64_t v121;
  std::string *p_dst;
  uint64_t v123;
  uint64_t v124;
  const void *v125;
  const std::string::value_type *p_p;
  std::string::size_type v127;
  std::string *v128;
  std::string::size_type v129;
  char v130;
  std::__shared_weak_count *v131;
  const void *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  const void **v144;
  const void **v145;
  E5RT::Ops::PreCompiledComputeOperation *v146;
  void **v147;
  _QWORD *v148;
  uint64_t v149;
  std::string *v150;
  std::string *v151;
  void *v152;
  void **v153;
  void **v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  char *v159;
  char *v160;
  void *v161;
  void *v162;
  void *v163;
  void *exception;
  E5RT::PrecompiledComputeOpCreateOptions **v166;
  void *v167;
  const void *v169;
  std::__shared_weak_count *v170;
  std::string __dst;
  void *__p;
  std::__shared_weak_count *v173;
  unsigned __int8 v174;
  const void *v175;
  std::__shared_weak_count *v176;
  _BYTE __str[40];
  int64_t v178;
  void *v179;
  std::string *v180;
  unint64_t v181;
  _BYTE v182[32];
  int v183;
  void *v184[2];
  __int128 v185;
  int v186;
  _BYTE v187[32];
  int v188;
  char **v189;
  char *v190;
  uint64_t v191;
  _QWORD v192[5];

  v2 = a2;
  v192[2] = *MEMORY[0x1E0C80C00];
  v187[23] = 0;
  v187[0] = 0;
  memset(__str, 0, 32);
  *(_DWORD *)&__str[32] = 1065353216;
  v184[1] = 0;
  *(_QWORD *)&v185 = 0;
  v184[0] = &v184[1];
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    std::__tree<std::string>::destroy((uint64_t)v184, 0);
    if ((v187[23] & 0x80000000) == 0)
      goto LABEL_49;
  }
  else
  {
    do
    {
      LibraryPath = (const std::string *)E5RT::PrecompiledComputeOpCreateOptions::GetLibraryPath(*v3);
      v6 = LibraryPath;
      if (v187[23] >= 0)
        v7 = v187[23];
      else
        v7 = *(_QWORD *)&v187[8];
      if (v7)
      {
        v8 = SHIBYTE(LibraryPath->__r_.__value_.__r.__words[2]);
        if (v8 >= 0)
          size = HIBYTE(LibraryPath->__r_.__value_.__r.__words[2]);
        else
          size = LibraryPath->__r_.__value_.__l.__size_;
        if (v8 < 0)
          LibraryPath = (const std::string *)LibraryPath->__r_.__value_.__r.__words[0];
        if (v187[23] >= 0)
          v10 = v187;
        else
          v10 = *(_BYTE **)v187;
        if (v7 >= size)
          v11 = size;
        else
          v11 = v7;
        if (memcmp(LibraryPath, v10, v11) || v7 != size)
        {
          std::string::basic_string[abi:ne180100]<0>(v182, "All multipleCreateOptions must originate from the same E5Bundle path.");
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v189, "ValidateCreateOptionsForCreateResourceSharingPreCompiledComputeOps");
          E5RT::Status::Status(&v179, 1, v182);
          E5RT::E5RTError::E5RTError(exception, &v189, &v179);
        }
      }
      std::string::operator=((std::string *)v187, v6);
      ProgramFunction = (E5RT::ProgramFunctionPriv *)E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(*v3);
      FunctionName = E5RT::ProgramFunctionPriv::GetFunctionName(ProgramFunction);
      v15 = (const void **)FunctionName;
      v16 = v184[1];
      if (v184[1])
      {
        v17 = *(char *)(FunctionName + 23);
        if (v17 >= 0)
          v18 = *(unsigned __int8 *)(FunctionName + 23);
        else
          v18 = *(_QWORD *)(FunctionName + 8);
        if (v17 >= 0)
          v19 = (const void *)FunctionName;
        else
          v19 = *(const void **)FunctionName;
        do
        {
          v20 = *((char *)v16 + 55);
          if (v20 >= 0)
            v21 = *((unsigned __int8 *)v16 + 55);
          else
            v21 = v16[5];
          if (v20 >= 0)
            v22 = v16 + 4;
          else
            v22 = (const void *)v16[4];
          if (v21 >= v18)
            v23 = v18;
          else
            v23 = v21;
          v24 = memcmp(v19, v22, v23);
          v25 = v18 < v21;
          if (v24)
            v25 = v24 < 0;
          if (!v25)
          {
            v26 = memcmp(v22, v19, v23);
            v27 = v21 < v18;
            if (v26)
              v27 = v26 < 0;
            if (!v27)
            {
              std::string::basic_string[abi:ne180100]<0>(v182, "Each createOptions must have a unique E5 function.");
              v163 = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(&v189, "ValidateCreateOptionsForCreateResourceSharingPreCompiledComputeOps");
              E5RT::Status::Status(&v179, 1, v182);
              E5RT::E5RTError::E5RTError(v163, &v189, &v179);
            }
            ++v16;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v184, v15, (uint64_t)v15);
      v3 += 2;
      v2 = a2;
    }
    while (v3 != v4);
    std::__tree<std::string>::destroy((uint64_t)v184, (char *)v184[1]);
    if ((v187[23] & 0x80000000) == 0)
      goto LABEL_49;
  }
  operator delete(*(void **)v187);
LABEL_49:
  memset(v187, 0, sizeof(v187));
  v188 = 1065353216;
  v190 = 0;
  v191 = 0;
  v189 = &v190;
  *(_OWORD *)v184 = 0u;
  v185 = 0u;
  v186 = 1065353216;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  v29 = *a1;
  v166 = a1[1];
  if (*a1 != v166)
  {
    do
    {
      v30 = E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(*v29);
      E5RT::ProgramFunctionPriv::GetE5Function(v30, &v179);
      v31 = (_QWORD **)(*(uint64_t (**)(void *))(*(_QWORD *)v179 + 32))(v179);
      v28 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v31 + 16))(**v31);
      v32 = (const void **)*v28;
      v33 = (const void **)v28[1];
      while (v32 != v33)
      {
        v28 = (uint64_t *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v32 + 16))(*v32);
        if ((_DWORD)v28 != 1)
          goto LABEL_53;
        E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(*v32, &__p);
        v34 = (char *)__p;
        if (*((char *)__p + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)__p, *((_QWORD *)__p + 1));
          v34 = (char *)__p;
          if ((*((char *)__p + 47) & 0x80000000) == 0)
          {
LABEL_58:
            *(_OWORD *)v182 = *(_OWORD *)(v34 + 24);
            *(_QWORD *)&v182[16] = *((_QWORD *)v34 + 5);
            goto LABEL_61;
          }
        }
        else
        {
          v35 = *(_OWORD *)__p;
          *(_QWORD *)&__str[16] = *((_QWORD *)__p + 2);
          *(_OWORD *)__str = v35;
          if ((*((char *)__p + 47) & 0x80000000) == 0)
            goto LABEL_58;
        }
        std::string::__init_copy_ctor_external((std::string *)v182, *((const std::string::value_type **)v34 + 3), *((_QWORD *)v34 + 4));
LABEL_61:
        MutableMILWeightPaths = E5RT::PrecompiledComputeOpCreateOptions::GetMutableMILWeightPaths(*v29);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v187, (uint64_t)__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v182;
        v28 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v37 + 5), (uint64_t)v182, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
        if (v28 + 5 != (uint64_t *)MutableMILWeightPaths)
        {
          *((_DWORD *)v28 + 18) = *(_DWORD *)(MutableMILWeightPaths + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v28 + 5, *(uint64_t **)(MutableMILWeightPaths + 16), 0);
        }
        if (*(_QWORD *)(MutableMILWeightPaths + 24))
        {
          v38 = v190;
          v39 = &v190;
          v40 = &v190;
          if (v190)
          {
            if (__str[23] >= 0)
              v41 = __str[23];
            else
              v41 = *(_QWORD *)&__str[8];
            if (__str[23] >= 0)
              v42 = __str;
            else
              v42 = *(_BYTE **)__str;
            while (1)
            {
              while (1)
              {
                v39 = (char **)v38;
                v45 = (char *)*((_QWORD *)v38 + 4);
                v43 = v38 + 32;
                v44 = v45;
                v46 = v43[23];
                if (v46 >= 0)
                  v47 = v43[23];
                else
                  v47 = *((_QWORD *)v43 + 1);
                if (v46 >= 0)
                  v48 = v43;
                else
                  v48 = v44;
                if (v47 >= v41)
                  v49 = v41;
                else
                  v49 = v47;
                v50 = memcmp(v42, v48, v49);
                v51 = v41 < v47;
                if (v50)
                  v51 = v50 < 0;
                if (!v51)
                  break;
                v38 = *v39;
                v40 = v39;
                if (!*v39)
                  goto LABEL_89;
              }
              v28 = (uint64_t *)memcmp(v48, v42, v49);
              v52 = v47 < v41;
              if ((_DWORD)v28)
                v52 = (int)v28 < 0;
              if (!v52)
                break;
              v38 = v39[1];
              if (!v38)
              {
                v40 = v39 + 1;
                goto LABEL_89;
              }
            }
          }
          else
          {
LABEL_89:
            v53 = (char *)operator new(0x38uLL);
            v28 = (uint64_t *)(v53 + 32);
            if ((__str[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v28, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
            }
            else
            {
              *(_OWORD *)v28 = *(_OWORD *)__str;
              *((_QWORD *)v53 + 6) = *(_QWORD *)&__str[16];
            }
            *(_QWORD *)v53 = 0;
            *((_QWORD *)v53 + 1) = 0;
            *((_QWORD *)v53 + 2) = v39;
            *v40 = v53;
            if (*v189)
            {
              v189 = (char **)*v189;
              v53 = *v40;
            }
            v54 = v190;
            v53[24] = v53 == v190;
            if (v53 != v54)
            {
              do
              {
                v55 = *((_QWORD *)v53 + 2);
                if (*(_BYTE *)(v55 + 24))
                  break;
                v56 = *(char **)(v55 + 16);
                v57 = *(_QWORD *)v56;
                if (*(_QWORD *)v56 == v55)
                {
                  v60 = *((_QWORD *)v56 + 1);
                  if (!v60 || (v61 = *(unsigned __int8 *)(v60 + 24), v58 = (_BYTE *)(v60 + 24), v61))
                  {
                    if (*(char **)v55 == v53)
                    {
                      *(_BYTE *)(v55 + 24) = 1;
                      v56[24] = 0;
                      v64 = *(_QWORD *)(v55 + 8);
                      *(_QWORD *)v56 = v64;
                      if (v64)
                        goto LABEL_108;
                    }
                    else
                    {
                      v62 = *(uint64_t **)(v55 + 8);
                      v63 = *v62;
                      *(_QWORD *)(v55 + 8) = *v62;
                      if (v63)
                      {
                        *(_QWORD *)(v63 + 16) = v55;
                        v56 = *(char **)(v55 + 16);
                      }
                      v62[2] = (uint64_t)v56;
                      *(_QWORD *)(*(_QWORD *)(v55 + 16) + 8 * (**(_QWORD **)(v55 + 16) != v55)) = v62;
                      *v62 = v55;
                      *(_QWORD *)(v55 + 16) = v62;
                      v56 = (char *)v62[2];
                      v55 = *(_QWORD *)v56;
                      *((_BYTE *)v62 + 24) = 1;
                      v56[24] = 0;
                      v64 = *(_QWORD *)(v55 + 8);
                      *(_QWORD *)v56 = v64;
                      if (v64)
LABEL_108:
                        *(_QWORD *)(v64 + 16) = v56;
                    }
                    *(_QWORD *)(v55 + 16) = *((_QWORD *)v56 + 2);
                    *(_QWORD *)(*((_QWORD *)v56 + 2) + 8 * (**((_QWORD **)v56 + 2) != (_QWORD)v56)) = v55;
                    *(_QWORD *)(v55 + 8) = v56;
LABEL_114:
                    *((_QWORD *)v56 + 2) = v55;
                    break;
                  }
                }
                else if (!v57 || (v59 = *(unsigned __int8 *)(v57 + 24), v58 = (_BYTE *)(v57 + 24), v59))
                {
                  if (*(char **)v55 == v53)
                  {
                    v69 = *((_QWORD *)v53 + 1);
                    *(_QWORD *)v55 = v69;
                    if (v69)
                    {
                      *(_QWORD *)(v69 + 16) = v55;
                      v56 = *(char **)(v55 + 16);
                    }
                    *((_QWORD *)v53 + 2) = v56;
                    *(_QWORD *)(*(_QWORD *)(v55 + 16) + 8 * (**(_QWORD **)(v55 + 16) != v55)) = v53;
                    *((_QWORD *)v53 + 1) = v55;
                    *(_QWORD *)(v55 + 16) = v53;
                    v56 = (char *)*((_QWORD *)v53 + 2);
                    v53[24] = 1;
                    v56[24] = 0;
                    v55 = *((_QWORD *)v56 + 1);
                    v65 = *(char **)v55;
                    *((_QWORD *)v56 + 1) = *(_QWORD *)v55;
                    if (v65)
LABEL_112:
                      *((_QWORD *)v65 + 2) = v56;
                  }
                  else
                  {
                    *(_BYTE *)(v55 + 24) = 1;
                    v56[24] = 0;
                    v55 = *((_QWORD *)v56 + 1);
                    v65 = *(char **)v55;
                    *((_QWORD *)v56 + 1) = *(_QWORD *)v55;
                    if (v65)
                      goto LABEL_112;
                  }
                  *(_QWORD *)(v55 + 16) = *((_QWORD *)v56 + 2);
                  *(_QWORD *)(*((_QWORD *)v56 + 2) + 8 * (**((_QWORD **)v56 + 2) != (_QWORD)v56)) = v55;
                  *(_QWORD *)v55 = v56;
                  goto LABEL_114;
                }
                *(_BYTE *)(v55 + 24) = 1;
                v53 = v56;
                v56[24] = v56 == v54;
                *v58 = 1;
              }
              while (v56 != v54);
            }
            ++v191;
          }
        }
        if ((v182[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v182);
          v2 = a2;
          if ((__str[23] & 0x80000000) == 0)
          {
LABEL_118:
            v66 = v173;
            if (!v173)
              goto LABEL_53;
            goto LABEL_122;
          }
        }
        else
        {
          v2 = a2;
          if ((__str[23] & 0x80000000) == 0)
            goto LABEL_118;
        }
        operator delete(*(void **)__str);
        v66 = v173;
        if (!v173)
          goto LABEL_53;
LABEL_122:
        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(p_shared_owners);
        while (__stlxr(v68 - 1, p_shared_owners));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
LABEL_53:
        v32 += 2;
      }
      v70 = (std::__shared_weak_count *)v180;
      if (v180)
      {
        p_size = &v180->__r_.__value_.__l.__size_;
        do
          v72 = __ldaxr(p_size);
        while (__stlxr(v72 - 1, p_size));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v29 += 2;
    }
    while (v29 != v166);
  }
  SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager((E5RT::SharedResourceManager *)v28);
  memset(v182, 0, sizeof(v182));
  v183 = 1065353216;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v74 = *(_QWORD **)&v187[16];
  if (!*(_QWORD *)&v187[16])
    goto LABEL_262;
  v75 = SharedResourceManager;
  do
  {
    v76 = (_QWORD *)v74[7];
    if (v76)
    {
      while (1)
      {
        v77 = (uint64_t *)v76[7];
        if (v77)
          break;
LABEL_142:
        v76 = (_QWORD *)*v76;
        if (!v76)
          goto LABEL_139;
      }
      while (1)
      {
        if (*((char *)v77 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, (const std::string::value_type *)v77[2], v77[3]);
        }
        else
        {
          *(_OWORD *)__str = *((_OWORD *)v77 + 1);
          *(_QWORD *)&__str[16] = v77[4];
        }
        if (*((char *)v77 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__str[24], (const std::string::value_type *)v77[5], v77[6]);
        }
        else
        {
          *(_OWORD *)&__str[24] = *(_OWORD *)(v77 + 5);
          v178 = v77[7];
        }
        v78 = HIBYTE(v178);
        v79 = HIBYTE(v178);
        if (v178 < 0)
          v78 = *(_QWORD *)&__str[32];
        if (v78)
        {
          v80 = v180;
          if ((unint64_t)v180 >= v181)
          {
            v82 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v179, (uint64_t)&__str[24]);
          }
          else
          {
            if (SHIBYTE(v178) < 0)
            {
              std::string::__init_copy_ctor_external(v180, *(const std::string::value_type **)&__str[24], *(std::string::size_type *)&__str[32]);
            }
            else
            {
              v81 = *(_OWORD *)&__str[24];
              v180->__r_.__value_.__r.__words[2] = v178;
              *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
            }
            v82 = v80 + 1;
          }
          v180 = v82;
          v79 = HIBYTE(v178);
        }
        if (v79 < 0)
        {
          operator delete(*(void **)&__str[24]);
          if ((__str[23] & 0x80000000) == 0)
            goto LABEL_146;
LABEL_165:
          operator delete(*(void **)__str);
          v77 = (uint64_t *)*v77;
          if (!v77)
            goto LABEL_142;
        }
        else
        {
          if ((__str[23] & 0x80000000) != 0)
            goto LABEL_165;
LABEL_146:
          v77 = (uint64_t *)*v77;
          if (!v77)
            goto LABEL_142;
        }
      }
    }
LABEL_139:
    v74 = (_QWORD *)*v74;
  }
  while (v74);
  v83 = *(__int128 **)&v187[16];
  if (*(_QWORD *)&v187[16])
  {
    do
    {
      v84 = v83 + 1;
      __str[23] = 0;
      __str[0] = 0;
      E5RT::SharedResourceManager::GetOrCreateResource(v75, v83 + 1, 0, (uint64_t *)__str, 0, (uint64_t *)&v175);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(v175);
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((char *)v83 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *((const std::string::value_type **)v83 + 2), *((_QWORD *)v83 + 3));
      }
      else
      {
        *(_OWORD *)__str = *v84;
        *(_QWORD *)&__str[16] = *((_QWORD *)v83 + 4);
      }
      __p = __str;
      v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v182, (uint64_t)__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      v88 = (uint64_t)v175;
      v87 = (uint64_t)v176;
      if (v176)
      {
        v89 = (unint64_t *)&v176->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v91 = v75;
      v92 = (std::__shared_weak_count *)v86[6];
      v86[5] = v88;
      v86[6] = v87;
      if (!v92)
        goto LABEL_182;
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
        v95 = v190;
        if (!v190)
          goto LABEL_208;
      }
      else
      {
LABEL_182:
        v95 = v190;
        if (!v190)
          goto LABEL_208;
      }
      v96 = v85;
      v97 = *((char *)v83 + 39);
      if (v97 >= 0)
        v98 = *((unsigned __int8 *)v83 + 39);
      else
        v98 = *((_QWORD *)v83 + 3);
      if (v97 >= 0)
        v99 = v83 + 1;
      else
        v99 = (const void *)*((_QWORD *)v83 + 2);
      while (1)
      {
        v100 = v95[55];
        if (v100 >= 0)
          v101 = v95[55];
        else
          v101 = *((_QWORD *)v95 + 5);
        if (v100 >= 0)
          v102 = v95 + 32;
        else
          v102 = (const void *)*((_QWORD *)v95 + 4);
        if (v101 >= v98)
          v103 = v98;
        else
          v103 = v101;
        v104 = memcmp(v99, v102, v103);
        v105 = v98 < v101;
        if (v104)
          v105 = v104 < 0;
        if (v105)
          goto LABEL_189;
        v106 = memcmp(v102, v99, v103);
        v107 = v101 < v98;
        if (v106)
          v107 = v106 < 0;
        if (!v107)
          break;
        v95 += 8;
LABEL_189:
        v95 = *(char **)v95;
        if (!v95)
        {
          v2 = a2;
          v75 = v91;
          v85 = v96;
          goto LABEL_208;
        }
      }
      v117 = v96;
      v2 = a2;
      E5Common::GetANEFAdaptedModel(v96, (uint64_t)v83 + 40);
      v118 = objc_claimAutoreleasedReturnValue();
      v75 = v91;

      v167 = (void *)v118;
      E5RT::SharedResourceManager::GenerateConcatenatedSortedURIs((uint64_t *)&v179, (uint64_t)&__p);
      v119 = *((char *)v83 + 39);
      if (v119 >= 0)
        v120 = *((unsigned __int8 *)v83 + 39);
      else
        v120 = *((_QWORD *)v83 + 3);
      v121 = v120 + 1;
      if (v120 + 1 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v121 >= 0x17)
      {
        v123 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v121 | 7) != 0x17)
          v123 = v121 | 7;
        v124 = v123 + 1;
        p_dst = (std::string *)operator new(v123 + 1);
        __dst.__r_.__value_.__l.__size_ = v120 + 1;
        __dst.__r_.__value_.__r.__words[2] = v124 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        v2 = a2;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v120 + 1;
        if (!v120)
          goto LABEL_237;
      }
      if (v119 >= 0)
        v125 = v83 + 1;
      else
        v125 = *(const void **)v84;
      memmove(p_dst, v125, v120);
LABEL_237:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v120) = 58;
      if ((v174 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v174 & 0x80u) == 0)
        v127 = v174;
      else
        v127 = (std::string::size_type)v173;
      v128 = std::string::append(&__dst, p_p, v127);
      v129 = v128->__r_.__value_.__r.__words[0];
      v192[0] = v128->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v192 + 7) = *(std::string::size_type *)((char *)&v128->__r_.__value_.__r.__words[1] + 7);
      v130 = HIBYTE(v128->__r_.__value_.__r.__words[2]);
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      *(_QWORD *)__str = v129;
      *(_QWORD *)&__str[8] = v192[0];
      *(_QWORD *)&__str[15] = *(_QWORD *)((char *)v192 + 7);
      __str[23] = v130;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v85 = v167;
        if (((char)v174 & 0x80000000) == 0)
          goto LABEL_247;
LABEL_261:
        operator delete(__p);
        goto LABEL_247;
      }
      v85 = v167;
      if ((char)v174 < 0)
        goto LABEL_261;
LABEL_247:
      v131 = (std::__shared_weak_count *)operator new(0x48uLL);
      v131->__shared_weak_owners_ = 0;
      v131->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6070;
      v131->__shared_owners_ = 0;
      v132 = (const void *)E5RT::SharedResourcePriv<_ANEModel * {__strong}>::SharedResourcePriv((uint64_t)&v131[1], (__int128 *)__str, v85, 0);
      v133 = v176;
      v175 = v132;
      v176 = v131;
      if (v133)
      {
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      __p = __str;
      v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v182, (uint64_t)__str, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      v138 = (uint64_t)v175;
      v137 = (uint64_t)v176;
      if (v176)
      {
        v139 = (unint64_t *)&v176->__shared_owners_;
        do
          v140 = __ldxr(v139);
        while (__stxr(v140 + 1, v139));
      }
      v141 = (std::__shared_weak_count *)v136[6];
      v136[5] = v138;
      v136[6] = v137;
      if (v141)
      {
        v142 = (unint64_t *)&v141->__shared_owners_;
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
LABEL_208:
      v169 = v175;
      v170 = v176;
      if (v176)
      {
        v108 = (unint64_t *)&v176->__shared_owners_;
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      E5RT::SharedResourceManager::AddResource(v75, __str, (uint64_t *)&v169);
      v110 = v170;
      if (v170)
      {
        v111 = (unint64_t *)&v170->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      __p = v83 + 1;
      v113 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v184, (uint64_t)(v83 + 1), (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      std::string::operator=((std::string *)(v113 + 5), (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);

      v114 = v176;
      if (v176)
      {
        v115 = (unint64_t *)&v176->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v83 = *(__int128 **)v83;
    }
    while (v83);
  }
LABEL_262:
  v144 = (const void **)*a1;
  v145 = (const void **)a1[1];
  if (*a1 != (E5RT::PrecompiledComputeOpCreateOptions **)v145)
  {
    do
    {
      if (*v144)
      else
        v146 = 0;
      E5RT::PrecompiledComputeOpCreateOptionsPriv::SetMachoToSharedResourceURI((uint64_t)v146, (uint64_t)v184);
      E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(v146, (E5RT::ExecutionStreamOperationInternal **)&__p);
      *(_QWORD *)__str = __p;
      v147 = (void **)v2[1];
      if ((unint64_t)v147 >= v2[2])
      {
        v148 = std::vector<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>::__push_back_slow_path<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>(v2, (uint64_t *)__str);
      }
      else
      {
        *(_QWORD *)__str = 0;
        *v147 = __p;
        v148 = v147 + 1;
      }
      v2[1] = v148;
      v149 = *(_QWORD *)__str;
      *(_QWORD *)__str = 0;
      if (v149)
        (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
      v144 += 2;
    }
    while (v144 != v145);
  }
  v150 = (std::string *)v179;
  if (v179)
  {
    v151 = v180;
    v152 = v179;
    if (v180 != v179)
    {
      do
      {
        if (SHIBYTE(v151[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151[-1].__r_.__value_.__l.__data_);
        --v151;
      }
      while (v151 != v150);
      v152 = v179;
    }
    v180 = v150;
    operator delete(v152);
  }
  v153 = *(void ***)&v182[16];
  if (*(_QWORD *)&v182[16])
  {
    do
    {
      while (1)
      {
        v154 = (void **)*v153;
        v155 = (std::__shared_weak_count *)v153[6];
        if (v155)
        {
          v156 = (unint64_t *)&v155->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        if (*((char *)v153 + 39) < 0)
          break;
        operator delete(v153);
        v153 = v154;
        if (!v154)
          goto LABEL_291;
      }
      operator delete(v153[2]);
      operator delete(v153);
      v153 = v154;
    }
    while (v154);
  }
LABEL_291:
  v158 = *(void **)v182;
  *(_QWORD *)v182 = 0;
  if (v158)
    operator delete(v158);
  v159 = (char *)v185;
  if ((_QWORD)v185)
  {
    while (1)
    {
      v160 = *(char **)v159;
      if (v159[63] < 0)
      {
        operator delete(*((void **)v159 + 5));
        if ((v159[39] & 0x80000000) == 0)
          goto LABEL_296;
LABEL_299:
        operator delete(*((void **)v159 + 2));
        operator delete(v159);
        v159 = v160;
        if (!v160)
          break;
      }
      else
      {
        if (v159[39] < 0)
          goto LABEL_299;
LABEL_296:
        operator delete(v159);
        v159 = v160;
        if (!v160)
          break;
      }
    }
  }
  v161 = v184[0];
  v184[0] = 0;
  if (v161)
    operator delete(v161);
  std::__tree<std::string>::destroy((uint64_t)&v189, v190);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node((int)v187, *(char **)&v187[16]);
  v162 = *(void **)v187;
  *(_QWORD *)v187 = 0;
  if (v162)
    operator delete(v162);
}

void sub_190F42E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,char *a50)
{
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void *v60;

  v53 = (_QWORD *)*v50;
  if (!*v50)
  {
    v54 = a50;
    if (a50)
      goto LABEL_14;
LABEL_17:
    if (__p)
      operator delete(__p);
    std::__tree<std::string>::destroy(v51 - 144, *(char **)(v51 - 136));
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node(v51 - 192, *(char **)(v51 - 176));
    v60 = *(void **)(v51 - 192);
    *(_QWORD *)(v51 - 192) = 0;
    if (!v60)
      _Unwind_Resume(a1);
    operator delete(v60);
    _Unwind_Resume(a1);
  }
  v55 = (_QWORD *)v50[1];
  v56 = (_QWORD *)*v50;
  if (v55 != v53)
  {
    do
    {
      v58 = *--v55;
      v57 = v58;
      *v55 = 0;
      if (v58)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    }
    while (v55 != v53);
    v56 = (_QWORD *)*v50;
  }
  v50[1] = v53;
  operator delete(v56);
  v54 = a50;
  if (!a50)
    goto LABEL_17;
  while (1)
  {
LABEL_14:
    v59 = *(char **)v54;
    if (v54[63] < 0)
    {
      operator delete(*((void **)v54 + 5));
      if ((v54[39] & 0x80000000) == 0)
        goto LABEL_13;
LABEL_16:
      operator delete(*((void **)v54 + 2));
      operator delete(v54);
      v54 = v59;
      if (!v59)
        goto LABEL_17;
    }
    else
    {
      if (v54[39] < 0)
        goto LABEL_16;
LABEL_13:
      operator delete(v54);
      v54 = v59;
      if (!v59)
        goto LABEL_17;
    }
  }
}

void sub_190F43324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30)
    JUMPOUT(0x190F43124);
  JUMPOUT(0x190F43198);
}

uint64_t std::pair<std::string const,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

char *E5RT::Ops::PreCompiledComputeOperation::GetFunctionName(E5RT::Ops::PreCompiledComputeOperation *this)
{
  char *result;

  result = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 37) + 72) + 16))(*(_QWORD *)(*((_QWORD *)this + 37) + 72));
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::ResetConfigOptions@<X0>(E5RT::Ops::PreCompiledComputeOperation::Impl **this@<X0>, _QWORD *a2@<X8>)
{
  return E5RT::Ops::PreCompiledComputeOperation::Impl::ResetConfigOptions(this[37], a2);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::SetConfigOptions(uint64_t a1, uint64_t *a2)
{
  E5RT::Ops::PreCompiledComputeOperation::Impl *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296);
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  E5RT::Ops::PreCompiledComputeOperation::Impl::SetConfigOptions(v2, &v5);
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

void sub_190F43428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::PreCompiledComputeOperation::BindDependentAsyncEvents(uint64_t a1, uint64_t *a2)
{
  E5RT::ExecutionStreamOperationInternal::BindDependentAsyncEvents(a1, a2);
  E5RT::Ops::PreCompiledComputeOperation::Impl::BindDependentAsyncEventsImpl(*(E5RT::ExecutionStreamOperationInternal ***)(a1 + 296));
}

void E5RT::Ops::PreCompiledComputeOperation::BindCompletionAsyncEvent(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(a1, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_5;
  v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(*(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296));
  }
  else
  {
LABEL_5:
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(*(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296));
  }
}

void sub_190F434FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::BindCompletionAsyncEvent(uint64_t a1, __int128 *a2, int a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v7 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(a1, &v7, a3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (!*((_QWORD *)&v7 + 1))
    goto LABEL_5;
  v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(*(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296));
  }
  else
  {
LABEL_5:
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(*(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296));
  }
}

void sub_190F435A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::SerializeInferenceFrameDataPerSegment(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  std::string __p;
  std::string v8;

  v6 = *(_QWORD *)(a1 + 296);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v8 = *(std::string *)a2;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      __p = *(std::string *)a3;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_6:
  E5RT::Ops::PreCompiledComputeOperation::Impl::SerializeInferenceFrameDataPerSegment(v6, (uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, a4);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
}

void sub_190F43690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::__unordered_map_hasher<E5RT::IOPort *,std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::hash<E5RT::IOPort *>,std::equal_to<E5RT::IOPort *>,true>,std::__unordered_map_equal<E5RT::IOPort *,std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::equal_to<E5RT::IOPort *>,std::hash<E5RT::IOPort *>,true>,std::allocator<std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>>>::__emplace_unique_key_args<E5RT::IOPort *,std::piecewise_construct_t const&,std::tuple<E5RT::IOPort *&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v18 = *v22;
LABEL_61:
      *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_190F43A24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190F43A38(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_190F43A48(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 48) = 0;
  if (v1)
  {
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 64));
    std::mutex::~mutex((std::mutex *)v1);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t *std::unique_ptr<std::pair<std::mutex,std::exception_ptr>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v2 + 64));
    std::mutex::~mutex((std::mutex *)v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void sub_190F43AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = **(_QWORD **)(a1 + 40);
  v3 = 16 * a2;
  v4 = (void *)MEMORY[0x19401D4A4]();
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + v3) + 40))(*(_QWORD *)(v2 + v3));
  objc_autoreleasePoolPop(v4);
}

void sub_190F43B38(void *a1)
{
  uint64_t v1;
  std::mutex *v2;

  __cxa_begin_catch(a1);
  v2 = *(std::mutex **)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 48);
  std::mutex::lock(v2);
  sub_190F46330(v1 + 32, v2);
}

void sub_190F43B6C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<E5RT::TensorDescriptor>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[3];

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v16[1];
            if (v23 == v12)
            {
              v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v16 + 39);
              else
                v25 = v16[3];
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26)
                      return v16;
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<E5RT::TensorDescriptor>>(a1, v12, a3, a4, (uint64_t)v41);
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v13 || (float)(v28 * (float)v13) < v27)
  {
    v30 = 1;
    if (v13 >= 3)
      v30 = (v13 & (v13 - 1)) != 0;
    v31 = v30 | (2 * v13);
    v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v38 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        if (v29)
          goto LABEL_54;
      }
      else
      {
        v4 = v12;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        if (v29)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v38 & v12;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v12));
      if (v29)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v39 >= v13)
          v39 %= v13;
      }
      else
      {
        v39 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v29)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v41[0] = *v29;
  *v29 = v41[0];
LABEL_89:
  v16 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_190F43F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<E5RT::TensorDescriptor>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x38uLL);
  v11 = v10;
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v10 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v10 + 4) = *(_QWORD *)(a3 + 16);
  }
  v12 = *a4;
  *((_QWORD *)v11 + 5) = *a4;
  if (v12)
  {
    result = (_QWORD *)operator new();
    v14 = *a4;
    *result = &unk_1E2DC3270;
    result[1] = 0;
    result[2] = 0;
    result[3] = v14;
  }
  else
  {
    result = 0;
  }
  *((_QWORD *)v11 + 6) = result;
  *a4 = 0;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_190F44078(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F4408C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<E5RT::OperandDescriptor const>&>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::string *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v16[1];
            if (v23 == v12)
            {
              v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v16 + 39);
              else
                v25 = v16[3];
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26)
                      return v16;
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v27 = operator new(0x38uLL);
  v47[0] = v27;
  v47[1] = a1 + 16;
  v48 = 0;
  *v27 = 0;
  v27[1] = v12;
  v28 = (std::string *)(v27 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v27[4] = *(_QWORD *)(a3 + 16);
  }
  v29 = a4[1];
  v27[5] = *a4;
  v27[6] = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v13 || (float)(v33 * (float)v13) < v32)
  {
    v36 = 1;
    if (v13 >= 3)
      v36 = (v13 & (v13 - 1)) != 0;
    v37 = v36 | (2 * v13);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_71:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v44 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_60;
      }
      else
      {
        v4 = v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_60;
      }
    }
    else
    {
      v4 = v44 & v12;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v12));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_60;
    }
LABEL_84:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v45 >= v13)
          v45 %= v13;
      }
      else
      {
        v45 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_95;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_84;
LABEL_60:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_95:
  v16 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_190F44510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F44524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v9;
  _BYTE *v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  std::string *v20;
  uint64_t v21;
  __int128 v22;
  std::string *v23;
  std::string *v24;
  char *v25;
  std::string *v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  void *v31;
  std::string *v32;
  std::string *v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  __int128 *v40;
  char *v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  std::string *v47;
  std::string *v49;
  char *v50;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 24;
  v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1)
    return (std::string *)v7;
  v9 = __str;
  v11 = a1[2];
  v12 = (__int128 *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v12) >> 3)) >= a5)
  {
    v18 = (uint64_t)v12 - v7;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      v20 = &__str[a5];
      v25 = (char *)a1[1];
      goto LABEL_42;
    }
    v20 = (std::string *)((char *)__str + 8 * (((uint64_t)v12 - v7) >> 3));
    if (v20 != a4)
    {
      v21 = 0;
      do
      {
        v23 = (std::string *)((char *)v12 + v21 * 24);
        v24 = &v20[v21];
        if (SHIBYTE(v20[v21].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v23, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
        }
        else
        {
          v22 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v23->__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v22;
        }
        ++v21;
      }
      while (&v20[v21] != a4);
      v25 = (char *)v12 + v21 * 24;
      a1[1] = (char *)v12 + v21 * 24;
      if (v18 < 1)
        return (std::string *)v7;
LABEL_42:
      v39 = v7 + 24 * a5;
      v40 = (__int128 *)&v25[-24 * a5];
      v41 = v25;
      if (v40 < v12)
      {
        v41 = v25;
        do
        {
          v42 = *v40;
          *((_QWORD *)v41 + 2) = *((_QWORD *)v40 + 2);
          *(_OWORD *)v41 = v42;
          v41 += 24;
          *((_QWORD *)v40 + 1) = 0;
          *((_QWORD *)v40 + 2) = 0;
          *(_QWORD *)v40 = 0;
          v40 = (__int128 *)((char *)v40 + 24);
        }
        while (v40 < v12);
      }
      a1[1] = v41;
      if (v25 != (char *)v39)
      {
        v43 = v25 - 24;
        v44 = 8 * ((uint64_t)&v25[-v39] >> 3);
        do
        {
          if (v43[23] < 0)
            operator delete(*(void **)v43);
          v45 = (__int128 *)(v7 + v44 - 24);
          v46 = *v45;
          *((_QWORD *)v43 + 2) = *(_QWORD *)(v7 + v44 - 8);
          *(_OWORD *)v43 = v46;
          v43 -= 24;
          *(_BYTE *)(v7 + v44 - 1) = 0;
          *(_BYTE *)v45 = 0;
          v44 -= 24;
        }
        while (v44);
      }
      if (v20 != v9)
      {
        v47 = (std::string *)v7;
        do
          std::string::operator=(v47++, v9++);
        while (v9 != v20);
      }
      return (std::string *)v7;
    }
    v25 = (char *)a1[1];
    a1[1] = v12;
    if (v18 >= 1)
      goto LABEL_42;
    return (std::string *)v7;
  }
  v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = (char *)operator new(24 * v16);
  }
  else
  {
    v17 = 0;
  }
  v26 = (std::string *)&v17[24 * v6];
  v49 = v26;
  v50 = &v17[24 * v16];
  v27 = a5;
  v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v26->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
    }
    ++v26;
    ++v9;
    --v27;
  }
  while (v27 * 24);
  v30 = v49;
  v31 = *a1;
  v32 = v49;
  if (*a1 != (void *)v7)
  {
    v33 = v49;
    v34 = v7;
    do
    {
      v32 = v33 - 1;
      v35 = *(_OWORD *)(v34 - 24);
      v33[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v34 - 8);
      *(_OWORD *)&v33[-1].__r_.__value_.__l.__data_ = v35;
      *(_QWORD *)(v34 - 16) = 0;
      *(_QWORD *)(v34 - 8) = 0;
      *(_QWORD *)(v34 - 24) = 0;
      --v33;
      v34 -= 24;
    }
    while ((void *)v34 != v31);
  }
  v36 = a1[1];
  if (v36 != (void *)v7)
  {
    do
    {
      v37 = *(_OWORD *)v7;
      v28->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v37;
      ++v28;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v36);
    v7 = (uint64_t)a1[1];
  }
  v38 = *a1;
  *a1 = v32;
  a1[1] = v28;
  a1[2] = v50;
  while ((void *)v7 != v38)
  {
    if (*(char *)(v7 - 1) < 0)
      operator delete(*(void **)(v7 - 24));
    v7 -= 24;
  }
  if (v38)
    operator delete(v38);
  return v30;
}

void sub_190F44928(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_1E2DB5C10;
  v7 = *a2;
  *a2 = 0u;
  E5RT::IOPortPriv::IOPortPriv(a1 + 24, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (!*((_QWORD *)&v7 + 1))
    return a1;
  v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_190F449DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;

  if (a10)
    std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(a10);
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<E5RT::IOPortPriv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5C10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::IOPortPriv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5C10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<E5RT::IOPortPriv>::__on_zero_shared(uint64_t a1)
{
  E5RT::IOPortPriv::~IOPortPriv((E5RT::IOPortPriv *)(a1 + 24));
}

void std::__shared_ptr_pointer<E5RT::Ops::AneInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::AneInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::AneInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops21AneInferenceOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21AneInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops21AneInferenceOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21AneInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::MpsGraphInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::MpsGraphInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::MpsGraphInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops26MpsGraphInferenceOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops26MpsGraphInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops26MpsGraphInferenceOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops26MpsGraphInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::CpuInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::CpuInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::CpuInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops21CpuInferenceOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21CpuInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops21CpuInferenceOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21CpuInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::CastOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::CastOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::CastOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops13CastOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops13CastOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops13CastOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops13CastOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::QuantOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::QuantOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::QuantOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops14QuantOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops14QuantOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops14QuantOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops14QuantOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::DequantOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::DequantOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::DequantOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops16DequantOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16DequantOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops16DequantOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16DequantOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::MlcCpuInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::MlcCpuInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::MlcCpuInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops24MlcCpuInferenceOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops24MlcCpuInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops24MlcCpuInferenceOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops24MlcCpuInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::BnnsCpuInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::BnnsCpuInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::BnnsCpuInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops25BnnsCpuInferenceOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops25BnnsCpuInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops25BnnsCpuInferenceOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops25BnnsCpuInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::EIRInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::EIRInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::EIRInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops21EIRInferenceOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21EIRInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops21EIRInferenceOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21EIRInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::JitCallOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::JitCallOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::JitCallOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops16JitCallOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16JitCallOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops16JitCallOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16JitCallOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::E5MinimalCpuOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::E5MinimalCpuOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::E5MinimalCpuOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops21E5MinimalCpuOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21E5MinimalCpuOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops21E5MinimalCpuOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21E5MinimalCpuOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::Ops::BarrierOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::BarrierOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::BarrierOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops16BarrierOperationEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16BarrierOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops16BarrierOperationEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16BarrierOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

char *std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (!v15)
      return v12;
    goto LABEL_19;
  }
  do
  {
    v16 = *((_OWORD *)v15 - 1);
    v15 -= 16;
    *((_OWORD *)v11 - 1) = v16;
    v11 -= 16;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v17 = *a1;
  v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  if (v15 != v17)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v15 -= 16;
    }
    while (v15 != v17);
    v15 = v17;
  }
  if (v15)
LABEL_19:
    operator delete(v15);
  return v12;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_190F456E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void std::vector<std::unique_ptr<E5RT::ExecutionStreamOperationConfigOptions>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_30:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_37;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_30;
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node(int a1, char *__p)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void **v7;
  void *v8;
  void **v9;

  if (__p)
  {
    v2 = __p;
    while (1)
    {
      v3 = *(char **)v2;
      v4 = (char *)*((_QWORD *)v2 + 7);
      if (v4)
        break;
LABEL_5:
      v5 = (void *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v5)
        operator delete(v5);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v3;
      if (!v3)
        return;
    }
    while (1)
    {
      v6 = *(char **)v4;
      v7 = (void **)*((_QWORD *)v4 + 7);
      if (v7)
        break;
LABEL_11:
      v8 = (void *)*((_QWORD *)v4 + 5);
      *((_QWORD *)v4 + 5) = 0;
      if (v8)
        operator delete(v8);
      if (v4[39] < 0)
        operator delete(*((void **)v4 + 2));
      operator delete(v4);
      v4 = v6;
      if (!v6)
        goto LABEL_5;
    }
    while (1)
    {
      v9 = (void **)*v7;
      if (*((char *)v7 + 63) < 0)
      {
        operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0)
LABEL_20:
          operator delete(v7[2]);
      }
      else if (*((char *)v7 + 39) < 0)
      {
        goto LABEL_20;
      }
      operator delete(v7);
      v7 = v9;
      if (!v9)
        goto LABEL_11;
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x50uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = (std::string *)(v26 + 16);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *((_DWORD *)v26 + 18) = 1065353216;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190F460F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F46104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 56);
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)(v3 + 2));
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = *(void **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v5)
        operator delete(v5);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t E5RT::SharedResourcePriv<_ANEModel * {__strong}>::SharedResourcePriv(uint64_t a1, __int128 *a2, void *a3, int a4)
{
  id v7;
  std::string *v8;
  __int128 v9;

  v7 = a3;
  E5RT::SharedResource::SharedResource((_QWORD *)a1);
  *(_QWORD *)a1 = &off_1E2D5AFF0;
  v8 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 40) = a4;

  return a1;
}

void sub_190F46278(_Unwind_Exception *a1)
{
  void *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  _Unwind_Resume(a1);
}

void sub_190F46294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(void **a1)
{
  void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    operator delete(v2);
}

void Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(void **__p)
{
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  do
  {
    v2 = __p;
    __p = (void **)*__p;
    v3 = (std::__shared_weak_count *)v2[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete(v2);
  }
  while (__p);
}

{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_190F46330(uint64_t a1, std::mutex *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 48);
  v6.__ptr_ = 0;
  v5 = *(_QWORD *)(v4 + 64);
  std::exception_ptr::~exception_ptr(&v6);
  if (!v5)
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 48) + 64), &v6);
    std::exception_ptr::~exception_ptr(&v6);
  }
  std::mutex::unlock(a2);
  __cxa_end_catch();
}

void std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t E5RT::Ops::ValidateInOutsForQuantDequantOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  E5RT::IOPortImpl **v6;
  void *PortDescriptorRef;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  E5RT::IOPortImpl **v11;
  void *v12;
  void *v13;
  E5RT::OperandDescriptor *v14;
  E5RT::TensorDescriptor *v15;
  E5RT::OperandDescriptor *v16;
  E5RT::TensorDescriptor *v17;
  uint64_t TensorShape;
  uint64_t v19;
  size_t v20;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  E5RT::TensorDataType::Impl **v22;
  int NumComponents;
  uint64_t result;
  void *v25;
  void *v26;
  void *exception;
  void *v28;
  void *v29;
  void *v30;
  _QWORD v31[3];
  _BYTE v32[8];
  _QWORD v33[3];

  if (*(_QWORD *)(a1 + 24) != 1 || *(_QWORD *)(a2 + 24) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
    std::string::basic_string[abi:ne180100]<0>(v31, "Quant/dequant op supports only single input and single output.");
    E5RT::Status::Status(v32, 2, v31);
    E5RT::E5RTError::E5RTError(exception, v33, v32);
  }
  v4 = a1 + 16;
  v5 = (_QWORD *)(a1 + 16);
  while (1)
  {
    v5 = (_QWORD *)*v5;
    if (!v5)
      break;
    v6 = (E5RT::IOPortImpl **)v5[5];
    if (!v6)
    {
      v25 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v31, "Invalid input port for quant/dequant op.");
      E5RT::Status::Status(v32, 1, v31);
      E5RT::E5RTError::E5RTError(v25, v33, v32);
    }
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(v6);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      v8 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v31, "Input surface ports aren't supported with quant/dequant operation yet.");
      E5RT::Status::Status(v32, 2, v31);
      E5RT::E5RTError::E5RTError(v8, v33, v32);
    }
  }
  v9 = a2 + 16;
  v10 = (_QWORD *)(a2 + 16);
  while (1)
  {
    v10 = (_QWORD *)*v10;
    if (!v10)
      break;
    v11 = (E5RT::IOPortImpl **)v10[5];
    if (!v11)
    {
      v26 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v31, "Invalid output port for quant/dequant op.");
      E5RT::Status::Status(v32, 1, v31);
      E5RT::E5RTError::E5RTError(v26, v33, v32);
    }
    v12 = (void *)E5RT::IOPort::GetPortDescriptorRef(v11);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v12))
    {
      v13 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v31, "Output surface ports aren't supported with quant/dequant operation yet.");
      E5RT::Status::Status(v32, 2, v31);
      E5RT::E5RTError::E5RTError(v13, v33, v32);
    }
  }
  v14 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(_QWORD *)v4 + 40));
  v15 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v14);
  v16 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(_QWORD *)v9 + 40));
  v17 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v16);
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(v15);
  v19 = E5RT::TensorDescriptor::GetTensorShape(v17);
  v20 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
  if (v20 != *(_QWORD *)(v19 + 8) - *(_QWORD *)v19 || memcmp(*(const void **)TensorShape, *(const void **)v19, v20))
  {
    v28 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
    std::string::basic_string[abi:ne180100]<0>(v31, "Quant/dequant op does not support re-shaping tensors.");
    E5RT::Status::Status(v32, 2, v31);
    E5RT::E5RTError::E5RTError(v28, v33, v32);
  }
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v15);
  v22 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v17);
  NumComponents = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
  result = E5RT::TensorDataType::GetNumComponents(v22);
  if (NumComponents != (_DWORD)result)
  {
    v29 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
    std::string::basic_string[abi:ne180100]<0>(v31, "Quant/dequant op requires input and output to have same number of components.");
    E5RT::Status::Status(v32, 2, v31);
    E5RT::E5RTError::E5RTError(v29, v33, v32);
  }
  if (NumComponents != 1)
  {
    v30 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
    std::string::basic_string[abi:ne180100]<0>(v31, "Quant/dequant op does not support interleaved tensors yet.");
    E5RT::Status::Status(v32, 2, v31);
    E5RT::E5RTError::E5RTError(v30, v33, v32);
  }
  return result;
}

void sub_190F468A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_9;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_9:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_9;
}

uint64_t E5RT::Ops::QuantOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t InputPorts;
  uint64_t OutputPorts;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v8;
  E5RT::OperandDescriptor *v9;
  E5RT::TensorDescriptor *v10;
  uint64_t TensorDataTypeRef;
  uint64_t v12;
  void *exception;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[3];
  _BYTE v20[8];
  _QWORD v21[3];

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  v4 = a1 + 8;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  E5RT::Ops::ValidateInOutsForQuantDequantOperation(InputPorts, OutputPorts);
  if (*(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "InOut ports are not supported by Quant op yet.");
    E5RT::Status::Status(v20, 1, v19);
    E5RT::E5RTError::E5RTError(exception, v21, v20);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(_QWORD *)(InputPorts + 16) + 40));
  v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  v9 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(_QWORD *)(OutputPorts + 16)
                                                                                           + 40));
  v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v9);
  TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v8);
  v12 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v10);
  if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef)
    && !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(TensorDataTypeRef))
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Input to quant op must be FP32 or FP16.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v17, v21, v20);
  }
  if (!E5RT::TensorDataType::IsType<unsigned char>(v12) && !E5RT::TensorDataType::IsType<signed char>(v12))
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Output from quant op must be U8 or S8.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v18, v21, v20);
  }
  if (**(_DWORD **)v4 != 1)
  {
    v15 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Quant op not yet supported on non-CPU devices.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v15, v21, v20);
  }
  if (*(_QWORD *)(*(_QWORD *)v4 + 16) - *(_QWORD *)(*(_QWORD *)v4 + 8) != 4)
  {
    v16 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Quant op currently only supports a single scale factor for all channels.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v16, v21, v20);
  }
  return a1;
}

void sub_190F46D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F46D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F46D58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F46D6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F46D80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F46D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F46DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void E5RT::Ops::QuantOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  E5RT::IOPortImpl **v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  E5RT::IOPortImpl **v9;
  unint64_t *v10;
  unint64_t v11;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::BufferObject *v13;
  E5RT::MemoryObject *MemoryObjectRef;
  const E5RT::TensorDescriptor *v15;
  E5RT::OperandDescriptor *v16;
  E5RT *v17;
  E5RT::MemoryObject *v18;
  const E5RT::TensorDescriptor *v19;
  const E5RT::BufferObject *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  void *exception;
  _QWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  E5RT::IOPortImpl **v30;
  std::__shared_weak_count *v31;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v27, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&v30, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v26, 2, &v30);
    E5RT::E5RTError::E5RTError(exception, &v27, v26);
  }
  v27 = 0x2B2380CC00000000;
  v29 = 0u;
  v28 = 0u;
  kdebug_trace();
  v2 = *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16);
  v4 = *(E5RT::IOPortImpl ***)(v2 + 40);
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  v30 = v4;
  v31 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this) + 16);
  v9 = *(E5RT::IOPortImpl ***)(v7 + 40);
  v8 = *(std::__shared_weak_count **)(v7 + 48);
  v26[0] = v9;
  v26[1] = v8;
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v4);
  v13 = (E5RT::BufferObject *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v4);
  v15 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(MemoryObjectRef);
  v16 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v9);
  v17 = (E5RT *)E5RT::OperandDescriptor::TensorDescriptor(v16);
  v18 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v9);
  v19 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v18);
  E5RT::TensorQuantize(v17, v19, v13, v15, v20, **((float **)this[1] + 1));
  if (v8)
  {
    v21 = (unint64_t *)&v8->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v31)
  {
    v23 = &v31->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (E5RT::g_trace_analysis_level >= v27)
    kdebug_trace();
}

void sub_190F470D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190F47114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    if ((v25 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v24);
      _Unwind_Resume(a1);
    }
  }
  else if (v25)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

E5RT::ExecutionStreamOperationInternal *E5RT::Ops::QuantOperation::QuantOperation(E5RT::ExecutionStreamOperationInternal *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *exception;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD v30[3];
  _BYTE v31[8];
  void *v32[2];
  void *__p[2];
  int v34;

  *(_OWORD *)v32 = 0u;
  *(_OWORD *)__p = 0u;
  v34 = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v32);
  v7 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v8 = (void **)*v7;
        v9 = (std::__shared_weak_count *)v7[6];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (*((char *)v7 + 39) < 0)
          break;
        operator delete(v7);
        v7 = v8;
        if (!v8)
          goto LABEL_11;
      }
      operator delete(v7[2]);
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
LABEL_11:
  v12 = v32[0];
  v32[0] = 0;
  if (v12)
    operator delete(v12);
  *(_QWORD *)a1 = &off_1E2D5B408;
  *((_QWORD *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  v13 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(a1) + 16;
  while (1)
  {
    v13 = *(_QWORD *)v13;
    if (!v13)
      break;
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v13 + 40)))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v32, "QuantOperation");
      std::string::basic_string[abi:ne180100]<0>(v30, "QuantOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v31, 1, v30);
      E5RT::E5RTError::E5RTError(exception, v32, v31);
    }
  }
  v15 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a1) + 16;
  while (1)
  {
    v15 = *(_QWORD *)v15;
    if (!v15)
      break;
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v15 + 40)))
    {
      v16 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v32, "QuantOperation");
      std::string::basic_string[abi:ne180100]<0>(v30, "QuantOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v31, 1, v30);
      E5RT::E5RTError::E5RTError(v16, v32, v31);
    }
  }
  v17 = operator new();
  v18 = v17;
  v19 = *(unint64_t **)(a3 + 8);
  v32[0] = *(void **)a3;
  v32[1] = v19;
  if (v19)
  {
    v20 = v19 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  E5RT::Ops::QuantOperation::Impl::Impl(v17, (uint64_t)a1, (uint64_t)v32);
  v22 = (std::__shared_weak_count *)v32[1];
  if (v32[1])
  {
    v23 = (unint64_t *)((char *)v32[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *((_QWORD *)a1 + 37);
  *((_QWORD *)a1 + 37) = v18;
  if (v25)
  {
    v26 = *(std::__shared_weak_count **)(v25 + 16);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    MEMORY[0x19401CD90](v25, 0x60C40A44E5E0CLL);
  }
  *((_QWORD *)a1 + 29) |= 3uLL;
  kdebug_trace();
  return a1;
}

void sub_190F474F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::ExecutionStreamOperationInternal *v21;
  uint64_t v22;
  uint64_t v24;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x19401CD90](v22, 0x60C40A44E5E0CLL);
  kdebug_trace();
  v24 = *((_QWORD *)v21 + 37);
  *((_QWORD *)v21 + 37) = 0;
  if (v24)
    sub_190F20DD4(v24);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::QuantOperation::~QuantOperation(E5RT::Ops::QuantOperation *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E2D5B408;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40A44E5E0CLL);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E2D5B408;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x19401CD90](v2, 0x60C40A44E5E0CLL);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::Ops::QuantOperation::GetOpCode(E5RT::Ops::QuantOperation *this)
{
  return 4;
}

uint64_t E5RT::Ops::QuantOperation::PrepareOpForEncode(E5RT::Ops::QuantOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_190F477F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::QuantOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::QuantOperation::Impl::ExecuteSync(this[37]);
  return kdebug_trace();
}

void sub_190F47898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_config_options_create(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCA918;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F47948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_config_options_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCA998;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F47A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_config_options_get_skip_io_fences(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCAA18;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F47AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_config_options_set_skip_io_fences(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCAA98;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F47BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_config_options_get_enable_low_latency_async_events(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCAB18;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F47C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_config_options_set_enable_low_latency_async_events(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCAB98;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F47D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_config_options_get_enable_concurrent_sync_execution(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCAC18;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F47E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_config_options_set_enable_concurrent_sync_execution(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCAC98;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F47F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F47F5C()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F47F70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCA918;
  result[1] = v3;
  return result;
}

uint64_t sub_190F47FA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCA918;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F47FC0(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  void *__p[2];
  char v8;
  void *v9;
  __int128 v10;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (uint64_t *)operator new();
    *v2 = 0;
    E5RT::ExecutionStreamConfigOptions::Create((E5RT::ExecutionStreamConfigOptions **)&v9);
    v3 = v9;
    v9 = 0;
    v4 = *v2;
    *v2 = (uint64_t)v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = v9;
      v9 = 0;
      if (v5)
        (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
    }
    result = 0;
    **(_QWORD **)(a1 + 8) = v2;
  }
  else
  {
    v9 = operator new(0x30uLL);
    v10 = xmmword_191A6F7A0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9);
    return 1;
  }
  return result;
}

void sub_190F480F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F48158(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_execution_stream_config_options_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z43e5rt_execution_stream_config_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_execution_stream_config_options_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_execution_stream_config_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F481C4()
{
  return &unk_1E2DCA978;
}

void sub_190F481D4()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F481E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCA998;
  result[1] = v3;
  return result;
}

uint64_t sub_190F4821C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCA998;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F48238(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *v2;
      *v2 = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      MEMORY[0x19401CD90](v2, 0x20C4093837F09);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A6FF90;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F483D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F48418(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_execution_stream_config_options_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z44e5rt_execution_stream_config_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_execution_stream_config_options_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_execution_stream_config_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F48484()
{
  return &unk_1E2DCA9F8;
}

void sub_190F48494()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F484A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCAA18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F484E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCAA18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F48500(uint64_t a1)
{
  const void ***v1;
  char SkipIOFences;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      SkipIOFences = E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = SkipIOFences;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: value is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F4867C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F486BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z55e5rt_execution_stream_config_options_get_skip_io_fencesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z55e5rt_execution_stream_config_options_get_skip_io_fencesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z55e5rt_execution_stream_config_options_get_skip_io_fencesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z55e5rt_execution_stream_config_options_get_skip_io_fencesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F48728()
{
  return &unk_1E2DCAA78;
}

void sub_190F48738()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F4874C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCAA98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F48784(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCAA98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F487A4(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamConfigOptions::SetSkipIOFences(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F4887C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F488B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z55e5rt_execution_stream_config_options_set_skip_io_fencesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z55e5rt_execution_stream_config_options_set_skip_io_fencesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z55e5rt_execution_stream_config_options_set_skip_io_fencesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z55e5rt_execution_stream_config_options_set_skip_io_fencesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F48924()
{
  return &unk_1E2DCAAF8;
}

void sub_190F48934()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F48948(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCAB18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F48980(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCAB18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F489A0(uint64_t a1)
{
  const void ***v1;
  char EnableLowLatencyAsyncEvents;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      EnableLowLatencyAsyncEvents = E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = EnableLowLatencyAsyncEvents;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: value is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F48B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F48B5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z72e5rt_execution_stream_config_options_get_enable_low_latency_async_eventsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z72e5rt_execution_stream_config_options_get_enable_low_latency_async_eventsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z72e5rt_execution_stream_config_options_get_enable_low_latency_async_eventsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z72e5rt_execution_stream_config_options_get_enable_low_latency_async_eventsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F48BC8()
{
  return &unk_1E2DCAB78;
}

void sub_190F48BD8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F48BEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCAB98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F48C24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCAB98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F48C44(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamConfigOptions::SetEnableLowLatencyAsyncEvents(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F48D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F48D58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z72e5rt_execution_stream_config_options_set_enable_low_latency_async_eventsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z72e5rt_execution_stream_config_options_set_enable_low_latency_async_eventsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z72e5rt_execution_stream_config_options_set_enable_low_latency_async_eventsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z72e5rt_execution_stream_config_options_set_enable_low_latency_async_eventsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F48DC4()
{
  return &unk_1E2DCABF8;
}

void sub_190F48DD4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F48DE8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCAC18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F48E20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCAC18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F48E40(uint64_t a1)
{
  const void ***v1;
  char EnableConcurrentSyncExecution;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      EnableConcurrentSyncExecution = E5RT::ExecutionStreamConfigOptions::GetEnableConcurrentSyncExecution(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = EnableConcurrentSyncExecution;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: value is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F48FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F48FFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z73e5rt_execution_stream_config_options_get_enable_concurrent_sync_executionE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z73e5rt_execution_stream_config_options_get_enable_concurrent_sync_executionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73e5rt_execution_stream_config_options_get_enable_concurrent_sync_executionE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73e5rt_execution_stream_config_options_get_enable_concurrent_sync_executionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F49068()
{
  return &unk_1E2DCAC78;
}

void sub_190F49078()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F4908C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCAC98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F490C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCAC98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F490E4(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamConfigOptions::SetEnableConcurrentSyncExecution(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F491BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F491F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z73e5rt_execution_stream_config_options_set_enable_concurrent_sync_executionE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z73e5rt_execution_stream_config_options_set_enable_concurrent_sync_executionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73e5rt_execution_stream_config_options_set_enable_concurrent_sync_executionE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73e5rt_execution_stream_config_options_set_enable_concurrent_sync_executionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F49264()
{
  return &unk_1E2DCACF8;
}

void E5RT::AneDeviceManager::GetAneDevice(E5RT::AneDeviceManager *this@<X0>, int a2@<W1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::mutex *v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  void *exception;
  _QWORD *v44[3];
  _BYTE v45[8];
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t v48;

  v48 = a3;
  if (a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v46, "GetAneDevice");
    std::string::basic_string[abi:ne180100]<0>(v44, "Invalid ANE ID");
    E5RT::Status::Status(v45, 1, v44);
    E5RT::E5RTError::E5RTError(exception, &v46, v45);
  }
  v7 = (std::mutex *)((char *)this + 56);
  std::mutex::lock((std::mutex *)((char *)this + 56));
  *a4 = 0;
  a4[1] = 0;
  if (a3)
  {
    v8 = *(int8x8_t *)((char *)this + 8);
    if (v8)
    {
      v9 = (uint8x8_t)vcnt_s8(v8);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v10 = a3;
        if (*(_QWORD *)&v8 <= a3)
          v10 = a3 % *(_QWORD *)&v8;
      }
      else
      {
        v10 = (*(_QWORD *)&v8 - 1) & a3;
      }
      v24 = *(_QWORD **)(*(_QWORD *)this + 8 * v10);
      if (v24)
      {
        v25 = (_QWORD *)*v24;
        if (v25)
        {
          if (v9.u32[0] < 2uLL)
          {
            v26 = *(_QWORD *)&v8 - 1;
            while (1)
            {
              v28 = v25[1];
              if (v28 == a3)
              {
                if (v25[2] == a3)
                  goto LABEL_49;
              }
              else if ((v28 & v26) != v10)
              {
                goto LABEL_39;
              }
              v25 = (_QWORD *)*v25;
              if (!v25)
                goto LABEL_39;
            }
          }
          do
          {
            v27 = v25[1];
            if (v27 == a3)
            {
              if (v25[2] == a3)
                goto LABEL_49;
            }
            else
            {
              if (v27 >= *(_QWORD *)&v8)
                v27 %= *(_QWORD *)&v8;
              if (v27 != v10)
                break;
            }
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
      }
    }
LABEL_39:
    v29 = operator new(0x30uLL);
    v29[1] = 0;
    v29[2] = 0;
    *v29 = &off_1E2DCADE8;
    sub_190F49C7C((uint64_t)(v29 + 3), 0, a3);
    v46 = v29 + 3;
    v47 = (std::__shared_weak_count *)v29;
    v44[0] = &v48;
    v30 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, &v48, (uint64_t)&std::piecewise_construct, v44);
    v46 = 0;
    v47 = 0;
    v31 = (std::__shared_weak_count *)v30[4];
    v30[3] = v29 + 3;
    v30[4] = v29;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v47;
    if (v47)
    {
      v35 = (unint64_t *)&v47->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
LABEL_49:
    v46 = &v48;
    v37 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, &v48, (uint64_t)&std::piecewise_construct, &v46);
    v39 = v37[3];
    v38 = v37[4];
    if (v38)
    {
      v40 = (unint64_t *)(v38 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v21 = (std::__shared_weak_count *)a4[1];
    *a4 = v39;
    a4[1] = v38;
    if (v21)
    {
      v42 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v42);
      while (__stlxr(v23 - 1, v42));
      goto LABEL_55;
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 5);
    if (!v11)
    {
      v12 = operator new();
      sub_190F49C7C(v12, 0, 0);
      v13 = (_QWORD *)operator new();
      *v13 = &off_1E2DCAD98;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = v12;
      v46 = 0;
      v14 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 5) = v12;
      *((_QWORD *)this + 6) = v13;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v46)
      {
        v17 = sub_190F4B2E0(v46);
        MEMORY[0x19401CD90](v17, 0x10A1C40DF6760FDLL);
      }
      v11 = *((_QWORD *)this + 5);
    }
    v18 = *((_QWORD *)this + 6);
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = (std::__shared_weak_count *)a4[1];
    *a4 = v11;
    a4[1] = v18;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
LABEL_55:
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  std::mutex::unlock(v7);
}

void sub_190F49658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::mutex *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  sub_190F497A4((_QWORD **)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v6);
  std::mutex::unlock(v5);
  _Unwind_Resume(a1);
}

void sub_190F4967C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x19401CD90](v3, 0x10A1C40DF6760FDLL);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_190F496B0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_190F49720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

_QWORD **sub_190F497A4(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_190F4B2E0(v2);
    MEMORY[0x19401CD90](v3, 0x10A1C40DF6760FDLL);
  }
  return a1;
}

void E5RT::AneDeviceManager::DeviceClose(E5RT::AneDeviceManager *this, int a2, unint64_t a3)
{
  std::mutex *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *exception;
  void *v25;
  _QWORD v26[3];
  _BYTE v27[8];
  void *__p[2];
  char v29;

  if (a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "DeviceClose");
    std::string::basic_string[abi:ne180100]<0>(v26, "DeviceClose() - Invalid Ane id.");
    E5RT::Status::Status(v27, 1, v26);
    E5RT::E5RTError::E5RTError(exception, __p, v27);
  }
  v5 = (std::mutex *)((char *)this + 56);
  std::mutex::lock((std::mutex *)((char *)this + 56));
  if (a3)
  {
    v6 = *(int8x8_t *)((char *)this + 8);
    if (!*(_QWORD *)&v6)
      goto LABEL_44;
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a3;
      if (*(_QWORD *)&v6 <= a3)
        v8 = a3 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & a3;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)this + 8 * v8);
    if (!v12 || (v13 = *v12) == 0)
    {
LABEL_44:
      v25 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "DeviceClose");
      std::string::basic_string[abi:ne180100]<0>(v26, "DeviceClose() - Invalid program handle.");
      E5RT::Status::Status(v27, 1, v26);
      E5RT::E5RTError::E5RTError(v25, __p, v27);
    }
    if (v7.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v6 - 1;
      while (1)
      {
        v16 = v13[1];
        if (v16 == a3)
        {
          if (v13[2] == a3)
            goto LABEL_28;
        }
        else if ((v16 & v14) != v8)
        {
          goto LABEL_44;
        }
        v13 = (_QWORD *)*v13;
        if (!v13)
          goto LABEL_44;
      }
    }
    while (1)
    {
      v15 = v13[1];
      if (v15 == a3)
      {
        if (v13[2] == a3)
        {
LABEL_28:
          v17 = (std::__shared_weak_count *)v13[4];
          if (v17 && v17->__shared_owners_ <= 1uLL)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            v13[3] = 0;
            v13[4] = 0;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(this, v13, (uint64_t)__p);
            v20 = __p[0];
            __p[0] = 0;
            if (v20)
            {
              if (v29)
              {
                v21 = (std::__shared_weak_count *)v20[4];
                if (v21)
                {
                  v22 = (unint64_t *)&v21->__shared_owners_;
                  do
                    v23 = __ldaxr(v22);
                  while (__stlxr(v23 - 1, v22));
                  if (!v23)
                  {
                    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                    std::__shared_weak_count::__release_weak(v21);
                  }
                }
              }
              operator delete(v20);
            }
          }
          goto LABEL_42;
        }
      }
      else
      {
        if (v15 >= *(_QWORD *)&v6)
          v15 %= *(_QWORD *)&v6;
        if (v15 != v8)
          goto LABEL_44;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_44;
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_42:
  std::mutex::unlock(v5);
}

void sub_190F49AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::mutex *v22;
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::mutex::unlock(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_190F49B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::AneDeviceManager::GetAneDeviceManager(E5RT::AneDeviceManager *this)
{
  if (qword_1EE2147F0 != -1)
    dispatch_once(&qword_1EE2147F0, &unk_1E2DCAD08);
  return qword_1EE2147E8;
}

double sub_190F49C20()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 850045863;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_QWORD *)(v0 + 112) = 0;
  qword_1EE2147E8 = v0;
  return result;
}

uint64_t sub_190F49C7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  void *exception;
  char v13[24];
  _BYTE v14[8];
  __int128 v15;
  __int128 v16;
  uint8_t buf[14];
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E2DCAD38;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = 0;
  v15 = 0u;
  v16 = 0u;
  if (a3)
    v7 = 1;
  else
    v7 = 2;
  LODWORD(v15) = v7;
  *((_QWORD *)&v15 + 1) = a3;
  LODWORD(v16) = 5000;
  *(_QWORD *)((char *)&v16 + 4) = a2 | 0xFFFFFFFF00000000;
  if (sub_190F4B1C4(a1 + 8, (uint64_t)&v15, a1)
    && sub_190F4B1C4((uint64_t)v6, (uint64_t)&v15, a1)
    || !*v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v19) = 13;
    strcpy((char *)buf, "AneDevicePriv");
    strcpy(v13, "ANE Device open failed");
    v13[23] = 22;
    E5RT::Status::Status(v14, 11, v13);
    E5RT::E5RTError::E5RTError(exception, buf, v14);
  }
  HIBYTE(v19) = 4;
  strcpy((char *)buf, "e5rt");
  E5RT::GetE5RTLog((uint64_t)buf);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(*(void **)buf);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      goto LABEL_10;
    goto LABEL_9;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
LABEL_9:
    v10 = *v6;
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2048;
    v18 = a3;
    v19 = 1024;
    v20 = a2;
    _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "Opened ANEDevice = 0x%lx for programHandle = 0x%llx, aneId = %d \n", buf, 0x1Cu);
  }
LABEL_10:

  return a1;
}

void sub_190F49EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F49F18(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4;
  int v5;
  int v6;
  void *exception;
  void *v9;
  _QWORD v10[3];
  _BYTE v11[8];
  _QWORD v12[3];

  v4 = *a4;
  if (*a4 == 23)
  {
    v6 = 2;
  }
  else if (v4 == 22)
  {
    v6 = 1;
  }
  else
  {
    if (v4 != 21)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v12, "fDeviceCallback");
      std::string::basic_string[abi:ne180100]<0>(v10, "Unexpected device callback statusType from ANE.");
      E5RT::Status::Status(v11, 12, v10);
      E5RT::E5RTError::E5RTError(exception, v12, v11);
    }
    v5 = a4[1];
    if (v5 == 17)
    {
      v6 = 3;
    }
    else
    {
      if (v5 != 16)
      {
        v9 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v12, "fDeviceCallback");
        std::string::basic_string[abi:ne180100]<0>(v10, "Unexpected device callback status from ANE.");
        E5RT::Status::Status(v11, 12, v10);
        E5RT::E5RTError::E5RTError(v9, v12, v11);
      }
      v6 = 4;
    }
  }
  *(_DWORD *)(a1 + 16) = v6;
  return 0;
}

void sub_190F4A074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a17);
LABEL_6:
  if ((v23 & 1) != 0)
    __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_190F4A128(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  id v9;
  int v10;
  void *exception;
  id v12;
  _QWORD v13[3];
  _BYTE v14[8];
  _QWORD v15[3];

  v7 = a3;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v7;
  v12 = v9;
  if (!v8 || !*(_QWORD *)v8)
  {

LABEL_6:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "AsyncSubmit");
    std::string::basic_string[abi:ne180100]<0>(v13, "ANE inference async submit failure.");
    E5RT::Status::Status(v14, 1, v13);
    E5RT::E5RTError::E5RTError(exception, v15, v14);
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, a2, v9, a4, 0, 0, 0);

  if (v10)
    goto LABEL_6;

}

void sub_190F4A224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_190F4A2BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  int v8;
  void *exception;
  id v10;
  _QWORD v11[3];
  _BYTE v12[8];
  _QWORD v13[3];

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v5;
  v10 = v7;
  if (!v6 || !*(_QWORD *)v6)
  {

LABEL_6:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "SyncExecute");
    std::string::basic_string[abi:ne180100]<0>(v11, "ANE inference sync execute failure.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, id, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, a2, v7, 0, 1, 0, 0);

  if (v8)
    goto LABEL_6;

}

void sub_190F4A3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_190F4A44C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *exception;
  void *v11;
  _QWORD v12[3];
  _BYTE v13[8];
  _BYTE buf[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "MapAllocations");
    std::string::basic_string[abi:ne180100]<0>(v12, "Map request params is NULL.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, buf, v13);
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3 || !*(_QWORD *)v3 || (*(unsigned int (**)(void))(*(_QWORD *)v3 + 56))())
  {
    v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "MapAllocations");
    std::string::basic_string[abi:ne180100]<0>(v12, "ANE memory map request failed.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(v11, buf, v13);
  }
  HIBYTE(v17) = 4;
  strcpy(buf, "e5rt");
  E5RT::GetE5RTLog((uint64_t)buf);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(*(void **)buf);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      goto LABEL_8;
    goto LABEL_7;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
LABEL_7:
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a2 + 3072);
    v9 = *(_DWORD *)(a2 + 3080);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v7;
    v15 = 2048;
    v16 = v8;
    v17 = 1024;
    v18 = v9;
    _os_log_impl(&dword_190DAF000, v6, OS_LOG_TYPE_INFO, "Mapped pre-wire allocations for ANEDevice = 0x%lx programHandle = 0x%llx # buffers = %d\n", buf, 0x1Cu);
  }
LABEL_8:

}

void sub_190F4A664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) != 0)
      goto LABEL_8;
  }
  else if (v22)
  {
LABEL_8:
    __cxa_free_exception(v21);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_190F4A750(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *exception;
  void *v11;
  _QWORD v12[3];
  _BYTE v13[8];
  _BYTE buf[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "UnmapAllocations");
    std::string::basic_string[abi:ne180100]<0>(v12, "Unmap request params is NULL.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, buf, v13);
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3 || !*(_QWORD *)v3 || (*(unsigned int (**)(void))(*(_QWORD *)v3 + 64))())
  {
    v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "UnmapAllocations");
    std::string::basic_string[abi:ne180100]<0>(v12, "ANE memory unmap request failed.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(v11, buf, v13);
  }
  HIBYTE(v17) = 4;
  strcpy(buf, "e5rt");
  E5RT::GetE5RTLog((uint64_t)buf);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(*(void **)buf);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      goto LABEL_8;
    goto LABEL_7;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
LABEL_7:
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a2 + 3072);
    v9 = *(_DWORD *)(a2 + 3080);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v7;
    v15 = 2048;
    v16 = v8;
    v17 = 1024;
    v18 = v9;
    _os_log_impl(&dword_190DAF000, v6, OS_LOG_TYPE_INFO, "Unmapped pre-wire allocations for ANEDevice 0x%lx programHandle 0x%llx # buffers = %d\n", buf, 0x1Cu);
  }
LABEL_8:

}

void sub_190F4A964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) != 0)
      goto LABEL_8;
  }
  else if (v22)
  {
LABEL_8:
    __cxa_free_exception(v21);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_190F4AA50(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __SecTask *v6;
  const __CFString *v7;
  CFStringEncoding SystemEncoding;
  const char *CStringPtr;
  CC_LONG v10;
  const __CFString *v11;
  CFStringEncoding v12;
  const char *v13;
  CC_LONG v14;
  uint64_t v15;
  qos_class_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *exception;
  _QWORD v21[3];
  _BYTE v22[8];
  _QWORD v23[4];
  audit_token_t token;
  audit_token_t v25;
  const __CFString *v26;
  uint64_t v27;
  mach_msg_type_number_t task_info_outCnt;
  audit_token_t task_info_out;
  unsigned __int8 v30[16];
  __int128 v31;
  _OWORD md[2];
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[17];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  bzero(v35, 0xD60uLL);
  v33 = a2;
  v34 = a3;
  task_info_outCnt = 8;
  if (!task_info(*MEMORY[0x1E0C83DA0], 0xFu, (task_info_t)&task_info_out, &task_info_outCnt))
  {
    v26 = 0;
    v27 = 0;
    v25 = task_info_out;
    CPCopyBundleIdentifierAndTeamFromAuditToken();
    token = task_info_out;
    v6 = SecTaskCreateWithAuditToken(0, &token);
    v7 = SecTaskCopySigningIdentifier(v6, 0);
    if (v7)
    {
      SystemEncoding = CFStringGetSystemEncoding();
      CStringPtr = CFStringGetCStringPtr(v7, SystemEncoding);
      v10 = strlen(CStringPtr);
      CC_SHA256(CStringPtr, v10, (unsigned __int8 *)md);
      v37 = md[0];
      v38 = md[1];
      v11 = v26;
      if (!v26)
      {
        v11 = &stru_1E2DD80E0;
        v26 = &stru_1E2DD80E0;
      }
      v12 = CFStringGetSystemEncoding();
      v13 = CFStringGetCStringPtr(v11, v12);
      v14 = strlen(v13);
      CC_SHA256(v13, v14, v30);
      *(_OWORD *)&v35[1] = *(_OWORD *)v30;
      v36 = v31;
      v23[3] = 0;
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 && *(_QWORD *)v15 && !(*(unsigned int (**)(void))(*(_QWORD *)v15 + 16))())
      {
        *(_OWORD *)v30 = 0u;
        v31 = 0u;
        v16 = qos_class_main();
        *(_DWORD *)&v30[4] = 0;
        *(_DWORD *)&v30[8] = v16;
        v30[12] = 1;
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v23, "LoadProgram");
        std::string::basic_string[abi:ne180100]<0>(v21, "ANE Program Destroy failed.");
        E5RT::Status::Status(v22, 9, v21);
        E5RT::E5RTError::E5RTError(exception, v23, v22);
      }
      v19 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v30, "LoadProgram");
      std::string::basic_string[abi:ne180100]<0>(v23, "ANE program load failed.");
      E5RT::Status::Status(v21, 9, v23);
      E5RT::E5RTError::E5RTError(v19, v30, v21);
    }
    v18 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(md, "LoadProgram");
    std::string::basic_string[abi:ne180100]<0>(v30, "Invalid signing identifier.");
    E5RT::Status::Status(v23, 9, v30);
    E5RT::E5RTError::E5RTError(v18, md, v23);
  }
  v17 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(md, "LoadProgram");
  std::string::basic_string[abi:ne180100]<0>(v30, "task_info() failed.");
  E5RT::Status::Status(v23, 9, v30);
  E5RT::E5RTError::E5RTError(v17, md, v23);
}

void sub_190F4AE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  char v53;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v53 & 1) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if ((v53 & 1) == 0)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v52);
  _Unwind_Resume(a1);
}

void sub_190F4B070(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;

  if (a2
    && *(_QWORD *)a2
    && !(*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 1, 0))
  {
LABEL_7:
    if (*(_QWORD *)a2 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
      return;
    goto LABEL_9;
  }
  v21 = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if ((v21 & 0x80000000) == 0)
  {
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      goto LABEL_6;
LABEL_16:
    sub_190F4B8F4(v4, v5, v6, v7, v8, v9, v10, v11);

    if (a2)
      goto LABEL_7;
    goto LABEL_9;
  }
  operator delete(__p[0]);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    goto LABEL_16;
LABEL_6:

  if (a2)
    goto LABEL_7;
LABEL_9:
  v21 = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v12 = objc_claimAutoreleasedReturnValue();
  if (v21 < 0)
    operator delete(__p[0]);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    sub_190F4B8C4(v12, v13, v14, v15, v16, v17, v18, v19);

}

void sub_190F4B19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F4B1BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_190F4B1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  char *v8;
  char *v9;

  os_unfair_lock_lock_with_options();
  v6 = (void *)qword_1EE2147F8;
  if (!qword_1EE2147F8)
  {
    v7 = dlopen("/System/Library/PrivateFrameworks/ANEServices.framework/ANEServices", 4);
    qword_1EE2147F8 = (uint64_t)v7;
    v8 = dlerror();
    if (v7)
    {
      v6 = (void *)qword_1EE2147F8;
      if (qword_1EE2147F8)
        goto LABEL_4;
LABEL_10:
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EE2147E0);
      return 4;
    }
    printf("dlopen error: %s\n", v8);
    v6 = (void *)qword_1EE2147F8;
    if (!qword_1EE2147F8)
      goto LABEL_10;
  }
LABEL_4:
  if (!off_1EE214800)
  {
    off_1EE214800 = dlsym(v6, "H11ANEDeviceOpen");
    v9 = dlerror();
    if (v9)
      printf("dlsym err: %s\n", v9);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EE2147E0);
  if (off_1EE214800)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))off_1EE214800)(a1, a2, a3, sub_190F49F18);
  return 4;
}

_QWORD *sub_190F4B2E0(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE __p[12];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *a1 = off_1E2DCAD38;
  v2 = a1[1];
  if (!v2 || !*(_QWORD *)v2 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2))
  {
    v16 = 4;
    strcpy(__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v7 = objc_claimAutoreleasedReturnValue();
    if (v16 < 0)
      operator delete(*(void **)__p);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_190F4B924(v7, v8, v9, v10, v11, v12, v13, v14);

    __assert_rtn("~AneDevicePriv", "AneDevice.mm", 132, "false && \"Device close failed\"");
  }
  v16 = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v16 < 0)
  {
    operator delete(*(void **)__p);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
LABEL_6:
    v5 = a1[1];
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v5;
    _os_log_impl(&dword_190DAF000, v4, OS_LOG_TYPE_INFO, "Closed ANEDevice = 0x%lx\n", __p, 0xCu);
  }
LABEL_7:

  return a1;
}

void sub_190F4B470(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_190F4B480(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F4B4A4(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 24);
  if (result)
  {
    sub_190F4B2E0(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t sub_190F4B4D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN12_GLOBAL__N_113AneDevicePrivEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN12_GLOBAL__N_113AneDevicePrivEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN12_GLOBAL__N_113AneDevicePrivEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN12_GLOBAL__N_113AneDevicePrivEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_190F4B864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190F4B878(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DCADE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_190F4B888(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DCADE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F4B8B8(uint64_t a1)
{
  return sub_190F4B2E0((_QWORD *)(a1 + 24));
}

void sub_190F4B8C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190EFF73C(&dword_190DAF000, a1, a3, "ANE Program Destroy failed.", a5, a6, a7, a8, 0);
  sub_190EFF74C();
}

void sub_190F4B8F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190EFF73C(&dword_190DAF000, a1, a3, "ANE Program Stop failed.", a5, a6, a7, a8, 0);
  sub_190EFF74C();
}

void sub_190F4B924(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190EFF73C(&dword_190DAF000, a1, a3, "ANE Device close failed.", a5, a6, a7, a8, 0);
  sub_190EFF74C();
}

uint64_t E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel::TensorToTensorBufferLoadingWeightsKernel(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5)
{
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  NSObject *v15;
  dispatch_queue_t v16;
  void *v17;
  const char *v18;
  NSObject *v19;
  FILE *v20;
  void *exception;
  _QWORD v23[5];
  _QWORD v24[3];
  _BYTE v25[8];
  _QWORD v26[3];
  std::string v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  FILE *v31;
  void (*v32)(void);

  E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)a1);
  *v10 = off_1E2D36330;
  v11 = v10 + 9;
  v12 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v27 = *(std::string *)a2;
  MEMORY[0x19401B434](v12, &v27);
  *v11 = v12;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    *(_QWORD *)(a1 + 80) = a3;
    *(_DWORD *)(a1 + 88) = a4;
    v13 = (std::string *)(a1 + 96);
    if ((*((char *)a5 + 23) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = a3;
    *(_DWORD *)(a1 + 88) = a4;
    v13 = (std::string *)(a1 + 96);
    if ((*((char *)a5 + 23) & 0x80000000) == 0)
    {
LABEL_6:
      v14 = *a5;
      v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      goto LABEL_9;
    }
  }
  std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
LABEL_9:
  *(_QWORD *)(a1 + 120) = 0;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = dispatch_queue_create("com.apple.mmap_iosurface.io", v15);
  v17 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v16;

  v27.__r_.__value_.__r.__words[0] = 0;
  v27.__r_.__value_.__l.__size_ = (std::string::size_type)&v27;
  v27.__r_.__value_.__r.__words[2] = 0x4012000000;
  v28 = sub_190F4BD0C;
  v29 = sub_190F4BD24;
  v30 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v18 = (const char *)a2;
  else
    v18 = *(const char **)a2;
  v31 = fopen(v18, "r");
  v32 = (void (*)(void))MEMORY[0x1E0C832F8];
  if (!*(_QWORD *)(v27.__r_.__value_.__l.__size_ + 48))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "TensorToTensorBufferLoadingWeightsKernel");
    std::string::basic_string[abi:ne180100]<0>(v24, "fopen failed");
    E5RT::Status::Status(v25, 8, v24);
    E5RT::E5RTError::E5RTError(exception, v26, v25);
  }
  v19 = *(NSObject **)(a1 + 120);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = sub_190F4BD50;
  v23[3] = &unk_1E2DCAE30;
  v23[4] = &v27;
  dispatch_async(v19, v23);
  _Block_object_dispose(&v27, 8);
  v20 = v31;
  v31 = 0;
  if (v20)
    v32();
  return a1;
}

void sub_190F4BBCC(_Unwind_Exception *a1)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel *v1;
  MIL::Blob::StorageReader **v2;

  std::unique_ptr<MIL::Blob::StorageReader>::~unique_ptr[abi:ne180100](v2);
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(v1);
  _Unwind_Resume(a1);
}

void sub_190F4BBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel *v26;
  uint64_t v27;

  MEMORY[0x19401CD90](v27, 0x20C4093837F09);
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(v26);
  _Unwind_Resume(a1);
}

void sub_190F4BC38(_Unwind_Exception *a1)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel *v1;

  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(v1);
  _Unwind_Resume(a1);
}

void sub_190F4BC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void (*a34)(void))
{
  uint64_t v34;
  MIL::Blob::StorageReader **v35;
  void **v36;
  void *v37;
  int v38;
  uint64_t v40;

  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      _Block_object_dispose(&a27, 8);
      v40 = a33;
      a33 = 0;
      if (v40)
        a34();

      if (*(char *)(v34 + 119) < 0)
        operator delete(*v36);
      std::unique_ptr<MIL::Blob::StorageReader>::~unique_ptr[abi:ne180100](v35);
      E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)v34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

uint64_t sub_190F4BD0C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  return result;
}

uint64_t sub_190F4BD24(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(void))(a1 + 56))();
  return result;
}

uint64_t sub_190F4BD50(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;
  uint64_t result;
  void *exception;
  void *v6;
  int *v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  _BYTE v11[8];
  _QWORD v12[2];
  __int128 v13;
  std::string::size_type v14;
  _QWORD v15[3];

  v1 = fileno(*(FILE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
  if (v1 == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "TensorToTensorBufferLoadingWeightsKernel_block_invoke");
    std::string::basic_string[abi:ne180100]<0>(&v13, "fileno failed");
    E5RT::Status::Status(&v10, 1, &v13);
    E5RT::E5RTError::E5RTError(exception, v15, &v10);
  }
  v2 = v1;
  lseek(v1, 0, 2);
  v3 = lseek(v2, 0, 1);
  lseek(v2, 0, 0);
  v12[0] = 0;
  v12[1] = v3;
  result = fcntl(v2, 44, v12);
  if ((_DWORD)result == -1)
  {
    v6 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "TensorToTensorBufferLoadingWeightsKernel_block_invoke");
    v7 = __error();
    std::to_string(&v10, *v7);
    v8 = std::string::insert(&v10, 0, "fcntl failed with code: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14 = v8->__r_.__value_.__r.__words[2];
    v13 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v11, 1, &v13);
    E5RT::E5RTError::E5RTError(v6, v15, v11);
  }
  return result;
}

void sub_190F4BEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;
  uint64_t v27;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a25 < 0)
  {
    operator delete(__p);
    if (a16 < 0)
    {
LABEL_5:
      operator delete(a11);
      if (*(char *)(v27 - 33) < 0)
      {
LABEL_10:
        operator delete(*(void **)(v27 - 56));
        if ((v26 & 1) == 0)
          goto LABEL_12;
        goto LABEL_11;
      }
LABEL_8:
      if (!v26)
LABEL_12:
        _Unwind_Resume(a1);
LABEL_11:
      __cxa_free_exception(v25);
      goto LABEL_12;
    }
  }
  else if (a16 < 0)
  {
    goto LABEL_5;
  }
  if (*(char *)(v27 - 33) < 0)
    goto LABEL_10;
  goto LABEL_8;
}

MIL::Blob::StorageReader **std::unique_ptr<MIL::Blob::StorageReader>::~unique_ptr[abi:ne180100](MIL::Blob::StorageReader **a1)
{
  MIL::Blob::StorageReader *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Blob::StorageReader::~StorageReader(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void *E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel::Launch(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  E5RT::BufferObject *Buffer;
  int v5;
  uint64_t Data;
  const void *v7;
  void *DataSpan;
  size_t v9;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  Buffer = (E5RT::BufferObject *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(a1, (const void **)(a1 + 96), a3);
  v5 = *(_DWORD *)(a1 + 88);
  switch(v5)
  {
    case 9:
      Data = MIL::Blob::StorageReader::GetDataView<signed char>();
      break;
    case 5:
      Data = MIL::Blob::StorageReader::GetDataView<float>();
      break;
    case 4:
      Data = MIL::Blob::StorageReader::GetDataView<MIL::Fp16>();
      break;
    default:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v14, "Launch");
      std::string::basic_string[abi:ne180100]<0>(v12, "Only fp32, fp16, and int8 are supported.");
      E5RT::Status::Status(v13, 2, v12);
      E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  v7 = (const void *)Data;
  DataSpan = (void *)E5RT::BufferObject::GetDataSpan(Buffer);
  return memcpy(DataSpan, v7, v9);
}

void sub_190F4C118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel::~TensorToTensorBufferLoadingWeightsKernel(id *this)
{
  MIL::Blob::StorageReader *v2;

  *this = off_1E2D36330;

  if (*((char *)this + 119) < 0)
  {
    operator delete(this[12]);
    v2 = (MIL::Blob::StorageReader *)this[9];
    this[9] = 0;
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = (MIL::Blob::StorageReader *)this[9];
  this[9] = 0;
  if (v2)
  {
LABEL_3:
    MIL::Blob::StorageReader::~StorageReader(v2);
    MEMORY[0x19401CD90]();
  }
LABEL_4:
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)this);
}

{
  MIL::Blob::StorageReader *v2;

  *this = off_1E2D36330;

  if (*((char *)this + 119) < 0)
  {
    operator delete(this[12]);
    v2 = (MIL::Blob::StorageReader *)this[9];
    this[9] = 0;
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = (MIL::Blob::StorageReader *)this[9];
    this[9] = 0;
    if (!v2)
    {
LABEL_4:
      E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)this);
      JUMPOUT(0x19401CD90);
    }
  }
  MIL::Blob::StorageReader::~StorageReader(v2);
  MEMORY[0x19401CD90]();
  goto LABEL_4;
}

E5RT::AsyncComputeScheduler *E5RT::AsyncComputeScheduler::AsyncComputeScheduler(E5RT::AsyncComputeScheduler *this)
{
  _QWORD *v2;
  dispatch_queue_t v3;
  void *v4;
  dispatch_queue_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 850045863;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 1018212795;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 41) = 0;
  v2 = (_QWORD *)((char *)this + 336);
  *((_QWORD *)this + 45) = 0;
  *((_BYTE *)this + 368) = 0;
  v3 = dispatch_queue_create("com.apple.e5rt.serialCommandQueue", 0);
  v4 = (void *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = v3;

  v5 = dispatch_queue_create("com.apple.e5rt.concurrentExecutionQueue", MEMORY[0x1E0C80D50]);
  v6 = (void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = v5;

  v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0CBBEC0]), "initWithDispatchQueue:", *((_QWORD *)this + 34));
  v8 = (void *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = v7;

  v12[0] = &off_1E2DCAEA0;
  v12[1] = this;
  v13 = v12;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v12, v2);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return this;
}

void sub_190F4C440(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::condition_variable *v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(v1 + 360);
  if (v9 == v7)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
    v7 = *(_QWORD **)(v1 + 360);
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v10))(v7);
LABEL_6:
  std::condition_variable::~condition_variable(v6);

  std::unordered_map<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>::~unordered_map[abi:ne180100](v5);
  std::unordered_map<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>::~unordered_map[abi:ne180100](v4);
  std::unordered_map<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>::~unordered_map[abi:ne180100](v3);
  std::unordered_map<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>::~unordered_map[abi:ne180100](v2);
  std::unordered_map<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>::~unordered_map[abi:ne180100](v1 + 64);
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_map<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::unordered_map<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v5 = (_QWORD *)v2[6];
      if (v5 == v2 + 3)
      {
        v5 = v2 + 3;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_7;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_map<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD **v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *v2;
      std::__hash_table<std::unique_ptr<E5RT::AsyncTask>,std::hash<std::unique_ptr<E5RT::AsyncTask>>,std::equal_to<std::unique_ptr<E5RT::AsyncTask>>,std::allocator<std::unique_ptr<E5RT::AsyncTask>>>::__deallocate_node((uint64_t)(v2 + 3), v2[5]);
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        operator delete(v6);
      operator delete(v2);
      v2 = (_QWORD **)v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void E5RT::AsyncComputeScheduler::RemoveTaskTimeoutTimer(E5RT::AsyncComputeScheduler *this, E5RT::AsyncTask *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  NSObject *v5;
  id *v6;
  E5RT::AsyncTask *v7;
  void *__p;
  char v9;

  v7 = a2;
  v2 = (_QWORD *)((char *)this + 144);
  v3 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((_QWORD *)this + 18, (uint64_t *)&v7);
  if (v3)
  {
    v4 = v3;
    v5 = (id)v3[3];
    if (!dispatch_source_testcancel(v5))
      dispatch_source_cancel(v5);
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v2, v4, (uint64_t)&__p);
    v6 = (id *)__p;
    __p = 0;
    if (v6)
    {
      if (v9)

      operator delete(v6);
    }

  }
}

_QWORD *E5RT::AsyncComputeScheduler::RemoveTaskCompletionHandler@<X0>(E5RT::AsyncComputeScheduler *this@<X0>, E5RT::AsyncTask *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  E5RT::AsyncTask *v12;
  void *__p;
  char v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v4 = (_QWORD *)((char *)this + 104);
  result = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((_QWORD *)this + 13, (uint64_t *)&v12);
  v6 = result;
  if (!result)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return result;
  }
  v7 = (_QWORD *)result[6];
  if (v7)
  {
    if (v7 == v6 + 3)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _QWORD *))(*v7 + 24))(v7, v15);
    }
    else
    {
      v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v16 = 0;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v4, v6, (uint64_t)&__p);
  v8 = __p;
  __p = 0;
  if (v8)
  {
    if (v14)
    {
      v9 = (_QWORD *)v8[6];
      if (v9 == v8 + 3)
      {
        v10 = 4;
        v9 = v8 + 3;
        goto LABEL_13;
      }
      if (v9)
      {
        v10 = 5;
LABEL_13:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
    }
    operator delete(v8);
  }
  if (v16)
  {
    if (v16 == v15)
    {
      *(_QWORD *)(a3 + 24) = a3;
      (*(void (**)(_QWORD *, uint64_t))(v15[0] + 24))(v15, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = v16;
      v16 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  *(_BYTE *)(a3 + 32) = 1;
  result = v16;
  if (v16 == v15)
  {
    v11 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_190F4C8F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void E5RT::AsyncComputeScheduler::CleanupCompletedTask(uint64_t a1, E5RT::AsyncTask *a2, uint64_t *a3)
{
  void **p_p;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t StreamId;
  E5RT::AsyncTask *v24;
  void *__p;
  uint64_t v26;
  void **v27;
  char v28;
  _BYTE v29[24];
  _BYTE *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v29[0] = 0;
  v31 = 0;
  std::mutex::lock((std::mutex *)a1);
  E5RT::AsyncComputeScheduler::RemoveTaskTimeoutTimer((E5RT::AsyncComputeScheduler *)a1, a2);
  E5RT::AsyncComputeScheduler::RemoveTaskCompletionHandler((E5RT::AsyncComputeScheduler *)a1, a2, (uint64_t)&__p);
  std::__optional_storage_base<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>,false>>((uint64_t)v29, (uint64_t)&__p);
  if (v28)
  {
    p_p = v27;
    if (v27 == &__p)
    {
      v7 = 4;
      p_p = &__p;
      goto LABEL_6;
    }
    if (v27)
    {
      v7 = 5;
LABEL_6:
      (*((void (**)(void))*p_p + v7))();
    }
  }
  v24 = a2;
  StreamId = E5RT::AsyncTask::GetStreamId(a2);
  __p = &StreamId;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 64, (unint64_t *)&StreamId, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 24;
  v9 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v8, (uint64_t *)&v24);
  if (v9)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v8, v9, (uint64_t)&__p);
    v10 = __p;
    __p = 0;
    if (v10)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<E5RT::AsyncTask>,void *>>>::operator()[abi:ne180100]((uint64_t)&v26, v10);
  }
  v24 = 0;
  __p = &StreamId;
  if (*((_QWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 64, (unint64_t *)&StreamId, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 6)|| (std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__erase_unique<unsigned long long>((_QWORD *)(a1 + 64), (unint64_t *)&StreamId), !*(_BYTE *)(a1 + 368))|| *(_QWORD *)(a1 + 88))
  {
    v11 = 0;
    v12 = (uint64_t)v24;
    v24 = 0;
    if (!v12)
      goto LABEL_28;
LABEL_12:
    if (*(char *)(v12 + 127) < 0)
      operator delete(*(void **)(v12 + 104));
    v13 = *(_QWORD **)(v12 + 48);
    if (v13)
    {
      do
      {
        v14 = (_QWORD *)*v13;
        operator delete(v13);
        v13 = v14;
      }
      while (v14);
    }
    v15 = *(void **)(v12 + 32);
    *(_QWORD *)(v12 + 32) = 0;
    if (v15)
      operator delete(v15);
    v16 = *(_QWORD **)(v12 + 24);
    if (v16 == (_QWORD *)v12)
    {
      v17 = 4;
      v16 = (_QWORD *)v12;
    }
    else
    {
      if (!v16)
      {
LABEL_27:
        MEMORY[0x19401CD90](v12, 0x10B2C404C099A3DLL);
        goto LABEL_28;
      }
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
    goto LABEL_27;
  }
  *(_BYTE *)(a1 + 368) = 0;
  std::mutex::unlock((std::mutex *)a1);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 288));
  v11 = 1;
  v12 = (uint64_t)v24;
  v24 = 0;
  if (v12)
    goto LABEL_12;
LABEL_28:
  if ((v11 & 1) == 0)
    std::mutex::unlock((std::mutex *)a1);
  if (v31)
  {
    v18 = *a3;
    *a3 = 0;
    v22 = v18;
    if (!v30)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, &v22);
    v19 = v22;
    v22 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (v31)
    {
      v20 = v30;
      if (v30 == v29)
      {
        v21 = 4;
        v20 = v29;
      }
      else
      {
        if (!v30)
          return;
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
    }
  }
}

void sub_190F4CBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<E5RT::AsyncTask>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 127) < 0)
    {
      operator delete(*(void **)(v2 + 104));
      v3 = *(_QWORD **)(v2 + 48);
      if (!v3)
        goto LABEL_5;
    }
    else
    {
      v3 = *(_QWORD **)(v2 + 48);
      if (!v3)
        goto LABEL_5;
    }
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
LABEL_5:
    v5 = *(void **)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v5)
      operator delete(v5);
    v6 = *(_QWORD **)(v2 + 24);
    if (v6 == (_QWORD *)v2)
    {
      v7 = 4;
      v6 = (_QWORD *)v2;
    }
    else
    {
      if (!v6)
      {
LABEL_14:
        MEMORY[0x19401CD90](v2, 0x10B2C404C099A3DLL);
        return a1;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_14;
  }
  return a1;
}

void E5RT::AsyncComputeScheduler::ProcessEventNotification(std::mutex *this, const E5RT::AsyncEvent *a2, unint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int8x8_t v7;
  _QWORD *v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *i;
  unint64_t v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  E5RT::AsyncTask *v40;
  uint64_t DependentEvents;
  _QWORD *v42;
  void *v43;
  NSObject *v44;
  _QWORD *v45;
  _QWORD **v46;
  void *exception;
  _QWORD block[6];
  _QWORD v49[3];
  char v50[8];
  unint64_t v51;
  E5RT::AsyncEvent *v52;
  void *__p[2];
  char v54;

  v51 = a3;
  v52 = a2;
  std::mutex::lock(this);
  v5 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(&this[3].__m_.__opaque[24], (uint64_t *)&v52);
  v6 = v5;
  if (v5)
  {
    v7 = (int8x8_t)v5[4];
    if (!*(_QWORD *)&v7)
      goto LABEL_24;
    v8 = v5 + 3;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = a3;
      if (*(_QWORD *)&v7 <= a3)
        v10 = a3 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & a3;
    }
    v12 = *(_QWORD ***)(*v8 + 8 * v10);
    if (!v12 || (v13 = *v12) == 0)
    {
LABEL_24:
      if (std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52))
      {
        v17 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52);
        if (!v17)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        for (i = (_QWORD *)v17[4]; i; i = (_QWORD *)*i)
        {
          v19 = i[4];
          if (v51 >= v19)
          {
            if (v19 >= v51)
            {
              exception = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(__p, "ProcessEventNotification");
              std::string::basic_string[abi:ne180100]<0>(v49, "There should be no pending dependent tasks if we unsubscribed for notifications from the event.");
              E5RT::Status::Status(v50, 11, v49);
              E5RT::E5RTError::E5RTError(exception, __p, v50);
            }
            ++i;
          }
        }
      }
      goto LABEL_42;
    }
    if (v9.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v7 - 1;
      while (1)
      {
        v16 = v13[1];
        if (v16 == a3)
        {
          if (v13[2] == a3)
            goto LABEL_32;
        }
        else if ((v16 & v14) != v10)
        {
          goto LABEL_24;
        }
        v13 = (_QWORD *)*v13;
        if (!v13)
          goto LABEL_24;
      }
    }
    while (1)
    {
      v15 = v13[1];
      if (v15 == a3)
      {
        if (v13[2] == a3)
        {
LABEL_32:
          std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v8, v13, (uint64_t)__p);
          v20 = __p[0];
          __p[0] = 0;
          if (v20)
            operator delete(v20);
          if (!v6[6])
          {
            std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(&this[3].__m_.__opaque[24], v6, (uint64_t)__p);
            v21 = __p[0];
            __p[0] = 0;
            if (v21)
            {
              if (v54)
              {
                v22 = (_QWORD *)v21[5];
                if (v22)
                {
                  do
                  {
                    v23 = (_QWORD *)*v22;
                    operator delete(v22);
                    v22 = v23;
                  }
                  while (v23);
                }
                v24 = (void *)v21[3];
                v21[3] = 0;
                if (v24)
                  operator delete(v24);
              }
              operator delete(v21);
            }
          }
          goto LABEL_42;
        }
      }
      else
      {
        if (v15 >= *(_QWORD *)&v7)
          v15 %= *(_QWORD *)&v7;
        if (v15 != v10)
          goto LABEL_24;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_24;
    }
  }
  if (std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52))
  {
    v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "ProcessEventNotification");
    std::string::basic_string[abi:ne180100]<0>(v49, "There should be no pending dependent tasks if we unsubscribed for notifications from the event.");
    E5RT::Status::Status(v50, 11, v49);
    E5RT::E5RTError::E5RTError(v11, __p, v50);
  }
LABEL_42:
  if (!std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52))goto LABEL_89;
  __p[0] = &v52;
  v25 = (uint64_t **)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)&this[2].__m_.__opaque[48], (uint64_t *)&v52, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
  v26 = v25;
  v27 = v25[4];
  if (!v27)
    goto LABEL_89;
  v28 = v25[4];
  while (1)
  {
    v29 = v28[4];
    if (v51 >= v29)
      break;
LABEL_45:
    v28 = (uint64_t *)*v28;
    if (!v28)
      goto LABEL_89;
  }
  if (v29 < v51)
  {
    ++v28;
    goto LABEL_45;
  }
  v30 = v25[4];
  while (1)
  {
    while (1)
    {
      v31 = v30[4];
      if (v51 >= v31)
        break;
      v30 = (uint64_t *)*v30;
      if (!v30)
        goto LABEL_54;
    }
    if (v31 >= v51)
      break;
    v30 = (uint64_t *)v30[1];
    if (!v30)
LABEL_54:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  if (!v30[8])
    goto LABEL_89;
  v32 = v25[4];
  while (1)
  {
    while (1)
    {
      v33 = v32[4];
      if (v51 >= v33)
        break;
      v32 = (uint64_t *)*v32;
      if (!v32)
        goto LABEL_61;
    }
    if (v33 >= v51)
      break;
    v32 = (uint64_t *)v32[1];
    if (!v32)
LABEL_61:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  v34 = (_QWORD *)v32[7];
  while (2)
  {
    v35 = v27;
    while (2)
    {
      v36 = v35[4];
      if (v51 < v36)
      {
LABEL_65:
        v35 = (uint64_t *)*v35;
        if (!v35)
          goto LABEL_88;
        continue;
      }
      break;
    }
    if (v36 < v51)
    {
      ++v35;
      goto LABEL_65;
    }
    v37 = v27;
    while (1)
    {
      while (1)
      {
        v38 = v37[4];
        if (v51 >= v38)
          break;
        v37 = (uint64_t *)*v37;
        if (!v37)
          goto LABEL_96;
      }
      if (v38 >= v51)
        break;
      v37 = (uint64_t *)v37[1];
      if (!v37)
LABEL_96:
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    if (v34)
    {
      while (1)
      {
        while (1)
        {
          v39 = v27[4];
          if (v51 >= v39)
            break;
          v27 = (uint64_t *)*v27;
          if (!v27)
            goto LABEL_97;
        }
        if (v39 >= v51)
          break;
        v27 = (uint64_t *)v27[1];
        if (!v27)
LABEL_97:
          std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
      }
      v40 = (E5RT::AsyncTask *)v34[2];
      DependentEvents = E5RT::AsyncTask::GetDependentEvents(v40);
      E5RT::AsyncTask::RemoveDependency(v40, v52);
      v42 = (_QWORD *)*v34;
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v27 + 5, v34, (uint64_t)__p);
      v43 = __p[0];
      __p[0] = 0;
      if (v43)
        operator delete(v43);
      if (!v27[8])
        std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::__erase_unique<unsigned long long>(v26 + 3, &v51);
      if (!*(_QWORD *)(DependentEvents + 24))
      {
        E5RT::AsyncTask::MarkDispatched((uint64_t)v40);
        v44 = *(NSObject **)this[4].__m_.__opaque;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_190F4D428;
        block[3] = &__block_descriptor_48_e5_v8__0l;
        block[4] = this;
        block[5] = v40;
        dispatch_async(v44, block);
      }
      v27 = v26[4];
      v34 = v42;
      if (v27)
        continue;
    }
    break;
  }
LABEL_88:
  if (!v26[5])
  {
    v45 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52);
    if (v45)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(&this[2].__m_.__opaque[48], v45, (uint64_t)__p);
      v46 = (_QWORD **)__p[0];
      __p[0] = 0;
      if (v46)
      {
        if (v54)
          std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy((uint64_t)(v46 + 3), v46[4]);
        operator delete(v46);
      }
    }
  }
LABEL_89:
  std::mutex::unlock(this);
}

void sub_190F4D2E8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_190F4D2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::mutex *v30;
  void *v31;
  int v32;

  E5RT::Status::~Status((E5RT::Status *)&a22);
  if (a21 < 0)
    operator delete(__p);
  if (a30 < 0)
  {
    operator delete(a25);
    if ((v32 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v32)
  {
LABEL_8:
    std::mutex::unlock(v30);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

uint64_t sub_190F4D428(uint64_t a1)
{
  uint64_t v2;
  E5RT::AsyncTask *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  E5RT::AsyncTask::SafeExecuteTask(*(E5RT::AsyncTask **)(a1 + 40), &v6);
  v3 = *(E5RT::AsyncTask **)(a1 + 40);
  v5 = v6;
  v6 = 0;
  E5RT::AsyncComputeScheduler::CleanupCompletedTask(v2, v3, &v5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190F4D49C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  sub_190F51B7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5RT::AsyncComputeScheduler::CancelTimedOutAsyncTask(std::mutex *this, E5RT::AsyncTask *a2)
{
  NSObject *v4;
  _QWORD v5[6];

  std::mutex::lock(this);
  if ((E5RT::AsyncTask::Dispatched(a2) & 1) != 0)
  {
    std::mutex::unlock(this);
  }
  else
  {
    E5RT::AsyncComputeScheduler::RemoveTaskDependencies((E5RT::AsyncComputeScheduler *)this, a2);
    std::mutex::unlock(this);
    v4 = *(NSObject **)this[4].__m_.__opaque;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_190F4D8C8;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = this;
    v5[5] = a2;
    dispatch_async(v4, v5);
  }
}

void sub_190F4D560(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::AsyncComputeScheduler::RemoveTaskDependencies(E5RT::AsyncComputeScheduler *this, E5RT::AsyncTask *a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  uint64_t **v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  uint64_t **v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  char *v30;
  _QWORD *v31;
  _QWORD **v32;
  _QWORD *v33;
  E5RT::AsyncTask *v34;
  void *__p[2];
  char v36;

  v34 = a2;
  result = E5RT::AsyncTask::Dispatched(a2);
  if ((result & 1) == 0)
  {
    result = E5RT::AsyncTask::GetDependentEvents(a2);
    v5 = *(_QWORD **)(result + 16);
    if (v5)
    {
      v6 = (_QWORD *)((char *)this + 184);
      v33 = (_QWORD *)((char *)this + 224);
      do
      {
        __p[0] = v5 + 2;
        v7 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v6, v5 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        v8 = v7;
        v9 = v5[3];
        v11 = (uint64_t **)(v7 + 4);
        v10 = (char *)v7[4];
        if (v10)
        {
          while (1)
          {
            while (1)
            {
              v12 = v10;
              v13 = *((_QWORD *)v10 + 4);
              if (v9 >= v13)
                break;
              v10 = *(char **)v12;
              v11 = (uint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_12;
            }
            if (v13 >= v9)
              break;
            v10 = (char *)*((_QWORD *)v12 + 1);
            if (!v10)
            {
              v11 = (uint64_t **)(v12 + 8);
              goto LABEL_12;
            }
          }
        }
        else
        {
          v12 = (char *)(v7 + 4);
LABEL_12:
          v14 = v12;
          v12 = (char *)operator new(0x50uLL);
          *((_QWORD *)v12 + 4) = v9;
          *(_OWORD *)(v12 + 40) = 0u;
          *(_OWORD *)(v12 + 56) = 0u;
          *((_DWORD *)v12 + 18) = 1065353216;
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 2) = v14;
          *v11 = (uint64_t *)v12;
          v15 = *(_QWORD *)v8[3];
          v16 = (uint64_t *)v12;
          if (v15)
          {
            v8[3] = v15;
            v16 = *v11;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v8[4], v16);
          ++v8[5];
        }
        v17 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((_QWORD *)v12 + 5, (uint64_t *)&v34);
        if (v17)
        {
          std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove((_QWORD *)v12 + 5, v17, (uint64_t)__p);
          v18 = __p[0];
          __p[0] = 0;
          if (v18)
            operator delete(v18);
        }
        __p[0] = v5 + 2;
        v19 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v6, v5 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        v20 = v19;
        v22 = (uint64_t **)(v19 + 4);
        v21 = (char *)v19[4];
        v23 = v5[3];
        if (v21)
        {
          while (1)
          {
            while (1)
            {
              v24 = v21;
              v25 = *((_QWORD *)v21 + 4);
              if (v23 >= v25)
                break;
              v21 = *(char **)v24;
              v22 = (uint64_t **)v24;
              if (!*(_QWORD *)v24)
                goto LABEL_25;
            }
            if (v25 >= v23)
              break;
            v21 = (char *)*((_QWORD *)v24 + 1);
            if (!v21)
            {
              v22 = (uint64_t **)(v24 + 8);
              goto LABEL_25;
            }
          }
        }
        else
        {
          v24 = (char *)(v19 + 4);
LABEL_25:
          v26 = v24;
          v24 = (char *)operator new(0x50uLL);
          *((_QWORD *)v24 + 4) = v23;
          *(_OWORD *)(v24 + 40) = 0u;
          *(_OWORD *)(v24 + 56) = 0u;
          *((_DWORD *)v24 + 18) = 1065353216;
          *(_QWORD *)v24 = 0;
          *((_QWORD *)v24 + 1) = 0;
          *((_QWORD *)v24 + 2) = v26;
          *v22 = (uint64_t *)v24;
          v27 = *(_QWORD *)v20[3];
          v28 = (uint64_t *)v24;
          if (v27)
          {
            v20[3] = v27;
            v28 = *v22;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v20[4], v28);
          ++v20[5];
        }
        if (!*((_QWORD *)v24 + 8))
        {
          __p[0] = v5 + 2;
          v29 = (uint64_t **)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v6, v5 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
          std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::__erase_unique<unsigned long long>(v29 + 3, v5 + 3);
        }
        __p[0] = v5 + 2;
        if (!std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v6, v5 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[5])
        {
          v31 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v6, v5 + 2);
          if (v31)
          {
            std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v6, v31, (uint64_t)__p);
            v32 = (_QWORD **)__p[0];
            __p[0] = 0;
            if (v32)
            {
              if (v36)
                std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy((uint64_t)(v32 + 3), v32[4]);
              operator delete(v32);
            }
          }
        }
        __p[0] = v5 + 2;
        v30 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v33, v5 + 2, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)v30 + 3, v5 + 3);
        __p[0] = v5 + 2;
        result = (uint64_t)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v33, v5 + 2, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
        if (!*(_QWORD *)(result + 48))
          result = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__erase_unique<E5RT::AsyncEvent const*>(v33, v5 + 2);
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
  }
  return result;
}

void sub_190F4D8C8(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  uint64_t v5;
  E5RT::AsyncTask *v6;
  uint64_t v7;
  _BYTE v8[8];
  std::string v9;
  void *__p[2];
  std::string::size_type v11;

  v2 = *(_QWORD *)(a1 + 32);
  E5RT::AsyncTask::GetAsyncTaskName(*(E5RT::AsyncTask **)(a1 + 40));
  std::operator+<char>();
  v3 = std::string::append(&v9, " has timed out.");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v11 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  E5RT::Status::Status(v8, 10, __p);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v9.__r_.__value_.__r.__words[1] = xmmword_191A79500;
  strcpy(v9.__r_.__value_.__l.__data_, "CancelTimedOutAsyncTask_block_invoke");
  v5 = operator new();
  E5RT::E5RTError::E5RTError(v5, &v9, v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  E5RT::AsyncTask::SignalCompletionEvent(*(E5RT::AsyncTask **)(a1 + 40));
  v6 = *(E5RT::AsyncTask **)(a1 + 40);
  v7 = v5;
  E5RT::AsyncComputeScheduler::CleanupCompletedTask(v2, v6, &v7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  E5RT::Status::~Status((E5RT::Status *)v8);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_190F4DA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    E5RT::Status::~Status((E5RT::Status *)&a11);
    if ((a23 & 0x80000000) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else
  {
    E5RT::Status::~Status((E5RT::Status *)&a11);
    if ((a23 & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(__p);
  goto LABEL_6;
}

void sub_190F4DAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    JUMPOUT(0x190F4DAC8);
  JUMPOUT(0x190F4DAC0);
}

void sub_190F4DAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x190F4DAC4);
  JUMPOUT(0x190F4DAC8);
}

void E5RT::AsyncComputeScheduler::SubmitAsyncCompute(uint64_t a1, E5RT::AsyncTask **a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t DependentEvents;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  _QWORD **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t **v21;
  uint64_t v22;
  void *v23;
  unint64_t LastSignaledValue;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t **v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  dispatch_time_t v47;
  _QWORD *v48;
  void *v49;
  NSObject *v50;
  NSObject *v51;
  void *v52;
  void *exception;
  uint64_t v54;
  char v55;
  _QWORD handler[6];
  _QWORD block[13];
  char v58[8];
  unint64_t v59;
  E5RT::AsyncEvent *v60;
  E5RT::AsyncTask *v61;
  std::unique_lock<std::mutex> __lk;
  uint64_t StreamId;
  _QWORD v64[3];
  uint64_t *v65[3];
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v65, "SubmitAsyncCompute");
    std::string::basic_string[abi:ne180100]<0>(v64, "Invalid async task.");
    E5RT::Status::Status(&__lk, 1, v64);
    E5RT::E5RTError::E5RTError(exception, v65, &__lk);
  }
  StreamId = E5RT::AsyncTask::GetStreamId(*a2);
  DependentEvents = E5RT::AsyncTask::GetDependentEvents(*a2);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)a1;
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)a1);
  if (*(_BYTE *)(a1 + 368))
  {
    v11 = *(_QWORD *)(a1 + 360);
    if (!v11)
    {
      v67 = 0;
      goto LABEL_10;
    }
    if (v11 != a1 + 336)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      v67 = (_BYTE *)v12;
      if (v12)
        goto LABEL_8;
LABEL_10:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v67 = v66;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 24))(v11, v66);
    v12 = (uint64_t)v67;
    if (!v67)
      goto LABEL_10;
LABEL_8:
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 288), &__lk);
      v12 = (uint64_t)v67;
      if (!v67)
        goto LABEL_10;
    }
    v13 = v67;
    if (v67 == v66)
    {
      v14 = 4;
      v13 = v66;
    }
    else
    {
      if (!v67)
        goto LABEL_16;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
LABEL_16:
  v61 = *a2;
  v65[0] = &StreamId;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 64, (unint64_t *)&StreamId, (uint64_t)&std::piecewise_construct, v65);
  std::__hash_table<std::unique_ptr<E5RT::AsyncTask>,std::hash<std::unique_ptr<E5RT::AsyncTask>>,std::equal_to<std::unique_ptr<E5RT::AsyncTask>>,std::allocator<std::unique_ptr<E5RT::AsyncTask>>>::__emplace_unique_key_args<std::unique_ptr<E5RT::AsyncTask>,std::unique_ptr<E5RT::AsyncTask>>((uint64_t)(v15 + 24), (uint64_t *)a2, (uint64_t *)a2);
  if (*(_BYTE *)(a3 + 32))
  {
    v65[0] = (uint64_t *)&v61;
    v17 = (_QWORD **)(std::__hash_table<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::__unordered_map_hasher<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,true>,std::__unordered_map_equal<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::equal_to<E5RT::AsyncTask *>,std::hash<E5RT::AsyncTask *>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>>>::__emplace_unique_key_args<E5RT::AsyncTask *,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncTask * const&>,std::tuple<>>(a1 + 104, (uint64_t *)&v61, (uint64_t)&std::piecewise_construct, v65)+ 6);
    v16 = *v17;
    *v17 = 0;
    if (v16 == v17 - 3)
    {
      v18 = 4;
      v16 = v17 - 3;
    }
    else
    {
      if (!v16)
        goto LABEL_22;
      v18 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v18))();
LABEL_22:
    v19 = (_QWORD *)(a3 + 24);
    v20 = *(_QWORD **)(a3 + 24);
    if (v20)
    {
      if (v20 == (_QWORD *)a3)
      {
        *v17 = v17 - 3;
        (*(void (**)(_QWORD, _QWORD **))(*(_QWORD *)*v19 + 24))(*v19, v17 - 3);
      }
      else
      {
        *v17 = v20;
        *v19 = 0;
      }
    }
    else
    {
      *v17 = 0;
    }
  }
  v54 = a4;
  v55 = a5;
  v21 = *(uint64_t ***)(DependentEvents + 16);
  if (!v21)
    goto LABEL_71;
  v22 = 0;
  do
  {
    v60 = (E5RT::AsyncEvent *)v21[2];
    E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>((uint64_t)v60);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = (unint64_t)v21[3];
    LastSignaledValue = E5RT::AsyncEvent::GetLastSignaledValue(v60);
    if (LastSignaledValue >= v59)
    {
      v21 = (uint64_t **)*v21;
      E5RT::AsyncTask::RemoveDependency(v61, v60);
    }
    else
    {
      v65[0] = (uint64_t *)&v60;
      v25 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(a1 + 184, (uint64_t *)&v60, (uint64_t)&std::piecewise_construct, v65);
      v26 = v25;
      v28 = (uint64_t **)(v25 + 4);
      v27 = (uint64_t *)v25[4];
      v29 = v59;
      if (v27)
      {
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v27;
            v31 = v27[4];
            if (v59 >= v31)
              break;
            v27 = *v30;
            v28 = v30;
            if (!*v30)
              goto LABEL_37;
          }
          if (v31 >= v59)
            break;
          v27 = v30[1];
          if (!v27)
          {
            v28 = v30 + 1;
            goto LABEL_37;
          }
        }
        v32 = (char *)v30;
      }
      else
      {
        v30 = (uint64_t **)(v25 + 4);
LABEL_37:
        v32 = (char *)operator new(0x50uLL);
        *((_QWORD *)v32 + 4) = v29;
        *(_OWORD *)(v32 + 40) = 0u;
        *(_OWORD *)(v32 + 56) = 0u;
        *((_DWORD *)v32 + 18) = 1065353216;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = v30;
        *v28 = (uint64_t *)v32;
        v33 = *(_QWORD *)v26[3];
        v34 = (uint64_t *)v32;
        if (v33)
        {
          v26[3] = v33;
          v34 = *v28;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v26[4], v34);
        ++v26[5];
      }
      std::__hash_table<E5RT::AsyncTask *,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,std::allocator<E5RT::AsyncTask *>>::__emplace_unique_key_args<E5RT::AsyncTask *,E5RT::AsyncTask * const&>((uint64_t)(v32 + 40), (uint64_t *)&v61, &v61);
      if (std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>((_QWORD *)(a1 + 224), (uint64_t *)&v60))
      {
        v35 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((_QWORD *)(a1 + 224), (uint64_t *)&v60);
        if (!v35)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v36 = (int8x8_t)v35[4];
        if (v36)
        {
          v37 = (uint8x8_t)vcnt_s8(v36);
          v37.i16[0] = vaddlv_u8(v37);
          if (v37.u32[0] > 1uLL)
          {
            v38 = v59;
            if (v59 >= *(_QWORD *)&v36)
              v38 = v59 % *(_QWORD *)&v36;
          }
          else
          {
            v38 = (*(_QWORD *)&v36 - 1) & v59;
          }
          v39 = *(_QWORD **)(v35[3] + 8 * v38);
          if (v39)
          {
            v40 = (_QWORD *)*v39;
            if (v40)
            {
              if (v37.u32[0] < 2uLL)
              {
                v41 = *(_QWORD *)&v36 - 1;
                while (1)
                {
                  v43 = v40[1];
                  if (v59 == v43)
                  {
                    if (v40[2] == v59)
                      goto LABEL_66;
                  }
                  else if ((v43 & v41) != v38)
                  {
                    goto LABEL_64;
                  }
                  v40 = (_QWORD *)*v40;
                  if (!v40)
                    goto LABEL_64;
                }
              }
              do
              {
                v42 = v40[1];
                if (v59 == v42)
                {
                  if (v40[2] == v59)
                    goto LABEL_66;
                }
                else
                {
                  if (v42 >= *(_QWORD *)&v36)
                    v42 %= *(_QWORD *)&v36;
                  if (v42 != v38)
                    break;
                }
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
          }
        }
      }
LABEL_64:
      v65[0] = (uint64_t *)&v60;
      v44 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(a1 + 224, (uint64_t *)&v60, (uint64_t)&std::piecewise_construct, v65);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)(v44 + 24), &v59, &v59);
      if (!v23)
      {
        v52 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v65, "SubmitAsyncCompute");
        std::string::basic_string[abi:ne180100]<0>(v64, "ioSurfaceSharedEvent is nil, the listener will never be called.");
        E5RT::Status::Status(v58, 11, v64);
        E5RT::E5RTError::E5RTError(v52, v65, v58);
      }
      v45 = *(_QWORD *)(a1 + 280);
      block[6] = MEMORY[0x1E0C809B0];
      block[7] = 3221225472;
      block[8] = sub_190F4E3C0;
      block[9] = &__block_descriptor_56_e33_v24__0__IOSurfaceSharedEvent_8Q16l;
      block[10] = a1;
      block[11] = v60;
      block[12] = v59;
      objc_msgSend(v23, "notifyListener:atValue:block:", v45);
LABEL_66:
      v21 = (uint64_t **)*v21;
      ++v22;
    }

  }
  while (v21);
  if (v22)
  {
    if (v55)
    {
      v46 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, *(dispatch_queue_t *)(a1 + 272));
      v47 = dispatch_time(0, 1000000 * v54);
      dispatch_source_set_timer(v46, v47, 0xFFFFFFFFFFFFFFFFLL, 0);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 3221225472;
      handler[2] = sub_190F4E46C;
      handler[3] = &__block_descriptor_48_e5_v8__0l;
      handler[4] = a1;
      handler[5] = v61;
      dispatch_source_set_event_handler(v46, handler);
      v65[0] = (uint64_t *)&v61;
      v48 = std::__hash_table<std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::__unordered_map_hasher<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,true>,std::__unordered_map_equal<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::equal_to<E5RT::AsyncTask *>,std::hash<E5RT::AsyncTask *>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>>>::__emplace_unique_key_args<E5RT::AsyncTask *,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncTask * const&>,std::tuple<>>(a1 + 144, (uint64_t *)&v61, (uint64_t)&std::piecewise_construct, v65);
      v49 = (void *)v48[3];
      v48[3] = v46;
      v50 = v46;

      dispatch_activate(v50);
    }
  }
  else
  {
LABEL_71:
    E5RT::AsyncTask::MarkDispatched((uint64_t)v61);
    v51 = *(NSObject **)(a1 + 264);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_190F4E3D0;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = a1;
    block[5] = v61;
    dispatch_async(v51, block);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_190F4E22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::mutex *a36,char a37)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_190F4E3C0(uint64_t a1)
{
  E5RT::AsyncComputeScheduler::ProcessEventNotification(*(std::mutex **)(a1 + 32), *(const E5RT::AsyncEvent **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_190F4E3D0(uint64_t a1)
{
  uint64_t v2;
  E5RT::AsyncTask *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  E5RT::AsyncTask::SafeExecuteTask(*(E5RT::AsyncTask **)(a1 + 40), &v6);
  v3 = *(E5RT::AsyncTask **)(a1 + 40);
  v5 = v6;
  v6 = 0;
  E5RT::AsyncComputeScheduler::CleanupCompletedTask(v2, v3, &v5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190F4E444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  sub_190F51B7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F4E46C(uint64_t a1)
{
  E5RT::AsyncComputeScheduler::CancelTimedOutAsyncTask(*(std::mutex **)(a1 + 32), *(E5RT::AsyncTask **)(a1 + 40));
}

void E5RT::AsyncComputeScheduler::FlushStreamTasks(std::mutex *this, unint64_t a2)
{
  int8x8_t v4;
  std::mutex *v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t CompletionEventValue;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  E5RT::AsyncEvent *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  unint64_t v61;
  unint64_t CompletionEvent;
  void *v63[2];
  void *__p[2];
  int v65;
  unint64_t v66;
  void *p_CompletionEvent;
  uint64_t v68;
  _BYTE v69[24];
  _BYTE *v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v66 = a2;
  *(_OWORD *)v63 = 0u;
  *(_OWORD *)__p = 0u;
  v65 = 1065353216;
  std::mutex::lock(this);
  v4 = *(int8x8_t *)this[1].__m_.__opaque;
  if (v4)
  {
    v5 = this + 1;
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v4 <= a2)
        v7 = a2 % *(_QWORD *)&v4;
    }
    else
    {
      v7 = (*(_QWORD *)&v4 - 1) & a2;
    }
    v8 = *(_QWORD **)(v5->__m_.__sig + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (*v8)
      {
        v10 = *(_QWORD *)&v4 - 1;
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = v9[1];
            if (v11 == a2)
            {
              if (v9[2] == a2)
                goto LABEL_22;
            }
            else if ((v11 & v10) != v7)
            {
              goto LABEL_136;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_136;
          }
        }
        while (1)
        {
          v12 = v9[1];
          if (v12 == a2)
            break;
          if (v12 >= *(_QWORD *)&v4)
            v12 %= *(_QWORD *)&v4;
          if (v12 != v7)
            goto LABEL_136;
LABEL_16:
          v9 = (_QWORD *)*v9;
          if (!v9)
            goto LABEL_136;
        }
        if (v9[2] != a2)
          goto LABEL_16;
LABEL_22:
        if (v6.u32[0] > 1uLL)
        {
          v13 = a2;
          if (*(_QWORD *)&v4 <= a2)
            v13 = a2 % *(_QWORD *)&v4;
        }
        else
        {
          v13 = v10 & a2;
        }
        v14 = *(_QWORD **)(v5->__m_.__sig + 8 * v13);
        if (!v14 || (v15 = (_QWORD *)*v14) == 0)
LABEL_151:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v15[1];
            if (v16 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_34;
            }
            else if ((v16 & v10) != v13)
            {
              goto LABEL_151;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_151;
          }
        }
        while (2)
        {
          v18 = v15[1];
          if (v18 == a2)
          {
            if (v15[2] == a2)
            {
LABEL_34:
              v17 = (uint64_t *)v15[5];
              while (1)
              {
                v19 = v66;
                v20 = (uint8x8_t)vcnt_s8(v4);
                v20.i16[0] = vaddlv_u8(v20);
                if (v20.u32[0] > 1uLL)
                {
                  v21 = v66;
                  if (v66 >= *(_QWORD *)&v4)
                    v21 = v66 % *(_QWORD *)&v4;
                }
                else
                {
                  v21 = (*(_QWORD *)&v4 - 1) & v66;
                }
                v22 = *(_QWORD **)(v5->__m_.__sig + 8 * v21);
                if (!v22 || (v23 = (_QWORD *)*v22) == 0)
LABEL_121:
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                v24 = *(_QWORD *)&v4 - 1;
                if (v20.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v25 = v23[1];
                    if (v25 == v66)
                    {
                      if (v23[2] == v66)
                        goto LABEL_56;
                    }
                    else if ((v25 & v24) != v21)
                    {
                      goto LABEL_121;
                    }
                    v23 = (_QWORD *)*v23;
                    if (!v23)
                      goto LABEL_121;
                  }
                }
                while (1)
                {
                  v33 = v23[1];
                  if (v33 == v66)
                    break;
                  if (v33 >= *(_QWORD *)&v4)
                    v33 %= *(_QWORD *)&v4;
                  if (v33 != v21)
                    goto LABEL_121;
LABEL_63:
                  v23 = (_QWORD *)*v23;
                  if (!v23)
                    goto LABEL_121;
                }
                if (v23[2] != v66)
                  goto LABEL_63;
LABEL_56:
                if (!v17)
                {
                  if (v20.u32[0] > 1uLL)
                  {
                    v53 = v66;
                    if (v66 >= *(_QWORD *)&v4)
                      v53 = v66 % *(_QWORD *)&v4;
                  }
                  else
                  {
                    v53 = v24 & v66;
                  }
                  v54 = *(_QWORD **)(v5->__m_.__sig + 8 * v53);
                  if (!v54 || (v55 = (_QWORD *)*v54) == 0)
LABEL_152:
                    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                  if (v20.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v56 = v55[1];
                      if (v56 == v66)
                      {
                        if (v55[2] == v66)
                          goto LABEL_134;
                      }
                      else if ((v56 & v24) != v53)
                      {
                        goto LABEL_152;
                      }
                      v55 = (_QWORD *)*v55;
                      if (!v55)
                        goto LABEL_152;
                    }
                  }
                  while (1)
                  {
                    v61 = v55[1];
                    if (v61 == v66)
                    {
                      if (v55[2] == v66)
                      {
LABEL_134:
                        if (!v55[6])
                          std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__erase_unique<unsigned long long>(&this[1].__m_.__sig, &v66);
                        goto LABEL_136;
                      }
                    }
                    else
                    {
                      if (v61 >= *(_QWORD *)&v4)
                        v61 %= *(_QWORD *)&v4;
                      if (v61 != v53)
                        goto LABEL_152;
                    }
                    v55 = (_QWORD *)*v55;
                    if (!v55)
                      goto LABEL_152;
                  }
                }
                if ((E5RT::AsyncTask::Dispatched((E5RT::AsyncTask *)v17[2]) & 1) != 0)
                {
                  CompletionEvent = 0;
                  CompletionEvent = E5RT::AsyncTask::GetCompletionEvent((E5RT::AsyncTask *)v17[2]);
                  CompletionEventValue = E5RT::AsyncTask::GetCompletionEventValue((E5RT::AsyncTask *)v17[2]);
                  if (!CompletionEvent)
                    goto LABEL_43;
                  v27 = CompletionEventValue;
                  if (!v63[1])
                    goto LABEL_42;
                  v28 = 0x9DDFEA08EB382D69 * (((8 * CompletionEvent) + 8) ^ HIDWORD(CompletionEvent));
                  v29 = 0x9DDFEA08EB382D69 * (HIDWORD(CompletionEvent) ^ (v28 >> 47) ^ v28);
                  v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47));
                  v31 = (uint8x8_t)vcnt_s8((int8x8_t)v63[1]);
                  v31.i16[0] = vaddlv_u8(v31);
                  if (v31.u32[0] > 1uLL)
                  {
                    v32 = v30;
                    if ((void *)v30 >= v63[1])
                      v32 = v30 % (unint64_t)v63[1];
                  }
                  else
                  {
                    v32 = ((unint64_t)v63[1] - 1) & v30;
                  }
                  v46 = (_QWORD *)*((_QWORD *)v63[0] + v32);
                  if (v46 && (v47 = (_QWORD *)*v46) != 0)
                  {
                    if (v31.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v49 = v47[1];
                        if (v30 == v49)
                        {
                          if (v47[2] == CompletionEvent)
                            goto LABEL_117;
                        }
                        else if ((v49 & ((uint64_t)v63[1] - 1)) != v32)
                        {
                          goto LABEL_42;
                        }
                        v47 = (_QWORD *)*v47;
                        if (!v47)
                          goto LABEL_42;
                      }
                    }
                    while (1)
                    {
                      v48 = v47[1];
                      if (v30 == v48)
                        break;
                      if ((void *)v48 >= v63[1])
                        v48 %= (unint64_t)v63[1];
                      if (v48 != v32)
                        goto LABEL_42;
LABEL_106:
                      v47 = (_QWORD *)*v47;
                      if (!v47)
                        goto LABEL_42;
                    }
                    if (v47[2] != CompletionEvent)
                      goto LABEL_106;
LABEL_117:
                    p_CompletionEvent = &CompletionEvent;
                    v50 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v63, (uint64_t *)&CompletionEvent, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_CompletionEvent)[3];
                    p_CompletionEvent = &CompletionEvent;
                    v51 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v63, (uint64_t *)&CompletionEvent, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_CompletionEvent);
                    if (v50 <= v27)
                      v52 = v27;
                    else
                      v52 = v50;
                    v51[3] = v52;
                    v17 = (uint64_t *)*v17;
                    v4 = *(int8x8_t *)this[1].__m_.__opaque;
                    if (!*(_QWORD *)&v4)
                      goto LABEL_121;
                  }
                  else
                  {
LABEL_42:
                    p_CompletionEvent = &CompletionEvent;
                    std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v63, (uint64_t *)&CompletionEvent, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_CompletionEvent)[3] = CompletionEventValue;
LABEL_43:
                    v17 = (uint64_t *)*v17;
                    v4 = *(int8x8_t *)this[1].__m_.__opaque;
                    if (!*(_QWORD *)&v4)
                      goto LABEL_121;
                  }
                }
                else
                {
                  E5RT::AsyncComputeScheduler::RemoveTaskDependencies((E5RT::AsyncComputeScheduler *)this, (E5RT::AsyncTask *)v17[2]);
                  E5RT::AsyncComputeScheduler::RemoveTaskTimeoutTimer((E5RT::AsyncComputeScheduler *)this, (E5RT::AsyncTask *)v17[2]);
                  E5RT::AsyncComputeScheduler::RemoveTaskCompletionHandler((E5RT::AsyncComputeScheduler *)this, (E5RT::AsyncTask *)v17[2], (uint64_t)v69);
                  if (!v71)
                    goto LABEL_75;
                  v34 = v70;
                  if (v70 == v69)
                  {
                    v34 = v69;
                    v35 = 4;
                  }
                  else
                  {
                    if (!v70)
                      goto LABEL_75;
                    v35 = 5;
                  }
                  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_75:
                  v36 = *(int8x8_t *)this[1].__m_.__opaque;
                  if (!*(_QWORD *)&v36)
                    goto LABEL_150;
                  v37 = (uint8x8_t)vcnt_s8(v36);
                  v37.i16[0] = vaddlv_u8(v37);
                  if (v37.u32[0] > 1uLL)
                  {
                    v38 = v19;
                    if (v19 >= *(_QWORD *)&v36)
                      v38 = v19 % *(_QWORD *)&v36;
                  }
                  else
                  {
                    v38 = (*(_QWORD *)&v36 - 1) & v19;
                  }
                  v39 = *(_QWORD **)(v5->__m_.__sig + 8 * v38);
                  if (!v39 || (v40 = (_QWORD *)*v39) == 0)
LABEL_150:
                    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                  if (v37.u32[0] < 2uLL)
                  {
                    v41 = *(_QWORD *)&v36 - 1;
                    while (1)
                    {
                      v43 = v40[1];
                      if (v43 == v19)
                      {
                        if (v40[2] == v19)
                          goto LABEL_95;
                      }
                      else if ((v43 & v41) != v38)
                      {
                        goto LABEL_150;
                      }
                      v40 = (_QWORD *)*v40;
                      if (!v40)
                        goto LABEL_150;
                    }
                  }
                  while (1)
                  {
                    v42 = v40[1];
                    if (v42 == v19)
                      break;
                    if (v42 >= *(_QWORD *)&v36)
                      v42 %= *(_QWORD *)&v36;
                    if (v42 != v38)
                      goto LABEL_150;
LABEL_85:
                    v40 = (_QWORD *)*v40;
                    if (!v40)
                      goto LABEL_150;
                  }
                  if (v40[2] != v19)
                    goto LABEL_85;
LABEL_95:
                  v44 = (uint64_t *)*v17;
                  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v40 + 3, v17, (uint64_t)&p_CompletionEvent);
                  v45 = p_CompletionEvent;
                  p_CompletionEvent = 0;
                  if (v45)
                    std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<E5RT::AsyncTask>,void *>>>::operator()[abi:ne180100]((uint64_t)&v68, v45);
                  v17 = v44;
                  v4 = *(int8x8_t *)this[1].__m_.__opaque;
                  if (!*(_QWORD *)&v4)
                    goto LABEL_121;
                }
              }
            }
          }
          else
          {
            if (v18 >= *(_QWORD *)&v4)
              v18 %= *(_QWORD *)&v4;
            if (v18 != v13)
              goto LABEL_151;
          }
          v15 = (_QWORD *)*v15;
          if (!v15)
            goto LABEL_151;
          continue;
        }
      }
    }
  }
LABEL_136:
  std::mutex::unlock(this);
  v57 = (E5RT::AsyncEvent *)__p[0];
  if (__p[0])
  {
    do
    {
      E5RT::AsyncEvent::SyncWait(*((E5RT::AsyncEvent **)v57 + 2));
      v57 = *(E5RT::AsyncEvent **)v57;
    }
    while (v57);
    v58 = __p[0];
    if (__p[0])
    {
      do
      {
        v59 = (_QWORD *)*v58;
        operator delete(v58);
        v58 = v59;
      }
      while (v59);
    }
  }
  v60 = v63[0];
  v63[0] = 0;
  if (v60)
    operator delete(v60);
}

void sub_190F4EBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t E5RT::AsyncComputeScheduler::GetAsyncComputeScheduler(E5RT::AsyncComputeScheduler *this)
{
  if (qword_1EE214810 != -1)
    dispatch_once(&qword_1EE214810, &unk_1E2DCAE70);
  return qword_1EE214808;
}

E5RT::AsyncComputeScheduler *sub_190F4EC84()
{
  E5RT::AsyncComputeScheduler *v0;
  E5RT::AsyncComputeScheduler *result;

  v0 = (E5RT::AsyncComputeScheduler *)operator new();
  result = E5RT::AsyncComputeScheduler::AsyncComputeScheduler(v0);
  qword_1EE214808 = (uint64_t)v0;
  return result;
}

void sub_190F4ECC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10A0C409C39DCEBLL);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_storage_base<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = result;
  if (*(unsigned __int8 *)(result + 32) != *(unsigned __int8 *)(a2 + 32))
  {
    if (!*(_BYTE *)(result + 32))
    {
      v7 = (_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a2 + 24);
      if (v8)
      {
        if (v8 == a2)
        {
          *(_QWORD *)(result + 24) = result;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 24))(*v7, result);
          *(_BYTE *)(v3 + 32) = 1;
          return result;
        }
        *(_QWORD *)(result + 24) = v8;
      }
      else
      {
        v7 = (_QWORD *)(result + 24);
      }
      *v7 = 0;
      *(_BYTE *)(result + 32) = 1;
      return result;
    }
    result = *(_QWORD *)(result + 24);
    if (result == v3)
    {
      v6 = 4;
      result = v3;
    }
    else
    {
      if (!result)
      {
LABEL_21:
        *(_BYTE *)(v3 + 32) = 0;
        return result;
      }
      v6 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v6))();
    goto LABEL_21;
  }
  if (!*(_BYTE *)(result + 32))
    return result;
  v4 = (_QWORD *)(result + 24);
  result = *(_QWORD *)(result + 24);
  *(_QWORD *)(v3 + 24) = 0;
  if (result == v3)
  {
    v5 = 4;
    result = v3;
  }
  else
  {
    if (!result)
      goto LABEL_15;
    v5 = 5;
  }
  result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v5))();
LABEL_15:
  v9 = (_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 24);
  if (v10)
  {
    if (v10 == a2)
    {
      *(_QWORD *)(v3 + 24) = v3;
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 24))(*v9, v3);
    }
    else
    {
      *v4 = v10;
      *v9 = 0;
    }
  }
  else
  {
    *v4 = 0;
  }
  return result;
}

void std::__hash_table<std::unique_ptr<E5RT::AsyncTask>,std::hash<std::unique_ptr<E5RT::AsyncTask>>,std::equal_to<std::unique_ptr<E5RT::AsyncTask>>,std::allocator<std::unique_ptr<E5RT::AsyncTask>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  if (a2)
  {
    v2 = a2;
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[2];
      v2[2] = 0;
      if (!v6)
        goto LABEL_6;
      if (*(char *)(v6 + 127) < 0)
      {
        operator delete(*(void **)(v6 + 104));
        v7 = *(_QWORD **)(v6 + 48);
        if (v7)
        {
          do
          {
LABEL_10:
            v8 = (_QWORD *)*v7;
            operator delete(v7);
            v7 = v8;
          }
          while (v8);
        }
      }
      else
      {
        v7 = *(_QWORD **)(v6 + 48);
        if (v7)
          goto LABEL_10;
      }
      v9 = *(void **)(v6 + 32);
      *(_QWORD *)(v6 + 32) = 0;
      if (v9)
        operator delete(v9);
      v3 = *(_QWORD **)(v6 + 24);
      if (v3 == (_QWORD *)v6)
      {
        v3 = (_QWORD *)v6;
        v4 = 4;
      }
      else
      {
        if (!v3)
          goto LABEL_5;
        v4 = 5;
      }
      (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_5:
      MEMORY[0x19401CD90](v6, 0x10B2C404C099A3DLL);
LABEL_6:
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
}

void std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy(a1, a2[1]);
    v4 = (_QWORD *)a2[7];
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    v6 = (void *)a2[5];
    a2[5] = 0;
    if (v6)
      operator delete(v6);
    operator delete(a2);
  }
}

void sub_190F4EF9C()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F4EFB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCAEA0;
  result[1] = v3;
  return result;
}

uint64_t sub_190F4EFE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCAEA0;
  a2[1] = v2;
  return result;
}

BOOL sub_190F4F000(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 8) + 368) == 0;
}

uint64_t sub_190F4F014(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT21AsyncComputeSchedulerC1EvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT21AsyncComputeSchedulerC1EvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT21AsyncComputeSchedulerC1EvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT21AsyncComputeSchedulerC1EvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F4F080()
{
  return &unk_1E2DCAF00;
}

_QWORD *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_190F4F220(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[6];
      if (v3 == v2 + 3)
      {
        v4 = 4;
        v3 = v2 + 3;
        goto LABEL_7;
      }
      if (v3)
      {
        v4 = 5;
LABEL_7:
        (*(void (**)(void))(*v3 + 8 * v4))();
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_QWORD *)v11 + 2) == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 14) = 1065353216;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(_QWORD *)v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*(_QWORD *)v11)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_190F4F5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      std::__hash_table<std::unique_ptr<E5RT::AsyncTask>,std::hash<std::unique_ptr<E5RT::AsyncTask>>,std::equal_to<std::unique_ptr<E5RT::AsyncTask>>,std::allocator<std::unique_ptr<E5RT::AsyncTask>>>::__deallocate_node(v2 + 24, *(_QWORD **)(v2 + 40));
      v3 = *(void **)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v3)
        operator delete(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<E5RT::AsyncTask>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;

  if (!*(_BYTE *)(a1 + 8))
  {
LABEL_15:
    if (!__p)
      return;
    goto LABEL_16;
  }
  v3 = __p[2];
  __p[2] = 0;
  if (v3)
  {
    if (*(char *)(v3 + 127) < 0)
      operator delete(*(void **)(v3 + 104));
    v4 = *(_QWORD **)(v3 + 48);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    v6 = *(void **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    if (v6)
      operator delete(v6);
    v7 = *(_QWORD **)(v3 + 24);
    if (v7 == (_QWORD *)v3)
    {
      v8 = 4;
      v7 = (_QWORD *)v3;
    }
    else
    {
      if (!v7)
      {
LABEL_14:
        MEMORY[0x19401CD90](v3, 0x10B2C404C099A3DLL);
        goto LABEL_15;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_14;
  }
LABEL_16:
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD **v12;
  _QWORD *v13;
  void *__p;
  char v15;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!*v6)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == v3)
      {
        if (v7[2] == v3)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == v3)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != v3)
    goto LABEL_11;
LABEL_22:
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(a1, v7, (uint64_t)&__p);
  v12 = (_QWORD **)__p;
  __p = 0;
  if (v12)
  {
    if (v15)
    {
      std::__hash_table<std::unique_ptr<E5RT::AsyncTask>,std::hash<std::unique_ptr<E5RT::AsyncTask>>,std::equal_to<std::unique_ptr<E5RT::AsyncTask>>,std::allocator<std::unique_ptr<E5RT::AsyncTask>>>::__deallocate_node((uint64_t)(v12 + 3), v12[5]);
      v13 = v12[3];
      v12[3] = 0;
      if (v13)
        operator delete(v13);
    }
    operator delete(v12);
  }
  return 1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v6 == v13)
        {
          if (result[2] == v3)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v6 == v12)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x30uLL);
  *v14 = 0;
  v14[1] = v10;
  v18 = **a4;
  v14[5] = 0;
  v14[4] = 0;
  v14[2] = v18;
  v14[3] = v14 + 4;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v14 = *v22;
LABEL_61:
      *v22 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v21 + 8 * v4) = v17;
  if (*v14)
  {
    v31 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190F4FD20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy((uint64_t)(v2 + 3), v2[4]);
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::__erase_unique<unsigned long long>(uint64_t **a1, unint64_t *a2)
{
  uint64_t *result;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;

  v4 = (uint64_t *)(a1 + 1);
  result = a1[1];
  if (result)
  {
    v5 = *a2;
    v6 = v4;
    v7 = result;
    do
    {
      v8 = v7[4];
      v9 = v8 >= v5;
      if (v8 >= v5)
        v10 = (uint64_t **)v7;
      else
        v10 = (uint64_t **)(v7 + 1);
      if (v9)
        v6 = v7;
      v7 = *v10;
    }
    while (*v10);
    if (v6 == v4)
    {
      return 0;
    }
    else if (v5 >= v6[4])
    {
      v11 = (uint64_t *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        v13 = v6;
        do
        {
          v12 = (uint64_t *)v13[2];
          v14 = *v12 == (_QWORD)v13;
          v13 = v12;
        }
        while (!v14);
      }
      if (*a1 == v6)
        *a1 = v12;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(result, v6);
      v15 = (_QWORD *)v6[7];
      if (v15)
      {
        do
        {
          v16 = (_QWORD *)*v15;
          operator delete(v15);
          v15 = v16;
        }
        while (v16);
      }
      v17 = (void *)v6[5];
      v6[5] = 0;
      if (v17)
        operator delete(v17);
      operator delete(v6);
      return (uint64_t *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

char *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v14 + 1);
            if (v16 == v10)
            {
              if (*((_QWORD *)v14 + 2) == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_QWORD *)v14 + 2) == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x40uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *(_QWORD *)v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*(_QWORD *)v14)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190F505B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v12;
  void *__p;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!*v6)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == v3)
      {
        if (v7[2] == v3)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == v3)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != v3)
    goto LABEL_11;
LABEL_22:
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(a1, v7, (uint64_t)&__p);
  v12 = __p;
  __p = 0;
  if (v12)
    operator delete(v12);
  return 1;
}

uint64_t std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__erase_unique<E5RT::AsyncEvent const*>(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *__p;
  char v9;

  result = (uint64_t)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(a1, (_QWORD *)result, (uint64_t)&__p);
    v4 = __p;
    __p = 0;
    if (v4)
    {
      if (v9)
      {
        v5 = (_QWORD *)v4[5];
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = (void *)v4[3];
        v4[3] = 0;
        if (v7)
          operator delete(v7);
      }
      operator delete(v4);
    }
    return 1;
  }
  return result;
}

_QWORD *std::__hash_table<std::unique_ptr<E5RT::AsyncTask>,std::hash<std::unique_ptr<E5RT::AsyncTask>>,std::equal_to<std::unique_ptr<E5RT::AsyncTask>>,std::allocator<std::unique_ptr<E5RT::AsyncTask>>>::__emplace_unique_key_args<std::unique_ptr<E5RT::AsyncTask>,std::unique_ptr<E5RT::AsyncTask>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v9;
  v17 = *a3;
  *a3 = 0;
  v13[2] = v17;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v13 = *v21;
LABEL_61:
      *v21 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v20 + 8 * v3) = v16;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_190F50AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<E5RT::AsyncTask>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::__unordered_map_hasher<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,true>,std::__unordered_map_equal<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::equal_to<E5RT::AsyncTask *>,std::hash<E5RT::AsyncTask *>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>>>::__emplace_unique_key_args<E5RT::AsyncTask *,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncTask * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[6] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    v30 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190F50E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<E5RT::AsyncTask *,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,std::allocator<E5RT::AsyncTask *>>::__emplace_unique_key_args<E5RT::AsyncTask *,E5RT::AsyncTask * const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_190F5117C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190F5149C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::__unordered_map_hasher<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,true>,std::__unordered_map_equal<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::equal_to<E5RT::AsyncTask *>,std::hash<E5RT::AsyncTask *>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>>>::__emplace_unique_key_args<E5RT::AsyncTask *,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncTask * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[3] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    v30 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190F51800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v18 = *v22;
LABEL_61:
      *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_190F51B5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190F51B70(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t sub_190F51B7C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return sub_190F51B70(result);
  return result;
}

__CFDictionary *E5RT::ParseSegmentationAnalytics(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  const __CFAllocator *v3;
  uint64_t v4;
  __CFDictionary *v5;
  __CFDictionary *v6;
  const char *v7;
  CFStringRef v8;
  __CFDictionary *v9;
  uint64_t Function;
  uint64_t v11;
  MIL::IRObject ****v12;
  MIL::IRObject **v13;
  CFIndex v14;
  CFIndex v15;
  MIL::IRObject *v16;
  uint64_t Location;
  void **v18;
  CFNumberRef v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  CFStringRef v23;
  MIL::IRValue *Attribute;
  uint64_t v25;
  std::string *p_cStr;
  CFStringRef v27;
  const void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const void **v33;
  int v34;
  size_t v35;
  unint64_t v36;
  std::string *p_dst;
  MIL::Location *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  unint64_t v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  unint64_t v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  const char *v55;
  CFStringRef v56;
  __CFDictionary *v57;
  MIL::IRValue *v58;
  MIL::IRListValue *v59;
  uint64_t Values;
  uint64_t v61;
  MIL::IRValue **v62;
  MIL::IRValue **v63;
  __int128 v64;
  _OWORD *v65;
  std::string::size_type v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  std::string::size_type v70;
  std::string::size_type v71;
  __int128 v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::string::size_type v75;
  char v76;
  const char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  const char *v83;
  CFStringRef v84;
  CFNumberRef v85;
  std::string::size_type v86;
  void *v87;
  __CFDictionary *v88;
  MIL::IRValue *v89;
  uint64_t *v90;
  const char *v91;
  CFStringRef v92;
  const char *v93;
  CFStringRef v94;
  uint64_t **v95;
  uint64_t *v96;
  void *v97;
  __CFDictionary *v98;
  MIL::IRValue *v99;
  MIL::IRDictionaryValue *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  CFNumberRef v106;
  const char *v107;
  CFStringRef v108;
  void **v109;
  void *v110;
  std::string::size_type v111;
  std::string::size_type v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  __CFArray *v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  std::string::size_type v119;
  void **v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::string::size_type v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  CFStringRef v131;
  uint64_t v132;
  void *v133;
  MIL::Attributes::TraceabilityInfo *v134;
  unint64_t *v135;
  unint64_t v136;
  std::string::size_type v137;
  std::string::size_type v138;
  unint64_t *v139;
  unint64_t v140;
  __CFArray *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  std::string::size_type v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::string::size_type v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  CFStringRef v156;
  uint64_t v157;
  void *v158;
  MIL::Attributes::TraceabilityInfo *v159;
  unint64_t *v160;
  unint64_t v161;
  __CFDictionary *v162;
  uint64_t v163;
  uint64_t Name;
  __int128 v165;
  const char *v166;
  CFStringRef v167;
  CFArrayRef Copy;
  CFIndex Count;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *exception;
  uint64_t MILProgram;
  uint64_t v176;
  __CFDictionary *Mutable;
  MIL::IRObject **v178;
  MIL::IRObject **v179;
  CFStringRef key;
  __CFArray *theArray;
  MIL::IRObject *v182;
  __CFDictionary *theDict;
  std::__shared_weak_count *v184;
  std::__shared_weak_count *v185;
  void *__p[2];
  char v187;
  std::string::size_type v188;
  std::__shared_weak_count *v189;
  uint64_t valuePtr;
  _QWORD v191[6];
  std::string v192;
  std::string v193;
  std::string __dst;
  _BYTE v195[32];
  int v196;
  std::string v197;
  std::string cStr;
  _QWORD v199[5];

  v199[2] = *MEMORY[0x1E0C80C00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v191, "ParseSegmentationAnalytics");
    std::string::basic_string[abi:ne180100]<0>(v195, "Error allocating segmentation metadata dictionary.");
    E5RT::Status::Status(&cStr, 3, v195);
    E5RT::E5RTError::E5RTError(exception, v191, &cStr);
  }
  std::__fs::filesystem::__status(this, 0);
  if (LOBYTE(v191[0]))
  {
    if (LOBYTE(v191[0]) != 255)
    {
      std::__fs::filesystem::__status(this, 0);
      if (LOBYTE(v191[0]) != 2)
      {
        E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)v191, this);
        MILProgram = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)v191);
        valuePtr = 0;
        v4 = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)v191);
        (*(void (**)(std::string::size_type *__return_ptr))(*(_QWORD *)v4 + 48))(&v188);
        theArray = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
        v5 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(v5, CFSTR("Type"), CFSTR("Program"));
        CFArrayAppendValue(theArray, v5);
        CFRelease(v5);
        v176 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)MILProgram + 72))(MILProgram) + 16;
        while (1)
        {
          v176 = *(_QWORD *)v176;
          if (!v176)
            break;
          v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionarySetValue(v6, CFSTR("Type"), CFSTR("Function"));
          if (*(char *)(v176 + 39) >= 0)
            v7 = (const char *)(v176 + 16);
          else
            v7 = *(const char **)(v176 + 16);
          v8 = CFStringCreateWithCString(v3, v7, 0x8000100u);
          CFDictionarySetValue(v6, CFSTR("Name"), v8);
          CFRelease(v8);
          CFArrayAppendValue(theArray, v6);
          CFRelease(v6);
          v9 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionarySetValue(v9, CFSTR("Type"), CFSTR("Block"));
          CFArrayAppendValue(theArray, v9);
          CFRelease(v9);
          Function = MIL::IRProgram::GetFunction();
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
          v12 = (MIL::IRObject ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
          v13 = **v12;
          v178 = (*v12)[1];
          if (v13 != v178)
          {
            do
            {
              v179 = v13;
              v16 = *v13;
              theDict = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v182 = v16;
              Location = MIL::IRObject::GetLocation(v16);
              (*(void (**)(void **__return_ptr))(*(_QWORD *)Location + 24))(__p);
              if (v187 >= 0)
                v18 = __p;
              else
                v18 = (void **)__p[0];
              key = CFStringCreateWithCString(v3, (const char *)v18, 0x8000100u);
              v19 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
              CFDictionarySetValue(theDict, CFSTR("OpIndex"), v19);
              CFRelease(v19);
              v20 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v182 + 64))(v182);
              v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
              if (*(char *)(v21 + 23) >= 0)
                v22 = (const char *)v21;
              else
                v22 = *(const char **)v21;
              v23 = CFStringCreateWithCString(v3, v22, 0x8000100u);
              CFDictionarySetValue(theDict, CFSTR("OpType"), v23);
              CFRelease(v23);
              v195[23] = 15;
              strcpy(v195, "SelectedBackend");
              Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
              if (Attribute)
              {
                v25 = MIL::IRValue::AsTensor(Attribute);
                (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v25 + 72))(&cStr);
                if ((cStr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_cStr = &cStr;
                else
                  p_cStr = (std::string *)cStr.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&cStr.__r_.__value_.__s + 23) = 7;
                strcpy((char *)&cStr, "unknown");
                p_cStr = &cStr;
              }
              v27 = CFStringCreateWithCString(v3, (const char *)p_cStr, 0x8000100u);
              if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(cStr.__r_.__value_.__l.__data_);
                if ((v195[23] & 0x80000000) == 0)
                  goto LABEL_26;
              }
              else if ((v195[23] & 0x80000000) == 0)
              {
                goto LABEL_26;
              }
              operator delete(*(void **)v195);
LABEL_26:
              CFDictionarySetValue(theDict, CFSTR("SelectedBackend"), v27);
              CFRelease(v27);
              v28 = (const void *)MIL::IRObject::GetLocation(v182);
              v29 = __dynamic_cast(v28, MEMORY[0x1E0D45EC0], MEMORY[0x1E0D45EA8], 0);
              if (!v29)
              {
                v38 = (MIL::Location *)MIL::IRObject::GetLocation(v182);
                MIL::Location::GetDescription(v38);
                *(std::string *)v195 = cStr;
                v39 = HIBYTE(cStr.__r_.__value_.__r.__words[2]);
                v40 = cStr.__r_.__value_.__r.__words[0];
                goto LABEL_61;
              }
              v30 = v29;
              v31 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v182 + 64))(v182);
              v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
              v33 = (const void **)v32;
              v34 = *(char *)(v32 + 23);
              if (v34 >= 0)
                v35 = *(unsigned __int8 *)(v32 + 23);
              else
                v35 = *(_QWORD *)(v32 + 8);
              v36 = v35 + 1;
              if (v35 + 1 >= 0x7FFFFFFFFFFFFFF8)
                std::string::__throw_length_error[abi:ne180100]();
              if (v36 >= 0x17)
              {
                v41 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v36 | 7) != 0x17)
                  v41 = v36 | 7;
                v42 = v41 + 1;
                p_dst = (std::string *)operator new(v41 + 1);
                __dst.__r_.__value_.__l.__size_ = v35 + 1;
                __dst.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                memset(&__dst, 0, sizeof(__dst));
                p_dst = &__dst;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v35 + 1;
                if (!v35)
                  goto LABEL_44;
              }
              if (v34 >= 0)
                v43 = v33;
              else
                v43 = *v33;
              memmove(p_dst, v43, v35);
LABEL_44:
              *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v35) = 58;
              v44 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 48))(v30);
              std::to_string(&v193, v44);
              if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v45 = &v193;
              else
                v45 = (std::string *)v193.__r_.__value_.__r.__words[0];
              if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v193.__r_.__value_.__r.__words[2]);
              else
                size = v193.__r_.__value_.__l.__size_;
              v47 = std::string::append(&__dst, (const std::string::value_type *)v45, size);
              v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
              v197.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v48;
              v47->__r_.__value_.__l.__size_ = 0;
              v47->__r_.__value_.__r.__words[2] = 0;
              v47->__r_.__value_.__r.__words[0] = 0;
              v49 = std::string::append(&v197, ":");
              v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
              cStr.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
              *(_OWORD *)&cStr.__r_.__value_.__l.__data_ = v50;
              v49->__r_.__value_.__l.__size_ = 0;
              v49->__r_.__value_.__r.__words[2] = 0;
              v49->__r_.__value_.__r.__words[0] = 0;
              v51 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 32))(v30);
              std::to_string(&v192, v51);
              if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v52 = &v192;
              else
                v52 = (std::string *)v192.__r_.__value_.__r.__words[0];
              if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v53 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
              else
                v53 = v192.__r_.__value_.__l.__size_;
              v54 = std::string::append(&cStr, (const std::string::value_type *)v52, v53);
              v40 = v54->__r_.__value_.__r.__words[0];
              v199[0] = v54->__r_.__value_.__l.__size_;
              *(_QWORD *)((char *)v199 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
              LOBYTE(v39) = *((_BYTE *)&v54->__r_.__value_.__s + 23);
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)v195 = v40;
              *(_QWORD *)&v195[15] = *(_QWORD *)((char *)v199 + 7);
              *(_QWORD *)&v195[8] = v199[0];
              v195[23] = v39;
              if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v192.__r_.__value_.__l.__data_);
                if ((SHIBYTE(cStr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_58:
                  if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_59;
                  goto LABEL_246;
                }
              }
              else if ((SHIBYTE(cStr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_58;
              }
              operator delete(cStr.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_59:
                if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_247;
                goto LABEL_60;
              }
LABEL_246:
              operator delete(v197.__r_.__value_.__l.__data_);
              if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_247:
                operator delete(v193.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_61;
                goto LABEL_248;
              }
LABEL_60:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_61;
LABEL_248:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_61:
              if ((v39 & 0x80u) == 0)
                v55 = v195;
              else
                v55 = (const char *)v40;
              v56 = CFStringCreateWithCString(v3, v55, 0x8000100u);
              if ((v195[23] & 0x80000000) != 0)
                operator delete(*(void **)v195);
              CFDictionarySetValue(theDict, CFSTR("DebugName"), v56);
              CFRelease(v56);
              v57 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              *((_BYTE *)&cStr.__r_.__value_.__s + 23) = 14;
              strcpy((char *)&cStr, "BackendSupport");
              v58 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
              if (v58)
              {
                memset(&v197, 0, sizeof(v197));
                v59 = (MIL::IRListValue *)MIL::IRValue::AsList(v58);
                Values = MIL::IRListValue::GetValues(v59);
                if (v61)
                {
                  v62 = (MIL::IRValue **)Values;
                  v63 = (MIL::IRValue **)(Values + 16 * v61);
                  do
                  {
                    MIL::IRValue::AsTensor(*v62);
                    MIL::IRValue::GetScalar<std::string>();
                    v65 = (_OWORD *)v197.__r_.__value_.__l.__size_;
                    if (v197.__r_.__value_.__l.__size_ < v197.__r_.__value_.__r.__words[2])
                    {
                      v64 = *(_OWORD *)v195;
                      *(_QWORD *)(v197.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)&v195[16];
                      *v65 = v64;
                      v197.__r_.__value_.__l.__size_ = (std::string::size_type)v65 + 24;
                    }
                    else
                    {
                      v66 = v197.__r_.__value_.__r.__words[0];
                      v67 = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(v197.__r_.__value_.__l.__size_ - v197.__r_.__value_.__r.__words[0]) >> 3)
                          + 1;
                      if (v67 > 0xAAAAAAAAAAAAAAALL)
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556
                         * ((uint64_t)(v197.__r_.__value_.__r.__words[2] - v197.__r_.__value_.__r.__words[0]) >> 3) > v67)
                        v67 = 0x5555555555555556
                            * ((uint64_t)(v197.__r_.__value_.__r.__words[2] - v197.__r_.__value_.__r.__words[0]) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL
                         * ((uint64_t)(v197.__r_.__value_.__r.__words[2] - v197.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                        v68 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v68 = v67;
                      if (v68)
                      {
                        if (v68 > 0xAAAAAAAAAAAAAAALL)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v69 = operator new(24 * v68);
                      }
                      else
                      {
                        v69 = 0;
                      }
                      v70 = (std::string::size_type)v69 + 8 * ((uint64_t)((uint64_t)v65 - v66) >> 3);
                      *(_OWORD *)v70 = *(_OWORD *)v195;
                      *(_QWORD *)(v70 + 16) = *(_QWORD *)&v195[16];
                      memset(v195, 0, 24);
                      v71 = v70 + 24;
                      if (v65 == (_OWORD *)v66)
                      {
                        v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v69
                                                          + 8 * ((uint64_t)((uint64_t)v65 - v66) >> 3);
                        v197.__r_.__value_.__l.__size_ = v70 + 24;
                        v197.__r_.__value_.__r.__words[2] = (std::string::size_type)v69 + 24 * v68;
                      }
                      else
                      {
                        do
                        {
                          v72 = *(_OWORD *)((char *)v65 - 24);
                          *(_QWORD *)(v70 - 8) = *((_QWORD *)v65 - 1);
                          *(_OWORD *)(v70 - 24) = v72;
                          v70 -= 24;
                          *((_QWORD *)v65 - 2) = 0;
                          *((_QWORD *)v65 - 1) = 0;
                          *((_QWORD *)v65 - 3) = 0;
                          v65 = (_OWORD *)((char *)v65 - 24);
                        }
                        while (v65 != (_OWORD *)v66);
                        v73 = v197.__r_.__value_.__l.__size_;
                        v65 = (_OWORD *)v197.__r_.__value_.__r.__words[0];
                        v197.__r_.__value_.__r.__words[0] = v70;
                        v197.__r_.__value_.__l.__size_ = v71;
                        for (v197.__r_.__value_.__r.__words[2] = (std::string::size_type)v69 + 24 * v68;
                              (_OWORD *)v73 != v65;
                              v73 -= 24)
                        {
                          if (*(char *)(v73 - 1) < 0)
                            operator delete(*(void **)(v73 - 24));
                        }
                      }
                      if (v65)
                        operator delete(v65);
                      v197.__r_.__value_.__l.__size_ = v71;
                      if ((v195[23] & 0x80000000) != 0)
                        operator delete(*(void **)v195);
                    }
                    v62 += 2;
                  }
                  while (v62 != v63);
                }
                v75 = v197.__r_.__value_.__l.__size_;
                v74 = v197.__r_.__value_.__r.__words[0];
                if (v197.__r_.__value_.__r.__words[0] != v197.__r_.__value_.__l.__size_)
                {
                  while (1)
                  {
                    v76 = *(_BYTE *)(v74 + 23);
                    if (v76 < 0)
                    {
                      v77 = *(const char **)v74;
                      v78 = *(_QWORD *)(v74 + 8);
                      if (v78 >= 11)
                      {
LABEL_99:
                        v79 = (char *)&v77[v78];
                        v80 = (char *)v77;
                        do
                        {
                          v81 = (char *)memchr(v80, 117, v78 - 10);
                          if (!v81)
                            break;
                          if (*(_QWORD *)v81 == 0x726F707075736E75 && *(_QWORD *)(v81 + 3) == 0x646574726F707075)
                          {
                            if (v81 != v79 && v81 - v77 != -1)
                              goto LABEL_112;
                            break;
                          }
                          v80 = v81 + 1;
                          v78 = v79 - v80;
                        }
                        while (v79 - v80 >= 11);
                      }
                    }
                    else
                    {
                      v77 = (const char *)v74;
                      v78 = *(unsigned __int8 *)(v74 + 23);
                      if ((unint64_t)v78 >= 0xB)
                        goto LABEL_99;
                    }
                    v83 = (const char *)v74;
                    if (v76 < 0)
                      v83 = *(const char **)v74;
                    v84 = CFStringCreateWithCString(v3, v83, 0x8000100u);
                    *(_DWORD *)v195 = 1;
                    v85 = CFNumberCreate(v3, kCFNumberIntType, v195);
                    CFDictionarySetValue(v57, v84, v85);
                    CFRelease(v85);
                    CFRelease(v84);
LABEL_112:
                    v74 += 24;
                    if (v74 == v75)
                    {
                      v74 = v197.__r_.__value_.__r.__words[0];
                      break;
                    }
                  }
                }
                if (v74)
                {
                  v86 = v197.__r_.__value_.__l.__size_;
                  v87 = (void *)v74;
                  if (v197.__r_.__value_.__l.__size_ != v74)
                  {
                    do
                    {
                      if (*(char *)(v86 - 1) < 0)
                        operator delete(*(void **)(v86 - 24));
                      v86 -= 24;
                    }
                    while (v86 != v74);
                    v87 = (void *)v197.__r_.__value_.__r.__words[0];
                  }
                  v197.__r_.__value_.__l.__size_ = v74;
                  operator delete(v87);
                }
              }
              if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0)
                operator delete(cStr.__r_.__value_.__l.__data_);
              CFDictionarySetValue(theDict, CFSTR("BackendSupport"), v57);
              CFRelease(v57);
              v88 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              *((_BYTE *)&cStr.__r_.__value_.__s + 23) = 17;
              strcpy((char *)&cStr, "ValidationMessage");
              v89 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
              if (v89)
              {
                E5Common::Utils::MILDictToCpp<std::string,std::string>(v89, (uint64_t)v195);
                v90 = *(uint64_t **)&v195[16];
                if (!*(_QWORD *)&v195[16])
                  goto LABEL_138;
                do
                {
                  v91 = (const char *)(v90 + 5);
                  if (*((char *)v90 + 63) < 0)
                    v91 = *(const char **)v91;
                  v92 = CFStringCreateWithCString(v3, v91, 0x8000100u);
                  v93 = (const char *)(v90 + 2);
                  if (*((char *)v90 + 39) < 0)
                    v93 = *(const char **)v93;
                  v94 = CFStringCreateWithCString(v3, v93, 0x8000100u);
                  CFDictionarySetValue(v88, v94, v92);
                  CFRelease(v92);
                  CFRelease(v94);
                  v90 = (uint64_t *)*v90;
                }
                while (v90);
                v95 = *(uint64_t ***)&v195[16];
                if (!*(_QWORD *)&v195[16])
                {
LABEL_138:
                  v97 = *(void **)v195;
                  *(_QWORD *)v195 = 0;
                  if (v97)
                    operator delete(v97);
                  goto LABEL_140;
                }
                while (1)
                {
                  v96 = *v95;
                  if (*((char *)v95 + 63) < 0)
                  {
                    operator delete(v95[5]);
                    if ((*((char *)v95 + 39) & 0x80000000) == 0)
                      goto LABEL_134;
                  }
                  else if ((*((char *)v95 + 39) & 0x80000000) == 0)
                  {
LABEL_134:
                    operator delete(v95);
                    v95 = (uint64_t **)v96;
                    if (!v96)
                      goto LABEL_138;
                    continue;
                  }
                  operator delete(v95[2]);
                  operator delete(v95);
                  v95 = (uint64_t **)v96;
                  if (!v96)
                    goto LABEL_138;
                }
              }
LABEL_140:
              if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0)
                operator delete(cStr.__r_.__value_.__l.__data_);
              CFDictionarySetValue(theDict, CFSTR("ValidationMessages"), v88);
              CFRelease(v88);
              v98 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              *((_BYTE *)&v197.__r_.__value_.__s + 23) = 16;
              strcpy((char *)&v197, "EstimatedRuntime");
              v99 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
              if (v99)
              {
                memset(v195, 0, sizeof(v195));
                v196 = 1065353216;
                v100 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(v99);
                v101 = MIL::IRDictionaryValue::begin(v100);
                v102 = MIL::IRDictionaryValue::end(v100);
                while (v101 != v102)
                {
                  MIL::IRValue::AsTensor(*(MIL::IRValue **)(v101 + 32));
                  MIL::IRValue::GetScalar<double>();
                  v104 = v103;
                  MIL::IRValue::AsTensor(*(MIL::IRValue **)(v101 + 16));
                  MIL::IRValue::GetScalar<std::string>();
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&cStr;
                  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v195, (uint64_t)&cStr, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst)+ 5) = v104;
                  if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(cStr.__r_.__value_.__l.__data_);
                  v101 = *(_QWORD *)v101;
                }
                v105 = *(uint64_t **)&v195[16];
                if (*(_QWORD *)&v195[16])
                {
                  do
                  {
                    v106 = CFNumberCreate(v3, kCFNumberDoubleType, v105 + 5);
                    v107 = (const char *)(v105 + 2);
                    if (*((char *)v105 + 39) < 0)
                      v107 = *(const char **)v107;
                    v108 = CFStringCreateWithCString(v3, v107, 0x8000100u);
                    CFDictionarySetValue(v98, v108, v106);
                    CFRelease(v108);
                    CFRelease(v106);
                    v105 = (uint64_t *)*v105;
                  }
                  while (v105);
                  v109 = *(void ***)&v195[16];
                  if (*(_QWORD *)&v195[16])
                  {
                    do
                    {
                      v120 = (void **)*v109;
                      if (*((char *)v109 + 39) < 0)
                        operator delete(v109[2]);
                      operator delete(v109);
                      v109 = v120;
                    }
                    while (v120);
                  }
                }
                v110 = *(void **)v195;
                *(_QWORD *)v195 = 0;
                if (v110)
                  operator delete(v110);
              }
              if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v197.__r_.__value_.__l.__data_);
              CFDictionarySetValue(theDict, CFSTR("EstimatedRunTime"), v98);
              CFRelease(v98);
              v112 = v188;
              v111 = (std::string::size_type)v189;
              v185 = v189;
              if (v189)
              {
                p_shared_owners = (unint64_t *)&v189->__shared_owners_;
                do
                  v114 = __ldxr(p_shared_owners);
                while (__stxr(v114 + 1, p_shared_owners));
              }
              v115 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
              cStr.__r_.__value_.__r.__words[0] = v112;
              cStr.__r_.__value_.__l.__size_ = v111;
              if (v111)
              {
                v116 = (unint64_t *)(v111 + 8);
                do
                  v117 = __ldxr(v116);
                while (__stxr(v117 + 1, v116));
              }
              (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v182 + 32))(&__dst);
              *(_QWORD *)v195 = __dst.__r_.__value_.__r.__words[0];
              if (__dst.__r_.__value_.__r.__words[0])
              {
                v118 = (_QWORD *)operator new();
                v119 = __dst.__r_.__value_.__r.__words[0];
                *v118 = &unk_1E2DC2F98;
                v118[1] = 0;
                v118[2] = 0;
                v118[3] = v119;
              }
              else
              {
                v118 = 0;
              }
              *(_QWORD *)&v195[8] = v118;
              __dst.__r_.__value_.__r.__words[0] = 0;
              MIL::Attributes::TraceabilityInfo::Make();
              v121 = *(std::__shared_weak_count **)&v195[8];
              if (*(_QWORD *)&v195[8])
              {
                v122 = (unint64_t *)(*(_QWORD *)&v195[8] + 8);
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                  v124 = __dst.__r_.__value_.__r.__words[0];
                  __dst.__r_.__value_.__r.__words[0] = 0;
                  if (!v124)
                    goto LABEL_175;
LABEL_174:
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v124 + 8))(v124);
                  goto LABEL_175;
                }
              }
              v124 = __dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = 0;
              if (v124)
                goto LABEL_174;
LABEL_175:
              v125 = (std::__shared_weak_count *)cStr.__r_.__value_.__l.__size_;
              if (cStr.__r_.__value_.__l.__size_)
              {
                v126 = (unint64_t *)(cStr.__r_.__value_.__l.__size_ + 8);
                do
                  v127 = __ldaxr(v126);
                while (__stlxr(v127 - 1, v126));
                if (!v127)
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
              }
              MIL::Attributes::TraceabilityInfo::GetNames((MIL::Attributes::TraceabilityInfo *)v197.__r_.__value_.__l.__data_);
              v128 = *(_QWORD *)&v195[8];
              v129 = *(_QWORD *)v195;
              if (*(_QWORD *)v195 != *(_QWORD *)&v195[8])
              {
                do
                {
                  v130 = (const char *)v129;
                  if (*(char *)(v129 + 23) < 0)
                    v130 = *(const char **)v129;
                  v131 = CFStringCreateWithCString(v3, v130, 0x8000100u);
                  CFArrayAppendValue(v115, v131);
                  CFRelease(v131);
                  v129 += 24;
                }
                while (v129 != v128);
                v129 = *(_QWORD *)v195;
              }
              if (v129)
              {
                v132 = *(_QWORD *)&v195[8];
                v133 = (void *)v129;
                if (*(_QWORD *)&v195[8] != v129)
                {
                  do
                  {
                    if (*(char *)(v132 - 1) < 0)
                      operator delete(*(void **)(v132 - 24));
                    v132 -= 24;
                  }
                  while (v132 != v129);
                  v133 = *(void **)v195;
                }
                *(_QWORD *)&v195[8] = v129;
                operator delete(v133);
              }
              v134 = (MIL::Attributes::TraceabilityInfo *)v197.__r_.__value_.__r.__words[0];
              v197.__r_.__value_.__r.__words[0] = 0;
              if (v134)
              {
                MIL::Attributes::TraceabilityInfo::~TraceabilityInfo(v134);
                MEMORY[0x19401CD90]();
              }
              if (v185)
              {
                v135 = (unint64_t *)&v185->__shared_owners_;
                do
                  v136 = __ldaxr(v135);
                while (__stlxr(v136 - 1, v135));
                if (!v136)
                {
                  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                  std::__shared_weak_count::__release_weak(v185);
                }
              }
              CFDictionarySetValue(theDict, CFSTR("TraceabilityInfoNames"), v115);
              CFRelease(v115);
              v138 = v188;
              v137 = (std::string::size_type)v189;
              v184 = v189;
              if (v189)
              {
                v139 = (unint64_t *)&v189->__shared_owners_;
                do
                  v140 = __ldxr(v139);
                while (__stxr(v140 + 1, v139));
              }
              v141 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
              cStr.__r_.__value_.__r.__words[0] = v138;
              cStr.__r_.__value_.__l.__size_ = v137;
              if (v137)
              {
                v142 = (unint64_t *)(v137 + 8);
                do
                  v143 = __ldxr(v142);
                while (__stxr(v143 + 1, v142));
              }
              (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v182 + 32))(&__dst);
              *(_QWORD *)v195 = __dst.__r_.__value_.__r.__words[0];
              if (__dst.__r_.__value_.__r.__words[0])
              {
                v144 = (_QWORD *)operator new();
                v145 = __dst.__r_.__value_.__r.__words[0];
                *v144 = &unk_1E2DC2F98;
                v144[1] = 0;
                v144[2] = 0;
                v144[3] = v145;
              }
              else
              {
                v144 = 0;
              }
              *(_QWORD *)&v195[8] = v144;
              __dst.__r_.__value_.__r.__words[0] = 0;
              MIL::Attributes::TraceabilityInfo::Make();
              v146 = *(std::__shared_weak_count **)&v195[8];
              if (!*(_QWORD *)&v195[8])
                goto LABEL_213;
              v147 = (unint64_t *)(*(_QWORD *)&v195[8] + 8);
              do
                v148 = __ldaxr(v147);
              while (__stlxr(v148 - 1, v147));
              if (v148)
              {
LABEL_213:
                v149 = __dst.__r_.__value_.__r.__words[0];
                __dst.__r_.__value_.__r.__words[0] = 0;
                if (!v149)
                  goto LABEL_215;
LABEL_214:
                (*(void (**)(std::string::size_type))(*(_QWORD *)v149 + 8))(v149);
                goto LABEL_215;
              }
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
              v149 = __dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = 0;
              if (v149)
                goto LABEL_214;
LABEL_215:
              v150 = (std::__shared_weak_count *)cStr.__r_.__value_.__l.__size_;
              if (cStr.__r_.__value_.__l.__size_)
              {
                v151 = (unint64_t *)(cStr.__r_.__value_.__l.__size_ + 8);
                do
                  v152 = __ldaxr(v151);
                while (__stlxr(v152 - 1, v151));
                if (!v152)
                {
                  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                  std::__shared_weak_count::__release_weak(v150);
                }
              }
              MIL::Attributes::TraceabilityInfo::GetTypes((MIL::Attributes::TraceabilityInfo *)v197.__r_.__value_.__l.__data_);
              v153 = *(_QWORD *)&v195[8];
              v154 = *(_QWORD *)v195;
              if (*(_QWORD *)v195 != *(_QWORD *)&v195[8])
              {
                do
                {
                  v155 = (const char *)v154;
                  if (*(char *)(v154 + 23) < 0)
                    v155 = *(const char **)v154;
                  v156 = CFStringCreateWithCString(v3, v155, 0x8000100u);
                  CFArrayAppendValue(v141, v156);
                  CFRelease(v156);
                  v154 += 24;
                }
                while (v154 != v153);
                v154 = *(_QWORD *)v195;
              }
              if (v154)
              {
                v157 = *(_QWORD *)&v195[8];
                v158 = (void *)v154;
                if (*(_QWORD *)&v195[8] != v154)
                {
                  do
                  {
                    if (*(char *)(v157 - 1) < 0)
                      operator delete(*(void **)(v157 - 24));
                    v157 -= 24;
                  }
                  while (v157 != v154);
                  v158 = *(void **)v195;
                }
                *(_QWORD *)&v195[8] = v154;
                operator delete(v158);
              }
              v159 = (MIL::Attributes::TraceabilityInfo *)v197.__r_.__value_.__r.__words[0];
              v197.__r_.__value_.__r.__words[0] = 0;
              if (v159)
              {
                MIL::Attributes::TraceabilityInfo::~TraceabilityInfo(v159);
                MEMORY[0x19401CD90]();
              }
              if (v184)
              {
                v160 = (unint64_t *)&v184->__shared_owners_;
                do
                  v161 = __ldaxr(v160);
                while (__stlxr(v161 - 1, v160));
                if (!v161)
                {
                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                  std::__shared_weak_count::__release_weak(v184);
                }
              }
              CFDictionarySetValue(theDict, CFSTR("TraceabilityInfoTypes"), v141);
              CFRelease(v141);
              v162 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CFDictionarySetValue(v162, CFSTR("Type"), CFSTR("Operation"));
              v163 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v182 + 176))(v182);
              if (*(_QWORD *)(v163 + 8) == *(_QWORD *)v163)
              {
                memset(v195, 0, 24);
              }
              else
              {
                Name = MIL::IRNamedValueType::GetName(**(MIL::IRNamedValueType ***)v163);
                if (*(char *)(Name + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v195, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
                }
                else
                {
                  v165 = *(_OWORD *)Name;
                  *(_QWORD *)&v195[16] = *(_QWORD *)(Name + 16);
                  *(_OWORD *)v195 = v165;
                }
              }
              if (v195[23] >= 0)
                v166 = v195;
              else
                v166 = *(const char **)v195;
              v167 = CFStringCreateWithCString(v3, v166, 0x8000100u);
              CFDictionarySetValue(v162, CFSTR("Output"), v167);
              CFRelease(v167);
              CFArrayAppendValue(theArray, v162);
              CFRelease(v162);
              if ((v195[23] & 0x80000000) != 0)
                operator delete(*(void **)v195);
              Copy = CFArrayCreateCopy(v3, theArray);
              CFDictionarySetValue(theDict, CFSTR("OpPath"), Copy);
              CFRelease(Copy);
              Count = CFArrayGetCount(theArray);
              CFArrayRemoveValueAtIndex(theArray, Count - 1);
              CFDictionarySetValue(Mutable, key, theDict);
              CFRelease(theDict);
              CFRelease(key);
              ++valuePtr;
              if (v187 < 0)
                operator delete(__p[0]);
              v13 = v179 + 2;
            }
            while (v179 + 2 != v178);
          }
          v14 = CFArrayGetCount(theArray);
          CFArrayRemoveValueAtIndex(theArray, v14 - 1);
          v15 = CFArrayGetCount(theArray);
          CFArrayRemoveValueAtIndex(theArray, v15 - 1);
        }
        v170 = v189;
        if (v189)
        {
          v171 = (unint64_t *)&v189->__shared_owners_;
          do
            v172 = __ldaxr(v171);
          while (__stlxr(v172 - 1, v171));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
            std::__shared_weak_count::__release_weak(v170);
          }
        }
        E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)v191);
      }
    }
  }
  return Mutable;
}

void sub_190F5314C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a33);
  _Unwind_Resume(a1);
}

void sub_190F53428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a33);
  _Unwind_Resume(a1);
}

void sub_190F53430()
{
  uint64_t v0;

  if (*(char *)(v0 - 217) < 0)
    operator delete(*(void **)(v0 - 240));
  JUMPOUT(0x190F5347CLL);
}

void sub_190F53450()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  JUMPOUT(0x190F5348CLL);
}

void sub_190F53478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  std::vector<std::string>::~vector[abi:ne180100]((void **)(v33 - 192));
  if (*(char *)(v33 - 137) < 0)
    operator delete(*(void **)(v33 - 160));
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a33);
  _Unwind_Resume(a1);
}

void sub_190F53488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v33 - 240);
  if (*(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a33);
  _Unwind_Resume(a1);
}

void sub_190F534A8()
{
  uint64_t v0;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v0 - 240);
  JUMPOUT(0x190F534B4);
}

void sub_190F534C8()
{
  uint64_t v0;

  std::vector<std::string>::~vector[abi:ne180100]((void **)(v0 - 240));
  JUMPOUT(0x190F534D4);
}

void sub_190F534E4()
{
  uint64_t v0;

  std::vector<std::string>::~vector[abi:ne180100]((void **)(v0 - 240));
  JUMPOUT(0x190F534F0);
}

void E5Common::Utils::MILDictToCpp<std::string,std::string>(MIL::IRValue *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::IRDictionaryValue *v3;
  uint64_t v4;
  uint64_t i;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  void *__p[2];
  char v9;
  void *v10[2];
  uint64_t v11;
  void **v12;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(a1);
  v4 = MIL::IRDictionaryValue::begin(v3);
  for (i = MIL::IRDictionaryValue::end(v3); v4 != i; v4 = *(_QWORD *)v4)
  {
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 32));
    MIL::IRValue::GetScalar<std::string>();
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 16));
    MIL::IRValue::GetScalar<std::string>();
    v12 = __p;
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
    v7 = v6 + 40;
    if ((char)v6[63] < 0)
      operator delete(*(void **)v7);
    *(_OWORD *)v7 = *(_OWORD *)v10;
    *((_QWORD *)v7 + 2) = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10[0]) = 0;
    if (v9 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10[0]);
    }
  }
}

void sub_190F53638(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F5364C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F53660(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_190F53674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void sub_190F536D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x40uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 6) = 0;
  *((_QWORD *)v15 + 7) = 0;
  *((_QWORD *)v15 + 5) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190F53AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190F53F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

MIL::Attributes::TraceabilityInfo **std::unique_ptr<MIL::Attributes::TraceabilityInfo>::~unique_ptr[abi:ne180100](MIL::Attributes::TraceabilityInfo **a1)
{
  MIL::Attributes::TraceabilityInfo *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Attributes::TraceabilityInfo::~TraceabilityInfo(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::IROperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A875BCLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A875BCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A875BCLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A875BCLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void E5RT::Ops::E5MinimalCpu::ReadStateKernel::ReadStateKernel(E5RT::Ops::E5MinimalCpu::ReadStateKernel *this)
{
  _QWORD *v1;

  E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel(this);
  *v1 = &off_1E2D36598;
}

void E5RT::Ops::E5MinimalCpu::ReadStateKernel::~ReadStateKernel(E5RT::Ops::E5MinimalCpu::ReadStateKernel *this)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(this);
  JUMPOUT(0x19401CD90);
}

void **E5RT::Ops::E5MinimalCpu::ReadStateKernel::Launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v6;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  if (*(_QWORD *)(a4 + 24) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v7, "ReadStateKernel requires exact 1 inout port");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  if (*(_QWORD *)(a3 + 24) != 1)
  {
    v6 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v7, "ReadStateKernel requires exact 1 output port");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(v6, v9, v8);
  }
  return sub_190F54264(*(E5RT::IOPortImpl ***)(*(_QWORD *)(a3 + 16) + 40), *(E5RT::IOPortImpl ***)(*(_QWORD *)(a4 + 16) + 40));
}

void sub_190F541B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void **sub_190F54264(E5RT::IOPortImpl **a1, E5RT::IOPortImpl **this)
{
  void *MemoryObjectRef;
  E5RT::BufferObject *v5;
  void *v6;
  E5RT::BufferObject *v7;
  E5RT::BufferObject *v8;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v10;
  E5RT::OperandDescriptor *v11;
  E5RT::TensorDescriptor *v12;
  unsigned int NumComponents;
  void *DataSpan;
  const void *v15;
  size_t Size;
  E5RT::MemoryObject *v18;
  const E5RT::TensorDescriptor *v19;
  E5RT::BufferObject *v20;
  void *exception;
  void *v22;
  void *v23;
  E5RT::TensorDataType::Impl *v24[3];
  _BYTE v25[8];
  E5RT::TensorDataType::Impl *v26[3];

  MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef(this);
  v5 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  v6 = (void *)E5RT::IOPort::GetMemoryObjectRef(a1);
  v7 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(v6);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "CopyBuffer");
    std::string::basic_string[abi:ne180100]<0>(v24, "src memory object is not a buffer");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(exception, v26, v25);
  }
  v8 = v7;
  if (!v7)
  {
    v22 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "CopyBuffer");
    std::string::basic_string[abi:ne180100]<0>(v24, "dst memory object is not a buffer");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(v22, v26, v25);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(this);
  v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  v11 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(a1);
  v12 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v11);
  E5RT::TensorDescriptor::GetTensorDataType(v10, (E5RT::TensorDataType *)v26);
  if (E5RT::TensorDataType::GetNumComponents(v26) >= 2)
  {
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v26);
LABEL_11:
    v23 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "CopyBuffer");
    std::string::basic_string[abi:ne180100]<0>(v24, "Not implemented: ReadState/WriteState for interleaved tensor");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(v23, v26, v25);
  }
  E5RT::TensorDescriptor::GetTensorDataType(v12, (E5RT::TensorDataType *)v24);
  NumComponents = E5RT::TensorDataType::GetNumComponents(v24);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v24);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v26);
  if (NumComponents >= 2)
    goto LABEL_11;
  if (E5RT::operator==((uint64_t)v10, (uint64_t)v12))
  {
    DataSpan = (void *)E5RT::BufferObject::GetDataSpan(v8);
    v15 = (const void *)E5RT::BufferObject::GetDataSpan(v5);
    Size = E5RT::BufferObject::GetSize(v5);
    return (void **)memcpy(DataSpan, v15, Size);
  }
  else
  {
    v18 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(a1);
    v19 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v18);
    return E5RT::Ops::PerformDataFormatChange(v10, v5, v12, v19, v20);
  }
}

void sub_190F54500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void E5RT::Ops::E5MinimalCpu::WriteStateKernel::WriteStateKernel(E5RT::Ops::E5MinimalCpu::WriteStateKernel *this)
{
  _QWORD *v1;

  E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel(this);
  *v1 = &off_1E2D365C0;
}

void E5RT::Ops::E5MinimalCpu::WriteStateKernel::~WriteStateKernel(E5RT::Ops::E5MinimalCpu::WriteStateKernel *this)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(this);
  JUMPOUT(0x19401CD90);
}

void **E5RT::Ops::E5MinimalCpu::WriteStateKernel::Launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v6;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];

  if (*(_QWORD *)(a4 + 24) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v7, "WriteStateKernel requires exact 1 inout port");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  if (*(_QWORD *)(a2 + 24) != 1)
  {
    v6 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v7, "WriteStateKernel requires exact 1 input port");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(v6, v9, v8);
  }
  return sub_190F54264(*(E5RT::IOPortImpl ***)(*(_QWORD *)(a4 + 16) + 40), *(E5RT::IOPortImpl ***)(*(_QWORD *)(a2 + 16) + 40));
}

void sub_190F54798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t e5rt_execution_stream_operation_config_options_create(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCAFA8;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F548E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_config_options_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCB028;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F549B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_config_options_get_prewire_model_memory(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCB0A8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F54A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_config_options_set_prewire_model_memory(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCB128;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F54B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F54BA0()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F54BB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCAFA8;
  result[1] = v3;
  return result;
}

uint64_t sub_190F54BE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCAFA8;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F54C04(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  void *__p[2];
  char v8;
  void *v9;
  __int128 v10;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (uint64_t *)operator new();
    *v2 = 0;
    E5RT::ExecutionStreamOperationConfigOptions::Create((E5RT::ExecutionStreamOperationConfigOptions **)&v9);
    v3 = v9;
    v9 = 0;
    v4 = *v2;
    *v2 = (uint64_t)v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = v9;
      v9 = 0;
      if (v5)
        (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
    }
    result = 0;
    **(_QWORD **)(a1 + 8) = v2;
  }
  else
  {
    v9 = operator new(0x30uLL);
    v10 = xmmword_191A6F7A0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9);
    return 1;
  }
  return result;
}

void sub_190F54D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F54D9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_execution_stream_operation_config_options_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z53e5rt_execution_stream_operation_config_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_execution_stream_operation_config_options_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_execution_stream_operation_config_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F54E08()
{
  return &unk_1E2DCB008;
}

void sub_190F54E18()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F54E2C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCB028;
  result[1] = v3;
  return result;
}

uint64_t sub_190F54E60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCB028;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F54E7C(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8;
  __int128 v9;

  v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *v2;
      *v2 = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      MEMORY[0x19401CD90](v2, 0x20C4093837F09);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v8 = operator new(0x30uLL);
      v9 = xmmword_191A6FF90;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9) < 0)
        operator delete(v8);
      return 1;
    }
  }
  else
  {
    v8 = operator new(0x30uLL);
    v9 = xmmword_191A6F7A0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8);
    return 1;
  }
  return result;
}

void sub_190F5501C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F5505C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z54e5rt_execution_stream_operation_config_options_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z54e5rt_execution_stream_operation_config_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z54e5rt_execution_stream_operation_config_options_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z54e5rt_execution_stream_operation_config_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F550C8()
{
  return &unk_1E2DCB088;
}

void sub_190F550D8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F550EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB0A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F55124(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB0A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F55144(uint64_t a1)
{
  const void ***v1;
  char PrewireModelMemory;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      PrewireModelMemory = E5RT::ExecutionStreamOperationConfigOptions::GetPrewireModelMemory(*v1);
      result = 0;
      **(_BYTE **)(a1 + 16) = PrewireModelMemory;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: value is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F552C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F55300(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_execution_stream_operation_config_options_get_prewire_model_memoryE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z71e5rt_execution_stream_operation_config_options_get_prewire_model_memoryE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_execution_stream_operation_config_options_get_prewire_model_memoryE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_execution_stream_operation_config_options_get_prewire_model_memoryE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F5536C()
{
  return &unk_1E2DCB108;
}

void sub_190F5537C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F55390(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB128;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F553C8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB128;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F553E8(uint64_t a1)
{
  const void ***v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(const void ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamOperationConfigOptions::SetPrewireModelMemory(*v1, *(_BYTE *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190F554C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F554FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_execution_stream_operation_config_options_set_prewire_model_memoryE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z71e5rt_execution_stream_operation_config_options_set_prewire_model_memoryE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_execution_stream_operation_config_options_set_prewire_model_memoryE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_execution_stream_operation_config_options_set_prewire_model_memoryE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F55568()
{
  return &unk_1E2DCB188;
}

void E5RT::AsyncEvent::~AsyncEvent(E5RT::AsyncEvent *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59A28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59A28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59A28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19401CD90);
}

uint64_t E5RT::AsyncEvent::GetEventName(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t E5RT::AsyncEvent::SetActiveFutureValue(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t E5RT::AsyncEvent::GetLastSignaledValue(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t E5RT::AsyncEvent::SyncWait(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

uint64_t E5RT::AsyncEvent::AsyncNotify(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t E5RT::AsyncEvent::Signal(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
}

_QWORD *e5rt_compute_gpu_device::e5rt_compute_gpu_device(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t e5rt_compute_gpu_device_retain_all(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCB1A8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F55768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_compute_gpu_device_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCB228;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190F5583C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_compute_gpu_device_retain_from_mtl_device(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v8[0] = &off_1E2DCB2A8;
  v8[1] = a1;
  v8[2] = v3;
  v9 = v8;
  v4 = E5RT::ExceptionSafeExecute((uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return v4;
}

void sub_190F5592C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t e5rt_compute_gpu_device_get_mtl_device(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCB328;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190F55A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_190F55A48()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F55A5C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB1A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F55A94(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB1A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F55AB4(E5RT::ComputeGPUDevice *a1)
{
  _QWORD *AllAvailableComputeGPUDevices;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  void *v9;
  __int128 v10;

  if (*((_QWORD *)a1 + 1))
  {
    if (*((_QWORD *)a1 + 2))
    {
      AllAvailableComputeGPUDevices = (_QWORD *)E5RT::ComputeGPUDevice::GetAllAvailableComputeGPUDevices(a1);
      **((_QWORD **)a1 + 2) = (uint64_t)(AllAvailableComputeGPUDevices[1] - *AllAvailableComputeGPUDevices) >> 3;
      **((_QWORD **)a1 + 1) = operator new[]();
      if (**((_QWORD **)a1 + 2))
      {
        v3 = 0;
        do
        {
          v4 = *(_QWORD *)(*AllAvailableComputeGPUDevices + 8 * v3);
          v5 = (_QWORD *)operator new();
          *v5 = v4;
          *(_QWORD *)(**((_QWORD **)a1 + 1) + 8 * v3++) = v5;
        }
        while (v3 < **((_QWORD **)a1 + 2));
      }
      return 0;
    }
    v9 = operator new(0x30uLL);
    v10 = xmmword_191A6F7B0;
    strcpy((char *)v9, "Invalid Function Argument: num_devices is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
  }
  else
  {
    v9 = operator new(0x30uLL);
    v10 = xmmword_191A6F7B0;
    strcpy((char *)v9, "Invalid Function Argument: gpu_devices is NULL.");
    v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
  }
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 1;
}

void sub_190F55C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_190F55CDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_compute_gpu_device_retain_allE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z34e5rt_compute_gpu_device_retain_allE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_compute_gpu_device_retain_allE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_compute_gpu_device_retain_allE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F55D48()
{
  return &unk_1E2DCB208;
}

void sub_190F55D58()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F55D6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DCB228;
  result[1] = v3;
  return result;
}

uint64_t sub_190F55DA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DCB228;
  a2[1] = v2;
  return result;
}

uint64_t sub_190F55DBC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  void *__p[2];
  char v5;
  void *v6;
  __int128 v7;

  v1 = *(_QWORD **)(a1 + 8);
  if (v1)
  {
    if (*v1)
    {
      MEMORY[0x19401CD90](*v1, 0x60C4044C4A2DFLL);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v6 = operator new(0x30uLL);
      v7 = xmmword_191A6FF90;
      strcpy((char *)v6, "Invalid Function Argument: *handle is NULL.");
      v5 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
      if (v5 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v7) < 0)
        operator delete(v6);
      return 1;
    }
  }
  else
  {
    v6 = operator new(0x30uLL);
    v7 = xmmword_191A6F7A0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6);
    return 1;
  }
  return result;
}

void sub_190F55F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F55F80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_compute_gpu_device_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z31e5rt_compute_gpu_device_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_compute_gpu_device_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_compute_gpu_device_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F55FEC()
{
  return &unk_1E2DCB288;
}

uint64_t sub_190F55FF8(uint64_t a1)
{

  return a1;
}

void sub_190F56020(uint64_t a1)
{

  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190F56058(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E2DCB2A8;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id sub_190F5609C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = &off_1E2DCB2A8;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void sub_190F560D0(uint64_t a1)
{

}

void sub_190F560D8(id *a1)
{

  operator delete(a1);
}

uint64_t sub_190F56100(uint64_t a1)
{
  uint64_t ComputeGPUDeviceForMTLDevice;
  _QWORD *v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    ComputeGPUDeviceForMTLDevice = E5RT::ComputeGPUDevice::GetComputeGPUDeviceForMTLDevice(*(void **)(a1 + 16));
    v3 = (_QWORD *)operator new();
    result = 0;
    *v3 = ComputeGPUDeviceForMTLDevice;
    **(_QWORD **)(a1 + 8) = v3;
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7C0;
    strcpy((char *)v7, "Invalid Function Argument: gpu_device is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F561FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F56238(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_compute_gpu_device_retain_from_mtl_deviceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z46e5rt_compute_gpu_device_retain_from_mtl_deviceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_compute_gpu_device_retain_from_mtl_deviceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_compute_gpu_device_retain_from_mtl_deviceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F562A4()
{
  return &unk_1E2DCB308;
}

void sub_190F562B4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190F562C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DCB328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190F56300(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DCB328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190F56320(uint64_t a1)
{
  id ***v1;
  id v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(id ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      E5RT::ComputeGPUDevice::GetMTLDevice(*v1);
      v3 = (id)objc_claimAutoreleasedReturnValue();
      result = 0;
      **(_QWORD **)(a1 + 16) = v3;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F790;
      strcpy((char *)v7, "Invalid Function Argument: mtlDevice is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7C0;
    strcpy((char *)v7, "Invalid Function Argument: gpu_device is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190F564A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190F564E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z38e5rt_compute_gpu_device_get_mtl_deviceE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z38e5rt_compute_gpu_device_get_mtl_deviceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38e5rt_compute_gpu_device_get_mtl_deviceE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38e5rt_compute_gpu_device_get_mtl_deviceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190F56550()
{
  return &unk_1E2DCB388;
}

uint64_t E5RT::AsyncTask::AsyncTask(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;

  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
    if (v13 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = a3[1];
  a3[1] = 0;
  v17 = a3[2];
  v16 = a3 + 2;
  v15 = v17;
  *(_QWORD *)(a1 + 48) = v17;
  v18 = v16[1];
  *(_QWORD *)(a1 + 56) = v18;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)v16 + 4);
  if (v18)
  {
    v19 = *(_QWORD *)(v15 + 8);
    v20 = *(_QWORD *)(a1 + 40);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20)
        v19 %= v20;
    }
    else
    {
      v19 &= v20 - 1;
    }
    *(_QWORD *)(v14 + 8 * v19) = a1 + 48;
    *v16 = 0;
    v16[1] = 0;
  }
  *(_OWORD *)(a1 + 72) = *a4;
  *(_QWORD *)(a1 + 88) = a5;
  *(_QWORD *)(a1 + 96) = a6;
  v21 = (std::string *)(a1 + 104);
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v22 = *a7;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a7 + 2);
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
  }
  *(_BYTE *)(a1 + 128) = 0;
  return a1;
}

void sub_190F56694(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t E5RT::AsyncTask::Dispatched(E5RT::AsyncTask *this)
{
  return *((unsigned __int8 *)this + 128);
}

uint64_t E5RT::AsyncTask::GetStreamId(E5RT::AsyncTask *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t E5RT::AsyncTask::GetAsyncTaskName(E5RT::AsyncTask *this)
{
  return (uint64_t)this + 104;
}

uint64_t E5RT::AsyncTask::GetDependentEvents(E5RT::AsyncTask *this)
{
  return (uint64_t)this + 32;
}

uint64_t E5RT::AsyncTask::GetCompletionEvent(E5RT::AsyncTask *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t E5RT::AsyncTask::GetCompletionEventValue(E5RT::AsyncTask *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t E5RT::AsyncTask::MarkDispatched(uint64_t this)
{
  *(_BYTE *)(this + 128) = 1;
  return this;
}

void E5RT::AsyncTask::RemoveDependency(E5RT::AsyncTask *this, const E5RT::AsyncEvent *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *exception;
  _QWORD v6[3];
  _BYTE v7[8];
  const E5RT::AsyncEvent *v8;
  void *__p[3];

  v8 = a2;
  v2 = (_QWORD *)((char *)this + 32);
  if (!std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>((_QWORD *)this + 4, (uint64_t *)&v8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "RemoveDependency");
    std::string::basic_string[abi:ne180100]<0>(v6, "Dependent event not found.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, __p, v7);
  }
  v3 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v2, (uint64_t *)&v8);
  if (v3)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v2, v3, (uint64_t)__p);
    v4 = __p[0];
    __p[0] = 0;
    if (v4)
      operator delete(v4);
  }
}

void sub_190F567F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

E5RT::AsyncEvent *E5RT::AsyncTask::SignalCompletionEvent(E5RT::AsyncTask *this)
{
  E5RT::AsyncEvent *result;

  result = (E5RT::AsyncEvent *)*((_QWORD *)this + 9);
  if (result)
    return (E5RT::AsyncEvent *)E5RT::AsyncEvent::Signal(result);
  return result;
}

E5RT::AsyncEvent *E5RT::AsyncTask::SafeExecuteTask@<X0>(E5RT::AsyncTask *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  E5RT::AsyncEvent *result;

  *((_BYTE *)this + 128) = 1;
  *a2 = 0;
  v3 = *((_QWORD *)this + 3);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  result = (E5RT::AsyncEvent *)*((_QWORD *)this + 9);
  if (result)
    return (E5RT::AsyncEvent *)E5RT::AsyncEvent::Signal(result);
  return result;
}

uint64_t std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string const&,E5RT::Status>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = E5RT::E5RTError::E5RTError(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_190F56C24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xF1C40B1F135EALL);
  _Unwind_Resume(a1);
}

E5RT::E5BundleCacheManager *E5RT::E5BundleCacheManager::E5BundleCacheManager(E5RT::E5BundleCacheManager *this, const void **a2)
{
  std::__fs::filesystem::path *v3;
  uint64_t BundleCacheLocation;
  _BOOL4 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  std::string *v15;
  std::string *v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *p_pn;
  int64_t size;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  void *v26;
  void *v27;
  std::string::size_type v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint32_t v33;
  uint64_t v34;
  uint32_t v35;
  std::string *v36;
  uint64_t v37;
  std::string::size_type v38;
  uint64_t v39;
  std::string *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  std::string *v44;
  const char *v45;
  std::string *v46;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *exception;
  void *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void **v58;
  void *v59;
  uint64_t v60;
  unsigned __int8 v61;
  std::string __dst[66];
  int v63;
  uint64_t v64;
  std::random_device v65;
  void *v66[2];
  char v67;
  std::string pn;
  std::string __p;
  uint64_t v70;
  void *v71;
  char v72;
  uint64_t v73;
  void *v74;
  _QWORD v75[4];

  v75[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E2D5B0B8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (std::__fs::filesystem::path *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v58 = (void **)((char *)this + 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_BYTE *)this + 56) = 0;
  BundleCacheLocation = E5RT::E5CompilerConfigOptions::GetBundleCacheLocation(a2);
  E5Common::DispatchOnceWithExceptionThrow(&qword_1EE214820, (uint64_t)&unk_1E2DCB398);
  if (byte_1EE214818)
  {
    v5 = 1;
  }
  else
  {
    v6 = *(unsigned __int8 *)(BundleCacheLocation + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(BundleCacheLocation + 8);
    v5 = v6 != 0;
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = v7;
  if (v5)
  {
    E5Common::DispatchOnceWithExceptionThrow(&qword_1EE214820, (uint64_t)&unk_1E2DCB398);
    if (byte_1EE214818)
    {
      std::string::basic_string[abi:ne180100]<0>(__dst, "e5rt");
      E5RT::GetE5RTLog((uint64_t)__dst);
      v48 = objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_190DAF000, v48, OS_LOG_TYPE_INFO, "Process holds E5 bundle sharing entitlement.\n", (uint8_t *)__dst, 2u);
      }

      v49 = (void *)MEMORY[0x1E0C99E98];
      sub_190F57B88();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "fileURLWithPath:", v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v75[0] = v51;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v75, 1);
      v52 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__dst, "e5rt");
      E5RT::GetE5RTLog((uint64_t)__dst);
      v55 = objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, "Customized E5 bundle location \n", (uint8_t *)__dst, 2u);
      }

      v56 = (void *)MEMORY[0x1E0C99E98];
      sub_190F57BBC((uint64_t *)BundleCacheLocation);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "fileURLWithPath:", v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v74 = v51;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v74, 1);
      v52 = objc_claimAutoreleasedReturnValue();
    }
    v8 = (void *)v52;

  }
  else
  {
    objc_msgSend(v7, "URLsForDirectory:inDomains:", 13, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (!objc_msgSend(v8, "count"))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "E5BundleCacheManager");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to locate Caches directory. Cannot initialize E5BundleCacheManager.");
    E5RT::Status::Status(&pn, 11, &__p);
    E5RT::E5RTError::E5RTError(exception, __dst, &pn);
  }
  objc_msgSend(v8, "objectAtIndexedSubscript:", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (!v10)
    {
      v54 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__dst, "E5BundleCacheManager");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to query the NSBundle mainBundle.");
      E5RT::Status::Status(&pn, 11, &__p);
      E5RT::E5RTError::E5RTError(v54, __dst, &pn);
    }
    objc_msgSend(v10, "bundleIdentifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12
      || (objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"),
          v26 = (void *)objc_claimAutoreleasedReturnValue(),
          (v27 = v26) != 0)
      && (objc_msgSend(v26, "processName"), v12 = (void *)objc_claimAutoreleasedReturnValue(), v27, v12))
    {
      objc_msgSend(v9, "URLByAppendingPathComponent:", v12);
      v13 = objc_claimAutoreleasedReturnValue();

      v9 = (void *)v13;
    }

  }
  objc_msgSend(v9, "URLByAppendingPathComponent:", CFSTR("com.apple.e5rt.e5bundlecache"));
  v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v15 = (std::string *)objc_msgSend(v14, "fileSystemRepresentation");
  if (*((char *)this + 31) < 0)
  {
    **((_BYTE **)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 31) = 0;
  }
  v16 = (std::string *)((char *)v15 - 1);
  do
  {
    v17 = v16->__r_.__value_.__s.__data_[1];
    v16 = (std::string *)((char *)v16 + 1);
  }
  while (v17);
  std::string::append[abi:ne180100]<char const*,0>(&v3->__pn_, v15, v16);
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&pn, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    pn = v3->__pn_;
  v67 = 9;
  strcpy((char *)v66, "/var/root");
  v18 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  v19 = (std::string *)pn.__r_.__value_.__r.__words[0];
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_pn = &pn;
  else
    p_pn = (std::string *)pn.__r_.__value_.__r.__words[0];
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  else
    size = pn.__r_.__value_.__l.__size_;
  if (size >= 9)
  {
    v22 = (std::string *)((char *)p_pn + size);
    v23 = p_pn;
    while (1)
    {
      v24 = (std::string *)memchr(v23, 47, size - 8);
      if (!v24)
        goto LABEL_62;
      if (v24->__r_.__value_.__l.__data_ == v66[0]
        && v24->__r_.__value_.__s.__data_[8] == (unint64_t)LOBYTE(v66[1]))
      {
        break;
      }
      v23 = (std::string *)((char *)&v24->__r_.__value_.__l.__data_ + 1);
      size = (char *)v22 - (char *)v23;
      if ((char *)v22 - (char *)v23 < 9)
        goto LABEL_62;
    }
    if (v24 != v22 && v24 == p_pn)
    {
      if ((v18 & 0x80) != 0)
      {
        v18 = pn.__r_.__value_.__l.__size_;
        if (pn.__r_.__value_.__l.__size_ >= 9)
        {
LABEL_46:
          v28 = v18 - 9;
          if (v18 - 9 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          if (v28 >= 0x17)
          {
            v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v30 = v28 | 7;
            v31 = v30 + 1;
            v29 = (std::string *)operator new(v30 + 1);
            __dst[0].__r_.__value_.__l.__size_ = v28;
            __dst[0].__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          }
          else
          {
            *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v18 - 9;
            v29 = __dst;
            if (v18 == 9)
              goto LABEL_54;
          }
          memmove(v29, (char *)&v19->__r_.__value_.__r.__words[1] + 1, v28);
LABEL_54:
          v29->__r_.__value_.__s.__data_[v28] = 0;
          std::operator+<char>();
          if (*((char *)this + 31) < 0)
            operator delete(v3->__pn_.__r_.__value_.__l.__data_);
          v3->__pn_ = __p;
          *((_BYTE *)this + 56) = 1;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&__p, "e5rt");
          E5RT::GetE5RTLog((uint64_t)&__p);
          v32 = objc_claimAutoreleasedReturnValue();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_190DAF000, v32, OS_LOG_TYPE_INFO, "E5BundleCacheManager: is root user\n", (uint8_t *)&__p, 2u);
          }

          if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst[0].__r_.__value_.__l.__data_);
          goto LABEL_62;
        }
      }
      else if (v18 > 8)
      {
        v19 = &pn;
        goto LABEL_46;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
LABEL_62:
  if (!getenv("ESPRESSO_USE_UNIQUE_BUNDLE_PATH"))
    goto LABEL_88;
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 12;
  strcpy((char *)__dst, "/dev/urandom");
  std::random_device::random_device(&v65, __dst);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
  v33 = arc4random();
  v34 = 1;
  v35 = v33;
  do
  {
    v35 = v34 + 1812433253 * (v35 ^ (v35 >> 30));
    *((_DWORD *)&__dst[0].__r_.__value_.__l.__data_ + v34++) = v35;
  }
  while (v34 != 624);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  *(_DWORD *)((char *)&__p.__r_.__value_.__r + *(_QWORD *)(__p.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&__p.__r_.__value_.__r + *(_QWORD *)(__p.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
  LODWORD(__dst[0].__r_.__value_.__l.__data_) = v63 ^ ((HIDWORD(__dst[0].__r_.__value_.__r.__words[0]) & 0x7FFFFFFE | v33 & 0x80000000) >> 1) ^ ((int)(HIDWORD(__dst[0].__r_.__value_.__r.__words[0]) << 31) >> 31) & 0x9908B0DF;
  v64 = 1;
  std::ostream::operator<<();
  std::stringbuf::str();
  if ((char)v61 < 0)
  {
    if (!v60 || *(_BYTE *)v59 != 47)
    {
LABEL_75:
      if (std::__fs::filesystem::path::__filename(v3).__size_)
        std::string::push_back(&v3->__pn_, 47);
      goto LABEL_78;
    }
  }
  else if (!v61 || v59 != 47)
  {
    goto LABEL_75;
  }
  if (*((char *)this + 31) < 0)
  {
    **((_BYTE **)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 31) = 0;
  }
LABEL_78:
  if ((v61 & 0x80u) == 0)
    v36 = (std::string *)&v59;
  else
    v36 = (std::string *)v59;
  v37 = v61;
  if ((v61 & 0x80u) != 0)
    v37 = v60;
  std::string::append[abi:ne180100]<char const*,0>(&v3->__pn_, v36, (std::string *)((char *)v36 + v37));
  if ((char)v61 < 0)
    operator delete(v59);
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v38 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  __p.__r_.__value_.__r.__words[2] = v38;
  v70 = MEMORY[0x1E0DE4FB8] + 16;
  if (v72 < 0)
    operator delete(v71);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v73);
  std::random_device::~random_device(&v65);
LABEL_88:
  E5RT::GetPlatformBuildVersion(__dst);
  if (*((char *)this + 55) < 0)
    operator delete(*v58);
  *(std::string *)v58 = __dst[0];
  std::__fs::filesystem::__status(v3, 0);
  if (__dst[0].__r_.__value_.__s.__data_[0] == 255 || !__dst[0].__r_.__value_.__s.__data_[0])
  {
    memset(&__p, 0, sizeof(__p));
    v39 = *((unsigned __int8 *)this + 55);
    if ((v39 & 0x80u) == 0)
      v40 = (std::string *)v58;
    else
      v40 = (std::string *)*((_QWORD *)this + 4);
    if ((v39 & 0x80u) != 0)
      v39 = *((_QWORD *)this + 5);
    std::string::append[abi:ne180100]<char const*,0>(&__p, v40, (std::string *)((char *)v40 + v39));
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)v3, (std::__fs::filesystem::path *)__dst);
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)__dst, 0);
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_99;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_99:
      *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 4;
      strcpy((char *)__dst, "e5rt");
      E5RT::GetE5RTLog((uint64_t)__dst);
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = v41;
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst[0].__r_.__value_.__l.__data_);
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          goto LABEL_123;
      }
      else if (!os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        goto LABEL_123;
      }
      if (*((char *)this + 31) < 0)
        std::string::__init_copy_ctor_external(__dst, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
      else
        __dst[0] = v3->__pn_;
      v44 = __dst;
      if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v44 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      v45 = "Created E5BundleCache at %s\n";
      goto LABEL_121;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_99;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 4;
  strcpy((char *)__dst, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__dst);
  v43 = objc_claimAutoreleasedReturnValue();
  v42 = v43;
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      goto LABEL_123;
  }
  else if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    goto LABEL_123;
  }
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(__dst, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    __dst[0] = v3->__pn_;
  v46 = __dst;
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
  v45 = "E5BundleCache exists at %s\n";
LABEL_121:
  _os_log_impl(&dword_190DAF000, v42, OS_LOG_TYPE_INFO, v45, (uint8_t *)&__p, 0xCu);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_123:

  if (*((_BYTE *)this + 56))
  {
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(__dst, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      __dst[0] = v3->__pn_;
    E5RT::E5BundleCacheManager::MarkAsMobileOwned((uint64_t)this, (std::string::size_type)__dst);
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst[0].__r_.__value_.__l.__data_);
  }
  E5RT::E5BundleCacheManager::PurgeBundlesFromPastBuildVersions(this);
  if (v67 < 0)
  {
    operator delete(v66[0]);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_131;
LABEL_133:
    operator delete(pn.__r_.__value_.__l.__data_);
    goto LABEL_131;
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_133;
LABEL_131:

  return this;
}

void sub_190F57874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void **a11)
{
  uint64_t v11;
  void **v12;
  void *v13;
  void *v14;

  if (*(char *)(v11 + 55) < 0)
    operator delete(*a11);
  if (*(char *)(v11 + 31) < 0)
  {
    operator delete(*v12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

id sub_190F57B88()
{
  E5Common::DispatchOnceWithExceptionThrow(&qword_1EE214830, (uint64_t)&unk_1E2DCB3B8);
  return (id)qword_1EE214828;
}

id sub_190F57BBC(uint64_t *a1)
{
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;

  if (*((char *)a1 + 23) >= 0)
    v1 = a1;
  else
    v1 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByExpandingTildeInPath");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "stringByStandardizingPath");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_190F57C30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_190F57D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](a1 + 128);
  return a1;
}

void E5RT::E5BundleCacheManager::MarkAsMobileOwned(uint64_t a1, std::string::size_type a2)
{
  NSObject *v3;
  NSObject *v4;
  std::string::size_type v5;
  passwd *v6;
  uid_t pw_uid;
  group *v8;
  gid_t gr_gid;
  uint64_t v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  NSObject *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  const std::__fs::filesystem::directory_entry *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::string *v31;
  std::string __p;
  std::string buf;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 56))
    return;
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&buf, "e5rt");
  E5RT::GetE5RTLog((uint64_t)&buf);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      goto LABEL_8;
  }
  else if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    goto LABEL_8;
  }
  if (*(char *)(a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
  _os_log_impl(&dword_190DAF000, v4, OS_LOG_TYPE_INFO, "E5BundleCacheManager::MarkAsMobileOwned: path = %s\n", (uint8_t *)&buf, 0xCu);
LABEL_8:

  v6 = getpwnam("mobile");
  if (!v6)
  {
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&buf, "e5rt");
    E5RT::GetE5RTLog((uint64_t)&buf);
    v20 = objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a2 + 23) >= 0)
        v21 = a2;
      else
        v21 = *(_QWORD *)a2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
      _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "E5BundleCacheManager::MarkAsMobileOwned: path = %s. Unable to query pwd for mobile.\n", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_34;
  }
  pw_uid = v6->pw_uid;
  v8 = getgrnam("mobile");
  if (!v8)
  {
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&buf, "e5rt");
    E5RT::GetE5RTLog((uint64_t)&buf);
    v20 = objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a2 + 23) >= 0)
        v22 = a2;
      else
        v22 = *(_QWORD *)a2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v22;
      _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, "E5BundleCacheManager::MarkAsMobileOwned: path = %s. Unable to query grp for mobile.\n", (uint8_t *)&buf, 0xCu);
    }
LABEL_34:

    return;
  }
  gr_gid = v8->gr_gid;
  memset(&__p, 0, sizeof(__p));
  v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = (std::string *)a2;
  else
    v11 = *(std::string **)a2;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&__p, v11, (std::string *)((char *)v11 + v10));
  MEMORY[0x19401CB80](&buf, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    size = buf.__r_.__value_.__l.__size_;
    v13 = buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_)
      goto LABEL_17;
  }
  else
  {
    size = buf.__r_.__value_.__l.__size_;
    v13 = buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_)
    {
LABEL_17:
      v14 = (unint64_t *)(size + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = v13;
      __p.__r_.__value_.__l.__size_ = size;
      __p.__r_.__value_.__s.__data_[16] = buf.__r_.__value_.__s.__data_[16];
      if (buf.__r_.__value_.__l.__size_)
      {
        v17 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        do
          v19 = __ldaxr(v17);
        while (__stlxr(v19 - 1, v17));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      goto LABEL_45;
    }
  }
  __p.__r_.__value_.__r.__words[0] = v13;
  __p.__r_.__value_.__l.__size_ = size;
  __p.__r_.__value_.__s.__data_[16] = buf.__r_.__value_.__s.__data_[16];
LABEL_45:
  while (__p.__r_.__value_.__r.__words[0])
  {
    v23 = std::__fs::filesystem::recursive_directory_iterator::__dereference((const std::__fs::filesystem::recursive_directory_iterator *)&__p);
    sub_190F5904C(pw_uid, gr_gid, (const char *)v23);
    std::__fs::filesystem::recursive_directory_iterator::__increment((std::__fs::filesystem::recursive_directory_iterator *)&__p, 0);
  }
  v24 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  memset(&buf, 0, sizeof(buf));
  v30 = *(unsigned __int8 *)(a2 + 23);
  if ((v30 & 0x80u) == 0)
    v31 = (std::string *)a2;
  else
    v31 = *(std::string **)a2;
  if ((v30 & 0x80u) != 0)
    v30 = *(_QWORD *)(a2 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&buf, v31, (std::string *)((char *)v31 + v30));
  sub_190F5904C(pw_uid, gr_gid, (const char *)&buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_190F58258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190F582C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void E5RT::E5BundleCacheManager::PurgeBundlesFromPastBuildVersions(E5RT::E5BundleCacheManager *this)
{
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__fs::filesystem::directory_entry *v10;
  std::__fs::filesystem::path::__string_view v11;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v13;
  std::basic_string_view<_CharT, _Traits>::size_type v14;
  uint64_t v15;
  std::string *v16;
  std::__fs::filesystem::path::__string_view v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *cntrl;
  uint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__fs::filesystem::path __p;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v29;
  std::__shared_weak_count *v30;
  std::__fs::filesystem::directory_iterator v31;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v32;
  std::__shared_weak_count *v33;
  std::string __dst;

  MEMORY[0x19401CB5C](&v32, (char *)this + 8, 0, 0);
  v2 = v32;
  v3 = v33;
  if (!v33)
  {
    v31.__imp_.__ptr_ = v32;
    v31.__imp_.__cntrl_ = 0;
LABEL_12:
    v29 = 0;
    v30 = 0;
    goto LABEL_15;
  }
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v6 = v33;
  v31.__imp_.__ptr_ = v2;
  v31.__imp_.__cntrl_ = v3;
  if (!v33)
    goto LABEL_12;
  v7 = (unint64_t *)&v33->__shared_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v29 = 0;
  v30 = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_15:
  while (v31.__imp_.__ptr_ != v29)
  {
    v10 = (std::__fs::filesystem::directory_entry *)std::__fs::filesystem::directory_iterator::__dereference(&v31);
    v11 = std::__fs::filesystem::path::__filename(&v10->__p_);
    if (v11.__size_ >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v11.__size_ >= 0x17)
    {
      v13 = (v11.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11.__size_ | 7) != 0x17)
        v13 = v11.__size_ | 7;
      v14 = v13 + 1;
      p_dst = (std::string *)operator new(v13 + 1);
      __dst.__r_.__value_.__l.__size_ = v11.__size_;
      __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_23:
      memmove(p_dst, v11.__data_, v11.__size_);
      goto LABEL_24;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11.__size_;
    p_dst = &__dst;
    if (v11.__size_)
      goto LABEL_23;
LABEL_24:
    p_dst->__r_.__value_.__s.__data_[v11.__size_] = 0;
    __p.__pn_ = __dst;
    memset(&__dst, 0, sizeof(__dst));
    v15 = *((unsigned __int8 *)this + 55);
    if ((v15 & 0x80u) == 0)
      v16 = (std::string *)((char *)this + 32);
    else
      v16 = (std::string *)*((_QWORD *)this + 4);
    if ((v15 & 0x80u) != 0)
      v15 = *((_QWORD *)this + 5);
    std::string::append[abi:ne180100]<char const*,0>(&__dst, v16, (std::string *)((char *)v16 + v15));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17.__data_ = (const std::string_view::value_type *)&__dst;
    else
      v17.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v17.__size_ = __dst.__r_.__value_.__l.__size_;
    v18 = std::__fs::filesystem::path::__compare(&__p, v17);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_40:
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        if (!v18)
          goto LABEL_14;
LABEL_41:
        E5RT::E5BundleCacheManager::PurgeAllBundlesWithinDirPath(this, &v10->__p_);
        goto LABEL_14;
      }
    }
    else if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_40;
    }
    if (v18)
      goto LABEL_41;
LABEL_14:
    std::__fs::filesystem::directory_iterator::__increment(&v31, 0);
  }
  v19 = v30;
  if (v30)
  {
    v20 = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  cntrl = v31.__imp_.__cntrl_;
  if (v31.__imp_.__cntrl_)
  {
    v23 = &v31.__imp_.__cntrl_->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v25 = v33;
  if (v33)
  {
    v26 = (unint64_t *)&v33->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_190F585C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void E5RT::E5BundleCacheManager::~E5BundleCacheManager(void **this)
{
  *this = off_1E2D5B0B8;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

{
  *this = off_1E2D5B0B8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x19401CD90);
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(this[1]);
  goto LABEL_6;
}

uint64_t E5RT::E5BundleCacheManager::GetRootPath(E5RT::E5BundleCacheManager *this)
{
  return (uint64_t)this + 8;
}

void E5RT::E5BundleCacheManager::PurgeBundle(E5RT::E5BundleCacheManager *this, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::path::__string_view v2;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v4;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::__fs::filesystem::path::__string_view v6;
  int v7;
  uint64_t v8;
  const std::__fs::filesystem::path *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  const void **v15;
  const void **v16;
  std::__shared_weak_count *size;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  std::string *v21;
  uint64_t v22;
  void *v23;
  std::string *v24;
  void *v25;
  void *v26;
  unint64_t *p_shared_owners;
  E5RT::E5ProgramImpl *v28;
  std::__fs::filesystem::path *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _BYTE v35[16];
  char v36;
  E5RT::E5ProgramImpl *v37;
  std::__fs::filesystem::path v38;
  std::string __dst;

  v29 = a2;
  std::__fs::filesystem::__status(a2, 0);
  if (!__dst.__r_.__value_.__s.__data_[0] || __dst.__r_.__value_.__s.__data_[0] == 255)
    return;
  v2 = std::__fs::filesystem::path::__extension(v29);
  if (v2.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v2.__size_ >= 0x17)
  {
    v4 = (v2.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2.__size_ | 7) != 0x17)
      v4 = v2.__size_ | 7;
    v5 = v4 + 1;
    p_dst = (std::string *)operator new(v4 + 1);
    __dst.__r_.__value_.__l.__size_ = v2.__size_;
    __dst.__r_.__value_.__r.__words[2] = v5 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2.__size_;
  p_dst = &__dst;
  if (v2.__size_)
LABEL_10:
    memmove(p_dst, v2.__data_, v2.__size_);
  p_dst->__r_.__value_.__s.__data_[v2.__size_] = 0;
  v38.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)".bundle", (std::string *)"");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v6.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v6.__size_ = __dst.__r_.__value_.__l.__size_;
  v7 = std::__fs::filesystem::path::__compare(&v38, v6);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_22:
    operator delete(v38.__pn_.__r_.__value_.__l.__data_);
    if (v7)
      return;
    goto LABEL_23;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_22;
LABEL_19:
  if (v7)
    return;
LABEL_23:
  if (SHIBYTE(v29->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, v29->__pn_.__r_.__value_.__l.__data_, v29->__pn_.__r_.__value_.__l.__size_);
  else
    __dst = v29->__pn_;
  v35[0] = 0;
  v36 = 0;
  E5RT::E5Program::LoadProgram((uint64_t)&__dst, (uint64_t)v35, &v37);
  if (v36)
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v35);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v8 = (*(uint64_t (**)(E5RT::E5ProgramImpl *))(*(_QWORD *)v37 + 16))(v37);
  v10 = *(_QWORD **)v8;
  v30 = *(_QWORD **)(v8 + 8);
  if (*(_QWORD **)v8 == v30)
    goto LABEL_64;
  while (2)
  {
    v31 = v10;
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10);
    v13 = *(_QWORD **)v11;
    v12 = *(_QWORD **)(v11 + 8);
    v32 = v12;
LABEL_35:
    if (v13 != v12)
    {
      v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13);
      v15 = *(const void ***)v14;
      v16 = *(const void ***)(v14 + 8);
      while (1)
      {
        if (v15 == v16)
        {
          v13 += 2;
          v12 = v32;
          goto LABEL_35;
        }
        if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v15 + 16))(*v15) == 7)
        {
          E5RT::E5Operation::GetOperationAttributes<MlcCpuInferenceOpT>(*v15, &__dst);
          mlc_services_model_purge_bundled();
          size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          if (!__dst.__r_.__value_.__l.__size_)
            goto LABEL_37;
          v18 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          goto LABEL_62;
        }
        if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v15 + 16))(*v15) != 1)
          goto LABEL_37;
        E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(*v15, &v33);
        memset(&v38, 0, sizeof(v38));
        v20 = *(_BYTE *)(v33 + 23);
        if (v20 >= 0)
          v21 = (std::string *)v33;
        else
          v21 = *(std::string **)v33;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(v33 + 23);
        else
          v22 = *(_QWORD *)(v33 + 8);
        std::string::append[abi:ne180100]<char const*,0>(&v38.__pn_, v21, (std::string *)((char *)v21 + v22));
        E5RT::ReadAneCacheUrlIdentifier(&v38, &__dst);
        objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &__dst;
        else
          v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v24, v29);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CFDF68], "modelWithCacheURLIdentifier:", v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "purgeCompiledModel:", v26);

        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_56:
            size = v34;
            if (!v34)
              goto LABEL_37;
            goto LABEL_60;
          }
        }
        else if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_56;
        }
        operator delete(v38.__pn_.__r_.__value_.__l.__data_);
        size = v34;
        if (!v34)
          goto LABEL_37;
LABEL_60:
        p_shared_owners = (unint64_t *)&size->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
LABEL_62:
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
LABEL_37:
        v15 += 2;
      }
    }
    v10 = v31 + 2;
    if (v31 + 2 != v30)
      continue;
    break;
  }
LABEL_64:
  v28 = v37;
  v37 = 0;
  if (v28)
    (*(void (**)(E5RT::E5ProgramImpl *))(*(_QWORD *)v28 + 8))(v28);
  E5RT::RemoveAll(v29, v9);
}

void sub_190F58B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x190F58AD0);
  }
  _Unwind_Resume(a1);
}

void E5RT::E5BundleCacheManager::PurgeAllBundlesWithinDirPath(E5RT::E5BundleCacheManager *this, std::__fs::filesystem::path *a2)
{
  const std::__fs::filesystem::path *v3;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__fs::filesystem::path *v12;
  std::__fs::filesystem::path::__string_view v13;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  std::__fs::filesystem::path::__string_view v17;
  E5RT::E5BundleCacheManager *v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *cntrl;
  uint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__fs::filesystem::path v30;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v31;
  std::__shared_weak_count *v32;
  std::__fs::filesystem::directory_iterator v33;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v34;
  std::__shared_weak_count *v35;
  std::string __dst;

  std::__fs::filesystem::__status(a2, 0);
  if (__dst.__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_58;
  MEMORY[0x19401CB5C](&v34, a2, 0, 0);
  v4 = v34;
  v5 = v35;
  if (!v35)
  {
    v33.__imp_.__ptr_ = v34;
    v33.__imp_.__cntrl_ = 0;
LABEL_13:
    v31 = 0;
    v32 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v35->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = v35;
  v33.__imp_.__ptr_ = v4;
  v33.__imp_.__cntrl_ = v5;
  if (!v35)
    goto LABEL_13;
  v9 = (unint64_t *)&v35->__shared_owners_;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v31 = 0;
  v32 = 0;
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  while (v33.__imp_.__ptr_ != v31)
  {
    v12 = (std::__fs::filesystem::path *)std::__fs::filesystem::directory_iterator::__dereference(&v33);
    v13 = std::__fs::filesystem::path::__extension(v12);
    if (v13.__size_ >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v13.__size_ >= 0x17)
    {
      v15 = (v13.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13.__size_ | 7) != 0x17)
        v15 = v13.__size_ | 7;
      v16 = v15 + 1;
      p_dst = (std::string *)operator new(v15 + 1);
      __dst.__r_.__value_.__l.__size_ = v13.__size_;
      __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_25:
      memmove(p_dst, v13.__data_, v13.__size_);
      goto LABEL_26;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13.__size_;
    p_dst = &__dst;
    if (v13.__size_)
      goto LABEL_25;
LABEL_26:
    p_dst->__r_.__value_.__s.__data_[v13.__size_] = 0;
    v30.__pn_ = __dst;
    memset(&__dst, 0, sizeof(__dst));
    std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)".bundle", (std::string *)"");
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17.__data_ = (const std::string_view::value_type *)&__dst;
    else
      v17.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v17.__size_ = __dst.__r_.__value_.__l.__size_;
    v18 = (E5RT::E5BundleCacheManager *)std::__fs::filesystem::path::__compare(&v30, v17);
    v19 = (int)v18;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_34:
        if (!v19)
          goto LABEL_15;
        goto LABEL_38;
      }
    }
    else if ((SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    if (!v19)
    {
LABEL_15:
      E5RT::E5BundleCacheManager::PurgeBundle(v18, v12);
      goto LABEL_16;
    }
LABEL_38:
    if (((1 << v12[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x13) != 0)
    {
      std::__fs::filesystem::__status(v12, 0);
      if (__dst.__r_.__value_.__s.__data_[0] != 2)
        goto LABEL_16;
    }
    else if (v12[3].__pn_.__r_.__value_.__s.__data_[0] != 2)
    {
      goto LABEL_16;
    }
    E5RT::E5BundleCacheManager::PurgeAllBundlesWithinDirPath(this, v12);
LABEL_16:
    std::__fs::filesystem::directory_iterator::__increment(&v33, 0);
  }
  v20 = v32;
  if (v32)
  {
    v21 = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  cntrl = v33.__imp_.__cntrl_;
  if (v33.__imp_.__cntrl_)
  {
    v24 = &v33.__imp_.__cntrl_->__shared_owners_;
    do
      v25 = __ldaxr((unint64_t *)v24);
    while (__stlxr(v25 - 1, (unint64_t *)v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v26 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
LABEL_58:
  E5RT::RemoveAll(a2, v3);
}

void sub_190F58F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void E5RT::E5BundleCacheManager::PurgeBundlesForInputPath(E5RT::E5BundleCacheManager *a1, std::string *a2)
{
  std::__fs::filesystem::path __p;

  E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<std::string>((uint64_t)a1, a2, &__p);
  E5RT::E5BundleCacheManager::PurgeAllBundlesWithinDirPath(a1, &__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
}

void sub_190F59030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_190F5904C(uid_t a1, gid_t a2, const char *a3)
{
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  uint64_t *v10;
  int *v11;
  const char *v12;
  int v13;
  _BYTE __p[12];
  __int16 v15;
  int v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a3[23] >= 0)
    v6 = a3;
  else
    v6 = *(const char **)a3;
  if (chown(v6, a1, a2))
  {
    v17 = 4;
    strcpy(__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v17 < 0)
    {
      operator delete(*(void **)__p);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
LABEL_13:

        return;
      }
    }
    else if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      goto LABEL_13;
    }
    v9 = a3[23];
    v10 = *(uint64_t **)a3;
    v11 = __error();
    if (v9 >= 0)
      v12 = a3;
    else
      v12 = (const char *)v10;
    v13 = *v11;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v12;
    v15 = 1024;
    v16 = v13;
    _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "E5BundleCacheManager::MarkAsMobileOwnedRecursive: path = %s failed with errno = %i \n", __p, 0x12u);
    goto LABEL_13;
  }
}

void sub_190F5917C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_190F591B0()
{
  __SecTask *v0;
  __SecTask *v1;
  CFTypeRef v2;

  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (v0)
  {
    v1 = v0;
    v2 = SecTaskCopyValueForEntitlement(v0, CFSTR("com.apple.private.e5rt.sharing-e5-bundles-allowed"), 0);
    if (v2)
    {
      byte_1EE214818 = v2 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
      CFRelease(v2);
    }
    CFRelease(v1);
  }
}

void sub_190F59224()
{
  uint64_t started;
  NSObject *v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _BYTE __p[12];
  char v6;
  _BYTE v7[1024];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  bzero(v7, 0x400uLL);
  started = sysdir_start_search_path_enumeration_private();
  MEMORY[0x19401DA08](started, v7);
  v6 = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v6 < 0)
  {
    operator delete(*(void **)__p);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v7;
    _os_log_impl(&dword_190DAF000, v2, OS_LOG_TYPE_INFO, "E5BundleCacheManager: GlobalCacheDirectory %s\n", __p, 0xCu);
  }
LABEL_4:

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v7, 4);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1EE214828;
  qword_1EE214828 = v3;

}

void sub_190F59350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

double E5RT::ExecutionStreamTelemetryContainer::Create@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = operator new();
  *(_QWORD *)v3 = off_1E2D36558;
  result = 0.0;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_DWORD *)(v3 + 40) = 1065353216;
  *a1 = v3;
  return result;
}

uint64_t *E5RT::ExecutionStreamTelemetryContainer::AddGPUTelemetryValue(uint64_t a1, __int128 *a2, double a3)
{
  uint64_t *result;
  __int128 *v5;

  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v5);
  *((double *)result + 5) = a3;
  return result;
}

double E5RT::ExecutionStreamTelemetryContainer::GetGPUTelemetryData(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;

  v3 = (_QWORD *)(a1 + 8);
  if (!std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>((_QWORD *)(a1 + 8), a2))return 0.0;
  v4 = std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>(v3, a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((double *)v4 + 5);
}

void E5RT::ExecutionStreamTelemetryContainer::~ExecutionStreamTelemetryContainer(E5RT::ExecutionStreamTelemetryContainer *this)
{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E2D36558;
  v2 = (void **)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
}

{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E2D36558;
  v2 = (void **)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x19401CD90);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190F599C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190F599D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void E5RT::ExecutionStream::~ExecutionStream(E5RT::ExecutionStream *this)
{
  E5RT::ExecutionStreamImpl *v2;

  v2 = (E5RT::ExecutionStreamImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5ABB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  E5RT::ExecutionStreamImpl *v2;

  v2 = (E5RT::ExecutionStreamImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5ABB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  E5RT::ExecutionStreamImpl *v2;

  v2 = (E5RT::ExecutionStreamImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5ABB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x19401CD90]();
  }
  JUMPOUT(0x19401CD90);
}

void E5RT::ExecutionStreamPriv::~ExecutionStreamPriv(E5RT::ExecutionStreamPriv *this)
{
  E5RT::ExecutionStreamImpl *v2;

  v2 = (E5RT::ExecutionStreamImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5ABB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  E5RT::ExecutionStreamImpl *v2;

  v2 = (E5RT::ExecutionStreamImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5ABB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x19401CD90]();
  }
  JUMPOUT(0x19401CD90);
}

_QWORD *E5RT::ExecutionStream::ExecutionStream(_QWORD *this)
{
  *this = &off_1E2D5ABB0;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E2D5ABB0;
  this[1] = 0;
  return this;
}

_QWORD *E5RT::ExecutionStream::ExecutionStream(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D5ABB0;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D5ABB0;
  result[1] = v2;
  return result;
}

E5RT::ExecutionStreamImpl **std::unique_ptr<E5RT::ExecutionStreamImpl>::~unique_ptr[abi:ne180100](E5RT::ExecutionStreamImpl **a1)
{
  E5RT::ExecutionStreamImpl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void E5RT::ExecutionStream::EncodeComputeWorkload()
{
  void *exception;
  char *v1;
  __int128 v2;
  _BYTE v3[8];
  char v4[32];

  exception = __cxa_allocate_exception(0x18uLL);
  v4[23] = 21;
  strcpy(v4, "EncodeComputeWorkload");
  v1 = (char *)operator new(0x68uLL);
  v2 = xmmword_191A79C60;
  strcpy(v1, "ExecutionStream EncodeComputeWorkload() is no longer supported. Switch to ExecutionStreamOperation.");
  E5RT::Status::Status(v3, 2, &v1);
  E5RT::E5RTError::E5RTError(exception, v4, v3);
}

void sub_190F59F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_190F59F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F59F68);
}

_QWORD *E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStreamImpl **this, const void **a2)
{
  return E5RT::ExecutionStreamImpl::ExecuteStreamSync(this[1], a2);
}

uint64_t E5RT::ExecutionStream::PreWireInUseAllocations(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::PreWireInUseAllocations(this[1]);
}

uint64_t E5RT::ExecutionStream::GetStreamId(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::GetStreamId(this[1]);
}

_QWORD *E5RT::ExecutionStream::SubmitStreamAsync(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  E5RT::ExecutionStreamImpl::SubmitStreamAsync(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_190F5A090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*(_QWORD *)a13 + 40))();
  _Unwind_Resume(exception_object);
}

void E5RT::ExecutionStream::AsyncSubmit()
{
  void *exception;
  char *v1;
  __int128 v2;
  _BYTE v3[8];
  char v4[24];

  exception = __cxa_allocate_exception(0x18uLL);
  v4[23] = 11;
  strcpy(v4, "AsyncSubmit");
  v1 = (char *)operator new(0x48uLL);
  v2 = xmmword_191A79C70;
  E5RT::Status::Status(v3, 2, &v1);
  E5RT::E5RTError::E5RTError(exception, v4, v3);
}

void sub_190F5A1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v23)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_190F5A208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190F5A1F8);
}

uint64_t E5RT::ExecutionStream::GetInternalAsyncComputeRequestIdForLastSubmit(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::GetInternalAsyncComputeRequestIdForLastSubmit(this[1]);
}

uint64_t E5RT::ExecutionStream::GetConfigOptions(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::GetConfigOptions(this[1]);
}

uint64_t E5RT::ExecutionStream::ResetConfigOptions@<X0>(E5RT::ExecutionStream *this@<X0>, _QWORD *a2@<X8>)
{
  return E5RT::ExecutionStreamImpl::ResetConfigOptions(*((_QWORD *)this + 1), a2);
}

uint64_t E5RT::ExecutionStream::SetConfigOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  E5RT::ExecutionStreamImpl::SetConfigOptions(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190F5A294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void E5RT_Private::StepStreamSync(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  E5RT::ExecuteOptions *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *exception;
  _QWORD v15[3];
  _BYTE v16[8];
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v2 = (std::__shared_weak_count *)a1[1];
  v17 = *a1;
  v18 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "StepStreamSync");
    std::string::basic_string[abi:ne180100]<0>(v15, "Invalid dynamic type.");
    E5RT::Status::Status(v16, 2, v15);
    E5RT::E5RTError::E5RTError(exception, v21, v16);
  }
  v6 = (_QWORD *)a2[3];
  if (!v6)
  {
    v20 = 0;
    v7 = *(E5RT::ExecuteOptions **)(v3 + 8);
    goto LABEL_13;
  }
  if (v6 == a2)
  {
    v20 = v19;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v19);
    v6 = v20;
    v7 = *(E5RT::ExecuteOptions **)(v3 + 8);
    if (v20)
      goto LABEL_11;
LABEL_13:
    v22 = v6;
    goto LABEL_14;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v20 = v6;
  v7 = *(E5RT::ExecuteOptions **)(v3 + 8);
  if (!v6)
    goto LABEL_13;
LABEL_11:
  if (v6 != v19)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    goto LABEL_13;
  }
  v22 = v21;
  (*(void (**)(_QWORD *, _QWORD *))(v19[0] + 24))(v19, v21);
LABEL_14:
  E5RT::ExecutionStreamImpl::StepStreamSync(v7, v21);
  v8 = v22;
  if (v22 == v21)
  {
    v9 = 4;
    v8 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_19;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_19:
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_24;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_24:
  if (v2)
  {
    v12 = (unint64_t *)&v2->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_190F5A4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v26;
  uint64_t v27;

  v26 = a25;
  if (a25 == &a22)
  {
    v27 = 4;
    v26 = &a22;
  }
  else
  {
    if (!a25)
    {
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void E5RT_Private::SetANEExecutionPriorityForStream(uint64_t *a1, int a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *exception;
  _QWORD v9[3];
  _BYTE v10[8];
  _QWORD v11[5];

  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  v11[3] = *a1;
  v11[4] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "SetANEExecutionPriorityForStream");
    std::string::basic_string[abi:ne180100]<0>(v9, "Invalid execution stream pointer provided.");
    E5RT::Status::Status(v10, 2, v9);
    E5RT::E5RTError::E5RTError(exception, v11, v10);
  }
  E5RT::ExecutionStreamImpl::SetANEExecutionPriority(*(_QWORD *)(v2 + 8), a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_190F5A6F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_190F5A704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(E5RT::ExecutionStreamImpl *this)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  E5RT::ExecutionStreamImpl::ResetStream(this);
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  while (v3)
  {
    v8 = v3;
    v3 = (_QWORD *)*v3;
    v9 = (std::__shared_weak_count *)v8[3];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    operator delete(v8);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v6 = *((_QWORD *)this + 1);
    v7 = *(void **)this;
    if (v6 != v5)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v6 - 8);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v5;
    operator delete(v7);
  }
}

uint64_t E5RT::ExecutionStreamImpl::GetConfigOptions(E5RT::ExecutionStreamImpl *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    if (qword_1EE214840 != -1)
      dispatch_once(&qword_1EE214840, &unk_1E2DCB3D8);
    return qword_1EE214838;
  }
  return result;
}

