void sub_190E7ADA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;
  int v50;
  uint64_t v51;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((v50 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v51 - 105) < 0)
        operator delete(*(void **)(v51 - 128));
      std::vector<std::string>::~vector[abi:ne180100](&a44);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v51 - 160));
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a23);
      if (a31 < 0)
        operator delete(a26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v50)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v49);
  goto LABEL_6;
}

BOOL E5RT::PathWrapper::HasExtension(const std::__fs::filesystem::path *a1, uint64_t a2)
{
  std::__fs::filesystem::path::__string_view v3;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  uint64_t v7;
  std::string *v8;
  std::__fs::filesystem::path::__string_view v9;
  int v10;
  std::__fs::filesystem::path __p;
  std::string __dst;

  v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3.__size_;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3.__size_;
  p_dst = &__dst;
  if (v3.__size_)
LABEL_8:
    memmove(p_dst, v3.__data_, v3.__size_);
  p_dst->__r_.__value_.__s.__data_[v3.__size_] = 0;
  __p.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::string *)a2;
  else
    v8 = *(std::string **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v8, (std::string *)((char *)v8 + v7));
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v9.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v9.__size_ = __dst.__r_.__value_.__l.__size_;
  v10 = std::__fs::filesystem::path::__compare(&__p, v9);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v10 == 0;
LABEL_24:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    return v10 == 0;
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_24;
  return v10 == 0;
}

void sub_190E7B3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

BOOL E5RT::PathWrapper::PathExists(const std::__fs::filesystem::path *this)
{
  BOOL v1;
  unsigned __int8 v3;

  std::__fs::filesystem::__status(this, 0);
  if (v3)
    v1 = v3 == 255;
  else
    v1 = 1;
  return !v1;
}

void E5RT::PathWrapper::Append(uint64_t a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type size;
  uint64_t v7;
  std::string *v8;
  int v9;
  std::string v10;
  std::__fs::filesystem::path __p;
  std::string pn;
  std::string v13;

  memset(&v10, 0, sizeof(v10));
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v5 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v10, a2, (std::string *)((char *)a2 + v5));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v10, a1, &__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
  else
    pn = __p.__pn_;
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!pn.__r_.__value_.__l.__size_)
    {
      std::string::__init_copy_ctor_external(&v13, pn.__r_.__value_.__l.__data_, 0);
      goto LABEL_19;
    }
    std::string::__init_copy_ctor_external(&v13, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
LABEL_12:
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v13.__r_.__value_.__r.__words[0] + v13.__r_.__value_.__l.__size_ - 1) != 47)
        goto LABEL_19;
      v7 = --v13.__r_.__value_.__l.__size_;
    }
    else
    {
      if (v13.__r_.__value_.__s.__data_[HIBYTE(v13.__r_.__value_.__r.__words[2]) - 1] != 47)
        goto LABEL_19;
      v7 = HIBYTE(v13.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v13.__r_.__value_.__s + 23) = (*((_BYTE *)&v13.__r_.__value_.__s + 23) - 1) & 0x7F;
      v8 = &v13;
    }
    v8->__r_.__value_.__s.__data_[v7] = 0;
LABEL_19:
    v9 = SHIBYTE(pn.__r_.__value_.__r.__words[2]);
    *a3 = v13;
    if (v9 < 0)
    {
      operator delete(pn.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_24;
    }
    else if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  v13 = pn;
  if (*((_BYTE *)&pn.__r_.__value_.__s + 23))
    goto LABEL_12;
  *a3 = pn;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_24:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_25;
    return;
  }
LABEL_21:
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
LABEL_25:
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_190E7B5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(a21);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_190E7B650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0)
    JUMPOUT(0x190E7B614);
  JUMPOUT(0x190E7B60CLL);
}

void E5RT::ProgramLibraryImpl::InitializeProgramLibrary(E5RT::ProgramLibraryImpl *this)
{
  int v2;
  uint64_t v3;
  std::string::size_type *v4;
  std::string::size_type *v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  std::string __p;
  std::string v27;
  std::string v28;

  if (!this)
  {
    v2 = MEMORY[0x10];
    goto LABEL_6;
  }
  v2 = *((_DWORD *)this + 4);
  if (v2)
  {
LABEL_6:
    if (v2 != 1)
      goto LABEL_44;
    v6 = E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(*(const void **)this);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v4 = *(std::string::size_type **)v7;
    v5 = *(std::string::size_type **)(v7 + 8);
    if (*(std::string::size_type **)v7 == v5)
      goto LABEL_29;
    while (1)
    {
LABEL_10:
      v8 = v4[1];
      v28.__r_.__value_.__r.__words[0] = *v4;
      v28.__r_.__value_.__l.__size_ = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = operator new(0xA8uLL);
      std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::E5Function const> &,std::allocator<E5RT::ProgramFunctionPriv>,0>(v11, (uint64_t *)&v28);
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v11 + 3);
      v27.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v28.__r_.__value_.__l.__data_
                                                                                           + 16))(v28.__r_.__value_.__r.__words[0]);
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 24, (uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
      v13 = (std::__shared_weak_count *)v12[6];
      v12[5] = (uint64_t)(v11 + 3);
      v12[6] = (uint64_t)v11;
      if (!v13)
        goto LABEL_17;
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
        if (v27.__r_.__value_.__l.__size_)
        {
LABEL_18:
          v17 = (unint64_t *)&size->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
      else
      {
LABEL_17:
        size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
        if (v27.__r_.__value_.__l.__size_)
          goto LABEL_18;
      }
      v19 = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
      if (v28.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(v28.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v4 += 2;
      if (v4 == v5)
      {
        if (this)
          goto LABEL_29;
        v22 = MEMORY[0x10];
LABEL_32:
        if (v22 == 1)
        {
          v23 = E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(*(const void **)this);
          goto LABEL_34;
        }
LABEL_44:
        std::__throw_bad_variant_access[abi:ne180100]();
      }
    }
  }
  v3 = (*(uint64_t (**)(void))(**(_QWORD **)this + 16))();
  v4 = *(std::string::size_type **)v3;
  v5 = *(std::string::size_type **)(v3 + 8);
  if (*(std::string::size_type **)v3 != v5)
    goto LABEL_10;
LABEL_29:
  v22 = *((_DWORD *)this + 4);
  if (v22)
    goto LABEL_32;
  v23 = *(_QWORD *)this;
LABEL_34:
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 64))(v23);
  E5RT::PathWrapper::PathWrapper(&v28, v24);
  E5RT::PathWrapper::RemoveLastComponent(&v28, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v27 = __p;
  v25 = (void **)((char *)this + 64);
  if (*((char *)this + 87) < 0)
    operator delete(*v25);
  *(_OWORD *)v25 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 10) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
  *((_BYTE *)&v27.__r_.__value_.__s + 23) = 0;
  v27.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_43:
    operator delete(v28.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_43;
}

void sub_190E7B914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_190E7B960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  operator delete(v17);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_190E7B97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E7B990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5FunctionImpl::GetName(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 24;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190E7BDF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E7BE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(const void *a1)
{
  _QWORD *v1;

  if (!v1)
    __cxa_bad_cast();
  return v1[4];
}

std::string *E5RT::PathWrapper::PathWrapper(std::string *a1, uint64_t a2)
{
  int v3;
  unsigned __int8 v4;
  uint64_t v5;
  std::string *v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string v11;

  v3 = *(char *)(a2 + 23);
  if (v3 < 0)
  {
    v7 = *(const std::string::value_type **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
    {
      std::string::__init_copy_ctor_external(&v11, v7, 0);
      goto LABEL_12;
    }
    std::string::__init_copy_ctor_external(&v11, v7, v8);
    v4 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_4:
      if (v11.__r_.__value_.__s.__data_[v4 - 1] == 47)
      {
        v5 = v4 - 1;
        *((_BYTE *)&v11.__r_.__value_.__s + 23) = (v4 - 1) & 0x7F;
        v6 = &v11;
LABEL_10:
        v6->__r_.__value_.__s.__data_[v5] = 0;
        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
  else
  {
    v11 = *(std::string *)a2;
    if (!v3)
      goto LABEL_12;
    v4 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_4;
  }
  v6 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(v11.__r_.__value_.__r.__words[0] + v11.__r_.__value_.__l.__size_ - 1) == 47)
  {
    v5 = --v11.__r_.__value_.__l.__size_;
    goto LABEL_10;
  }
LABEL_12:
  *a1 = v11;
  return a1;
}

uint64_t E5RT::E5ProgramImpl::GetPublicFunctions(E5RT::E5ProgramImpl *this)
{
  return (uint64_t)this + 16;
}

uint64_t E5RT::E5ProgramImpl::GetE5PlatformBundleDir(E5RT::E5ProgramImpl *this)
{
  return (uint64_t)this + 80;
}

void E5RT::PathWrapper::RemoveLastComponent(std::string *this@<X0>, std::string *a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  std::string::size_type v4;
  uint64_t v5;
  std::string *v6;
  int v7;
  std::string __p;
  std::string v9;
  std::string v10;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v9, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    v9 = *this;
  v3 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&v9);
  if (v3.__size_)
  {
    v4 = (std::string::size_type)&v9;
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = v9.__r_.__value_.__r.__words[0];
    std::string::erase(&v9, (std::string::size_type)&v3.__data_[-v4], 0xFFFFFFFFFFFFFFFFLL);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    __p = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
    {
      std::string::__init_copy_ctor_external(&v10, __p.__r_.__value_.__l.__data_, 0);
      goto LABEL_24;
    }
    std::string::__init_copy_ctor_external(&v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_17:
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v10.__r_.__value_.__r.__words[0] + v10.__r_.__value_.__l.__size_ - 1) != 47)
        goto LABEL_24;
      v5 = --v10.__r_.__value_.__l.__size_;
    }
    else
    {
      if (v10.__r_.__value_.__s.__data_[HIBYTE(v10.__r_.__value_.__r.__words[2]) - 1] != 47)
        goto LABEL_24;
      v5 = HIBYTE(v10.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v10.__r_.__value_.__s + 23) = (*((_BYTE *)&v10.__r_.__value_.__s + 23) - 1) & 0x7F;
      v6 = &v10;
    }
    v6->__r_.__value_.__s.__data_[v5] = 0;
LABEL_24:
    v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *a2 = v10;
    if (v7 < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
LABEL_28:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  v10 = __p;
  if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_17;
  *a2 = __p;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
}

void sub_190E7C0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5ProgramImpl::GetPrivateFunctions(E5RT::E5ProgramImpl *this)
{
  return (uint64_t)this + 40;
}

uint64_t E5RT::E5ProgramImpl::E5ProgramImpl(uint64_t a1, uint64_t *a2, const std::string *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v14;
  void **v15;
  void *v16;
  void **v17;
  void *exception;
  void *v19;
  _QWORD v20[3];
  char v21[8];
  _QWORD v22[3];
  void *__p[2];
  void *v24;

  v6 = E5RT::E5Program::E5Program((_QWORD *)a1);
  E5RT::E5ProgramBuilder::E5ProgramBuilder(v6 + 1);
  *(_QWORD *)a1 = &off_1E2D59D48;
  *(_QWORD *)(a1 + 8) = &unk_1E2D59DC0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  std::string::operator=((std::string *)(a1 + 80), a3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 40))(*a2);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 56))(__p);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v9 = *(uint64_t **)v8;
  v10 = *(uint64_t **)(v8 + 8);
  while (v9 != v10)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 24))(*v9))
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 40))(*v9) & 0x10) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v22, "E5ProgramImpl");
        std::string::basic_string[abi:ne180100]<0>(v20, "Inference runtime doesn't support private functions yet.");
        E5RT::Status::Status(v21, 8, v20);
        E5RT::E5RTError::E5RTError(exception, v22, v21);
      }
      E5RT::E5ProgramImpl::LoadFunctionInfo(a1, *a2, *v9, __p);
    }
    v9 += 2;
  }
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
  {
    v19 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "E5ProgramImpl");
    std::operator+<char>();
    E5RT::Status::Status(v21, 8, v20);
    E5RT::E5RTError::E5RTError(v19, v22, v21);
  }
  E5RT::E5ProgramImpl::LoadBuildInfo(a1, *a2);
  v11 = v24;
  if (v24)
  {
    do
    {
      v14 = (_QWORD *)*v11;
      v15 = (void **)v11[5];
      if (v15)
      {
        do
        {
          v17 = (void **)*v15;
          if (*((char *)v15 + 39) < 0)
            operator delete(v15[2]);
          operator delete(v15);
          v15 = v17;
        }
        while (v17);
      }
      v16 = (void *)v11[3];
      v11[3] = 0;
      if (v16)
        operator delete(v16);
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  return a1;
}

void sub_190E7C3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  E5RT::AsyncEventImpl *v23;
  void **v24;
  uint64_t v25;
  void **v26;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)&a22);
  if (*(char *)(v22 + 103) < 0)
    operator delete(*v26);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v25);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v22 + 40));
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](v24);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v23);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v22);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::E5Program::E5Program(_QWORD *this)
{
  *this = off_1E2D5BFB8;
  return this;
}

_QWORD *E5RT::E5ProgramBuilder::E5ProgramBuilder(_QWORD *this)
{
  *this = off_1E2D5AD30;
  return this;
}

void E5PlatformManagerImpl::GetPlatformBundleNamesForPlatform(uint64_t a1@<X1>, char **a2@<X8>)
{
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void *exception;
  _QWORD v25[3];
  char v26[8];
  __int128 __src;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34[8];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 <= 32773)
  {
    if (a1 < 24576)
    {
      if (!a1)
        goto LABEL_43;
      if (a1 == 256)
      {
        v3 = (char *)operator new(0x10uLL);
        *(_OWORD *)v3 = xmmword_1E2DCEE08;
        a2[1] = v3 + 16;
        a2[2] = v3 + 16;
        *a2 = v3;
        return;
      }
      goto LABEL_81;
    }
    switch(a1)
    {
      case 24576:
        v29 = xmmword_1E2DCEE48;
        v30 = *(_OWORD *)&off_1E2DCEE58;
        v31 = xmmword_1E2DCEE68;
        v32 = *(_OWORD *)&off_1E2DCEE78;
        __src = xmmword_1E2DCEE28;
        v28 = *(_OWORD *)&off_1E2DCEE38;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24577:
        v29 = xmmword_1E2DCEEA8;
        v30 = *(_OWORD *)&off_1E2DCEEB8;
        v31 = xmmword_1E2DCEEC8;
        v32 = *(_OWORD *)&off_1E2DCEED8;
        __src = xmmword_1E2DCEE88;
        v28 = *(_OWORD *)&off_1E2DCEE98;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24578:
        v29 = xmmword_1E2DCEF08;
        v30 = *(_OWORD *)&off_1E2DCEF18;
        v31 = xmmword_1E2DCEF28;
        v32 = *(_OWORD *)&off_1E2DCEF38;
        __src = xmmword_1E2DCEEE8;
        v28 = *(_OWORD *)&off_1E2DCEEF8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24579:
      case 24580:
      case 24581:
      case 24582:
      case 24583:
      case 24584:
      case 24585:
      case 24586:
      case 24587:
      case 24588:
      case 24589:
      case 24590:
      case 24591:
      case 24592:
      case 24593:
      case 24594:
      case 24595:
      case 24596:
      case 24597:
      case 24598:
      case 24599:
      case 24600:
      case 24601:
      case 24602:
      case 24603:
      case 24604:
      case 24605:
      case 24606:
      case 24607:
      case 24611:
      case 24612:
      case 24613:
      case 24614:
      case 24615:
      case 24616:
      case 24617:
      case 24618:
      case 24619:
      case 24620:
      case 24621:
      case 24622:
      case 24623:
      case 24627:
        goto LABEL_81;
      case 24608:
        v29 = xmmword_1E2DCEF68;
        v30 = *(_OWORD *)&off_1E2DCEF78;
        v31 = xmmword_1E2DCEF88;
        v32 = *(_OWORD *)&off_1E2DCEF98;
        __src = xmmword_1E2DCEF48;
        v28 = *(_OWORD *)&off_1E2DCEF58;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24609:
        v29 = xmmword_1E2DCEFC8;
        v30 = *(_OWORD *)&off_1E2DCEFD8;
        v31 = xmmword_1E2DCEFE8;
        v32 = *(_OWORD *)&off_1E2DCEFF8;
        __src = xmmword_1E2DCEFA8;
        v28 = *(_OWORD *)&off_1E2DCEFB8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24610:
        v29 = xmmword_1E2DCF028;
        v30 = *(_OWORD *)&off_1E2DCF038;
        v31 = xmmword_1E2DCF048;
        v32 = *(_OWORD *)&off_1E2DCF058;
        __src = xmmword_1E2DCF008;
        v28 = *(_OWORD *)&off_1E2DCF018;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24624:
        v29 = xmmword_1E2DCF088;
        v30 = *(_OWORD *)&off_1E2DCF098;
        v31 = xmmword_1E2DCF0A8;
        __src = xmmword_1E2DCF068;
        v28 = *(_OWORD *)&off_1E2DCF078;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 24625:
        v29 = xmmword_1E2DCF0D8;
        v30 = *(_OWORD *)&off_1E2DCF0E8;
        v31 = xmmword_1E2DCF0F8;
        __src = xmmword_1E2DCF0B8;
        v28 = *(_OWORD *)&off_1E2DCF0C8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 24626:
        v31 = xmmword_1E2DCF148;
        v32 = *(_OWORD *)&off_1E2DCF158;
        v33 = xmmword_1E2DCF168;
        __src = xmmword_1E2DCF108;
        v28 = *(_OWORD *)&off_1E2DCF118;
        v29 = xmmword_1E2DCF128;
        v30 = *(_OWORD *)&off_1E2DCF138;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, v34, 7uLL);
        break;
      case 24628:
        v31 = xmmword_1E2DCF1B8;
        v32 = *(_OWORD *)&off_1E2DCF1C8;
        v33 = xmmword_1E2DCF1D8;
        __src = xmmword_1E2DCF178;
        v28 = *(_OWORD *)&off_1E2DCF188;
        v29 = xmmword_1E2DCF198;
        v30 = *(_OWORD *)&off_1E2DCF1A8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, v34, 7uLL);
        break;
      default:
        if (a1 != 28672)
          goto LABEL_81;
        __src = xmmword_1E2DCF578;
        v28 = *(_OWORD *)&off_1E2DCF588;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
        break;
    }
  }
  else
  {
    if (a1 <= 33024)
    {
      switch(a1)
      {
        case 32774:
          __src = xmmword_1E2DCF1E8;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
          goto LABEL_43;
        case 32784:
          __src = xmmword_1E2DCF598;
          v28 = *(_OWORD *)&off_1E2DCF5A8;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
          goto LABEL_43;
        case 32785:
          __src = xmmword_1E2DCF5B8;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
          goto LABEL_43;
        case 32786:
          __src = xmmword_1E2DCEE18;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
          goto LABEL_43;
        case 32789:
          __src = xmmword_1E2DCF1F8;
          v28 = *(_OWORD *)&off_1E2DCF208;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
          goto LABEL_43;
        case 32800:
          __src = xmmword_1E2DCF218;
          v28 = *(_OWORD *)&off_1E2DCF228;
          v29 = xmmword_1E2DCF238;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v30, 3uLL);
          goto LABEL_43;
        case 32807:
          __src = xmmword_1E2DCF248;
          v28 = *(_OWORD *)&off_1E2DCF258;
          v29 = xmmword_1E2DCF268;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v30, 3uLL);
          goto LABEL_43;
        case 32816:
          __src = xmmword_1E2DCF278;
          v28 = *(_OWORD *)&off_1E2DCF288;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
          goto LABEL_43;
        default:
          goto LABEL_81;
      }
    }
    switch(a1)
    {
      case 33025:
        v29 = xmmword_1E2DCF2B8;
        v30 = *(_OWORD *)&off_1E2DCF2C8;
        v31 = xmmword_1E2DCF2D8;
        v32 = *(_OWORD *)&off_1E2DCF2E8;
        __src = xmmword_1E2DCF298;
        v28 = *(_OWORD *)&off_1E2DCF2A8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 33026:
      case 33028:
      case 33029:
      case 33030:
      case 33031:
      case 33032:
      case 33033:
      case 33034:
      case 33035:
      case 33036:
      case 33037:
      case 33038:
      case 33039:
      case 33041:
      case 33043:
      case 33044:
      case 33045:
      case 33046:
      case 33047:
      case 33048:
      case 33049:
      case 33050:
      case 33051:
      case 33052:
      case 33053:
      case 33054:
      case 33055:
      case 33057:
      case 33059:
      case 33060:
      case 33061:
      case 33062:
      case 33063:
      case 33064:
      case 33065:
      case 33066:
      case 33067:
      case 33068:
      case 33069:
      case 33070:
      case 33071:
      case 33073:
      case 33075:
      case 33076:
      case 33077:
      case 33078:
      case 33079:
      case 33080:
      case 33081:
      case 33082:
      case 33083:
      case 33084:
      case 33085:
      case 33086:
      case 33087:
        goto LABEL_81;
      case 33027:
        v29 = xmmword_1E2DCF318;
        v30 = *(_OWORD *)&off_1E2DCF328;
        v31 = xmmword_1E2DCF338;
        v32 = *(_OWORD *)&off_1E2DCF348;
        __src = xmmword_1E2DCF2F8;
        v28 = *(_OWORD *)&off_1E2DCF308;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 33040:
        v29 = xmmword_1E2DCF378;
        v30 = *(_OWORD *)&off_1E2DCF388;
        v31 = xmmword_1E2DCF398;
        v32 = *(_OWORD *)&off_1E2DCF3A8;
        __src = xmmword_1E2DCF358;
        v28 = *(_OWORD *)&off_1E2DCF368;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 33042:
        v29 = xmmword_1E2DCF3D8;
        v30 = *(_OWORD *)&off_1E2DCF3E8;
        v31 = xmmword_1E2DCF3F8;
        v32 = *(_OWORD *)&off_1E2DCF408;
        __src = xmmword_1E2DCF3B8;
        v28 = *(_OWORD *)&off_1E2DCF3C8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 33056:
        v29 = xmmword_1E2DCF438;
        v30 = *(_OWORD *)&off_1E2DCF448;
        v31 = xmmword_1E2DCF458;
        __src = xmmword_1E2DCF418;
        v28 = *(_OWORD *)&off_1E2DCF428;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 33058:
        v29 = xmmword_1E2DCF488;
        v30 = *(_OWORD *)&off_1E2DCF498;
        v31 = xmmword_1E2DCF4A8;
        __src = xmmword_1E2DCF468;
        v28 = *(_OWORD *)&off_1E2DCF478;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 33072:
        __src = xmmword_1E2DCF4B8;
        v28 = *(_OWORD *)&off_1E2DCF4C8;
        v29 = xmmword_1E2DCF4D8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v30, 3uLL);
        break;
      case 33074:
        v29 = xmmword_1E2DCF508;
        v30 = *(_OWORD *)&off_1E2DCF518;
        v31 = xmmword_1E2DCF528;
        __src = xmmword_1E2DCF4E8;
        v28 = *(_OWORD *)&off_1E2DCF4F8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 33088:
        __src = xmmword_1E2DCF538;
        v28 = *(_OWORD *)&off_1E2DCF548;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
        break;
      default:
        if (a1 != 33537)
        {
          if (a1 == 33552)
          {
            __src = xmmword_1E2DCF568;
            std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
            break;
          }
LABEL_81:
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__src, "GetPlatformBundleNamesForPlatform");
          std::string::basic_string[abi:ne180100]<0>(v25, "Unknown platform.");
          E5RT::Status::Status(v26, 8, v25);
          E5RT::E5RTError::E5RTError(exception, &__src, v26);
        }
        __src = xmmword_1E2DCF558;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
        break;
    }
  }
LABEL_43:
  v5 = a2[1];
  v4 = (unint64_t)a2[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a2;
    v8 = (v5 - *a2) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      goto LABEL_79;
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        goto LABEL_80;
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = xmmword_1E2DCF5C8;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a2;
    }
    *a2 = v13;
    a2[1] = v6;
    a2[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = xmmword_1E2DCF5C8;
    v6 = v5 + 16;
  }
  a2[1] = v6;
  v14 = (unint64_t)a2[2];
  if ((unint64_t)v6 < v14)
  {
    *(_OWORD *)v6 = xmmword_1E2DCEE08;
    v15 = v6 + 16;
    goto LABEL_78;
  }
  v16 = *a2;
  v17 = (v6 - *a2) >> 4;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 60)
LABEL_79:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v19 = v14 - (_QWORD)v16;
  if (v19 >> 3 > v18)
    v18 = v19 >> 3;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
    v20 = 0xFFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (!v20)
  {
    v21 = 0;
    goto LABEL_72;
  }
  if (v20 >> 60)
LABEL_80:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v21 = (char *)operator new(16 * v20);
LABEL_72:
  v22 = &v21[16 * v17];
  v23 = &v21[16 * v20];
  *(_OWORD *)v22 = xmmword_1E2DCEE08;
  v15 = v22 + 16;
  if (v6 == v16)
  {
    *a2 = v22;
    a2[1] = v15;
    a2[2] = v23;
  }
  else
  {
    do
    {
      *((_OWORD *)v22 - 1) = *((_OWORD *)v6 - 1);
      v22 -= 16;
      v6 -= 16;
    }
    while (v6 != v16);
    v6 = *a2;
    *a2 = v22;
    a2[1] = v15;
    a2[2] = v23;
    if (!v6)
      goto LABEL_78;
  }
  operator delete(v6);
LABEL_78:
  a2[1] = v15;
}

void sub_190E7CEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;
  void *v25;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      v25 = *(void **)v21;
      if (*(_QWORD *)v21)
      {
        *(_QWORD *)(v21 + 8) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::Ops::AneInferenceOperation::BindDependentAsyncEvents(uint64_t a1, uint64_t *a2)
{
  E5RT::ExecutionStreamOperationInternal::BindDependentAsyncEvents(a1, a2);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 80))(*(_QWORD *)(a1 + 296));
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::BindEventsForOps(E5RT::Ops::PreCompiledComputeOperation::Impl *this)
{
  E5RT::ExecutionStreamOperationInternal **v1;
  E5RT::ExecutionStreamOperationInternal **v2;
  E5RT::ExecutionStreamOperationInternal *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t OpName;
  const void **v12;
  int v13;
  size_t v14;
  unint64_t v15;
  void *p_p;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  E5RT::ExecutionStreamOperationInternal *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  __int128 __p;
  void *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v51 = 0;
  v52 = 0;
  v1 = (E5RT::ExecutionStreamOperationInternal **)*((_QWORD *)this + 6);
  v2 = (E5RT::ExecutionStreamOperationInternal **)*((_QWORD *)this + 7);
  if (v1 == v2)
    return;
  do
  {
    if (v51)
    {
      v3 = *v1;
      v53 = v51;
      v54 = v52;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::unordered_set((uint64_t)&__p, &v53, 1);
      (*(void (**)(E5RT::ExecutionStreamOperationInternal *, __int128 *))(*(_QWORD *)v3 + 48))(v3, &__p);
      v6 = v50;
      if (v50)
      {
        do
        {
          v17 = v6;
          v6 = (_QWORD *)*v6;
          v18 = (std::__shared_weak_count *)v17[3];
          if (v18)
          {
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          operator delete(v17);
        }
        while (v6);
      }
      v7 = (void *)__p;
      *(_QWORD *)&__p = 0;
      if (v7)
        operator delete(v7);
      v8 = v54;
      if (v54)
      {
        v9 = (unint64_t *)&v54->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(*v1);
    v12 = (const void **)OpName;
    v13 = *(char *)(OpName + 23);
    if (v13 >= 0)
      v14 = *(unsigned __int8 *)(OpName + 23);
    else
      v14 = *(_QWORD *)(OpName + 8);
    v15 = v14 + 17;
    if (v14 + 17 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v15 >= 0x17)
    {
      v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v21 = v15 | 7;
      v22 = v21 + 1;
      p_p = operator new(v21 + 1);
      *((_QWORD *)&__p + 1) = v14 + 17;
      v50 = (void *)(v22 | 0x8000000000000000);
      *(_QWORD *)&__p = p_p;
    }
    else
    {
      v50 = 0;
      __p = 0uLL;
      p_p = &__p;
      HIBYTE(v50) = v14 + 17;
      if (!v14)
        goto LABEL_36;
    }
    if (v13 >= 0)
      v23 = v12;
    else
      v23 = *v12;
    memmove(p_p, v23, v14);
LABEL_36:
    strcpy((char *)p_p + v14, "_completion_event");
    E5RT::AsyncEvent::CreateEvent(&__p, 0, &v48);
    v24 = v48;
    v53 = v48;
    if (v48)
    {
      v25 = (std::__shared_weak_count *)operator new();
      v26 = v48;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3158;
      v25->__shared_owners_ = 0;
      v25->__shared_weak_owners_ = 0;
      v25[1].__vftable = (std::__shared_weak_count_vtbl *)v26;
      v54 = v25;
      v48 = 0;
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        goto LABEL_39;
LABEL_38:
      operator delete((void *)__p);
      goto LABEL_39;
    }
    v25 = 0;
    v54 = 0;
    v48 = 0;
    if (SHIBYTE(v50) < 0)
      goto LABEL_38;
LABEL_39:
    v27 = *v1;
    v46 = v24;
    v47 = v25;
    if (v25)
    {
      v28 = (unint64_t *)&v25->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    (*(void (**)(E5RT::ExecutionStreamOperationInternal *, uint64_t *, uint64_t))(*(_QWORD *)v27 + 64))(v27, &v46, 1);
    v30 = v47;
    if (!v47)
      goto LABEL_46;
    v31 = (unint64_t *)&v47->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v34 = v53;
      v33 = v54;
      if (!v54)
        goto LABEL_49;
    }
    else
    {
LABEL_46:
      v34 = v53;
      v33 = v54;
      if (!v54)
        goto LABEL_49;
    }
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
LABEL_49:
    v37 = v52;
    v51 = v34;
    v52 = v33;
    if (!v37)
      goto LABEL_53;
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      v40 = v54;
      if (!v54)
        goto LABEL_3;
    }
    else
    {
LABEL_53:
      v40 = v54;
      if (!v54)
        goto LABEL_3;
    }
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
LABEL_3:
    v1 += 2;
  }
  while (v1 != v2);
  v43 = v52;
  if (v52)
  {
    v44 = (unint64_t *)&v52->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_190E7D420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E7D44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
    if ((a18 & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_190E7D4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v5;
  void *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char v11;
  void *exception;
  _QWORD v13[3];
  _BYTE v14[8];
  _QWORD v15[3];

  if ((*(_BYTE *)(a1 + 248) & 7) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "BindCompletionAsyncEvent");
    std::string::basic_string[abi:ne180100]<0>(v13, "Operation bind state cannot be changed  while it's encoded and in-use from a stream.");
    E5RT::Status::Status(v14, 2, v13);
    E5RT::E5RTError::E5RTError(exception, v15, v14);
  }
  v5 = (_QWORD *)(a1 + 152);
  while (1)
  {
    v5 = (_QWORD *)*v5;
    if (!v5)
      break;
    if (v5[2] == *a2)
    {
      v6 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v15, "BindCompletionAsyncEvent");
      std::string::basic_string[abi:ne180100]<0>(v13, "Dependent and completion event bindings must be distinct. Dependent and completion async events can use the same underlying shared event object with different active future values.");
      E5RT::Status::Status(v14, 2, v13);
      E5RT::E5RTError::E5RTError(v6, v15, v14);
    }
  }
  v7 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (a3)
    v11 = 16;
  else
    v11 = 0;
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a1 + 248) & 0xEF | v11;
}

void sub_190E7D698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v23 & 1) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      __cxa_free_exception(v22);
      goto LABEL_8;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  if ((v23 & 1) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t E5RT::AsyncEvent::CreateEvent@<X0>(__int128 *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  void *exception;
  _QWORD *v9;
  _QWORD v10[3];
  _BYTE v11[8];
  _QWORD v12[3];

  if (a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "CreateEvent");
    std::string::basic_string[abi:ne180100]<0>(v10, "Invalid async event type.");
    E5RT::Status::Status(v11, 1, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v5 = (_QWORD *)operator new();
  E5RT::IOSurfaceSharedAsyncEvent::IOSurfaceSharedAsyncEvent(v5, a1);
  v6 = (_QWORD *)operator new();
  v9 = v5;
  E5RT::AsyncEvent::AsyncEvent(v6, (uint64_t *)&v9);
  *a3 = v6;
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190E7D864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  MEMORY[0x19401CD90](v9, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_190E7D8A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_190E7D8C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x19401CD90](v2, 0x1093C4041A044FELL);
  _Unwind_Resume(a1);
}

void sub_190E7D8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::IOSurfaceSharedAsyncEvent::IOSurfaceSharedAsyncEvent(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  __int128 v5;
  id v6;
  void *v7;
  void *exception;
  _QWORD v10[3];
  _BYTE v11[8];
  _QWORD v12[3];

  v4 = E5RT::AsyncEventImpl::AsyncEventImpl(a1);
  *v4 = off_1E2D5B180;
  v4[1] = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 2), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v4[4] = *((_QWORD *)a2 + 2);
    *((_OWORD *)v4 + 1) = v5;
  }
  a1[5] = 0;
  if ((E5RT::IsIOSurfaceSharedEventAvailable((E5RT *)v4) & 1) != 0)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0CBBEB8]);
    v7 = (void *)a1[1];
    a1[1] = v6;

    if (!a1[1])
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v12, "IOSurfaceSharedAsyncEvent");
      std::string::basic_string[abi:ne180100]<0>(v10, "IOSurfaceSharedEvent creation failed.");
      E5RT::Status::Status(v11, 11, v10);
      E5RT::E5RTError::E5RTError(exception, v12, v11);
    }
  }
  return a1;
}

void sub_190E7DA70(_Unwind_Exception *a1)
{
  id *v1;

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void sub_190E7DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void **v23;

  if (*(char *)(v22 + 39) < 0)
    operator delete(*v23);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v22);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::AsyncEventImpl::AsyncEventImpl(_QWORD *this)
{
  *this = off_1E2D59E20;
  return this;
}

_QWORD *E5RT::AsyncEvent::AsyncEvent(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D59A28;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_1E2D59A28;
  result[1] = v2;
  return result;
}

uint64_t std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::unordered_set(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_190E7DBB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;

  v3 = *(void ***)(v1 + 16);
  if (v3)
    Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(v3);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const> const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v17 = a3[1];
  v13[2] = *a3;
  v13[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v23)
    {
LABEL_29:
      *v13 = *v23;
LABEL_64:
      *v23 = v13;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v32 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v3 = v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v32 & v9;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v9));
      if (v23)
        goto LABEL_29;
    }
  }
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v22 + 8 * v3) = v16;
  if (*v13)
  {
    v33 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v33 >= v10)
        v33 %= v10;
    }
    else
    {
      v33 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_190E7DF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    while (v4)
    {
      v16 = v4;
      v4 = (_QWORD *)*v4;
      v17 = (std::__shared_weak_count *)v16[3];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

void E5RT::ExecutionStreamOperationInternal::BindDependentAsyncEvents(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *exception;
  _QWORD v6[3];
  _BYTE v7[8];
  _QWORD v8[3];

  if ((*(_BYTE *)(a1 + 248) & 7) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "BindDependentAsyncEvents");
    std::string::basic_string[abi:ne180100]<0>(v6, "Operation bind state cannot be changed  while it's encoded and in-use from a stream.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  v2 = (_QWORD *)a2[2];
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3)
    {
      do
      {
        if (v2[2] == v3)
        {
          v4 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v8, "BindDependentAsyncEvents");
          std::string::basic_string[abi:ne180100]<0>(v6, "Dependent and completion event bindings must be distinct. Dependent and completion async events can use the same underlying shared event object with different active future values.");
          E5RT::Status::Status(v7, 2, v6);
          E5RT::E5RTError::E5RTError(v4, v8, v7);
        }
        v2 = (_QWORD *)*v2;
      }
      while (v2);
    }
    else
    {
      do
        v2 = (_QWORD *)*v2;
      while (v2);
    }
  }
  std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__move_assign(a1 + 136, a2);
}

void sub_190E7E1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a17);
LABEL_6:
  if ((v23 & 1) != 0)
    __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::AneInferenceOperation::BindCompletionAsyncEvent(uint64_t a1, __int128 *a2, int a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  v8 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(a1, &v8, a3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 88))(*(_QWORD *)(a1 + 296));
}

void sub_190E7E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>@<X0>(__IOSurface *a1@<X0>, _QWORD *a2@<X8>)
{
  size_t AllocSize;
  uint64_t v5;
  E5RT::IOBufferObject *v6;
  _QWORD *v7;
  uint64_t result;
  void *exception;
  E5RT::IOBufferObject *v10;
  _QWORD v11[3];
  _BYTE v12[8];
  _QWORD v13[3];

  if (!IOSurfaceGetBaseAddress(a1))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "CreateBufferFromHandle");
    std::string::basic_string[abi:ne180100]<0>(v11, "Invalid IOSurfaceRef handle.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  AllocSize = IOSurfaceGetAllocSize(a1);
  v5 = AllocSize - IOSurfaceGetOffsetOfPlane();
  v6 = (E5RT::IOBufferObject *)operator new();
  E5RT::IOBufferObject::IOBufferObject(v6, a1, 0, v5);
  v7 = (_QWORD *)operator new();
  v13[0] = 0;
  v10 = v6;
  E5RT::BufferObject::BufferObject(v7, (uint64_t *)&v10);
  *a2 = v7;
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190E7E450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  MEMORY[0x19401CD90](v6, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100]((CFTypeRef **)va);
  _Unwind_Resume(a1);
}

void sub_190E7E494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100]((CFTypeRef **)va);
  _Unwind_Resume(a1);
}

void sub_190E7E4A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10B1C404997464DLL);
  _Unwind_Resume(a1);
}

void sub_190E7E4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *E5RT::BufferObject::BufferObject(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::MemoryObject::MemoryObject(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D59C08;
  result[1] = v4;
  return result;
}

{
  _QWORD *result;
  uint64_t v4;

  result = E5RT::MemoryObject::MemoryObject(a1);
  v4 = *a2;
  *a2 = 0;
  *result = &off_1E2D59C08;
  result[1] = v4;
  return result;
}

void std::__shared_ptr_emplace<EspressoLight::plan_task_t>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::destroy(*(_QWORD **)(a1 + 264));
  std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(*(_QWORD **)(a1 + 240));
  std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(*(_QWORD **)(a1 + 216));
  std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(*(_QWORD **)(a1 + 192));
  std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(*(_QWORD **)(a1 + 168));
  std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>>>::destroy(*(_QWORD **)(a1 + 144));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(_QWORD **)(a1 + 120));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(_QWORD **)(a1 + 96));
  std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(*(_QWORD **)(a1 + 72));
  std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(a1[1]);
    std::__tree<std::string>::destroy((uint64_t)(a1 + 5), (char *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,espresso_buffer_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,espresso_buffer_t>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_image_buffers>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::destroy(a1[1]);
    std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::~__hash_table((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *__dst;
  __int128 v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 << 6;
    if (v6 << 6 < v5 || v4 > (v6 << 6) - v5)
    {
      __dst = 0;
      v18 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v9 = v6 << 7;
      if (v9 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v9 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v7 <= 0x3FFFFFFFFFFFFFFELL)
        v10 = v9;
      else
        v10 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve((uint64_t)&__dst, v10);
      v11 = *(void **)a1;
      v12 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v18 = v12 + v5;
      v13 = (char *)__dst;
      if (v12 < 1)
      {
        LODWORD(v16) = 0;
        v15 = (char *)__dst;
      }
      else
      {
        v14 = v12 >> 6;
        if ((unint64_t)(v12 + 63) >= 0x7F)
          memmove(__dst, v11, 8 * v14);
        v16 = v12 - (v14 << 6);
        v15 = &v13[8 * v14];
        if (v16 < 1)
          LODWORD(v16) = 0;
        else
          *(_QWORD *)v15 = *(_QWORD *)v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) | *((_QWORD *)v11 + v14) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
        v11 = *(void **)a1;
      }
      *(_QWORD *)a1 = v13;
      *(_OWORD *)(a1 + 8) = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      v15 = (char *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
      v16 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v4)
    {
      __dst = v15;
      LODWORD(v18) = v16;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&__dst, v5);
    }
  }
}

void sub_190E7E900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL Espresso::ANECompilerEngine::transpose_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  const Espresso::net *v10;
  void *v11;
  std::__shared_weak_count *v12;
  const Espresso::net *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  const Espresso::net *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  NSString *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  _BOOL8 v46;
  int v47;
  NSString *v48;
  int is_mix;
  const Espresso::base_kernel::validate_for_engine_args_t *v50;
  std::string *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  unsigned int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __CFString *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  int64x2_t *v99;
  std::__shared_weak_count *v100;
  std::string v101;
  char v102;
  int64x2_t *v103;
  std::__shared_weak_count *v104;
  int64x2_t *v105;
  std::__shared_weak_count *v106;
  int64x2_t *v107;
  std::__shared_weak_count *v108;
  void *v109[2];
  char v110;
  void *v111[3];
  int64x2_t *v112;
  std::__shared_weak_count *v113;
  std::string v114;
  _BYTE v115[24];
  _BYTE v116[32];
  std::__shared_weak_count *v117;
  int64x2_t *v118;
  std::__shared_weak_count *v119;
  char v120[8];
  __int128 v121;
  char v122;
  _OWORD v123[2];
  uint64_t v124;
  void *__p;
  void *v126;
  uint64_t v127;
  const Espresso::net *v128;
  std::__shared_weak_count *v129;
  _DWORD v130[8];
  _OWORD v131[2];
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  const Espresso::net *v136;
  std::__shared_weak_count *v137;
  _DWORD v138[8];
  const Espresso::net *v139;
  std::__shared_weak_count *v140;
  void **v141;

  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 48);
  v139 = 0;
  v140 = 0;
  v9 = *(std::__shared_weak_count **)(v8 + 80);
  if (v9 && (v140 = std::__shared_weak_count::lock(v9)) != 0)
  {
    v10 = *(const Espresso::net **)(v8 + 72);
    v139 = v10;
  }
  else
  {
    v10 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v10 + 472);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v139;
  v12 = v140;
  v136 = v139;
  v137 = v140;
  if (v140)
  {
    p_shared_owners = (unint64_t *)&v140->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *(_OWORD *)(v6 + 16);
  v17 = *(_QWORD *)(v6 + 32);
  v131[0] = *(_OWORD *)v6;
  v131[1] = v16;
  v132 = v17;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v133, *(const void **)(v6 + 40), *(_QWORD *)(v6 + 48), (uint64_t)(*(_QWORD *)(v6 + 48) - *(_QWORD *)(v6 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v138, v13, (const Espresso::layer_shape *)v131, 1);
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v21 = v139;
  v20 = v140;
  v128 = v139;
  v129 = v140;
  if (v140)
  {
    v22 = (unint64_t *)&v140->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_OWORD *)(v7 + 16);
  v25 = *(_QWORD *)(v7 + 32);
  v123[0] = *(_OWORD *)v7;
  v123[1] = v24;
  v124 = v25;
  __p = 0;
  v126 = 0;
  v127 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v7 + 40), *(_QWORD *)(v7 + 48), (uint64_t)(*(_QWORD *)(v7 + 48) - *(_QWORD *)(v7 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v130, v21, (const Espresso::layer_shape *)v123, 1);
  if (__p)
  {
    v126 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)v120, v11, v138, v130);
  if (!v120[0])
  {
    v39 = *(std::__shared_weak_count **)(a2 + 8);
    v118 = *(int64x2_t **)a2;
    v119 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v114, &v121, a3, 0);
    Espresso::emit_kernel_validation_warning(&v118, (Espresso::base_kernel::validate_for_engine_warning_t *)&v114);
    v42 = v117;
    if (v117)
    {
      v43 = (unint64_t *)&v117->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    v35 = v119;
    if (!v119)
      goto LABEL_62;
    v45 = (unint64_t *)&v119->__shared_owners_;
    do
      v37 = __ldaxr(v45);
    while (__stlxr(v37 - 1, v45));
    goto LABEL_60;
  }
  if ((v130[6] == 5 || v130[5] != 1)
    && Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v11, v28))
  {
    v29 = *(std::__shared_weak_count **)(a2 + 8);
    v112 = *(int64x2_t **)a2;
    v113 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "Invalid transpose, rank 5 transpose not supported on specified architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v114, (__int128 *)&v101, a3, 0);
    Espresso::emit_kernel_validation_warning(&v112, (Espresso::base_kernel::validate_for_engine_warning_t *)&v114);
    v32 = v117;
    if (v117)
    {
      v33 = (unint64_t *)&v117->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v111[0] = v116;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v111);
    v111[0] = v115;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v111);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v35 = v113;
    if (!v113)
      goto LABEL_62;
    v36 = (unint64_t *)&v113->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
LABEL_60:
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
LABEL_62:
    v46 = 0;
    goto LABEL_150;
  }
  if (*(_QWORD *)(a1 + 520))
  {
    v38 = 1;
  }
  else
  {
    v47 = *(_DWORD *)(v6 + 20);
    if (v47 == 5 || v47 == -1 && *(_DWORD *)(v6 + 16) != 1)
      v38 = *((_BYTE *)v139 + 1281) == 0;
    else
      v38 = -1;
  }
  Espresso::ANECompilerEngine::DecomposeTranspose((unint64_t **)v111, (unsigned int *)(a1 + 280), v38);
  is_mix = Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v11, v48);
  v50 = v139;
  if (is_mix)
  {
    std::string::basic_string[abi:ne180100]<0>(&v114, "experimental.ane.early_arch_transposes");
    std::string::basic_string[abi:ne180100]<0>(v109, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v50 + 472, (uint64_t)&v114, (uint64_t)v109, &v101);
    if (v110 < 0)
      operator delete(v109[0]);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v101.__r_.__value_.__l.__size_ != 1)
        goto LABEL_79;
      v51 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_79;
      v51 = &v101;
    }
    if (v51->__r_.__value_.__s.__data_[0] == 49)
    {
LABEL_99:
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v101.__r_.__value_.__l.__data_);
      goto LABEL_101;
    }
LABEL_79:
    if (v111[1] != v111[0])
    {
      v52 = *(std::__shared_weak_count **)(a2 + 8);
      v107 = *(int64x2_t **)a2;
      v108 = v52;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      std::string::basic_string[abi:ne180100]<0>(v109, "Invalid transpose for requested architecture would require transpose.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v114, (__int128 *)v109, a3, 0);
      Espresso::emit_kernel_validation_warning(&v107, (Espresso::base_kernel::validate_for_engine_warning_t *)&v114);
      v55 = v117;
      if (v117)
      {
        v56 = (unint64_t *)&v117->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v141 = (void **)v116;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v141);
      v141 = (void **)v115;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v141);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      if (v110 < 0)
        operator delete(v109[0]);
      v58 = v108;
      if (v108)
      {
        v59 = (unint64_t *)&v108->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v101.__r_.__value_.__l.__data_);
      goto LABEL_147;
    }
    goto LABEL_99;
  }
LABEL_101:
  v61 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v50, 0);
  v62 = **(_QWORD **)(a3 + 48) + 224 * *(_QWORD *)(a3 + 72);
  v63 = *(_QWORD **)(v62 + 112);
  if (*(_QWORD **)(v62 + 120) == v63)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v50 + 45), v63))
  {
    v64 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v50 + 352, v63) + 8);
    if (v64 == -1)
      v64 = 1;
  }
  else
  {
    v64 = *(_DWORD *)(a3 + 64);
  }
  if (v61 <= 1)
    v65 = 1;
  else
    v65 = v61;
  if (v64 <= 1)
    v64 = 1;
  if (v65 != v64)
  {
    v75 = *(std::__shared_weak_count **)(a2 + 8);
    v105 = *(int64x2_t **)a2;
    v106 = v75;
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "Transpose cannot change compute paths. Try quantizing your model differently in order to cast.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v114, (__int128 *)&v101, a3, 0);
    Espresso::emit_kernel_validation_warning(&v105, (Espresso::base_kernel::validate_for_engine_warning_t *)&v114);
    v78 = v117;
    if (v117)
    {
      v79 = (unint64_t *)&v117->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v109[0] = v116;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
    v109[0] = v115;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v72 = v106;
    if (!v106)
      goto LABEL_147;
    v81 = (unint64_t *)&v106->__shared_owners_;
    do
      v74 = __ldaxr(v81);
    while (__stlxr(v74 - 1, v81));
    goto LABEL_145;
  }
  if (v65 < 8 && ((0x4Bu >> (v65 - 1)) & 1) != 0)
  {
    v86 = off_1E2DD20E8[v65 - 1];
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v109, (NSString *)(a1 + 304), v11);
    Espresso::ANECompilerEngine::validate_transpose((uint64_t)&v101, (uint64_t)v109, (uint64_t)v138, (uint64_t)v86, (unsigned int **)v111);
    v46 = v101.__r_.__value_.__s.__data_[0] != 0;
    if (!v101.__r_.__value_.__s.__data_[0])
    {
      v90 = *(std::__shared_weak_count **)(a2 + 8);
      v99 = *(int64x2_t **)a2;
      v100 = v90;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v114, (__int128 *)&v101.__r_.__value_.__r.__words[1], a3, 0);
      Espresso::emit_kernel_validation_warning(&v99, (Espresso::base_kernel::validate_for_engine_warning_t *)&v114);
      v93 = v117;
      if (v117)
      {
        v94 = (unint64_t *)&v117->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v141 = (void **)v116;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v141);
      v141 = (void **)v115;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v141);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      v96 = v100;
      if (v100)
      {
        v97 = (unint64_t *)&v100->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
    }
    if (v102 < 0)
      operator delete((void *)v101.__r_.__value_.__l.__size_);
    v87 = (std::__shared_weak_count *)v109[1];
    if (v109[1])
    {
      v88 = (unint64_t *)((char *)v109[1] + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    goto LABEL_148;
  }
  v66 = *(std::__shared_weak_count **)(a2 + 8);
  v103 = *(int64x2_t **)a2;
  v104 = v66;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  std::string::basic_string[abi:ne180100]<0>(&v101, "transpose_kernel: invalid compute path for input.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v114, (__int128 *)&v101, a3, 0);
  Espresso::emit_kernel_validation_warning(&v103, (Espresso::base_kernel::validate_for_engine_warning_t *)&v114);
  v69 = v117;
  if (v117)
  {
    v70 = (unint64_t *)&v117->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v109[0] = v116;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
  v109[0] = v115;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  v72 = v104;
  if (v104)
  {
    v73 = (unint64_t *)&v104->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
LABEL_145:
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
LABEL_147:
  v46 = 0;
LABEL_148:
  if (v111[0])
    operator delete(v111[0]);
LABEL_150:
  if (v122 < 0)
    operator delete((void *)v121);

  v82 = v140;
  if (v140)
  {
    v83 = (unint64_t *)&v140->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  return v46;
}

void sub_190E7F3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  uint64_t v55;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (a27)
    operator delete(a27);
  if (a54 < 0)
    operator delete(a49);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v55 - 104);
  _Unwind_Resume(a1);
}

void sub_190E7F5C0()
{
  JUMPOUT(0x190E7F5B0);
}

BOOL Espresso::ANECompilerEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  const Espresso::base_kernel::validate_for_engine_args_t *v7;
  Espresso::ANECompilerEngine *v8;
  NSString *v9;
  Espresso::ANECompilerEngine *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int is_mix;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  const Espresso::net *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  const Espresso::net *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  unint64_t v54;
  __int128 v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  char v65;
  int v66;
  int v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  int v79;
  _BYTE *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  _BOOL8 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  Espresso::ANECompilerEngine *v124;
  int64x2_t *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  char v130;
  void *v131;
  __int128 v132;
  int64x2_t *v133;
  std::__shared_weak_count *v134;
  void *v135;
  char *v136;
  unint64_t v137;
  int64x2_t *v138;
  std::__shared_weak_count *v139;
  _OWORD v140[2];
  uint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  const Espresso::base_kernel::validate_for_engine_args_t *v145;
  std::__shared_weak_count *v146;
  void *v147;
  char *v148;
  unint64_t v149;
  _OWORD v150[2];
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  const Espresso::base_kernel::validate_for_engine_args_t *v155;
  std::__shared_weak_count *v156;
  void *__p[2];
  char v158;
  int64x2_t *v159;
  std::__shared_weak_count *v160;
  _BYTE v161[32];
  _BYTE v162[32];
  std::__shared_weak_count *v163;
  int64x2_t *v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  const Espresso::base_kernel::validate_for_engine_args_t *v167;
  std::__shared_weak_count *v168;
  void **v169[2];

  v5 = a3[6];
  v167 = 0;
  v168 = 0;
  v6 = *(std::__shared_weak_count **)(v5 + 80);
  if (v6 && (v168 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v5 + 72);
    v167 = v7;
  }
  else
  {
    v7 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v7 + 472);
  v8 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v10 = v8;
  v11 = *(_QWORD *)(a1 + 280);
  v166 = v11;
  if ((v11 & 0x80000000) != 0)
  {
    v13 = a3[3];
    v14 = *(_DWORD *)(v13 + 20);
    if (v14 == -1)
    {
      if (*(_DWORD *)(v13 + 16) == 1)
        v14 = 4;
      else
        v14 = 5;
    }
    v12 = v14 + v11;
    LODWORD(v166) = v14 + v11;
  }
  else
  {
    v12 = v11;
  }
  if ((v11 & 0xFF00000000) != 0)
  {
    v15 = a3[3];
    v16 = *(_DWORD *)(v15 + 20);
    if (v16 == -1)
    {
      if (*(_DWORD *)(v15 + 16) == 1)
        v16 = 4;
      else
        v16 = 5;
    }
    v12 = v16 + ~v12;
    LODWORD(v166) = v12;
    BYTE4(v166) = 0;
  }
  is_mix = Espresso::ANECompilerEngine::is_mix(v8, v9);
  if (v12 > 2)
    v18 = is_mix;
  else
    v18 = 0;
  if (v18 == 1)
  {
    v19 = *(std::__shared_weak_count **)(a2 + 8);
    v164 = *(int64x2_t **)a2;
    v165 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Unsupported concat axis on batch with sub-batching architecture target.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v161, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v164, (Espresso::base_kernel::validate_for_engine_warning_t *)v161);
    v22 = v163;
    if (v163)
    {
      v23 = (unint64_t *)&v163->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v128[0] = v162;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
    v128[0] = &v161[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    if (v158 < 0)
      operator delete(__p[0]);
    v25 = v165;
    if (!v165)
      goto LABEL_140;
    v26 = (unint64_t *)&v165->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
LABEL_138:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
LABEL_140:
    v89 = 0;
    goto LABEL_177;
  }
  if (*a3 == a3[1])
  {
    v82 = *(std::__shared_weak_count **)(a2 + 8);
    v159 = *(int64x2_t **)a2;
    v160 = v82;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Detected zero bottom blob in general_concat");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v161, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v159, (Espresso::base_kernel::validate_for_engine_warning_t *)v161);
    v85 = v163;
    if (v163)
    {
      v86 = (unint64_t *)&v163->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v128[0] = v162;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
    v128[0] = &v161[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    if (v158 < 0)
      operator delete(__p[0]);
    v25 = v160;
    if (!v160)
      goto LABEL_140;
    v88 = (unint64_t *)&v160->__shared_owners_;
    do
      v27 = __ldaxr(v88);
    while (__stlxr(v27 - 1, v88));
    goto LABEL_138;
  }
  v29 = v167;
  v28 = v168;
  v155 = v167;
  v156 = v168;
  if (v168)
  {
    v30 = (unint64_t *)&v168->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = a3[3];
  v33 = *(_QWORD *)(v32 + 32);
  v34 = *(_OWORD *)(v32 + 16);
  v150[0] = *(_OWORD *)v32;
  v150[1] = v34;
  v151 = v33;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v152, *(const void **)(v32 + 40), *(_QWORD *)(v32 + 48), (uint64_t)(*(_QWORD *)(v32 + 48) - *(_QWORD *)(v32 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, v29, (const Espresso::layer_shape *)v150, 1);
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v28)
  {
    v35 = (unint64_t *)&v28->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v37 = *a3;
  v38 = a3[1];
  if (*a3 == v38)
  {
    v80 = 0;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    goto LABEL_161;
  }
  v124 = v10;
  do
  {
    v40 = v167;
    v39 = v168;
    v145 = v167;
    v146 = v168;
    if (v168)
    {
      v41 = (unint64_t *)&v168->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = *(_OWORD *)v37;
    v44 = *(_OWORD *)(v37 + 16);
    v141 = *(_QWORD *)(v37 + 32);
    v140[0] = v43;
    v140[1] = v44;
    v143 = 0;
    v144 = 0;
    v142 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v142, *(const void **)(v37 + 40), *(_QWORD *)(v37 + 48), (uint64_t)(*(_QWORD *)(v37 + 48) - *(_QWORD *)(v37 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v161, v40, (const Espresso::layer_shape *)v140, 1);
    v45 = v148;
    if ((unint64_t)v148 >= v149)
    {
      v47 = (char *)v147;
      v48 = (v148 - (_BYTE *)v147) >> 5;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 59)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v50 = v149 - (_QWORD)v147;
      if ((uint64_t)(v149 - (_QWORD)v147) >> 4 > v49)
        v49 = v50 >> 4;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0)
        v51 = 0x7FFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      if (v51)
        v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v51);
      else
        v52 = 0;
      v53 = (_OWORD *)(v51 + 32 * v48);
      *v53 = *(_OWORD *)v161;
      v53[1] = *(_OWORD *)&v161[16];
      if (v45 == v47)
      {
        v56 = (void *)(v51 + 32 * v48);
      }
      else
      {
        v54 = v51 + 32 * v48;
        do
        {
          v55 = *((_OWORD *)v45 - 1);
          v56 = (void *)(v54 - 32);
          *(_OWORD *)(v54 - 32) = *((_OWORD *)v45 - 2);
          *(_OWORD *)(v54 - 16) = v55;
          v45 -= 32;
          v54 -= 32;
        }
        while (v45 != v47);
      }
      v46 = (char *)(v53 + 2);
      v147 = v56;
      v149 = v51 + 32 * v52;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *(_OWORD *)v148 = *(_OWORD *)v161;
      *((_OWORD *)v45 + 1) = *(_OWORD *)&v161[16];
      v46 = v45 + 32;
    }
    v148 = v46;
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
    if (v39)
    {
      v57 = (unint64_t *)&v39->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (*(_BYTE *)(a1 + 285) && !Espresso::layer_shape::operator==(v37, *a3))
    {
      v90 = *(std::__shared_weak_count **)(a2 + 8);
      v138 = *(int64x2_t **)a2;
      v139 = v90;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      v10 = v124;
      std::string::basic_string[abi:ne180100]<0>(v128, "All shapes in general_concat must match if interleave is set.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v161, (__int128 *)v128, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v138, (Espresso::base_kernel::validate_for_engine_warning_t *)v161);
      v93 = v163;
      if (v163)
      {
        v94 = (unint64_t *)&v163->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v135 = v162;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
      v135 = &v161[24];
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
      if ((v161[23] & 0x80000000) != 0)
        operator delete(*(void **)v161);
      if (v129 < 0)
        operator delete(v128[0]);
      v96 = v139;
      if (v139)
      {
        v97 = (unint64_t *)&v139->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v89 = 0;
      goto LABEL_175;
    }
    v37 += 64;
  }
  while (v37 != v38);
  v60 = *a3;
  v59 = a3[1];
  v135 = 0;
  v136 = 0;
  v137 = 0;
  if (v59 == v60)
  {
    v80 = v147;
    v10 = v124;
LABEL_161:
    v131 = 0;
    v132 = 0uLL;
LABEL_162:
    Espresso::ANECompilerEngine::bottom_constness_mask((Espresso::ANECompilerEngine *)v161, (v148 - v80) >> 5, (const Espresso::base_kernel::validate_for_engine_args_t *)a3);
    v131 = *(void **)v161;
    v132 = *(_OWORD *)&v161[8];
    goto LABEL_163;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  do
  {
    if (0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a3[6] + 224 * a3[9] + 144) - *(_QWORD *)(*(_QWORD *)a3[6] + 224 * a3[9] + 136)) >> 3) <= v64)
    {
      if (!v64)
      {
        v137 = v62;
        v115 = *(std::__shared_weak_count **)(a2 + 8);
        v133 = *(int64x2_t **)a2;
        v134 = v115;
        v135 = v61;
        if (v115)
        {
          v116 = (unint64_t *)&v115->__shared_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        v10 = v124;
        std::string::basic_string[abi:ne180100]<0>(v128, "Unexpected: No available compute path in concat validation.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v161, (__int128 *)v128, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v133, (Espresso::base_kernel::validate_for_engine_warning_t *)v161);
        v118 = v163;
        if (v163)
        {
          v119 = (unint64_t *)&v163->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v131 = v162;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
        v131 = &v161[24];
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
        if ((v161[23] & 0x80000000) != 0)
          operator delete(*(void **)v161);
        if (v129 < 0)
          operator delete(v128[0]);
        v121 = v134;
        if (v134)
        {
          v122 = (unint64_t *)&v134->__shared_owners_;
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
        v89 = 0;
        goto LABEL_173;
      }
      if ((unint64_t)v63 < v62)
      {
        v65 = 0;
        *(_DWORD *)v63 = *((_DWORD *)v63 - 1);
        v68 = v63 + 4;
        goto LABEL_120;
      }
      v73 = (v63 - v61) >> 2;
      v74 = v73 + 1;
      if ((unint64_t)(v73 + 1) >> 62)
      {
        v137 = v62;
        v135 = v61;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v62 - (_QWORD)v61) >> 1 > v74)
        v74 = (uint64_t)(v62 - (_QWORD)v61) >> 1;
      if (v62 - (unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
        v75 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v75 = v74;
      if (v75)
        v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v75);
      else
        v76 = 0;
      v77 = (char *)(v75 + 4 * v73);
      *(_DWORD *)v77 = *((_DWORD *)v63 - 1);
      v68 = v77 + 4;
      while (v63 != v61)
      {
        v79 = *((_DWORD *)v63 - 1);
        v63 -= 4;
        *((_DWORD *)v77 - 1) = v79;
        v77 -= 4;
      }
      v62 = v75 + 4 * v76;
      v136 = v68;
      if (v61)
        operator delete(v61);
      v65 = 0;
    }
    else
    {
      v66 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v167, (const Espresso::net *)v64);
      v67 = v66;
      if ((unint64_t)v63 < v62)
      {
        *(_DWORD *)v63 = v66;
        v68 = v63 + 4;
        goto LABEL_120;
      }
      v69 = (v63 - v61) >> 2;
      v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 62)
      {
        v137 = v62;
        v135 = v61;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v62 - (_QWORD)v61) >> 1 > v70)
        v70 = (uint64_t)(v62 - (_QWORD)v61) >> 1;
      if (v62 - (unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
        v71 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v71 = v70;
      if (v71)
        v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v71);
      else
        v72 = 0;
      v77 = (char *)(v71 + 4 * v69);
      *(_DWORD *)v77 = v67;
      v68 = v77 + 4;
      while (v63 != v61)
      {
        v78 = *((_DWORD *)v63 - 1);
        v63 -= 4;
        *((_DWORD *)v77 - 1) = v78;
        v77 -= 4;
      }
      v62 = v71 + 4 * v72;
      v136 = v68;
      if (v61)
        operator delete(v61);
    }
    v61 = v77;
LABEL_120:
    v136 = v68;
    ++v64;
    v63 = v68;
  }
  while (v64 < (a3[1] - *a3) >> 6);
  v137 = v62;
  v135 = v61;
  v131 = 0;
  v132 = 0uLL;
  v80 = v147;
  v10 = v124;
  if ((v65 & 1) != 0)
    goto LABEL_162;
  v81 = (v148 - (_BYTE *)v147) >> 5;
  std::vector<BOOL>::reserve((uint64_t)&v131, v81);
  std::vector<BOOL>::resize((uint64_t)&v131, v81);
LABEL_163:
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v161, (NSString *)(a1 + 288), v10);
  Espresso::ANECompilerEngine::general_concat_kernel::supported_by_hw((uint64_t)v128, (uint64_t)v161, v10, &v147, (uint64_t *)&v135, &v131, __p, (unsigned int *)&v166);
  v99 = *(std::__shared_weak_count **)&v161[8];
  if (*(_QWORD *)&v161[8])
  {
    v100 = (unint64_t *)(*(_QWORD *)&v161[8] + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v89 = LOBYTE(v128[0]) != 0;
  if (!LOBYTE(v128[0]))
  {
    v106 = *(std::__shared_weak_count **)(a2 + 8);
    v126 = *(int64x2_t **)a2;
    v127 = v106;
    if (v106)
    {
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v161, (__int128 *)&v128[1], (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v126, (Espresso::base_kernel::validate_for_engine_warning_t *)v161);
    v109 = v163;
    if (v163)
    {
      v110 = (unint64_t *)&v163->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    v169[0] = (void **)v162;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v169);
    v169[0] = (void **)&v161[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v169);
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    v112 = v127;
    if (v127)
    {
      v113 = (unint64_t *)&v127->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
  }
  if (v130 < 0)
    operator delete(v128[1]);
  if (v131)
    operator delete(v131);
LABEL_173:
  if (v135)
    operator delete(v135);
LABEL_175:
  if (v147)
    operator delete(v147);
LABEL_177:

  v102 = v168;
  if (v168)
  {
    v103 = (unint64_t *)&v168->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  return v89;
}

void sub_190E801EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  void *v41;
  uint64_t v42;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v42 - 248));
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (v41)
  {
    a26 = (uint64_t)v41;
    operator delete(v41);
  }
  if (a41)
    operator delete(a41);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 112);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *Espresso::ANECompilerEngine::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  void *v9;
  std::__shared_weak_count *v10;
  const Espresso::net *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  const Espresso::net *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  int v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64x2_t *v82;
  std::__shared_weak_count *v83;
  void **v84;
  __int128 v85;
  char v86;
  void *v87[3];
  _OWORD v88[2];
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  const Espresso::net *v93;
  std::__shared_weak_count *v94;
  void *v95;
  char *v96;
  unint64_t v97;
  void *v98;
  char *v99;
  unint64_t v100;
  int v101;
  __int16 v102;
  _OWORD v103[2];
  uint64_t v104;
  void *__p;
  void *v106;
  uint64_t v107;
  const Espresso::base_kernel::validate_for_engine_args_t *v108;
  std::__shared_weak_count *v109;
  void *v110[2];
  char v111;
  __int128 v112;
  _OWORD v113[2];
  _BYTE v114[32];
  std::__shared_weak_count *v115;
  int64x2_t *v116;
  std::__shared_weak_count *v117;
  const Espresso::base_kernel::validate_for_engine_args_t *v118;
  std::__shared_weak_count *v119;
  void **v120[3];

  v6 = *((_QWORD *)a3 + 6);
  v118 = 0;
  v119 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v119 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v118 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 <= 0x40uLL)
  {
    v59 = *(std::__shared_weak_count **)(a2 + 8);
    v116 = *(int64x2_t **)a2;
    v117 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(p_shared_owners);
      while (__stxr(v61 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v110, "Must have at least two tensors to concat.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v112, (__int128 *)v110, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v116, (Espresso::base_kernel::validate_for_engine_warning_t *)&v112);
    v62 = v115;
    if (v115)
    {
      v63 = (unint64_t *)&v115->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v84 = (void **)v114;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v84);
    v84 = (void **)v113 + 1;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v84);
    if (SBYTE7(v113[0]) < 0)
      operator delete((void *)v112);
    if (v111 < 0)
      operator delete(v110[0]);
    v58 = v117;
    if (v117)
    {
      v65 = (unint64_t *)&v117->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      v58 = 0;
    }
  }
  else
  {
    v11 = v118;
    v10 = v119;
    v108 = v118;
    v109 = v119;
    if (v119)
    {
      v12 = (unint64_t *)&v119->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = *((_QWORD *)a3 + 3);
    v15 = *(_QWORD *)(v14 + 32);
    v16 = *(_OWORD *)(v14 + 16);
    v103[0] = *(_OWORD *)v14;
    v103[1] = v16;
    v104 = v15;
    __p = 0;
    v106 = 0;
    v107 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48) - *(_QWORD *)(v14 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v110, v11, (const Espresso::layer_shape *)v103, 1);
    if (__p)
    {
      v106 = __p;
      operator delete(__p);
    }
    if (v10)
    {
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v102 = 0;
    v19 = *(_QWORD *)a3;
    if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v80 = a2;
    v81 = a1;
    v20 = *(_DWORD *)(v19 + 20);
    if (v20 == -1)
    {
      if (*(_DWORD *)(v19 + 16) == 1)
        v20 = 4;
      else
        v20 = 5;
    }
    v21 = 0;
    v101 = 2 * (v20 > 3);
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v22 = v118;
    do
    {
      v23 = v119;
      v93 = v22;
      v94 = v119;
      if (v119)
      {
        v24 = (unint64_t *)&v119->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        v19 = *(_QWORD *)a3;
      }
      v26 = (__int128 *)(v19 + (v21 << 6));
      v27 = *v26;
      v28 = v26[1];
      v89 = *((_QWORD *)v26 + 4);
      v88[0] = v27;
      v88[1] = v28;
      v91 = 0;
      v92 = 0;
      v90 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v90, *((const void **)v26 + 5), *((_QWORD *)v26 + 6), (uint64_t)(*((_QWORD *)v26 + 6) - *((_QWORD *)v26 + 5)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v112, v22, (const Espresso::layer_shape *)v88, 1);
      v29 = v99;
      if ((unint64_t)v99 >= v100)
      {
        v31 = (char *)v98;
        v32 = (v99 - (_BYTE *)v98) >> 5;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 59)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = v100 - (_QWORD)v98;
        if ((uint64_t)(v100 - (_QWORD)v98) >> 4 > v33)
          v33 = v34 >> 4;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0)
          v35 = 0x7FFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
          v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v35);
        else
          v36 = 0;
        v37 = (_OWORD *)(v35 + 32 * v32);
        *v37 = v112;
        v37[1] = v113[0];
        if (v29 == v31)
        {
          v40 = (void *)(v35 + 32 * v32);
        }
        else
        {
          v38 = v35 + 32 * v32;
          do
          {
            v39 = *((_OWORD *)v29 - 1);
            v40 = (void *)(v38 - 32);
            *(_OWORD *)(v38 - 32) = *((_OWORD *)v29 - 2);
            *(_OWORD *)(v38 - 16) = v39;
            v29 -= 32;
            v38 -= 32;
          }
          while (v29 != v31);
        }
        v30 = (char *)(v37 + 2);
        v98 = v40;
        v100 = v35 + 32 * v36;
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_OWORD *)v99 = v112;
        *((_OWORD *)v29 + 1) = v113[0];
        v30 = v29 + 32;
      }
      v99 = v30;
      if (v90)
      {
        v91 = v90;
        operator delete(v90);
      }
      if (v23)
      {
        v41 = (unint64_t *)&v23->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v22 = v118;
      v43 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v118, (const Espresso::net *)v21);
      v44 = v43;
      v45 = v96;
      if ((unint64_t)v96 >= v97)
      {
        v47 = (char *)v95;
        v48 = (v96 - (_BYTE *)v95) >> 2;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v50 = v97 - (_QWORD)v95;
        if ((uint64_t)(v97 - (_QWORD)v95) >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
          v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v51);
        else
          v52 = 0;
        v53 = (char *)(v51 + 4 * v48);
        *(_DWORD *)v53 = v44;
        v46 = v53 + 4;
        while (v45 != v47)
        {
          v54 = *((_DWORD *)v45 - 1);
          v45 -= 4;
          *((_DWORD *)v53 - 1) = v54;
          v53 -= 4;
        }
        v95 = v53;
        v97 = v51 + 4 * v52;
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_DWORD *)v96 = v43;
        v46 = v45 + 4;
      }
      v96 = v46;
      ++v21;
      v19 = *(_QWORD *)a3;
    }
    while (v21 < (uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 6);
    Espresso::ANECompilerEngine::bottom_constness_mask((Espresso::ANECompilerEngine *)v87, (v99 - (_BYTE *)v98) >> 5, a3);
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v112, (NSString *)(v81 + 344), v9);
    Espresso::ANECompilerEngine::general_concat_kernel::supported_by_hw((uint64_t)&v84, (uint64_t)&v112, v9, &v98, (uint64_t *)&v95, v87, v110, (unsigned int *)&v101);
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!(_BYTE)v84)
    {
      v71 = *(std::__shared_weak_count **)(v80 + 8);
      v82 = *(int64x2_t **)v80;
      v83 = v71;
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v112, &v85, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v82, (Espresso::base_kernel::validate_for_engine_warning_t *)&v112);
      v74 = v115;
      if (v115)
      {
        v75 = (unint64_t *)&v115->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v120[0] = (void **)v114;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v120);
      v120[0] = (void **)v113 + 1;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v120);
      if (SBYTE7(v113[0]) < 0)
        operator delete((void *)v112);
      v77 = v83;
      if (v83)
      {
        v78 = (unint64_t *)&v83->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
    }
    v58 = (std::__shared_weak_count *)((_BYTE)v84 != 0);
    if (v86 < 0)
      operator delete((void *)v85);
    if (v87[0])
      operator delete(v87[0]);
    if (v95)
      operator delete(v95);
    if (v98)
      operator delete(v98);
  }

  v67 = v119;
  if (v119)
  {
    v68 = (unint64_t *)&v119->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  return v58;
}

void sub_190E80B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v58 - 248));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a20 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a35)
    operator delete(a35);
  if (a38)
    operator delete(a38);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 120);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::bottom_compute_path(Espresso::ANECompilerEngine *this, const Espresso::base_kernel::validate_for_engine_args_t *a2, const Espresso::net *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  unsigned int v9;
  std::string __p;

  v3 = **((_QWORD **)this + 6) + 224 * *((_QWORD *)this + 9);
  v4 = *(_QWORD *)(v3 + 136);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v3 + 144) - v4) >> 3) <= (int)a3)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v6 = *((unsigned int *)this + 16);
  v7 = (__int128 *)(v4 + 24 * (int)a3);
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), &__p))
  {
    v9 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)a2 + 352, &__p) + 8);
    if (v9 == -1)
      v6 = 1;
    else
      v6 = v9;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_190E80D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::general_concat_kernel::supported_by_hw(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6, _DWORD *a7, unsigned int *a8)
{
  id v14;
  int v15;
  std::string *v16;
  __int128 v17;
  char *v18;
  char *v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  Espresso::ANECompilerEngine *v23;
  uint64_t v24;
  __CFString *ANECAxisForNDAxis;
  _BYTE *v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string::size_type v32;
  unint64_t v33;
  uint64_t v34;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string::size_type *v37;
  int v38;
  int v39;
  _DWORD *v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  const __CFString *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  CFTypeRef *v70;
  unint64_t *v71;
  unint64_t v72;
  CFTypeRef *v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  void **v78;
  std::string::size_type v79;
  std::string *v80;
  std::string::size_type v81;
  char v82;
  uint64_t v83;
  _QWORD *__val;
  int __vala;
  void *v86[2];
  unsigned __int8 v87;
  std::string v88;
  std::string v89;
  std::string v90;
  _BYTE __p[48];
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __CFString *v95;
  uint64_t v96;
  std::string v97;
  _QWORD v98[5];

  v98[2] = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = *a8;
  if ((int)*a8 < 5)
  {
    if (v15 < 0)
    {
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Axis expected to already have been converted to positive by caller.");
      goto LABEL_24;
    }
    __val = a6;
    v21 = (_DWORD *)*a4;
    v20 = (_DWORD *)a4[1];
    while (v21 != v20)
    {
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v21, v14))
      {
        *(_BYTE *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
        goto LABEL_24;
      }
      v21 += 8;
    }
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(a7, v14))
    {
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Output blob dimensions exceed ANE limit.");
      goto LABEL_24;
    }
    v22 = a7[7];
    v23 = (Espresso::ANECompilerEngine *)*a8;
    v24 = *(int *)(*a4 + 24);
    if (*((_BYTE *)a8 + 4))
    {
      ANECAxisForNDAxis = (__CFString *)Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v23, v24, v22 == 0);
LABEL_18:
      v27 = *((unsigned __int8 *)a8 + 5);
      v26 = (char *)a8 + 5;
      if (v27 && ANECAxisForNDAxis != CFSTR("Channel"))
      {
        *(_BYTE *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Concat interleave option supported on channel dimension only.");
        goto LABEL_24;
      }
    }
    else
    {
      ANECAxisForNDAxis = CFSTR("Height");
      switch((int)v23)
      {
        case 0:
          ANECAxisForNDAxis = CFSTR("Width");
          goto LABEL_18;
        case 1:
          goto LABEL_18;
        case 2:
          if (!v22 && (_DWORD)v24 == 5)
            goto LABEL_32;
          goto LABEL_35;
        case 3:
          ANECAxisForNDAxis = CFSTR("Batch");
          if (v22 || (_DWORD)v24 != 5)
            goto LABEL_18;
LABEL_35:
          v26 = (char *)a8 + 5;
          ANECAxisForNDAxis = CFSTR("Channel");
          break;
        case 4:
          if (v22 || (_DWORD)v24 != 5)
LABEL_32:
            ANECAxisForNDAxis = CFSTR("Depth");
          else
            ANECAxisForNDAxis = CFSTR("Batch");
          goto LABEL_18;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
      }
    }
    ANECConcatLayerDescInitialize();
    v28 = (uint64_t *)MEMORY[0x1E0C9AE40];
    if (*v26)
      v28 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v29 = *v28;
    v95 = ANECAxisForNDAxis;
    v96 = v29;
    v93 = 0;
    v94 = 0;
    *(_OWORD *)&v97.__r_.__value_.__r.__words[1] = 0uLL;
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97.__r_.__value_.__l.__size_;
    v31 = *a4;
    v30 = a4[1];
    if (v30 == *a4)
      goto LABEL_89;
    v32 = 0;
    v33 = 0;
    do
    {
      v34 = *a5;
      if (v33 >= (a5[1] - *a5) >> 2)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      size = v97.__r_.__value_.__l.__size_;
      p_size = &v97.__r_.__value_.__l.__size_;
      v37 = &v97.__r_.__value_.__l.__size_;
      if (v97.__r_.__value_.__l.__size_)
      {
        v38 = *(_DWORD *)(v34 + 4 * v33);
        while (1)
        {
          while (1)
          {
            v37 = (std::string::size_type *)size;
            v39 = *(_DWORD *)(size + 28);
            if (v38 >= v39)
              break;
            size = *v37;
            p_size = v37;
            if (!*v37)
              goto LABEL_49;
          }
          if (v39 >= v38)
            break;
          size = v37[1];
          if (!size)
          {
            p_size = v37 + 1;
            goto LABEL_49;
          }
        }
      }
      else
      {
LABEL_49:
        v40 = operator new(0x20uLL);
        v40[7] = *(_DWORD *)(v34 + 4 * v33);
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
        *((_QWORD *)v40 + 2) = v37;
        *p_size = (std::string::size_type)v40;
        if (*(_QWORD *)v97.__r_.__value_.__l.__data_)
        {
          v97.__r_.__value_.__r.__words[0] = *(_QWORD *)v97.__r_.__value_.__l.__data_;
          v40 = (_DWORD *)*p_size;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v97.__r_.__value_.__l.__size_, (uint64_t *)v40);
        v32 = ++v97.__r_.__value_.__r.__words[2];
        v31 = *a4;
        v30 = a4[1];
      }
      ++v33;
    }
    while (v33 < (v30 - v31) >> 5);
    if (v30 == v31)
    {
LABEL_89:
      v41 = 0;
LABEL_90:
      v66 = ANECValidateConcatLayer();
      if (v66)
      {
        __vala = v66;
        v67 = v93;
        v68 = v94;
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 1065353216;
        if (v93)
        {
          v69 = 0;
          v70 = (CFTypeRef *)(v94 + 8);
          do
          {
            v71 = (unint64_t *)(v68 + 552 * v69);
            if (*v71)
            {
              v72 = 0;
              v73 = v70;
              do
              {
                std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)__p, v73, v73);
                ++v72;
                ++v73;
              }
              while (v72 < *v71);
            }
            ++v69;
            v70 += 69;
          }
          while (v69 != v67);
        }
        std::to_string(&v88, __vala);
        v74 = std::string::insert(&v88, 0, "general_concat_kernel: ANECValidateConcatLayer failed with status ");
        v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        v76 = std::string::append(&v89, ". ");
        v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v86, (uint64_t)__p);
        if ((v87 & 0x80u) == 0)
          v78 = v86;
        else
          v78 = (void **)v86[0];
        if ((v87 & 0x80u) == 0)
          v79 = v87;
        else
          v79 = (std::string::size_type)v86[1];
        v80 = std::string::append(&v90, (const std::string::value_type *)v78, v79);
        v81 = v80->__r_.__value_.__r.__words[0];
        v98[0] = v80->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v98 + 7) = *(std::string::size_type *)((char *)&v80->__r_.__value_.__r.__words[1] + 7);
        v82 = HIBYTE(v80->__r_.__value_.__r.__words[2]);
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        *(_BYTE *)a1 = 0;
        *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v98 + 7);
        v83 = v98[0];
        *(_QWORD *)(a1 + 8) = v81;
        *(_QWORD *)(a1 + 16) = v83;
        *(_BYTE *)(a1 + 31) = v82;
        if ((char)v87 < 0)
          operator delete(v86[0]);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__p);
      }
      else
      {
        *(_BYTE *)a1 = 1;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
      }
    }
    else
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      while (1)
      {
        ANECTensorDescInitialize();
        if (v44 >= (a5[1] - *a5) >> 2)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v45 = *(unsigned int *)(*a5 + 4 * v44);
        if (v45 >= 8 || ((0x97u >> v45) & 1) == 0)
          break;
        if (v44 >= (uint64_t)(a4[1] - *a4) >> 5)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v46 = (_DWORD)v45 == 1 || v32 == 1;
        v47 = off_1E2DD20A8[v45];
        if (!v46)
          v47 = CFSTR("Float16");
        v48 = *a4 + 32 * v44;
        *(_QWORD *)__p = v47;
        v49 = *(_QWORD *)(v48 + 12);
        *(_QWORD *)&v50 = (int)v49;
        *((_QWORD *)&v50 + 1) = SHIDWORD(v49);
        *(_OWORD *)&__p[24] = v50;
        *(_QWORD *)&__p[40] = *(int *)(v48 + 8);
        *(_QWORD *)&v50 = (int)*(_QWORD *)v48;
        *((_QWORD *)&v50 + 1) = (int)HIDWORD(*(_QWORD *)v48);
        *(_OWORD *)&__p[8] = v50;
        if (__val[1] <= v44)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        if (((*(_QWORD *)(*__val + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1) != 0)
          BYTE9(v92) = 1;
        if (v42 >= v43)
        {
          v54 = (v42 - v41) >> 6;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 58)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if ((v43 - v41) >> 5 > v55)
            v55 = (v43 - v41) >> 5;
          if ((unint64_t)(v43 - v41) >= 0x7FFFFFFFFFFFFFC0)
            v56 = 0x3FFFFFFFFFFFFFFLL;
          else
            v56 = v55;
          if (v56)
          {
            if (v56 >> 58)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v57 = (char *)operator new(v56 << 6);
          }
          else
          {
            v57 = 0;
          }
          v58 = &v57[64 * v54];
          v59 = *(_OWORD *)&__p[16];
          *(_OWORD *)v58 = *(_OWORD *)__p;
          *((_OWORD *)v58 + 1) = v59;
          v60 = v92;
          *((_OWORD *)v58 + 2) = *(_OWORD *)&__p[32];
          *((_OWORD *)v58 + 3) = v60;
          if (v42 == v41)
          {
            v65 = &v57[64 * v54];
          }
          else
          {
            v61 = &v57[64 * v54];
            do
            {
              v62 = *((_OWORD *)v42 - 4);
              v63 = *((_OWORD *)v42 - 3);
              v64 = *((_OWORD *)v42 - 1);
              v65 = v61 - 64;
              *((_OWORD *)v61 - 2) = *((_OWORD *)v42 - 2);
              *((_OWORD *)v61 - 1) = v64;
              *((_OWORD *)v61 - 4) = v62;
              *((_OWORD *)v61 - 3) = v63;
              v42 -= 64;
              v61 -= 64;
            }
            while (v42 != v41);
          }
          v43 = &v57[64 * v56];
          v42 = v58 + 64;
          if (v41)
            operator delete(v41);
          v41 = v65;
        }
        else
        {
          v51 = *(_OWORD *)__p;
          v52 = *(_OWORD *)&__p[16];
          v53 = v92;
          *((_OWORD *)v42 + 2) = *(_OWORD *)&__p[32];
          *((_OWORD *)v42 + 3) = v53;
          *(_OWORD *)v42 = v51;
          *((_OWORD *)v42 + 1) = v52;
          v42 += 64;
        }
        if (++v44 >= (uint64_t)(a4[1] - *a4) >> 5)
          goto LABEL_90;
      }
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "general_concat_kernel: unsupported input compute path for ANE.");
    }
    std::__tree<int>::destroy((_QWORD *)v97.__r_.__value_.__l.__size_);
    if (v41)
    {
      v19 = v41;
      goto LABEL_9;
    }
  }
  else
  {
    std::to_string(&v97, v15);
    v16 = std::string::insert(&v97, 0, "Unsupported concat axis ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (__p[23] >= 0)
      v18 = __p;
    else
      v18 = *(char **)__p;
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), v18);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      v19 = (char *)v97.__r_.__value_.__r.__words[0];
LABEL_9:
      operator delete(v19);
    }
  }
LABEL_24:

}

void sub_190E814D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;
  uint64_t v44;

  std::__tree<int>::destroy(*(_QWORD **)(v44 - 136));
  if (v43)
    operator delete(v43);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::bottom_constness_mask(Espresso::ANECompilerEngine *this, unint64_t a2, const Espresso::base_kernel::validate_for_engine_args_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v22;
  BOOL v23;
  char v24;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<BOOL>::reserve((uint64_t)this, a2);
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = (uint64_t *)*((_QWORD *)a3 + 6);
      v9 = *((_QWORD *)a3 + 9);
      v10 = *v8;
      v11 = 0x6DB6DB6DB6DB6DB7 * ((v8[1] - *v8) >> 5);
      if (v11 <= v9)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v12 = v10 + 224 * v9;
      v13 = *(_QWORD *)(v12 + 136);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v12 + 144) - v13) >> 3) <= v7)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v14 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v8 + 3), (_QWORD *)(v13 + v6));
      if (v8 + 4 != v14)
        break;
      v24 = 0;
      std::vector<BOOL>::push_back((uint64_t *)this, &v24);
LABEL_21:
      ++v7;
      v6 += 24;
      if (a2 == v7)
        return;
    }
    v15 = v14[7];
    if (v11 <= v15)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v16 = v10 + 224 * v15;
    v17 = (_QWORD *)(v16 + 48);
    v18 = *(char *)(v16 + 71);
    if (v18 < 0)
    {
      if (v17[1] != 13)
      {
LABEL_19:
        v22 = 0;
LABEL_20:
        v23 = v22;
        std::vector<BOOL>::push_back((uint64_t *)this, &v23);
        goto LABEL_21;
      }
      v17 = (_QWORD *)*v17;
    }
    else if (v18 != 13)
    {
      goto LABEL_19;
    }
    v19 = (_QWORD *)*v17;
    v20 = *(_QWORD *)((char *)v17 + 5);
    v22 = v19 == (_QWORD *)0x6E6F635F64616F6CLL && v20 == 0x746E6174736E6F63;
    goto LABEL_20;
  }
}

void sub_190E81794(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::push_back(uint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((uint64_t)a1, v7);
    v4 = a1[1];
  }
  a1[1] = v4 + 1;
  v8 = *a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)(v8 + 8 * v9) | v10;
  else
    v11 = *(_QWORD *)(v8 + 8 * v9) & ~v10;
  *(_QWORD *)(v8 + 8 * v9) = v11;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  void *v3;
  uint64_t v4;
  __int128 v5;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = 0;
    v5 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v4, a2);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v4, *(_QWORD **)a1, 0, (_QWORD *)(*(_QWORD *)a1 + 8 * (*(_QWORD *)(a1 + 8) >> 6)), *(_DWORD *)(a1 + 8) & 0x3F, *(_QWORD *)(a1 + 8));
    v3 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    *(_OWORD *)(a1 + 8) = v5;
    if (v3)
      operator delete(v3);
  }
}

void sub_190E818E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *result, _QWORD *a2, int a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result[1];
  v7 = v6 + a6;
  result[1] = v6 + a6;
  if (v6)
  {
    v8 = v7 - 1;
    if (((v7 - 1) ^ (v6 - 1)) < 0x40)
      goto LABEL_9;
  }
  else
  {
    v8 = v7 - 1;
  }
  v9 = v8 >> 6;
  if (v7 >= 0x41)
    v10 = v9;
  else
    v10 = 0;
  *(_QWORD *)(*result + 8 * v10) = 0;
LABEL_9:
  if (a2 != a4 || a3 != a5)
  {
    v11 = v6 & 0x3F;
    v12 = (uint64_t *)(*result + 8 * (v6 >> 6));
    do
    {
      v13 = 1 << v11;
      if (((*a2 >> a3) & 1) != 0)
        v14 = *v12 | v13;
      else
        v14 = *v12 & ~v13;
      *v12 = v14;
      a2 += a3 == 63;
      if (a3 == 63)
        a3 = 0;
      else
        ++a3;
      v12 += v11 == 63;
      if (v11 == 63)
        v11 = 0;
      else
        ++v11;
    }
    while (a2 != a4 || a3 != a5);
  }
  return result;
}

uint64_t std::map<std::string,Espresso::blob_numerical_properties>::at(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

void Espresso::BNNSEngine::transpose_kernel::__launch(int *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  vDSP_Length v45;
  vDSP_Length v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _WORD *v92;
  uint64_t v93;
  __int16 *v94;
  _WORD *v95;
  _WORD *v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  size_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _BYTE *v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  vDSP_Length v144;
  vDSP_Length v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  char *v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int16 *v181;
  _WORD *v182;
  _WORD *v183;
  uint64_t v184;
  __int16 v185;
  int v186;
  size_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t kk;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int16 v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  _DWORD *v225;
  uint64_t v226;
  _DWORD *v227;
  _DWORD *v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t i;
  uint64_t v238;
  uint64_t j;
  uint64_t k;
  int v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  size_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  _BYTE *v283;
  uint64_t v284;
  char v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  unint64_t *v302;
  unint64_t v303;
  unint64_t *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  _DWORD *v327;
  uint64_t v328;
  _DWORD *v329;
  _DWORD *v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t jj;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  size_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  std::__shared_weak_count *v364;
  uint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  std::__shared_weak_count *v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  std::__shared_weak_count *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  vDSP_Length __N;
  vDSP_Length __Na;
  vDSP_Length __Nb;
  vDSP_Length __Nc;
  std::__shared_weak_count *v401;
  std::__shared_weak_count *v402;
  std::__shared_weak_count *v403;
  std::__shared_weak_count *v404;
  std::__shared_weak_count *v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  uint64_t v410;
  std::__shared_weak_count *v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  uint64_t v416;
  std::__shared_weak_count *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  void *v424;
  uint64_t v425;

  v425 = *MEMORY[0x1E0C80C00];
  v7 = *a4;
  if (a4[1] == *a4 || !*v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v9 = 0;
    v416 = 0;
    v417 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v7 + 160);
    v8 = *(std::__shared_weak_count **)(*v7 + 168);
    v416 = v9;
    v417 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v162 = __ldxr(p_shared_owners);
      while (__stxr(v162 + 1, p_shared_owners));
    }
  }
  v10 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v10
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 32))(*v10))
  {
    v11 = 0;
    v12 = 0;
    v414 = 0;
    v415 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(*v10 + 160);
    v11 = *(std::__shared_weak_count **)(*v10 + 168);
    v414 = v12;
    v415 = v11;
    if (v11)
    {
      v163 = (unint64_t *)&v11->__shared_owners_;
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
  }
  v13 = *a4;
  if (a4[1] != *a4 && *v13 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v13 + 32))(*v13) == 1)
  {
    v14 = *(std::__shared_weak_count **)(*v13 + 184);
    v382 = *(_QWORD *)(*v13 + 176);
    v412 = v382;
    v413 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v367 = v14;
    }
    else
    {
      v367 = 0;
    }
  }
  else
  {
    v367 = 0;
    v382 = 0;
    v412 = 0;
    v413 = 0;
  }
  v17 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3
    && *v17
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v17 + 32))(*v17) == 1)
  {
    v19 = *(_QWORD *)(*v17 + 176);
    v18 = *(std::__shared_weak_count **)(*v17 + 184);
    v410 = v19;
    v411 = v18;
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v410 = 0;
    v411 = 0;
  }
  if (a4[1] == *a4)
  {
    v408 = 0;
    v409 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v408, *a4);
  }
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
  {
    v406 = 0;
    v407 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v406, *(uint64_t **)a3);
  }
  v22 = *a4;
  v371 = v11;
  v363 = v18;
  if (a4[1] != *a4 && *v22 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v22 + 32))(*v22) == 3)
  {
    v23 = *(_QWORD *)(*v22 + 208);
    v24 = *(std::__shared_weak_count **)(*v22 + 216);
    v405 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v405 = 0;
  }
  v27 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v27
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v27 + 32))(*v27) != 3)
  {
    v28 = 0;
    v29 = 0;
    v404 = 0;
    if (!v9)
      goto LABEL_73;
LABEL_48:
    if (!v12)
      goto LABEL_73;
    v32 = a1[70];
    v33 = a1[71];
    v34 = a1[72];
    v35 = a1[73];
    v36 = a1[74];
    v403 = v8;
    if (v8)
    {
      v37 = (unint64_t *)&v8->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v39 = v371;
    if (v371)
    {
      v40 = (unint64_t *)&v371->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = **a4;
    v43 = *(_DWORD *)(v42 + 20);
    v389 = *(int *)(v42 + 24);
    v44 = *(int *)(**(_QWORD **)a3 + 20);
    v46 = *(int *)(v9 + 8);
    v45 = *(int *)(v9 + 12);
    __N = *(int *)(v9 + 16);
    v47 = *(int *)(v12 + 8);
    v48 = *(_DWORD *)(v12 + 12);
    v49 = *(int *)(v12 + 16);
    v50 = *(char **)(v12 + 24);
    v51 = *(int **)(v9 + 24);
    v52 = v48 * (uint64_t)(int)v47;
    v53 = v52 * v49;
    if ((_DWORD)v35 == 3 && (_DWORD)v36 == 4)
    {
      if ((_DWORD)v32)
      {
        if ((_DWORD)v32 == 1)
        {
          if (!(_DWORD)v33 && (_DWORD)v34 == 2)
          {
            v166 = (int)__N * (uint64_t)(int)(v389 * v43);
            if (v166)
            {
              v167 = 0;
              v168 = 4 * v48 * (uint64_t)(int)v47;
              do
              {
                vDSP_mtrans((const float *)((char *)v51 + v167), 1, (float *)&v50[v167], 1, v46, v45);
                v167 += v168;
                --v166;
              }
              while (v166);
            }
            goto LABEL_328;
          }
        }
        else if ((_DWORD)v32 == 2)
        {
          if ((_DWORD)v34 || (_DWORD)v45 != 1)
          {
            if (!(_DWORD)v33 && (_DWORD)v34 == 1)
            {
              if ((_DWORD)v389)
              {
                v212 = 0;
                if (v46 <= 1)
                  v213 = 1;
                else
                  v213 = v46;
                if (v45 <= 1)
                  v214 = 1;
                else
                  v214 = v45;
                v215 = __N;
                if (__N <= 1)
                  v215 = 1;
                if (v43 <= 1)
                  v216 = 1;
                else
                  v216 = v43;
                v217 = v48 * (uint64_t)(int)v47;
                v218 = 4 * v217 * v49 * v44;
                v219 = 4 * v217 * v49;
                v220 = 4 * v217;
                v221 = 4 * v47;
                do
                {
                  if (v43)
                  {
                    v222 = 0;
                    v223 = v50;
                    do
                    {
                      if ((_DWORD)__N)
                      {
                        v224 = 0;
                        v225 = v223;
                        do
                        {
                          if ((_DWORD)v45)
                          {
                            v226 = 0;
                            v227 = v225;
                            do
                            {
                              v228 = v227;
                              v229 = v213;
                              if ((_DWORD)v46)
                              {
                                do
                                {
                                  v230 = *v51++;
                                  *v228 = v230;
                                  v228 = (_DWORD *)((char *)v228 + v221);
                                  --v229;
                                }
                                while (v229);
                              }
                              ++v226;
                              v227 = (_DWORD *)((char *)v227 + v220);
                            }
                            while (v226 != v214);
                          }
                          ++v224;
                          ++v225;
                        }
                        while (v224 != v215);
                      }
                      ++v222;
                      v223 += v219;
                    }
                    while (v222 != v216);
                  }
                  ++v212;
                  v50 += v218;
                }
                while (v212 != v389);
              }
              goto LABEL_328;
            }
          }
          else if ((_DWORD)v33 == 1)
          {
            if ((_DWORD)v389)
            {
              v54 = 0;
              if (v43 <= 1)
                v55 = 1;
              else
                v55 = v43;
              v383 = v55;
              v56 = v48 * (uint64_t)(int)v47 * v49;
              v57 = 4 * v56 * v44;
              v58 = 4 * v56;
              do
              {
                if (v43)
                {
                  v59 = 0;
                  v60 = v383;
                  do
                  {
                    vDSP_mtrans((const float *)((char *)v51 + v59), 1, (float *)&v50[v59], 1, v46, __N);
                    v59 += v58;
                    --v60;
                  }
                  while (v60);
                }
                ++v54;
                v50 += v57;
                v51 = (int *)((char *)v51 + v57);
              }
              while (v54 != v389);
            }
            goto LABEL_328;
          }
        }
      }
      else if ((_DWORD)v33 == 2 && (_DWORD)v34 == 1)
      {
        if ((_DWORD)v46 == 1)
        {
          if ((_DWORD)v389)
          {
            v169 = 0;
            if (v43 <= 1)
              v170 = 1;
            else
              v170 = v43;
            v171 = v170;
            do
            {
              if (v43)
              {
                v172 = 0;
                v173 = v171;
                do
                {
                  vDSP_mtrans((const float *)&v51[v172 / 4], 1, (float *)&v50[v172], 1, v45, __N);
                  v172 += 4 * (int)__N * (uint64_t)(int)v45;
                  --v173;
                }
                while (v173);
                v50 += v172;
                v51 = (int *)((char *)v51 + v172);
              }
              ++v169;
            }
            while (v169 != v389);
            v39 = v371;
          }
          goto LABEL_328;
        }
        if (!((_DWORD)v389 * v43))
        {
LABEL_328:
          if (v39)
          {
            v242 = (unint64_t *)&v39->__shared_owners_;
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v207 = v403;
          if (!v403)
            goto LABEL_338;
          v244 = (unint64_t *)&v403->__shared_owners_;
          do
            v211 = __ldaxr(v244);
          while (__stlxr(v211 - 1, v244));
LABEL_336:
          if (!v211)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
          goto LABEL_338;
        }
        v365 = (int)(v389 * v43);
        v369 = 0;
        v267 = 4 * v46;
        if (v45 <= 1)
          v268 = 1;
        else
          v268 = v45;
        v269 = v48 * (uint64_t)(int)v47;
        v360 = 4 * v269 * v49;
        v270 = __N;
        if (__N <= 1)
          v270 = 1;
        v376 = v270;
        v380 = v268;
        v271 = 4 * v47;
        v272 = 4 * v269;
        do
        {
          if ((_DWORD)__N)
          {
            v273 = 0;
            v274 = (char *)&v51[v369 * v53];
            v275 = v50;
            do
            {
              v386 = v275;
              v394 = v273;
              v276 = v380;
              if ((_DWORD)v45)
              {
                do
                {
                  memcpy(v275, v274, v267);
                  v275 += v272;
                  v274 += v271;
                  --v276;
                }
                while (v276);
              }
              v273 = v394 + 1;
              v275 = &v386[v271];
            }
            while (v394 + 1 != v376);
          }
          v50 += v360;
          ++v369;
        }
        while (v369 != v365);
LABEL_327:
        v39 = v371;
        goto LABEL_328;
      }
    }
    if (!(_DWORD)v389)
      goto LABEL_328;
    v231 = 0;
    v232 = v53 * v44;
    if (v46 <= 1)
      v233 = 1;
    else
      v233 = v46;
    if (v45 <= 1)
      v234 = 1;
    else
      v234 = v45;
    v235 = __N;
    if (__N <= 1)
      v235 = 1;
    if (v43 <= 1)
      v236 = 1;
    else
      v236 = v43;
    do
    {
      if (v43)
      {
        for (i = 0; i != v236; ++i)
        {
          if ((_DWORD)__N)
          {
            v238 = 0;
            do
            {
              if ((_DWORD)v45)
              {
                for (j = 0; j != v234; ++j)
                {
                  if ((_DWORD)v46)
                  {
                    for (k = 0; k != v233; ++k)
                    {
                      v418 = k;
                      v419 = j;
                      v420 = v238;
                      v421 = i;
                      v422 = v231;
                      v241 = *v51++;
                      *(_DWORD *)&v50[4 * *(&v418 + v32)
                                    + 4 * *(&v418 + v33) * v47
                                    + 4 * *(&v418 + v34) * v52
                                    + 4 * *(&v418 + v35) * v53
                                    + 4 * *(&v418 + v36) * v232] = v241;
                    }
                  }
                }
              }
              ++v238;
            }
            while (v238 != v235);
          }
        }
      }
      ++v231;
    }
    while (v231 != v389);
    goto LABEL_327;
  }
  v29 = *(_QWORD *)(*v27 + 208);
  v28 = *(std::__shared_weak_count **)(*v27 + 216);
  v404 = v28;
  if (v28)
  {
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  if (v9)
    goto LABEL_48;
LABEL_73:
  if (!v382 || !v19)
  {
    v99 = v408;
    if (v408)
    {
      v100 = v406;
      if (v406)
      {
        v101 = a1[70];
        v102 = a1[71];
        v103 = a1[72];
        v104 = a1[73];
        v105 = a1[74];
        v106 = v409;
        if (v409)
        {
          v107 = (unint64_t *)&v409->__shared_owners_;
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
        }
        v368 = v106;
        v109 = v407;
        if (v407)
        {
          v110 = (unint64_t *)&v407->__shared_owners_;
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        v364 = v109;
        v112 = **a4;
        v113 = *(_DWORD *)(v112 + 20);
        v391 = *(int *)(v112 + 24);
        v115 = *(int *)(v99 + 8);
        v114 = *(int *)(v99 + 12);
        __Nb = *(int *)(v99 + 16);
        v116 = *(int *)(v100 + 8);
        v117 = *(_QWORD *)(v100 + 24);
        v118 = *(_QWORD *)(v99 + 24);
        v119 = *(int *)(v100 + 12) * (uint64_t)(int)v116;
        v120 = v119 * *(int *)(v100 + 16);
        v121 = v120 * *(int *)(**(_QWORD **)a3 + 20);
        if ((_DWORD)v104 == 3 && (_DWORD)v105 == 4)
        {
          if ((_DWORD)v101)
          {
            if ((_DWORD)v101 == 1)
            {
              if (!(_DWORD)v102 && (_DWORD)v103 == 2)
              {
                v277 = (int)__Nb * (uint64_t)(int)(v391 * v113);
                if (v277)
                {
                  v278 = 0;
                  if (v115 <= 1)
                    v279 = 1;
                  else
                    v279 = v115;
                  if (v114 <= 1)
                    v280 = 1;
                  else
                    v280 = v114;
                  do
                  {
                    if ((_DWORD)v114)
                    {
                      v281 = 0;
                      v282 = (char *)(v118 + v278 * v119);
                      do
                      {
                        if ((_DWORD)v115)
                        {
                          v283 = (_BYTE *)(v117 + v278 * v119 + v281);
                          v284 = v279;
                          do
                          {
                            v285 = *v282++;
                            *v283 = v285;
                            v283 += v116;
                            --v284;
                          }
                          while (v284);
                        }
                        ++v281;
                      }
                      while (v281 != v280);
                    }
                    ++v278;
                  }
                  while (v278 != v277);
                }
                goto LABEL_454;
              }
            }
            else if ((_DWORD)v101 == 2 && !(_DWORD)v103 && (_DWORD)v114 == 1 && (_DWORD)v102 == 1)
            {
              if ((_DWORD)v391)
              {
                v122 = 0;
                if (v115 <= 1)
                  v123 = 1;
                else
                  v123 = v115;
                if (__Nb <= 1)
                  v124 = 1;
                else
                  v124 = __Nb;
                if (v113 <= 1)
                  v125 = 1;
                else
                  v125 = *(_DWORD *)(v112 + 20);
                do
                {
                  if (v113)
                  {
                    v126 = 0;
                    do
                    {
                      if ((_DWORD)__Nb)
                      {
                        v127 = 0;
                        v128 = (char *)(v118 + v122 * v121 + v126 * v120);
                        do
                        {
                          if ((_DWORD)v115)
                          {
                            v129 = (_BYTE *)(v117 + v122 * v121 + v126 * v120 + v127);
                            v130 = v123;
                            do
                            {
                              v131 = *v128++;
                              *v129 = v131;
                              v129 += v119;
                              --v130;
                            }
                            while (v130);
                          }
                          ++v127;
                        }
                        while (v127 != v124);
                      }
                      ++v126;
                    }
                    while (v126 != v125);
                  }
                  ++v122;
                }
                while (v122 != v391);
              }
LABEL_454:
              v207 = v368;
              if (v364)
              {
                v302 = (unint64_t *)&v364->__shared_owners_;
                do
                  v303 = __ldaxr(v302);
                while (__stlxr(v303 - 1, v302));
                if (!v303)
                {
                  ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                  std::__shared_weak_count::__release_weak(v364);
                }
              }
              if (!v368)
                goto LABEL_338;
              v304 = (unint64_t *)&v368->__shared_owners_;
              do
                v211 = __ldaxr(v304);
              while (__stlxr(v211 - 1, v304));
              goto LABEL_336;
            }
          }
          else if ((_DWORD)v102 == 2 && (_DWORD)v103 == 1)
          {
            v286 = v391 * v113;
            if (v286)
            {
              v361 = v286;
              if (v114 <= 1)
                v287 = 1;
              else
                v287 = v114;
              v373 = 0;
              v377 = v287;
              v288 = __Nb;
              if (__Nb <= 1)
                v288 = 1;
              v387 = v288;
              do
              {
                if ((_DWORD)__Nb)
                {
                  v289 = 0;
                  v290 = (char *)(v118 + v373 * v120);
                  do
                  {
                    v395 = v289;
                    if ((_DWORD)v114)
                    {
                      v291 = v377;
                      v292 = (char *)(v117 + v373 * v120 + v289 * v116);
                      do
                      {
                        memcpy(v292, v290, v115);
                        v292 += v119;
                        v290 += v116;
                        --v291;
                      }
                      while (v291);
                    }
                    v289 = v395 + 1;
                  }
                  while (v395 + 1 != v387);
                }
                ++v373;
              }
              while (v373 != v361);
            }
            goto LABEL_454;
          }
        }
        if ((_DWORD)v391)
        {
          v293 = 0;
          if (v115 <= 1)
            v294 = 1;
          else
            v294 = v115;
          if (v114 <= 1)
            v295 = 1;
          else
            v295 = v114;
          if (__Nb <= 1)
            v296 = 1;
          else
            v296 = __Nb;
          if (v113 <= 1)
            v297 = 1;
          else
            v297 = *(_DWORD *)(v112 + 20);
          do
          {
            if (v113)
            {
              v298 = 0;
              do
              {
                if ((_DWORD)__Nb)
                {
                  for (m = 0; m != v296; ++m)
                  {
                    if ((_DWORD)v114)
                    {
                      for (n = 0; n != v295; ++n)
                      {
                        if ((_DWORD)v115)
                        {
                          for (ii = 0; ii != v294; ++ii)
                          {
                            v418 = ii;
                            v419 = n;
                            v420 = m;
                            v421 = v298;
                            v422 = v293;
                            *(_BYTE *)(v117
                                     + *(&v418 + v101)
                                     + *(&v418 + v102) * v116
                                     + *(&v418 + v103) * v119
                                     + *(&v418 + v104) * v120
                                     + *(&v418 + v105) * v121) = *(_BYTE *)(v118 + ii);
                          }
                          v118 += ii;
                        }
                      }
                    }
                  }
                }
                ++v298;
              }
              while (v298 != v297);
            }
            ++v293;
          }
          while (v293 != v391);
        }
        goto LABEL_454;
      }
    }
    if (!v23 || !v29)
    {
      Espresso::abstract_blob_container::shape((char *)&v418, **a4);
      v165 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v418);
      if (v423)
      {
        v424 = v423;
        operator delete(v423);
      }
      if (v165 >= 1)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("transpose_kernel: invalid blob configuration");
      goto LABEL_338;
    }
    v132 = a1[70];
    v133 = a1[71];
    v134 = a1[72];
    v135 = a1[73];
    v136 = a1[74];
    v402 = v24;
    if (v24)
    {
      v137 = (unint64_t *)&v24->__shared_owners_;
      do
        v138 = __ldxr(v137);
      while (__stxr(v138 + 1, v137));
    }
    v401 = v28;
    if (v28)
    {
      v139 = (unint64_t *)&v28->__shared_owners_;
      do
        v140 = __ldxr(v139);
      while (__stxr(v140 + 1, v139));
    }
    v141 = **a4;
    v142 = *(_DWORD *)(v141 + 20);
    v392 = *(int *)(v141 + 24);
    v143 = *(int *)(**(_QWORD **)a3 + 20);
    v145 = *(int *)(v23 + 8);
    v144 = *(int *)(v23 + 12);
    __Nc = *(int *)(v23 + 16);
    v146 = *(int *)(v29 + 8);
    v147 = *(_DWORD *)(v29 + 12);
    v148 = *(int *)(v29 + 16);
    v149 = *(char **)(v29 + 24);
    v150 = *(int **)(v23 + 24);
    v151 = v147 * (uint64_t)(int)v146;
    v152 = v151 * v148;
    if ((_DWORD)v135 == 3 && (_DWORD)v136 == 4)
    {
      if ((_DWORD)v132)
      {
        if ((_DWORD)v132 == 1)
        {
          if (!(_DWORD)v133 && (_DWORD)v134 == 2)
          {
            v305 = (int)__Nc * (uint64_t)(int)(v392 * v142);
            if (v305)
            {
              v306 = v28;
              v307 = 0;
              v308 = 4 * v147 * (uint64_t)(int)v146;
              do
              {
                vDSP_mtrans((const float *)((char *)v150 + v307), 1, (float *)&v149[v307], 1, v145, v144);
                v307 += v308;
                --v305;
              }
              while (v305);
              v28 = v306;
            }
            goto LABEL_537;
          }
        }
        else if ((_DWORD)v132 == 2)
        {
          if ((_DWORD)v134 || (_DWORD)v144 != 1)
          {
            if (!(_DWORD)v133 && (_DWORD)v134 == 1)
            {
              if ((_DWORD)v392)
              {
                v314 = 0;
                if (v145 <= 1)
                  v315 = 1;
                else
                  v315 = *(int *)(v23 + 8);
                if (v144 <= 1)
                  v316 = 1;
                else
                  v316 = *(int *)(v23 + 12);
                v317 = *(int *)(v23 + 16);
                if (__Nc <= 1)
                  v317 = 1;
                if (v142 <= 1)
                  v318 = 1;
                else
                  v318 = v142;
                v319 = v147 * (uint64_t)(int)v146;
                v320 = 4 * v319 * v148 * v143;
                v321 = 4 * v319 * v148;
                v322 = 4 * v319;
                v323 = 4 * v146;
                do
                {
                  if (v142)
                  {
                    v324 = 0;
                    v325 = v149;
                    do
                    {
                      if ((_DWORD)__Nc)
                      {
                        v326 = 0;
                        v327 = v325;
                        do
                        {
                          if ((_DWORD)v144)
                          {
                            v328 = 0;
                            v329 = v327;
                            do
                            {
                              v330 = v329;
                              v331 = v315;
                              if ((_DWORD)v145)
                              {
                                do
                                {
                                  v332 = *v150++;
                                  *v330 = v332;
                                  v330 = (_DWORD *)((char *)v330 + v323);
                                  --v331;
                                }
                                while (v331);
                              }
                              ++v328;
                              v329 = (_DWORD *)((char *)v329 + v322);
                            }
                            while (v328 != v316);
                          }
                          ++v326;
                          ++v327;
                        }
                        while (v326 != v317);
                      }
                      ++v324;
                      v325 += v321;
                    }
                    while (v324 != v318);
                  }
                  ++v314;
                  v149 += v320;
                }
                while (v314 != v392);
              }
              goto LABEL_537;
            }
          }
          else if ((_DWORD)v133 == 1)
          {
            if ((_DWORD)v392)
            {
              v153 = v28;
              v154 = 0;
              if (v142 <= 1)
                v155 = 1;
              else
                v155 = v142;
              v384 = v155;
              v156 = v147 * (uint64_t)(int)v146 * v148;
              v157 = 4 * v156 * v143;
              v158 = 4 * v156;
              do
              {
                if (v142)
                {
                  v159 = 0;
                  v160 = v384;
                  do
                  {
                    vDSP_mtrans((const float *)((char *)v150 + v159), 1, (float *)&v149[v159], 1, v145, __Nc);
                    v159 += v158;
                    --v160;
                  }
                  while (v160);
                }
                ++v154;
                v149 += v157;
                v150 = (int *)((char *)v150 + v157);
              }
              while (v154 != v392);
              v28 = v153;
            }
            goto LABEL_537;
          }
        }
      }
      else if ((_DWORD)v133 == 2 && (_DWORD)v134 == 1)
      {
        if ((_DWORD)v145 == 1)
        {
          if ((_DWORD)v392)
          {
            v309 = 0;
            if (v142 <= 1)
              v310 = 1;
            else
              v310 = v142;
            v311 = v310;
            do
            {
              if (v142)
              {
                v312 = 0;
                v313 = v311;
                do
                {
                  vDSP_mtrans((const float *)&v150[v312 / 4], 1, (float *)&v149[v312], 1, v144, __Nc);
                  v312 += 4 * (int)__Nc * (uint64_t)(int)v144;
                  --v313;
                }
                while (v313);
                v149 += v312;
                v150 = (int *)((char *)v150 + v312);
              }
              ++v309;
            }
            while (v309 != v392);
            v28 = v401;
          }
          goto LABEL_537;
        }
        if (!((_DWORD)v392 * v142))
        {
LABEL_537:
          if (v28)
          {
            v344 = (unint64_t *)&v28->__shared_owners_;
            do
              v345 = __ldaxr(v344);
            while (__stlxr(v345 - 1, v344));
            if (!v345)
            {
              v346 = v28;
              ((void (*)(void))v28->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v346);
            }
          }
          v207 = v402;
          if (!v402)
            goto LABEL_338;
          v347 = (unint64_t *)&v402->__shared_owners_;
          do
            v211 = __ldaxr(v347);
          while (__stlxr(v211 - 1, v347));
          goto LABEL_336;
        }
        v370 = v28;
        v374 = 0;
        v348 = 4 * v145;
        if (v144 <= 1)
          v349 = 1;
        else
          v349 = *(int *)(v23 + 12);
        v381 = v349;
        v350 = v147 * (uint64_t)(int)v146;
        v362 = 4 * v350 * v148;
        v366 = (int)(v392 * v142);
        v351 = *(int *)(v23 + 16);
        if (__Nc <= 1)
          v351 = 1;
        v378 = v351;
        v352 = 4 * v146;
        v353 = 4 * v350;
        do
        {
          if ((_DWORD)__Nc)
          {
            v354 = 0;
            v355 = (char *)&v150[v374 * v152];
            v356 = v149;
            do
            {
              v388 = v356;
              v396 = v354;
              v357 = v381;
              if ((_DWORD)v144)
              {
                do
                {
                  memcpy(v356, v355, v348);
                  v356 += v353;
                  v355 += v352;
                  --v357;
                }
                while (v357);
              }
              v354 = v396 + 1;
              v356 = &v388[v352];
            }
            while (v396 + 1 != v378);
          }
          v149 += v362;
          ++v374;
        }
        while (v374 != v366);
LABEL_536:
        v28 = v370;
        goto LABEL_537;
      }
    }
    if (!(_DWORD)v392)
      goto LABEL_537;
    v370 = v28;
    v333 = 0;
    v334 = v152 * v143;
    if (v145 <= 1)
      v335 = 1;
    else
      v335 = *(int *)(v23 + 8);
    if (v144 <= 1)
      v336 = 1;
    else
      v336 = *(int *)(v23 + 12);
    v337 = *(int *)(v23 + 16);
    if (__Nc <= 1)
      v337 = 1;
    if (v142 <= 1)
      v338 = 1;
    else
      v338 = v142;
    do
    {
      if (v142)
      {
        for (jj = 0; jj != v338; ++jj)
        {
          if ((_DWORD)__Nc)
          {
            v340 = 0;
            do
            {
              if ((_DWORD)v144)
              {
                v341 = 0;
                do
                {
                  if ((_DWORD)v145)
                  {
                    v342 = 0;
                    do
                    {
                      v418 = v342;
                      v419 = v341;
                      v420 = v340;
                      v421 = jj;
                      v422 = v333;
                      v343 = *v150++;
                      *(_DWORD *)&v149[4 * *(&v418 + v132)
                                     + 4 * *(&v418 + v133) * v146
                                     + 4 * *(&v418 + v134) * v151
                                     + 4 * *(&v418 + v135) * v152
                                     + 4 * *(&v418 + v136) * v334] = v343;
                      ++v342;
                    }
                    while (v335 != v342);
                  }
                  ++v341;
                }
                while (v341 != v336);
              }
              ++v340;
            }
            while (v340 != v337);
          }
        }
      }
      ++v333;
    }
    while (v333 != v392);
    goto LABEL_536;
  }
  v61 = a1[70];
  v62 = a1[71];
  v63 = a1[72];
  v64 = a1[73];
  v65 = a1[74];
  if (v367)
  {
    v66 = (unint64_t *)&v367->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  if (v363)
  {
    v68 = (unint64_t *)&v363->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v70 = **a4;
  v71 = *(_DWORD *)(v70 + 20);
  v390 = *(int *)(v70 + 24);
  v72 = *(int *)(**(_QWORD **)a3 + 20);
  v73 = *(int *)(v382 + 8);
  v74 = *(int *)(v382 + 12);
  __Na = *(int *)(v382 + 16);
  v76 = *(int *)(v19 + 8);
  v75 = *(_DWORD *)(v19 + 12);
  v77 = *(int *)(v19 + 16);
  v78 = *(char **)(v19 + 24);
  v79 = *(__int16 **)(v382 + 24);
  v80 = v75 * (uint64_t)(int)v76;
  v81 = v80 * v77;
  v82 = v80 * v77 * v72;
  if ((_DWORD)v64 != 3 || (_DWORD)v65 != 4)
    goto LABEL_239;
  if ((_DWORD)v61)
  {
    if ((_DWORD)v61 != 1)
    {
      if ((_DWORD)v61 == 2 && !(_DWORD)v63 && (_DWORD)v74 == 1 && (_DWORD)v62 == 1)
      {
        if ((_DWORD)v390)
        {
          v83 = 0;
          if (v73 <= 1)
            v84 = 1;
          else
            v84 = *(int *)(v382 + 8);
          if (__Na <= 1)
            v85 = 1;
          else
            v85 = *(int *)(v382 + 16);
          if (v71 <= 1)
            v86 = 1;
          else
            v86 = v71;
          v87 = v75 * (uint64_t)(int)v76;
          v88 = 2 * v87 * v77 * v72;
          v89 = 2 * v87 * v77;
          v90 = 2 * v87;
          do
          {
            if (v71)
            {
              v91 = 0;
              v92 = v78;
              do
              {
                if ((_DWORD)__Na)
                {
                  v93 = 0;
                  v94 = &v79[v83 * v82 + v91 * v81];
                  v95 = v92;
                  do
                  {
                    v96 = v95;
                    v97 = v84;
                    if ((_DWORD)v73)
                    {
                      do
                      {
                        v98 = *v94++;
                        *v96 = v98;
                        v96 = (_WORD *)((char *)v96 + v90);
                        --v97;
                      }
                      while (v97);
                    }
                    ++v93;
                    ++v95;
                  }
                  while (v93 != v85);
                }
                ++v91;
                v92 = (_WORD *)((char *)v92 + v89);
              }
              while (v91 != v86);
            }
            ++v83;
            v78 += v88;
          }
          while (v83 != v390);
        }
        goto LABEL_265;
      }
      goto LABEL_239;
    }
    if (!(_DWORD)v62 && (_DWORD)v63 == 2)
    {
      v174 = (int)__Na * (uint64_t)(int)(v390 * v71);
      if (v174)
      {
        v175 = 0;
        if (v73 <= 1)
          v176 = 1;
        else
          v176 = *(int *)(v382 + 8);
        if (v74 <= 1)
          v177 = 1;
        else
          v177 = *(int *)(v382 + 12);
        v178 = 2 * v75 * (uint64_t)(int)v76;
        v179 = 2 * v76;
        do
        {
          if ((_DWORD)v74)
          {
            v180 = 0;
            v181 = &v79[v175 * v80];
            v182 = v78;
            do
            {
              v183 = v182;
              v184 = v176;
              if ((_DWORD)v73)
              {
                do
                {
                  v185 = *v181++;
                  *v183 = v185;
                  v183 = (_WORD *)((char *)v183 + v179);
                  --v184;
                }
                while (v184);
              }
              ++v180;
              ++v182;
            }
            while (v180 != v177);
          }
          ++v175;
          v78 += v178;
        }
        while (v175 != v174);
      }
      goto LABEL_265;
    }
LABEL_239:
    if ((_DWORD)v390)
    {
      v197 = 0;
      if (v73 <= 1)
        v198 = 1;
      else
        v198 = *(int *)(v382 + 8);
      if (v74 <= 1)
        v199 = 1;
      else
        v199 = *(int *)(v382 + 12);
      if (__Na <= 1)
        v200 = 1;
      else
        v200 = *(int *)(v382 + 16);
      if (v71 <= 1)
        v201 = 1;
      else
        v201 = v71;
      do
      {
        if (v71)
        {
          for (kk = 0; kk != v201; ++kk)
          {
            if ((_DWORD)__Na)
            {
              v203 = 0;
              do
              {
                if ((_DWORD)v74)
                {
                  v204 = 0;
                  do
                  {
                    if ((_DWORD)v73)
                    {
                      v205 = 0;
                      do
                      {
                        v418 = v205;
                        v419 = v204;
                        v420 = v203;
                        v421 = kk;
                        v422 = v197;
                        v206 = *v79++;
                        *(_WORD *)&v78[2 * *(&v418 + v61)
                                     + 2 * *(&v418 + v62) * v76
                                     + 2 * *(&v418 + v63) * v80
                                     + 2 * *(&v418 + v64) * v81
                                     + 2 * *(&v418 + v65) * v82] = v206;
                        ++v205;
                      }
                      while (v198 != v205);
                    }
                    ++v204;
                  }
                  while (v204 != v199);
                }
                ++v203;
              }
              while (v203 != v200);
            }
          }
        }
        ++v197;
      }
      while (v197 != v390);
    }
    goto LABEL_265;
  }
  if ((_DWORD)v62 != 2 || (_DWORD)v63 != 1)
    goto LABEL_239;
  v186 = v390 * v71;
  if (v186)
  {
    v187 = 2 * v73;
    if (v74 <= 1)
      v188 = 1;
    else
      v188 = *(int *)(v382 + 12);
    v379 = v188;
    v189 = v75 * (uint64_t)(int)v76;
    v358 = 2 * v189 * v77;
    v359 = v186;
    v190 = *(int *)(v382 + 16);
    if (__Na <= 1)
      v190 = 1;
    v372 = 0;
    v375 = v190;
    v191 = 2 * v76;
    v192 = 2 * v189;
    do
    {
      if ((_DWORD)__Na)
      {
        v193 = 0;
        v194 = (char *)&v79[v372 * v81];
        v195 = v78;
        do
        {
          v385 = v195;
          v393 = v193;
          v196 = v379;
          if ((_DWORD)v74)
          {
            do
            {
              memcpy(v195, v194, v187);
              v195 += v192;
              v194 += v191;
              --v196;
            }
            while (v196);
          }
          v193 = v393 + 1;
          v195 = &v385[v191];
        }
        while (v393 + 1 != v375);
      }
      v78 += v358;
      ++v372;
    }
    while (v372 != v359);
  }
LABEL_265:
  v207 = v367;
  if (v363)
  {
    v208 = (unint64_t *)&v363->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  if (v367)
  {
    v210 = (unint64_t *)&v367->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    goto LABEL_336;
  }
LABEL_338:
  if (v404)
  {
    v245 = (unint64_t *)&v404->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
      std::__shared_weak_count::__release_weak(v404);
    }
  }
  if (v405)
  {
    v247 = (unint64_t *)&v405->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
      std::__shared_weak_count::__release_weak(v405);
    }
  }
  v249 = v407;
  if (v407)
  {
    v250 = (unint64_t *)&v407->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = v409;
  if (v409)
  {
    v253 = (unint64_t *)&v409->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = v411;
  if (v411)
  {
    v256 = (unint64_t *)&v411->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = v413;
  if (v413)
  {
    v259 = (unint64_t *)&v413->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  v261 = v415;
  if (v415)
  {
    v262 = (unint64_t *)&v415->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = v417;
  if (v417)
  {
    v265 = (unint64_t *)&v417->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
}

void sub_190E83180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 176);
  _Unwind_Resume(a1);
}

void Espresso::copy_kernel_cpu::__compute(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  v2 = *a1;
  v3 = a1[1];
  if (v3 - *a1 != a2[1] - *a2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Copy: mismatching blob count");
  if (v3 != v2)
  {
    v6 = 0;
    do
    {
      v7 = *(_OWORD *)(v2 + 16 * v6);
      v20 = v7;
      if (*((_QWORD *)&v7 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = *(_OWORD *)(*a2 + 16 * v6);
      v19 = v10;
      if (*((_QWORD *)&v10 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      Espresso::copy_kernel_cpu::__compute_blob((uint64_t *)&v20, (uint64_t *)&v19);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      ++v6;
      v2 = *a1;
    }
    while (v6 < (a1[1] - *a1) >> 4);
  }
}

void sub_190E83384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *a2;
  if (*a2
    && ((result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result), (_DWORD)result == 2)
     || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2), (_DWORD)result == 4)))
  {
    v5 = *(_QWORD *)(*a2 + 200);
    *a1 = *(_QWORD *)(*a2 + 192);
    a1[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void Espresso::BNNSEngine::inner_product_kernel::__launch_non_quantized(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, size_t a5, size_t a6, size_t a7)
{
  uint64_t v12;
  _QWORD *v13;
  int v14;
  void *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  size_t v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  vDSP_Length v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  void *bnns;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  size_t v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  __int16 *v105;
  __int16 *v106;
  uint64_t v107;
  __int16 v108;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  void *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  size_t v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  __int16 *v135;
  __int16 *v136;
  uint64_t v137;
  __int16 v138;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  void *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  size_t v155;
  size_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  vDSP_Length v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  int v168;
  int v169;
  BOOL v170;
  void *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  size_t v177;
  size_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  vDSP_Length v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  void *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  size_t v202;
  size_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  __int16 *v208;
  __int16 *v209;
  uint64_t v210;
  __int16 v211;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  void *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  size_t v228;
  size_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  vDSP_Length v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  void *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  size_t v246;
  size_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  __int16 *v252;
  __int16 *v253;
  uint64_t v254;
  __int16 v255;
  unint64_t *v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t *v265;
  uint64_t v266;
  void *v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  size_t v273;
  size_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  vDSP_Length v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t *v283;
  void *v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  size_t v290;
  size_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  vDSP_Length v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t *v300;
  void *v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  size_t v307;
  size_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  __int16 *v313;
  __int16 *v314;
  uint64_t v315;
  __int16 v316;
  unint64_t *v322;
  unint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t *v326;
  void *v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  size_t v333;
  size_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  __int16 *v339;
  __int16 *v340;
  uint64_t v341;
  __int16 v342;
  unint64_t *v348;
  unint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t *v352;
  void *v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  size_t v359;
  size_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  vDSP_Length v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t *v369;
  void *v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  size_t v376;
  size_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  vDSP_Length v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t *v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _WORD *v403;
  _WORD *v404;
  uint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  void *v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  size_t v414;
  size_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  __int16 *v420;
  __int16 *v421;
  uint64_t v422;
  __int16 v423;
  unint64_t *v429;
  unint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  unint64_t *v433;
  void *v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  size_t v440;
  size_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  __int16 *v446;
  __int16 *v447;
  uint64_t v448;
  __int16 v449;
  unint64_t *v455;
  unint64_t v456;
  unint64_t *v457;
  unint64_t v458;
  unint64_t *v459;
  unint64_t *v460;
  unint64_t v461;
  unint64_t *v462;
  unint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  unint64_t *v466;
  unint64_t v467;
  unint64_t *v468;
  unint64_t v469;
  unint64_t *v470;
  unint64_t v471;
  unint64_t *v472;
  unint64_t v473;
  std::string *v474;
  std::string *v475;
  std::string *v476;
  std::string *v477;
  std::string *v478;
  std::string *v479;
  std::string *v480;
  std::string *v481;
  std::string *v482;
  std::string *v483;
  std::string *v484;
  std::string *v485;
  std::string *v486;
  std::string *v487;
  std::string *v488;
  std::string *v489;
  uint64_t v491;
  std::__shared_weak_count *v492;
  __int128 v493;
  uint64_t v494;
  std::__shared_weak_count *v495;
  __int128 v496;
  std::string v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  int v507;

  v12 = *(_QWORD *)(a1 + 560);
  if (!v12)
  {
    v13 = (_QWORD *)*a4;
    v16 = a4[1] - *a4;
    if (*(_QWORD *)(a1 + 688))
      _ZF = 0;
    else
      _ZF = v16 == 16;
    if (_ZF)
    {
      if (!*(_QWORD *)(a1 + 704) && !*(_QWORD *)(a1 + 512) && !*(_QWORD *)(a1 + 528))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel: Weights not set");
    }
    else if (v16 > 0x10)
    {
      goto LABEL_9;
    }
    v24 = *(_QWORD *)(a1 + 512);
    if (v24)
    {
      v15 = *(void **)(v24 + 16);
      v14 = 1;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v13 = (_QWORD *)*a4;
  if (a4[1] - *a4 >= 0x11uLL)
  {
LABEL_9:
    v18 = v13[2];
    if (v18 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18))
    {
      v19 = v13[2];
      v20 = *(_QWORD *)(v19 + 160);
      v21 = *(std::__shared_weak_count **)(v19 + 168);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      if (v20)
      {
        v15 = *(void **)(v20 + 24);
        if (!v21)
          goto LABEL_479;
      }
      else
      {
        v15 = 0;
        if (!v21)
        {
LABEL_479:
          v14 = 0;
          goto LABEL_23;
        }
      }
      v406 = (unint64_t *)&v21->__shared_owners_;
      do
        v407 = __ldaxr(v406);
      while (__stlxr(v407 - 1, v406));
      if (!v407)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      goto LABEL_479;
    }
LABEL_22:
    v14 = 0;
    v15 = 0;
    goto LABEL_23;
  }
  v14 = 0;
  v15 = *(void **)(v12 + 16);
LABEL_23:
  v25 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3
    && *v25
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v25 + 32))(*v25) == 1)
  {
    v26 = *v25;
    v28 = *(_QWORD *)(*v25 + 176);
    v27 = *(_QWORD *)(v26 + 184);
    *(_QWORD *)&v496 = v28;
    *((_QWORD *)&v496 + 1) = v27;
    if (v27)
    {
      v29 = (unint64_t *)(v27 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
  }
  else
  {
    v28 = 0;
    v496 = 0uLL;
  }
  v31 = (_QWORD *)*a4;
  if (a4[1] != *a4 && *v31 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v31 + 32))(*v31) == 1)
  {
    v32 = *(_QWORD *)(*v31 + 176);
    v33 = *(std::__shared_weak_count **)(*v31 + 184);
    v494 = v32;
    v495 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = v32 != 0;
    if (v32)
    {
      if (v28)
      {
        v37 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v37 + 116) || *(_BYTE *)(v37 + 122))
          *(_DWORD *)(a1 + 420) = 1;
      }
    }
    if (v15)
      goto LABEL_45;
  }
  else
  {
    v36 = 0;
    v32 = 0;
    v494 = 0;
    v495 = 0;
    if (v15)
    {
LABEL_45:
      v38 = 0;
      goto LABEL_46;
    }
  }
  v55 = (_QWORD *)*a4;
  if (a4[1] - *a4 < 0x11uLL)
  {
    v167 = *(_QWORD *)(a1 + 688);
    if (!v167)
    {
      v266 = *(_QWORD *)(a1 + 704);
      if (!v266)
      {
        v266 = *(_QWORD *)(a1 + 528);
        if (!v266)
          goto LABEL_45;
      }
      v38 = *(void **)(v266 + 16);
LABEL_473:
      v14 = 1;
      goto LABEL_46;
    }
    v38 = *(void **)(v167 + 16);
    if (*(_DWORD *)(a1 + 420))
    {
      v169 = *(_DWORD *)(v167 + 8);
      v168 = *(_DWORD *)(v167 + 12);
      if ((unint64_t)(2 * v169 * (uint64_t)v168) >= 0x600001)
      {
        v170 = 1;
LABEL_454:
        if (!v36)
          goto LABEL_46;
        v388 = 0;
        v389 = *(int *)(v32 + 8);
        v390 = v32 + 12;
        do
        {
          v389 *= *(int *)(v390 + v388);
          v388 += 4;
        }
        while (v388 != 12);
        if ((unint64_t)(2 * v389) >= 0xC01 || !v170)
          goto LABEL_46;
      }
    }
    else
    {
      v387 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 68);
      v170 = v387 != 0;
      v169 = *(_DWORD *)(v167 + 8);
      v168 = *(_DWORD *)(v167 + 12);
      if ((unint64_t)(2 * v169 * (uint64_t)v168) >= 0x600001)
        goto LABEL_454;
      if (!v387)
        goto LABEL_46;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(&v499, v168, v169, 1, 1);
    v392 = a1 + 704;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 704, &v499);
    v393 = (std::__shared_weak_count *)*((_QWORD *)&v499 + 1);
    if (*((_QWORD *)&v499 + 1))
    {
      v394 = (unint64_t *)(*((_QWORD *)&v499 + 1) + 8);
      do
        v395 = __ldaxr(v394);
      while (__stlxr(v395 - 1, v394));
      if (!v395)
      {
        ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
        std::__shared_weak_count::__release_weak(v393);
      }
    }
    v396 = (_QWORD *)(a1 + 688);
    v397 = *(_QWORD *)v392;
    v398 = *(unsigned int *)(*(_QWORD *)v392 + 12);
    if ((int)v398 >= 1)
    {
      v399 = 0;
      v400 = 0;
      v401 = 0;
      v402 = *(unsigned int *)(v397 + 8);
      do
      {
        if ((int)v402 >= 1)
        {
          v403 = (_WORD *)(*(_QWORD *)(v397 + 16) + v400);
          v404 = (_WORD *)(*(_QWORD *)(*v396 + 16) + v399);
          v405 = v402;
          do
          {
            *v403++ = *v404;
            v404 += v398;
            --v405;
          }
          while (v405);
        }
        ++v401;
        v400 += 2 * (int)v402;
        v399 += 2;
      }
      while (v401 != v398);
    }
    v38 = *(void **)(v397 + 16);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v396);
    goto LABEL_473;
  }
  v56 = v55[2];
  if (!v56 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56) != 1)
    goto LABEL_45;
  v57 = v55[2];
  v58 = *(_QWORD *)(v57 + 176);
  v59 = *(std::__shared_weak_count **)(v57 + 184);
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  if (v58)
    v38 = *(void **)(v58 + 24);
  else
    v38 = 0;
  if (v59)
  {
    v472 = (unint64_t *)&v59->__shared_owners_;
    do
      v473 = __ldaxr(v472);
    while (__stlxr(v473 - 1, v472));
    if (!v473)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_46:
  v39 = (_QWORD *)*a4;
  if (a4[1] - *a4 < 0x21uLL)
  {
    if (!*(_DWORD *)(a1 + 312))
      goto LABEL_78;
    v47 = *(_QWORD *)(a1 + 544);
    if (!v47)
      goto LABEL_76;
    v46 = *(std::__shared_weak_count **)(v47 + 16);
    goto LABEL_58;
  }
  v40 = v39[4];
  if (!v40 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40))
    goto LABEL_59;
  v41 = v39[4];
  v42 = *(_QWORD *)(v41 + 160);
  v43 = *(std::__shared_weak_count **)(v41 + 168);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  if (v42)
  {
    v46 = *(std::__shared_weak_count **)(v42 + 24);
    if (!v43)
      goto LABEL_58;
  }
  else
  {
    v46 = 0;
    if (!v43)
      goto LABEL_58;
  }
  v468 = (unint64_t *)&v43->__shared_owners_;
  do
    v469 = __ldaxr(v468);
  while (__stlxr(v469 - 1, v468));
  if (!v469)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
LABEL_58:
  if (v46)
  {
LABEL_79:
    v54 = 0;
    goto LABEL_80;
  }
LABEL_59:
  v48 = (_QWORD *)*a4;
  if (a4[1] - *a4 < 0x21uLL)
  {
    if (*(_DWORD *)(a1 + 312))
    {
LABEL_76:
      v62 = *(_QWORD *)(a1 + 720);
      if (v62)
      {
        v46 = 0;
        v54 = *(void **)(v62 + 16);
        goto LABEL_80;
      }
    }
LABEL_78:
    v46 = 0;
    goto LABEL_79;
  }
  v49 = v48[4];
  if (!v49 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49) != 1)
    goto LABEL_78;
  v50 = v48[4];
  v51 = *(_QWORD *)(v50 + 176);
  v46 = *(std::__shared_weak_count **)(v50 + 184);
  if (v46)
  {
    v52 = (unint64_t *)&v46->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  if (v51)
    v54 = *(void **)(v51 + 24);
  else
    v54 = 0;
  if (v46)
  {
    v470 = (unint64_t *)&v46->__shared_owners_;
    do
      v471 = __ldaxr(v470);
    while (__stlxr(v471 - 1, v470));
    if (!v471)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    v46 = 0;
  }
LABEL_80:
  v63 = *(void **)(a1 + 912);
  if (v63)
  {
    v64 = *(void **)(a1 + 920);
    if (v15 != v64 && v38 != v64)
    {
      BNNSFilterDestroy(v63);
      *(_QWORD *)(a1 + 912) = 0;
    }
  }
  v67 = a3;
  v66 = *(_QWORD **)a3;
  if (*(_QWORD **)(v67 + 8) == v66 || !*v66 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v66 + 32))(*v66))
  {
    v68 = 0;
    v493 = 0uLL;
  }
  else
  {
    v189 = *v66;
    v68 = *(_QWORD *)(*v66 + 160);
    v190 = *(_QWORD *)(v189 + 168);
    *(_QWORD *)&v493 = v68;
    *((_QWORD *)&v493 + 1) = v190;
    if (v190)
    {
      v191 = (unint64_t *)(v190 + 8);
      do
        v192 = __ldxr(v191);
      while (__stxr(v192 + 1, v191));
    }
  }
  v70 = a4;
  v69 = (_QWORD *)*a4;
  if ((_QWORD *)v70[1] == v69 || !*v69 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v69 + 32))(*v69))
  {
    v71 = 0;
    v491 = 0;
    v492 = 0;
  }
  else
  {
    v71 = *(_QWORD *)(*v69 + 160);
    v193 = *(std::__shared_weak_count **)(*v69 + 168);
    v491 = v71;
    v492 = v193;
    if (v193)
    {
      v194 = (unint64_t *)&v193->__shared_owners_;
      do
        v195 = __ldxr(v194);
      while (__stxr(v195 + 1, v194));
    }
  }
  if (!v15)
    goto LABEL_150;
  if (!v68 || !v71)
  {
    v92 = v496;
    if ((_QWORD)v496 && v494)
    {
      if (v14)
      {
        if (v54)
        {
          bnns = *(void **)(a1 + 912);
          if (!bnns)
          {
            v94 = *(_OWORD *)(a1 + 384);
            v95 = *(_OWORD *)(a1 + 416);
            v505 = *(_OWORD *)(a1 + 400);
            v506 = v95;
            v96 = *(_OWORD *)(a1 + 320);
            v97 = *(_OWORD *)(a1 + 352);
            v98 = *(_OWORD *)(a1 + 368);
            v501 = *(_OWORD *)(a1 + 336);
            v502 = v97;
            *(_QWORD *)(a1 + 920) = v15;
            v99 = *(unsigned int *)(a1 + 308);
            v100 = *(unsigned int *)(a1 + 304);
            v507 = *(_DWORD *)(a1 + 432);
            v503 = v98;
            v504 = v94;
            v499 = *(_OWORD *)(a1 + 304);
            v500 = v96;
            bnns = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v99, v100, (uint64_t)&v499, v15, v54, BNNSDataTypeFloat16, BNNSDataTypeFloat32, 65552, BNNSDataTypeFloat16, *(_QWORD *)(a1 + 976));
            *(_QWORD *)(a1 + 912) = bnns;
            v92 = v496;
          }
          v498 = 0uLL;
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v497, v92 + 8);
            v101 = 0;
            v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
            v102 = *(int *)(v92 + 8);
            do
            {
              v102 *= *(int *)(v92 + 12 + v101);
              v101 += 4;
            }
            while (v101 != 12);
            memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v92 + 24), 2 * v102);
            bnns = *(void **)(a1 + 912);
          }
          v103 = BNNSFilterApplyBatch(bnns, a5, *(const void **)(v494 + 24), a7, *(void **)(v92 + 24), a6);
          if (v103)
          {
            std::to_string(&v497, v103);
            if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v486 = &v497;
            else
              v486 = (std::string *)v497.__r_.__value_.__r.__words[0];
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v486);
          }
          if (*(_DWORD *)(a1 + 348))
          {
            v104 = 0;
            v105 = *(__int16 **)(v498 + 24);
            v106 = *(__int16 **)(v496 + 24);
            v107 = *(int *)(v496 + 8);
            do
            {
              v107 *= *(int *)(v496 + 12 + v104);
              v104 += 4;
            }
            while (v104 != 12);
            for (; v107; --v107)
            {
              v108 = *v105++;
              _H0 = v108;
              _H1 = *v106;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 + _S1;
              __asm { FCVT            H0, S0 }
              *v106++ = LOWORD(_S0);
            }
          }
          *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v496;
          if (*((_QWORD *)&v496 + 1))
          {
            v117 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v118 = __ldxr(v117);
            while (__stxr(v118 + 1, v117));
          }
          Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,unsigned short>(a1, v496, (__int16 *)v54, a5, a6);
          if (*((_QWORD *)&v496 + 1))
          {
            v119 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
            }
          }
          v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
          if (!*((_QWORD *)&v498 + 1))
            goto LABEL_529;
          v121 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
          do
            v91 = __ldaxr(v121);
          while (__stlxr(v91 - 1, v121));
        }
        else
        {
          v408 = *(void **)(a1 + 912);
          if (!v408)
          {
            v409 = *(_OWORD *)(a1 + 384);
            v410 = *(_OWORD *)(a1 + 416);
            v505 = *(_OWORD *)(a1 + 400);
            v506 = v410;
            v411 = *(_OWORD *)(a1 + 320);
            v412 = *(_OWORD *)(a1 + 352);
            v413 = *(_OWORD *)(a1 + 368);
            v501 = *(_OWORD *)(a1 + 336);
            v502 = v412;
            *(_QWORD *)(a1 + 920) = v15;
            v414 = *(unsigned int *)(a1 + 308);
            v415 = *(unsigned int *)(a1 + 304);
            v507 = *(_DWORD *)(a1 + 432);
            v503 = v413;
            v504 = v409;
            v499 = *(_OWORD *)(a1 + 304);
            v500 = v411;
            v408 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v414, v415, (uint64_t)&v499, v15, v46, BNNSDataTypeFloat16, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat16, *(_QWORD *)(a1 + 976));
            *(_QWORD *)(a1 + 912) = v408;
            v92 = v496;
          }
          v498 = 0uLL;
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v497, v92 + 8);
            v416 = 0;
            v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
            v417 = *(int *)(v92 + 8);
            do
            {
              v417 *= *(int *)(v92 + 12 + v416);
              v416 += 4;
            }
            while (v416 != 12);
            memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v92 + 24), 2 * v417);
            v408 = *(void **)(a1 + 912);
          }
          v418 = BNNSFilterApplyBatch(v408, a5, *(const void **)(v494 + 24), a7, *(void **)(v92 + 24), a6);
          if (v418)
          {
            std::to_string(&v497, v418);
            if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v488 = &v497;
            else
              v488 = (std::string *)v497.__r_.__value_.__r.__words[0];
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v488);
          }
          if (*(_DWORD *)(a1 + 348))
          {
            v419 = 0;
            v420 = *(__int16 **)(v498 + 24);
            v421 = *(__int16 **)(v496 + 24);
            v422 = *(int *)(v496 + 8);
            do
            {
              v422 *= *(int *)(v496 + 12 + v419);
              v419 += 4;
            }
            while (v419 != 12);
            for (; v422; --v422)
            {
              v423 = *v420++;
              _H0 = v423;
              _H1 = *v421;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 + _S1;
              __asm { FCVT            H0, S0 }
              *v421++ = LOWORD(_S0);
            }
          }
          *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v496;
          if (*((_QWORD *)&v496 + 1))
          {
            v429 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v430 = __ldxr(v429);
            while (__stxr(v430 + 1, v429));
          }
          Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,float>(a1, v496, (float *)v46, a5, a6);
          if (*((_QWORD *)&v496 + 1))
          {
            v431 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v432 = __ldaxr(v431);
            while (__stlxr(v432 - 1, v431));
            if (!v432)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
            }
          }
          v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
          if (!*((_QWORD *)&v498 + 1))
            goto LABEL_529;
          v433 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
          do
            v91 = __ldaxr(v433);
          while (__stlxr(v91 - 1, v433));
        }
      }
      else if (v54)
      {
        v240 = *(void **)(a1 + 912);
        if (!v240)
        {
          v241 = *(_OWORD *)(a1 + 384);
          v242 = *(_OWORD *)(a1 + 416);
          v505 = *(_OWORD *)(a1 + 400);
          v506 = v242;
          v243 = *(_OWORD *)(a1 + 320);
          v244 = *(_OWORD *)(a1 + 352);
          v245 = *(_OWORD *)(a1 + 368);
          v501 = *(_OWORD *)(a1 + 336);
          v502 = v244;
          *(_QWORD *)(a1 + 920) = v15;
          v246 = *(unsigned int *)(a1 + 308);
          v247 = *(unsigned int *)(a1 + 304);
          v507 = *(_DWORD *)(a1 + 432);
          v503 = v245;
          v504 = v241;
          v499 = *(_OWORD *)(a1 + 304);
          v500 = v243;
          v240 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v246, v247, (uint64_t)&v499, v15, v54, BNNSDataTypeFloat16, BNNSDataTypeFloat32, 65552, BNNSDataTypeFloat16, *(_QWORD *)(a1 + 976));
          *(_QWORD *)(a1 + 912) = v240;
          v92 = v496;
        }
        v498 = 0uLL;
        if (*(_DWORD *)(a1 + 348))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v497, v92 + 8);
          v248 = 0;
          v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
          v249 = *(int *)(v92 + 8);
          do
          {
            v249 *= *(int *)(v92 + 12 + v248);
            v248 += 4;
          }
          while (v248 != 12);
          memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v92 + 24), 2 * v249);
          v240 = *(void **)(a1 + 912);
        }
        v250 = BNNSFilterApplyBatch(v240, a5, *(const void **)(v494 + 24), a7, *(void **)(v92 + 24), a6);
        if (v250)
        {
          std::to_string(&v497, v250);
          if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v487 = &v497;
          else
            v487 = (std::string *)v497.__r_.__value_.__r.__words[0];
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v487);
        }
        if (*(_DWORD *)(a1 + 348))
        {
          v251 = 0;
          v252 = *(__int16 **)(v498 + 24);
          v253 = *(__int16 **)(v496 + 24);
          v254 = *(int *)(v496 + 8);
          do
          {
            v254 *= *(int *)(v496 + 12 + v251);
            v251 += 4;
          }
          while (v251 != 12);
          for (; v254; --v254)
          {
            v255 = *v252++;
            _H0 = v255;
            _H1 = *v253;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            _S0 = _S0 + _S1;
            __asm { FCVT            H0, S0 }
            *v253++ = LOWORD(_S0);
          }
        }
        *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v496;
        if (*((_QWORD *)&v496 + 1))
        {
          v261 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
          do
            v262 = __ldxr(v261);
          while (__stxr(v262 + 1, v261));
        }
        Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,unsigned short>(a1, v496, (__int16 *)v54, a5, a6);
        if (*((_QWORD *)&v496 + 1))
        {
          v263 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
          do
            v264 = __ldaxr(v263);
          while (__stlxr(v264 - 1, v263));
          if (!v264)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
          }
        }
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
        if (!*((_QWORD *)&v498 + 1))
          goto LABEL_529;
        v265 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
        do
          v91 = __ldaxr(v265);
        while (__stlxr(v91 - 1, v265));
      }
      else
      {
        v434 = *(void **)(a1 + 912);
        if (!v434)
        {
          v435 = *(_OWORD *)(a1 + 384);
          v436 = *(_OWORD *)(a1 + 416);
          v505 = *(_OWORD *)(a1 + 400);
          v506 = v436;
          v437 = *(_OWORD *)(a1 + 320);
          v438 = *(_OWORD *)(a1 + 352);
          v439 = *(_OWORD *)(a1 + 368);
          v501 = *(_OWORD *)(a1 + 336);
          v502 = v438;
          *(_QWORD *)(a1 + 920) = v15;
          v440 = *(unsigned int *)(a1 + 308);
          v441 = *(unsigned int *)(a1 + 304);
          v507 = *(_DWORD *)(a1 + 432);
          v503 = v439;
          v504 = v435;
          v499 = *(_OWORD *)(a1 + 304);
          v500 = v437;
          v434 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v440, v441, (uint64_t)&v499, v15, v46, BNNSDataTypeFloat16, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat16, *(_QWORD *)(a1 + 976));
          *(_QWORD *)(a1 + 912) = v434;
          v92 = v496;
        }
        v498 = 0uLL;
        if (*(_DWORD *)(a1 + 348))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v497, v92 + 8);
          v442 = 0;
          v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
          v443 = *(int *)(v92 + 8);
          do
          {
            v443 *= *(int *)(v92 + 12 + v442);
            v442 += 4;
          }
          while (v442 != 12);
          memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v92 + 24), 2 * v443);
          v434 = *(void **)(a1 + 912);
        }
        v444 = BNNSFilterApplyBatch(v434, a5, *(const void **)(v494 + 24), a7, *(void **)(v92 + 24), a6);
        if (v444)
        {
          std::to_string(&v497, v444);
          if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v489 = &v497;
          else
            v489 = (std::string *)v497.__r_.__value_.__r.__words[0];
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v489);
        }
        if (*(_DWORD *)(a1 + 348))
        {
          v445 = 0;
          v446 = *(__int16 **)(v498 + 24);
          v447 = *(__int16 **)(v496 + 24);
          v448 = *(int *)(v496 + 8);
          do
          {
            v448 *= *(int *)(v496 + 12 + v445);
            v445 += 4;
          }
          while (v445 != 12);
          for (; v448; --v448)
          {
            v449 = *v446++;
            _H0 = v449;
            _H1 = *v447;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            _S0 = _S0 + _S1;
            __asm { FCVT            H0, S0 }
            *v447++ = LOWORD(_S0);
          }
        }
        *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v496;
        if (*((_QWORD *)&v496 + 1))
        {
          v455 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
          do
            v456 = __ldxr(v455);
          while (__stxr(v456 + 1, v455));
        }
        Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,float>(a1, v496, (float *)v46, a5, a6);
        if (*((_QWORD *)&v496 + 1))
        {
          v457 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
          do
            v458 = __ldaxr(v457);
          while (__stlxr(v458 - 1, v457));
          if (!v458)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
          }
        }
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
        if (!*((_QWORD *)&v498 + 1))
          goto LABEL_529;
        v459 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
        do
          v91 = __ldaxr(v459);
        while (__stlxr(v91 - 1, v459));
      }
      goto LABEL_527;
    }
LABEL_150:
    if (v38)
    {
      v122 = v496;
      if ((_QWORD)v496 && v494)
      {
        if (v14)
        {
          if (v54)
          {
            v123 = *(void **)(a1 + 912);
            if (!v123)
            {
              v124 = *(_OWORD *)(a1 + 384);
              v125 = *(_OWORD *)(a1 + 416);
              v505 = *(_OWORD *)(a1 + 400);
              v506 = v125;
              v126 = *(_OWORD *)(a1 + 320);
              v127 = *(_OWORD *)(a1 + 352);
              v128 = *(_OWORD *)(a1 + 368);
              v501 = *(_OWORD *)(a1 + 336);
              v502 = v127;
              *(_QWORD *)(a1 + 920) = v38;
              v129 = *(unsigned int *)(a1 + 308);
              v130 = *(unsigned int *)(a1 + 304);
              v507 = *(_DWORD *)(a1 + 432);
              v503 = v128;
              v504 = v124;
              v499 = *(_OWORD *)(a1 + 304);
              v500 = v126;
              v123 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v129, v130, (uint64_t)&v499, v38, v54, BNNSDataTypeFloat16, BNNSDataTypeFloat16, 65552, BNNSDataTypeFloat16, *(_QWORD *)(a1 + 976));
              *(_QWORD *)(a1 + 912) = v123;
              v122 = v496;
            }
            v498 = 0uLL;
            if (*(_DWORD *)(a1 + 348))
            {
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v497, v122 + 8);
              v131 = 0;
              v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
              v132 = *(int *)(v122 + 8);
              do
              {
                v132 *= *(int *)(v122 + 12 + v131);
                v131 += 4;
              }
              while (v131 != 12);
              memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v122 + 24), 2 * v132);
              v123 = *(void **)(a1 + 912);
            }
            v133 = BNNSFilterApplyBatch(v123, a5, *(const void **)(v494 + 24), a7, *(void **)(v122 + 24), a6);
            if (v133)
            {
              std::to_string(&v497, v133);
              if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v476 = &v497;
              else
                v476 = (std::string *)v497.__r_.__value_.__r.__words[0];
              Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v476);
            }
            if (*(_DWORD *)(a1 + 348))
            {
              v134 = 0;
              v135 = *(__int16 **)(v498 + 24);
              v136 = *(__int16 **)(v496 + 24);
              v137 = *(int *)(v496 + 8);
              do
              {
                v137 *= *(int *)(v496 + 12 + v134);
                v134 += 4;
              }
              while (v134 != 12);
              for (; v137; --v137)
              {
                v138 = *v135++;
                _H0 = v138;
                _H1 = *v136;
                __asm
                {
                  FCVT            S1, H1
                  FCVT            S0, H0
                }
                _S0 = _S0 + _S1;
                __asm { FCVT            H0, S0 }
                *v136++ = LOWORD(_S0);
              }
            }
            *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v496;
            if (*((_QWORD *)&v496 + 1))
            {
              v144 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
            }
            Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,unsigned short>(a1, v496, (__int16 *)v54, a5, a6);
            if (*((_QWORD *)&v496 + 1))
            {
              v146 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
              do
                v147 = __ldaxr(v146);
              while (__stlxr(v147 - 1, v146));
              if (!v147)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
              }
            }
            v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
            if (!*((_QWORD *)&v498 + 1))
              goto LABEL_529;
            v148 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
            do
              v91 = __ldaxr(v148);
            while (__stlxr(v91 - 1, v148));
          }
          else
          {
            v301 = *(void **)(a1 + 912);
            if (!v301)
            {
              v302 = *(_OWORD *)(a1 + 384);
              v303 = *(_OWORD *)(a1 + 416);
              v505 = *(_OWORD *)(a1 + 400);
              v506 = v303;
              v304 = *(_OWORD *)(a1 + 320);
              v305 = *(_OWORD *)(a1 + 352);
              v306 = *(_OWORD *)(a1 + 368);
              v501 = *(_OWORD *)(a1 + 336);
              v502 = v305;
              *(_QWORD *)(a1 + 920) = v38;
              v307 = *(unsigned int *)(a1 + 308);
              v308 = *(unsigned int *)(a1 + 304);
              v507 = *(_DWORD *)(a1 + 432);
              v503 = v306;
              v504 = v302;
              v499 = *(_OWORD *)(a1 + 304);
              v500 = v304;
              v301 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v307, v308, (uint64_t)&v499, v38, v46, BNNSDataTypeFloat16, BNNSDataTypeFloat16, 65568, BNNSDataTypeFloat16, *(_QWORD *)(a1 + 976));
              *(_QWORD *)(a1 + 912) = v301;
              v122 = v496;
            }
            v498 = 0uLL;
            if (*(_DWORD *)(a1 + 348))
            {
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v497, v122 + 8);
              v309 = 0;
              v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
              v310 = *(int *)(v122 + 8);
              do
              {
                v310 *= *(int *)(v122 + 12 + v309);
                v309 += 4;
              }
              while (v309 != 12);
              memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v122 + 24), 2 * v310);
              v301 = *(void **)(a1 + 912);
            }
            v311 = BNNSFilterApplyBatch(v301, a5, *(const void **)(v494 + 24), a7, *(void **)(v122 + 24), a6);
            if (v311)
            {
              std::to_string(&v497, v311);
              if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v482 = &v497;
              else
                v482 = (std::string *)v497.__r_.__value_.__r.__words[0];
              Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v482);
            }
            if (*(_DWORD *)(a1 + 348))
            {
              v312 = 0;
              v313 = *(__int16 **)(v498 + 24);
              v314 = *(__int16 **)(v496 + 24);
              v315 = *(int *)(v496 + 8);
              do
              {
                v315 *= *(int *)(v496 + 12 + v312);
                v312 += 4;
              }
              while (v312 != 12);
              for (; v315; --v315)
              {
                v316 = *v313++;
                _H0 = v316;
                _H1 = *v314;
                __asm
                {
                  FCVT            S1, H1
                  FCVT            S0, H0
                }
                _S0 = _S0 + _S1;
                __asm { FCVT            H0, S0 }
                *v314++ = LOWORD(_S0);
              }
            }
            *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v496;
            if (*((_QWORD *)&v496 + 1))
            {
              v322 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
              do
                v323 = __ldxr(v322);
              while (__stxr(v323 + 1, v322));
            }
            Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,float>(a1, v496, (float *)v46, a5, a6);
            if (*((_QWORD *)&v496 + 1))
            {
              v324 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
              do
                v325 = __ldaxr(v324);
              while (__stlxr(v325 - 1, v324));
              if (!v325)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
              }
            }
            v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
            if (!*((_QWORD *)&v498 + 1))
              goto LABEL_529;
            v326 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
            do
              v91 = __ldaxr(v326);
            while (__stlxr(v91 - 1, v326));
          }
        }
        else if (v54)
        {
          v196 = *(void **)(a1 + 912);
          if (!v196)
          {
            v197 = *(_OWORD *)(a1 + 384);
            v198 = *(_OWORD *)(a1 + 416);
            v505 = *(_OWORD *)(a1 + 400);
            v506 = v198;
            v199 = *(_OWORD *)(a1 + 320);
            v200 = *(_OWORD *)(a1 + 352);
            v201 = *(_OWORD *)(a1 + 368);
            v501 = *(_OWORD *)(a1 + 336);
            v502 = v200;
            *(_QWORD *)(a1 + 920) = v38;
            v202 = *(unsigned int *)(a1 + 308);
            v203 = *(unsigned int *)(a1 + 304);
            v507 = *(_DWORD *)(a1 + 432);
            v503 = v201;
            v504 = v197;
            v499 = *(_OWORD *)(a1 + 304);
            v500 = v199;
            v196 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v202, v203, (uint64_t)&v499, v38, v54, BNNSDataTypeFloat16, BNNSDataTypeFloat16, 65552, BNNSDataTypeFloat16, *(_QWORD *)(a1 + 976));
            *(_QWORD *)(a1 + 912) = v196;
            v122 = v496;
          }
          v498 = 0uLL;
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v497, v122 + 8);
            v204 = 0;
            v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
            v205 = *(int *)(v122 + 8);
            do
            {
              v205 *= *(int *)(v122 + 12 + v204);
              v204 += 4;
            }
            while (v204 != 12);
            memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v122 + 24), 2 * v205);
            v196 = *(void **)(a1 + 912);
          }
          v206 = BNNSFilterApplyBatch(v196, a5, *(const void **)(v494 + 24), a7, *(void **)(v122 + 24), a6);
          if (v206)
          {
            std::to_string(&v497, v206);
            if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v477 = &v497;
            else
              v477 = (std::string *)v497.__r_.__value_.__r.__words[0];
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v477);
          }
          if (*(_DWORD *)(a1 + 348))
          {
            v207 = 0;
            v208 = *(__int16 **)(v498 + 24);
            v209 = *(__int16 **)(v496 + 24);
            v210 = *(int *)(v496 + 8);
            do
            {
              v210 *= *(int *)(v496 + 12 + v207);
              v207 += 4;
            }
            while (v207 != 12);
            for (; v210; --v210)
            {
              v211 = *v208++;
              _H0 = v211;
              _H1 = *v209;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 + _S1;
              __asm { FCVT            H0, S0 }
              *v209++ = LOWORD(_S0);
            }
          }
          *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v496;
          if (*((_QWORD *)&v496 + 1))
          {
            v217 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v218 = __ldxr(v217);
            while (__stxr(v218 + 1, v217));
          }
          Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,unsigned short>(a1, v496, (__int16 *)v54, a5, a6);
          if (*((_QWORD *)&v496 + 1))
          {
            v219 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v220 = __ldaxr(v219);
            while (__stlxr(v220 - 1, v219));
            if (!v220)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
            }
          }
          v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
          if (!*((_QWORD *)&v498 + 1))
            goto LABEL_529;
          v221 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
          do
            v91 = __ldaxr(v221);
          while (__stlxr(v91 - 1, v221));
        }
        else
        {
          v327 = *(void **)(a1 + 912);
          if (!v327)
          {
            v328 = *(_OWORD *)(a1 + 384);
            v329 = *(_OWORD *)(a1 + 416);
            v505 = *(_OWORD *)(a1 + 400);
            v506 = v329;
            v330 = *(_OWORD *)(a1 + 320);
            v331 = *(_OWORD *)(a1 + 352);
            v332 = *(_OWORD *)(a1 + 368);
            v501 = *(_OWORD *)(a1 + 336);
            v502 = v331;
            *(_QWORD *)(a1 + 920) = v38;
            v333 = *(unsigned int *)(a1 + 308);
            v334 = *(unsigned int *)(a1 + 304);
            v507 = *(_DWORD *)(a1 + 432);
            v503 = v332;
            v504 = v328;
            v499 = *(_OWORD *)(a1 + 304);
            v500 = v330;
            v327 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v333, v334, (uint64_t)&v499, v38, v46, BNNSDataTypeFloat16, BNNSDataTypeFloat16, 65568, BNNSDataTypeFloat16, *(_QWORD *)(a1 + 976));
            *(_QWORD *)(a1 + 912) = v327;
            v122 = v496;
          }
          v498 = 0uLL;
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v497, v122 + 8);
            v335 = 0;
            v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
            v336 = *(int *)(v122 + 8);
            do
            {
              v336 *= *(int *)(v122 + 12 + v335);
              v335 += 4;
            }
            while (v335 != 12);
            memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v122 + 24), 2 * v336);
            v327 = *(void **)(a1 + 912);
          }
          v337 = BNNSFilterApplyBatch(v327, a5, *(const void **)(v494 + 24), a7, *(void **)(v122 + 24), a6);
          if (v337)
          {
            std::to_string(&v497, v337);
            if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v483 = &v497;
            else
              v483 = (std::string *)v497.__r_.__value_.__r.__words[0];
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v483);
          }
          if (*(_DWORD *)(a1 + 348))
          {
            v338 = 0;
            v339 = *(__int16 **)(v498 + 24);
            v340 = *(__int16 **)(v496 + 24);
            v341 = *(int *)(v496 + 8);
            do
            {
              v341 *= *(int *)(v496 + 12 + v338);
              v338 += 4;
            }
            while (v338 != 12);
            for (; v341; --v341)
            {
              v342 = *v339++;
              _H0 = v342;
              _H1 = *v340;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 + _S1;
              __asm { FCVT            H0, S0 }
              *v340++ = LOWORD(_S0);
            }
          }
          *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v496;
          if (*((_QWORD *)&v496 + 1))
          {
            v348 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v349 = __ldxr(v348);
            while (__stxr(v349 + 1, v348));
          }
          Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,float>(a1, v496, (float *)v46, a5, a6);
          if (*((_QWORD *)&v496 + 1))
          {
            v350 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v351 = __ldaxr(v350);
            while (__stlxr(v351 - 1, v350));
            if (!v351)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
            }
          }
          v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
          if (!*((_QWORD *)&v498 + 1))
            goto LABEL_529;
          v352 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
          do
            v91 = __ldaxr(v352);
          while (__stlxr(v91 - 1, v352));
        }
        goto LABEL_527;
      }
      if (v68 && v71)
      {
        if (v14)
        {
          if (v54)
          {
            v149 = *(void **)(a1 + 912);
            if (!v149)
            {
              v150 = *(_OWORD *)(a1 + 384);
              v151 = *(_OWORD *)(a1 + 416);
              v505 = *(_OWORD *)(a1 + 400);
              v506 = v151;
              v152 = *(_OWORD *)(a1 + 320);
              v153 = *(_OWORD *)(a1 + 352);
              v154 = *(_OWORD *)(a1 + 368);
              v501 = *(_OWORD *)(a1 + 336);
              v502 = v153;
              *(_QWORD *)(a1 + 920) = v38;
              v155 = *(unsigned int *)(a1 + 308);
              v156 = *(unsigned int *)(a1 + 304);
              v507 = *(_DWORD *)(a1 + 432);
              v503 = v154;
              v504 = v150;
              v499 = *(_OWORD *)(a1 + 304);
              v500 = v152;
              v149 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v155, v156, (uint64_t)&v499, v38, v54, BNNSDataTypeFloat32, BNNSDataTypeFloat16, 65552, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
              *(_QWORD *)(a1 + 912) = v149;
              v68 = v493;
            }
            v498 = 0uLL;
            if (*(_DWORD *)(a1 + 348))
            {
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v497, v68 + 8);
              v157 = 0;
              v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
              v158 = *(int *)(v68 + 8);
              do
              {
                v158 *= *(int *)(v68 + 12 + v157);
                v157 += 4;
              }
              while (v157 != 12);
              memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v68 + 24), 4 * v158);
              v149 = *(void **)(a1 + 912);
            }
            v159 = BNNSFilterApplyBatch(v149, a5, *(const void **)(v491 + 24), a7, *(void **)(v68 + 24), a6);
            if (v159)
            {
              std::to_string(&v497, v159);
              if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v478 = &v497;
              else
                v478 = (std::string *)v497.__r_.__value_.__r.__words[0];
              Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v478);
            }
            if (*(_DWORD *)(a1 + 348))
            {
              v160 = 0;
              v161 = *(int *)(v493 + 8);
              do
              {
                v161 *= *(int *)(v493 + 12 + v160);
                v160 += 4;
              }
              while (v160 != 12);
              vDSP_vadd(*(const float **)(v498 + 24), 1, *(const float **)(v493 + 24), 1, *(float **)(v493 + 24), 1, v161);
            }
            *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v493;
            if (*((_QWORD *)&v493 + 1))
            {
              v162 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
              do
                v163 = __ldxr(v162);
              while (__stxr(v163 + 1, v162));
            }
            Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<float,unsigned short>(a1, (uint64_t *)&v497, (__int16 *)v54, a5, a6);
            if (*((_QWORD *)&v493 + 1))
            {
              v164 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
              do
                v165 = __ldaxr(v164);
              while (__stlxr(v165 - 1, v164));
              if (!v165)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v493 + 1) + 16))(*((_QWORD *)&v493 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v493 + 1));
              }
            }
            v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
            if (!*((_QWORD *)&v498 + 1))
              goto LABEL_529;
            v166 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
            do
              v91 = __ldaxr(v166);
            while (__stlxr(v91 - 1, v166));
          }
          else
          {
            v353 = *(void **)(a1 + 912);
            if (!v353)
            {
              v354 = *(_OWORD *)(a1 + 384);
              v355 = *(_OWORD *)(a1 + 416);
              v505 = *(_OWORD *)(a1 + 400);
              v506 = v355;
              v356 = *(_OWORD *)(a1 + 320);
              v357 = *(_OWORD *)(a1 + 352);
              v358 = *(_OWORD *)(a1 + 368);
              v501 = *(_OWORD *)(a1 + 336);
              v502 = v357;
              *(_QWORD *)(a1 + 920) = v38;
              v359 = *(unsigned int *)(a1 + 308);
              v360 = *(unsigned int *)(a1 + 304);
              v507 = *(_DWORD *)(a1 + 432);
              v503 = v358;
              v504 = v354;
              v499 = *(_OWORD *)(a1 + 304);
              v500 = v356;
              v353 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v359, v360, (uint64_t)&v499, v38, v46, BNNSDataTypeFloat32, BNNSDataTypeFloat16, 65568, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
              *(_QWORD *)(a1 + 912) = v353;
              v68 = v493;
            }
            v498 = 0uLL;
            if (*(_DWORD *)(a1 + 348))
            {
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v497, v68 + 8);
              v361 = 0;
              v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
              v362 = *(int *)(v68 + 8);
              do
              {
                v362 *= *(int *)(v68 + 12 + v361);
                v361 += 4;
              }
              while (v361 != 12);
              memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v68 + 24), 4 * v362);
              v353 = *(void **)(a1 + 912);
            }
            v363 = BNNSFilterApplyBatch(v353, a5, *(const void **)(v491 + 24), a7, *(void **)(v68 + 24), a6);
            if (v363)
            {
              std::to_string(&v497, v363);
              if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v484 = &v497;
              else
                v484 = (std::string *)v497.__r_.__value_.__r.__words[0];
              Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v484);
            }
            if (*(_DWORD *)(a1 + 348))
            {
              v364 = 0;
              v365 = *(int *)(v493 + 8);
              do
              {
                v365 *= *(int *)(v493 + 12 + v364);
                v364 += 4;
              }
              while (v364 != 12);
              vDSP_vadd(*(const float **)(v498 + 24), 1, *(const float **)(v493 + 24), 1, *(float **)(v493 + 24), 1, v365);
            }
            if (*((_QWORD *)&v493 + 1))
            {
              v366 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
              do
                v367 = __ldxr(v366);
              while (__stxr(v367 + 1, v366));
              do
                v368 = __ldaxr(v366);
              while (__stlxr(v368 - 1, v366));
              if (!v368)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v493 + 1) + 16))(*((_QWORD *)&v493 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v493 + 1));
              }
            }
            v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
            if (!*((_QWORD *)&v498 + 1))
              goto LABEL_529;
            v369 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
            do
              v91 = __ldaxr(v369);
            while (__stlxr(v91 - 1, v369));
          }
        }
        else if (v54)
        {
          v222 = *(void **)(a1 + 912);
          if (!v222)
          {
            v223 = *(_OWORD *)(a1 + 384);
            v224 = *(_OWORD *)(a1 + 416);
            v505 = *(_OWORD *)(a1 + 400);
            v506 = v224;
            v225 = *(_OWORD *)(a1 + 320);
            v226 = *(_OWORD *)(a1 + 352);
            v227 = *(_OWORD *)(a1 + 368);
            v501 = *(_OWORD *)(a1 + 336);
            v502 = v226;
            *(_QWORD *)(a1 + 920) = v38;
            v228 = *(unsigned int *)(a1 + 308);
            v229 = *(unsigned int *)(a1 + 304);
            v507 = *(_DWORD *)(a1 + 432);
            v503 = v227;
            v504 = v223;
            v499 = *(_OWORD *)(a1 + 304);
            v500 = v225;
            v222 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v228, v229, (uint64_t)&v499, v38, v54, BNNSDataTypeFloat32, BNNSDataTypeFloat16, 65552, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
            *(_QWORD *)(a1 + 912) = v222;
            v68 = v493;
          }
          v498 = 0uLL;
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v497, v68 + 8);
            v230 = 0;
            v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
            v231 = *(int *)(v68 + 8);
            do
            {
              v231 *= *(int *)(v68 + 12 + v230);
              v230 += 4;
            }
            while (v230 != 12);
            memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v68 + 24), 4 * v231);
            v222 = *(void **)(a1 + 912);
          }
          v232 = BNNSFilterApplyBatch(v222, a5, *(const void **)(v491 + 24), a7, *(void **)(v68 + 24), a6);
          if (v232)
          {
            std::to_string(&v497, v232);
            if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v479 = &v497;
            else
              v479 = (std::string *)v497.__r_.__value_.__r.__words[0];
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v479);
          }
          if (*(_DWORD *)(a1 + 348))
          {
            v233 = 0;
            v234 = *(int *)(v493 + 8);
            do
            {
              v234 *= *(int *)(v493 + 12 + v233);
              v233 += 4;
            }
            while (v233 != 12);
            vDSP_vadd(*(const float **)(v498 + 24), 1, *(const float **)(v493 + 24), 1, *(float **)(v493 + 24), 1, v234);
          }
          *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v493;
          if (*((_QWORD *)&v493 + 1))
          {
            v235 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
            do
              v236 = __ldxr(v235);
            while (__stxr(v236 + 1, v235));
          }
          Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<float,unsigned short>(a1, (uint64_t *)&v497, (__int16 *)v54, a5, a6);
          if (*((_QWORD *)&v493 + 1))
          {
            v237 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
            do
              v238 = __ldaxr(v237);
            while (__stlxr(v238 - 1, v237));
            if (!v238)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v493 + 1) + 16))(*((_QWORD *)&v493 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v493 + 1));
            }
          }
          v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
          if (!*((_QWORD *)&v498 + 1))
            goto LABEL_529;
          v239 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
          do
            v91 = __ldaxr(v239);
          while (__stlxr(v91 - 1, v239));
        }
        else
        {
          v370 = *(void **)(a1 + 912);
          if (!v370)
          {
            v371 = *(_OWORD *)(a1 + 384);
            v372 = *(_OWORD *)(a1 + 416);
            v505 = *(_OWORD *)(a1 + 400);
            v506 = v372;
            v373 = *(_OWORD *)(a1 + 320);
            v374 = *(_OWORD *)(a1 + 352);
            v375 = *(_OWORD *)(a1 + 368);
            v501 = *(_OWORD *)(a1 + 336);
            v502 = v374;
            *(_QWORD *)(a1 + 920) = v38;
            v376 = *(unsigned int *)(a1 + 308);
            v377 = *(unsigned int *)(a1 + 304);
            v507 = *(_DWORD *)(a1 + 432);
            v503 = v375;
            v504 = v371;
            v499 = *(_OWORD *)(a1 + 304);
            v500 = v373;
            v370 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v376, v377, (uint64_t)&v499, v38, v46, BNNSDataTypeFloat32, BNNSDataTypeFloat16, 65568, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
            *(_QWORD *)(a1 + 912) = v370;
            v68 = v493;
          }
          v498 = 0uLL;
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v497, v68 + 8);
            v378 = 0;
            v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
            v379 = *(int *)(v68 + 8);
            do
            {
              v379 *= *(int *)(v68 + 12 + v378);
              v378 += 4;
            }
            while (v378 != 12);
            memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v68 + 24), 4 * v379);
            v370 = *(void **)(a1 + 912);
          }
          v380 = BNNSFilterApplyBatch(v370, a5, *(const void **)(v491 + 24), a7, *(void **)(v68 + 24), a6);
          if (v380)
          {
            std::to_string(&v497, v380);
            if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v485 = &v497;
            else
              v485 = (std::string *)v497.__r_.__value_.__r.__words[0];
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v485);
          }
          if (*(_DWORD *)(a1 + 348))
          {
            v381 = 0;
            v382 = *(int *)(v493 + 8);
            do
            {
              v382 *= *(int *)(v493 + 12 + v381);
              v381 += 4;
            }
            while (v381 != 12);
            vDSP_vadd(*(const float **)(v498 + 24), 1, *(const float **)(v493 + 24), 1, *(float **)(v493 + 24), 1, v382);
          }
          if (*((_QWORD *)&v493 + 1))
          {
            v383 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
            do
              v384 = __ldxr(v383);
            while (__stxr(v384 + 1, v383));
            do
              v385 = __ldaxr(v383);
            while (__stlxr(v385 - 1, v383));
            if (!v385)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v493 + 1) + 16))(*((_QWORD *)&v493 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v493 + 1));
            }
          }
          v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
          if (!*((_QWORD *)&v498 + 1))
            goto LABEL_529;
          v386 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
          do
            v91 = __ldaxr(v386);
          while (__stlxr(v91 - 1, v386));
        }
LABEL_527:
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
        goto LABEL_529;
      }
    }
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("Bias and weight type combination not implemented for bottom and top types");
  }
  if (!v14)
  {
    if (v54)
    {
      v171 = *(void **)(a1 + 912);
      if (!v171)
      {
        v172 = *(_OWORD *)(a1 + 384);
        v173 = *(_OWORD *)(a1 + 416);
        v505 = *(_OWORD *)(a1 + 400);
        v506 = v173;
        v174 = *(_OWORD *)(a1 + 320);
        v175 = *(_OWORD *)(a1 + 352);
        v176 = *(_OWORD *)(a1 + 368);
        v501 = *(_OWORD *)(a1 + 336);
        v502 = v175;
        *(_QWORD *)(a1 + 920) = v15;
        v177 = *(unsigned int *)(a1 + 308);
        v178 = *(unsigned int *)(a1 + 304);
        v507 = *(_DWORD *)(a1 + 432);
        v503 = v176;
        v504 = v172;
        v499 = *(_OWORD *)(a1 + 304);
        v500 = v174;
        v171 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v177, v178, (uint64_t)&v499, v15, v54, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65552, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
        *(_QWORD *)(a1 + 912) = v171;
        v68 = v493;
      }
      v498 = 0uLL;
      if (*(_DWORD *)(a1 + 348))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v497, v68 + 8);
        v179 = 0;
        v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
        v180 = *(int *)(v68 + 8);
        do
        {
          v180 *= *(int *)(v68 + 12 + v179);
          v179 += 4;
        }
        while (v179 != 12);
        memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v68 + 24), 4 * v180);
        v171 = *(void **)(a1 + 912);
      }
      v181 = BNNSFilterApplyBatch(v171, a5, *(const void **)(v491 + 24), a7, *(void **)(v68 + 24), a6);
      if (v181)
      {
        std::to_string(&v497, v181);
        if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v475 = &v497;
        else
          v475 = (std::string *)v497.__r_.__value_.__r.__words[0];
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v475);
      }
      if (*(_DWORD *)(a1 + 348))
      {
        v182 = 0;
        v183 = *(int *)(v493 + 8);
        do
        {
          v183 *= *(int *)(v493 + 12 + v182);
          v182 += 4;
        }
        while (v182 != 12);
        vDSP_vadd(*(const float **)(v498 + 24), 1, *(const float **)(v493 + 24), 1, *(float **)(v493 + 24), 1, v183);
      }
      *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v493;
      if (*((_QWORD *)&v493 + 1))
      {
        v184 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
        do
          v185 = __ldxr(v184);
        while (__stxr(v185 + 1, v184));
      }
      Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<float,unsigned short>(a1, (uint64_t *)&v497, (__int16 *)v54, a5, a6);
      if (*((_QWORD *)&v493 + 1))
      {
        v186 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v493 + 1) + 16))(*((_QWORD *)&v493 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v493 + 1));
        }
      }
      v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
      if (!*((_QWORD *)&v498 + 1))
        goto LABEL_529;
      v188 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
      do
        v91 = __ldaxr(v188);
      while (__stlxr(v91 - 1, v188));
    }
    else
    {
      v284 = *(void **)(a1 + 912);
      if (!v284)
      {
        v285 = *(_OWORD *)(a1 + 384);
        v286 = *(_OWORD *)(a1 + 416);
        v505 = *(_OWORD *)(a1 + 400);
        v506 = v286;
        v287 = *(_OWORD *)(a1 + 320);
        v288 = *(_OWORD *)(a1 + 352);
        v289 = *(_OWORD *)(a1 + 368);
        v501 = *(_OWORD *)(a1 + 336);
        v502 = v288;
        *(_QWORD *)(a1 + 920) = v15;
        v290 = *(unsigned int *)(a1 + 308);
        v291 = *(unsigned int *)(a1 + 304);
        v507 = *(_DWORD *)(a1 + 432);
        v503 = v289;
        v504 = v285;
        v499 = *(_OWORD *)(a1 + 304);
        v500 = v287;
        v284 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v290, v291, (uint64_t)&v499, v15, v46, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
        *(_QWORD *)(a1 + 912) = v284;
        v68 = v493;
      }
      v498 = 0uLL;
      if (*(_DWORD *)(a1 + 348))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v497, v68 + 8);
        v292 = 0;
        v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
        v293 = *(int *)(v68 + 8);
        do
        {
          v293 *= *(int *)(v68 + 12 + v292);
          v292 += 4;
        }
        while (v292 != 12);
        memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v68 + 24), 4 * v293);
        v284 = *(void **)(a1 + 912);
      }
      v294 = BNNSFilterApplyBatch(v284, a5, *(const void **)(v491 + 24), a7, *(void **)(v68 + 24), a6);
      if (v294)
      {
        std::to_string(&v497, v294);
        if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v481 = &v497;
        else
          v481 = (std::string *)v497.__r_.__value_.__r.__words[0];
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v481);
      }
      if (*(_DWORD *)(a1 + 348))
      {
        v295 = 0;
        v296 = *(int *)(v493 + 8);
        do
        {
          v296 *= *(int *)(v493 + 12 + v295);
          v295 += 4;
        }
        while (v295 != 12);
        vDSP_vadd(*(const float **)(v498 + 24), 1, *(const float **)(v493 + 24), 1, *(float **)(v493 + 24), 1, v296);
      }
      if (*((_QWORD *)&v493 + 1))
      {
        v297 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
        do
          v298 = __ldxr(v297);
        while (__stxr(v298 + 1, v297));
        do
          v299 = __ldaxr(v297);
        while (__stlxr(v299 - 1, v297));
        if (!v299)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v493 + 1) + 16))(*((_QWORD *)&v493 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v493 + 1));
        }
      }
      v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
      if (!*((_QWORD *)&v498 + 1))
        goto LABEL_529;
      v300 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
      do
        v91 = __ldaxr(v300);
      while (__stlxr(v91 - 1, v300));
    }
    goto LABEL_527;
  }
  if (!v54)
  {
    v267 = *(void **)(a1 + 912);
    if (!v267)
    {
      v268 = *(_OWORD *)(a1 + 384);
      v269 = *(_OWORD *)(a1 + 416);
      v505 = *(_OWORD *)(a1 + 400);
      v506 = v269;
      v270 = *(_OWORD *)(a1 + 320);
      v271 = *(_OWORD *)(a1 + 352);
      v272 = *(_OWORD *)(a1 + 368);
      v501 = *(_OWORD *)(a1 + 336);
      v502 = v271;
      *(_QWORD *)(a1 + 920) = v15;
      v273 = *(unsigned int *)(a1 + 308);
      v274 = *(unsigned int *)(a1 + 304);
      v507 = *(_DWORD *)(a1 + 432);
      v503 = v272;
      v504 = v268;
      v499 = *(_OWORD *)(a1 + 304);
      v500 = v270;
      v267 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v273, v274, (uint64_t)&v499, v15, v46, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
      *(_QWORD *)(a1 + 912) = v267;
      v68 = v493;
    }
    v498 = 0uLL;
    if (*(_DWORD *)(a1 + 348))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v497, v68 + 8);
      v275 = 0;
      v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
      v276 = *(int *)(v68 + 8);
      do
      {
        v276 *= *(int *)(v68 + 12 + v275);
        v275 += 4;
      }
      while (v275 != 12);
      memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v68 + 24), 4 * v276);
      v267 = *(void **)(a1 + 912);
    }
    v277 = BNNSFilterApplyBatch(v267, a5, *(const void **)(v491 + 24), a7, *(void **)(v68 + 24), a6);
    if (v277)
    {
      std::to_string(&v497, v277);
      if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v480 = &v497;
      else
        v480 = (std::string *)v497.__r_.__value_.__r.__words[0];
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v480);
    }
    if (*(_DWORD *)(a1 + 348))
    {
      v278 = 0;
      v279 = *(int *)(v493 + 8);
      do
      {
        v279 *= *(int *)(v493 + 12 + v278);
        v278 += 4;
      }
      while (v278 != 12);
      vDSP_vadd(*(const float **)(v498 + 24), 1, *(const float **)(v493 + 24), 1, *(float **)(v493 + 24), 1, v279);
    }
    if (*((_QWORD *)&v493 + 1))
    {
      v280 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
      do
        v281 = __ldxr(v280);
      while (__stxr(v281 + 1, v280));
      do
        v282 = __ldaxr(v280);
      while (__stlxr(v282 - 1, v280));
      if (!v282)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v493 + 1) + 16))(*((_QWORD *)&v493 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v493 + 1));
      }
    }
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
    if (!*((_QWORD *)&v498 + 1))
      goto LABEL_529;
    v283 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
    do
      v91 = __ldaxr(v283);
    while (__stlxr(v91 - 1, v283));
    goto LABEL_527;
  }
  v72 = *(void **)(a1 + 912);
  if (!v72)
  {
    v73 = *(_OWORD *)(a1 + 384);
    v74 = *(_OWORD *)(a1 + 416);
    v505 = *(_OWORD *)(a1 + 400);
    v506 = v74;
    v75 = *(_OWORD *)(a1 + 320);
    v76 = *(_OWORD *)(a1 + 352);
    v77 = *(_OWORD *)(a1 + 368);
    v501 = *(_OWORD *)(a1 + 336);
    v502 = v76;
    *(_QWORD *)(a1 + 920) = v15;
    v78 = *(unsigned int *)(a1 + 308);
    v79 = *(unsigned int *)(a1 + 304);
    v507 = *(_DWORD *)(a1 + 432);
    v503 = v77;
    v504 = v73;
    v499 = *(_OWORD *)(a1 + 304);
    v500 = v75;
    v72 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v78, v79, (uint64_t)&v499, v15, v54, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65552, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
    *(_QWORD *)(a1 + 912) = v72;
    v68 = v493;
  }
  v498 = 0uLL;
  if (*(_DWORD *)(a1 + 348))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v497, v68 + 8);
    v80 = 0;
    v498 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
    v81 = *(int *)(v68 + 8);
    do
    {
      v81 *= *(int *)(v68 + 12 + v80);
      v80 += 4;
    }
    while (v80 != 12);
    memcpy(*(void **)(v497.__r_.__value_.__r.__words[0] + 24), *(const void **)(v68 + 24), 4 * v81);
    v72 = *(void **)(a1 + 912);
  }
  v82 = BNNSFilterApplyBatch(v72, a5, *(const void **)(v491 + 24), a7, *(void **)(v68 + 24), a6);
  if (v82)
  {
    std::to_string(&v497, v82);
    if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v474 = &v497;
    else
      v474 = (std::string *)v497.__r_.__value_.__r.__words[0];
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v474);
  }
  if (*(_DWORD *)(a1 + 348))
  {
    v83 = 0;
    v84 = *(int *)(v493 + 8);
    do
    {
      v84 *= *(int *)(v493 + 12 + v83);
      v83 += 4;
    }
    while (v83 != 12);
    vDSP_vadd(*(const float **)(v498 + 24), 1, *(const float **)(v493 + 24), 1, *(float **)(v493 + 24), 1, v84);
  }
  *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v493;
  if (*((_QWORD *)&v493 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<float,unsigned short>(a1, (uint64_t *)&v497, (__int16 *)v54, a5, a6);
  if (*((_QWORD *)&v493 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v493 + 1) + 16))(*((_QWORD *)&v493 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v493 + 1));
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
  if (*((_QWORD *)&v498 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    goto LABEL_527;
  }
LABEL_529:
  if (v492)
  {
    v460 = (unint64_t *)&v492->__shared_owners_;
    do
      v461 = __ldaxr(v460);
    while (__stlxr(v461 - 1, v460));
    if (!v461)
    {
      ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
      std::__shared_weak_count::__release_weak(v492);
    }
  }
  if (*((_QWORD *)&v493 + 1))
  {
    v462 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
    do
      v463 = __ldaxr(v462);
    while (__stlxr(v463 - 1, v462));
    if (!v463)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v493 + 1) + 16))(*((_QWORD *)&v493 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v493 + 1));
    }
  }
  if (v495)
  {
    v464 = (unint64_t *)&v495->__shared_owners_;
    do
      v465 = __ldaxr(v464);
    while (__stlxr(v465 - 1, v464));
    if (!v465)
    {
      ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
      std::__shared_weak_count::__release_weak(v495);
    }
  }
  if (*((_QWORD *)&v496 + 1))
  {
    v466 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
    do
      v467 = __ldaxr(v466);
    while (__stlxr(v467 - 1, v466));
    if (!v467)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
    }
  }
}

void sub_190E85C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(size_t a1, size_t a2, uint64_t a3, void *a4, void *a5, BNNSDataType a6, BNNSDataType a7, int a8, BNNSDataType a9, size_t a10)
{
  Espresso *v18;
  const char *v19;
  int v20;
  uint32_t v21;
  unsigned __int8 v22;
  NSObject *v23;
  void *result;
  BNNSFilterParameters filter_params;
  BNNSLayerParametersFullyConnected layer_params;
  uint8_t buf[4];
  uint32_t flags;
  __int16 v29;
  size_t n_threads;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  bzero(&layer_params, 0x2F0uLL);
  layer_params.i_desc.layout = BNNSDataLayoutVector;
  layer_params.i_desc.size[0] = a1;
  layer_params.i_desc.stride[0] = 1;
  layer_params.i_desc.data_type = a6;
  layer_params.i_desc.data_scale = 1.0;
  layer_params.o_desc.layout = BNNSDataLayoutVector;
  layer_params.o_desc.size[0] = a2;
  layer_params.o_desc.stride[0] = 1;
  layer_params.o_desc.data_type = a9;
  layer_params.o_desc.data_scale = 1.0;
  layer_params.w_desc.data = a4;
  layer_params.w_desc.data_type = a7;
  layer_params.w_desc.data_scale = 1.0;
  layer_params.w_desc.layout = BNNSDataLayoutRowMajorMatrix;
  layer_params.w_desc.size[0] = a1;
  layer_params.w_desc.size[1] = a2;
  layer_params.w_desc.stride[0] = 1;
  layer_params.w_desc.stride[1] = a1;
  if (a8 == 65568 && a9 == BNNSDataTypeFloat32)
  {
    layer_params.bias.layout = BNNSDataLayoutVector;
    layer_params.bias.size[0] = a2;
    layer_params.bias.stride[0] = 1;
    layer_params.bias.data_type = BNNSDataTypeFloat32;
    layer_params.bias.data = a5;
    *(_QWORD *)&layer_params.activation.function = 0;
    layer_params.activation.beta = 0.0;
    v20 = *(_DWORD *)(a3 + 12);
    if (v20 == 2)
    {
      *(_QWORD *)&layer_params.activation.function = 0x3E80000000000002;
    }
    else if (v20 == 1)
    {
      layer_params.activation.function = BNNSActivationFunctionRectifiedLinear;
    }
    if (*(_DWORD *)(a3 + 16))
    {
      layer_params.activation.function = BNNSActivationFunctionScaledTanh;
      *(_QWORD *)&layer_params.activation.alpha = *(_QWORD *)(a3 + 20);
    }
    if (*(_DWORD *)(a3 + 28))
      layer_params.activation.function = BNNSActivationFunctionPReLUPerChannel;
  }
  filter_params.alloc_memory = (BNNSAlloc)bnns_alloc_capmem;
  filter_params.free_memory = (BNNSFree)MEMORY[0x1E0C834A8];
  *(_QWORD *)&filter_params.flags = 0;
  filter_params.n_threads = a10;
  if (*(_DWORD *)(a3 + 128))
  {
    v21 = 3145728;
  }
  else
  {
    filter_params.flags = 1;
    v21 = 3145729;
  }
  if (*(_DWORD *)(a3 + 116))
    filter_params.flags = v21;
  if ((v22 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(unsigned long,unsigned long,Espresso::inner_product_uniforms,void *,void *,BNNSDataType,BNNSDataType,BNNSDataType,BNNSDataType,unsigned long)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested;
    }
  }
  if (Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(unsigned long,unsigned long,Espresso::inner_product_uniforms,void *,void *,BNNSDataType,BNNSDataType,BNNSDataType,BNNSDataType,unsigned long)::log_requested)
  {
    Espresso::espresso_os_log_subsystem(v18, v19);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      flags = filter_params.flags;
      v29 = 2048;
      n_threads = filter_params.n_threads;
      _os_log_debug_impl(&dword_190DAF000, v23, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerFullyConnected: flags=%d, n_threads=%zu", buf, 0x12u);
    }

  }
  result = BNNSFilterCreateLayerFullyConnected(&layer_params, &filter_params);
  if (!result)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Fully Connected Layer");
  return result;
}

uint64_t e5rt_execution_stream_create(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC7778;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190E86190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

E5RT::PrecompiledComputeOpCreateOptions *E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp@<X0>(const std::string *a1@<X0>, E5RT::SharedResourceManager *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  E5RT::PrecompiledComputeOpCreateOptions *result;
  E5RT::ExecutionStreamOperationInternal *v8;

  result = E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(a1, a2, a3, a4, a5, &v8);
  *a6 = v8;
  return result;
}

E5RT::PrecompiledComputeOpCreateOptions *E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp@<X0>(const std::string *a1@<X0>, E5RT::SharedResourceManager *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, E5RT::ExecutionStreamOperationInternal **a6@<X8>)
{
  E5RT::PrecompiledComputeOpCreateOptions *result;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  E5RT::PrecompiledComputeOpCreateOptions *v14[3];

  if (a4 != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "CreatePreCompiledComputeOp");
    std::string::basic_string[abi:ne180100]<0>(v12, "Multiple intermediate buffers isn't supported yet.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create(a2, a3, v14);
  E5RT::PrecompiledComputeOpCreateOptions::SetLibraryPath((uint64_t)v14[0], (const std::string *)a2);
  E5RT::PrecompiledComputeOpCreateOptions::SetOperationName((uint64_t)v14[0], a1);
  E5RT::PrecompiledComputeOpCreateOptions::SetAllocateIntermediateBuffers((uint64_t)v14[0], a5);
  E5RT::PrecompiledComputeOpCreateOptions::SetLazyPrepareOpForEncode((uint64_t)v14[0], 0);
  E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(v14[0], a6);
  result = v14[0];
  v14[0] = 0;
  if (result)
    return (E5RT::PrecompiledComputeOpCreateOptions *)(*(uint64_t (**)(E5RT::PrecompiledComputeOpCreateOptions *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190E86310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a17)
  {
    (*(void (**)(void *))(*(_QWORD *)a17 + 8))(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190E86380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

E5RT::ProgramLibrary *E5RT::PrecompiledComputeOpCreateOptions::Create@<X0>(E5RT::SharedResourceManager *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *ExportedFunctions;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  E5RT::ProgramLibrary *result;
  void *exception;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;
  _BYTE v23[8];
  _QWORD v24[3];
  E5RT::ProgramLibrary *v25;

  E5RT::ProgramLibrary::OpenLibrary(a1, &v25);
  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(v25);
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, a2);
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "Create");
    std::operator+<char>();
    v16 = std::string::append(&v20, " - does not exist in program library.");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v22 = v16->__r_.__value_.__r.__words[2];
    v21 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v23, 1, &v21);
    E5RT::E5RTError::E5RTError(exception, v24, v23);
  }
  v8 = v7[6];
  v18 = v7[5];
  v19 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create(&v18, a3);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::string::operator=((std::string *)(*(_QWORD *)(*a3 + 8) + 40), (const std::string *)a1);
  result = v25;
  v25 = 0;
  if (result)
    return (E5RT::ProgramLibrary *)(*(uint64_t (**)(E5RT::ProgramLibrary *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_190E86534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  *v24 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v28 = *(_QWORD *)(v26 - 40);
  *(_QWORD *)(v26 - 40) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t E5RT::ProgramLibrary::GetExportedFunctions(E5RT::ProgramLibrary *this)
{
  return *((_QWORD *)this + 1) + 24;
}

{
  return *((_QWORD *)this + 1) + 24;
}

void E5RT::ProgramLibraryPriv::~ProgramLibraryPriv(E5RT::ProgramLibraryPriv *this)
{
  void **v2;

  v2 = (void **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5A000;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x19401CD90]();
  }
  JUMPOUT(0x19401CD90);
}

{
  void **v2;

  v2 = (void **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5A000;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

void E5RT::PrecompiledComputeOpCreateOptions::~PrecompiledComputeOpCreateOptions(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  E5RT::PrecompiledComputeOpCreateOptionsImpl *v2;

  v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5B2A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x19401CD90]();
  }
  JUMPOUT(0x19401CD90);
}

{
  E5RT::PrecompiledComputeOpCreateOptionsImpl *v2;

  v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5B2A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

{
  E5RT::PrecompiledComputeOpCreateOptionsImpl *v2;

  v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D5B2A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x19401CD90]();
  }
}

void E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(E5RT::PrecompiledComputeOpCreateOptionsImpl *this)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  std::__shared_weak_count *v8;
  void **v9;
  void **v10;
  void **v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v2 = (void **)*((_QWORD *)this + 23);
  if (v2)
  {
    do
    {
      v9 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_19:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_19;
      }
      operator delete(v2);
      v2 = v9;
    }
    while (v9);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void **)*((_QWORD *)this + 18);
  if (v4)
  {
    do
    {
      v10 = (void **)*v4;
      if (*((char *)v4 + 63) < 0)
      {
        operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0)
LABEL_25:
          operator delete(v4[2]);
      }
      else if (*((char *)v4 + 39) < 0)
      {
        goto LABEL_25;
      }
      operator delete(v4);
      v4 = v10;
    }
    while (v10);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
    operator delete(v5);
  v6 = (void **)*((_QWORD *)this + 13);
  if (v6)
  {
    do
    {
      v11 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0)
LABEL_31:
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_31;
      }
      operator delete(v6);
      v6 = v11;
    }
    while (v11);
  }
  v7 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
    operator delete(v7);
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_33:
    operator delete(*((void **)this + 2));
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v8)
      return;
    goto LABEL_34;
  }
  operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    goto LABEL_33;
LABEL_12:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v8)
    return;
LABEL_34:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(void **this)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;

  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  v2 = (void **)this[5];
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_13;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_13:
  v7 = this[3];
  this[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = *((unsigned int *)this + 4);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, void **))off_1E2DCC280[v8])(&v9, this);
  *((_DWORD *)this + 4) = -1;
}

void std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::__on_zero_shared(uint64_t a1)
{
  E5RT::ProgramFunctionPriv::~ProgramFunctionPriv((E5RT::ProgramFunctionPriv *)(a1 + 24));
}

void E5RT::ProgramFunctionPriv::~ProgramFunctionPriv(E5RT::ProgramFunctionPriv *this)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void **v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void **v14;
  void **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = (void **)*((_QWORD *)this + 15);
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_11;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  v7 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    operator delete(v7);
  v8 = (void **)*((_QWORD *)this + 10);
  if (v8)
  {
    do
    {
      while (1)
      {
        v9 = (void **)*v8;
        v10 = (std::__shared_weak_count *)v8[6];
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        if (*((char *)v8 + 39) < 0)
          break;
        operator delete(v8);
        v8 = v9;
        if (!v9)
          goto LABEL_23;
      }
      operator delete(v8[2]);
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
LABEL_23:
  v13 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
    operator delete(v13);
  v14 = (void **)*((_QWORD *)this + 5);
  if (v14)
  {
    do
    {
      while (1)
      {
        v15 = (void **)*v14;
        v16 = (std::__shared_weak_count *)v14[6];
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (*((char *)v14 + 39) < 0)
          break;
        operator delete(v14);
        v14 = v15;
        if (!v15)
          goto LABEL_35;
      }
      operator delete(v14[2]);
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
LABEL_35:
  v19 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v19)
    operator delete(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

{
  E5RT::ProgramFunctionPriv::~ProgramFunctionPriv(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *E5RT::PrecompiledComputeOpCreateOptions::Create@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  _QWORD *result;
  void *exception;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];

  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "Create");
    std::string::basic_string[abi:ne180100]<0>(v8, "Cannot provide program function as nullptr.");
    E5RT::Status::Status(v9, 1, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  v4 = operator new();
  v5 = *(_OWORD *)a1;
  *a1 = 0;
  a1[1] = 0;
  *(_OWORD *)v4 = v5;
  *(_WORD *)(v4 + 39) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 63) = 0;
  *(_WORD *)(v4 + 64) = 1;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_DWORD *)(v4 + 120) = 1065353216;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_DWORD *)(v4 + 160) = 1065353216;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_DWORD *)(v4 + 200) = 1065353216;
  *(_WORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 1;
  v10[0] = v4;
  result = (_QWORD *)operator new();
  *result = &off_1E2D5B2E8;
  result[1] = v4;
  *a2 = result;
  return result;
}

void sub_190E86F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT::PrecompiledComputeOpCreateOptionsImpl>::~unique_ptr[abi:ne180100]((E5RT::PrecompiledComputeOpCreateOptionsImpl **)va);
  _Unwind_Resume(a1);
}

void sub_190E86F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

std::string *E5RT::PrecompiledComputeOpCreateOptions::SetOperationName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 8) + 16), a2);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetAllocateIntermediateBuffers(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 64) = a2;
  return this;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetLazyPrepareOpForEncode(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 65) = a2;
  return this;
}

void E5RT::Ops::Impl::AneInferenceOperationImpl::LoadAneModel(E5RT::Ops::Impl::AneInferenceOperationImpl *this)
{
  void *v2;
  uint64_t SharedResourceManager;
  __int128 *v4;
  uint64_t *OpName;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 6))
  {
    v16 = *MEMORY[0x1E0CFDFF8];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = v13;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
    v14 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v14;
  }
  else
  {
    v2 = 0;
  }
  SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(this);
  v4 = (__int128 *)*((_QWORD *)this + 2);
  OpName = (uint64_t *)E5RT::ExecutionStreamOperationInternal::GetOpName(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                        + 1));
  E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, v4, 0, OpName, v2, v15);
  v6 = *(_OWORD *)v15;
  *(_OWORD *)v15 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  *((_OWORD *)this + 2) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)v15[1];
  if (v15[1])
  {
    v11 = (unint64_t *)(v15[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

}

void sub_190E87158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void E5RT::ProgramLibrary::OpenLibrary(E5RT::SharedResourceManager *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t SharedResourceManager;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *exception;
  uint64_t v13;
  _BYTE v14[8];
  void *__p[2];
  char v16;
  __int128 v17;

  SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(a1);
  v16 = 0;
  LOBYTE(__p[0]) = 0;
  E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, (__int128 *)a1, 3, (uint64_t *)__p, 0, (uint64_t *)&v17);
  if (v16 < 0)
    operator delete(__p[0]);
  if (!(_QWORD)v17)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "OpenLibrary");
    std::operator+<char>();
    E5RT::Status::Status(v14, 8, &v13);
    E5RT::E5RTError::E5RTError(exception, __p, v14);
  }
  v5 = (_QWORD *)operator new();
  *(_OWORD *)__p = v17;
  v17 = 0uLL;
  E5RT::ProgramLibraryPriv::ProgramLibraryPriv(v5, (__int128 *)__p);
  v6 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v7 = (unint64_t *)((char *)__p[1] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *a2 = v5;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_190E8730C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = v21;
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  MEMORY[0x19401CD90](v23, 0xA1C40BD48D6D6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22 - 48);
  _Unwind_Resume(a1);
}

uint64_t E5RT::SharedResourceManager::GetSharedResourceManager(E5RT::SharedResourceManager *this)
{
  if (qword_1EE214880 != -1)
    dispatch_once(&qword_1EE214880, &unk_1E2DCC5B0);
  return qword_1EE214878;
}

void E5RT::SharedResourceManager::GetOrCreateResource(uint64_t a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  id v11;
  std::mutex *v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  id v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  char *v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  void *exception;
  void *v71;
  void *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  bnns *v75;
  std::__shared_weak_count *v76;
  _QWORD v77[3];
  char v78[8];
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *__p[2];
  char v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v11 = a5;
  *a6 = 0;
  a6[1] = 0;
  v12 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::find<std::string>((_QWORD *)a1, (uint64_t)a2);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  objc_msgSend(v11, "objectForKeyedSubscript:", E5Common::kMpsgGraphDynamicCallableStrKey[0]);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    objc_msgSend(v11, "objectForKeyedSubscript:", E5Common::kSharedResourceManagerStrKey[0]);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v15)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "GetOrCreateResource");
      std::string::basic_string[abi:ne180100]<0>(v77, "MPSGraph segment has Dynamic Callable but a shared resource manager key has not been generated for it.");
      E5RT::Status::Status(v78, 2, v77);
      E5RT::E5RTError::E5RTError(exception, __p, v78);
    }
    objc_msgSend(v11, "objectForKeyedSubscript:", E5Common::kSharedResourceManagerStrKey[0]);
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x19401C808](&v79, objc_msgSend(v16, "UTF8String"));

    v13 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::find<std::string>((_QWORD *)a1, (uint64_t)&v79);
  }
  if (v13)
  {
    v17 = (std::__shared_weak_count *)v13[6];
    if (v17 && (v18 = std::__shared_weak_count::lock(v17)) != 0)
    {
      v19 = v18;
      v20 = v13[5];
      *a6 = v20;
      a6[1] = (uint64_t)v19;
      if (v20)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20) != a3)
        {
          v71 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, "GetOrCreateResource");
          std::string::basic_string[abi:ne180100]<0>(v77, "Invalid resource type. A shared resource of a different type with the specified URI already exists.");
          E5RT::Status::Status(v78, 2, v77);
          E5RT::E5RTError::E5RTError(v71, __p, v78);
        }
        v84 = 4;
        strcpy((char *)__p, "e5rt");
        E5RT::GetE5RTLog((uint64_t)__p);
        v21 = objc_claimAutoreleasedReturnValue();
        if (v84 < 0)
          operator delete(__p[0]);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          v22 = v13 + 2;
          if (*((char *)v13 + 39) < 0)
            v22 = (_QWORD *)*v22;
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = v22;
          _os_log_impl(&dword_190DAF000, v21, OS_LOG_TYPE_INFO, "Loading a shared resource. URI = %s \n", (uint8_t *)__p, 0xCu);
        }

        goto LABEL_102;
      }
    }
    else
    {
      v19 = 0;
      *a6 = 0;
      a6[1] = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove((_QWORD *)a1, v13, (uint64_t)__p);
    v23 = (char *)__p[0];
    __p[0] = 0;
    if (v23)
    {
      if (v83)
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v23 + 6);
        if (v24)
          std::__shared_weak_count::__release_weak(v24);
        if (v23[39] < 0)
          operator delete(*((void **)v23 + 2));
      }
      operator delete(v23);
    }
  }
  else
  {
    v19 = 0;
  }
  switch(a3)
  {
    case 0:
      E5RT::SharedResourceFactory::GetANEFModel(a2, a4, v11, __p);
      v25 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      *(_OWORD *)a6 = v25;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v28 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_87;
      v29 = (unint64_t *)((char *)__p[1] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      break;
    case 1:
      E5RT::SharedResourceFactory::GetANEDriverProgram((uint64_t)a2, __p);
      v56 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      *(_OWORD *)a6 = v56;
      if (v19)
      {
        v57 = (unint64_t *)&v19->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v28 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_87;
      v59 = (unint64_t *)((char *)__p[1] + 8);
      do
        v30 = __ldaxr(v59);
      while (__stlxr(v30 - 1, v59));
      break;
    case 2:
      E5RT::SharedResourceManager::InitializeMILContext((_QWORD *)a1);
      v35 = *(std::__shared_weak_count **)(a1 + 48);
      v75 = *(bnns **)(a1 + 40);
      v76 = v35;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      E5Common::RegisterBnnsOpsets(&v75);
      v38 = v76;
      if (v76)
      {
        v39 = (unint64_t *)&v76->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = *(std::__shared_weak_count **)(a1 + 48);
      v73 = *(_QWORD *)(a1 + 40);
      v74 = v41;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      E5RT::SharedResourceFactory::GetBnnsGraphIr((uint64_t)a2, v11, &v73, __p);
      v44 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v45 = (std::__shared_weak_count *)a6[1];
      *(_OWORD *)a6 = v44;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v49 = (unint64_t *)((char *)__p[1] + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v28 = v74;
      if (!v74)
        goto LABEL_87;
      v51 = (unint64_t *)&v74->__shared_owners_;
      do
        v30 = __ldaxr(v51);
      while (__stlxr(v30 - 1, v51));
      break;
    case 3:
      E5RT::SharedResourceFactory::GetE5Program((uint64_t)a2, __p);
      v52 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      *(_OWORD *)a6 = v52;
      if (v19)
      {
        v53 = (unint64_t *)&v19->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v28 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_87;
      v55 = (unint64_t *)((char *)__p[1] + 8);
      do
        v30 = __ldaxr(v55);
      while (__stlxr(v30 - 1, v55));
      break;
    case 4:
      E5RT::SharedResourceFactory::GetMPSGraphExecutable((std::string *)a2, v11, __p);
      v31 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      *(_OWORD *)a6 = v31;
      if (v19)
      {
        v32 = (unint64_t *)&v19->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v28 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_87;
      v34 = (unint64_t *)((char *)__p[1] + 8);
      do
        v30 = __ldaxr(v34);
      while (__stlxr(v30 - 1, v34));
      break;
    default:
      v72 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "GetOrCreateResource");
      std::string::basic_string[abi:ne180100]<0>(v77, "Invalid shared resource type specified.");
      E5RT::Status::Status(v78, 1, v77);
      E5RT::E5RTError::E5RTError(v72, __p, v78);
  }
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v66 = HIBYTE(v81);
    if (v81 < 0)
      v66 = v80;
    if (v66)
      goto LABEL_90;
LABEL_97:
    __p[0] = a2;
    v61 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (uint64_t)a2, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v63 = *a6;
    v62 = a6[1];
    if (v62)
    {
      v67 = (unint64_t *)(v62 + 16);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    goto LABEL_100;
  }
LABEL_87:
  v60 = HIBYTE(v81);
  if (v81 < 0)
    v60 = v80;
  if (!v60)
    goto LABEL_97;
LABEL_90:
  __p[0] = &v79;
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (uint64_t)&v79, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  v63 = *a6;
  v62 = a6[1];
  if (v62)
  {
    v64 = (unint64_t *)(v62 + 16);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
LABEL_100:
  v69 = (std::__shared_weak_count *)v61[6];
  v61[5] = v63;
  v61[6] = v62;
  if (v69)
    std::__shared_weak_count::__release_weak(v69);
LABEL_102:

  if (SHIBYTE(v81) < 0)
    operator delete(v79);
  std::mutex::unlock(v12);

}

void sub_190E87BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  std::mutex *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  int v37;

  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0)
    operator delete(__p);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v37 & 1) == 0)
    {
LABEL_8:

      if (a26 < 0)
        operator delete(a21);
      std::mutex::unlock(v33);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35);

      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190E884D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E884E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::ProgramLibraryPriv::ProgramLibraryPriv(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  __int128 v10;

  *a1 = &off_1E2D5AF30;
  a1[1] = 0;
  v4 = operator new();
  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  E5RT::ProgramLibraryImpl::ProgramLibraryImpl(v4, (uint64_t)&v10);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (void **)a1[1];
  a1[1] = v4;
  if (v8)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v8);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void sub_190E885C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::ProgramLibrary *v9;
  uint64_t v10;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x19401CD90](v10, 0x10F2C401C59B653);
  E5RT::ProgramLibrary::~ProgramLibrary(v9);
  _Unwind_Resume(a1);
}

void sub_190E885FC(_Unwind_Exception *a1)
{
  E5RT::ProgramLibrary *v1;

  E5RT::ProgramLibrary::~ProgramLibrary(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ProgramLibraryImpl::ProgramLibraryImpl(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  E5RT::ProgramLibraryImpl::InitializeProgramLibrary((E5RT::ProgramLibraryImpl *)a1);
  return a1;
}

void sub_190E88678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, int a13)
{
  uint64_t v13;
  void **v14;
  char v16;

  if (*(char *)(v13 + 87) < 0)
    operator delete(*v14);
  sub_190F74B7C();
  if ((v16 & 1) == 0)
    ((void (*)(char *, uint64_t))off_1E2DCC280[a13])(&a12, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(a1);
}

void E5RT::SharedResourceFactory::GetANEFModel(__int128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  char *v8;
  int v9;
  id v10;

  v7 = a3;
  E5Common::GetANEFModel((std::string::size_type)a1, a2, v7);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v9 = 0;
    v8 = (char *)operator new(0x48uLL);
    std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,_ANEModel * {__strong}&,E5RT::SharedResourceType,std::allocator<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>,0>((uint64_t)v8, a1, &v10, &v9);
    *a4 = v8 + 24;
    a4[1] = v8;

  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }

}

void sub_190E88774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  operator delete(v11);

  _Unwind_Resume(a1);
}

void sub_190E88794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_190E887A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void E5Common::RegisterBnnsOpsets(bnns **a1)
{
  bnns *v2;
  uint64_t v3;
  MIL::MILContext *v4;
  uint64_t v5;
  void *__p[2];
  char v7;

  v2 = *a1;
  v7 = 5;
  strcpy((char *)__p, "bnnsx");
  v3 = (*(uint64_t (**)(bnns *, void **))(*(_QWORD *)v2 + 16))(v2, __p);
  v5 = v3;
  if ((v7 & 0x80000000) == 0)
  {
    if (v3)
      return;
LABEL_5:
    bnns::RegisterOpsets(*a1, v4);
    return;
  }
  operator delete(__p[0]);
  if (!v5)
    goto LABEL_5;
}

void sub_190E88840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *E5RT::SharedResourceManager::InitializeMILContext(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  if (!this[5])
  {
    v1 = this;
    MIL::Opsets::Common::CreateMILContext((MIL::Opsets::Common *)this);
    if (v6)
    {
      v2 = (_QWORD *)operator new();
      *v2 = &unk_1E2DC2E80;
      v2[1] = 0;
      v2[2] = 0;
      v2[3] = v6;
      v3 = (std::__shared_weak_count *)v1[6];
      v1[5] = v6;
      v1[6] = v2;
      if (!v3)
        return 0;
    }
    else
    {
      v3 = (std::__shared_weak_count *)v1[6];
      v1[5] = 0;
      v1[6] = 0;
      if (!v3)
        return 0;
    }
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    return 0;
  }
  return this;
}

void sub_190E88954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *E5RT::SurfaceDescriptor::CreateSurfaceDescriptor@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  void *__p;
  void *v15;
  uint64_t v16;

  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CreateSurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v12, "Invalid surface dimensions. Specified width or height must not be 0.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, &__p, v13);
  }
  __p = 0;
  v15 = 0;
  v16 = 0;
  v8 = operator new();
  E5RT::SurfaceDescriptorImpl::SurfaceDescriptorImpl(v8, a1, a2, a3, (uint64_t)&__p, 1uLL);
  v12[0] = v8;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  v9 = (_QWORD *)operator new();
  v12[0] = 0;
  result = E5RT::OperandDescriptor::OperandDescriptor(v9);
  *v9 = &off_1E2D5AE60;
  v9[1] = v8;
  *a4 = v9;
  return result;
}

void sub_190E88AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x19401CD90](v10, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_190E88AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  v23 = v22;
  MEMORY[0x19401CD90](v23, 0x1010C40037D6C11);
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_190E88B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t E5RT::SurfaceDescriptorImpl::SurfaceDescriptorImpl(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v19;
  void *v20;
  void *exception;
  _QWORD v22[3];
  char v23[8];
  _QWORD v24[3];

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v11 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8);
  v12 = v10 - *(_QWORD *)a5;
  if (v10 != *(_QWORD *)a5)
  {
    if (v12 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - *(_QWORD *)a5);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 48) = v14;
  }
  if (a2 >= 0x22)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "GetSurfaceFormatPlaneCount");
    std::string::basic_string[abi:ne180100]<0>(v22, "Invalid surface format");
    E5RT::Status::Status(v23, 1, v22);
    E5RT::E5RTError::E5RTError(exception, v24, v23);
  }
  v15 = qword_191A7FA68[a2];
  *(_QWORD *)(a1 + 16) = v15;
  v16 = *(_QWORD *)(a5 + 8);
  if (*(_QWORD *)a5 != v16 && v15 != (v16 - *(_QWORD *)a5) >> 3)
  {
    v19 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "SurfaceDescriptorImpl");
    std::string::basic_string[abi:ne180100]<0>(v22, "Invalid custom per row stride. Length of custom strides is not equal to plane count.");
    E5RT::Status::Status(v23, 1, v22);
    E5RT::E5RTError::E5RTError(v19, v24, v23);
  }
  if (a6 < 2)
  {
    if (E5RT::IsMultiSliceFormat(a2))
    {
      v20 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v24, "SurfaceDescriptorImpl");
      std::string::basic_string[abi:ne180100]<0>(v22, "Cannot specify slices < 2 for multi slice format.");
      E5RT::Status::Status(v23, 1, v22);
      E5RT::E5RTError::E5RTError(v20, v24, v23);
    }
  }
  else if (!E5RT::IsMultiSliceFormat(a2))
  {
    v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "SurfaceDescriptorImpl");
    std::string::basic_string[abi:ne180100]<0>(v22, "Cannot specify slices > 1 for non-multi slice format.");
    E5RT::Status::Status(v23, 1, v22);
    E5RT::E5RTError::E5RTError(v17, v24, v23);
  }
  return a1;
}

void sub_190E88E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void **v23;
  void *v24;
  int v25;
  void *v27;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      v27 = *v23;
      if (*v23)
      {
        *(_QWORD *)(v22 + 48) = v27;
        operator delete(v27);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

uint64_t Espresso::analysis_debug_metadata::deserialize(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v10;
  int *v11;
  int v13;
  int v14;
  __int128 v16;
  __int128 *p_p;
  uint64_t v19;
  int v20;
  __int128 *v22;
  __int128 *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  BOOL v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  _OWORD *v39;
  __int128 v40;
  void *v41;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  int v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void *v54[2];
  __int128 v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 __p;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;

  v68 = 0;
  v69 = 0;
  v70 = 0;
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a2 + 32))(*a2, &v68);
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  __p = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  *(_OWORD *)v54 = 0u;
  v55 = 0u;
  v56 = 1065353216;
  v3 = v68;
  v4 = v69;
  if (v68 != v69)
  {
    while (1)
    {
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
        v5 = (uint64_t *)v3;
        switch(*(_BYTE *)(v3 + 23))
        {
          case 4:
            if (*(_DWORD *)v3 == 1701667182)
              goto LABEL_40;
            v6 = *(_DWORD *)v3;
            goto LABEL_9;
          case 6:
            if (*(_DWORD *)v3 != 1684960610 || *(_WORD *)(v3 + 4) != 25964)
              goto LABEL_64;
            goto LABEL_51;
          case 7:
            if (*(_DWORD *)v3 == 1936876918 && *(_DWORD *)(v3 + 3) == 1852795251)
              goto LABEL_43;
            if (*(_DWORD *)v3 != 1685025392 || *(_DWORD *)(v3 + 3) != 1952675172)
              goto LABEL_64;
            goto LABEL_37;
          case 8:
            v10 = *(_QWORD *)v3;
            goto LABEL_55;
          case 0xA:
            goto LABEL_60;
          default:
            goto LABEL_64;
        }
      }
      switch(*(_QWORD *)(v3 + 8))
      {
        case 4:
          if (**(_DWORD **)v3 == 1701667182)
          {
LABEL_40:
            (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(&v46, *a2, v3);
            if (SHIBYTE(v59) < 0)
              operator delete(*((void **)&v58 + 1));
            v16 = v46;
            p_p = (__int128 *)((char *)&v58 + 8);
            goto LABEL_79;
          }
          v6 = **(_DWORD **)v3;
LABEL_9:
          if (v6 != 1752457584)
            goto LABEL_64;
          goto LABEL_43;
        case 6:
          if (**(_DWORD **)v3 != 1684960610 || *(_WORD *)(*(_QWORD *)v3 + 4) != 25964)
            goto LABEL_64;
LABEL_51:
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(&v46, *a2, v3);
          if (SBYTE7(v58) < 0)
            operator delete((void *)v57);
          v57 = v46;
          *(_QWORD *)&v58 = v47;
          goto LABEL_80;
        case 7:
          v11 = *(int **)v3;
          if (**(_DWORD **)v3 == 1936876918 && *(_DWORD *)(*(_QWORD *)v3 + 3) == 1852795251)
          {
LABEL_43:
            (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(&v46, *a2, v3);
            if (SBYTE7(v61) < 0)
              operator delete((void *)v60);
            v16 = v46;
            p_p = &v60;
LABEL_79:
            *p_p = v16;
            *((_QWORD *)p_p + 2) = v47;
            goto LABEL_80;
          }
          v13 = *v11;
          v14 = *(int *)((char *)v11 + 3);
          if (v13 == 1685025392 && v14 == 1952675172)
          {
LABEL_37:
            (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(&v46, *a2, v3);
            if (SBYTE7(v64) < 0)
              operator delete((void *)__p);
            v16 = v46;
            p_p = &__p;
            goto LABEL_79;
          }
LABEL_64:
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 120))(&v52, *a2, v3);
          v49 = 0;
          v50 = 0;
          v51 = 0;
          (*(void (**)(uint64_t, __int128 **))(*(_QWORD *)v52 + 32))(v52, &v49);
          v46 = 0u;
          v47 = 0u;
          v48 = 1065353216;
          v22 = v49;
          v23 = v50;
          while (v22 != v23)
          {
            (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v52 + 112))(&v44, v52, v22);
            v71 = v22;
            v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v46, (uint64_t)v22, (uint64_t)&std::piecewise_construct, &v71);
            v25 = v24 + 5;
            if (*((char *)v24 + 63) < 0)
              operator delete((void *)*v25);
            *(_OWORD *)v25 = v44;
            v25[2] = v45;
            v22 = (__int128 *)((char *)v22 + 24);
          }
          *(_QWORD *)&v44 = v3;
          v26 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v54, v3, (uint64_t)&std::piecewise_construct, (__int128 **)&v44);
          if (v26 + 5 != (uint64_t *)&v46)
          {
            *((_DWORD *)v26 + 18) = v48;
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v26 + 5, (uint64_t *)v47, 0);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v46);
          *(_QWORD *)&v46 = &v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
          v27 = v53;
          if (v53)
          {
            p_shared_owners = (unint64_t *)&v53->__shared_owners_;
            do
              v29 = __ldaxr(p_shared_owners);
            while (__stlxr(v29 - 1, p_shared_owners));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
LABEL_80:
          v3 += 24;
          if (v3 == v4)
            goto LABEL_81;
          break;
        case 8:
          v10 = **(_QWORD **)v3;
LABEL_55:
          if (v10 != 0x657361635F657375)
            goto LABEL_64;
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(&v46, *a2, v3);
          if (SHIBYTE(v65) < 0)
            operator delete(*((void **)&v64 + 1));
          v16 = v46;
          p_p = (__int128 *)((char *)&v64 + 8);
          goto LABEL_79;
        case 0xALL:
          v5 = *(uint64_t **)v3;
LABEL_60:
          v19 = *v5;
          v20 = *((unsigned __int16 *)v5 + 4);
          if (v19 != 0x6B6F745F62646C6DLL || v20 != 28261)
            goto LABEL_64;
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(&v46, *a2, v3);
          if (SHIBYTE(v67) < 0)
            operator delete((void *)v66);
          v16 = v46;
          p_p = &v66;
          goto LABEL_79;
        default:
          goto LABEL_64;
      }
    }
  }
LABEL_81:
  Espresso::analysis_debug_metadata::set_model_metadata((Espresso::analysis_debug_metadata *)a1, (const std::string *)&v57);
  v30 = (_QWORD *)(a1 + 176);
  if ((void **)(a1 + 176) != v54)
  {
    *(_DWORD *)(a1 + 208) = v56;
    v31 = (uint64_t *)v55;
    v32 = *(_QWORD *)(a1 + 184);
    if (v32)
    {
      for (i = 0; i != v32; ++i)
        *(_QWORD *)(*v30 + 8 * i) = 0;
      v34 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      if (v34)
        v35 = v31 == 0;
      else
        v35 = 1;
      if (v35)
      {
        v36 = (_QWORD *)v34;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v34 + 16), (const std::string *)(v31 + 2));
          if ((uint64_t *)v34 != v31)
          {
            *(_DWORD *)(v34 + 72) = *((_DWORD *)v31 + 18);
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((_QWORD *)(v34 + 40), (uint64_t *)v31[7], 0);
          }
          v36 = *(_QWORD **)v34;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi(a1 + 176, v34);
          v31 = (uint64_t *)*v31;
          if (!v36)
            break;
          v34 = (uint64_t)v36;
        }
        while (v31);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(v36);
    }
    for (; v31; v31 = (uint64_t *)*v31)
    {
      v37 = (char *)operator new(0x50uLL);
      v38 = v37;
      *(_QWORD *)&v46 = v37;
      *((_QWORD *)&v46 + 1) = a1 + 192;
      LOBYTE(v47) = 0;
      v39 = v37 + 16;
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 1) = 0;
      if (*((char *)v31 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v37 + 16), (const std::string::value_type *)v31[2], v31[3]);
      }
      else
      {
        v40 = *((_OWORD *)v31 + 1);
        *((_QWORD *)v37 + 4) = v31[4];
        *v39 = v40;
      }
      std::unordered_map<std::string,std::string>::unordered_map((uint64_t)(v38 + 40), (uint64_t)(v31 + 5));
      LOBYTE(v47) = 1;
      *((_QWORD *)v38 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v39);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)v30, v46);
      *(_QWORD *)&v46 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v46);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node((_QWORD *)v55);
  v41 = v54[0];
  v54[0] = 0;
  if (v41)
    operator delete(v41);
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v65) < 0)
    operator delete(*((void **)&v64 + 1));
  if (SBYTE7(v64) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v62) < 0)
    operator delete(*((void **)&v61 + 1));
  if (SBYTE7(v61) < 0)
    operator delete((void *)v60);
  if (SHIBYTE(v59) < 0)
    operator delete(*((void **)&v58 + 1));
  if (SBYTE7(v58) < 0)
    operator delete((void *)v57);
  *(_QWORD *)&v57 = &v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  return 1;
}

void sub_190E8968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)&a32);
  Espresso::model_metadata_t::~model_metadata_t((void **)&a38);
  a38 = v38 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

void E5RT::E5ProgramImpl::LoadBuildInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t (**v19)();
  _QWORD *v20;
  uint64_t (***v21)();
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *exception;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  void *__p[2];
  __int128 v49;
  int v50;
  uint64_t (**v51)();
  void (*v52)(uint64_t@<X0>, _QWORD *@<X8>);
  __int128 **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  v47 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD **)(v4 + 8);
  if (*(_QWORD **)v4 != v6)
  {
    do
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5) == 6)
      {
        if (v46)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, "LoadBuildInfo");
          std::string::basic_string[abi:ne180100]<0>(&v51, "Multiple build info sections found.");
          E5RT::Status::Status(&v45, 8, &v51);
          E5RT::E5RTError::E5RTError(exception, __p, &v45);
        }
        v8 = *v5;
        v7 = (std::__shared_weak_count *)v5[1];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = v47;
        v46 = v8;
        v47 = v7;
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
    if (v46)
    {
      v14 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
      v45 = 0;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
      {
        v15 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
        v16 = *v15;
        v17 = (_QWORD *)operator new();
        *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
        E5RT_FB::BuildInfo::UnPackTo((int *)((char *)v15 + v16), (uint64_t)v17);
        v51 = 0;
        v18 = v45;
        v45 = v17;
        if (v18)
        {
          std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&v45, v18);
          v19 = v51;
          v51 = 0;
          if (v19)
            std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&v51, v19);
        }
        goto LABEL_29;
      }
      __p[0] = &off_1E2DAD1A0;
      __p[1] = E5RT_FB::VerifySizePrefixedBuildInfoBuffer;
      *((_QWORD *)&v49 + 1) = __p;
      v51 = &off_1E2DACEE0;
      v52 = E5RT_FB::UnPackSizePrefixedBuildInfo;
      v53 = (__int128 **)&v51;
      E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::BuildInfoT>(v14, (uint64_t)__p, (uint64_t)&v51);
      v20 = v44;
      v44 = 0;
      v45 = v20;
      v21 = (uint64_t (***)())v53;
      if (v53 == (__int128 **)&v51)
      {
        v22 = 4;
        v21 = &v51;
      }
      else
      {
        if (!v53)
        {
LABEL_24:
          v23 = (void **)*((_QWORD *)&v49 + 1);
          if (*((void ***)&v49 + 1) == __p)
          {
            v24 = 4;
            v23 = __p;
          }
          else
          {
            if (!*((_QWORD *)&v49 + 1))
              goto LABEL_29;
            v24 = 5;
          }
          (*((void (**)(void))*v23 + v24))();
LABEL_29:
          *(_OWORD *)__p = 0u;
          v49 = 0u;
          v50 = 1065353216;
          v25 = (uint64_t *)*v45;
          v26 = (uint64_t *)v45[1];
          if ((uint64_t *)*v45 != v26)
          {
            do
            {
              v27 = *v25;
              v51 = (uint64_t (**)())v27;
              v28 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v27, (uint64_t)&std::piecewise_construct, (__int128 **)&v51);
              std::string::operator=((std::string *)(v28 + 5), (const std::string *)(v27 + 24));
              ++v25;
            }
            while (v25 != v26);
          }
          v29 = operator new(0x50uLL);
          v29[1] = 0;
          v29[2] = 0;
          *v29 = &off_1E2DB5CF0;
          E5RT::E5BuildInfoImpl::E5BuildInfoImpl((E5RT::E5BuildInfoImpl *)(v29 + 3));
          v51 = (uint64_t (**)())(v29 + 3);
          v52 = (void (*)(uint64_t@<X0>, _QWORD *@<X8>))v29;
          E5RT::E5BuildInfoImpl::SetBuildInfoEntries((uint64_t)(v29 + 3), (uint64_t *)__p);
          v51 = 0;
          v52 = 0;
          v30 = *(std::__shared_weak_count **)(a1 + 72);
          *(_QWORD *)(a1 + 64) = v29 + 3;
          *(_QWORD *)(a1 + 72) = v29;
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v33 = (std::__shared_weak_count *)v52;
          if (v52)
          {
            v34 = (unint64_t *)((char *)v52 + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v36 = (char *)v49;
          if (!(_QWORD)v49)
          {
LABEL_48:
            v38 = __p[0];
            __p[0] = 0;
            if (v38)
              operator delete(v38);
            v39 = v45;
            v45 = 0;
            if (v39)
              std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&v45, v39);
            goto LABEL_52;
          }
          while (1)
          {
            v37 = *(char **)v36;
            if (v36[63] < 0)
            {
              operator delete(*((void **)v36 + 5));
              if ((v36[39] & 0x80000000) == 0)
                goto LABEL_44;
LABEL_47:
              operator delete(*((void **)v36 + 2));
              operator delete(v36);
              v36 = v37;
              if (!v37)
                goto LABEL_48;
            }
            else
            {
              if (v36[39] < 0)
                goto LABEL_47;
LABEL_44:
              operator delete(v36);
              v36 = v37;
              if (!v37)
                goto LABEL_48;
            }
          }
        }
        v22 = 5;
      }
      (*v21)[v22]();
      goto LABEL_24;
    }
  }
LABEL_52:
  v40 = v47;
  if (v47)
  {
    v41 = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_190E89C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  _QWORD *v27;
  _QWORD *v29;

  a13 = 0;
  std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&a13, v27);
  v29 = a10;
  a10 = 0;
  if (v29)
  {
    std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&a10, v29);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x40uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v26[7] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190E8A230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_190E8A244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;

  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_7;
  v4 = *(void ***)(a1 + 16);
  if (v4)
  {
    do
    {
      v16 = (void **)*v4;
      if (*((char *)v4 + 63) < 0)
      {
        operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0)
LABEL_17:
          operator delete(v4[2]);
      }
      else if (*((char *)v4 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v4);
      v4 = v16;
    }
    while (v16);
  }
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
  }
  *(_QWORD *)(a1 + 24) = 0;
LABEL_7:
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::BuildInfoT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  void *exception;
  _QWORD v10[3];
  _BYTE v11[8];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  v13 = 257;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (v3 >= 0x7FFFFFFB)
    sub_19101237C();
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    goto LABEL_8;
  if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
LABEL_8:
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v12, v10);
}

void sub_190E8A4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t E5RT_FB::BuildInfo::Verify(int *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 *v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int *v27;
  char *v28;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  unsigned int *v36;

  v2 = *(_QWORD *)a2;
  v3 = (char *)a1 - *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 - 4;
  v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9)
    return 0;
  v11 = *a1;
  v12 = *(_DWORD *)(a2 + 40);
  v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  v15 = *(_DWORD *)(a2 + 16);
  v14 = *(_DWORD *)(a2 + 20);
  v16 = v12 + 1 > v15 || v13 > v14;
  if (v16)
    return 0;
  v17 = (unint64_t)&v3[-v11];
  if ((((_DWORD)v3 - (_DWORD)v11) & 1) != 0)
  {
    if (v4 || v7 - 2 < v17)
      return 0;
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1)
    return 0;
  v9 = v7 >= v18;
  v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17)
    return 0;
  v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    v22 = v21[2];
    if (v21[2])
    {
      v23 = (unint64_t)&v3[v22];
      v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25)
        return 0;
      v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26)
        return 0;
      v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      v28 = (char *)v27 - v2;
      v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30)
        return 0;
      v31 = *v27;
      if (v31 > 0x1FFFFFFE)
        return 0;
      v32 = 4 * v31 + 4;
      v16 = v7 > v32;
      v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28)
        return 0;
      if ((_DWORD)v31)
      {
        v35 = 0;
        v36 = v27 + 1;
        while ((E5RT_FB::KeyValuePair::Verify((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t E5RT_FB::KeyValuePair::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v28;
  char *v29;
  BOOL v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v40;
  uint64_t v41;
  unsigned int *v42;
  char *v43;
  BOOL v44;
  _BOOL4 v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;

  v2 = *a2;
  v3 = (char *)a1 - *a2;
  v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = a2[1];
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 10);
  v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5))
    return 0;
  v13 = (unint64_t)&v3[-v9];
  if ((((_DWORD)v3 - (_DWORD)v9) & 1) != 0)
  {
    v14 = 0;
    if (v4 || v6 - 2 < v13)
      return v14;
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1)
    return 0;
  v8 = v6 >= v15;
  v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13)
    return 0;
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  v19 = *v18;
  if (v19 < 5)
    return 0;
  v20 = v18[2];
  if (!v18[2])
    return 0;
  v14 = 0;
  v21 = &v3[v20];
  v23 = ((unint64_t)&v3[v20] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v21 && v23)
  {
    v24 = *(unsigned int *)&v21[v2];
    if ((int)v24 < 1)
      return 0;
    v25 = (unint64_t)&v21[v24];
    v26 = v6 - 1;
    if (v6 - 1 < v25)
      return 0;
    v14 = 0;
    v28 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    v29 = (char *)v28 - v2;
    v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
    v31 = v30;
    if (v7 >= (unint64_t)v29 && v31)
    {
      v32 = *v28;
      if (v32 > 0x7FFFFFFE)
        return 0;
      v33 = v32 + 4;
      v34 = &v29[v32 + 4];
      v35 = v26 >= (unint64_t)v34 && v6 > v33;
      v36 = v35 && v6 - v33 >= (unint64_t)v29;
      if (!v36 || v34[v2])
        return 0;
      if (v19 >= 7)
      {
        v37 = v18[3];
        if (v37)
        {
          v14 = 0;
          v38 = (unint64_t)&v3[v37];
          v40 = (v38 & 3) == 0 || v4 == 0;
          if (v7 < v38)
            return v14;
          if (!v40)
            return v14;
          v14 = 0;
          v41 = *(unsigned int *)(v2 + v38);
          if ((int)v41 < 1 || v26 < v38 + v41)
            return v14;
          v14 = 0;
          v42 = (unsigned int *)((char *)a1 + v37 + *(unsigned int *)((char *)a1 + v37));
          v43 = (char *)v42 - v2;
          v44 = (((unint64_t)v42 - v2) & 3) == 0 || v4 == 0;
          v45 = v44;
          if (v7 < (unint64_t)v43 || !v45)
            return v14;
          v46 = *v42;
          if (v46 > 0x7FFFFFFE)
            return 0;
          v14 = 0;
          v47 = v46 + 4;
          v48 = &v43[v46 + 4];
          if (v26 < (unint64_t)v48 || v6 <= v47 || v6 - v47 < (unint64_t)v43)
            return v14;
          if (v48[v2])
            return 0;
        }
      }
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v14;
}

uint64_t E5RT_FB::VerifySizePrefixedBuildInfoBuffer(unsigned int **a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = (unint64_t)a1[1];
  if (v1 >= 5
    && ((v2 = (uint64_t)*a1, v1 >= 0xC) ? (v3 = v1 - 4 == **a1) : (v3 = 0),
        v3 && (v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return E5RT_FB::BuildInfo::Verify((int *)(v4 + v5), (uint64_t)a1);
  }
  else
  {
    return 0;
  }
}

void E5RT_FB::UnPackSizePrefixedBuildInfo(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  _QWORD *v4;

  v3 = (int *)(a1 + 4 + *(unsigned int *)(a1 + 4));
  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  E5RT_FB::BuildInfo::UnPackTo(v3, (uint64_t)v4);
  *a2 = v4;
}

void sub_190E8AA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  a10 = 0;
  std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void E5RT_FB::BuildInfo::UnPackTo(int *a1, uint64_t a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _OWORD *v21;
  __n128 v22;
  uint64_t v23;

  v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 < 5u || (v4 = v3[2]) == 0)
  {
    v9 = *(_QWORD **)a2;
    v10 = *(_QWORD **)(a2 + 8);
    if (v10 == *(_QWORD **)a2)
      return;
    while (1)
    {
      v12 = *--v10;
      v11 = v12;
      *v10 = 0;
      if (!v12)
        goto LABEL_8;
      if (*(char *)(v11 + 47) < 0)
      {
        operator delete(*(void **)(v11 + 24));
        if (*(char *)(v11 + 23) < 0)
LABEL_14:
          operator delete(*(void **)v11);
      }
      else if (*(char *)(v11 + 23) < 0)
      {
        goto LABEL_14;
      }
      MEMORY[0x19401CD90](v11, 0x1012C403467C318);
LABEL_8:
      if (v10 == v9)
      {
        *(_QWORD *)(a2 + 8) = v9;
        return;
      }
    }
  }
  v5 = (int *)((char *)a1 + v4 + *(unsigned int *)((char *)a1 + v4));
  v6 = *v5;
  v7 = *(_QWORD **)(a2 + 8);
  v8 = ((uint64_t)v7 - *(_QWORD *)a2) >> 3;
  if (v6 > v8)
  {
    std::vector<std::unique_ptr<E5RT_FB::KeyValuePairT>>::__append((void **)a2, v6 - v8);
    goto LABEL_27;
  }
  if (v6 < v8)
  {
    v13 = *(_QWORD *)a2 + 8 * v6;
    while (1)
    {
      do
      {
        if (v7 == (_QWORD *)v13)
        {
          *(_QWORD *)(a2 + 8) = v13;
          goto LABEL_27;
        }
        v15 = *--v7;
        v14 = v15;
        *v7 = 0;
      }
      while (!v15);
      if (*(char *)(v14 + 47) < 0)
      {
        operator delete(*(void **)(v14 + 24));
        if ((*(char *)(v14 + 23) & 0x80000000) == 0)
          goto LABEL_18;
      }
      else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(*(void **)v14);
LABEL_18:
      MEMORY[0x19401CD90](v14, 0x1012C403467C318);
    }
  }
LABEL_27:
  if (*v5)
  {
    v16 = 0;
    v17 = v5 + 1;
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v16);
      v19 = *v17;
      v20 = (int *)((char *)v17 + v19);
      if (v18)
      {
        CpuInferenceOp::UnPackTo((int *)((char *)v17 + v19), v18);
      }
      else
      {
        v21 = (_OWORD *)operator new();
        *v21 = 0u;
        v21[1] = 0u;
        v21[2] = 0u;
        v22.n128_f64[0] = CpuInferenceOp::UnPackTo(v20, (uint64_t)v21);
        v23 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v16);
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v16) = v21;
        if (v23)
        {
          if (*(char *)(v23 + 47) < 0)
          {
            operator delete(*(void **)(v23 + 24));
            if ((*(char *)(v23 + 23) & 0x80000000) == 0)
              goto LABEL_35;
          }
          else if ((*(char *)(v23 + 23) & 0x80000000) == 0)
          {
LABEL_35:
            MEMORY[0x19401CD90](v23, 0x1012C403467C318, v22);
            goto LABEL_30;
          }
          operator delete(*(void **)v23);
          goto LABEL_35;
        }
      }
LABEL_30:
      ++v16;
      ++v17;
    }
    while (v16 < *v5);
  }
}

void sub_190E8AC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](v1);
  MEMORY[0x19401CD90](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<E5RT_FB::KeyValuePairT>>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
    return;
  }
  v7 = (char *)*a1;
  v8 = v5 - (_BYTE *)*a1;
  v9 = v8 >> 3;
  v10 = (v8 >> 3) + a2;
  if (v10 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - v7;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[8 * v9];
  v15 = 8 * a2;
  v16 = &v13[8 * v12];
  bzero(v14, v15);
  v17 = &v14[v15];
  if (v5 == v7)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v5)
      goto LABEL_35;
    return;
  }
  v18 = v5 - v7 - 8;
  if (v18 < 0x78 || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
    goto LABEL_42;
  v19 = (v18 >> 3) + 1;
  v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v14 -= v20;
  v6 = &v5[-v20];
  v21 = v5 - 16;
  v22 = &v13[8 * v9 - 16];
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v25 = *((_OWORD *)v21 - 1);
    v24 = *(_OWORD *)v21;
    *((_OWORD *)v21 - 1) = 0uLL;
    *(_OWORD *)v21 = 0uLL;
    *((_OWORD *)v22 - 1) = v25;
    *(_OWORD *)v22 = v24;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_42:
    do
    {
      v26 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v14 - 1) = v26;
      v14 -= 8;
    }
    while (v6 != v7);
  }
  v27 = (char *)*a1;
  v6 = (char *)a1[1];
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v6 != v27)
  {
    while (1)
    {
      v29 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      v28 = v29;
      *(_QWORD *)v6 = 0;
      if (!v29)
        goto LABEL_26;
      if (*(char *)(v28 + 47) < 0)
      {
        operator delete(*(void **)(v28 + 24));
        if (*(char *)(v28 + 23) < 0)
LABEL_32:
          operator delete(*(void **)v28);
      }
      else if (*(char *)(v28 + 23) < 0)
      {
        goto LABEL_32;
      }
      MEMORY[0x19401CD90](v28, 0x1012C403467C318);
LABEL_26:
      if (v6 == v27)
      {
        v6 = v27;
        break;
      }
    }
  }
  if (v6)
LABEL_35:
    operator delete(v6);
}

E5RT::E5BuildInfoImpl *E5RT::E5BuildInfoImpl::E5BuildInfoImpl(E5RT::E5BuildInfoImpl *this)
{
  _QWORD *v2;

  v2 = E5RT::E5BuildInfo::E5BuildInfo(this);
  E5RT::E5BuildInfoBuilder::E5BuildInfoBuilder(v2 + 1);
  *(_QWORD *)this = &off_1E2D5A068;
  *((_QWORD *)this + 1) = &unk_1E2D5A0A0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  return this;
}

void sub_190E8AF50(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl *v1;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *E5RT::E5BuildInfoBuilder::E5BuildInfoBuilder(_QWORD *this)
{
  *this = off_1E2D5AEA8;
  return this;
}

void E5RT::E5BuildInfoImpl::SetBuildInfoEntries(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a1 + 16, a2);
}

_QWORD *E5RT::E5BuildInfo::E5BuildInfo(_QWORD *this)
{
  *this = off_1E2D59B88;
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_8:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_8;
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11[3];

  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (char *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
    {
      while (a2 != a3)
      {
        std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 2));
        std::string::operator=((std::string *)(v8 + 40), (const std::string *)(a2 + 5));
        v9 = *(char **)v8;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, (uint64_t)v8);
        a2 = (uint64_t *)*a2;
        v8 = v9;
        if (!v9)
          goto LABEL_7;
      }
      while (1)
      {
        v10 = *(char **)v8;
        if (v8[63] < 0)
        {
          operator delete(*((void **)v8 + 5));
          if (v8[39] < 0)
LABEL_14:
            operator delete(*((void **)v8 + 2));
        }
        else if (v8[39] < 0)
        {
          goto LABEL_14;
        }
        operator delete(v8);
        v8 = v10;
        if (!v10)
          return;
      }
    }
  }
LABEL_7:
  while (a2 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, (uint64_t)(a2 + 2), (uint64_t)v11);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v11[0]);
    a2 = (uint64_t *)*a2;
  }
}

void sub_190E8B144(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_190E8B160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p)
{
  void **v11;

  v11 = __p;
  __p = 0;
  if (v11)
  {
    sub_190EFF844((uint64_t)&__p, v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  _QWORD *v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v39[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v39, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v10, a3, (uint64_t)v39);
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    v28 = 1;
    if (v11 >= 3)
      v28 = (v11 & (v11 - 1)) != 0;
    v29 = v28 | (2 * v11);
    v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v27)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v27)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v36 & v10;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v36 & v10));
      if (v27)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v39[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v39[0])
    {
      v37 = *(_QWORD *)(*(_QWORD *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11)
          v37 %= v11;
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v27)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v39[0] = *v27;
  *v27 = v39[0];
LABEL_89:
  v14 = (uint64_t *)v39[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_190E8B598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *inserted;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  char v16;

  v4 = (_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  v11 = (int8x8_t)a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v11)
      v12 %= *(_QWORD *)&v11;
  }
  else
  {
    v12 &= *(_QWORD *)&v11 - 1;
  }
  if (!inserted)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_25;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
LABEL_24:
    *(_QWORD *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(_QWORD *)a2 = *inserted;
  *inserted = a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
    if (v14 != v12)
      goto LABEL_24;
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x50uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = (std::string *)(v26 + 16);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *((_DWORD *)v26 + 18) = 1065353216;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_190E8BB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190E8BBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t Espresso::net_fast_reshaper::net_fast_reshaper(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 **v12;
  __int128 **v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 *v37;

  v4 = *a2;
  *(_QWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (uint64_t *)(a1 + 8);
  v6 = (uint64_t *)(a1 + 32);
  v7 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  Espresso::net::get_analysis_if_existing<Espresso::pass_blob_name_indexing_result>(&v35, v4);
  v9 = v35;
  v8 = v36;
  if (!v36)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_5:
    if (v9)
      goto LABEL_8;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v9)
LABEL_6:
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(*a2);
LABEL_8:
  v12 = (__int128 **)Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>(*(_QWORD *)a1);
  v13 = v12;
  v14 = (uint64_t *)(v12 + 16);
  if (v5 != (uint64_t *)(v12 + 16))
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v5, v12[16], v12[17], ((char *)v12[17] - (char *)v12[16]) >> 6);
  if (v6 != v14)
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v6, v13[16], v13[17], ((char *)v13[17] - (char *)v13[16]) >> 6);
  v15 = (unint64_t)v13[5];
  v17 = *(_BYTE **)(a1 + 56);
  v16 = *(char **)(a1 + 64);
  v18 = (v16 - v17) >> 3;
  if (v15 <= v18)
  {
    if (v15 >= v18)
      goto LABEL_30;
    v28 = &v17[8 * v15];
    goto LABEL_29;
  }
  v19 = v15 - v18;
  v20 = *(_QWORD *)(a1 + 72);
  if (v15 - v18 <= (v20 - (uint64_t)v16) >> 3)
  {
    bzero(*(void **)(a1 + 64), 8 * v19);
    v28 = &v16[8 * v19];
LABEL_29:
    *(_QWORD *)(a1 + 64) = v28;
    goto LABEL_30;
  }
  if (v15 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v21 = v20 - (_QWORD)v17;
  if (v21 >> 2 > v15)
    v15 = v21 >> 2;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
    v22 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v22 = v15;
  if (v22 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v23 = (char *)operator new(8 * v22);
  v24 = &v23[8 * v18];
  v25 = &v23[8 * v22];
  bzero(v24, 8 * v19);
  v26 = &v24[8 * v19];
  if (v16 != v17)
  {
    do
    {
      v27 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v24 - 1) = v27;
      v24 -= 8;
    }
    while (v16 != v17);
    v16 = *(char **)(a1 + 56);
  }
  *(_QWORD *)(a1 + 56) = v24;
  *(_QWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 72) = v25;
  if (v16)
    operator delete(v16);
LABEL_30:
  std::vector<BOOL>::resize(v7, (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 6);
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 184);
  if (v29 != (_QWORD *)(*(_QWORD *)a1 + 192))
  {
    v30 = (uint64_t)(v13 + 2);
    do
    {
      v37 = (__int128 *)(v29 + 4);
      *(_QWORD *)(*(_QWORD *)(a1 + 56)
                + 8
                * *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, (unsigned __int8 *)v29 + 32, (uint64_t)&std::piecewise_construct, &v37)+ 10)) = v29;
      v31 = (_QWORD *)v29[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v29[2];
          v33 = *v32 == (_QWORD)v29;
          v29 = v32;
        }
        while (!v33);
      }
      v29 = v32;
    }
    while (v32 != (_QWORD *)(*(_QWORD *)a1 + 192));
  }
  return a1;
}

void sub_190E8BE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  if (*v10)
    operator delete(*v10);
  v12 = *(void **)(v9 + 56);
  if (v12)
  {
    *(_QWORD *)(v9 + 64) = v12;
    operator delete(v12);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint8_t buf[4];
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBEA40;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2DA1080;
  v3 = (_QWORD *)((char *)v2 + 24);
  v13 = (_QWORD *)((char *)v2 + 24);
  v14 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v16 = (unint64_t)"N8Espresso44pass_update_absolute_indexes_after_transformE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v12 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v12);
  if (v12)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v16 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso48analysis_update_absolute_indexes_after_transformE");
  }
  v6 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_190E8C09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::pass_update_absolute_indexes_after_transform::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_update_absolute_indexes_after_transform::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const void *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  __int128 *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 *v49;
  __int128 *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 *v55[2];
  __int128 *v56;
  std::__shared_weak_count *v57;
  __int128 *v58;
  std::__shared_weak_count *v59;
  void *__p;
  std::__shared_weak_count *v61;
  char v62;
  __int128 v63;
  char v64;
  __int128 *v65;

  Espresso::net::get_analysis_if_existing<Espresso::pass_blob_name_indexing_result>(&v63, (uint64_t)a1);
  v5 = v63;
  if (*((_QWORD *)&v63 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  if ((_QWORD)v5)
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a1);
  Espresso::net::get_analysis_if_existing<Espresso::control_flow_graph>(&v63, (uint64_t)a1);
  v8 = v63;
  if (*((_QWORD *)&v63 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 16))(*((_QWORD *)&v8 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
      if ((_QWORD)v8)
        goto LABEL_13;
LABEL_84:
      *(_BYTE *)a2 = 0;
      goto LABEL_85;
    }
  }
  if (!(_QWORD)v8)
    goto LABEL_84;
LABEL_13:
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear((_QWORD *)a1 + 111);
  v63 = 0uLL;
  v64 = 0;
  v11 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + v12) + 64) + 240);
      std::string::basic_string[abi:ne180100]<0>(&__p, "basic_block_head");
      v16 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
      if (v16)
        v17 = *((_DWORD *)v16 + 10);
      else
        v17 = 0;
      if (v62 < 0)
        operator delete(__p);
      if (v17 == 1)
      {
        v64 = 0;
        v13 = v14;
        v63 = v14;
      }
      v18 = *((_QWORD *)a1 + 4);
      v19 = v14 + 1;
      if (v14 == ((*((_QWORD *)a1 + 5) - v18) >> 4) - 1)
        goto LABEL_29;
      v20 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + v12 + 16) + 64) + 240);
      std::string::basic_string[abi:ne180100]<0>(&__p, "basic_block_head");
      v21 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v20, (unsigned __int8 *)&__p);
      if (v21)
        v22 = *((_DWORD *)v21 + 10);
      else
        v22 = 0;
      if (v62 < 0)
        operator delete(__p);
      if (v22 == 1)
      {
LABEL_29:
        *((_QWORD *)&v63 + 1) = v14 + 1;
        v23 = std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)a1 + 222, v13, &v63);
        *(_OWORD *)(v23 + 3) = v63;
        *((_BYTE *)v23 + 40) = v64;
      }
      v11 = *((_QWORD *)a1 + 4);
      v12 += 16;
      ++v14;
    }
    while (v19 < (*((_QWORD *)a1 + 5) - v11) >> 4);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear((uint64_t)a1 + 928);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)a1 + 928, vcvtps_u32_f32((float)(unint64_t)((uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 4) / *((float *)a1 + 240)));
  v24 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v24)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      __p = (void *)(*(_QWORD *)(v24 + v25) + 16);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 928, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[5] = v26++;
      v24 = *((_QWORD *)a1 + 4);
      v27 = *((_QWORD *)a1 + 5);
      v25 += 16;
    }
    while (v26 < (v27 - v24) >> 4);
    if (v27 != v24)
    {
      v28 = 0;
      while (1)
      {
        v29 = *(_QWORD *)(v24 + 16 * v28);
        v30 = *(const void **)(v29 + 64);
        if (!v30)
          break;
        if (v31)
        {
          v32 = *(std::__shared_weak_count **)(v29 + 72);
          __p = v31;
          v61 = v32;
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
          }
          v58 = (__int128 *)(v31 + 296);
          *((_QWORD *)v31 + 40) = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 928, (uint64_t)(v31 + 296), (uint64_t)&std::piecewise_construct, &v58)[5];
          if (!v32)
            goto LABEL_65;
LABEL_61:
          v44 = (unint64_t *)&v32->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          goto LABEL_65;
        }
        __p = 0;
        v61 = 0;
        if (!v39)
        {
          v58 = 0;
          v59 = 0;
          if (v46)
          {
            v35 = *(std::__shared_weak_count **)(v29 + 72);
            v56 = v46;
            v57 = v35;
            if (v35)
            {
              v47 = (unint64_t *)&v35->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            v55[0] = (__int128 *)((char *)v46 + 328);
            *((_QWORD *)v46 + 44) = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 928, (uint64_t)v46 + 328, (uint64_t)&std::piecewise_construct, v55)[5];
            if (!v35)
            {
LABEL_49:
              v38 = v59;
              if (!v59)
                goto LABEL_60;
LABEL_56:
              v42 = (unint64_t *)&v38->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
              goto LABEL_60;
            }
LABEL_45:
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
            goto LABEL_49;
          }
          v56 = 0;
          v57 = 0;
          if (v49)
          {
            v50 = *(__int128 **)(v29 + 72);
            v55[0] = v49;
            v55[1] = v50;
            if (v50)
            {
              v51 = (unint64_t *)v50 + 1;
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            v65 = (__int128 *)((char *)v49 + 296);
            *((_QWORD *)v49 + 40) = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 928, (uint64_t)v49 + 296, (uint64_t)&std::piecewise_construct, &v65)[5];
            if (v50)
            {
              v53 = (unint64_t *)v50 + 1;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v50 + 16))(v50);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v50);
              }
            }
          }
LABEL_44:
          v35 = v57;
          if (!v57)
            goto LABEL_49;
          goto LABEL_45;
        }
        v38 = *(std::__shared_weak_count **)(v29 + 72);
        v58 = v39;
        v59 = v38;
        if (v38)
        {
          v40 = (unint64_t *)&v38->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v56 = (__int128 *)((char *)v39 + 296);
        *((_QWORD *)v39 + 40) = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 928, (uint64_t)v39 + 296, (uint64_t)&std::piecewise_construct, &v56)[5];
        if (v38)
          goto LABEL_56;
LABEL_60:
        v32 = v61;
        if (v61)
          goto LABEL_61;
LABEL_65:
        ++v28;
        v24 = *((_QWORD *)a1 + 4);
        if (v28 >= (*((_QWORD *)a1 + 5) - v24) >> 4)
          goto LABEL_82;
      }
      __p = 0;
      v61 = 0;
      v58 = 0;
      v59 = 0;
      v56 = 0;
      v57 = 0;
      goto LABEL_44;
    }
  }
LABEL_82:
  *(_BYTE *)a2 = 1;
LABEL_85:
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_190E8C67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void Espresso::net::get_analysis_if_existing<Espresso::pass_blob_name_indexing_result>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a2 + 1120), (uint64_t)&v14);
  v4 = v3;
  if (v3)
  {
    v5 = (const void *)v3[3];
    v6 = (std::__shared_weak_count *)v4[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5
    {
      *a1 = v9;
      a1[1] = v6;
      if (!v6)
        return;
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (!v6)
        return;
    }
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_190E8C7C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::net::get_analysis_if_existing<Espresso::control_flow_graph>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a2 + 1120), (uint64_t)&v14);
  v4 = v3;
  if (v3)
  {
    v5 = (const void *)v3[3];
    v6 = (std::__shared_weak_count *)v4[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5
    {
      *a1 = v9;
      a1[1] = v6;
      if (!v6)
        return;
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (!v6)
        return;
    }
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_190E8C8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(uint64_t a1)
{
  Espresso *v2;
  _QWORD *v3;
  const char *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint8_t buf[4];
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBCF20;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = &off_1E2D903A8;
  v3 = (_QWORD *)((char *)v2 + 24);
  v13 = (_QWORD *)((char *)v2 + 24);
  v14 = (std::__shared_weak_count *)v2;
  Espresso::espresso_os_log_subsystem(v2, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v16 = (unint64_t)"N8Espresso23pass_blob_name_indexingE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v3 + 24))(buf, v3, a1);
  v12 = 0;
  (*(void (**)(_QWORD *, char *))(*v3 + 16))(v3, &v12);
  if (v12)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v16 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso30pass_blob_name_indexing_resultE");
  }
  v6 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_190E8CA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::net::set_analysis<Espresso::analysis_result>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  std::runtime_error *exception;
  uint64_t v6;
  std::string v7;

  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v7, "Null analysis");
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_QWORD *)(*(_QWORD *)*a2 - 8);
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v6;
  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(a1 + 1120, (uint64_t)&v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v3 + 3, *a2, a2[1]);
}

void sub_190E8CB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD **v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD v33[2];
  char v34;

  v7 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v8 = v7;
  if (v7 < 0)
  {
    v9 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v12)
        v4 = v8 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v8;
    }
    v15 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = (_QWORD *)*i)
      {
        v17 = i[1];
        if (v17 == v8)
        {
          if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(i[2] + 8), v7))
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  v33[0] = i;
  v33[1] = a1 + 16;
  *i = 0;
  i[1] = v8;
  v19 = **a4;
  i[3] = 0;
  i[4] = 0;
  i[2] = v19;
  v34 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v12 && (float)(v21 * (float)v12) >= v20)
  {
    v8 = v4;
  }
  else
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v12)
      goto LABEL_34;
    if (prime < v12)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v12)
LABEL_34:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12)
        v8 %= v12;
    }
    else
    {
      v8 &= v12 - 1;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v30)
  {
    *i = *v30;
LABEL_57:
    *v30 = i;
    goto LABEL_58;
  }
  *i = *v18;
  *v18 = i;
  *(_QWORD *)(v29 + 8 * v8) = v18;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v31 >= v12)
        v31 %= v12;
    }
    else
    {
      v31 &= v12 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_57;
  }
LABEL_58:
  v33[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
  return i;
}

void sub_190E8CEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::pass_blob_name_indexing::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void Espresso::BNNSEngine::context::network_transform_pre_allocation(Espresso::BNNSEngine::context *this, Espresso::net *a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  const std::string *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *size;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  char *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  const void *v63;
  void *v64;
  std::__shared_weak_count *v65;
  void **v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _DWORD *v77;
  unint64_t v78;
  _DWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  _DWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  int v89;
  _DWORD *v90;
  _DWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  int v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _DWORD *v101;
  _QWORD *v102;
  _DWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  int *v106;
  int *v107;
  unint64_t v108;
  uint64_t v109;
  int *v110;
  Espresso::BNNSEngine::context *v111;
  int v112;
  _BOOL4 v113;
  _BOOL4 v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t **v117;
  uint64_t **v118;
  uint64_t **v119;
  uint64_t **v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  _DWORD *v148;
  _DWORD *v149;
  int v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  __int128 v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  const void *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  int v183;
  uint64_t **v184;
  _QWORD *v185;
  __int128 *v186;
  uint64_t **v187;
  unint64_t v188;
  uint64_t v189;
  const void *v190;
  char *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  __int128 *v195;
  __int128 v196;
  __int128 v197;
  std::vector<std::string> *v198;
  uint64_t i;
  _QWORD *v200;
  _QWORD *v201;
  std::vector<std::string> *v202;
  std::vector<std::string> *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  int v214;
  uint64_t **v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  BOOL v234;
  _DWORD *v235;
  _DWORD *v236;
  int v237;
  int *v238;
  int *v239;
  int v240;
  int v241;
  std::string::size_type v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  int v265;
  uint64_t **v266;
  uint64_t **v267;
  uint64_t *v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  BOOL v285;
  _DWORD *v286;
  _DWORD *v287;
  int v288;
  int *v289;
  int *v290;
  int v291;
  int v292;
  std::string::size_type v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  _BOOL4 v314;
  _QWORD *v315;
  unint64_t v316;
  uint64_t **v317;
  uint64_t **v318;
  uint64_t **v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  uint64_t v332;
  void *v333;
  uint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  void *v341;
  uint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  _DWORD *v348;
  _DWORD *v349;
  int v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  std::string *__str;
  std::string *v377;
  char *v378;
  int v379;
  char *v380;
  char *v381;
  _QWORD *v382;
  _QWORD *v383;
  _QWORD *v384;
  _QWORD v385[6];
  _QWORD v386[5];
  _QWORD v387[2];
  void (*v388)(uint64_t, __int128 *);
  void *v389;
  Espresso::BNNSEngine::context *v390;
  Espresso::net *v391;
  _QWORD v392[2];
  void (*v393)(uint64_t, __int128 *);
  void *v394;
  Espresso::BNNSEngine::context *v395;
  Espresso::net *v396;
  _QWORD v397[2];
  void (*v398)(uint64_t, __int128 *);
  void *v399;
  Espresso::BNNSEngine::context *v400;
  Espresso::net *v401;
  _QWORD v402[2];
  void (*v403)(uint64_t, __int128 *);
  void *v404;
  Espresso::BNNSEngine::context *v405;
  Espresso::net *v406;
  _QWORD v407[5];
  unint64_t v408;
  unint64_t v409;
  unint64_t *v410;
  char *v411;
  std::__shared_weak_count *v412;
  char *v413;
  __int128 v414;
  uint64_t *v415;
  _QWORD *v416;
  uint64_t *v417;
  _QWORD *v418;
  std::string *v419;
  std::__shared_weak_count *v420;
  __int128 __p;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  int v429;
  Espresso::net *v430;
  std::string v431;
  std::string v432;
  __int128 v433;
  uint64_t v434;
  _QWORD v435[3];

  v435[0] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 568))
  {
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a2);
    v3 = (char *)Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
    __p = 0uLL;
    *(_QWORD *)&v422 = 0;
    v4 = *((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 5) != v4)
    {
      v5 = v3;
      v6 = 0;
      v378 = (char *)a2 + 96;
      v380 = (char *)a2 + 56;
      v377 = (std::string *)(v3 + 16);
      while (1)
      {
        v7 = *(_OWORD *)(v4 + 16 * v6);
        *(_OWORD *)&v431.__r_.__value_.__l.__data_ = v7;
        if (*((_QWORD *)&v7 + 1))
        {
          v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v10 = v7;
        v11 = *(const void **)(v7 + 64);
        if (!v11)
          goto LABEL_34;
        if (!v12)
          goto LABEL_34;
        v13 = *(std::__shared_weak_count **)(v10 + 72);
        *(_QWORD *)&v414 = v12;
        *((_QWORD *)&v414 + 1) = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        v16 = (int *)(*(uint64_t (**)(void *))(*(_QWORD *)v12 + 384))(v12);
        v17 = *v16;
        v18 = v16[1];
        v19 = v16[2];
        if (v13)
        {
          v20 = (unint64_t *)&v13->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        *(_QWORD *)&v414 = v6;
        v22 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v380, v6, &v414)[3];
        *(_QWORD *)&v414 = v6;
        v23 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v378, v6, &v414)[3];
        *(_QWORD *)&v414 = v22;
        v24 = *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v377, v22, (uint64_t)&std::piecewise_construct, (__int128 **)&v414)+ 10);
        v25 = v5[22];
        if (0xAAAAAAAAAAAAAAABLL * ((v5[23] - v25) >> 3) <= v24)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v27 = *(char **)(v25 + 24 * (int)v24);
        v26 = *(char **)(v25 + 24 * (int)v24 + 8);
        if (v26 == v27 || v26 - v27 != 24)
          goto LABEL_34;
        while (1)
        {
          v29 = *(_QWORD *)v27;
          if (*(_QWORD *)v27 == v6)
            goto LABEL_33;
          v30 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v29);
          v31 = (_QWORD *)(v30 + 40);
          v32 = *(char *)(v30 + 63);
          if (v32 < 0)
            break;
          if (v32 == 15)
            goto LABEL_29;
LABEL_33:
          v27 += 8;
          if (v27 == v26)
            goto LABEL_34;
        }
        if (*(_QWORD *)(v30 + 48) != 15)
          goto LABEL_33;
        v31 = (_QWORD *)*v31;
LABEL_29:
        v33 = (_QWORD *)*v31;
        v34 = *(_QWORD *)((char *)v31 + 7);
        if (v33 != (_QWORD *)0x6974617669746361 || v34 != 0x646172675F6E6F69)
          goto LABEL_33;
        if ((v29 & 0x80000000) == 0)
        {
          *(_QWORD *)&v414 = *(_QWORD *)v27;
          v39 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v378, v29, &v414)[3];
          *(_QWORD *)&v414 = v29;
          __str = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v380, v29, &v414)[3];
          *(_QWORD *)&v414 = v39;
          v40 = *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v377, v39, (uint64_t)&std::piecewise_construct, (__int128 **)&v414)+ 10);
          v41 = v5[22];
          if (0xAAAAAAAAAAAAAAABLL * ((v5[23] - v41) >> 3) <= v40)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v42 = v41 + 24 * (int)v40;
          if (*(_QWORD *)(v42 + 8) - *(_QWORD *)v42 == 8)
          {
            v409 = 0;
            v409 = **(_QWORD **)v42;
            v43 = *((_QWORD *)a2 + 4);
            v44 = (uint64_t *)(v43 + 16 * v409);
            v45 = (_QWORD *)(*v44 + 40);
            v46 = *(char *)(*v44 + 63);
            if (v46 < 0)
            {
              if (*(_QWORD *)(*v44 + 48) != 22)
                goto LABEL_34;
              v45 = (_QWORD *)*v45;
            }
            else if (v46 != 22)
            {
              goto LABEL_34;
            }
            v47 = (_QWORD *)*v45;
            v48 = v45[1];
            v49 = *(_QWORD *)((char *)v45 + 14);
            v50 = v47 == (_QWORD *)0x6F635F6465737566 && v48 == 0x6F6974756C6F766ELL;
            if (v50 && v49 == 0x646172675F6E6F69)
            {
              v408 = 0;
              v408 = *(_QWORD *)(v5[19] + 8 * v24);
              v52 = *(_OWORD *)(v43 + 16 * v408);
              v414 = v52;
              if (*((_QWORD *)&v52 + 1))
              {
                v53 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
                do
                  v54 = __ldxr(v53);
                while (__stxr(v54 + 1, v53));
              }
              v55 = v52;
              v56 = *(const void **)(v52 + 64);
              if (v56)
              {
                if (v57)
                {
                  v58 = v57;
                  v59 = *(std::__shared_weak_count **)(v55 + 72);
                  v411 = v57;
                  v412 = v59;
                  if (v59)
                  {
                    v60 = (unint64_t *)&v59->__shared_owners_;
                    do
                      v61 = __ldxr(v60);
                    while (__stxr(v61 + 1, v60));
                  }
                  v62 = *v44;
                  v63 = *(const void **)(*v44 + 64);
                  if (v63
                    && (v64 = v58,
                        v65 = v59,
                  {
                    v67 = v66;
                    v68 = *(std::__shared_weak_count **)(v62 + 72);
                    v419 = (std::string *)v66;
                    v420 = v68;
                    if (v68)
                    {
                      v69 = (unint64_t *)&v68->__shared_owners_;
                      do
                        v70 = __ldxr(v69);
                      while (__stxr(v70 + 1, v69));
                    }
                    v374 = v68;
                    if (*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v64 + 384))(v64) + 24)
                      || *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v64 + 384))(v64) + 28)
                      || *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v64 + 384))(v64) + 60) != -1)
                    {
                      v71 = 0;
                    }
                    else
                    {
                      v101 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v64 + 384))(v64);
                      v101[15] = v17;
                      v101[16] = v18;
                      v101[17] = v19;
                      v410 = &v408;
                      v102 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v378, &v408, (uint64_t)&std::piecewise_construct, (uint64_t **)&v410);
                      std::string::operator=((std::string *)v102[3], v23);
                      v103 = (_DWORD *)(*((uint64_t (**)(void **))*v67 + 40))(v67);
                      v103[15] = v17;
                      v103[16] = v18;
                      v103[17] = v19;
                      v410 = &v409;
                      v104 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v380, &v409, (uint64_t)&std::piecewise_construct, (uint64_t **)&v410);
                      std::string::operator=((std::string *)v104[3], __str);
                      v410 = &v409;
                      v105 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v380, &v409, (uint64_t)&std::piecewise_construct, (uint64_t **)&v410);
                      std::string::operator=((std::string *)(v105[3] + 72), v23);
                      v71 = 1;
                    }
                    if (v374)
                    {
                      v72 = (unint64_t *)&v374->__shared_owners_;
                      do
                        v73 = __ldaxr(v72);
                      while (__stlxr(v73 - 1, v72));
                      if (!v73)
                      {
                        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                        std::__shared_weak_count::__release_weak(v374);
                      }
                    }
                    v74 = v412;
                    if (v412)
                    {
                      v75 = (unint64_t *)&v412->__shared_owners_;
                      do
                        v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                    if (v71)
                    {
                      v77 = (_DWORD *)*((_QWORD *)&__p + 1);
                      v78 = v422;
                      if (*((_QWORD *)&__p + 1) < (unint64_t)v422)
                      {
                        **((_DWORD **)&__p + 1) = v6;
                        v79 = v77 + 1;
                        goto LABEL_106;
                      }
                      v83 = (_DWORD *)__p;
                      v84 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
                      v85 = v84 + 1;
                      if ((unint64_t)(v84 + 1) >> 62)
                        goto LABEL_554;
                      if ((uint64_t)(v422 - __p) >> 1 > v85)
                        v85 = (uint64_t)(v422 - __p) >> 1;
                      if ((_QWORD)v422 - (_QWORD)__p >= 0x7FFFFFFFFFFFFFFCuLL)
                        v86 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v86 = v85;
                      if (v86)
                        v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v86);
                      else
                        v87 = 0;
                      v88 = (_DWORD *)(v86 + 4 * v84);
                      *v88 = v6;
                      v79 = v88 + 1;
                      while (v77 != v83)
                      {
                        v89 = *--v77;
                        *--v88 = v89;
                      }
                      v78 = v86 + 4 * v87;
                      *(_QWORD *)&__p = v88;
                      *(_QWORD *)&v422 = v78;
                      if (v83)
                        operator delete(v83);
LABEL_106:
                      *((_QWORD *)&__p + 1) = v79;
                      if ((unint64_t)v79 < v78)
                      {
                        *v79 = v29;
                        v90 = v79 + 1;
                        goto LABEL_122;
                      }
                      v91 = (_DWORD *)__p;
                      v92 = (uint64_t)((uint64_t)v79 - __p) >> 2;
                      v93 = v92 + 1;
                      if ((unint64_t)(v92 + 1) >> 62)
LABEL_554:
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      if ((uint64_t)(v78 - __p) >> 1 > v93)
                        v93 = (uint64_t)(v78 - __p) >> 1;
                      if (v78 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL)
                        v94 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v94 = v93;
                      if (v94)
                        v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v94);
                      else
                        v95 = 0;
                      v96 = (_DWORD *)(v94 + 4 * v92);
                      *v96 = v29;
                      v90 = v96 + 1;
                      while (v79 != v91)
                      {
                        v97 = *--v79;
                        *--v96 = v97;
                      }
                      *(_QWORD *)&__p = v96;
                      *(_QWORD *)&v422 = v94 + 4 * v95;
                      if (v91)
                        operator delete(v91);
LABEL_122:
                      *((_QWORD *)&__p + 1) = v90;
                    }
                  }
                  else if (v59)
                  {
                    v80 = (unint64_t *)&v59->__shared_owners_;
                    do
                      v81 = __ldaxr(v80);
                    while (__stlxr(v81 - 1, v80));
                    if (!v81)
                    {
                      v82 = v59;
                      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                }
              }
              v98 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
              if (*((_QWORD *)&v414 + 1))
              {
                v99 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
            }
          }
        }
LABEL_34:
        size = (std::__shared_weak_count *)v431.__r_.__value_.__l.__size_;
        if (v431.__r_.__value_.__l.__size_)
        {
          v37 = (unint64_t *)(v431.__r_.__value_.__l.__size_ + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        ++v6;
        v4 = *((_QWORD *)a2 + 4);
        if (v6 >= (*((_QWORD *)a2 + 5) - v4) >> 4)
        {
          v107 = (int *)*((_QWORD *)&__p + 1);
          v106 = (int *)__p;
          goto LABEL_130;
        }
      }
    }
    v107 = 0;
    v106 = 0;
LABEL_130:
    v108 = 126 - 2 * __clz(v107 - v106);
    if (v107 == v106)
      v109 = 0;
    else
      v109 = v108;
    std::__introsort<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *,false>(v106, v107, v109, 1);
    if (v107 != v106)
    {
      v110 = v106;
      do
        Espresso::net::remove_layer(a2, *v110++);
      while (v110 != v107);
      v107 = v106;
    }
    if (v107)
    {
      *((_QWORD *)&__p + 1) = v107;
      operator delete(v107);
    }
    v111 = this;
    v112 = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
    v113 = v112 == 100;
    std::string::basic_string[abi:ne180100]<0>(&__p, "bnns_fuse_conv_lrelu");
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 60), &__p))v113 = 0;
    if (SBYTE7(v422) < 0)
    {
      operator delete((void *)__p);
      if (!v113)
        goto LABEL_146;
    }
    else if (!v113)
    {
LABEL_146:
      v114 = v112 == 100;
      std::string::basic_string[abi:ne180100]<0>(&__p, "bnns_use_tf_layernorm_transposed");
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 60), &__p))v114 = 0;
      if (SBYTE7(v422) < 0)
      {
        operator delete((void *)__p);
        if (!v114)
          goto LABEL_447;
      }
      else if (!v114)
      {
        goto LABEL_447;
      }
      v402[0] = MEMORY[0x1E0C809B0];
      v402[1] = 3221225472;
      v403 = (void (*)(uint64_t, __int128 *))___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2;
      v404 = &__block_descriptor_48_e9_v16__0_v8l;
      v405 = this;
      v406 = a2;
      v115 = v402;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v431, a2);
      v429 = 0;
      v427 = 0u;
      v428 = 0u;
      v425 = 0u;
      v426 = 0u;
      v423 = 0u;
      v424 = 0u;
      __p = 0u;
      v422 = 0u;
      v430 = a2;
      LODWORD(v414) = 0;
      v379 = v112;
      if (*((_QWORD *)a2 + 5) != *((_QWORD *)a2 + 4))
      {
        LODWORD(v116) = 0;
        do
        {
          DWORD2(v428) = v116;
          v117 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v431.__r_.__value_.__r.__words[2], v116, &v414);
          if ((char *)v117[6] - (char *)v117[5] == 4)
          {
            HIDWORD(v428) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v431.__r_.__value_.__r.__words[2], SDWORD2(v428), (_DWORD *)&v428 + 2)[5];
            v118 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v431.__r_.__value_.__r.__words[2], SHIDWORD(v428), (_DWORD *)&v428 + 3);
            if ((char *)v118[6] - (char *)v118[5] == 4)
            {
              v429 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v431.__r_.__value_.__r.__words[2], SHIDWORD(v428), (_DWORD *)&v428 + 3)[5];
              v119 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v432.__r_.__value_.__r.__words[2], SHIDWORD(v428), (_DWORD *)&v428 + 3);
              if ((char *)v119[6] - (char *)v119[5] == 4)
              {
                v120 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v432.__r_.__value_.__r.__words[2], v429, &v429);
                if ((char *)v120[6] - (char *)v120[5] == 4)
                {
                  v121 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * (int)v116);
                  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v424, *v121, v121[1]);
                  v122 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * SHIDWORD(v428));
                  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v425, *v122, v122[1]);
                  v123 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * v429);
                  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v426, *v123, v123[1]);
                  v124 = v424;
                  v125 = *(void **)(v424 + 64);
                  if (v125
                  {
                    v126 = *(_QWORD *)(v124 + 72);
                    if (v126)
                    {
                      v127 = (unint64_t *)(v126 + 8);
                      do
                        v128 = __ldxr(v127);
                      while (__stxr(v128 + 1, v127));
                    }
                  }
                  else
                  {
                    v126 = 0;
                  }
                  v129 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
                  *(_QWORD *)&__p = v125;
                  *((_QWORD *)&__p + 1) = v126;
                  if (v129)
                  {
                    v130 = (unint64_t *)&v129->__shared_owners_;
                    do
                      v131 = __ldaxr(v130);
                    while (__stlxr(v131 - 1, v130));
                    if (!v131)
                    {
                      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                      std::__shared_weak_count::__release_weak(v129);
                    }
                    v125 = (void *)__p;
                  }
                  if (v125)
                  {
                    v132 = v425;
                    v133 = *(void **)(v425 + 64);
                    if (v133
                    {
                      v134 = *(_QWORD *)(v132 + 72);
                      if (v134)
                      {
                        v135 = (unint64_t *)(v134 + 8);
                        do
                          v136 = __ldxr(v135);
                        while (__stxr(v136 + 1, v135));
                      }
                    }
                    else
                    {
                      v134 = 0;
                    }
                    v137 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
                    *(_QWORD *)&v422 = v133;
                    *((_QWORD *)&v422 + 1) = v134;
                    if (v137)
                    {
                      v138 = (unint64_t *)&v137->__shared_owners_;
                      do
                        v139 = __ldaxr(v138);
                      while (__stlxr(v139 - 1, v138));
                      if (!v139)
                      {
                        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                        std::__shared_weak_count::__release_weak(v137);
                      }
                      v133 = (void *)v422;
                    }
                    if (v133)
                    {
                      v140 = v426;
                      v141 = *(void **)(v426 + 64);
                      if (v141
                      {
                        v142 = *(_QWORD *)(v140 + 72);
                        if (v142)
                        {
                          v143 = (unint64_t *)(v142 + 8);
                          do
                            v144 = __ldxr(v143);
                          while (__stxr(v144 + 1, v143));
                        }
                      }
                      else
                      {
                        v142 = 0;
                      }
                      v145 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
                      *(_QWORD *)&v423 = v141;
                      *((_QWORD *)&v423 + 1) = v142;
                      if (v145)
                      {
                        v146 = (unint64_t *)&v145->__shared_owners_;
                        do
                          v147 = __ldaxr(v146);
                        while (__stlxr(v147 - 1, v146));
                        if (!v147)
                        {
                          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                          std::__shared_weak_count::__release_weak(v145);
                        }
                        v141 = (void *)v423;
                      }
                      if (v141)
                        v403((uint64_t)v115, &__p);
                    }
                  }
                }
              }
            }
          }
          v116 = (int)v414 + 1;
          LODWORD(v414) = v414 + 1;
        }
        while (v116 < (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
        v149 = (_DWORD *)*((_QWORD *)&v427 + 1);
        v148 = (_DWORD *)v427;
        if ((_QWORD)v427 != *((_QWORD *)&v427 + 1))
        {
          v150 = 0;
          do
          {
            Espresso::net::remove_layer(a2, v150 + *v148++);
            --v150;
          }
          while (v148 != v149);
          v148 = (_DWORD *)v427;
        }
        v111 = this;
        if (v148)
        {
          *((_QWORD *)&v427 + 1) = v148;
          operator delete(v148);
        }
      }
      v151 = (std::__shared_weak_count *)*((_QWORD *)&v426 + 1);
      if (*((_QWORD *)&v426 + 1))
      {
        v152 = (unint64_t *)(*((_QWORD *)&v426 + 1) + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
      if (*((_QWORD *)&v425 + 1))
      {
        v155 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      v157 = (std::__shared_weak_count *)*((_QWORD *)&v424 + 1);
      if (*((_QWORD *)&v424 + 1))
      {
        v158 = (unint64_t *)(*((_QWORD *)&v424 + 1) + 8);
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v160 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
      if (*((_QWORD *)&v423 + 1))
      {
        v161 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      v163 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
      if (*((_QWORD *)&v422 + 1))
      {
        v164 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      v166 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v167 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v433);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v432.__r_.__value_.__l.__data_);
      v169 = (std::__shared_weak_count *)v431.__r_.__value_.__l.__size_;
      if (v431.__r_.__value_.__l.__size_)
      {
        v170 = (unint64_t *)(v431.__r_.__value_.__l.__size_ + 8);
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
        }
      }

      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__p, a2);
      LODWORD(v409) = 0;
      v172 = *((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 5) != v172)
      {
        v173 = 0;
        v381 = (char *)a2 + 96;
        do
        {
          v174 = *(_OWORD *)(v172 + 16 * v173);
          v414 = v174;
          if (*((_QWORD *)&v174 + 1))
          {
            v175 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
            do
              v176 = __ldxr(v175);
            while (__stxr(v176 + 1, v175));
          }
          v177 = v174;
          v178 = *(const void **)(v174 + 64);
          if (v178
          {
            v179 = *(std::__shared_weak_count **)(v177 + 72);
            if (v179)
            {
              v180 = (unint64_t *)&v179->__shared_owners_;
              do
                v181 = __ldxr(v180);
              while (__stxr(v181 + 1, v180));
              do
                v182 = __ldaxr(v180);
              while (__stlxr(v182 - 1, v180));
              if (!v182)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
            v183 = v409;
            v184 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v423 + 1, v409, &v409);
            if (v184[6] != v184[5])
            {
              v431.__r_.__value_.__r.__words[0] = v183;
              v185 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v183, &v431);
              if (v185[4] - v185[3] == 48)
              {
                v431.__r_.__value_.__r.__words[0] = v183;
                v186 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v183, &v431)[3];
                if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 30), v186))
                {
                  v187 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v423 + 1, v183, &v409);
                  if ((char *)v187[6] - (char *)v187[5] == 4)
                  {
                    v188 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v423 + 1, v183, &v409)[5];
                    v189 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v188);
                    v190 = *(const void **)(v189 + 64);
                    if (v190)
                    {
                      if (v191)
                      {
                        v192 = *(std::__shared_weak_count **)(v189 + 72);
                        v411 = v191;
                        v412 = v192;
                        if (v192)
                        {
                          v193 = (unint64_t *)&v192->__shared_owners_;
                          do
                            v194 = __ldxr(v193);
                          while (__stxr(v194 + 1, v193));
                        }
                        if (*(_DWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v191 + 320))(v191) + 16))
                        {
                          v419 = (std::string *)v188;
                          v195 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v188, &v419)[3];
                          if (*((char *)v195 + 23) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v431, *(const std::string::value_type **)v195, *((_QWORD *)v195 + 1));
                          }
                          else
                          {
                            v196 = *v195;
                            v431.__r_.__value_.__r.__words[2] = *((_QWORD *)v195 + 2);
                            *(_OWORD *)&v431.__r_.__value_.__l.__data_ = v196;
                          }
                          if (*((char *)v186 + 23) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v432, *(const std::string::value_type **)v186, *((_QWORD *)v186 + 1));
                          }
                          else
                          {
                            v197 = *v186;
                            v432.__r_.__value_.__r.__words[2] = *((_QWORD *)v186 + 2);
                            *(_OWORD *)&v432.__r_.__value_.__l.__data_ = v197;
                          }
                          v410 = (unint64_t *)v188;
                          v198 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v188, &v410);
                          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v198 + 1, &v431, &v433, 2uLL);
                          for (i = 0; i != -6; i -= 3)
                          {
                            if (SHIBYTE(v432.__r_.__value_.__r.__words[i + 2]) < 0)
                              operator delete(*(void **)((char *)&v431 + i * 8 + 24));
                          }
                          v431.__r_.__value_.__r.__words[0] = v183;
                          v200 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v381, v183, &v431);
                          v419 = (std::string *)v188;
                          v201 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v381, v188, &v419);
                          if (v201 != v200)
                            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v201 + 3), (std::string *)v200[3], (std::string *)v200[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v200[4] - v200[3]) >> 3));
                          v431.__r_.__value_.__r.__words[0] = v183;
                          v202 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v381, v183, &v431);
                          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v202 + 1, 0, 0, 0);
                          v431.__r_.__value_.__r.__words[0] = v183;
                          v203 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v183, &v431);
                          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v203 + 1, 0, 0, 0);
                        }
                        if (v192)
                        {
                          v204 = (unint64_t *)&v192->__shared_owners_;
                          do
                            v205 = __ldaxr(v204);
                          while (__stlxr(v205 - 1, v204));
                          if (!v205)
                          {
                            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                            std::__shared_weak_count::__release_weak(v192);
                          }
                        }
                      }
                    }
                    v111 = this;
                  }
                }
              }
            }
          }
          v206 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
          if (*((_QWORD *)&v414 + 1))
          {
            v207 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
              std::__shared_weak_count::__release_weak(v206);
            }
          }
          v173 = (int)v409 + 1;
          LODWORD(v409) = v409 + 1;
          v172 = *((_QWORD *)a2 + 4);
        }
        while (v173 < (*((_QWORD *)a2 + 5) - v172) >> 4);
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v424);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)&v422 + 1));
      v209 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v210 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      v397[0] = MEMORY[0x1E0C809B0];
      v397[1] = 3221225472;
      v398 = (void (*)(uint64_t, __int128 *))___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3;
      v399 = &__block_descriptor_48_e9_v16__0_v8l;
      v400 = v111;
      v401 = a2;
      v382 = v397;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v414, a2);
      v426 = 0u;
      v427 = 0u;
      v424 = 0u;
      v425 = 0u;
      v422 = 0u;
      v423 = 0u;
      __p = 0u;
      *(_QWORD *)&v428 = 0;
      *((_QWORD *)&v428 + 1) = a2;
      LODWORD(v431.__r_.__value_.__l.__data_) = 0;
      v212 = *((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 5) != v212)
      {
        v213 = 0;
        v214 = 0;
        do
        {
          LODWORD(v428) = v214;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v423, *(_QWORD *)(v212 + 16 * v213), *(_QWORD *)(v212 + 16 * v213 + 8));
          v215 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v415, v214, &v431);
          if ((char *)v215[6] - (char *)v215[5] == 4)
          {
            DWORD1(v428) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v415, v428, &v428)[5];
            v216 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v417, SDWORD1(v428), (_DWORD *)&v428 + 1);
            if ((char *)v216[6] - (char *)v216[5] == 8)
            {
              v217 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * SDWORD1(v428));
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v424, *v217, v217[1]);
              v218 = v423;
              v219 = *(void **)(v423 + 64);
              if (v219
              {
                v220 = *(_QWORD *)(v218 + 72);
                if (v220)
                {
                  v221 = (unint64_t *)(v220 + 8);
                  do
                    v222 = __ldxr(v221);
                  while (__stxr(v222 + 1, v221));
                }
              }
              else
              {
                v220 = 0;
              }
              v223 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
              *(_QWORD *)&__p = v219;
              *((_QWORD *)&__p + 1) = v220;
              if (v223)
              {
                v224 = (unint64_t *)&v223->__shared_owners_;
                do
                  v225 = __ldaxr(v224);
                while (__stlxr(v225 - 1, v224));
                if (!v225)
                {
                  ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                  std::__shared_weak_count::__release_weak(v223);
                }
              }
              v226 = v424;
              v227 = *(void **)(v424 + 64);
              if (v227
              {
                v228 = *(_QWORD *)(v226 + 72);
                if (v228)
                {
                  v229 = (unint64_t *)(v228 + 8);
                  do
                    v230 = __ldxr(v229);
                  while (__stxr(v230 + 1, v229));
                }
              }
              else
              {
                v228 = 0;
              }
              v231 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
              *(_QWORD *)&v422 = v227;
              *((_QWORD *)&v422 + 1) = v228;
              if (v231)
              {
                v232 = (unint64_t *)&v231->__shared_owners_;
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (!v233)
                {
                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                  std::__shared_weak_count::__release_weak(v231);
                }
              }
              if ((_QWORD)__p)
                v234 = (_QWORD)v422 == 0;
              else
                v234 = 1;
              if (!v234)
                v398((uint64_t)v382, &__p);
            }
          }
          v213 = SLODWORD(v431.__r_.__value_.__l.__data_) + 1;
          ++LODWORD(v431.__r_.__value_.__l.__data_);
          v212 = *((_QWORD *)a2 + 4);
          v214 = v213;
        }
        while (v213 < (*((_QWORD *)a2 + 5) - v212) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      v236 = (_DWORD *)*((_QWORD *)&v425 + 1);
      v235 = (_DWORD *)v425;
      if ((_QWORD)v425 != *((_QWORD *)&v425 + 1))
      {
        v237 = 0;
        do
        {
          Espresso::net::remove_layer(a2, v237 + *v235++);
          --v237;
        }
        while (v235 != v236);
      }
      v238 = (int *)*((_QWORD *)&v426 + 1);
      v239 = (int *)v427;
      if (*((_QWORD *)&v426 + 1) != (_QWORD)v427)
      {
        v240 = 0;
        do
        {
          v241 = *v238;
          LODWORD(v410) = *v238 + v240;
          LODWORD(v431.__r_.__value_.__l.__data_) = v241;
          v242 = *((_QWORD *)v238 + 2);
          v431.__r_.__value_.__l.__size_ = *((_QWORD *)v238 + 1);
          v431.__r_.__value_.__r.__words[2] = v242;
          if (v242)
          {
            v243 = (unint64_t *)(v242 + 8);
            do
              v244 = __ldxr(v243);
            while (__stxr(v244 + 1, v243));
          }
          memset(&v432, 0, sizeof(v432));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v432, *((_QWORD *)v238 + 3), *((_QWORD *)v238 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v238 + 4) - *((_QWORD *)v238 + 3)) >> 3));
          v433 = 0uLL;
          v434 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v433, *((_QWORD *)v238 + 6), *((_QWORD *)v238 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v238 + 7) - *((_QWORD *)v238 + 6)) >> 3));
          v411 = 0;
          v412 = 0;
          v413 = 0;
          v419 = (std::string *)&v411;
          LOBYTE(v420) = 0;
          v411 = (char *)operator new(0x48uLL);
          v412 = (std::__shared_weak_count *)v411;
          v413 = v411 + 72;
          v412 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v413, (uint64_t)&v431, (uint64_t)v435, (uint64_t)v411);
          Espresso::net::insert_layers((uint64_t)a2, (int *)&v410, (uint64_t *)&v411);
          v419 = (std::string *)&v411;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
          v419 = (std::string *)&v433;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
          v419 = &v432;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
          v245 = (std::__shared_weak_count *)v431.__r_.__value_.__r.__words[2];
          if (v431.__r_.__value_.__r.__words[2])
          {
            v246 = (unint64_t *)(v431.__r_.__value_.__r.__words[2] + 8);
            do
              v247 = __ldaxr(v246);
            while (__stlxr(v247 - 1, v246));
            if (!v247)
            {
              ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
              std::__shared_weak_count::__release_weak(v245);
            }
          }
          ++v240;
          v238 += 18;
        }
        while (v238 != v239);
      }
      v431.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v431);
      if ((_QWORD)v425)
      {
        *((_QWORD *)&v425 + 1) = v425;
        operator delete((void *)v425);
      }
      v248 = (std::__shared_weak_count *)*((_QWORD *)&v424 + 1);
      if (*((_QWORD *)&v424 + 1))
      {
        v249 = (unint64_t *)(*((_QWORD *)&v424 + 1) + 8);
        do
          v250 = __ldaxr(v249);
        while (__stlxr(v250 - 1, v249));
        if (!v250)
        {
          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
          std::__shared_weak_count::__release_weak(v248);
        }
      }
      v251 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
      if (*((_QWORD *)&v423 + 1))
      {
        v252 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
      v254 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
      if (*((_QWORD *)&v422 + 1))
      {
        v255 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      v257 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v258 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v418);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v416);
      v260 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
      if (*((_QWORD *)&v414 + 1))
      {
        v261 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
        do
          v262 = __ldaxr(v261);
        while (__stlxr(v262 - 1, v261));
        if (!v262)
        {
          ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
          std::__shared_weak_count::__release_weak(v260);
        }
      }

      v392[0] = MEMORY[0x1E0C809B0];
      v392[1] = 3221225472;
      v393 = (void (*)(uint64_t, __int128 *))___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_4;
      v394 = &__block_descriptor_48_e9_v16__0_v8l;
      v395 = this;
      v396 = a2;
      v383 = v392;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v414, a2);
      v426 = 0u;
      v427 = 0u;
      v424 = 0u;
      v425 = 0u;
      v422 = 0u;
      v423 = 0u;
      __p = 0u;
      *(_QWORD *)&v428 = 0;
      *((_QWORD *)&v428 + 1) = a2;
      LODWORD(v431.__r_.__value_.__l.__data_) = 0;
      v263 = *((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 5) != v263)
      {
        v264 = 0;
        v265 = 0;
        do
        {
          LODWORD(v428) = v265;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v423, *(_QWORD *)(v263 + 16 * v264), *(_QWORD *)(v263 + 16 * v264 + 8));
          v266 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v415, v265, &v431);
          if ((char *)v266[6] - (char *)v266[5] == 8)
          {
            DWORD1(v428) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v415, v428, &v428)[5];
            v267 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v417, SDWORD1(v428), (_DWORD *)&v428 + 1);
            if ((char *)v267[6] - (char *)v267[5] == 4)
            {
              v268 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * SDWORD1(v428));
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v424, *v268, v268[1]);
              v269 = v423;
              v270 = *(void **)(v423 + 64);
              if (v270
              {
                v271 = *(_QWORD *)(v269 + 72);
                if (v271)
                {
                  v272 = (unint64_t *)(v271 + 8);
                  do
                    v273 = __ldxr(v272);
                  while (__stxr(v273 + 1, v272));
                }
              }
              else
              {
                v271 = 0;
              }
              v274 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
              *(_QWORD *)&__p = v270;
              *((_QWORD *)&__p + 1) = v271;
              if (v274)
              {
                v275 = (unint64_t *)&v274->__shared_owners_;
                do
                  v276 = __ldaxr(v275);
                while (__stlxr(v276 - 1, v275));
                if (!v276)
                {
                  ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                  std::__shared_weak_count::__release_weak(v274);
                }
              }
              v277 = v424;
              v278 = *(void **)(v424 + 64);
              if (v278
              {
                v279 = *(_QWORD *)(v277 + 72);
                if (v279)
                {
                  v280 = (unint64_t *)(v279 + 8);
                  do
                    v281 = __ldxr(v280);
                  while (__stxr(v281 + 1, v280));
                }
              }
              else
              {
                v279 = 0;
              }
              v282 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
              *(_QWORD *)&v422 = v278;
              *((_QWORD *)&v422 + 1) = v279;
              if (v282)
              {
                v283 = (unint64_t *)&v282->__shared_owners_;
                do
                  v284 = __ldaxr(v283);
                while (__stlxr(v284 - 1, v283));
                if (!v284)
                {
                  ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                  std::__shared_weak_count::__release_weak(v282);
                }
              }
              if ((_QWORD)__p)
                v285 = (_QWORD)v422 == 0;
              else
                v285 = 1;
              if (!v285)
                v393((uint64_t)v383, &__p);
            }
          }
          v264 = SLODWORD(v431.__r_.__value_.__l.__data_) + 1;
          ++LODWORD(v431.__r_.__value_.__l.__data_);
          v263 = *((_QWORD *)a2 + 4);
          v265 = v264;
        }
        while (v264 < (*((_QWORD *)a2 + 5) - v263) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      v287 = (_DWORD *)*((_QWORD *)&v425 + 1);
      v286 = (_DWORD *)v425;
      if ((_QWORD)v425 != *((_QWORD *)&v425 + 1))
      {
        v288 = 0;
        do
        {
          Espresso::net::remove_layer(a2, v288 + *v286++);
          --v288;
        }
        while (v286 != v287);
      }
      v289 = (int *)*((_QWORD *)&v426 + 1);
      v290 = (int *)v427;
      if (*((_QWORD *)&v426 + 1) != (_QWORD)v427)
      {
        v291 = 0;
        do
        {
          v292 = *v289;
          LODWORD(v410) = *v289 + v291;
          LODWORD(v431.__r_.__value_.__l.__data_) = v292;
          v293 = *((_QWORD *)v289 + 2);
          v431.__r_.__value_.__l.__size_ = *((_QWORD *)v289 + 1);
          v431.__r_.__value_.__r.__words[2] = v293;
          if (v293)
          {
            v294 = (unint64_t *)(v293 + 8);
            do
              v295 = __ldxr(v294);
            while (__stxr(v295 + 1, v294));
          }
          memset(&v432, 0, sizeof(v432));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v432, *((_QWORD *)v289 + 3), *((_QWORD *)v289 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v289 + 4) - *((_QWORD *)v289 + 3)) >> 3));
          v433 = 0uLL;
          v434 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v433, *((_QWORD *)v289 + 6), *((_QWORD *)v289 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v289 + 7) - *((_QWORD *)v289 + 6)) >> 3));
          v411 = 0;
          v412 = 0;
          v413 = 0;
          v419 = (std::string *)&v411;
          LOBYTE(v420) = 0;
          v411 = (char *)operator new(0x48uLL);
          v412 = (std::__shared_weak_count *)v411;
          v413 = v411 + 72;
          v412 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v413, (uint64_t)&v431, (uint64_t)v435, (uint64_t)v411);
          Espresso::net::insert_layers((uint64_t)a2, (int *)&v410, (uint64_t *)&v411);
          v419 = (std::string *)&v411;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
          v419 = (std::string *)&v433;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
          v419 = &v432;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
          v296 = (std::__shared_weak_count *)v431.__r_.__value_.__r.__words[2];
          if (v431.__r_.__value_.__r.__words[2])
          {
            v297 = (unint64_t *)(v431.__r_.__value_.__r.__words[2] + 8);
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
            }
          }
          ++v291;
          v289 += 18;
        }
        while (v289 != v290);
      }
      v431.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v431);
      if ((_QWORD)v425)
      {
        *((_QWORD *)&v425 + 1) = v425;
        operator delete((void *)v425);
      }
      v299 = (std::__shared_weak_count *)*((_QWORD *)&v424 + 1);
      v111 = this;
      v112 = v379;
      if (*((_QWORD *)&v424 + 1))
      {
        v300 = (unint64_t *)(*((_QWORD *)&v424 + 1) + 8);
        do
          v301 = __ldaxr(v300);
        while (__stlxr(v301 - 1, v300));
        if (!v301)
        {
          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
          std::__shared_weak_count::__release_weak(v299);
        }
      }
      v302 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
      if (*((_QWORD *)&v423 + 1))
      {
        v303 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
        do
          v304 = __ldaxr(v303);
        while (__stlxr(v304 - 1, v303));
        if (!v304)
        {
          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
          std::__shared_weak_count::__release_weak(v302);
        }
      }
      v305 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
      if (*((_QWORD *)&v422 + 1))
      {
        v306 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
        do
          v307 = __ldaxr(v306);
        while (__stlxr(v307 - 1, v306));
        if (!v307)
        {
          ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
          std::__shared_weak_count::__release_weak(v305);
        }
      }
      v308 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v309 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v310 = __ldaxr(v309);
        while (__stlxr(v310 - 1, v309));
        if (!v310)
        {
          ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
          std::__shared_weak_count::__release_weak(v308);
        }
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v418);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v416);
      v311 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
      if (*((_QWORD *)&v414 + 1))
      {
        v312 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
        do
          v313 = __ldaxr(v312);
        while (__stlxr(v313 - 1, v312));
        if (!v313)
        {
          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
          std::__shared_weak_count::__release_weak(v311);
        }
      }

LABEL_447:
      v314 = v112 == 100;
      std::string::basic_string[abi:ne180100]<0>(&__p, "opt_squeeze_conv_expand_dims");
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 60), &__p))v314 = 0;
      if (SBYTE7(v422) < 0)
      {
        operator delete((void *)__p);
        if (!v314)
          goto LABEL_545;
      }
      else if (!v314)
      {
        goto LABEL_545;
      }
      v387[0] = MEMORY[0x1E0C809B0];
      v387[1] = 3221225472;
      v388 = (void (*)(uint64_t, __int128 *))___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_49;
      v389 = &__block_descriptor_48_e9_v16__0_v8l;
      v390 = v111;
      v391 = a2;
      v315 = v387;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v431, a2);
      v429 = 0;
      v427 = 0u;
      v428 = 0u;
      v425 = 0u;
      v426 = 0u;
      v423 = 0u;
      v424 = 0u;
      __p = 0u;
      v422 = 0u;
      v430 = a2;
      LODWORD(v414) = 0;
      if (*((_QWORD *)a2 + 5) != *((_QWORD *)a2 + 4))
      {
        v384 = v315;
        LODWORD(v316) = 0;
        do
        {
          DWORD2(v428) = v316;
          v317 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v431.__r_.__value_.__r.__words[2], v316, &v414);
          if ((char *)v317[6] - (char *)v317[5] == 4)
          {
            HIDWORD(v428) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v431.__r_.__value_.__r.__words[2], SDWORD2(v428), (_DWORD *)&v428 + 2)[5];
            v318 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v431.__r_.__value_.__r.__words[2], SHIDWORD(v428), (_DWORD *)&v428 + 3);
            if ((char *)v318[6] - (char *)v318[5] == 4)
            {
              v429 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v431.__r_.__value_.__r.__words[2], SHIDWORD(v428), (_DWORD *)&v428 + 3)[5];
              v319 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v432.__r_.__value_.__r.__words[2], SHIDWORD(v428), (_DWORD *)&v428 + 3);
              if ((char *)v319[6] - (char *)v319[5] == 4)
              {
                v320 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v432.__r_.__value_.__r.__words[2], v429, &v429);
                if ((char *)v320[6] - (char *)v320[5] == 4)
                {
                  v321 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * (int)v316);
                  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v424, *v321, v321[1]);
                  v322 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * SHIDWORD(v428));
                  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v425, *v322, v322[1]);
                  v323 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * v429);
                  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v426, *v323, v323[1]);
                  v324 = v424;
                  v325 = *(void **)(v424 + 64);
                  if (v325
                  {
                    v326 = *(_QWORD *)(v324 + 72);
                    if (v326)
                    {
                      v327 = (unint64_t *)(v326 + 8);
                      do
                        v328 = __ldxr(v327);
                      while (__stxr(v328 + 1, v327));
                    }
                  }
                  else
                  {
                    v326 = 0;
                  }
                  v329 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
                  *(_QWORD *)&__p = v325;
                  *((_QWORD *)&__p + 1) = v326;
                  if (v329)
                  {
                    v330 = (unint64_t *)&v329->__shared_owners_;
                    do
                      v331 = __ldaxr(v330);
                    while (__stlxr(v331 - 1, v330));
                    if (!v331)
                    {
                      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                      std::__shared_weak_count::__release_weak(v329);
                    }
                    v325 = (void *)__p;
                  }
                  if (v325)
                  {
                    v332 = v425;
                    v333 = *(void **)(v425 + 64);
                    if (v333
                    {
                      v334 = *(_QWORD *)(v332 + 72);
                      if (v334)
                      {
                        v335 = (unint64_t *)(v334 + 8);
                        do
                          v336 = __ldxr(v335);
                        while (__stxr(v336 + 1, v335));
                      }
                    }
                    else
                    {
                      v334 = 0;
                    }
                    v337 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
                    *(_QWORD *)&v422 = v333;
                    *((_QWORD *)&v422 + 1) = v334;
                    if (v337)
                    {
                      v338 = (unint64_t *)&v337->__shared_owners_;
                      do
                        v339 = __ldaxr(v338);
                      while (__stlxr(v339 - 1, v338));
                      if (!v339)
                      {
                        ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                        std::__shared_weak_count::__release_weak(v337);
                      }
                      v333 = (void *)v422;
                    }
                    if (v333)
                    {
                      v340 = v426;
                      v341 = *(void **)(v426 + 64);
                      if (v341
                      {
                        v342 = *(_QWORD *)(v340 + 72);
                        if (v342)
                        {
                          v343 = (unint64_t *)(v342 + 8);
                          do
                            v344 = __ldxr(v343);
                          while (__stxr(v344 + 1, v343));
                        }
                      }
                      else
                      {
                        v342 = 0;
                      }
                      v345 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
                      *(_QWORD *)&v423 = v341;
                      *((_QWORD *)&v423 + 1) = v342;
                      if (v345)
                      {
                        v346 = (unint64_t *)&v345->__shared_owners_;
                        do
                          v347 = __ldaxr(v346);
                        while (__stlxr(v347 - 1, v346));
                        if (!v347)
                        {
                          ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                          std::__shared_weak_count::__release_weak(v345);
                        }
                        v341 = (void *)v423;
                      }
                      if (v341)
                        v388((uint64_t)v315, &__p);
                    }
                  }
                }
              }
            }
          }
          v316 = (int)v414 + 1;
          LODWORD(v414) = v414 + 1;
        }
        while (v316 < (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
        v349 = (_DWORD *)*((_QWORD *)&v427 + 1);
        v348 = (_DWORD *)v427;
        if ((_QWORD)v427 != *((_QWORD *)&v427 + 1))
        {
          v350 = 0;
          do
          {
            Espresso::net::remove_layer(a2, v350 + *v348++);
            --v350;
          }
          while (v348 != v349);
          v348 = (_DWORD *)v427;
        }
        v111 = this;
        v315 = v384;
        if (v348)
        {
          *((_QWORD *)&v427 + 1) = v348;
          operator delete(v348);
        }
      }
      v351 = (std::__shared_weak_count *)*((_QWORD *)&v426 + 1);
      if (*((_QWORD *)&v426 + 1))
      {
        v352 = (unint64_t *)(*((_QWORD *)&v426 + 1) + 8);
        do
          v353 = __ldaxr(v352);
        while (__stlxr(v353 - 1, v352));
        if (!v353)
        {
          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
          std::__shared_weak_count::__release_weak(v351);
        }
      }
      v354 = (std::__shared_weak_count *)*((_QWORD *)&v425 + 1);
      if (*((_QWORD *)&v425 + 1))
      {
        v355 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 8);
        do
          v356 = __ldaxr(v355);
        while (__stlxr(v356 - 1, v355));
        if (!v356)
        {
          ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
          std::__shared_weak_count::__release_weak(v354);
        }
      }
      v357 = (std::__shared_weak_count *)*((_QWORD *)&v424 + 1);
      if (*((_QWORD *)&v424 + 1))
      {
        v358 = (unint64_t *)(*((_QWORD *)&v424 + 1) + 8);
        do
          v359 = __ldaxr(v358);
        while (__stlxr(v359 - 1, v358));
        if (!v359)
        {
          ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
          std::__shared_weak_count::__release_weak(v357);
        }
      }
      v360 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
      if (*((_QWORD *)&v423 + 1))
      {
        v361 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
        do
          v362 = __ldaxr(v361);
        while (__stlxr(v362 - 1, v361));
        if (!v362)
        {
          ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
          std::__shared_weak_count::__release_weak(v360);
        }
      }
      v363 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
      if (*((_QWORD *)&v422 + 1))
      {
        v364 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
        do
          v365 = __ldaxr(v364);
        while (__stlxr(v365 - 1, v364));
        if (!v365)
        {
          ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
          std::__shared_weak_count::__release_weak(v363);
        }
      }
      v366 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v367 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v368 = __ldaxr(v367);
        while (__stlxr(v368 - 1, v367));
        if (!v368)
        {
          ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
          std::__shared_weak_count::__release_weak(v366);
        }
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v433);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v432.__r_.__value_.__l.__data_);
      v369 = (std::__shared_weak_count *)v431.__r_.__value_.__l.__size_;
      if (v431.__r_.__value_.__l.__size_)
      {
        v370 = (unint64_t *)(v431.__r_.__value_.__l.__size_ + 8);
        do
          v371 = __ldaxr(v370);
        while (__stlxr(v371 - 1, v370));
        if (!v371)
        {
          ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
          std::__shared_weak_count::__release_weak(v369);
        }
      }

      v386[0] = MEMORY[0x1E0C809B0];
      v386[1] = 3221225472;
      v386[2] = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2_50;
      v386[3] = &__block_descriptor_40_e9_v16__0_v8l;
      v386[4] = v111;
      Espresso::fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(a2, v386);
LABEL_545:
      std::string::basic_string[abi:ne180100]<0>(&__p, "useValueInference");
      v372 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 60), &__p);
      v373 = v372;
      if (SBYTE7(v422) < 0)
      {
        operator delete((void *)__p);
        if (!v373)
        {
LABEL_550:
          *((_BYTE *)a2 + 568) = 1;
          return;
        }
      }
      else if (!v372)
      {
        goto LABEL_550;
      }
      v385[0] = MEMORY[0x1E0C809B0];
      v385[1] = 3221225472;
      v385[2] = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3_52;
      v385[3] = &__block_descriptor_48_e9_v16__0_v8l;
      v385[4] = v111;
      v385[5] = a2;
      Espresso::single_match_replace<Espresso::generic_dev_op_kernel>(a2, v385);
      goto LABEL_550;
    }
    v407[0] = MEMORY[0x1E0C809B0];
    v407[1] = 3221225472;
    v407[2] = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke;
    v407[3] = &__block_descriptor_40_e9_v16__0_v8l;
    v407[4] = this;
    Espresso::fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(a2, v407);
    goto LABEL_146;
  }
}

void sub_190E8F3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a71;
  uint64_t v71;
  void *v73;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v71 - 192);
  v73 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

void *Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::runtime_error *v19;
  std::string *v20;
  __int128 v21;
  std::string v22;
  std::string v23;
  const void *v24;
  std::__shared_weak_count *v25;

  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  v1 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a1 + 1120), (uint64_t)&v22);
  v2 = v1;
  if (!v1)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_20;
  }
  v3 = (const void *)v1[3];
  v4 = (std::__shared_weak_count *)v2[4];
  v24 = v3;
  v25 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (!v3)
  {
LABEL_20:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "Analysis missing: ");
    v17 = std::string::append(&v22, (const std::string::value_type *)((unint64_t)"N8Espresso30pass_blob_name_indexing_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v7)
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "Analysis mismatch: ");
    v20 = std::string::append(&v22, (const std::string::value_type *)((unint64_t)"N8Espresso30pass_blob_name_indexing_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v19, &v23);
    __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = v7;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v8;
}

void sub_190E8F880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

int *std::__introsort<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int *v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int *v46;
  BOOL v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  int *v60;
  int v61;
  int v62;
  BOOL v63;
  int *v64;
  int v65;
  int *v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int *v73;
  int *v74;
  int *v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  int *v83;
  int v84;
  int v85;
  int *v86;
  int v87;
  int v88;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *v9;
        if (*v8 > *v9)
        {
          *v9 = *v8;
          *v8 = v38;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        v39 = v9 + 2;
        v40 = v9 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, v9 + 1, v9 + 2, v9 + 3);
        v41 = v9[3];
        if (*v8 > v41)
        {
          *v40 = *v8;
          *v8 = v41;
          v42 = *v40;
          v43 = *v39;
          if (*v40 > *v39)
          {
            *v39 = v42;
            *v40 = v43;
            v44 = v9[1];
            if (v42 > v44)
            {
              v9[1] = v42;
              v9[2] = v44;
              v45 = *v9;
              if (v42 > *v9)
              {
                *v9 = v42;
                v9[1] = v45;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 95)
        {
          v46 = v9 + 1;
          v48 = v9 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 4;
              v50 = v9;
              do
              {
                v52 = *v50;
                v51 = v50[1];
                v50 = v46;
                if (v51 > v52)
                {
                  v53 = v49;
                  while (1)
                  {
                    *(int *)((char *)v9 + v53) = v52;
                    v54 = v53 - 4;
                    if (v53 == 4)
                      break;
                    v52 = *(int *)((char *)v9 + v53 - 8);
                    v53 -= 4;
                    if (v51 <= v52)
                    {
                      v55 = (int *)((char *)v9 + v54);
                      goto LABEL_76;
                    }
                  }
                  v55 = v9;
LABEL_76:
                  *v55 = v51;
                }
                v46 = v50 + 1;
                v49 += 4;
              }
              while (v50 + 1 != a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v88 = *v7;
              v87 = v7[1];
              v7 = v46;
              if (v87 > v88)
              {
                do
                {
                  *v46 = v88;
                  v88 = *(v46 - 2);
                  --v46;
                }
                while (v87 > v88);
                *v46 = v87;
              }
              v46 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v56 = (v11 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = &v9[v59];
                v61 = *v60;
                if (2 * v58 + 2 < (uint64_t)v11)
                {
                  v62 = v60[1];
                  v63 = v61 <= v62;
                  if (v61 >= v62)
                    v61 = v60[1];
                  if (!v63)
                  {
                    ++v60;
                    v59 = 2 * v58 + 2;
                  }
                }
                v64 = &v9[v58];
                v65 = *v64;
                if (v61 <= *v64)
                {
                  do
                  {
                    v66 = v60;
                    *v64 = v61;
                    if (v56 < v59)
                      break;
                    v67 = (2 * v59) | 1;
                    v60 = &v9[v67];
                    v59 = 2 * v59 + 2;
                    v61 = *v60;
                    if (v59 >= (uint64_t)v11)
                    {
                      v59 = v67;
                    }
                    else
                    {
                      result = v60 + 1;
                      v68 = v60[1];
                      v69 = v61 <= v68;
                      if (v61 >= v68)
                        v61 = v60[1];
                      if (v69)
                        v59 = v67;
                      else
                        ++v60;
                    }
                    v64 = v66;
                  }
                  while (v61 <= v65);
                  *v66 = v65;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v70 = (unint64_t)v10 >> 2;
            do
            {
              v71 = 0;
              v72 = *v9;
              v73 = v9;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v71 = 2 * v71 + 2;
                if (v71 >= v70)
                {
                  v71 = v78;
                }
                else
                {
                  v79 = v75[1];
                  v80 = v76 <= v79;
                  if (v76 >= v79)
                    v76 = v75[1];
                  if (v80)
                    v71 = v78;
                  else
                    ++v75;
                }
                *v73 = v76;
                v73 = v75;
              }
              while (v71 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v81 = (char *)v75 - (char *)v9 + 4;
                if (v81 >= 5)
                {
                  v82 = (((unint64_t)v81 >> 2) - 2) >> 1;
                  v83 = &v9[v82];
                  v84 = *v83;
                  v85 = *v75;
                  if (*v83 > *v75)
                  {
                    do
                    {
                      v86 = v83;
                      *v75 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v9[v82];
                      v84 = *v83;
                      v75 = v86;
                    }
                    while (*v83 > v85);
                    *v86 = v85;
                  }
                }
              }
              v63 = v70-- <= 2;
            }
            while (!v63);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        v16 = v7;
        if ((a4 & 1) == 0)
        {
          v16 = v7;
          if (*(v7 - 1) <= v15)
          {
            if (v15 <= *v8)
            {
              v30 = v7 + 1;
              do
              {
                v9 = v30;
                if (v30 >= a2)
                  break;
                ++v30;
              }
              while (v15 <= *v9);
            }
            else
            {
              v9 = v7;
              do
              {
                v29 = v9[1];
                ++v9;
              }
              while (v15 <= v29);
            }
            v31 = a2;
            if (v9 < a2)
            {
              v31 = a2;
              do
                v32 = *--v31;
              while (v15 > v32);
            }
            if (v9 < v31)
            {
              v33 = *v9;
              v34 = *v31;
              do
              {
                *v9 = v34;
                *v31 = v33;
                do
                {
                  v35 = v9[1];
                  ++v9;
                  v33 = v35;
                }
                while (v15 <= v35);
                do
                {
                  v36 = *--v31;
                  v34 = v36;
                }
                while (v15 > v36);
              }
              while (v9 < v31);
            }
            v37 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v37;
            a4 = 0;
            *v37 = v15;
            continue;
          }
        }
        do
        {
          v17 = v16;
          v19 = v16[1];
          ++v16;
          v18 = v19;
        }
        while (v19 > v15);
        v20 = a2;
        if (v17 == v7)
        {
          v20 = a2;
          do
          {
            if (v16 >= v20)
              break;
            v22 = *--v20;
          }
          while (v22 <= v15);
        }
        else
        {
          do
            v21 = *--v20;
          while (v21 <= v15);
        }
        if (v16 < v20)
        {
          v23 = *v20;
          v24 = v16;
          v25 = v20;
          do
          {
            *v24 = v23;
            *v25 = v18;
            do
            {
              v17 = v24;
              v26 = v24[1];
              ++v24;
              v18 = v26;
            }
            while (v26 > v15);
            do
            {
              v27 = *--v25;
              v23 = v27;
            }
            while (v27 <= v15);
          }
          while (v24 < v25);
        }
        if (v17 != v7)
          *v7 = *v17;
        *v17 = v15;
        if (v16 < v20)
        {
LABEL_29:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *,false>(v7, v17, a3, a4 & 1);
          a4 = 0;
          v9 = v17 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *>(v7, v17);
        v9 = v17 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *>(v17 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

void ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) == v2)
  {
    v4 = *(_QWORD **)(a2 + 16);
    if (v4[1] == v2)
    {
      {
        v5 = *(std::__shared_weak_count **)(a2 + 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      else
      {
        v9 = *(std::__shared_weak_count **)(a2 + 24);
        if (v9)
        {
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = (*(uint64_t (**)(_QWORD *))(*v4 + 384))(v4);
        if (*(_DWORD *)v12 == 6
          && fabsf(*(float *)(v12 + 4) + -1.0) < 0.000001
          && fabsf(*(float *)(v12 + 8)) < 0.000001)
        {
          Espresso::fuse_vertical_state<Espresso::base_kernel,Espresso::generic_activation_kernel>::remove_second_layer(a2);
        }
        if (v9)
        {
          v13 = (unint64_t *)&v9->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
    }
  }
}

void sub_190E9011C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::activation_params,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x38uLL);
  *v12 = &off_1E2DC6858;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  *((_BYTE *)v12 + 48) = a6;
  v18 = v12;
  v13 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v13;
}

void sub_190E90210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8Espresso8hardware18is_virtual_machineEv_block_invoke()
{
  uint64_t result;
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0);
  if (!(_DWORD)result)
    Espresso::hardware::is_virtual_machine(void)::result = v2;
  return result;
}

__n128 Espresso::ANERuntimeEngine::direct_engine::create_context@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::ANERuntimeEngine::context,std::allocator<Espresso::ANERuntimeEngine::context>,std::shared_ptr<Espresso::abstract_engine> const&,void>(&v4, a1);
  result = v4;
  *(_BYTE *)(v4.n128_u64[0] + 139) = 1;
  *a2 = result;
  return result;
}

double Espresso::ANERuntimeEngine::engine::create_context@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::ANERuntimeEngine::context,std::allocator<Espresso::ANERuntimeEngine::context>,std::shared_ptr<Espresso::abstract_engine> const&,void>(&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t e5rt_execution_stream_operation_get_num_outputs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC6B58;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E903A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_get_num_inputs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC69D8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E9047C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::slice_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  float *v21;
  float v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  __int32 v48;
  char *v49;
  char *v50;
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char *v57;
  int v58;
  int v59;
  __int32 v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int32 v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  int v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  BNNSFilterParameters filter_params;
  BNNSNDArrayDescriptor dest;
  BNNSNDArrayDescriptor src;
  int v108;
  int32x4_t v109;
  int v110;
  void *__p;
  void *v112;
  __int128 v113;
  int v114;
  void *v115;
  void *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  __int128 v121;
  int v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v7 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v8 = *a3;
  v9 = **a3;
  if (v9 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
  {
    v28 = *(std::__shared_weak_count **)(*v8 + 168);
    v119 = *(_QWORD *)(*v8 + 160);
    v120 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
  }
  else
  {
    v119 = 0;
    v120 = 0;
  }
  v10 = *a4;
  v11 = **a4;
  if (v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
  {
    v31 = *(std::__shared_weak_count **)(*v10 + 168);
    v117 = *(_QWORD *)(*v10 + 160);
    v118 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
  }
  else
  {
    v117 = 0;
    v118 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v113, **a4);
  Espresso::abstract_blob_container::shape((char *)&v108, **a3);
  v12 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, v109)));
  if (v110 == -1)
    v13 = v109.i32[3] != 1;
  else
    v13 = v110 == 5;
  if (v109.i32[3])
    v13 = 0;
  if ((v12 & 1) == 0 && v108 >= 1 && !v13)
  {
    v121 = v113;
    v122 = v114;
    if (*(_DWORD *)(a1 + 296) == 1)
    {
      v15 = a4;
      v14 = *a4;
      if ((unint64_t)((char *)v15[1] - (char *)v14) <= 0x1F)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Insufficient bottom blobs");
      (*(void (**)(uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2]);
      v16 = v14[2];
      v17 = *(_QWORD *)(v16 + 160);
      v18 = *(std::__shared_weak_count **)(v16 + 168);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(float **)(v17 + 24);
      v22 = 0.5;
      if (*v21 < 0.0)
        v22 = -0.5;
      v23 = (int)(float)(*v21 + v22);
      if (v18)
      {
        v24 = (unint64_t *)&v18->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    else
    {
      v23 = *(_DWORD *)(a1 + 284);
    }
    v26 = *(int *)(a1 + 292);
    if ((v26 & 0x80000000) != 0)
    {
      v27 = *(int *)(a1 + 280);
      v34 = *((_DWORD *)&v121 + v27);
      if (v23)
        v35 = v23;
      else
        v35 = *((_DWORD *)&v121 + v27);
      if (v35 < v34)
        v34 = v35;
      v23 = v34 - 1;
    }
    else
    {
      v27 = *(int *)(a1 + 280);
      if (v23 >= *((_DWORD *)&v121 + v27))
        goto LABEL_95;
    }
    v36 = v117;
    if (v117)
    {
      v37 = (_DWORD *)v119;
      if (v119)
      {
        v39 = *(_DWORD *)(v117 + 8);
        v38 = *(_DWORD *)(v117 + 12);
        v40 = v38 * v39;
        v41 = *(_DWORD *)(v117 + 16);
        v42 = v38 * v39 * v41;
        v43 = HIDWORD(v113);
        v44 = v42 * HIDWORD(v113);
        switch((int)v27)
        {
          case 0:
            v45 = (v39 & (v23 >> 31)) + v23;
            if (v7 == 100 && v26 <= 1)
            {
              *(_OWORD *)&src.flags = 0u;
              memset(&src.data_type, 0, 32);
              memset(&src.stride[5], 0, 32);
              memset(&src.size[3], 0, 40);
              src.layout = BNNSDataLayout4DLastMajor;
              src.size[1] = SDWORD1(v113);
              src.size[2] = SDWORD2(v113);
              src.size[3] = v114 * HIDWORD(v113);
              src.stride[0] = 1;
              src.stride[1] = (int)v113;
              src.stride[2] = (int)v113 * (uint64_t)SDWORD1(v113);
              src.stride[3] = SLODWORD(src.stride[2]) * (uint64_t)SDWORD2(v113);
              src.stride[4] = v114 * HIDWORD(v113) * LODWORD(src.stride[2]) * DWORD2(v113);
              src.data = (void *)(*(_QWORD *)(v117 + 24) + 4 * v45);
              src.data_type = BNNSDataTypeFloat32;
              src.data_scale = 1.0;
              memset(&dest.data_type, 0, 32);
              memset(&dest.size[4], 0, 104);
              dest.flags = BNNSNDArrayFlagBackpropSet;
              dest.layout = BNNSDataLayout4DLastMajor;
              *(_QWORD *)&v46 = v108;
              *((_QWORD *)&v46 + 1) = v109.i32[0];
              src.size[0] = v108;
              *(_OWORD *)dest.size = v46;
              dest.size[2] = v109.i32[1];
              dest.size[3] = v109.i32[3] * (uint64_t)v109.i32[2];
              dest.data = *(void **)(v119 + 24);
              dest.data_type = BNNSDataTypeFloat32;
              dest.data_scale = 1.0;
              memset(&filter_params, 0, sizeof(filter_params));
              v47 = *(_QWORD *)(a1 + 8);
              if (v47 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v47 == &off_1E2D5E820)
                filter_params.n_threads = *(_QWORD *)(v47 + 168);
              if (BNNSCopy(&dest, &src, &filter_params))
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("BNNS error");
            }
            else
            {
              v80 = *(unsigned int *)(v119 + 20);
              if ((int)v80 >= 1)
              {
                v81 = 0;
                v82 = v39;
                v83 = *(_DWORD **)(v119 + 24);
                v84 = *(unsigned int *)(v119 + 16);
                v85 = 4 * v45;
                v86 = 4 * v42;
                v87 = 4 * v40;
                v88 = 4 * v82;
                v89 = 4 * v26;
                do
                {
                  if ((int)v84 >= 1)
                  {
                    v90 = 0;
                    v91 = v37[3];
                    v92 = v85;
                    do
                    {
                      if ((int)v91 >= 1)
                      {
                        v93 = 0;
                        v94 = v37[2];
                        v95 = (_DWORD *)(*(_QWORD *)(v36 + 24) + v92);
                        do
                        {
                          v96 = v95;
                          v97 = v94;
                          if (v94 >= 1)
                          {
                            do
                            {
                              *v83++ = *v96;
                              v96 = (_DWORD *)((char *)v96 + v89);
                              --v97;
                            }
                            while (v97);
                          }
                          ++v93;
                          v95 = (_DWORD *)((char *)v95 + v88);
                        }
                        while (v93 != v91);
                      }
                      ++v90;
                      v92 += v87;
                    }
                    while (v90 != v84);
                  }
                  ++v81;
                  v85 += v86;
                }
                while (v81 != v80);
              }
            }
            return;
          case 1:
            if (*(int *)(v119 + 20) >= 1)
            {
              v72 = 0;
              v73 = ((v38 & (v23 >> 31)) + v23) * v39;
              v74 = *(char **)(v119 + 24);
              v75 = v40;
              v104 = v42;
              do
              {
                if ((int)v37[4] >= 1)
                {
                  v76 = 0;
                  do
                  {
                    if ((int)v37[3] >= 1)
                    {
                      v77 = 0;
                      v78 = (char *)(*(_QWORD *)(v36 + 24) + 4 * v72 * v104 + 4 * v76 * v75 + 4 * v73);
                      LODWORD(v79) = *(_DWORD *)(v36 + 8);
                      do
                      {
                        memcpy(v74, v78, 4 * (int)v79);
                        v36 = v117;
                        v79 = *(int *)(v117 + 8);
                        v74 += 4 * v79;
                        v78 += 4 * *(_DWORD *)(a1 + 292) * (int)v79;
                        ++v77;
                        v37 = (_DWORD *)v119;
                      }
                      while (v77 < *(_DWORD *)(v119 + 12));
                    }
                    ++v76;
                  }
                  while (v76 < (int)v37[4]);
                }
                ++v72;
              }
              while (v72 < (int)v37[5]);
            }
            break;
          case 2:
            if (*(int *)(v119 + 20) >= 1)
            {
              v52 = 0;
              v53 = *(char **)(v119 + 24);
              v54 = ((v41 & (v23 >> 31)) + v23) * v40;
              v55 = v42;
              do
              {
                if ((int)v37[4] >= 1)
                {
                  v56 = 0;
                  v57 = (char *)(*(_QWORD *)(v36 + 24) + 4 * v52 * v55 + 4 * v54);
                  v58 = *(_DWORD *)(v36 + 8);
                  v59 = *(_DWORD *)(v36 + 12);
                  do
                  {
                    memcpy(v53, v57, 4 * v59 * (uint64_t)v58);
                    v37 = (_DWORD *)v119;
                    v53 += 4 * v37[3] * v37[2];
                    v36 = v117;
                    v58 = *(_DWORD *)(v117 + 8);
                    v59 = *(_DWORD *)(v117 + 12);
                    v57 += 4 * v59 * v58 * *(_DWORD *)(a1 + 292);
                    ++v56;
                  }
                  while (v56 < *(_DWORD *)(v119 + 16));
                }
                ++v52;
              }
              while (v52 < (int)v37[5]);
            }
            break;
          case 3:
            v60 = v109.i32[3];
            if (v109.i32[3] >= 1)
            {
              v61 = 0;
              v62 = *(char **)(v119 + 24);
              v63 = ((HIDWORD(v121) & (v23 >> 31)) + v23) * v42;
              v64 = v44;
              v65 = v109.i32[2];
              do
              {
                if (v65 >= 1)
                {
                  v66 = 0;
                  v67 = (char *)(*(_QWORD *)(v36 + 24) + 4 * v63 + 4 * v61 * v64);
                  v68 = *(_DWORD *)(v36 + 8);
                  v69 = *(_DWORD *)(v36 + 12);
                  v70 = *(_DWORD *)(v36 + 16);
                  do
                  {
                    memcpy(v62, v67, 4 * v69 * (uint64_t)v68 * v70);
                    v36 = v117;
                    v68 = *(_DWORD *)(v117 + 8);
                    v69 = *(_DWORD *)(v117 + 12);
                    v70 = *(_DWORD *)(v117 + 16);
                    v71 = v69 * v68 * v70;
                    v62 += 4 * v71;
                    v67 += 4 * v71 * *(_DWORD *)(a1 + 292);
                    ++v66;
                    v65 = v109.i32[2];
                  }
                  while (v66 < v109.i32[2]);
                  v60 = v109.i32[3];
                }
                ++v61;
              }
              while (v61 < v60);
            }
            break;
          case 4:
            if (v109.i32[3] >= 1)
            {
              v48 = 0;
              v49 = (char *)(*(_QWORD *)(v117 + 24) + 4 * ((v122 & (v23 >> 31)) + v23) * v44);
              v50 = *(char **)(v119 + 24);
              do
              {
                memcpy(v50, v49, 4 * v38 * (uint64_t)v39 * v41 * v43);
                v39 = *(_DWORD *)(v36 + 8);
                v38 = *(_DWORD *)(v36 + 12);
                v41 = *(_DWORD *)(v36 + 16);
                v43 = HIDWORD(v113);
                v51 = v38 * v39 * v41 * HIDWORD(v113);
                v50 += 4 * v51;
                v49 += 4 * v51 * *(_DWORD *)(a1 + 292);
                ++v48;
              }
              while (v48 < v109.i32[3]);
            }
            break;
          default:
            break;
        }
      }
    }
  }
LABEL_95:
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  v98 = v118;
  if (v118)
  {
    v99 = (unint64_t *)&v118->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
}

void sub_190E90CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v64;
  void *v66;

  if (__p)
    operator delete(__p);
  v66 = *(void **)(v64 - 184);
  if (v66)
  {
    *(_QWORD *)(v64 - 176) = v66;
    operator delete(v66);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v64 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v64 - 144);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _OWORD v14[8];
  uint64_t v15;
  int v16;

  v16 = a4;
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E90E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t i;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  unint64_t *v22;
  std::string v23;
  std::string v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v25 + 160))(v25, __p, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v6 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v24, "size_of_axes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v25 + 160))(v25, __p, a2 + 1);
    if (v28 < 0)
      operator delete(__p[0]);
    v9 = v26;
    if (!v26)
      goto LABEL_37;
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v12 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v24, "size_of_axes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v9 = v26;
    if (!v26)
      goto LABEL_37;
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldaxr(v15);
    while (__stlxr(v11 - 1, v15));
  }
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_37:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  for (i = 0; i != 32; ++i)
  {
    if (a3 && i < (int)a2[1])
    {
      std::to_string(&v23, i);
      v17 = std::string::insert(&v23, 0, "axes_");
      v24 = *v17;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
      (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v25 + 160))(v25, __p, &a2[i + 2]);
      if (v28 < 0)
        operator delete(__p[0]);
      v18 = v26;
      if (!v26)
        goto LABEL_58;
      v19 = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      goto LABEL_56;
    }
    if ((a3 & 1) != 0)
      continue;
    std::to_string(&v23, i);
    v21 = std::string::insert(&v23, 0, "axes_");
    v24 = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      a2[i + 2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v18 = v26;
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(v22);
      while (__stlxr(v20 - 1, v22));
LABEL_56:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
LABEL_58:
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_190E912A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_prepare_op_for_encode(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC71D8;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190E913D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void E5RT::BufferObject::~BufferObject(E5RT::BufferObject *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59C08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  E5RT::MemoryObject::~MemoryObject(this);
  JUMPOUT(0x19401CD90);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59C08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  E5RT::MemoryObject::~MemoryObject(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2D59C08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  E5RT::MemoryObject::~MemoryObject(this);
}

void E5RT::IOBufferObject::~IOBufferObject(CFTypeRef *this)
{
  CFRelease(this[4]);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
  JUMPOUT(0x19401CD90);
}

{
  CFRelease(this[4]);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

BOOL Espresso::ANECompilerEngine::mix_squeeze_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, unsigned int *a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL8 v20;
  std::__shared_weak_count *v21;
  const Espresso::net *v22;
  unint64_t *v23;
  unint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  const Espresso::net *v31;
  unint64_t *v32;
  unint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  Espresso::ANECompilerEngine *v39;
  std::__shared_weak_count *v40;
  const Espresso::net *v41;
  unint64_t *v42;
  unint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  __int128 v46;
  unsigned int v47;
  unint64_t *v48;
  unint64_t v49;
  const Espresso::base_kernel::validate_for_engine_args_t *v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned int v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  __CFString *v94;
  int64x2_t *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  int64x2_t *v101[2];
  void *v102[2];
  char v103;
  char v104;
  void **v105;
  std::__shared_weak_count *v106;
  int64x2_t *v107;
  std::__shared_weak_count *v108;
  int64x2_t *v109;
  std::__shared_weak_count *v110;
  void *v111[3];
  int64x2_t *v112;
  std::__shared_weak_count *v113;
  void **v114;
  __int128 v115;
  char v116;
  __int128 v117;
  int v118;
  _BYTE v119[20];
  int v120;
  _OWORD v121[2];
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  const Espresso::base_kernel::validate_for_engine_args_t *v126;
  std::__shared_weak_count *v127;
  unsigned int v128;
  int64x2_t *v129;
  std::__shared_weak_count *v130;
  char v131;
  void *v132[2];
  char v133;
  _OWORD v134[2];
  uint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  const Espresso::base_kernel::validate_for_engine_args_t *v139;
  std::__shared_weak_count *v140;
  void **v141[4];
  _OWORD v142[2];
  uint64_t v143;
  void *__p;
  void *v145;
  uint64_t v146;
  const Espresso::base_kernel::validate_for_engine_args_t *v147;
  std::__shared_weak_count *v148;
  __int128 v149;
  char v150;
  std::string v151;
  _DWORD v152[6];
  _BYTE v153[32];
  std::__shared_weak_count *v154;
  int64x2_t *v155;
  std::__shared_weak_count *v156;
  const Espresso::base_kernel::validate_for_engine_args_t *v157;
  std::__shared_weak_count *v158;

  v6 = (_OWORD *)*((_QWORD *)a3 + 6);
  v157 = 0;
  v158 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v158 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((_QWORD *)v6 + 9);
    v157 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = (std::__shared_weak_count *)a2[1];
    v155 = *a2;
    v156 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v149, "squeeze_kernel not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v151, &v149, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v155, (Espresso::base_kernel::validate_for_engine_warning_t *)&v151);
    v14 = v154;
    if (v154)
    {
      v15 = (unint64_t *)&v154->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v141[0] = (void **)v153;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v141);
    v141[0] = (void **)v152;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v141);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    if (v150 < 0)
      operator delete((void *)v149);
    v17 = v156;
    if (v156)
    {
      v18 = (unint64_t *)&v156->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = 0;
    goto LABEL_146;
  }
  v22 = v157;
  v21 = v158;
  v147 = v157;
  v148 = v158;
  if (v158)
  {
    v23 = (unint64_t *)&v158->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(_OWORD **)a3;
  v26 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v27 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v142[0] = *(_OWORD *)*(_QWORD *)a3;
  v142[1] = v27;
  v143 = v26;
  __p = 0;
  v146 = 0;
  v145 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v25 + 5), *((_QWORD *)v25 + 6), (uint64_t)(*((_QWORD *)v25 + 6) - *((_QWORD *)v25 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v149, v22, (const Espresso::layer_shape *)v142, 1);
  if (__p)
  {
    v145 = __p;
    operator delete(__p);
  }
  if (v21)
  {
    v28 = (unint64_t *)&v21->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v31 = v157;
  v30 = v158;
  v139 = v157;
  v140 = v158;
  if (v158)
  {
    v32 = (unint64_t *)&v158->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (_OWORD *)*((_QWORD *)a3 + 3);
  v35 = *((_QWORD *)v34 + 4);
  v36 = v34[1];
  v134[0] = *v34;
  v134[1] = v36;
  v135 = v35;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v136, *((const void **)v34 + 5), *((_QWORD *)v34 + 6), (uint64_t)(*((_QWORD *)v34 + 6) - *((_QWORD *)v34 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v141, v31, (const Espresso::layer_shape *)v134, 1);
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (v30)
  {
    v37 = (unint64_t *)&v30->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v39 = v9;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v149, v39))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v141, v39))
    {
      v131 = 1;
      std::string::basic_string[abi:ne180100]<0>(v132, "Success");
    }
    else
    {
      v131 = 0;
      std::string::basic_string[abi:ne180100]<0>(v132, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    v131 = 0;
    std::string::basic_string[abi:ne180100]<0>(v132, "Input blob dimensions exceed ANE limit.");
  }

  if (!v131)
  {
    v55 = (std::__shared_weak_count *)a2[1];
    v129 = *a2;
    v130 = v55;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v151, (__int128 *)v132, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v129, (Espresso::base_kernel::validate_for_engine_warning_t *)&v151);
    v58 = v154;
    if (v154)
    {
      v59 = (unint64_t *)&v154->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v114 = (void **)v153;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v114);
    v114 = (void **)v152;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v114);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    v61 = v130;
    if (v130)
    {
      v62 = (unint64_t *)&v130->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v20 = 0;
    goto LABEL_144;
  }
  v128 = 0;
  v41 = v157;
  v40 = v158;
  v126 = v157;
  v127 = v158;
  if (v158)
  {
    v42 = (unint64_t *)&v158->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = *(_OWORD **)a3;
  v45 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v46 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v121[0] = *(_OWORD *)*(_QWORD *)a3;
  v121[1] = v46;
  v122 = v45;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v123, *((const void **)v44 + 5), *((_QWORD *)v44 + 6), (uint64_t)(*((_QWORD *)v44 + 6) - *((_QWORD *)v44 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v151, v41, (const Espresso::layer_shape *)v121, 1);
  v47 = v152[1];
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  if (v40)
  {
    v48 = (unint64_t *)&v40->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v128 = v47;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v119, *(const Espresso::layer_shape **)a3, 0);
  v117 = xmmword_191A761E0;
  v118 = 4;
  Espresso::ANECompilerEngine::mix_squeeze_kernel::gen_transpose_params_for_squeeze((uint64_t)&v114, a1, (uint64_t)v119, &v128, v120, (uint64_t)&v117);
  if (!(_BYTE)v114)
  {
    v64 = (std::__shared_weak_count *)a2[1];
    v112 = *a2;
    v113 = v64;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v151, &v115, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v112, (Espresso::base_kernel::validate_for_engine_warning_t *)&v151);
    v67 = v154;
    if (v154)
    {
      v68 = (unint64_t *)&v154->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v102[0] = v153;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
    v102[0] = v152;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    v70 = v113;
    if (v113)
    {
      v71 = (unint64_t *)&v113->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v20 = 0;
    goto LABEL_142;
  }
  Espresso::ANECompilerEngine::DecomposeTranspose((unint64_t **)v111, (unsigned int *)&v117, 1);
  v50 = v157;
  v51 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v157, 0);
  v52 = **((_QWORD **)a3 + 6) + 224 * *((_QWORD *)a3 + 9);
  v53 = *(_QWORD **)(v52 + 112);
  if (*(_QWORD **)(v52 + 120) == v53)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v50 + 45), v53))
  {
    v54 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v50 + 352, v53) + 8);
    if (v54 == -1)
      v54 = 1;
  }
  else
  {
    v54 = a3[16];
  }
  if (v51 <= 1)
    v73 = 1;
  else
    v73 = v51;
  if (v54 <= 1)
    v54 = 1;
  if (v73 != v54)
  {
    v83 = (std::__shared_weak_count *)a2[1];
    v109 = *a2;
    v110 = v83;
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    std::string::basic_string[abi:ne180100]<0>(v102, "squeeze_kernel: cannot change compute paths. Try quantizing your model differently in order to cast.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v151, (__int128 *)v102, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v109, (Espresso::base_kernel::validate_for_engine_warning_t *)&v151);
    v86 = v154;
    if (v154)
    {
      v87 = (unint64_t *)&v154->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v105 = (void **)v153;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v105);
    v105 = (void **)v152;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v105);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    if (v103 < 0)
      operator delete(v102[0]);
    v80 = v110;
    if (!v110)
      goto LABEL_139;
    v89 = (unint64_t *)&v110->__shared_owners_;
    do
      v82 = __ldaxr(v89);
    while (__stlxr(v82 - 1, v89));
    goto LABEL_137;
  }
  if (v73 < 8 && ((0x4Bu >> (v73 - 1)) & 1) != 0)
  {
    v94 = off_1E2DD61B8[v73 - 1];
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v105, (NSString *)(a1 + 424), v39);
    Espresso::ANECompilerEngine::validate_transpose((uint64_t)v102, (uint64_t)&v105, (uint64_t)&v149, (uint64_t)v94, (unsigned int **)v111);
    v20 = LOBYTE(v102[0]) != 0;
    if (!LOBYTE(v102[0]))
    {
      v95 = a2[1];
      v101[0] = *a2;
      v101[1] = v95;
      if (v95)
      {
        v96 = &v95->u64[1];
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v151, (__int128 *)&v102[1], (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v101, (Espresso::base_kernel::validate_for_engine_warning_t *)&v151);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v151.__r_.__value_.__l.__data_);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v101);
    }
    if (v104 < 0)
      operator delete(v102[1]);
    v98 = v106;
    if (v106)
    {
      v99 = (unint64_t *)&v106->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    goto LABEL_140;
  }
  v74 = (std::__shared_weak_count *)a2[1];
  v107 = *a2;
  v108 = v74;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  std::string::basic_string[abi:ne180100]<0>(v102, "squeeze_kernel: invalid compute path for input.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v151, (__int128 *)v102, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v107, (Espresso::base_kernel::validate_for_engine_warning_t *)&v151);
  v77 = v154;
  if (v154)
  {
    v78 = (unint64_t *)&v154->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v105 = (void **)v153;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v105);
  v105 = (void **)v152;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v105);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (v103 < 0)
    operator delete(v102[0]);
  v80 = v108;
  if (v108)
  {
    v81 = (unint64_t *)&v108->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
LABEL_137:
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
LABEL_139:
  v20 = 0;
LABEL_140:
  if (v111[0])
    operator delete(v111[0]);
LABEL_142:
  if (v116 < 0)
    operator delete((void *)v115);
LABEL_144:
  if (v133 < 0)
    operator delete(v132[0]);
LABEL_146:

  v90 = v158;
  if (v158)
  {
    v91 = (unint64_t *)&v158->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  return v20;
}

void sub_190E91F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;
  uint64_t v64;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v64 - 224));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a25)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (a63 < 0)
    operator delete(a58);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v64 - 96);
  _Unwind_Resume(a1);
}

void sub_190E9211C()
{
  JUMPOUT(0x190E9210CLL);
}

uint64_t Espresso::ANECompilerEngine::mix_expand_dims_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, unsigned int *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  void *v9;
  std::__shared_weak_count *v10;
  const Espresso::net *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  const Espresso::net *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  NSString *v29;
  int64x2_t *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  const Espresso::net *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  unsigned int v46;
  unint64_t *v47;
  unint64_t v48;
  const Espresso::base_kernel::validate_for_engine_args_t *v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  int64x2_t *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  int64x2_t *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unsigned int v69;
  int64x2_t *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int64x2_t *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __CFString *v89;
  NSString *v90;
  std::string *v91;
  int64x2_t *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  int64x2_t *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  int64x2_t *v106[2];
  void *v107[2];
  char v108;
  std::string v109;
  int64x2_t *v110;
  uint64_t v111;
  void *v112[2];
  char v113;
  char v114;
  char v115[8];
  std::__shared_weak_count *v116;
  int64x2_t *v117;
  uint64_t v118;
  int64x2_t *v119;
  uint64_t v120;
  void *v121[3];
  int64x2_t *v122;
  uint64_t v123;
  void *v124[2];
  char v125;
  char v126;
  __int128 v127;
  int v128;
  _BYTE v129[20];
  int __val;
  _OWORD __val_4[2];
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  const Espresso::base_kernel::validate_for_engine_args_t *v136;
  std::__shared_weak_count *v137;
  unsigned int v138;
  int64x2_t *v139;
  uint64_t v140;
  std::string v141;
  _DWORD v142[6];
  _BYTE v143[32];
  std::__shared_weak_count *v144;
  int64x2_t *v145;
  uint64_t v146;
  char v147;
  void *v148[2];
  char v149;
  _OWORD v150[2];
  uint64_t v151;
  void *__p;
  void *v153;
  uint64_t v154;
  const Espresso::base_kernel::validate_for_engine_args_t *v155;
  std::__shared_weak_count *v156;
  _DWORD v157[8];
  _OWORD v158[2];
  uint64_t v159;
  void *v160;
  void *v161;
  uint64_t v162;
  const Espresso::base_kernel::validate_for_engine_args_t *v163;
  std::__shared_weak_count *v164;
  _DWORD v165[8];
  const Espresso::base_kernel::validate_for_engine_args_t *v166;
  std::__shared_weak_count *v167;

  v6 = *((_QWORD *)a3 + 6);
  v166 = 0;
  v167 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v167 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v166 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v166;
  v10 = v167;
  v163 = v166;
  v164 = v167;
  if (v167)
  {
    p_shared_owners = (unint64_t *)&v167->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)a3;
  v15 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v16 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v158[0] = *(_OWORD *)*(_QWORD *)a3;
  v158[1] = v16;
  v159 = v15;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v160, *(const void **)(v14 + 40), *(_QWORD *)(v14 + 48), (uint64_t)(*(_QWORD *)(v14 + 48) - *(_QWORD *)(v14 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v165, v11, (const Espresso::layer_shape *)v158, 1);
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (v10)
  {
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v20 = v166;
  v19 = v167;
  v155 = v166;
  v156 = v167;
  if (v167)
  {
    v21 = (unint64_t *)&v167->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *((_QWORD *)a3 + 3);
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(_OWORD *)(v23 + 16);
  v150[0] = *(_OWORD *)v23;
  v150[1] = v25;
  v151 = v24;
  __p = 0;
  v154 = 0;
  v153 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v23 + 40), *(_QWORD *)(v23 + 48), (uint64_t)(*(_QWORD *)(v23 + 48) - *(_QWORD *)(v23 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v157, v20, (const Espresso::layer_shape *)v150, 1);
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v26 = (unint64_t *)&v19->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v28 = v9;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v165, v28))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v157, v28))
    {
      v147 = 1;
      std::string::basic_string[abi:ne180100]<0>(v148, "Success");
    }
    else
    {
      v147 = 0;
      std::string::basic_string[abi:ne180100]<0>(v148, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    v147 = 0;
    std::string::basic_string[abi:ne180100]<0>(v148, "Input blob dimensions exceed ANE limit.");
  }

  if (v147)
  {
    if ((v157[6] == 5 || v157[5] != 1)
      && Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v28, v29))
    {
      v30 = a2[1];
      v139 = *a2;
      v140 = (uint64_t)v30;
      if (v30)
      {
        v31 = &v30->u64[1];
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      std::string::basic_string[abi:ne180100]<0>(v124, "Invalid expand_dims, rank 4->5 expand_dims not supported on specified architecture.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v141, (__int128 *)v124, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v139, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
      v33 = v144;
      if (v144)
      {
        v34 = (unint64_t *)&v144->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v112[0] = v143;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v112);
      v112[0] = v142;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v112);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      if (v125 < 0)
        operator delete(v124[0]);
      v36 = v140;
      if (v140)
      {
        v37 = (unint64_t *)(v140 + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
LABEL_78:
        if (!v38)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v36);
        }
        v36 = 0;
        goto LABEL_144;
      }
      goto LABEL_144;
    }
    v138 = 0;
    v40 = v166;
    v39 = v167;
    v136 = v166;
    v137 = v167;
    if (v167)
    {
      v41 = (unint64_t *)&v167->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = *((_QWORD *)a3 + 3);
    v44 = *(_QWORD *)(v43 + 32);
    v45 = *(_OWORD *)(v43 + 16);
    __val_4[0] = *(_OWORD *)v43;
    __val_4[1] = v45;
    v132 = v44;
    v133 = 0;
    v134 = 0;
    v135 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v133, *(const void **)(v43 + 40), *(_QWORD *)(v43 + 48), (uint64_t)(*(_QWORD *)(v43 + 48) - *(_QWORD *)(v43 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v141, v40, (const Espresso::layer_shape *)__val_4, 1);
    v46 = v142[1];
    if (v133)
    {
      v134 = v133;
      operator delete(v133);
    }
    if (v39)
    {
      v47 = (unint64_t *)&v39->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v138 = v46;
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v129, *(const Espresso::layer_shape **)a3, 0);
    v127 = xmmword_191A761E0;
    v128 = 4;
    Espresso::ANECompilerEngine::mix_expand_dims_kernel::gen_transpose_params_for_expand_dims((uint64_t)v124, a1, (uint64_t)v129, &v138, __val, (uint64_t)&v127);
    if (!LOBYTE(v124[0]))
    {
      v61 = a2[1];
      v122 = *a2;
      v123 = (uint64_t)v61;
      if (v61)
      {
        v62 = &v61->u64[1];
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v141, (__int128 *)&v124[1], (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v122, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
      v64 = v144;
      if (v144)
      {
        v65 = (unint64_t *)&v144->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v112[0] = v143;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v112);
      v112[0] = v142;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v112);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      v36 = v123;
      if (v123)
      {
        v67 = (unint64_t *)(v123 + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v36);
        }
        v36 = 0;
      }
      goto LABEL_142;
    }
    Espresso::ANECompilerEngine::DecomposeTranspose((unint64_t **)v121, (unsigned int *)&v127, 1);
    v49 = v166;
    v50 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v166, 0);
    v51 = **((_QWORD **)a3 + 6) + 224 * *((_QWORD *)a3 + 9);
    v52 = *(_QWORD **)(v51 + 112);
    if (*(_QWORD **)(v51 + 120) == v52)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v49 + 45), v52))
    {
      v53 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v49 + 352, v52) + 8);
      if (v53 == -1)
        v53 = 1;
    }
    else
    {
      v53 = a3[16];
    }
    if (v50 <= 1)
      v69 = 1;
    else
      v69 = v50;
    if (v53 <= 1)
      v53 = 1;
    if (v69 != v53)
    {
      v78 = a2[1];
      v119 = *a2;
      v120 = (uint64_t)v78;
      if (v78)
      {
        v79 = &v78->u64[1];
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      std::string::basic_string[abi:ne180100]<0>(v112, "Expand dims cannot change compute paths. Try quantizing your model differently in order to cast.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v141, (__int128 *)v112, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v119, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
      v81 = v144;
      if (v144)
      {
        v82 = (unint64_t *)&v144->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      if (v113 < 0)
        operator delete(v112[0]);
      v36 = v120;
      if (!v120)
        goto LABEL_140;
      v84 = (unint64_t *)(v120 + 8);
      do
        v77 = __ldaxr(v84);
      while (__stlxr(v77 - 1, v84));
      goto LABEL_137;
    }
    if (v69 >= 8 || ((0x4Bu >> (v69 - 1)) & 1) == 0)
    {
      v70 = a2[1];
      v117 = *a2;
      v118 = (uint64_t)v70;
      if (v70)
      {
        v71 = &v70->u64[1];
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      std::string::basic_string[abi:ne180100]<0>(v112, "expand_dims_kernel: invalid compute path for input.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v141, (__int128 *)v112, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v117, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
      v73 = v144;
      if (v144)
      {
        v74 = (unint64_t *)&v144->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      if (v113 < 0)
        operator delete(v112[0]);
      v36 = v118;
      if (!v118)
        goto LABEL_140;
      v76 = (unint64_t *)(v118 + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
LABEL_137:
      if (!v77)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v36);
      }
      v36 = 0;
LABEL_140:
      if (v121[0])
        operator delete(v121[0]);
LABEL_142:
      if (v126 < 0)
        operator delete(v124[1]);
      goto LABEL_144;
    }
    v89 = off_1E2DD61B8[v69 - 1];
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v115, (NSString *)(a1 + 416), v28);
    Espresso::ANECompilerEngine::validate_transpose((uint64_t)v112, (uint64_t)v115, (uint64_t)v165, (uint64_t)v89, (unsigned int **)v121);
    if (!LOBYTE(v112[0]))
    {
      v92 = a2[1];
      v110 = *a2;
      v111 = (uint64_t)v92;
      if (v92)
      {
        v93 = &v92->u64[1];
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v141, (__int128 *)&v112[1], (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v110, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
      v95 = v144;
      if (v144)
      {
        v96 = (unint64_t *)&v144->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      v36 = v111;
      if (!v111)
        goto LABEL_191;
      v98 = (unint64_t *)(v111 + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v36);
      }
      goto LABEL_187;
    }
    if (!Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v28, v90))
    {
LABEL_190:
      v36 = 1;
      goto LABEL_191;
    }
    std::string::basic_string[abi:ne180100]<0>(&v141, "experimental.ane.early_arch_transposes");
    std::string::basic_string[abi:ne180100]<0>(v107, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v49 + 472, (uint64_t)&v141, (uint64_t)v107, &v109);
    if (v108 < 0)
      operator delete(v107[0]);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v109.__r_.__value_.__l.__size_ != 1)
        goto LABEL_179;
      v91 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_179;
      v91 = &v109;
    }
    if (v91->__r_.__value_.__s.__data_[0] == 49)
    {
LABEL_188:
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      goto LABEL_190;
    }
LABEL_179:
    if (v121[1] != v121[0])
    {
      v100 = a2[1];
      v106[0] = *a2;
      v106[1] = v100;
      if (v100)
      {
        v101 = &v100->u64[1];
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
      std::string::basic_string[abi:ne180100]<0>(v107, "Invalid expand_dims for requested architecture would require transpose.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v141, (__int128 *)v107, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v106, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v141.__r_.__value_.__l.__data_);
      if (v108 < 0)
        operator delete(v107[0]);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v106);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
LABEL_187:
      v36 = 0;
LABEL_191:
      if (v114 < 0)
        operator delete(v112[1]);
      v103 = v116;
      if (v116)
      {
        v104 = (unint64_t *)&v116->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      goto LABEL_140;
    }
    goto LABEL_188;
  }
  v54 = a2[1];
  v145 = *a2;
  v146 = (uint64_t)v54;
  if (v54)
  {
    v55 = &v54->u64[1];
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v141, (__int128 *)v148, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v145, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
  v57 = v144;
  if (v144)
  {
    v58 = (unint64_t *)&v144->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v124[0] = v143;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
  v124[0] = v142;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  v36 = v146;
  if (v146)
  {
    v60 = (unint64_t *)(v146 + 8);
    do
      v38 = __ldaxr(v60);
    while (__stlxr(v38 - 1, v60));
    goto LABEL_78;
  }
LABEL_144:
  if (v149 < 0)
    operator delete(v148[0]);

  v85 = v167;
  if (v167)
  {
    v86 = (unint64_t *)&v167->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  return v36;
}

void sub_190E92D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t a71;
  void *v71;
  uint64_t v72;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&a71);
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (a39)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v72 - 96);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::validate_transpose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  uint64_t v21;
  std::string v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  ANECTransposeLayerDescInitialize();
  v10 = *a5;
  v9 = a5[1];
  v11 = v9 == *a5;
  v29 = ((char *)v9 - (char *)*a5) >> 3;
  if (!v11)
  {
    v12 = &v30;
    do
    {
      ANECDimensionMappingInitialize();
      v13 = *v10;
      if (v13 >= 5)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
      *v12 = (uint64_t)off_1E2DD6090[v13];
      v14 = v10[1];
      if (v14 >= 5)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
      v12[1] = (uint64_t)off_1E2DD6090[v14];
      v12 += 2;
      v10 += 2;
    }
    while (v10 != v9);
  }
  ANECTensorDescInitialize();
  v24 = 0;
  v25 = a4;
  v15 = *(_QWORD *)(a3 + 12);
  *(_QWORD *)&v16 = (int)v15;
  *((_QWORD *)&v16 + 1) = SHIDWORD(v15);
  v27 = v16;
  v28 = *(int *)(a3 + 8);
  *(_QWORD *)&v16 = (int)*(_QWORD *)a3;
  *((_QWORD *)&v16 + 1) = (int)HIDWORD(*(_QWORD *)a3);
  v26 = v16;
  v23 = 0;
  v17 = ANECValidateTransposeLayer();
  if (v17)
  {
    std::to_string(&v22, v17);
    v18 = std::string::insert(&v22, 0, "ANECValidateTransposeLayer check failed with status ");
    v19 = v18->__r_.__value_.__r.__words[0];
    v31[0] = v18->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v31 + 7);
    v21 = v31[0];
    *(_QWORD *)(a1 + 8) = v19;
    *(_QWORD *)(a1 + 16) = v21;
    *(_BYTE *)(a1 + 31) = v20;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "");
  }
}

void sub_190E931C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::DecomposeTranspose(unint64_t **a1, unsigned int *a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = *a2;
  if (*a2)
  {
    if (v6 <= 4)
    {
      v7 = 3;
      switch(v6)
      {
        case 1u:
          goto LABEL_10;
        case 2u:
          if (a3)
            v7 = 2;
          else
            v7 = 1;
          goto LABEL_10;
        case 3u:
          v7 = 2 * (a3 == 0);
          goto LABEL_10;
        case 4u:
          v7 = a3 != 0;
LABEL_10:
          v8 = (unint64_t *)operator new(8uLL);
          *v8 = v7 | 0x400000000;
          v9 = v8 + 1;
          *a1 = v8;
          a1[1] = v8 + 1;
          a1[2] = v8 + 1;
          goto LABEL_11;
        default:
          break;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
  }
  v8 = 0;
  v9 = 0;
LABEL_11:
  v10 = a2[1];
  if (v10 == 1)
  {
    v11 = v9;
  }
  else
  {
    v12 = 4;
    switch(v10)
    {
      case 0u:
        break;
      case 2u:
        if (a3)
          v12 = 2;
        else
          v12 = 1;
        break;
      case 3u:
        v12 = 2 * (a3 == 0);
        break;
      case 4u:
        v12 = a3 != 0;
        break;
      default:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
    }
    v13 = (char *)v9 - (char *)v8;
    v14 = v9 - v8;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    if (v13 >> 2 > v15)
      v15 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v16);
    else
      v17 = 0;
    v18 = (uint64_t *)(v16 + 8 * v14);
    *v18 = v12 | 0x300000000;
    v11 = (unint64_t *)(v18 + 1);
    if (v9 != v8)
    {
      do
      {
        v19 = *--v9;
        *--v18 = v19;
      }
      while (v9 != v8);
      v8 = *a1;
    }
    *a1 = (unint64_t *)v18;
    a1[1] = v11;
    a1[2] = (unint64_t *)(v16 + 8 * v17);
    if (v8)
      operator delete(v8);
    a1[1] = v11;
  }
  v20 = a2[2];
  if (v20 != 2)
  {
    v21 = 4;
    switch(v20)
    {
      case 0u:
        break;
      case 1u:
        v21 = 3;
        break;
      case 3u:
        v21 = 2 * (a3 == 0);
        break;
      case 4u:
        v21 = a3 != 0;
        break;
      default:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
    }
    if (a3)
      v22 = 2;
    else
      v22 = 1;
    v23 = (unint64_t)a1[2];
    if ((unint64_t)v11 >= v23)
    {
      v25 = *a1;
      v26 = v11 - *a1;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = v23 - (_QWORD)v25;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
        v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
      else
        v30 = 0;
      v31 = (unint64_t *)(v29 + 8 * v26);
      *v31 = v21 | (unint64_t)(v22 << 32);
      v24 = v31 + 1;
      if (v11 != v25)
      {
        do
        {
          v32 = *--v11;
          *--v31 = v32;
        }
        while (v11 != v25);
        v11 = *a1;
      }
      *a1 = v31;
      a1[1] = v24;
      a1[2] = (unint64_t *)(v29 + 8 * v30);
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v11 = v21 | (unint64_t)(v22 << 32);
      v24 = v11 + 1;
    }
    a1[1] = v24;
    v11 = v24;
  }
  v33 = a2[3];
  if (v33 != 3)
  {
    if (v33 <= 4)
    {
      v34 = 4;
      switch(v33)
      {
        case 0u:
          goto LABEL_67;
        case 1u:
          v34 = 3;
          goto LABEL_67;
        case 2u:
          if (a3)
            v34 = 2;
          else
            v34 = 1;
          goto LABEL_67;
        case 4u:
          v34 = a3 != 0;
LABEL_67:
          v35 = 2 * (a3 == 0);
          v36 = (unint64_t)a1[2];
          if ((unint64_t)v11 >= v36)
          {
            v38 = *a1;
            v39 = v11 - *a1;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v41 = v36 - (_QWORD)v38;
            if (v41 >> 2 > v40)
              v40 = v41 >> 2;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
              v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v42);
            else
              v43 = 0;
            v44 = (unint64_t *)(v42 + 8 * v39);
            *v44 = v34 | (unint64_t)(v35 << 32);
            v37 = v44 + 1;
            if (v11 != v38)
            {
              do
              {
                v45 = *--v11;
                *--v44 = v45;
              }
              while (v11 != v38);
              v11 = *a1;
            }
            *a1 = v44;
            a1[1] = v37;
            a1[2] = (unint64_t *)(v42 + 8 * v43);
            if (v11)
              operator delete(v11);
          }
          else
          {
            *v11 = v34 | (unint64_t)(v35 << 32);
            v37 = v11 + 1;
          }
          a1[1] = v37;
          v11 = v37;
          goto LABEL_84;
        default:
          break;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
  }
LABEL_84:
  v46 = a2[4];
  if (v46 != 4)
  {
    v47 = 4;
    switch(v46)
    {
      case 0u:
        break;
      case 1u:
        v47 = 3;
        break;
      case 2u:
        if (a3)
          v47 = 2;
        else
          v47 = 1;
        break;
      case 3u:
        v47 = 2 * (a3 == 0);
        break;
      default:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
    }
    v48 = (unint64_t)a1[2];
    if ((unint64_t)v11 >= v48)
    {
      v50 = *a1;
      v51 = v11 - *a1;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v53 = v48 - (_QWORD)v50;
      if (v53 >> 2 > v52)
        v52 = v53 >> 2;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (v54)
        v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v54);
      else
        v55 = 0;
      v56 = (unint64_t *)(v54 + 8 * v51);
      *v56 = v47 | ((unint64_t)(a3 != 0) << 32);
      v49 = v56 + 1;
      if (v11 != v50)
      {
        do
        {
          v57 = *--v11;
          *--v56 = v57;
        }
        while (v11 != v50);
        v11 = *a1;
      }
      *a1 = v56;
      a1[1] = v49;
      a1[2] = (unint64_t *)(v54 + 8 * v55);
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v11 = v47 | ((unint64_t)(a3 != 0) << 32);
      v49 = v11 + 1;
    }
    a1[1] = v49;
  }
}

void sub_190E9375C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::mix_expand_dims_kernel::gen_transpose_params_for_expand_dims(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unint64_t __val, uint64_t a6)
{
  unint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unsigned int v27;
  unint64_t v28;
  std::string *v29;
  BOOL v30;
  int v31;
  __int128 v32;
  std::string::size_type v33;
  char v34;
  uint64_t *v35;
  uint64_t **v36;
  _BYTE v40[20];
  __int128 v41;
  int v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  _OWORD v46[8];
  uint64_t v47;
  std::string v48;
  _QWORD v49[5];

  v6 = __val;
  v49[2] = *MEMORY[0x1E0C80C00];
  v8 = *(_OWORD *)(a2 + 392);
  v46[6] = *(_OWORD *)(a2 + 376);
  v46[7] = v8;
  v47 = *(_QWORD *)(a2 + 408);
  v9 = *(_OWORD *)(a2 + 296);
  v46[0] = *(_OWORD *)(a2 + 280);
  v46[1] = v9;
  v10 = *(_OWORD *)(a2 + 328);
  v46[2] = *(_OWORD *)(a2 + 312);
  v46[3] = v10;
  v11 = *(_OWORD *)(a2 + 360);
  v46[4] = *(_OWORD *)(a2 + 344);
  v46[5] = v11;
  v12 = DWORD1(v46[0]);
  if (SDWORD1(v46[0]) >= 1)
  {
    v13 = DWORD1(v46[0]) + __val;
    v14 = (_DWORD *)v46 + 2;
    v15 = DWORD1(v46[0]);
    do
    {
      if ((*v14 & 0x80000000) != 0)
        *v14 += v13;
      ++v14;
      --v15;
    }
    while (v15);
  }
  if ((v46[0] & 0x80000000) != 0)
    LODWORD(v46[0]) += __val + 1;
  v16 = 0;
  v44 = 0;
  v45 = 0;
  v43 = &v44;
  if (v12 <= 1)
    v17 = 1;
  else
    v17 = v12;
  do
  {
    v18 = (int *)v46 + v16 + 2;
    if (v12 <= 0)
      v18 = (int *)v46;
    v19 = *v18;
    if (v19 < 0)
      v19 += v17 + *(_DWORD *)(a3 + 20);
    v20 = v19;
    v21 = &v44;
    v22 = &v44;
    if (v44)
    {
      v23 = v44;
      while (1)
      {
        while (1)
        {
          v21 = (uint64_t **)v23;
          v24 = v23[4];
          if (v24 <= v20)
            break;
          v23 = *v21;
          v22 = v21;
          if (!*v21)
            goto LABEL_23;
        }
        if (v24 >= v20)
          break;
        v23 = v21[1];
        if (!v23)
        {
          v22 = v21 + 1;
          goto LABEL_23;
        }
      }
    }
    else
    {
LABEL_23:
      v25 = (uint64_t *)operator new(0x28uLL);
      v25[4] = v20;
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v21;
      *v22 = v25;
      if (*v43)
      {
        v43 = (uint64_t **)*v43;
        v25 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v44, v25);
      ++v45;
    }
    ++v16;
  }
  while (v16 != v17);
  v41 = xmmword_191A761E0;
  v42 = 4;
  v26 = (uint64_t *)v43;
  if (v43 != &v44)
  {
    v27 = -1;
    do
    {
      v28 = v26[4];
      if (v6 == 4)
        v27 = *a4;
      *(_OWORD *)v40 = xmmword_191A761E0;
      *(_DWORD *)&v40[16] = 4;
      if (v6 >= 5)
      {
        std::to_string(&v48, v6);
        v29 = std::string::insert(&v48, 0, "get_transpose_for_expand_dims: dynamic model or invalid input rank ");
        goto LABEL_70;
      }
      if (v6 == 4)
      {
        if (v27 >= 2)
        {
          std::to_string(&v48, v27);
          v29 = std::string::insert(&v48, 0, "get_transpose_for_expand_dims: dynamic model or invalid top layout when expanding to rank 5, got ");
          goto LABEL_70;
        }
        if (v27 != 1)
        {
          switch(v28)
          {
            case 0uLL:
              *(_DWORD *)&v40[16] = 2;
              *(_QWORD *)&v40[8] = 0x400000003;
              goto LABEL_64;
            case 1uLL:
              *(_DWORD *)&v40[16] = 2;
              *(_DWORD *)&v40[8] = 4;
              goto LABEL_64;
            case 2uLL:
              goto LABEL_64;
            case 3uLL:
              *(_DWORD *)&v40[16] = 1;
              *(_DWORD *)&v40[4] = 4;
              goto LABEL_64;
            case 4uLL:
              *(_DWORD *)&v40[16] = 1;
              *(_QWORD *)v40 = 4;
              goto LABEL_64;
            default:
              goto LABEL_69;
          }
        }
        switch(v28)
        {
          case 0uLL:
            goto LABEL_64;
          case 1uLL:
            *(_QWORD *)&v40[12] = 0x300000004;
            goto LABEL_64;
          case 2uLL:
            *(_QWORD *)&v40[8] = 0x200000004;
            break;
          case 3uLL:
            *(_OWORD *)&v40[4] = xmmword_191A93540;
            goto LABEL_64;
          case 4uLL:
            *(_OWORD *)v40 = xmmword_191A93920;
            break;
          default:
            goto LABEL_69;
        }
        *(_DWORD *)&v40[16] = 3;
      }
      else
      {
        if (v28)
          v30 = v6 == 3;
        else
          v30 = 0;
        if (!v30)
        {
          if (!v28 || v6 != 2)
          {
            if (!v28 || v6 != 1)
              goto LABEL_64;
            if (v28 != 1)
            {
LABEL_69:
              std::to_string(&v48, v28);
              v29 = std::string::insert(&v48, 0, "get_transpose_for_expand_dims: invalid dimensions ");
LABEL_70:
              v33 = v29->__r_.__value_.__r.__words[0];
              v49[0] = v29->__r_.__value_.__l.__size_;
              *(_QWORD *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
              v34 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
              v29->__r_.__value_.__l.__size_ = 0;
              v29->__r_.__value_.__r.__words[2] = 0;
              v29->__r_.__value_.__r.__words[0] = 0;
              *(_BYTE *)a1 = 0;
              *(_QWORD *)(a1 + 8) = v33;
              *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v49 + 7);
              *(_QWORD *)(a1 + 16) = v49[0];
              *(_BYTE *)(a1 + 31) = v34;
              if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v48.__r_.__value_.__l.__data_);
              goto LABEL_72;
            }
            v32 = xmmword_191A93620;
            goto LABEL_63;
          }
          if (v28 == 2)
          {
            v32 = xmmword_191A93600;
            goto LABEL_63;
          }
          if (v28 != 1)
            goto LABEL_69;
          *(_QWORD *)&v40[4] = 0x100000002;
          v31 = 3;
          goto LABEL_60;
        }
        if (v28 == 3)
        {
          v32 = xmmword_191A93910;
LABEL_63:
          *(_OWORD *)v40 = v32;
          goto LABEL_64;
        }
        if (v28 == 2)
        {
          *(_QWORD *)&v40[4] = 0x100000003;
          v31 = 2;
LABEL_60:
          *(_DWORD *)&v40[12] = v31;
          goto LABEL_64;
        }
        if (v28 != 1)
          goto LABEL_69;
        *(_QWORD *)&v40[8] = 0x200000003;
      }
LABEL_64:
      *(_BYTE *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
LABEL_72:
      if (!*(_BYTE *)a1)
        goto LABEL_87;
      Espresso::ANECompilerEngine::merge_transpose_params((uint64_t)&v48, (int *)&v41, (int *)v40);
      v41 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
      v42 = v48.__r_.__value_.__r.__words[2];
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)(a1 + 8));
      v35 = (uint64_t *)v26[1];
      if (v35)
      {
        do
        {
          v36 = (uint64_t **)v35;
          v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (uint64_t **)v26[2];
          v30 = *v36 == v26;
          v26 = (uint64_t *)v36;
        }
        while (!v30);
      }
      ++v6;
      v26 = (uint64_t *)v36;
    }
    while (v36 != &v44);
  }
  *(_OWORD *)a6 = v41;
  *(_DWORD *)(a6 + 16) = v42;
  *(_BYTE *)a1 = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
LABEL_87:
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v43, v44);
}

void sub_190E93DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,_QWORD *a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 185) < 0)
    operator delete(*(void **)(v35 - 208));
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t Espresso::ANECompilerEngine::merge_transpose_params(uint64_t a1, int *a2, int *a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BYTE v11[40];
  int v12[10];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = xmmword_191A761E0;
  *(_DWORD *)(a1 + 16) = 4;
  v5 = *a2;
  v6 = a2[1];
  v12[0] = 0;
  v12[1] = v5;
  v12[2] = 1;
  v12[3] = v6;
  v7 = a2[2];
  v8 = a2[3];
  v12[4] = 2;
  v12[5] = v7;
  v12[6] = 3;
  v12[7] = v8;
  v9 = a2[4];
  v12[8] = 4;
  v12[9] = v9;
  std::unordered_map<int,int>::unordered_map((uint64_t)v11, v12, 5);
  *(_DWORD *)a1 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, *a3, a3)+ 5);
  *(_DWORD *)(a1 + 4) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, a3[1], a3 + 1)+ 5);
  *(_DWORD *)(a1 + 8) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, a3[2], a3 + 2)+ 5);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, a3[3], a3 + 3)+ 5);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, a3[4], a3 + 4)+ 5);
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v11);
}

void sub_190E93F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_190E941AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,int>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int *v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = 0;
    v8 = (_QWORD *)(a1 + 16);
    v9 = &a2[2 * a3];
    do
    {
      v10 = *v5;
      if (v7)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          v3 = *v5;
          if (v7 <= v10)
            v3 = v10 % v7;
        }
        else
        {
          v3 = (v7 - 1) & v10;
        }
        v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
        if (v12)
        {
          for (i = *v12; i; i = (uint64_t *)*i)
          {
            v14 = i[1];
            if (v14 == v10)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v10)
                goto LABEL_41;
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v7)
                  v14 %= v7;
              }
              else
              {
                v14 &= v7 - 1;
              }
              if (v14 != v3)
                break;
            }
          }
        }
      }
      v15 = operator new(0x18uLL);
      *v15 = 0;
      v15[1] = v10;
      v15[2] = *(_QWORD *)v5;
      v16 = (float)(unint64_t)(v6 + 1);
      v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v21);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v10)
            v3 = v10 % v7;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v7 - 1) & v10;
        }
      }
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v23)
      {
        *v15 = *v23;
      }
      else
      {
        *v15 = *v8;
        *v8 = v15;
        *(_QWORD *)(v22 + 8 * v3) = v8;
        if (!*v15)
          goto LABEL_40;
        v24 = *(_QWORD *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
      }
      *v23 = v15;
LABEL_40:
      v6 = *(_QWORD *)(a1 + 24) + 1;
      *(_QWORD *)(a1 + 24) = v6;
LABEL_41:
      v5 += 2;
    }
    while (v5 != v9);
  }
  return a1;
}

void sub_190E943E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_squeeze_kernel::gen_transpose_params_for_squeeze(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unint64_t a5, uint64_t a6)
{
  unint64_t v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t **v22;
  std::vector<int>::pointer end;
  int *begin;
  int64_t v25;
  unsigned int *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t *v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v52;
  int v53;
  __int128 v54;
  int v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  _OWORD v59[8];
  __int128 v60;
  std::vector<int> v61[2];

  v7 = a5;
  v10 = *(_OWORD *)(a2 + 408);
  v59[7] = *(_OWORD *)(a2 + 392);
  v60 = v10;
  v11 = *(_OWORD *)(a2 + 376);
  v12 = *(_OWORD *)(a2 + 328);
  v59[2] = *(_OWORD *)(a2 + 312);
  v59[3] = v12;
  v13 = *(_OWORD *)(a2 + 344);
  v59[5] = *(_OWORD *)(a2 + 360);
  v59[6] = v11;
  v59[4] = v13;
  v14 = *(_OWORD *)(a2 + 296);
  v59[0] = *(_OWORD *)(a2 + 280);
  v59[1] = v14;
  v15 = BYTE8(v60);
  if (BYTE8(v60))
  {
    DWORD1(v59[0]) = 0;
    v16 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        if (*(_DWORD *)(a3 + 4 * v18) == 1)
        {
          *((_DWORD *)v59 + v19++ + 2) = v18;
          v17 = ++DWORD1(v59[0]);
        }
        ++v18;
      }
      while (v16 != v18);
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = DWORD1(v59[0]);
    if (SDWORD1(v59[0]) >= 1)
    {
      v20 = (_DWORD *)v59 + 2;
      v21 = DWORD1(v59[0]);
      do
      {
        if ((*v20 & 0x80000000) != 0)
          *v20 += a5;
        ++v20;
        --v21;
      }
      while (v21);
    }
    if ((v59[0] & 0x80000000) != 0)
      LODWORD(v59[0]) += a5;
  }
  v57 = 0;
  v58 = 0;
  v22 = &v57;
  v56 = &v57;
  Espresso::layer_nd_shape::shape_vector(v61, a3);
  if (v15)
  {
    begin = v61[0].__begin_;
    end = v61[0].__end_;
    if (v61[0].__end_ != v61[0].__begin_)
    {
      v25 = 0;
      v26 = a4;
      do
      {
        if (begin[v25] == 1)
        {
          v27 = v57;
          v28 = &v57;
          v29 = &v57;
          if (v57)
          {
            while (1)
            {
              while (1)
              {
                v29 = (uint64_t **)v27;
                v30 = v27[4];
                if (v25 >= v30)
                  break;
                v27 = *v29;
                v28 = v29;
                if (!*v29)
                  goto LABEL_27;
              }
              if (v30 >= v25)
                break;
              v27 = v29[1];
              if (!v27)
              {
                v28 = v29 + 1;
                goto LABEL_27;
              }
            }
          }
          else
          {
LABEL_27:
            v31 = (uint64_t *)operator new(0x28uLL);
            v31[4] = v25;
            *v31 = 0;
            v31[1] = 0;
            v31[2] = (uint64_t)v29;
            *v28 = v31;
            if (*v56)
            {
              v56 = (uint64_t **)*v56;
              v31 = *v28;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v57, v31);
            ++v58;
            begin = v61[0].__begin_;
            end = v61[0].__end_;
          }
        }
        ++v25;
      }
      while (v25 < (unint64_t)(end - begin));
      if (begin)
        goto LABEL_32;
      goto LABEL_33;
    }
    begin = v61[0].__end_;
  }
  else
  {
    v49 = a6;
    v50 = a1;
    v40 = 0;
    if (v17 <= 1)
      v41 = 1;
    else
      v41 = v17;
    do
    {
      v42 = (int *)v59 + v40 + 2;
      if (v17 <= 0)
        v42 = (int *)v59;
      v43 = *v42 + (uint64_t)(*(_DWORD *)(a3 + 20) & (*v42 >> 31));
      v44 = v57;
      v45 = &v57;
      v46 = &v57;
      if (v57)
      {
        while (1)
        {
          while (1)
          {
            v46 = (uint64_t **)v44;
            v47 = v44[4];
            if (v43 >= v47)
              break;
            v44 = *v46;
            v45 = v46;
            if (!*v46)
              goto LABEL_67;
          }
          if (v47 >= v43)
            break;
          v44 = v46[1];
          if (!v44)
          {
            v45 = v46 + 1;
            goto LABEL_67;
          }
        }
      }
      else
      {
LABEL_67:
        v48 = (uint64_t *)operator new(0x28uLL);
        v48[4] = v43;
        *v48 = 0;
        v48[1] = 0;
        v48[2] = (uint64_t)v46;
        *v45 = v48;
        if (*v56)
        {
          v56 = (uint64_t **)*v56;
          v48 = *v45;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v57, v48);
        ++v58;
      }
      ++v40;
    }
    while (v40 != v41);
    begin = v61[0].__begin_;
    a6 = v49;
    a1 = v50;
  }
  v26 = a4;
  if (begin)
  {
LABEL_32:
    v61[0].__end_ = begin;
    operator delete(begin);
  }
LABEL_33:
  *(_OWORD *)&v61[0].__begin_ = xmmword_191A761E0;
  LODWORD(v61[0].__end_cap_.__value_) = 4;
  if (&v57 != v56)
  {
    do
    {
      v32 = *v22;
      v33 = *v22;
      v34 = v22;
      if (*v22)
      {
        do
        {
          v35 = v33;
          v33 = (uint64_t *)v33[1];
        }
        while (v33);
      }
      else
      {
        do
        {
          v35 = v34[2];
          v36 = *v35 == (_QWORD)v34;
          v34 = (uint64_t **)v35;
        }
        while (v36);
      }
      v37 = v35[4];
      if (v7)
      {
        if (v7 == 5)
          v38 = *v26;
        else
          v38 = -1;
        v54 = xmmword_191A761E0;
        v55 = 4;
        Espresso::ANECompilerEngine::get_transpose_for_squeeze(a1, v37, v7, v38, (uint64_t)&v54);
        if (!*(_BYTE *)a1)
          goto LABEL_54;
        if (*(char *)(a1 + 31) < 0)
          operator delete(*(void **)(a1 + 8));
        Espresso::ANECompilerEngine::merge_transpose_params((uint64_t)&v52, (int *)v61, (int *)&v54);
        *(_OWORD *)&v61[0].__begin_ = v52;
        LODWORD(v61[0].__end_cap_.__value_) = v53;
        --v7;
        v32 = *v22;
        if (!*v22)
          goto LABEL_51;
      }
      else
      {
        if (v37)
        {
          *(_BYTE *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Squeezing rank 0 with dim other than 0 doesn't make sense.");
          goto LABEL_54;
        }
        v7 = 0;
        if (!v32)
        {
          do
          {
LABEL_51:
            v39 = (uint64_t **)v22[2];
            v36 = *v39 == (uint64_t *)v22;
            v22 = v39;
          }
          while (v36);
          goto LABEL_52;
        }
      }
      do
      {
        v39 = (uint64_t **)v32;
        v32 = (uint64_t *)v32[1];
      }
      while (v32);
LABEL_52:
      v22 = v39;
    }
    while (v39 != v56);
  }
  *(_OWORD *)a6 = *(_OWORD *)&v61[0].__begin_;
  *(_DWORD *)(a6 + 16) = v61[0].__end_cap_.__value_;
  *(_BYTE *)a1 = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
LABEL_54:
  std::__tree<int>::destroy(v57);
}

void sub_190E9486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  std::__tree<int>::destroy(a21);
  _Unwind_Resume(a1);
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::AliasDescT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  void *exception;
  _QWORD v10[3];
  _BYTE v11[8];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  v13 = 257;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (v3 >= 0x7FFFFFFB)
    sub_19101237C();
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    goto LABEL_8;
  if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
LABEL_8:
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v12, v10);
}

void sub_190E949E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t E5RT_FB::AliasDesc::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;

  v2 = *a2;
  v3 = (char *)a1 - *a2;
  v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0)
    return 0;
  v6 = a2[1];
  v7 = v6 - 4;
  v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8)
    return 0;
  v9 = *a1;
  v10 = *((_DWORD *)a2 + 10);
  v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5))
    return 0;
  v13 = (unint64_t)&v3[-v9];
  if ((((_DWORD)v3 - (_DWORD)v9) & 1) != 0)
  {
    v14 = 0;
    if (v4 || v6 - 2 < v13)
      return v14;
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1)
    return 0;
  v8 = v6 >= v15;
  v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13)
    return 0;
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u
    || (v20 = v19[2]) == 0
    || ((v14 = 0, v21 = (unint64_t)&v3[v20], (v21 & 3) != 0) ? (v22 = v4 == 0) : (v22 = 1),
        !v22 ? (v23 = 0) : (v23 = 1),
        v7 >= v21 && v23))
  {
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  return v14;
}

uint64_t E5RT_FB::VerifySizePrefixedAliasDescBuffer(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = a1[1];
  if (v1 >= 5
    && ((v2 = *a1, v1 >= 0xC) ? (v3 = v1 - 4 == *(unsigned int *)*a1) : (v3 = 0),
        v3 && (v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return E5RT_FB::AliasDesc::Verify((int *)(v4 + v5), a1);
  }
  else
  {
    return 0;
  }
}

_DWORD *E5RT_FB::UnPackSizePrefixedAliasDesc@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  _DWORD *result;
  unsigned __int16 *v5;
  uint64_t v6;

  v3 = (int *)(a1 + 4 + *(unsigned int *)(a1 + 4));
  result = (_DWORD *)operator new();
  v5 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v5 < 5u)
  {
    *result = 0;
    *a2 = result;
  }
  else
  {
    v6 = v5[2];
    if (v6)
      LODWORD(v6) = *(int *)((char *)v3 + v6);
    *result = v6;
    *a2 = result;
  }
  return result;
}

uint64_t e5rt_execution_stream_operation_get_output_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC6BD8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190E94D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_get_input_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC6A58;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190E94DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DA9878;
  v2 = a1 + 58;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 55;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::MPSEngine::activation_kernel::~activation_kernel(a1);
}

{
  void **v2;

  *a1 = &off_1E2DA9878;
  v2 = a1 + 58;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 55;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::MPSEngine::activation_kernel::~activation_kernel(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::activation_kernel::~activation_kernel(id *this)
{
  *this = &off_1E2DA88C0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 53));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 50));
  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
}

{
  Espresso::MPSEngine::activation_kernel::~activation_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[2];

  v14[0] = 0;
  v14[1] = a4;
  Espresso::SerDes::params_io<Espresso::copy_params_t>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E94FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::copy_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (a3 && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "flag");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v11 + 160))(v11, __p, a2);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (!v12)
      goto LABEL_19;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    goto LABEL_17;
  }
  if ((a3 & 1) != 0)
    return;
  std::string::basic_string[abi:ne180100]<0>(v9, "flag");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 24))(v11, __p))
    *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  v5 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v8);
    while (__stlxr(v7 - 1, v8));
LABEL_17:
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_19:
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_190E95130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC8178;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190E95200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[5];
  char v15;
  int v16;

  v16 = a4;
  v14[0] = 0x358637BD00000000;
  v14[1] = 0x100000007;
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = 0xFFFFFFFF00000000;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E95340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::reduce_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  void *v38[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  char v43;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v40 + 24))(v40, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v40 + 40))(v40, __p);
    if (v43 < 0)
      operator delete(__p[0]);
    v22 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v39 < 0)
      operator delete(v38[0]);
    std::string::basic_string[abi:ne180100]<0>(v38, "axis_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v40 + 24))(v40, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v40 + 40))(v40, __p);
    if (v43 < 0)
      operator delete(__p[0]);
    v25 = v41;
    if (v41)
    {
      v26 = (unint64_t *)&v41->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v39 < 0)
      operator delete(v38[0]);
    if (*(_DWORD *)a2 == 3)
    {
      std::string::basic_string[abi:ne180100]<0>(v38, "eps");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v40 + 24))(v40, __p))
        *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v40 + 96))(v40, __p);
      if (v43 < 0)
        operator delete(__p[0]);
      v28 = v41;
      if (v41)
      {
        v29 = (unint64_t *)&v41->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v39 < 0)
        operator delete(v38[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v38, "use_version");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v40 + 24))(v40, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v40 + 40))(v40, __p);
    if (v43 < 0)
      operator delete(__p[0]);
    v31 = v41;
    if (v41)
    {
      v32 = (unint64_t *)&v41->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v39 < 0)
      operator delete(v38[0]);
    std::string::basic_string[abi:ne180100]<0>(v38, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v40 + 24))(v40, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v40 + 40))(v40, __p);
    if (v43 < 0)
      operator delete(__p[0]);
    v34 = v41;
    if (v41)
    {
      v35 = (unint64_t *)&v41->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v39 < 0)
      operator delete(v38[0]);
    std::string::basic_string[abi:ne180100]<0>(v38, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v40 + 24))(v40, __p))
      *(_BYTE *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v40 + 88))(v40, __p);
    if (v43 < 0)
      operator delete(__p[0]);
    v19 = v41;
    if (!v41)
      goto LABEL_113;
    v37 = (unint64_t *)&v41->__shared_owners_;
    do
      v21 = __ldaxr(v37);
    while (__stlxr(v21 - 1, v37));
    goto LABEL_111;
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v40 + 160))(v40, __p, a2);
  if (v43 < 0)
    operator delete(__p[0]);
  v5 = v41;
  if (v41)
  {
    v6 = (unint64_t *)&v41->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v39 < 0)
    operator delete(v38[0]);
  if (*(_DWORD *)(a2 + 8) != 7)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "axis_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v40 + 160))(v40, __p, a2 + 8);
    if (v43 < 0)
      operator delete(__p[0]);
    v8 = v41;
    if (v41)
    {
      v9 = (unint64_t *)&v41->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (*(_DWORD *)(a2 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "use_version");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v40 + 160))(v40, __p, a2 + 12);
    if (v43 < 0)
      operator delete(__p[0]);
    v11 = v41;
    if (v41)
    {
      v12 = (unint64_t *)&v41->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (*(_DWORD *)(a2 + 36) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v40 + 160))(v40, __p, a2 + 36);
    if (v43 < 0)
      operator delete(__p[0]);
    v14 = v41;
    if (v41)
    {
      v15 = (unint64_t *)&v41->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v39 < 0)
      operator delete(v38[0]);
  }
  v18 = *(unsigned __int8 *)(a2 + 40);
  v17 = a2 + 40;
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v38, &v40);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v40 + 208))(v40, __p, v17);
    if (v43 < 0)
      operator delete(__p[0]);
    v19 = v41;
    if (!v41)
      goto LABEL_113;
    v20 = (unint64_t *)&v41->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
LABEL_111:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
LABEL_113:
    if (v39 < 0)
      operator delete(v38[0]);
  }
}

void sub_190E95AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso25espresso_os_log_subsystemEPKc_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.espresso", "espresso");
  v1 = (void *)Espresso::espresso_os_log_subsystem(char const*)::log_t;
  Espresso::espresso_os_log_subsystem(char const*)::log_t = (uint64_t)v0;

}

uint64_t Espresso::convert_supported_4cc_string_to_uint(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v38;
  int v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD *v49;
  _QWORD *v50;

  v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v3 = a1;
    switch(*((_BYTE *)a1 + 23))
    {
      case 6:
        if (*(_DWORD *)a1 != 1195520563 || *((_WORD *)a1 + 2) != 16722)
          goto LABEL_165;
        return 1111970369;
      case 0xA:
        goto LABEL_41;
      case 0xD:
        if (*a1 == 0x6F706D6F43656E4FLL && *(uint64_t *)((char *)a1 + 5) == 0x38746E656E6F706DLL)
          return 1278226488;
        if (*a1 != 0x6F706D6F436F7754 || *(uint64_t *)((char *)a1 + 5) != 0x38746E656E6F706DLL)
          goto LABEL_165;
        return 843264056;
      case 0x10:
        goto LABEL_35;
      case 0x11:
        goto LABEL_158;
      case 0x12:
        if (*a1 == 0x6F706D6F43656E4FLL && a1[1] == 0x61483631746E656ELL && *((_WORD *)a1 + 8) == 26220)
          goto LABEL_152;
        if (*a1 != 0x6F706D6F436F7754 || a1[1] != 0x61483631746E656ELL || *((_WORD *)a1 + 8) != 26220)
          goto LABEL_165;
        goto LABEL_133;
      case 0x13:
        if (*a1 != 0x6F706D6F43656E4FLL
          || a1[1] != 0x6C463233746E656ELL
          || *(uint64_t *)((char *)a1 + 11) != 0x74616F6C46323374)
        {
          goto LABEL_165;
        }
        goto LABEL_142;
      case 0x16:
        goto LABEL_82;
      default:
        goto LABEL_165;
    }
  }
  v5 = a1[1];
  if (v5 > 17)
  {
    if (v5 == 18)
    {
      v17 = (uint64_t *)*a1;
      if (*(_QWORD *)*a1 == 0x6F706D6F43656E4FLL
        && *(_QWORD *)(*a1 + 8) == 0x61483631746E656ELL
        && *(_WORD *)(*a1 + 16) == 26220)
      {
LABEL_152:
        v38 = 1278226488;
      }
      else
      {
        v20 = *v17;
        v21 = v17[1];
        v22 = *((unsigned __int16 *)v17 + 8);
        if (v20 != 0x6F706D6F436F7754 || v21 != 0x61483631746E656ELL || v22 != 26220)
          goto LABEL_67;
LABEL_133:
        v38 = 843264056;
      }
      return (v38 + 48);
    }
    if (v5 == 19)
    {
      if (*(_QWORD *)*a1 == 0x6F706D6F43656E4FLL
        && *(_QWORD *)(*a1 + 8) == 0x6C463233746E656ELL
        && *(_QWORD *)(*a1 + 11) == 0x74616F6C46323374)
      {
LABEL_142:
        v41 = 1278226488;
        return (v41 + 46);
      }
      if ((v2 & 0x80) == 0)
      {
        if (*((unsigned __int8 *)a1 + 23) > 0x10u)
          goto LABEL_80;
        if (v2 != 10)
        {
          if (v2 != 16)
            goto LABEL_165;
LABEL_35:
          if (*a1 != 0x7469726170736944 || a1[1] != 0x363174616F6C4679)
            goto LABEL_165;
          return 1751411059;
        }
LABEL_41:
        if (*a1 != 0x6148414247523436 || *((_WORD *)a1 + 4) != 26220)
        {
LABEL_145:
          if (*a1 != 0x474232335F584741 || *((_WORD *)a1 + 4) != 16722)
            goto LABEL_165;
          return 641877825;
        }
        return 1380411457;
      }
    }
  }
  else if (v5 == 6)
  {
    if (*(_DWORD *)*a1 == 1195520563 && *(_WORD *)(*a1 + 4) == 16722)
      return 1111970369;
  }
  else if (v5 == 13)
  {
    v6 = (uint64_t *)*a1;
    if (*(_QWORD *)*a1 == 0x6F706D6F43656E4FLL && *(_QWORD *)(*a1 + 5) == 0x38746E656E6F706DLL)
      return 1278226488;
    v8 = *v6;
    v9 = *(uint64_t *)((char *)v6 + 5);
    if (v8 == 0x6F706D6F436F7754 && v9 == 0x38746E656E6F706DLL)
      return 843264056;
  }
LABEL_67:
  if (a1[1] != 10)
    goto LABEL_73;
  if (*(_QWORD *)*a1 == 0x6148414247523436 && *(_WORD *)(*a1 + 8) == 26220)
    return 1380411457;
  if ((v2 & 0x80) == 0)
    goto LABEL_79;
LABEL_73:
  if (a1[1] != 16)
    goto LABEL_91;
  if (*(_QWORD *)*a1 == 0x7469726170736944 && *(_QWORD *)(*a1 + 8) == 0x363174616F6C4679)
    return 1751411059;
  if ((v2 & 0x80) != 0)
  {
LABEL_91:
    if (a1[1] == 10)
    {
      if (*(_QWORD *)*a1 == 0x474232335F584741 && *(_WORD *)(*a1 + 8) == 16722)
        return 641877825;
      if ((v2 & 0x80) == 0)
        goto LABEL_165;
    }
    if (a1[1] != 22)
      goto LABEL_156;
    if (*(_QWORD *)*a1 == 0x43656E4F5F584741
      && *(_QWORD *)(*a1 + 8) == 0x746E656E6F706D6FLL
      && *(_QWORD *)(*a1 + 14) == 0x666C61483631746ELL)
    {
      return 642527336;
    }
    if ((v2 & 0x80) != 0)
    {
LABEL_156:
      if (a1[1] != 17)
        goto LABEL_165;
      v3 = (uint64_t *)*a1;
    }
    else
    {
      v3 = a1;
      if (v2 != 17)
        goto LABEL_165;
    }
LABEL_158:
    v43 = *v3;
    v44 = v3[1];
    v45 = *((unsigned __int8 *)v3 + 16);
    if (v43 == 0x43656E4F5F584741 && v44 == 0x746E656E6F706D6FLL && v45 == 56)
      return 642527288;
    goto LABEL_165;
  }
LABEL_79:
  if (v2 == 10)
    goto LABEL_145;
LABEL_80:
  v3 = a1;
  if (v2 == 17)
    goto LABEL_158;
  if (v2 != 22)
    goto LABEL_165;
LABEL_82:
  if (*a1 == 0x43656E4F5F584741
    && a1[1] == 0x746E656E6F706D6FLL
    && *(uint64_t *)((char *)a1 + 14) == 0x666C61483631746ELL)
  {
    return 642527336;
  }
LABEL_165:
  v16 = 706956392;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "MultiSlice_Lossless_OneComponent16Half"))
  {
    return 707153000;
  }
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "MultiSlice_UncompressedTiled_OneComponent16Half"))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy75_OneComponent16Half"))
    {
      return 759967848;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy62_OneComponent16Half"))
    {
      return 793522280;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy50_OneComponent16Half"))
    {
      return 2085367912;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "AGX_64RGBAHalf"))
      return 642934849;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy75_64RGBAHalf"))
      return 760375361;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy62_64RGBAHalf"))
      return 793929793;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy50_64RGBAHalf"))
      return 2085775425;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy75_32BGRA"))
      return 759318337;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy62_32BGRA"))
      return 792872769;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy50_32BGRA"))
      return 2084718401;
    v16 = 875704422;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr8BiPlanarVideoRange"))
    {
      return 875704438;
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr8BiPlanarFullRange"))
    {
      v16 = 2016686640;
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10BiPlanarVideoRange"))
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10BiPlanarFullRange"))
        {
          return (v16 + 3276800);
        }
        v16 = 1882468912;
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10PackedBiPlanarVideoRange"))
        {
          return v16;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10PackedBiPlanarFullRange"))
        {
          return (v16 + 3276800);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10PackedBiPlanarWideRange"))
        {
          return 1886859824;
        }
        v16 = 875836518;
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "444YpCbCr8BiPlanarFullRange"))
        {
          return v16;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "444YpCbCr8BiPlanarVideoRange"))
        {
          return 875836534;
        }
        v16 = 641230384;
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossless_420YpCbCr8BiPlanarFullRange"))
        {
          return v16;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossless_420YpCbCr8BiPlanarVideoRange"))
        {
          return 641234480;
        }
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "TwoComponent32Float"))
        {
          if (*((char *)a1 + 23) >= 0)
            v49 = a1;
          else
            v49 = (_QWORD *)*a1;
          v50 = v49;
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Unsupported pixel format %s", &v50);
        }
        v41 = 843264056;
        return (v41 + 46);
      }
    }
  }
  return v16;
}

void Espresso::inner_product_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, uint64_t *a6)
{
  int v12;
  uint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  BOOL v43;
  uint64_t v44;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  int v57;
  std::string::size_type v58;
  std::string::size_type v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  int *v72;
  int v74;
  int v75;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::runtime_error *v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  std::string::size_type v112;
  std::string *v113;
  __int128 v114;
  const std::string::value_type *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  const std::string::value_type *v121;
  std::string::size_type v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  std::string::size_type v126;
  std::string *v127;
  __int128 v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::runtime_error *v133;
  std::string *v134;
  __int128 v135;
  std::string *v136;
  __int128 v137;
  std::string *v138;
  std::string::size_type v139;
  std::string *v140;
  __int128 v141;
  const std::string::value_type *v142;
  std::string::size_type v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  __int128 v147;
  const std::string::value_type *v148;
  std::string::size_type v149;
  std::string *v150;
  __int128 v151;
  std::string *v152;
  std::string::size_type v153;
  std::string *v154;
  __int128 v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::runtime_error *v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  __int128 v164;
  std::string *v165;
  std::string::size_type v166;
  std::string *v167;
  __int128 v168;
  const std::string::value_type *v169;
  std::string::size_type v170;
  std::string *v171;
  __int128 v172;
  std::string *v173;
  __int128 v174;
  const std::string::value_type *v175;
  std::string::size_type v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  std::string::size_type v180;
  std::string *v181;
  __int128 v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::runtime_error *v187;
  std::string *v188;
  __int128 v189;
  std::string *v190;
  __int128 v191;
  std::string *v192;
  std::string::size_type v193;
  std::string *v194;
  __int128 v195;
  const std::string::value_type *v196;
  std::string::size_type v197;
  std::string *v198;
  __int128 v199;
  std::string *v200;
  __int128 v201;
  const std::string::value_type *v202;
  std::string::size_type v203;
  std::string *v204;
  __int128 v205;
  std::string *v206;
  std::string::size_type v207;
  std::string *v208;
  __int128 v209;
  int v210;
  int v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  std::runtime_error *v217;
  std::string *v218;
  __int128 v219;
  std::string *v220;
  __int128 v221;
  std::string *v222;
  std::string::size_type v223;
  std::string *v224;
  __int128 v225;
  const std::string::value_type *v226;
  std::string::size_type v227;
  std::string *v228;
  __int128 v229;
  std::string *v230;
  __int128 v231;
  const std::string::value_type *v232;
  std::string::size_type v233;
  std::string *v234;
  __int128 v235;
  std::string *v236;
  std::string::size_type v237;
  std::string *v238;
  __int128 v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t *v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  std::runtime_error *v252;
  std::string *v253;
  __int128 v254;
  std::string *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  std::string *v261;
  std::string::size_type v262;
  std::string *v263;
  __int128 v264;
  const std::string::value_type *v265;
  std::string::size_type v266;
  std::string *v267;
  __int128 v268;
  std::string *v269;
  __int128 v270;
  const std::string::value_type *v271;
  std::string::size_type v272;
  std::string *v273;
  __int128 v274;
  std::string *v275;
  std::string::size_type v276;
  std::string *v277;
  __int128 v278;
  uint64_t v279;
  double v280;
  double v281;
  int32x2_t v282;
  unint64_t *v283;
  unint64_t v284;
  char *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t *v297;
  uint64_t v298;
  uint64_t *v299;
  std::runtime_error *v300;
  std::string *v301;
  __int128 v302;
  std::string *v303;
  uint64_t v304;
  __int128 v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  std::string *v309;
  std::string::size_type v310;
  std::string *v311;
  __int128 v312;
  const std::string::value_type *v313;
  std::string::size_type v314;
  std::string *v315;
  __int128 v316;
  std::string *v317;
  __int128 v318;
  const std::string::value_type *v319;
  std::string::size_type v320;
  std::string *v321;
  __int128 v322;
  std::string *v323;
  std::string::size_type v324;
  std::string *v325;
  __int128 v326;
  std::runtime_error *v327;
  std::string *v328;
  __int128 v329;
  std::string *v330;
  __int128 v331;
  std::string *v332;
  std::string::size_type v333;
  std::string *v334;
  __int128 v335;
  const std::string::value_type *v336;
  std::string::size_type v337;
  std::string *v338;
  __int128 v339;
  std::string *v340;
  __int128 v341;
  const std::string::value_type *v342;
  std::string::size_type v343;
  std::string *v344;
  __int128 v345;
  std::string *v346;
  std::string::size_type v347;
  std::string *v348;
  __int128 v349;
  std::runtime_error *v350;
  std::string *v351;
  __int128 v352;
  std::string *v353;
  __int128 v354;
  std::string *v355;
  std::string::size_type v356;
  std::string *v357;
  __int128 v358;
  uint64_t v359[2];
  uint64_t v360[2];
  uint64_t v361[2];
  uint64_t v362[2];
  std::string v363;
  const std::string::value_type *v364;
  std::string::size_type v365;
  unsigned __int8 v366;
  const std::string::value_type *v367;
  std::string::size_type v368;
  unsigned __int8 v369;
  std::string v370;
  std::string v371;
  std::string v372;
  std::string v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  uint64_t v376;
  std::__shared_weak_count *v377;
  uint64_t v378;
  std::__shared_weak_count *v379;
  uint64_t v380;
  uint64_t v381;
  std::string v382;
  std::string v383;
  std::string v384;
  std::string v385;
  std::string v386;

  v380 = 0;
  v381 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v380, *a6, a6[1]);
  Espresso::generic_inner_product_kernel::__set_weight_raw_blob(a1, a2, (const std::string::value_type *)a3, a4, a5, a6);
  v12 = *(unsigned __int8 *)(a3 + 23);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    switch(*(_BYTE *)(a3 + 23))
    {
      case 1:
        if (*(_BYTE *)a3 != 81)
          goto LABEL_321;
        goto LABEL_10;
      case 5:
        goto LABEL_186;
      case 6:
        if (*(_DWORD *)a3 == 1647861591 && *(_WORD *)(a3 + 4) == 29801)
          goto LABEL_119;
        if (*(_DWORD *)a3 == 1852399447 && *(_WORD *)(a3 + 4) == 14452)
          goto LABEL_119;
        goto LABEL_55;
      case 7:
        if (*(_DWORD *)a3 == 1769299799 && *(_DWORD *)(a3 + 3) == 947154537)
          goto LABEL_119;
        if (*(_DWORD *)a3 != 1852399447 || *(_DWORD *)(a3 + 3) != 909210734)
          goto LABEL_321;
        goto LABEL_80;
      case 8:
        if (*(_QWORD *)a3 == 0x38746E695F745F57)
          goto LABEL_137;
        if (*(_QWORD *)a3 == 0x745F656C61637351)
          goto LABEL_222;
        if ((v12 & 0x80) != 0)
          goto LABEL_157;
        if (v12 == 5)
          goto LABEL_186;
        if (v12 != 6)
          goto LABEL_165;
LABEL_55:
        v43 = *(_DWORD *)a3 == 1633907537 && *(_WORD *)(a3 + 4) == 25964;
        v44 = a3;
        if (!v43)
          goto LABEL_317;
        goto LABEL_284;
      case 9:
        goto LABEL_166;
      default:
        goto LABEL_321;
    }
  }
  switch(*(_QWORD *)(a3 + 8))
  {
    case 1:
      if (**(_BYTE **)a3 == 81)
      {
LABEL_10:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v386, 2, 1, 1, 1);
        v13 = a1 + 608;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v13, (__int128 *)&v386);
        size = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
        if (v386.__r_.__value_.__l.__size_)
        {
          v15 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v17 = *(_QWORD *)v13;
        if (a5 != 4 * *(int *)(*(_QWORD *)v13 + 8))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v371, a5);
          v19 = std::string::insert(&v371, 0, "Unexpected size s=");
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v372.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          v21 = std::string::append(&v372, "/blob=");
          v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v373.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v370, 4 * *(int *)(*(_QWORD *)v13 + 8));
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v370;
          else
            v23 = (std::string *)v370.__r_.__value_.__r.__words[0];
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
          else
            v24 = v370.__r_.__value_.__l.__size_;
          v25 = std::string::append(&v373, (const std::string::value_type *)v23, v24);
          v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v382.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v367, " @ ");
          if ((v369 & 0x80u) == 0)
            v27 = (const std::string::value_type *)&v367;
          else
            v27 = v367;
          if ((v369 & 0x80u) == 0)
            v28 = v369;
          else
            v28 = v368;
          v29 = std::string::append(&v382, v27, v28);
          v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v383.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          v31 = std::string::append(&v383, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
          v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v384.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v364, ":");
          if ((v366 & 0x80u) == 0)
            v33 = (const std::string::value_type *)&v364;
          else
            v33 = v364;
          if ((v366 & 0x80u) == 0)
            v34 = v366;
          else
            v34 = v365;
          v35 = std::string::append(&v384, v33, v34);
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v385.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v363, 726);
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v363;
          else
            v37 = (std::string *)v363.__r_.__value_.__r.__words[0];
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
          else
            v38 = v363.__r_.__value_.__l.__size_;
          v39 = std::string::append(&v385, (const std::string::value_type *)v37, v38);
          v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v386.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v386);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_358;
      }
      if ((v12 & 0x80) == 0)
        goto LABEL_321;
      goto LABEL_155;
    case 6:
      v72 = *(int **)a3;
      if (**(_DWORD **)a3 != 1647861591 || *(_WORD *)(*(_QWORD *)a3 + 4) != 29801)
      {
        v74 = *v72;
        v75 = *((unsigned __int16 *)v72 + 2);
        if (v74 != 1852399447 || v75 != 14452)
          goto LABEL_155;
      }
      goto LABEL_119;
    case 7:
      if (**(_DWORD **)a3 == 1769299799 && *(_DWORD *)(*(_QWORD *)a3 + 3) == 947154537)
      {
LABEL_119:
        *(_OWORD *)&v386.__r_.__value_.__l.__data_ = 0uLL;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 560, (__int128 *)&v386);
        v77 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
        if (v386.__r_.__value_.__l.__size_)
        {
          v78 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v378 = v380;
        v379 = (std::__shared_weak_count *)v381;
        if (v381)
        {
          v80 = (unint64_t *)(v381 + 8);
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(&v386, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v378, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 576, (__int128 *)&v386);
        v82 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
        if (v386.__r_.__value_.__l.__size_)
        {
          v83 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        v85 = v379;
        if (!v379)
          goto LABEL_360;
        p_shared_owners = (unint64_t *)&v379->__shared_owners_;
        do
          v87 = __ldaxr(p_shared_owners);
        while (__stlxr(v87 - 1, p_shared_owners));
        goto LABEL_443;
      }
      if (**(_DWORD **)a3 == 1852399447 && *(_DWORD *)(*(_QWORD *)a3 + 3) == 909210734)
      {
LABEL_80:
        *(_OWORD *)&v386.__r_.__value_.__l.__data_ = 0uLL;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 560, (__int128 *)&v386);
        v49 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
        if (v386.__r_.__value_.__l.__size_)
        {
          v50 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = v380;
        v53 = v381;
        v374 = v380;
        v375 = (std::__shared_weak_count *)v381;
        if (v381)
        {
          v54 = (unint64_t *)(v381 + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        v56 = *(_DWORD *)(a1 + 304);
        v57 = *(_DWORD *)(a1 + 308);
        v58 = *(_QWORD *)(a1 + 8);
        v59 = *(_QWORD *)(a1 + 16);
        v373.__r_.__value_.__r.__words[0] = v58;
        v373.__r_.__value_.__l.__size_ = v59;
        if (v59)
        {
          v60 = (unint64_t *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v372.__r_.__value_.__r.__words[0] = v52;
        v372.__r_.__value_.__l.__size_ = v53;
        if (v53)
        {
          v62 = (unint64_t *)(v53 + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        *(_OWORD *)&v371.__r_.__value_.__l.__data_ = 0uLL;
        if (!*(_BYTE *)(v58 + 73))
          goto LABEL_98;
        if (v52 && (a4 & 0x3F) != 0)
        {
          if (!*(_BYTE *)(v58 + 123))
            goto LABEL_98;
        }
        else if (!v52)
        {
LABEL_98:
          std::allocate_shared[abi:ne180100]<Espresso::blob<short,2>,std::allocator<Espresso::blob<short,2>>,int &,int &,int &,int &,void>(&v386, v57, v56, 1, 1);
          v64 = *(_OWORD *)&v386.__r_.__value_.__l.__data_;
          *(_OWORD *)&v386.__r_.__value_.__l.__data_ = 0uLL;
          v65 = (std::__shared_weak_count *)v371.__r_.__value_.__l.__size_;
          *(_OWORD *)&v371.__r_.__value_.__l.__data_ = v64;
          if (v65)
          {
            v66 = (unint64_t *)&v65->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v68 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
          if (v386.__r_.__value_.__l.__size_)
          {
            v69 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          if (a5 != 2
                   * *(int *)(v371.__r_.__value_.__r.__words[0] + 8)
                   * (uint64_t)*(int *)(v371.__r_.__value_.__r.__words[0] + 12))
          {
            v350 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v383, a5);
            v351 = std::string::insert(&v383, 0, "Unexpected size s=");
            v352 = *(_OWORD *)&v351->__r_.__value_.__l.__data_;
            v384.__r_.__value_.__r.__words[2] = v351->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v352;
            v351->__r_.__value_.__l.__size_ = 0;
            v351->__r_.__value_.__r.__words[2] = 0;
            v351->__r_.__value_.__r.__words[0] = 0;
            v353 = std::string::append(&v384, "/blob=");
            v354 = *(_OWORD *)&v353->__r_.__value_.__l.__data_;
            v385.__r_.__value_.__r.__words[2] = v353->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v354;
            v353->__r_.__value_.__l.__size_ = 0;
            v353->__r_.__value_.__r.__words[2] = 0;
            v353->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v382, 2* *(int *)(v371.__r_.__value_.__r.__words[0] + 8)* (uint64_t)*(int *)(v371.__r_.__value_.__r.__words[0] + 12));
            if ((v382.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v355 = &v382;
            else
              v355 = (std::string *)v382.__r_.__value_.__r.__words[0];
            if ((v382.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v356 = HIBYTE(v382.__r_.__value_.__r.__words[2]);
            else
              v356 = v382.__r_.__value_.__l.__size_;
            v357 = std::string::append(&v385, (const std::string::value_type *)v355, v356);
            v358 = *(_OWORD *)&v357->__r_.__value_.__l.__data_;
            v386.__r_.__value_.__r.__words[2] = v357->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v358;
            v357->__r_.__value_.__l.__size_ = 0;
            v357->__r_.__value_.__r.__words[2] = 0;
            v357->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v350, &v386);
            __cxa_throw(v350, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          memcpy(*(void **)(v371.__r_.__value_.__r.__words[0] + 16), a4, a5);
          v71 = (std::__shared_weak_count *)v372.__r_.__value_.__l.__size_;
LABEL_425:
          if (v71)
          {
            v289 = (unint64_t *)&v71->__shared_owners_;
            do
              v290 = __ldaxr(v289);
            while (__stlxr(v290 - 1, v289));
            if (!v290)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v291 = (std::__shared_weak_count *)v373.__r_.__value_.__l.__size_;
          if (v373.__r_.__value_.__l.__size_)
          {
            v292 = (unint64_t *)(v373.__r_.__value_.__l.__size_ + 8);
            do
              v293 = __ldaxr(v292);
            while (__stlxr(v293 - 1, v292));
            if (!v293)
            {
              ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
              std::__shared_weak_count::__release_weak(v291);
            }
          }
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 592, (__int128 *)&v371);
          v294 = (std::__shared_weak_count *)v371.__r_.__value_.__l.__size_;
          if (v371.__r_.__value_.__l.__size_)
          {
            v295 = (unint64_t *)(v371.__r_.__value_.__l.__size_ + 8);
            do
              v296 = __ldaxr(v295);
            while (__stlxr(v296 - 1, v295));
            if (!v296)
            {
              ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
              std::__shared_weak_count::__release_weak(v294);
            }
          }
          v85 = v375;
          if (!v375)
            goto LABEL_360;
          v297 = (unint64_t *)&v375->__shared_owners_;
          do
            v87 = __ldaxr(v297);
          while (__stlxr(v87 - 1, v297));
LABEL_443:
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
          goto LABEL_360;
        }
        v285 = (char *)operator new(0x58uLL);
        *((_QWORD *)v285 + 1) = 0;
        *((_QWORD *)v285 + 2) = 0;
        *(_QWORD *)v285 = &off_1E2DBEF80;
        *((_QWORD *)v285 + 3) = &off_1E2DA1390;
        *(_OWORD *)(v285 + 56) = 0u;
        *(_OWORD *)(v285 + 72) = 0u;
        *((_DWORD *)v285 + 8) = v57;
        *((_DWORD *)v285 + 9) = v56;
        *((_QWORD *)v285 + 5) = a4;
        v285[48] = 0;
        v386.__r_.__value_.__r.__words[0] = (std::string::size_type)(v285 + 24);
        v386.__r_.__value_.__l.__size_ = (std::string::size_type)v285;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v371, (__int128 *)&v386);
        v286 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
        if (v386.__r_.__value_.__l.__size_)
        {
          v287 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
          do
            v288 = __ldaxr(v287);
          while (__stlxr(v288 - 1, v287));
          if (!v288)
          {
            ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
            std::__shared_weak_count::__release_weak(v286);
          }
        }
        v71 = (std::__shared_weak_count *)v372.__r_.__value_.__l.__size_;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v371.__r_.__value_.__r.__words[0] + 32), (uint64_t)v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_);
        goto LABEL_425;
      }
LABEL_155:
      if (*(_QWORD *)(a3 + 8) == 8 && **(_QWORD **)a3 == 0x745F656C61637351)
      {
LABEL_222:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v386, *(_DWORD *)(a1 + 308), 1, 1, 1);
        v129 = a1 + 624;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v129, (__int128 *)&v386);
        v130 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
        if (v386.__r_.__value_.__l.__size_)
        {
          v131 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        v17 = *(_QWORD *)v129;
        if (a5 != 4 * *(int *)(*(_QWORD *)v129 + 8))
        {
          v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v371, a5);
          v134 = std::string::insert(&v371, 0, "Unexpected size s=");
          v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
          v372.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v135;
          v134->__r_.__value_.__l.__size_ = 0;
          v134->__r_.__value_.__r.__words[2] = 0;
          v134->__r_.__value_.__r.__words[0] = 0;
          v136 = std::string::append(&v372, "/blob=");
          v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          v373.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v370, 4 * *(int *)(*(_QWORD *)v129 + 8));
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v138 = &v370;
          else
            v138 = (std::string *)v370.__r_.__value_.__r.__words[0];
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v139 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
          else
            v139 = v370.__r_.__value_.__l.__size_;
          v140 = std::string::append(&v373, (const std::string::value_type *)v138, v139);
          v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
          v382.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v141;
          v140->__r_.__value_.__l.__size_ = 0;
          v140->__r_.__value_.__r.__words[2] = 0;
          v140->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v367, " @ ");
          if ((v369 & 0x80u) == 0)
            v142 = (const std::string::value_type *)&v367;
          else
            v142 = v367;
          if ((v369 & 0x80u) == 0)
            v143 = v369;
          else
            v143 = v368;
          v144 = std::string::append(&v382, v142, v143);
          v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
          v383.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v145;
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          v146 = std::string::append(&v383, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
          v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
          v384.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v147;
          v146->__r_.__value_.__l.__size_ = 0;
          v146->__r_.__value_.__r.__words[2] = 0;
          v146->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v364, ":");
          if ((v366 & 0x80u) == 0)
            v148 = (const std::string::value_type *)&v364;
          else
            v148 = v364;
          if ((v366 & 0x80u) == 0)
            v149 = v366;
          else
            v149 = v365;
          v150 = std::string::append(&v384, v148, v149);
          v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
          v385.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v151;
          v150->__r_.__value_.__l.__size_ = 0;
          v150->__r_.__value_.__r.__words[2] = 0;
          v150->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v363, 729);
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v152 = &v363;
          else
            v152 = (std::string *)v363.__r_.__value_.__r.__words[0];
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v153 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
          else
            v153 = v363.__r_.__value_.__l.__size_;
          v154 = std::string::append(&v385, (const std::string::value_type *)v152, v153);
          v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
          v386.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v155;
          v154->__r_.__value_.__l.__size_ = 0;
          v154->__r_.__value_.__r.__words[2] = 0;
          v154->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v133, &v386);
          __cxa_throw(v133, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_358;
      }
LABEL_157:
      if (*(_QWORD *)(a3 + 8) != 6)
        goto LABEL_172;
      if (**(_DWORD **)a3 == 1633907537 && *(_WORD *)(*(_QWORD *)a3 + 4) == 25964)
      {
LABEL_284:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v386, *(_DWORD *)(a1 + 304), 1, 1, 1);
        v183 = a1 + 640;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v183, (__int128 *)&v386);
        v184 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
        if (v386.__r_.__value_.__l.__size_)
        {
          v185 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
          do
            v186 = __ldaxr(v185);
          while (__stlxr(v186 - 1, v185));
          if (!v186)
          {
            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
            std::__shared_weak_count::__release_weak(v184);
          }
        }
        v17 = *(_QWORD *)v183;
        if (a5 != 4 * *(int *)(*(_QWORD *)v183 + 8))
        {
          v187 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v371, a5);
          v188 = std::string::insert(&v371, 0, "Unexpected size s=");
          v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
          v372.__r_.__value_.__r.__words[2] = v188->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v189;
          v188->__r_.__value_.__l.__size_ = 0;
          v188->__r_.__value_.__r.__words[2] = 0;
          v188->__r_.__value_.__r.__words[0] = 0;
          v190 = std::string::append(&v372, "/blob=");
          v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
          v373.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v191;
          v190->__r_.__value_.__l.__size_ = 0;
          v190->__r_.__value_.__r.__words[2] = 0;
          v190->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v370, 4 * *(int *)(*(_QWORD *)v183 + 8));
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v192 = &v370;
          else
            v192 = (std::string *)v370.__r_.__value_.__r.__words[0];
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v193 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
          else
            v193 = v370.__r_.__value_.__l.__size_;
          v194 = std::string::append(&v373, (const std::string::value_type *)v192, v193);
          v195 = *(_OWORD *)&v194->__r_.__value_.__l.__data_;
          v382.__r_.__value_.__r.__words[2] = v194->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v195;
          v194->__r_.__value_.__l.__size_ = 0;
          v194->__r_.__value_.__r.__words[2] = 0;
          v194->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v367, " @ ");
          if ((v369 & 0x80u) == 0)
            v196 = (const std::string::value_type *)&v367;
          else
            v196 = v367;
          if ((v369 & 0x80u) == 0)
            v197 = v369;
          else
            v197 = v368;
          v198 = std::string::append(&v382, v196, v197);
          v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
          v383.__r_.__value_.__r.__words[2] = v198->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v199;
          v198->__r_.__value_.__l.__size_ = 0;
          v198->__r_.__value_.__r.__words[2] = 0;
          v198->__r_.__value_.__r.__words[0] = 0;
          v200 = std::string::append(&v383, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
          v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
          v384.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v201;
          v200->__r_.__value_.__l.__size_ = 0;
          v200->__r_.__value_.__r.__words[2] = 0;
          v200->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v364, ":");
          if ((v366 & 0x80u) == 0)
            v202 = (const std::string::value_type *)&v364;
          else
            v202 = v364;
          if ((v366 & 0x80u) == 0)
            v203 = v366;
          else
            v203 = v365;
          v204 = std::string::append(&v384, v202, v203);
          v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
          v385.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v205;
          v204->__r_.__value_.__l.__size_ = 0;
          v204->__r_.__value_.__r.__words[2] = 0;
          v204->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v363, 732);
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v206 = &v363;
          else
            v206 = (std::string *)v363.__r_.__value_.__r.__words[0];
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v207 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
          else
            v207 = v363.__r_.__value_.__l.__size_;
          v208 = std::string::append(&v385, (const std::string::value_type *)v206, v207);
          v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
          v386.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v209;
          v208->__r_.__value_.__l.__size_ = 0;
          v208->__r_.__value_.__r.__words[2] = 0;
          v208->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v187, &v386);
          __cxa_throw(v187, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_358;
      }
      if ((v12 & 0x80) != 0)
      {
LABEL_172:
        if (*(_QWORD *)(a3 + 8) == 5)
        {
          if (**(_DWORD **)a3 == 1634296401 && *(_BYTE *)(*(_QWORD *)a3 + 4) == 115)
            goto LABEL_191;
          if ((v12 & 0x80) == 0)
            goto LABEL_321;
        }
        if (*(_QWORD *)(a3 + 8) != 9)
          goto LABEL_315;
        if (**(_QWORD **)a3 == 0x6D75735F776F7251 && *(_BYTE *)(*(_QWORD *)a3 + 8) == 115)
          goto LABEL_253;
        if ((v12 & 0x80) != 0)
        {
LABEL_315:
          if (*(_QWORD *)(a3 + 8) != 6)
            goto LABEL_321;
          v44 = *(_QWORD *)a3;
        }
        else
        {
          v44 = a3;
          if (v12 != 6)
            goto LABEL_321;
        }
LABEL_317:
        v210 = *(_DWORD *)v44;
        v211 = *(unsigned __int16 *)(v44 + 4);
        v212 = v210 == 1701147252 && v211 == 22367;
        if (v212 && *(_QWORD *)(a1 + 928))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v386, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 404), 1, 1);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 928), (__int128 *)&v386);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v386);
          v250 = 0;
          v214 = **(_QWORD **)(a1 + 928);
          v251 = *(int *)(v214 + 8);
          do
          {
            v251 *= *(int *)(v214 + 12 + v250);
            v250 += 4;
          }
          while (v250 != 12);
          if (a5 != 4 * v251)
          {
            v252 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v371, a5);
            v253 = std::string::insert(&v371, 0, "Unexpected size s=");
            v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
            v372.__r_.__value_.__r.__words[2] = v253->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v254;
            v253->__r_.__value_.__l.__size_ = 0;
            v253->__r_.__value_.__r.__words[2] = 0;
            v253->__r_.__value_.__r.__words[0] = 0;
            v255 = std::string::append(&v372, "/blob=");
            v256 = 0;
            v257 = *(_OWORD *)&v255->__r_.__value_.__l.__data_;
            v373.__r_.__value_.__r.__words[2] = v255->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v257;
            v255->__r_.__value_.__l.__size_ = 0;
            v255->__r_.__value_.__r.__words[2] = 0;
            v255->__r_.__value_.__r.__words[0] = 0;
            v258 = **(_QWORD **)(a1 + 928);
            v259 = *(int *)(v258 + 8);
            v260 = v258 + 12;
            do
            {
              v259 *= *(int *)(v260 + v256);
              v256 += 4;
            }
            while (v256 != 12);
            std::to_string(&v370, 4 * v259);
            if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v261 = &v370;
            else
              v261 = (std::string *)v370.__r_.__value_.__r.__words[0];
            if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v262 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
            else
              v262 = v370.__r_.__value_.__l.__size_;
            v263 = std::string::append(&v373, (const std::string::value_type *)v261, v262);
            v264 = *(_OWORD *)&v263->__r_.__value_.__l.__data_;
            v382.__r_.__value_.__r.__words[2] = v263->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v264;
            v263->__r_.__value_.__l.__size_ = 0;
            v263->__r_.__value_.__r.__words[2] = 0;
            v263->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v367, " @ ");
            if ((v369 & 0x80u) == 0)
              v265 = (const std::string::value_type *)&v367;
            else
              v265 = v367;
            if ((v369 & 0x80u) == 0)
              v266 = v369;
            else
              v266 = v368;
            v267 = std::string::append(&v382, v265, v266);
            v268 = *(_OWORD *)&v267->__r_.__value_.__l.__data_;
            v383.__r_.__value_.__r.__words[2] = v267->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v268;
            v267->__r_.__value_.__l.__size_ = 0;
            v267->__r_.__value_.__r.__words[2] = 0;
            v267->__r_.__value_.__r.__words[0] = 0;
            v269 = std::string::append(&v383, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
            v270 = *(_OWORD *)&v269->__r_.__value_.__l.__data_;
            v384.__r_.__value_.__r.__words[2] = v269->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v270;
            v269->__r_.__value_.__l.__size_ = 0;
            v269->__r_.__value_.__r.__words[2] = 0;
            v269->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v364, ":");
            if ((v366 & 0x80u) == 0)
              v271 = (const std::string::value_type *)&v364;
            else
              v271 = v364;
            if ((v366 & 0x80u) == 0)
              v272 = v366;
            else
              v272 = v365;
            v273 = std::string::append(&v384, v271, v272);
            v274 = *(_OWORD *)&v273->__r_.__value_.__l.__data_;
            v385.__r_.__value_.__r.__words[2] = v273->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v274;
            v273->__r_.__value_.__l.__size_ = 0;
            v273->__r_.__value_.__r.__words[2] = 0;
            v273->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v363, 744);
            if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v275 = &v363;
            else
              v275 = (std::string *)v363.__r_.__value_.__r.__words[0];
            if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v276 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
            else
              v276 = v363.__r_.__value_.__l.__size_;
            v277 = std::string::append(&v385, (const std::string::value_type *)v275, v276);
            v278 = *(_OWORD *)&v277->__r_.__value_.__l.__data_;
            v386.__r_.__value_.__r.__words[2] = v277->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v278;
            v277->__r_.__value_.__l.__size_ = 0;
            v277->__r_.__value_.__r.__words[2] = 0;
            v277->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v252, &v386);
            __cxa_throw(v252, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          goto LABEL_326;
        }
        goto LABEL_321;
      }
      if (v12 == 5)
      {
LABEL_186:
        if (*(_DWORD *)a3 != 1634296401 || *(_BYTE *)(a3 + 4) != 115)
          goto LABEL_321;
LABEL_191:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v386, *(_DWORD *)(a1 + 304), 1, 1, 1);
        v102 = a1 + 656;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v102, (__int128 *)&v386);
        v103 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
        if (v386.__r_.__value_.__l.__size_)
        {
          v104 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        v17 = *(_QWORD *)v102;
        if (a5 != 4 * *(int *)(*(_QWORD *)v102 + 8))
        {
          v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v371, a5);
          v107 = std::string::insert(&v371, 0, "Unexpected size s=");
          v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
          v372.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v108;
          v107->__r_.__value_.__l.__size_ = 0;
          v107->__r_.__value_.__r.__words[2] = 0;
          v107->__r_.__value_.__r.__words[0] = 0;
          v109 = std::string::append(&v372, "/blob=");
          v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
          v373.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v110;
          v109->__r_.__value_.__l.__size_ = 0;
          v109->__r_.__value_.__r.__words[2] = 0;
          v109->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v370, 4 * *(int *)(*(_QWORD *)v102 + 8));
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v111 = &v370;
          else
            v111 = (std::string *)v370.__r_.__value_.__r.__words[0];
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v112 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
          else
            v112 = v370.__r_.__value_.__l.__size_;
          v113 = std::string::append(&v373, (const std::string::value_type *)v111, v112);
          v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
          v382.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v114;
          v113->__r_.__value_.__l.__size_ = 0;
          v113->__r_.__value_.__r.__words[2] = 0;
          v113->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v367, " @ ");
          if ((v369 & 0x80u) == 0)
            v115 = (const std::string::value_type *)&v367;
          else
            v115 = v367;
          if ((v369 & 0x80u) == 0)
            v116 = v369;
          else
            v116 = v368;
          v117 = std::string::append(&v382, v115, v116);
          v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
          v383.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v118;
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          v117->__r_.__value_.__r.__words[0] = 0;
          v119 = std::string::append(&v383, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
          v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          v384.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v364, ":");
          if ((v366 & 0x80u) == 0)
            v121 = (const std::string::value_type *)&v364;
          else
            v121 = v364;
          if ((v366 & 0x80u) == 0)
            v122 = v366;
          else
            v122 = v365;
          v123 = std::string::append(&v384, v121, v122);
          v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
          v385.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v124;
          v123->__r_.__value_.__l.__size_ = 0;
          v123->__r_.__value_.__r.__words[2] = 0;
          v123->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v363, 735);
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v125 = &v363;
          else
            v125 = (std::string *)v363.__r_.__value_.__r.__words[0];
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v126 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
          else
            v126 = v363.__r_.__value_.__l.__size_;
          v127 = std::string::append(&v385, (const std::string::value_type *)v125, v126);
          v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
          v386.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v128;
          v127->__r_.__value_.__l.__size_ = 0;
          v127->__r_.__value_.__r.__words[2] = 0;
          v127->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v106, &v386);
          __cxa_throw(v106, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_358;
      }
      v44 = a3;
      if (v12 == 6)
        goto LABEL_317;
LABEL_165:
      if (v12 == 9)
      {
LABEL_166:
        if (*(_QWORD *)a3 != 0x6D75735F776F7251 || *(_BYTE *)(a3 + 8) != 115)
          goto LABEL_321;
LABEL_253:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v386, *(_DWORD *)(a1 + 304), 1, 1, 1);
        v156 = a1 + 672;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v156, (__int128 *)&v386);
        v157 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
        if (v386.__r_.__value_.__l.__size_)
        {
          v158 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        v17 = *(_QWORD *)v156;
        if (a5 != 4 * *(int *)(*(_QWORD *)v156 + 8))
        {
          v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v371, a5);
          v161 = std::string::insert(&v371, 0, "Unexpected size s=");
          v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
          v372.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v162;
          v161->__r_.__value_.__l.__size_ = 0;
          v161->__r_.__value_.__r.__words[2] = 0;
          v161->__r_.__value_.__r.__words[0] = 0;
          v163 = std::string::append(&v372, "/blob=");
          v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
          v373.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v164;
          v163->__r_.__value_.__l.__size_ = 0;
          v163->__r_.__value_.__r.__words[2] = 0;
          v163->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v370, 4 * *(int *)(*(_QWORD *)v156 + 8));
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v165 = &v370;
          else
            v165 = (std::string *)v370.__r_.__value_.__r.__words[0];
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v166 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
          else
            v166 = v370.__r_.__value_.__l.__size_;
          v167 = std::string::append(&v373, (const std::string::value_type *)v165, v166);
          v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
          v382.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v168;
          v167->__r_.__value_.__l.__size_ = 0;
          v167->__r_.__value_.__r.__words[2] = 0;
          v167->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v367, " @ ");
          if ((v369 & 0x80u) == 0)
            v169 = (const std::string::value_type *)&v367;
          else
            v169 = v367;
          if ((v369 & 0x80u) == 0)
            v170 = v369;
          else
            v170 = v368;
          v171 = std::string::append(&v382, v169, v170);
          v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
          v383.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v172;
          v171->__r_.__value_.__l.__size_ = 0;
          v171->__r_.__value_.__r.__words[2] = 0;
          v171->__r_.__value_.__r.__words[0] = 0;
          v173 = std::string::append(&v383, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
          v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
          v384.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v174;
          v173->__r_.__value_.__l.__size_ = 0;
          v173->__r_.__value_.__r.__words[2] = 0;
          v173->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v364, ":");
          if ((v366 & 0x80u) == 0)
            v175 = (const std::string::value_type *)&v364;
          else
            v175 = v364;
          if ((v366 & 0x80u) == 0)
            v176 = v366;
          else
            v176 = v365;
          v177 = std::string::append(&v384, v175, v176);
          v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
          v385.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v178;
          v177->__r_.__value_.__l.__size_ = 0;
          v177->__r_.__value_.__r.__words[2] = 0;
          v177->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v363, 738);
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v179 = &v363;
          else
            v179 = (std::string *)v363.__r_.__value_.__r.__words[0];
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v180 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
          else
            v180 = v363.__r_.__value_.__l.__size_;
          v181 = std::string::append(&v385, (const std::string::value_type *)v179, v180);
          v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
          v386.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v182;
          v181->__r_.__value_.__l.__size_ = 0;
          v181->__r_.__value_.__r.__words[2] = 0;
          v181->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v160, &v386);
          __cxa_throw(v160, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_358;
      }
LABEL_321:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "tree_b")
        && *(_QWORD *)(a1 + 928))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v386, *(_DWORD *)(a1 + 404), 1, 1, 1);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 928), (__int128 *)&v386);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v386);
        v213 = 0;
        v214 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 16);
        v215 = *(int *)(v214 + 8);
        do
        {
          v215 *= *(int *)(v214 + 12 + v213);
          v213 += 4;
        }
        while (v213 != 12);
        if (a5 != 4 * v215)
        {
          v300 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v371, a5);
          v301 = std::string::insert(&v371, 0, "Unexpected size s=");
          v302 = *(_OWORD *)&v301->__r_.__value_.__l.__data_;
          v372.__r_.__value_.__r.__words[2] = v301->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v302;
          v301->__r_.__value_.__l.__size_ = 0;
          v301->__r_.__value_.__r.__words[2] = 0;
          v301->__r_.__value_.__r.__words[0] = 0;
          v303 = std::string::append(&v372, "/blob=");
          v304 = 0;
          v305 = *(_OWORD *)&v303->__r_.__value_.__l.__data_;
          v373.__r_.__value_.__r.__words[2] = v303->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v305;
          v303->__r_.__value_.__l.__size_ = 0;
          v303->__r_.__value_.__r.__words[2] = 0;
          v303->__r_.__value_.__r.__words[0] = 0;
          v306 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 16);
          v307 = *(int *)(v306 + 8);
          v308 = v306 + 12;
          do
          {
            v307 *= *(int *)(v308 + v304);
            v304 += 4;
          }
          while (v304 != 12);
          std::to_string(&v370, 4 * v307);
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v309 = &v370;
          else
            v309 = (std::string *)v370.__r_.__value_.__r.__words[0];
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v310 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
          else
            v310 = v370.__r_.__value_.__l.__size_;
          v311 = std::string::append(&v373, (const std::string::value_type *)v309, v310);
          v312 = *(_OWORD *)&v311->__r_.__value_.__l.__data_;
          v382.__r_.__value_.__r.__words[2] = v311->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v312;
          v311->__r_.__value_.__l.__size_ = 0;
          v311->__r_.__value_.__r.__words[2] = 0;
          v311->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v367, " @ ");
          if ((v369 & 0x80u) == 0)
            v313 = (const std::string::value_type *)&v367;
          else
            v313 = v367;
          if ((v369 & 0x80u) == 0)
            v314 = v369;
          else
            v314 = v368;
          v315 = std::string::append(&v382, v313, v314);
          v316 = *(_OWORD *)&v315->__r_.__value_.__l.__data_;
          v383.__r_.__value_.__r.__words[2] = v315->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v316;
          v315->__r_.__value_.__l.__size_ = 0;
          v315->__r_.__value_.__r.__words[2] = 0;
          v315->__r_.__value_.__r.__words[0] = 0;
          v317 = std::string::append(&v383, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
          v318 = *(_OWORD *)&v317->__r_.__value_.__l.__data_;
          v384.__r_.__value_.__r.__words[2] = v317->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v318;
          v317->__r_.__value_.__l.__size_ = 0;
          v317->__r_.__value_.__r.__words[2] = 0;
          v317->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v364, ":");
          if ((v366 & 0x80u) == 0)
            v319 = (const std::string::value_type *)&v364;
          else
            v319 = v364;
          if ((v366 & 0x80u) == 0)
            v320 = v366;
          else
            v320 = v365;
          v321 = std::string::append(&v384, v319, v320);
          v322 = *(_OWORD *)&v321->__r_.__value_.__l.__data_;
          v385.__r_.__value_.__r.__words[2] = v321->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v322;
          v321->__r_.__value_.__l.__size_ = 0;
          v321->__r_.__value_.__r.__words[2] = 0;
          v321->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v363, 748);
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v323 = &v363;
          else
            v323 = (std::string *)v363.__r_.__value_.__r.__words[0];
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v324 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
          else
            v324 = v363.__r_.__value_.__l.__size_;
          v325 = std::string::append(&v385, (const std::string::value_type *)v323, v324);
          v326 = *(_OWORD *)&v325->__r_.__value_.__l.__data_;
          v386.__r_.__value_.__r.__words[2] = v325->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v326;
          v325->__r_.__value_.__l.__size_ = 0;
          v325->__r_.__value_.__r.__words[2] = 0;
          v325->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v300, &v386);
          __cxa_throw(v300, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
LABEL_326:
        v216 = *(void **)(v214 + 24);
LABEL_359:
        memcpy(v216, a4, a5);
        goto LABEL_360;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "tree_map_to_index")&& *(_QWORD *)(a1 + 928))
      {
        Espresso::blob<int,1>::make(&v386, *(_DWORD *)(a1 + 304));
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 928) + 32, (__int128 *)&v386);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v386);
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 32);
        if (a5 != 4 * *(int *)(v17 + 8))
        {
          v217 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v371, a5);
          v218 = std::string::insert(&v371, 0, "Unexpected size s=");
          v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
          v372.__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v219;
          v218->__r_.__value_.__l.__size_ = 0;
          v218->__r_.__value_.__r.__words[2] = 0;
          v218->__r_.__value_.__r.__words[0] = 0;
          v220 = std::string::append(&v372, "/blob=");
          v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
          v373.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v221;
          v220->__r_.__value_.__l.__size_ = 0;
          v220->__r_.__value_.__r.__words[2] = 0;
          v220->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v370, 4 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 928) + 32) + 8));
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v222 = &v370;
          else
            v222 = (std::string *)v370.__r_.__value_.__r.__words[0];
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v223 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
          else
            v223 = v370.__r_.__value_.__l.__size_;
          v224 = std::string::append(&v373, (const std::string::value_type *)v222, v223);
          v225 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
          v382.__r_.__value_.__r.__words[2] = v224->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v225;
          v224->__r_.__value_.__l.__size_ = 0;
          v224->__r_.__value_.__r.__words[2] = 0;
          v224->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v367, " @ ");
          if ((v369 & 0x80u) == 0)
            v226 = (const std::string::value_type *)&v367;
          else
            v226 = v367;
          if ((v369 & 0x80u) == 0)
            v227 = v369;
          else
            v227 = v368;
          v228 = std::string::append(&v382, v226, v227);
          v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
          v383.__r_.__value_.__r.__words[2] = v228->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v229;
          v228->__r_.__value_.__l.__size_ = 0;
          v228->__r_.__value_.__r.__words[2] = 0;
          v228->__r_.__value_.__r.__words[0] = 0;
          v230 = std::string::append(&v383, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
          v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
          v384.__r_.__value_.__r.__words[2] = v230->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v231;
          v230->__r_.__value_.__l.__size_ = 0;
          v230->__r_.__value_.__r.__words[2] = 0;
          v230->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v364, ":");
          if ((v366 & 0x80u) == 0)
            v232 = (const std::string::value_type *)&v364;
          else
            v232 = v364;
          if ((v366 & 0x80u) == 0)
            v233 = v366;
          else
            v233 = v365;
          v234 = std::string::append(&v384, v232, v233);
          v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
          v385.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v235;
          v234->__r_.__value_.__l.__size_ = 0;
          v234->__r_.__value_.__r.__words[2] = 0;
          v234->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v363, 752);
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v236 = &v363;
          else
            v236 = (std::string *)v363.__r_.__value_.__r.__words[0];
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v237 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
          else
            v237 = v363.__r_.__value_.__l.__size_;
          v238 = std::string::append(&v385, (const std::string::value_type *)v236, v237);
          v239 = *(_OWORD *)&v238->__r_.__value_.__l.__data_;
          v386.__r_.__value_.__r.__words[2] = v238->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v239;
          v238->__r_.__value_.__l.__size_ = 0;
          v238->__r_.__value_.__r.__words[2] = 0;
          v238->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v217, &v386);
          __cxa_throw(v217, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
LABEL_358:
        v216 = *(void **)(v17 + 16);
        goto LABEL_359;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "tree_cluster_end")&& *(_QWORD *)(a1 + 928))
      {
        Espresso::blob<int,1>::make(&v386, *(_DWORD *)(a1 + 404));
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 928) + 32, (__int128 *)&v386);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v386);
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 32);
        if (a5 != 4 * *(int *)(v17 + 8))
        {
          v327 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v371, a5);
          v328 = std::string::insert(&v371, 0, "Unexpected size s=");
          v329 = *(_OWORD *)&v328->__r_.__value_.__l.__data_;
          v372.__r_.__value_.__r.__words[2] = v328->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v329;
          v328->__r_.__value_.__l.__size_ = 0;
          v328->__r_.__value_.__r.__words[2] = 0;
          v328->__r_.__value_.__r.__words[0] = 0;
          v330 = std::string::append(&v372, "/blob=");
          v331 = *(_OWORD *)&v330->__r_.__value_.__l.__data_;
          v373.__r_.__value_.__r.__words[2] = v330->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v331;
          v330->__r_.__value_.__l.__size_ = 0;
          v330->__r_.__value_.__r.__words[2] = 0;
          v330->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v370, 4 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 928) + 32) + 8));
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v332 = &v370;
          else
            v332 = (std::string *)v370.__r_.__value_.__r.__words[0];
          if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v333 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
          else
            v333 = v370.__r_.__value_.__l.__size_;
          v334 = std::string::append(&v373, (const std::string::value_type *)v332, v333);
          v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
          v382.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v335;
          v334->__r_.__value_.__l.__size_ = 0;
          v334->__r_.__value_.__r.__words[2] = 0;
          v334->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v367, " @ ");
          if ((v369 & 0x80u) == 0)
            v336 = (const std::string::value_type *)&v367;
          else
            v336 = v367;
          if ((v369 & 0x80u) == 0)
            v337 = v369;
          else
            v337 = v368;
          v338 = std::string::append(&v382, v336, v337);
          v339 = *(_OWORD *)&v338->__r_.__value_.__l.__data_;
          v383.__r_.__value_.__r.__words[2] = v338->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v339;
          v338->__r_.__value_.__l.__size_ = 0;
          v338->__r_.__value_.__r.__words[2] = 0;
          v338->__r_.__value_.__r.__words[0] = 0;
          v340 = std::string::append(&v383, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
          v341 = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
          v384.__r_.__value_.__r.__words[2] = v340->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v384.__r_.__value_.__l.__data_ = v341;
          v340->__r_.__value_.__l.__size_ = 0;
          v340->__r_.__value_.__r.__words[2] = 0;
          v340->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v364, ":");
          if ((v366 & 0x80u) == 0)
            v342 = (const std::string::value_type *)&v364;
          else
            v342 = v364;
          if ((v366 & 0x80u) == 0)
            v343 = v366;
          else
            v343 = v365;
          v344 = std::string::append(&v384, v342, v343);
          v345 = *(_OWORD *)&v344->__r_.__value_.__l.__data_;
          v385.__r_.__value_.__r.__words[2] = v344->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v345;
          v344->__r_.__value_.__l.__size_ = 0;
          v344->__r_.__value_.__r.__words[2] = 0;
          v344->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v363, 756);
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v346 = &v363;
          else
            v346 = (std::string *)v363.__r_.__value_.__r.__words[0];
          if ((v363.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v347 = HIBYTE(v363.__r_.__value_.__r.__words[2]);
          else
            v347 = v363.__r_.__value_.__l.__size_;
          v348 = std::string::append(&v385, (const std::string::value_type *)v346, v347);
          v349 = *(_OWORD *)&v348->__r_.__value_.__l.__data_;
          v386.__r_.__value_.__r.__words[2] = v348->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v349;
          v348->__r_.__value_.__l.__size_ = 0;
          v348->__r_.__value_.__r.__words[2] = 0;
          v348->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v327, &v386);
          __cxa_throw(v327, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        goto LABEL_358;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "block_starts"))
      {
        v362[0] = v380;
        v362[1] = v381;
        if (v381)
        {
          v243 = (unint64_t *)(v381 + 8);
          do
            v244 = __ldxr(v243);
          while (__stxr(v244 + 1, v243));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v386, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v362, a5 >> 1, (a4 & 0x3F) == 0);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 864, (__int128 *)&v386);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v386);
        v245 = v362;
LABEL_417:
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v245);
        goto LABEL_360;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "block_cols"))
      {
        v361[0] = v380;
        v361[1] = v381;
        if (v381)
        {
          v246 = (unint64_t *)(v381 + 8);
          do
            v247 = __ldxr(v246);
          while (__stxr(v247 + 1, v246));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v386, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v361, a5 >> 1, (a4 & 0x3F) == 0);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 880, (__int128 *)&v386);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v386);
        v245 = v361;
        goto LABEL_417;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "sparse_weights_f32"))
      {
        v360[0] = v380;
        v360[1] = v381;
        if (v381)
        {
          v248 = (unint64_t *)(v381 + 8);
          do
            v249 = __ldxr(v248);
          while (__stxr(v249 + 1, v248));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,1>(&v386, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v360, a5, (a4 & 0x3F) == 0);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 832, (__int128 *)&v386);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v386);
        v245 = v360;
        goto LABEL_417;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, "sparse_weights_f16"))
      {
        v359[0] = v380;
        v359[1] = v381;
        if (v381)
        {
          v283 = (unint64_t *)(v381 + 8);
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,1>(&v386, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v359, a5, (a4 & 0x3F) == 0);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 848, (__int128 *)&v386);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v386);
        v245 = v359;
        goto LABEL_417;
      }
      v298 = *(_QWORD *)(a1 + 440);
      if (!v298)
      {
        LODWORD(v385.__r_.__value_.__l.__data_) = 1;
        LODWORD(v384.__r_.__value_.__l.__data_) = 1;
        std::allocate_shared[abi:ne180100]<Espresso::quantized_weights_helper,std::allocator<Espresso::quantized_weights_helper>,std::shared_ptr<Espresso::abstract_context> &,int,int,unsigned int &,unsigned int &,void>(&v386, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (int *)&v385, (int *)&v384, (int *)(a1 + 308), (int *)(a1 + 304));
        v299 = (uint64_t *)(a1 + 440);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v299, (__int128 *)&v386);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v386);
        v298 = *v299;
      }
      Espresso::quantized_weights_helper::__set_weight_raw_blob(v298, v280, v281, v282, v279, a3, (char *)a4, a5, a6);
LABEL_360:
      v240 = (std::__shared_weak_count *)v381;
      if (v381)
      {
        v241 = (unint64_t *)(v381 + 8);
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      return;
    case 8:
      if (**(_QWORD **)a3 != 0x38746E695F745F57)
        goto LABEL_155;
LABEL_137:
      *(_OWORD *)&v386.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 560, (__int128 *)&v386);
      v88 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
      if (v386.__r_.__value_.__l.__size_)
      {
        v89 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v376 = v380;
      v377 = (std::__shared_weak_count *)v381;
      if (v381)
      {
        v91 = (unint64_t *)(v381 + 8);
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(&v386, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v376, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 896, (__int128 *)&v386);
      v93 = (std::__shared_weak_count *)v386.__r_.__value_.__l.__size_;
      if (v386.__r_.__value_.__l.__size_)
      {
        v94 = (unint64_t *)(v386.__r_.__value_.__l.__size_ + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v85 = v377;
      if (!v377)
        goto LABEL_360;
      v96 = (unint64_t *)&v377->__shared_owners_;
      do
        v87 = __ldaxr(v96);
      while (__stlxr(v87 - 1, v96));
      goto LABEL_443;
    default:
      goto LABEL_155;
  }
}

void sub_190E9867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  int v62;
  void *v63;
  uint64_t v64;

  if (*(char *)(v64 - 73) < 0)
    operator delete(*(void **)(v64 - 96));
  if (a24 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 105) < 0)
    operator delete(*(void **)(v64 - 128));
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v64 - 137) < 0)
    operator delete(*(void **)(v64 - 160));
  if (*(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v64 - 201) < 0)
    operator delete(*(void **)(v64 - 224));
  if (a42 < 0)
    operator delete(a37);
  if (a62 < 0)
    operator delete(a57);
  if (a55 < 0)
    operator delete(a50);
  if (a48 < 0)
  {
    operator delete(a43);
    if ((v62 & 1) == 0)
    {
LABEL_28:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v64 - 240);
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v63);
  goto LABEL_28;
}

void Espresso::generic_inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const std::string::value_type *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v11;
  uint64_t v12;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  const std::string::value_type *v38;
  int v40;
  int v41;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  __int128 v100;
  __int128 v101;
  std::string v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105[2];
  __int128 v106;
  uint64_t v107[2];
  __int128 v108;
  uint64_t v109[2];
  __int128 v110;
  uint64_t v111[2];
  __int128 v112;
  uint64_t v113;
  uint64_t v114;

  v113 = 0;
  v114 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v113, *a6, a6[1]);
  if (a3[23] < 0)
  {
    v12 = *((_QWORD *)a3 + 1);
    if (v12 != 1)
    {
      if (v12 != 5)
      {
        if (v12 != 7)
          goto LABEL_172;
        a3 = *(const std::string::value_type **)a3;
        goto LABEL_13;
      }
      v38 = *(const std::string::value_type **)a3;
      if (**(_DWORD **)a3 != 828792663 || *(_BYTE *)(*(_QWORD *)a3 + 4) != 54)
      {
        v40 = *(_DWORD *)v38;
        v41 = *((unsigned __int8 *)v38 + 4);
        if (v40 != 828792674 || v41 != 54)
          goto LABEL_172;
LABEL_78:
        v43 = (std::__shared_weak_count *)v114;
        v105[0] = v113;
        v105[1] = v114;
        if (v114)
        {
          v44 = (unint64_t *)(v114 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v112, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v105, *(_DWORD *)(a1 + 304) << (*(_DWORD *)(a1 + 332) != 0), (a4 & 0x3F) == 0);
        if (v43)
        {
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            v47 = __ldaxr(p_shared_owners);
          while (__stlxr(v47 - 1, p_shared_owners));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v48 = *(std::__shared_weak_count **)(a1 + 16);
        v103 = *(_QWORD *)(a1 + 8);
        v104 = v48;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        if (a3[23] < 0)
          std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
        else
          v102 = *(std::string *)a3;
        v101 = v112;
        if (*((_QWORD *)&v112 + 1))
        {
          v79 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        Espresso::base_kernel::set_parameter_blob<unsigned short,1>(a1, &v103, (__int128 *)&v102, (uint64_t *)&v101);
        v81 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
        {
          v82 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v102.__r_.__value_.__l.__data_);
        v84 = v104;
        if (v104)
        {
          v85 = (unint64_t *)&v104->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v100 = v112;
        if (*((_QWORD *)&v112 + 1))
        {
          v87 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 480))(a1, &v100, a2);
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
        if (!*((_QWORD *)&v112 + 1))
          goto LABEL_172;
        v92 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
        do
          v22 = __ldaxr(v92);
        while (__stlxr(v22 - 1, v92));
        goto LABEL_170;
      }
      goto LABEL_91;
    }
    v26 = **(unsigned __int8 **)a3;
    if (v26 == 87)
      goto LABEL_123;
    if (v26 != 98)
      goto LABEL_172;
    goto LABEL_49;
  }
  v11 = *((unsigned __int8 *)a3 + 23);
  if (v11 == 1)
  {
    v23 = *(unsigned __int8 *)a3;
    if (v23 != 98)
    {
      if (v23 != 87)
        goto LABEL_172;
LABEL_123:
      v68 = (std::__shared_weak_count *)v114;
      v111[0] = v113;
      v111[1] = v114;
      if (v114)
      {
        v69 = (unint64_t *)(v114 + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v112, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v111, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      if (v68)
      {
        v71 = (unint64_t *)&v68->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v110 = v112;
      if (*((_QWORD *)&v112 + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 400))(a1, &v110);
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
      if (*((_QWORD *)&v110 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
      if (!*((_QWORD *)&v112 + 1))
        goto LABEL_172;
      v78 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v22 = __ldaxr(v78);
      while (__stlxr(v22 - 1, v78));
      goto LABEL_170;
    }
LABEL_49:
    v27 = (std::__shared_weak_count *)v114;
    v109[0] = v113;
    v109[1] = v114;
    if (v114)
    {
      v28 = (unint64_t *)(v114 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v112, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v109, *(_DWORD *)(a1 + 304) << (*(_DWORD *)(a1 + 332) != 0), (a4 & 0x3F) == 0);
    if (v27)
    {
      v30 = (unint64_t *)&v27->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v108 = v112;
    if (*((_QWORD *)&v112 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 392))(a1, &v108);
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    if (*((_QWORD *)&v108 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    if (!*((_QWORD *)&v112 + 1))
      goto LABEL_172;
    v37 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v22 = __ldaxr(v37);
    while (__stlxr(v22 - 1, v37));
LABEL_170:
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    goto LABEL_172;
  }
  if (v11 == 5)
  {
    if (*(_DWORD *)a3 != 828792663 || a3[4] != 54)
    {
      if (*(_DWORD *)a3 != 828792674 || a3[4] != 54)
        goto LABEL_172;
      goto LABEL_78;
    }
LABEL_91:
    v51 = (std::__shared_weak_count *)v114;
    v107[0] = v113;
    v107[1] = v114;
    if (v114)
    {
      v52 = (unint64_t *)(v114 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v112, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v107, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    if (v51)
    {
      v54 = (unint64_t *)&v51->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v106 = v112;
    if (*((_QWORD *)&v112 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 464))(a1, &v106, a2);
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
    if (*((_QWORD *)&v106 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    if (!*((_QWORD *)&v112 + 1))
      goto LABEL_172;
    v61 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v22 = __ldaxr(v61);
    while (__stlxr(v22 - 1, v61));
    goto LABEL_170;
  }
  if (v11 != 7)
    goto LABEL_172;
LABEL_13:
  if (*(_DWORD *)a3 == 828792695 && *(_DWORD *)(a3 + 3) == 1952396849)
  {
    v98 = v113;
    v99 = (std::__shared_weak_count *)v114;
    if (v114)
    {
      v62 = (unint64_t *)(v114 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v112, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v98, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 528, &v112);
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v20 = v99;
    if (!v99)
      goto LABEL_172;
    v67 = (unint64_t *)&v99->__shared_owners_;
    do
      v22 = __ldaxr(v67);
    while (__stlxr(v22 - 1, v67));
    goto LABEL_170;
  }
  if (*(_DWORD *)a3 == 862347127 && *(_DWORD *)(a3 + 3) == 1952395827)
  {
    v96 = v113;
    v97 = (std::__shared_weak_count *)v114;
    if (v114)
    {
      v15 = (unint64_t *)(v114 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v112, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v96, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 512, &v112);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v97;
    if (v97)
    {
      v21 = (unint64_t *)&v97->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      goto LABEL_170;
    }
  }
LABEL_172:
  v93 = (std::__shared_weak_count *)v114;
  if (v114)
  {
    v94 = (unint64_t *)(v114 + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_190E9938C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 80);
  _Unwind_Resume(a1);
}

void Espresso::quantized_weights_helper::__set_weight_raw_blob(uint64_t a1, double a2, double a3, int32x2_t a4, uint64_t a5, uint64_t a6, char *a7, unint64_t a8, uint64_t *a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  int data_low;
  int v18;
  int v20;
  BOOL v21;
  int v22;
  std::string::size_type v23;
  unsigned int v25;
  int v26;
  int v27;
  std::string::size_type size;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  __int32 v34;
  unsigned int v35;
  int64x2_t v36;
  int64x2_t v37;
  int8x16_t v38;
  uint32x2_t v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string *v69;
  Espresso *v70;
  const char *v71;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::string *v89;
  NSObject *v90;
  std::string::size_type v92;
  int v93;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  int v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::string *v128;
  std::string::size_type v130;
  int v131;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  __int128 buf;
  std::string v187;
  uint64_t v188;
  std::__shared_weak_count *v189;

  v188 = 0;
  v189 = 0;
  if (a9 && *a9)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v188, *a9, a9[1]);
  v13 = 136;
  if (!*(_DWORD *)(a1 + 144))
    v13 = 140;
  v14 = *(unsigned int *)(a1 + v13);
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v187 = *(std::string *)a6;
  v15 = (int)v14;
  if (!*(_BYTE *)(a1 + 152))
  {
LABEL_34:
    v25 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v187.__r_.__value_.__l.__size_;
      if (v187.__r_.__value_.__l.__size_ != 4)
        goto LABEL_91;
      if (*v187.__r_.__value_.__l.__data_ != 87)
        goto LABEL_94;
      v26 = *(unsigned __int8 *)(v187.__r_.__value_.__r.__words[0] + 3);
      if ((v26 - 57) >= 0xFFFFFFF8)
      {
        v27 = *(unsigned __int8 *)(v187.__r_.__value_.__r.__words[0] + 2);
LABEL_43:
        if (v27 != 85 && v27 != 83)
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unrecognizable weight name");
        v29 = (v26 - 48);
        *(_BYTE *)(a1 + 164) = v27 == 83;
        *(_DWORD *)(a1 + 156) = v29;
        v30 = *(int *)(a1 + 132) * (uint64_t)*(int *)(a1 + 128) * *(int *)(a1 + 136) * *(int *)(a1 + 140);
        v31 = *(unsigned int *)(a1 + 148);
        if ((int)v31 < 1)
        {
          v41 = 0;
        }
        else
        {
          v32 = (v30 / v31 * v29 - 1) >> 3;
          v33 = (v31 + 1) & 0xFFFFFFFE;
          v34 = v31 - 1;
          v35 = (v31 - 1) & 0xFFFFFFFE;
          a4.i32[0] = v34;
          v36 = vdupq_n_s64(v32 + 1);
          v37 = 0uLL;
          do
          {
            v38 = (int8x16_t)v37;
            v37 = vaddq_s64(v36, v37);
            v33 -= 2;
          }
          while (v33);
          v39 = vcgt_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v35), (int8x8_t)0x100000000), (uint32x2_t)vdup_lane_s32(a4, 0));
          v40.i64[0] = v39.i32[0];
          v40.i64[1] = v39.i32[1];
          v41 = vaddvq_s64((int64x2_t)vbslq_s8(v40, v38, (int8x16_t)v37));
        }
        if (v41 != a8)
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long &,unsigned long &,int &>(a8, v41, v30, v29);
        v54 = *(_QWORD *)(a1 + 112);
        v55 = *(std::__shared_weak_count **)(a1 + 120);
        v184 = v54;
        v185 = v55;
        if (v55)
        {
          p_shared_owners = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(p_shared_owners);
          while (__stxr(v57 + 1, p_shared_owners));
        }
        v182 = v188;
        v183 = v189;
        if (v189)
        {
          v58 = (unint64_t *)&v189->__shared_owners_;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<unsigned char,1>(&buf, v54, a7, a8, &v182, a8, (a7 & 0x3F) == 0);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1, &buf);
        v60 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = v183;
        if (v183)
        {
          v64 = (unint64_t *)&v183->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v66 = v185;
        if (v185)
        {
          v67 = (unint64_t *)&v185->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v25 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
        if ((*((_BYTE *)&v187.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_88;
        size = v187.__r_.__value_.__l.__size_;
LABEL_91:
        if (size <= 7)
          goto LABEL_94;
        v69 = (std::string *)v187.__r_.__value_.__r.__words[0];
LABEL_93:
        v70 = (Espresso *)strncmp((const char *)v69, "lut_to_", 7uLL);
        if ((_DWORD)v70)
          goto LABEL_94;
        if (*(int *)(a1 + 156) <= 0)
        {
          Espresso::espresso_os_log_subsystem(v70, v71);
          v90 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_error_impl(&dword_190DAF000, v90, OS_LOG_TYPE_ERROR, "Configuring LUT before setting bitdepth. Cannot check size.", (uint8_t *)&buf, 2u);
          }

          v25 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
        }
        if ((v25 & 0x80) != 0)
        {
          if (v187.__r_.__value_.__l.__size_ != 11)
          {
            if (v187.__r_.__value_.__l.__size_ != 12)
            {
              if (v187.__r_.__value_.__l.__size_ != 14)
                goto LABEL_94;
              if (*(_QWORD *)v187.__r_.__value_.__l.__data_ != 0x665F6F745F74756CLL
                || *(_QWORD *)(v187.__r_.__value_.__r.__words[0] + 6) != 0x323374616F6C665FLL)
              {
                goto LABEL_94;
              }
LABEL_190:
              v112 = 2 << (*(_DWORD *)(a1 + 156) - 1);
              if (v112 >= 1 && a8 != 4 * *(_DWORD *)(a1 + 148) * v112)
                Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching lut_to_float32 linear size %d != %d", a8, 4 * (2 << (*(_DWORD *)(a1 + 156) - 1)));
              v113 = *(_QWORD *)(a1 + 112);
              v114 = *(std::__shared_weak_count **)(a1 + 120);
              v180 = v113;
              v181 = v114;
              if (v114)
              {
                v115 = (unint64_t *)&v114->__shared_owners_;
                do
                  v116 = __ldxr(v115);
                while (__stxr(v116 + 1, v115));
              }
              v178 = v188;
              v179 = v189;
              if (v189)
              {
                v117 = (unint64_t *)&v189->__shared_owners_;
                do
                  v118 = __ldxr(v117);
                while (__stxr(v118 + 1, v117));
              }
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(&buf, v113, a7, a8, &v178, a8 >> 2, 0);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 32, &buf);
              v119 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
              {
                v120 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              v122 = v179;
              if (v179)
              {
                v123 = (unint64_t *)&v179->__shared_owners_;
                do
                  v124 = __ldaxr(v123);
                while (__stlxr(v124 - 1, v123));
                if (!v124)
                {
                  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                  std::__shared_weak_count::__release_weak(v122);
                }
              }
              v125 = v181;
              if (v181)
              {
                v126 = (unint64_t *)&v181->__shared_owners_;
                do
                  v127 = __ldaxr(v126);
                while (__stlxr(v127 - 1, v126));
                goto LABEL_273;
              }
LABEL_94:
              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v187.__r_.__value_.__l.__size_ != 12)
                {
                  if (v187.__r_.__value_.__l.__size_ != 13)
                    goto LABEL_174;
                  if (*(_QWORD *)v187.__r_.__value_.__l.__data_ != 0x715F68635F726570
                    || *(_QWORD *)(v187.__r_.__value_.__r.__words[0] + 5) != 0x656C616373715F68)
                  {
                    goto LABEL_174;
                  }
                  goto LABEL_110;
                }
                v89 = (std::string *)v187.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (HIBYTE(v187.__r_.__value_.__r.__words[2]) != 12)
                {
                  if (HIBYTE(v187.__r_.__value_.__r.__words[2]) != 13)
                    goto LABEL_174;
                  if (v187.__r_.__value_.__r.__words[0] != 0x715F68635F726570
                    || *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + 5) != 0x656C616373715F68)
                  {
                    goto LABEL_174;
                  }
LABEL_110:
                  if (4 * v15 != a8)
                    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching per_ch_qscale size %d != %d", a8, 4 * v15);
                  v74 = *(_QWORD *)(a1 + 112);
                  v75 = *(std::__shared_weak_count **)(a1 + 120);
                  v168 = v74;
                  v169 = v75;
                  if (v75)
                  {
                    v76 = (unint64_t *)&v75->__shared_owners_;
                    do
                      v77 = __ldxr(v76);
                    while (__stxr(v77 + 1, v76));
                  }
                  v166 = v188;
                  v167 = v189;
                  if (v189)
                  {
                    v78 = (unint64_t *)&v189->__shared_owners_;
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(&buf, v74, a7, a8, &v166, v15, 0);
                  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 80, &buf);
                  v80 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                  {
                    v81 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  v83 = v167;
                  if (v167)
                  {
                    v84 = (unint64_t *)&v167->__shared_owners_;
                    do
                      v85 = __ldaxr(v84);
                    while (__stlxr(v85 - 1, v84));
                    if (!v85)
                    {
                      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                      std::__shared_weak_count::__release_weak(v83);
                    }
                  }
                  v86 = v169;
                  if (!v169)
                    goto LABEL_174;
                  v87 = (unint64_t *)&v169->__shared_owners_;
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  goto LABEL_172;
                }
                v89 = &v187;
              }
              v92 = v89->__r_.__value_.__r.__words[0];
              v93 = v89->__r_.__value_.__r.__words[1];
              if (v92 != 0x715F68635F726570 || v93 != 1935763810)
                goto LABEL_174;
              if (4 * v15 != a8)
                Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching per_ch_qbias size %d != %d", a8, 4 * v15);
              v95 = *(_QWORD *)(a1 + 112);
              v96 = *(std::__shared_weak_count **)(a1 + 120);
              v164 = v95;
              v165 = v96;
              if (v96)
              {
                v97 = (unint64_t *)&v96->__shared_owners_;
                do
                  v98 = __ldxr(v97);
                while (__stxr(v98 + 1, v97));
              }
              v162 = v188;
              v163 = v189;
              if (v189)
              {
                v99 = (unint64_t *)&v189->__shared_owners_;
                do
                  v100 = __ldxr(v99);
                while (__stxr(v100 + 1, v99));
              }
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(&buf, v95, a7, a8, &v162, a8 >> 2, 0);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 96, &buf);
              v101 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
              {
                v102 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              v104 = v163;
              if (v163)
              {
                v105 = (unint64_t *)&v163->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              v86 = v165;
              if (!v165)
                goto LABEL_174;
              v107 = (unint64_t *)&v165->__shared_owners_;
              do
                v88 = __ldaxr(v107);
              while (__stlxr(v88 - 1, v107));
LABEL_172:
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
              goto LABEL_174;
            }
            v128 = (std::string *)v187.__r_.__value_.__r.__words[0];
            goto LABEL_220;
          }
          if (*(_QWORD *)v187.__r_.__value_.__l.__data_ != 0x695F6F745F74756CLL
            || *(_QWORD *)(v187.__r_.__value_.__r.__words[0] + 3) != 0x38746E695F6F745FLL)
          {
            goto LABEL_94;
          }
        }
        else
        {
          if (v25 != 11)
          {
            if (v25 != 12)
            {
              if (v25 != 14)
                goto LABEL_94;
              if (v187.__r_.__value_.__r.__words[0] != 0x665F6F745F74756CLL
                || *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + 6) != 0x323374616F6C665FLL)
              {
                goto LABEL_94;
              }
              goto LABEL_190;
            }
            v128 = &v187;
LABEL_220:
            v130 = v128->__r_.__value_.__r.__words[0];
            v131 = v128->__r_.__value_.__r.__words[1];
            if (v130 != 0x755F6F745F74756CLL || v131 != 947154537)
              goto LABEL_94;
            v133 = (2 << (*(_BYTE *)(a1 + 156) - 1));
            if ((int)v133 >= 1 && v133 != a8)
              Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching lut_to_uint8 %d != %d", a8, v133);
            v134 = *(_QWORD *)(a1 + 112);
            v135 = *(std::__shared_weak_count **)(a1 + 120);
            v172 = v134;
            v173 = v135;
            if (v135)
            {
              v136 = (unint64_t *)&v135->__shared_owners_;
              do
                v137 = __ldxr(v136);
              while (__stxr(v137 + 1, v136));
            }
            v170 = v188;
            v171 = v189;
            if (v189)
            {
              v138 = (unint64_t *)&v189->__shared_owners_;
              do
                v139 = __ldxr(v138);
              while (__stxr(v139 + 1, v138));
            }
            Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<unsigned char,1>(&buf, v134, a7, a8, &v170, a8, 0);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 64, &buf);
            v140 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
            if (*((_QWORD *)&buf + 1))
            {
              v141 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 - 1, v141));
              if (!v142)
              {
                ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                std::__shared_weak_count::__release_weak(v140);
              }
            }
            v143 = v171;
            if (v171)
            {
              v144 = (unint64_t *)&v171->__shared_owners_;
              do
                v145 = __ldaxr(v144);
              while (__stlxr(v145 - 1, v144));
              if (!v145)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
            v125 = v173;
            if (!v173)
              goto LABEL_94;
            v146 = (unint64_t *)&v173->__shared_owners_;
            do
              v127 = __ldaxr(v146);
            while (__stlxr(v127 - 1, v146));
            goto LABEL_273;
          }
          if (v187.__r_.__value_.__r.__words[0] != 0x695F6F745F74756CLL
            || *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + 3) != 0x38746E695F6F745FLL)
          {
            goto LABEL_94;
          }
        }
        v148 = (2 << (*(_BYTE *)(a1 + 156) - 1));
        if ((int)v148 >= 1 && v148 != a8)
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching lut_to_int8 size %d != %d", a8, v148);
        v149 = *(_QWORD *)(a1 + 112);
        v150 = *(std::__shared_weak_count **)(a1 + 120);
        v176 = v149;
        v177 = v150;
        if (v150)
        {
          v151 = (unint64_t *)&v150->__shared_owners_;
          do
            v152 = __ldxr(v151);
          while (__stxr(v152 + 1, v151));
        }
        v174 = v188;
        v175 = v189;
        if (v189)
        {
          v153 = (unint64_t *)&v189->__shared_owners_;
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<signed char,1>(&buf, v149, a7, a8, &v174, a8, 0);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 48, &buf);
        v155 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v156 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        v158 = v175;
        if (v175)
        {
          v159 = (unint64_t *)&v175->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
        v125 = v177;
        if (!v177)
          goto LABEL_94;
        v161 = (unint64_t *)&v177->__shared_owners_;
        do
          v127 = __ldaxr(v161);
        while (__stlxr(v127 - 1, v161));
LABEL_273:
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
        goto LABEL_94;
      }
    }
    else
    {
      if (HIBYTE(v187.__r_.__value_.__r.__words[2]) != 4)
      {
LABEL_88:
        if (v25 <= 7)
          goto LABEL_94;
        v69 = &v187;
        goto LABEL_93;
      }
      if (v187.__r_.__value_.__s.__data_[0] != 87)
        goto LABEL_94;
      v26 = v187.__r_.__value_.__s.__data_[3];
      if (v187.__r_.__value_.__s.__data_[3] - 57 > 0xFFFFFFF7)
      {
        v27 = v187.__r_.__value_.__s.__data_[2];
        goto LABEL_43;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unrecognizable weight name");
  }
  if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v16 = &v187;
    switch(*((_BYTE *)&v187.__r_.__value_.__s + 23))
    {
      case 2:
        data_low = LOWORD(v187.__r_.__value_.__l.__data_);
        goto LABEL_15;
      case 4:
        data_low = (int)v187.__r_.__value_.__l.__data_;
        goto LABEL_25;
      case 9:
        if (v187.__r_.__value_.__r.__words[0] != 0x616D6E696D5F3857 || v187.__r_.__value_.__s.__data_[8] != 120)
          goto LABEL_34;
        goto LABEL_49;
      case 0xA:
        goto LABEL_29;
      default:
        goto LABEL_34;
    }
  }
  switch(v187.__r_.__value_.__l.__size_)
  {
    case 2uLL:
      data_low = *(unsigned __int16 *)v187.__r_.__value_.__l.__data_;
LABEL_15:
      v18 = 14423;
      goto LABEL_26;
    case 4uLL:
      data_low = *(_DWORD *)v187.__r_.__value_.__l.__data_;
LABEL_25:
      v18 = 947216215;
LABEL_26:
      if (data_low == v18)
        MEMORY[0x19401C808](&v187, "W_U8");
      goto LABEL_34;
    case 9uLL:
      v20 = *(unsigned __int8 *)(v187.__r_.__value_.__r.__words[0] + 8);
      v21 = *(_QWORD *)v187.__r_.__value_.__l.__data_ == 0x616D6E696D5F3857;
      v22 = 120;
      goto LABEL_30;
    case 0xAuLL:
      v16 = (std::string *)v187.__r_.__value_.__r.__words[0];
LABEL_29:
      v23 = v16->__r_.__value_.__r.__words[0];
      v20 = LOWORD(v16->__r_.__value_.__r.__words[1]);
      v21 = v23 == 0x6E61725F38755F71;
      v22 = 25959;
LABEL_30:
      if (!v21 || v20 != v22)
        goto LABEL_34;
LABEL_49:
      if (8 * (int)v14 != a8)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching legacy ranges size %d != %d", a8, 8 * (int)v14);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&buf, v14, 1, 1, 1);
      v42 = a1 + 80;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 80, &buf);
      v43 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&buf, v14, 1, 1, 1);
      v46 = a1 + 96;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v46, &buf);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if ((int)v14 >= 1)
      {
        v50 = 0;
        v51 = *(_QWORD *)(*(_QWORD *)v42 + 16);
        v52 = *(_QWORD *)(*(_QWORD *)v46 + 16);
        do
        {
          v53 = *(float *)&a7[v50];
          *(float *)(v51 + v50) = (float)(*(float *)&a7[4 * v14 + v50] - v53) / 255.0;
          *(float *)(v52 + v50) = v53;
          v50 += 4;
        }
        while (4 * v14 != v50);
      }
      break;
    default:
      goto LABEL_34;
  }
LABEL_174:
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  v108 = v189;
  if (v189)
  {
    v109 = (unint64_t *)&v189->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
}

void sub_190E9A2E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::inner_product_kernel_cpu::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 688), *a2, a2[1]);
}

_QWORD *Espresso::inner_product_kernel_cpu::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), *a2, a2[1]);
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  int v15;
  int v16;

  v16 = a4;
  v14 = xmmword_191A761E0;
  v15 = 4;
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E9A4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::transpose_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *__p[2];
  char v38;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2);
    if (v38 < 0)
      operator delete(__p[0]);
    v5 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 1);
    if (v38 < 0)
      operator delete(__p[0]);
    v8 = v36;
    if (v36)
    {
      v9 = (unint64_t *)&v36->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 2);
    if (v38 < 0)
      operator delete(__p[0]);
    v11 = v36;
    if (v36)
    {
      v12 = (unint64_t *)&v36->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 3);
    if (v38 < 0)
      operator delete(__p[0]);
    v14 = v36;
    if (v36)
    {
      v15 = (unint64_t *)&v36->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 4);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v18 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_95;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v20 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v23 = v36;
    if (v36)
    {
      v24 = (unint64_t *)&v36->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v26 = v36;
    if (v36)
    {
      v27 = (unint64_t *)&v36->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v29 = v36;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[4] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v32);
      while (__stlxr(v19 - 1, v32));
LABEL_95:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
}

void sub_190E9AB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_get_size(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCDF80;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190E9AC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso17ANECompilerEngine37current_ane_arch_with_subtype_variantEv_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CFDF48], "aneSubTypeVariant");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "uppercaseString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::aneSubtypeStrVariant;
  Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::aneSubtypeStrVariant = v0;

}

void sub_190E9ACE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine16current_ane_archEv_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CFDF48], "aneSubType");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "uppercaseString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)Espresso::ANECompilerEngine::current_ane_arch(void)::aneSubtypeStr;
  Espresso::ANECompilerEngine::current_ane_arch(void)::aneSubtypeStr = v0;

}

void sub_190E9AD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  __int128 v15;
  __int16 v16;
  int v17;
  int v18;

  v18 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v15 = xmmword_191A93460;
  v16 = 1;
  v17 = 1;
  Espresso::SerDes::params_io<Espresso::reshape_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E9AE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::reshape_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  void *v69[2];
  char v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  void *__p[2];
  char v74;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v69, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 160))(v71, __p, a2 + 24);
    if (v74 < 0)
      operator delete(__p[0]);
    v5 = v72;
    if (v72)
    {
      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 160))(v71, __p, a2);
    if (v74 < 0)
      operator delete(__p[0]);
    v8 = v72;
    if (v72)
    {
      v9 = (unint64_t *)&v72->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 160))(v71, __p, a2 + 4);
    if (v74 < 0)
      operator delete(__p[0]);
    v11 = v72;
    if (v72)
    {
      v12 = (unint64_t *)&v72->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 160))(v71, __p, a2 + 8);
    if (v74 < 0)
      operator delete(__p[0]);
    v14 = v72;
    if (v72)
    {
      v15 = (unint64_t *)&v72->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 160))(v71, __p, a2 + 12);
    if (v74 < 0)
      operator delete(__p[0]);
    v17 = v72;
    if (v72)
    {
      v18 = (unint64_t *)&v72->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 160))(v71, __p, a2 + 16);
    if (v74 < 0)
      operator delete(__p[0]);
    v20 = v72;
    if (v72)
    {
      v21 = (unint64_t *)&v72->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    if (*(_DWORD *)(a2 + 20) != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "dst_nd_rank");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 160))(v71, __p, a2 + 20);
      if (v74 < 0)
        operator delete(__p[0]);
      v23 = v72;
      if (v72)
      {
        v24 = (unint64_t *)&v72->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_DWORD *)(a2 + 28))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "nd_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 160))(v71, __p, a2 + 28);
      if (v74 < 0)
        operator delete(__p[0]);
      v26 = v72;
      if (v72)
      {
        v27 = (unint64_t *)&v72->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (!*(_BYTE *)(a2 + 32))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "dynamic_shape");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 208))(v71, __p, a2 + 32);
      if (v74 < 0)
        operator delete(__p[0]);
      v29 = v72;
      if (v72)
      {
        v30 = (unint64_t *)&v72->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_BYTE *)(a2 + 33))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "rank_preserving_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 208))(v71, __p, a2 + 33);
      if (v74 < 0)
        operator delete(__p[0]);
      v32 = v72;
      if (v72)
      {
        v33 = (unint64_t *)&v72->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v69, "version");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v71 + 160))(v71, __p, a2 + 36);
    if (v74 < 0)
      operator delete(__p[0]);
    v35 = v72;
    if (v72)
    {
      v36 = (unint64_t *)&v72->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      goto LABEL_219;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v69, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v38 = v72;
    if (v72)
    {
      v39 = (unint64_t *)&v72->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v41 = v72;
    if (v72)
    {
      v42 = (unint64_t *)&v72->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v44 = v72;
    if (v72)
    {
      v45 = (unint64_t *)&v72->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v47 = v72;
    if (v72)
    {
      v48 = (unint64_t *)&v72->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v50 = v72;
    if (v72)
    {
      v51 = (unint64_t *)&v72->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v53 = v72;
    if (v72)
    {
      v54 = (unint64_t *)&v72->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dst_nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v56 = v72;
    if (v72)
    {
      v57 = (unint64_t *)&v72->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v59 = v72;
    if (v72)
    {
      v60 = (unint64_t *)&v72->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "dynamic_shape");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_BYTE *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 88))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v62 = v72;
    if (v72)
    {
      v63 = (unint64_t *)&v72->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "rank_preserving_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_BYTE *)(a2 + 33) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 88))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v65 = v72;
    if (v72)
    {
      v66 = (unint64_t *)&v72->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "version");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, &v71);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v71 + 24))(v71, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v71 + 40))(v71, __p);
    if (v74 < 0)
      operator delete(__p[0]);
    v35 = v72;
    if (v72)
    {
      v68 = (unint64_t *)&v72->__shared_owners_;
      do
        v37 = __ldaxr(v68);
      while (__stlxr(v37 - 1, v68));
LABEL_219:
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  if (v70 < 0)
    operator delete(v69[0]);
}

void sub_190E9BCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZL9GetChipIDv_block_invoke()
{
  uint64_t result;

  result = MGGetSInt64Answer();
  GetChipID(void)::chipID = result;
  return result;
}

void Espresso::generic_convolution_kernel::create_biases_blob(Espresso::generic_convolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  int v6;

  v4 = *((_DWORD *)this + 86);
  if (*((_DWORD *)this + 104))
  {
    v5 = 4 * v4;
    v4 = *((_DWORD *)this + 106);
    if (v4 <= 1)
      v4 = 1;
  }
  else
  {
    v6 = *((_DWORD *)this + 106);
    if (v6 <= 1)
      v5 = 1;
    else
      v5 = v6;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, v5 * v4, 1, 1, 1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  __int16 v15;
  int v16;

  v16 = a4;
  v14 = 2;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E9BED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::general_concat_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v16 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_BYTE *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "interleave");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_BYTE *)(a2 + 5) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_59;
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
    goto LABEL_57;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "axis");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, a2);
  if (v28 < 0)
    operator delete(__p[0]);
  v5 = v26;
  if (v26)
  {
    v6 = (unint64_t *)&v26->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v24 < 0)
    operator delete(v23[0]);
  if (*(_BYTE *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, a2 + 4);
    if (v28 < 0)
      operator delete(__p[0]);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v12 = *(unsigned __int8 *)(a2 + 5);
  v11 = a2 + 5;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "interleave");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_59;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_57:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_59:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_190E9C2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double ___Z24initialize_static_memoryv_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  initialize_static_memory(void)::initializeMutex = v0;
  return result;
}

uint64_t Espresso::dev_op_params_t::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v3;
  if ((uint64_t *)a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a1 + 64));
  }
  else
  {
    std::vector<Espresso::dev_op_params_t::shape>::__assign_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>((char *)(a1 + 16), (char *)a2[2], a2[3], 0xAAAAAAAAAAAAAAABLL * ((a2[3] - a2[2]) >> 3));
    std::vector<Espresso::dev_op_params_t::shape>::__assign_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>((char *)(a1 + 40), (char *)a2[5], a2[6], 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 3));
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 8));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 88, (std::string *)a2[11], (std::string *)a2[12], 0xAAAAAAAAAAAAAAABLL * ((a2[12] - a2[11]) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 112, (std::string *)a2[14], (std::string *)a2[15], 0xAAAAAAAAAAAAAAABLL * ((a2[15] - a2[14]) >> 3));
  }
  return a1;
}

void Espresso::SerDes::params_io<Espresso::dev_op_params_t>(void *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __n128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  int v41;
  int v42;
  void **v43;
  void *v44[2];
  char v45;
  void *v46[2];
  void *__p[2];
  char v48;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "platform");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v46[0] + 24))(v46[0], __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v46[0] + 40))(v46[0], __p);
    if (v48 < 0)
      operator delete(__p[0]);
    v12 = (std::__shared_weak_count *)v46[1];
    if (v46[1])
    {
      v13 = (unint64_t *)((char *)v46[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v45 < 0)
      operator delete(v44[0]);
    std::string::basic_string[abi:ne180100]<0>(v44, "id");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v46[0] + 24))(v46[0], __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v46[0] + 40))(v46[0], __p);
    if (v48 < 0)
      operator delete(__p[0]);
    v15 = (std::__shared_weak_count *)v46[1];
    if (v46[1])
    {
      v16 = (unint64_t *)((char *)v46[1] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v45 < 0)
      operator delete(v44[0]);
    std::string::basic_string[abi:ne180100]<0>(v44, "model_assets_url");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
    v18.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v46, a2 + 64);
    if (v48 < 0)
      operator delete(__p[0]);
    v19 = (std::__shared_weak_count *)v46[1];
    if (v46[1])
    {
      v20 = (unint64_t *)((char *)v46[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, v18);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v45 < 0)
      operator delete(v44[0]);
    std::string::basic_string[abi:ne180100]<0>(v44, "is_mil_value_inference");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v46[0] + 24))(v46[0], __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v46[0] + 40))(v46[0], __p);
    if (v48 < 0)
      operator delete(__p[0]);
    v22 = (std::__shared_weak_count *)v46[1];
    if (v46[1])
    {
      v23 = (unint64_t *)((char *)v46[1] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v45 < 0)
      operator delete(v44[0]);
    std::string::basic_string[abi:ne180100]<0>(v44, "non_default_input_names");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v46, (std::vector<std::string> *)(a2 + 88));
    if (v48 < 0)
      operator delete(__p[0]);
    v25 = (std::__shared_weak_count *)v46[1];
    if (v46[1])
    {
      v26 = (unint64_t *)((char *)v46[1] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v45 < 0)
      operator delete(v44[0]);
    std::string::basic_string[abi:ne180100]<0>(v44, "non_default_output_names");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v46, (std::vector<std::string> *)(a2 + 112));
    if (v48 < 0)
      operator delete(__p[0]);
    v28 = (std::__shared_weak_count *)v46[1];
    if (!v46[1])
      goto LABEL_117;
    v29 = (unint64_t *)((char *)v46[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    goto LABEL_115;
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "platform");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
  (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v46[0] + 160))(v46[0], __p, a2);
  if (v48 < 0)
    operator delete(__p[0]);
  v6 = (std::__shared_weak_count *)v46[1];
  if (v46[1])
  {
    v7 = (unint64_t *)((char *)v46[1] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v45 < 0)
    operator delete(v44[0]);
  std::string::basic_string[abi:ne180100]<0>(v44, "id");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
  (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v46[0] + 160))(v46[0], __p, a2 + 4);
  if (v48 < 0)
    operator delete(__p[0]);
  v9 = (std::__shared_weak_count *)v46[1];
  if (v46[1])
  {
    v10 = (unint64_t *)((char *)v46[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v45 < 0)
    operator delete(v44[0]);
  if (*(char *)(a2 + 87) < 0)
  {
    if (!*(_QWORD *)(a2 + 72))
      goto LABEL_90;
  }
  else if (!*(_BYTE *)(a2 + 87))
  {
    goto LABEL_90;
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "model_assets_url");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
  (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v46[0] + 232))(v46[0], __p, a2 + 64);
  if (v48 < 0)
    operator delete(__p[0]);
  v31 = (std::__shared_weak_count *)v46[1];
  if (v46[1])
  {
    v32 = (unint64_t *)((char *)v46[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v45 < 0)
    operator delete(v44[0]);
LABEL_90:
  std::string::basic_string[abi:ne180100]<0>(v44, "is_mil_value_inference");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
  (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v46[0] + 160))(v46[0], __p, a2 + 8);
  if (v48 < 0)
    operator delete(__p[0]);
  v34 = (std::__shared_weak_count *)v46[1];
  if (v46[1])
  {
    v35 = (unint64_t *)((char *)v46[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v45 < 0)
    operator delete(v44[0]);
  if (*(_QWORD *)(a2 + 88) != *(_QWORD *)(a2 + 96))
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "non_default_input_names");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v46[0] + 272))(v46[0], __p, a2 + 88);
    if (v48 < 0)
      operator delete(__p[0]);
    v37 = (std::__shared_weak_count *)v46[1];
    if (v46[1])
    {
      v38 = (unint64_t *)((char *)v46[1] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v45 < 0)
      operator delete(v44[0]);
  }
  if (*(_QWORD *)(a2 + 112) != *(_QWORD *)(a2 + 120))
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "non_default_output_names");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v44, v46);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v46[0] + 272))(v46[0], __p, a2 + 112);
    if (v48 < 0)
      operator delete(__p[0]);
    v28 = (std::__shared_weak_count *)v46[1];
    if (!v46[1])
      goto LABEL_117;
    v40 = (unint64_t *)((char *)v46[1] + 8);
    do
      v30 = __ldaxr(v40);
    while (__stlxr(v30 - 1, v40));
LABEL_115:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_117:
    if (v45 < 0)
      operator delete(v44[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v46, "mil_program");
  v41 = (*(uint64_t (**)(void *, void **))(*(_QWORD *)a1 + 24))(a1, v46);
  v42 = v41;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v46[0]);
    if (!v42)
      goto LABEL_126;
  }
  else if (!v41)
  {
    goto LABEL_126;
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "mil_program");
  (*(void (**)(void **__return_ptr, void *, void **))(*(_QWORD *)a1 + 112))(v46, a1, v44);
  v43 = (void **)(a2 + 64);
  if (*(char *)(a2 + 87) < 0)
    operator delete(*v43);
  *(_OWORD *)v43 = *(_OWORD *)v46;
  *(void **)(a2 + 80) = __p[0];
  HIBYTE(__p[0]) = 0;
  LOBYTE(v46[0]) = 0;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (a3)
      goto LABEL_127;
    goto LABEL_131;
  }
LABEL_126:
  if (a3)
  {
LABEL_127:
    v44[0] = a1;
    std::string::basic_string[abi:ne180100]<0>(v46, "bottom_shapes");
    Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_0::operator()(v44, (uint64_t)v46, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v46[0]);
    std::string::basic_string[abi:ne180100]<0>(v46, "top_shapes");
    Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_0::operator()(v44, (uint64_t)v46, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
    goto LABEL_134;
  }
LABEL_131:
  std::string::basic_string[abi:ne180100]<0>(v46, "bottom_shapes");
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_1::operator()((uint64_t)a1, (uint64_t)v46, a2 + 16);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v46[0]);
  std::string::basic_string[abi:ne180100]<0>(v46, "top_shapes");
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_1::operator()((uint64_t)a1, (uint64_t)v46, a2 + 40);
LABEL_134:
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v46[0]);
}

void sub_190E9CD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy((void **)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  __int128 v38;
  void *v39[2];
  char v40;
  void **v41;
  std::__shared_weak_count *v42;
  void *__p[2];
  char v44;
  uint64_t *v45;
  uint64_t *v46;

  (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)a1 + 128))(&v45);
  v4 = v45;
  for (i = v46; v4 != i; v4 += 2)
  {
    v6 = *v4;
    std::string::basic_string[abi:ne180100]<0>(v39, "n");
    Espresso::SerDes::generic_serdes_object::operator[](v6, (uint64_t)v39, &v41);
    if ((*((unsigned int (**)(void **, void **))*v41 + 3))(v41, __p))
      v7 = (*((uint64_t (**)(void **, void **))*v41 + 5))(v41, __p);
    else
      v7 = 1;
    if (v44 < 0)
      operator delete(__p[0]);
    v8 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v40 < 0)
      operator delete(v39[0]);
    std::string::basic_string[abi:ne180100]<0>(v39, "k");
    Espresso::SerDes::generic_serdes_object::operator[](v6, (uint64_t)v39, &v41);
    if ((*((unsigned int (**)(void **, void **))*v41 + 3))(v41, __p))
      v11 = (*((uint64_t (**)(void **, void **))*v41 + 5))(v41, __p);
    else
      v11 = 1;
    if (v44 < 0)
      operator delete(__p[0]);
    v12 = v42;
    if (v42)
    {
      v13 = (unint64_t *)&v42->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v40 < 0)
      operator delete(v39[0]);
    std::string::basic_string[abi:ne180100]<0>(v39, "h");
    Espresso::SerDes::generic_serdes_object::operator[](v6, (uint64_t)v39, &v41);
    if ((*((unsigned int (**)(void **, void **))*v41 + 3))(v41, __p))
      v15 = (*((uint64_t (**)(void **, void **))*v41 + 5))(v41, __p);
    else
      v15 = 1;
    if (v44 < 0)
      operator delete(__p[0]);
    v16 = v42;
    if (v42)
    {
      v17 = (unint64_t *)&v42->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v40 < 0)
      operator delete(v39[0]);
    std::string::basic_string[abi:ne180100]<0>(v39, "w");
    Espresso::SerDes::generic_serdes_object::operator[](v6, (uint64_t)v39, &v41);
    if ((*((unsigned int (**)(void **, void **))*v41 + 3))(v41, __p))
      v19 = (*((uint64_t (**)(void **, void **))*v41 + 5))(v41, __p);
    else
      v19 = 1;
    if (v44 < 0)
      operator delete(__p[0]);
    v20 = v42;
    if (v42)
    {
      v21 = (unint64_t *)&v42->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v40 < 0)
      operator delete(v39[0]);
    std::string::basic_string[abi:ne180100]<0>(v39, "_rank");
    Espresso::SerDes::generic_serdes_object::operator[](v6, (uint64_t)v39, &v41);
    if ((*((unsigned int (**)(void **, void **))*v41 + 3))(v41, __p))
      v23 = (*((uint64_t (**)(void **, void **))*v41 + 5))(v41, __p);
    else
      v23 = -1;
    if (v44 < 0)
      operator delete(__p[0]);
    v24 = v42;
    if (v42)
    {
      v25 = (unint64_t *)&v42->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v40 < 0)
      operator delete(v39[0]);
    v28 = *(_DWORD **)(a3 + 8);
    v27 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v28 >= v27)
    {
      v30 = *(_DWORD **)a3;
      v31 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - *(_QWORD *)a3) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (_QWORD)v30) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x555555555555555)
        v34 = 0xAAAAAAAAAAAAAAALL;
      else
        v34 = v32;
      if (v34)
      {
        v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v34);
        v30 = *(_DWORD **)a3;
        v28 = *(_DWORD **)(a3 + 8);
      }
      else
      {
        v35 = 0;
      }
      v36 = (_DWORD *)(v34 + 24 * v31);
      *v36 = 1;
      v36[1] = v7;
      v36[2] = v11;
      v36[3] = v15;
      v36[4] = v19;
      v36[5] = v23;
      v37 = v36;
      if (v28 != v30)
      {
        do
        {
          v38 = *(_OWORD *)(v28 - 6);
          *((_QWORD *)v37 - 1) = *((_QWORD *)v28 - 1);
          *(_OWORD *)(v37 - 6) = v38;
          v37 -= 6;
          v28 -= 6;
        }
        while (v28 != v30);
        v30 = *(_DWORD **)a3;
      }
      v29 = v36 + 6;
      *(_QWORD *)a3 = v37;
      *(_QWORD *)(a3 + 8) = v36 + 6;
      *(_QWORD *)(a3 + 16) = v34 + 24 * v35;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v28 = 1;
      v28[1] = v7;
      v28[2] = v11;
      v28[3] = v15;
      v29 = v28 + 6;
      v28[4] = v19;
      v28[5] = v23;
    }
    *(_QWORD *)(a3 + 8) = v29;
  }
  v41 = (void **)&v45;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v41);
}

void sub_190E9D2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a16 = &a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(_QWORD *a1, std::vector<std::string> *a2)
{
  _QWORD *v4;
  __int128 v5;
  std::string *v6;
  void **v7;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 152))(&v5, *a1, v4);
    std::vector<std::string>::__vdeallocate(a2);
    *(_OWORD *)&a2->__begin_ = v5;
    a2->__end_cap_.__value_ = v6;
    v6 = 0;
    v5 = 0uLL;
    v7 = (void **)&v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(_QWORD *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8D48;
  Espresso::ANECompilerEngine::general_concat_kernel::general_concat_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D6D048;
  v6[39] = &unk_1E2D6D1A8;
  *((_BYTE *)v6 + 521) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190E9D450(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::general_concat_kernel::general_concat_kernel(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  char v6;
  double result;
  int v12;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 2;
  *(_WORD *)(v5 + 284) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_BYTE *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_BYTE *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(_BYTE *)(v5 + 476) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_BYTE *)(v5 + 496) = v6;
  *(_QWORD *)v5 = &off_1E2D79FC8;
  *(_QWORD *)(v5 + 288) = &unk_1E2D7A128;
  v12 = *a3;
  *(_WORD *)(v5 + 284) = *((_WORD *)a3 + 2);
  *(_DWORD *)(v5 + 280) = v12;
  return result;
}

uint64_t espresso_tmp_enable_montreal(int a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v19;
  void (***v20)(_QWORD);
  std::__shared_weak_count *v21;
  void (***v22)(_QWORD);
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  Espresso::abstract_engine_factory::shared(&v24);
  LODWORD(v20) = 0;
  Espresso::abstract_engine_factory::shared(&v26);
  Espresso::abstract_engine_factory::engine_for_platform(v26, (int *)&v20, &v22);
  v2 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v19 = 80000;
  Espresso::abstract_engine_factory::shared(&v26);
  Espresso::abstract_engine_factory::engine_for_platform(v26, &v19, &v20);
  v5 = v27;
  if (v27)
  {
    v6 = (unint64_t *)&v27->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v24;
  if (a1)
  {
    Espresso::abstract_engine_factory::register_kernel_class(v24, "rnn_arch", v22, &__block_literal_global_1769);
    Espresso::abstract_engine_factory::register_kernel_class(v8, "rnn_arch", v20, &__block_literal_global_1769);
  }
  else
  {
    Espresso::abstract_engine_factory::register_kernel_class(v24, "rnn_arch", v22, &__block_literal_global_37);
    Espresso::abstract_engine_factory::register_kernel_class(v8, "rnn_arch", v20, &__block_literal_global_38_1771);
  }
  v9 = v21;
  if (v21)
  {
    v10 = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_190E9D714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int16 v14;
  char v15;
  int v16;

  v16 = a4;
  v14 = 1;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_matmul");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190E9D848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(uint64_t a1, _BYTE *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (!a3 || *a2)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "channel_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v16 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v24 < 0)
        operator delete(v23[0]);
      std::string::basic_string[abi:ne180100]<0>(v23, "transpose_x");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v19 = v26;
      if (v26)
      {
        v20 = (unint64_t *)&v26->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v24 < 0)
        operator delete(v23[0]);
      std::string::basic_string[abi:ne180100]<0>(v23, "transpose_y");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v13 = v26;
      if (!v26)
        goto LABEL_61;
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldaxr(v22);
      while (__stlxr(v15 - 1, v22));
      goto LABEL_59;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "channel_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v25 + 208))(v25, __p, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v5 = v26;
    if (v26)
    {
      v6 = (unint64_t *)&v26->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  if (a2[1])
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "transpose_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v25 + 208))(v25, __p, a2 + 1);
    if (v28 < 0)
      operator delete(__p[0]);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v12 = a2[2];
  v11 = a2 + 2;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "transpose_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v25 + 208))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_61;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_59:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_61:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_190E9DC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_buffer_object_alloc(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DCC5E0;
  v6[1] = a1;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190E9DDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::net_compiler_segment_based::identify_segments(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  _BOOL4 v17;
  BOOL v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  Espresso *v23;
  const char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  NSObject *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  const char *v52;
  NSObject *v53;
  Espresso *v54;
  const char *v55;
  uint64_t *v56;
  NSObject *v57;
  _BYTE *v58;
  uint64_t *v59;
  NSObject *v60;
  _BYTE *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  BOOL v75;
  _QWORD *v76;
  int v77;
  std::runtime_error *exception;
  int64x2_t *v79;
  _QWORD v80[2];
  _BYTE lpsrc[22];
  _BYTE buf[32];
  __int128 v83;
  int v84;
  _BYTE v85[32];
  int v86;
  void *__p;
  void *v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v79 = (int64x2_t *)(a1 + 32);
  for (i = *(_QWORD *)(a1 + 40);
        i != v4;
        std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](i))
  {
    i -= 120;
  }
  *(_QWORD *)(a1 + 40) = v4;
  v6 = (_QWORD *)*a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 + 16) + 124))
  {
    v7 = v6[157];
    if (v7)
    {
      if (*(_BYTE *)(v7 + 124))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Two compilers present");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
  }
  v8 = v6[4];
  if (v6[5] != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(v8 + 16 * v10);
      v12 = *(const void **)(v11 + 64);
      v13 = *(std::__shared_weak_count **)(v11 + 72);
      *(_QWORD *)lpsrc = v12;
      *(_QWORD *)&lpsrc[8] = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      if (v12)
      {
        v17 = v16 != 0;
        if (v16)
          v18 = v13 == 0;
        else
          v18 = 1;
        if (!v18)
        {
          v19 = (unint64_t *)&v13->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          do
            v21 = __ldaxr(v19);
          while (__stlxr(v21 - 1, v19));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
          v17 = 1;
        }
      }
      else
      {
        v17 = 0;
      }
      v22 = *(_QWORD *)(*(_QWORD *)lpsrc + 8) == *(_QWORD *)(*a2 + 16);
      if (v23 && (v25 = *(std::__shared_weak_count **)&lpsrc[8]) != 0)
      {
        v26 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        v29 = 1;
      }
      else if (v23)
      {
        v29 = 1;
      }
      else
      {
        v29 = v17;
      }
      v30 = *(_QWORD *)(*a2 + 32);
      v31 = *(_QWORD *)(*a2 + 40);
      if (((v9 | !v22) & 1) == 0)
      {
        *(_OWORD *)&buf[16] = 0u;
        v83 = 0u;
        memset(v85, 0, sizeof(v85));
        v84 = 1065353216;
        v86 = 1065353216;
        v88 = 0;
        v89 = 0;
        __p = 0;
        *(_QWORD *)buf = v10 + v29;
        *(_QWORD *)&buf[8] = *(_QWORD *)buf + 1;
        v32 = *(_QWORD *)(a1 + 40);
        if (v32 >= *(_QWORD *)(a1 + 48))
        {
          v33 = std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t const&>(v79, (uint64_t)buf);
        }
        else
        {
          std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t const&>(*(_OWORD **)(a1 + 40), (uint64_t)buf);
          v33 = v32 + 120;
          *(_QWORD *)(a1 + 40) = v32 + 120;
        }
        *(_QWORD *)(a1 + 40) = v33;
        if (__p)
        {
          v88 = __p;
          operator delete(__p);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v85);
        v23 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf[16]);
        v9 = 1;
      }
      v34 = ((v31 - v30) >> 4) - 1;
      if ((v9 & 1) != 0 && (!v22 || v10 == v34))
      {
        v35 = v10 == v34;
        if (!v22)
          v35 = v29;
        if (!v35)
        {
          Espresso::espresso_os_log_subsystem(v23, v24);
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&buf[4] = v29;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v22;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = v10 == v34;
            *(_WORD *)&buf[20] = 2048;
            *(_QWORD *)&buf[22] = v10;
            _os_log_error_impl(&dword_190DAF000, v36, OS_LOG_TYPE_ERROR, "identify_segments, logic error: is_context_transfer=%d is_default_context_layer=%d is_last_layer=%d ilayer=%zu", buf, 0x1Eu);
          }

        }
        v37 = *(_QWORD *)(a1 + 40);
        v39 = *(_QWORD *)(v37 - 120);
        v38 = (unint64_t *)(v37 - 120);
        v40 = v10 + (v29 ^ 1);
        v38[1] = v40;
        if (v40 >= v39)
        {
          v41 = (std::__shared_weak_count *)a2[1];
          v80[0] = *a2;
          v80[1] = v41;
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          Espresso::net_compiler_segment_based::identify_segment_input_output((uint64_t)v23, (uint64_t)v80, v38);
          if (v41)
          {
            v44 = (unint64_t *)&v41->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v9 = 0;
        }
        else
        {
          std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100]((uint64_t)v38);
          v9 = 0;
          *(_QWORD *)(a1 + 40) = v38;
        }
      }
      v46 = *(std::__shared_weak_count **)&lpsrc[8];
      if (*(_QWORD *)&lpsrc[8])
      {
        v47 = (unint64_t *)(*(_QWORD *)&lpsrc[8] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      ++v10;
      v6 = (_QWORD *)*a2;
      v8 = *(_QWORD *)(*a2 + 32);
    }
    while (v10 < (*(_QWORD *)(*a2 + 40) - v8) >> 4);
    v4 = *(_QWORD *)(a1 + 40);
  }
  v49 = v79->i64[0];
  if (v4 != v79->i64[0])
  {
    v50 = 0;
    do
    {
      v51 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 56), *(_QWORD *)(v49 + 120 * v50), (uint64_t *)(v49 + 120 * v50));
      v51[5] = v50;
      Espresso::espresso_os_log_subsystem((Espresso *)v51, v52);
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        v62 = (uint64_t *)(v79->i64[0] + 120 * v50);
        v64 = *v62;
        v63 = v62[1];
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v50;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v64;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v63;
        _os_log_debug_impl(&dword_190DAF000, v53, OS_LOG_TYPE_DEBUG, "identify_segments: isegment %zu (%zu %zu)", buf, 0x20u);
      }

      v49 = v79->i64[0];
      v56 = *(uint64_t **)(v79->i64[0] + 120 * v50 + 32);
      if (v56)
      {
        do
        {
          if (*((char *)v56 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v56[2], v56[3]);
          }
          else
          {
            *(_OWORD *)buf = *((_OWORD *)v56 + 1);
            *(_QWORD *)&buf[16] = v56[4];
          }
          Espresso::espresso_os_log_subsystem(v54, v55);
          v57 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
          {
            if (buf[23] >= 0)
              v58 = buf;
            else
              v58 = *(_BYTE **)buf;
            *(_DWORD *)lpsrc = 134218242;
            *(_QWORD *)&lpsrc[4] = v50;
            *(_WORD *)&lpsrc[12] = 2080;
            *(_QWORD *)&lpsrc[14] = v58;
            _os_log_debug_impl(&dword_190DAF000, v57, OS_LOG_TYPE_DEBUG, "\tinput %zu %s", lpsrc, 0x16u);
          }

          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v56 = (uint64_t *)*v56;
        }
        while (v56);
        v49 = v79->i64[0];
      }
      v59 = *(uint64_t **)(v49 + 120 * v50 + 72);
      if (v59)
      {
        do
        {
          if (*((char *)v59 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v59[2], v59[3]);
          }
          else
          {
            *(_OWORD *)buf = *((_OWORD *)v59 + 1);
            *(_QWORD *)&buf[16] = v59[4];
          }
          Espresso::espresso_os_log_subsystem(v54, v55);
          v60 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            if (buf[23] >= 0)
              v61 = buf;
            else
              v61 = *(_BYTE **)buf;
            *(_DWORD *)lpsrc = 134218242;
            *(_QWORD *)&lpsrc[4] = v50;
            *(_WORD *)&lpsrc[12] = 2080;
            *(_QWORD *)&lpsrc[14] = v61;
            _os_log_debug_impl(&dword_190DAF000, v60, OS_LOG_TYPE_DEBUG, "\toutput %zu %s", lpsrc, 0x16u);
          }

          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v59 = (uint64_t *)*v59;
        }
        while (v59);
        v49 = v79->i64[0];
      }
      ++v50;
    }
    while (v50 < 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 40) - v49) >> 3));
    v6 = (_QWORD *)*a2;
  }
  std::vector<int>::resize((std::vector<int> *)(a1 + 80), (uint64_t)(v6[5] - v6[4]) >> 4);
  v65 = *(_QWORD *)(*a2 + 40) - *(_QWORD *)(*a2 + 32);
  if (v65)
  {
    v66 = 0;
    v67 = v65 >> 4;
    v70 = *(_QWORD **)(a1 + 64);
    v69 = (_QWORD *)(a1 + 64);
    v68 = v70;
    if (v67 <= 1)
      v67 = 1;
    v71 = v69[2];
    do
    {
      if (!v68)
        goto LABEL_115;
      v72 = v69;
      v73 = v68;
      do
      {
        v74 = v73[4];
        v75 = v74 >= v66;
        if (v74 >= v66)
          v76 = v73;
        else
          v76 = v73 + 1;
        if (v75)
          v72 = v73;
        v73 = (_QWORD *)*v76;
      }
      while (*v76);
      if (v72 != v69 && v66 >= v72[4])
        v77 = *((_DWORD *)v72 + 10);
      else
LABEL_115:
        v77 = -1;
      *(_DWORD *)(v71 + 4 * v66++) = v77;
    }
    while (v66 != v67);
  }
}

void sub_190E9E5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t Espresso::net_compiler_segment_based::identify_segment_input_output(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string __p;
  char v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _OWORD v45[2];
  int v46;
  _OWORD v47[2];
  int v48;

  memset(v47, 0, sizeof(v47));
  v48 = 1065353216;
  memset(v45, 0, sizeof(v45));
  v46 = 1065353216;
  v42 = 0u;
  v43 = 0u;
  v44 = 1065353216;
  v5 = a3[1];
  v41 = *a3;
  if (v41 < v5)
  {
    do
    {
      v6 = *(_QWORD *)a2 + 96;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
      v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v6, &v41, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
      v8 = v7[3];
      v9 = v7[4];
      while (v8 != v9)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v47, v8, v8);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v42, v8, v8);
        v8 += 24;
      }
      v10 = *(_QWORD *)a2 + 56;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
      v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v10, &v41, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
      v12 = v11[3];
      v13 = v11[4];
      while (v12 != v13)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v45, v12, v12);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v42, v12, v12);
        v12 += 24;
      }
      ++v41;
    }
    while (v41 < a3[1]);
    v14 = (_QWORD *)v43;
    if ((_QWORD)v43)
    {
      do
      {
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v47, (uint64_t)(v14 + 2)))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a3 + 2), (uint64_t)(v14 + 2), (uint64_t)(v14 + 2));
        v14 = (_QWORD *)*v14;
      }
      while (v14);
      v15 = (uint64_t *)v43;
      if ((_QWORD)v43)
      {
        while (1)
        {
          if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v45, (uint64_t)(v15 + 2))&& !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3 + 2, (uint64_t)(v15 + 2)))
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a3 + 7), (uint64_t)(v15 + 2), (uint64_t)(v15 + 2));
          }
          v16 = a3[1];
LABEL_18:
          v41 = v16;
          v17 = *(_QWORD **)a2;
          if (v16 < (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 40) - *(_QWORD *)(*(_QWORD *)a2 + 32)) >> 4)
            break;
          v15 = (uint64_t *)*v15;
          if (!v15)
            goto LABEL_44;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
        v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v17 + 7), &v41, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        v19 = v18[3];
        v20 = v18[4];
        while (1)
        {
          if (v19 == v20)
          {
            v16 = v41 + 1;
            goto LABEL_18;
          }
          v21 = *(unsigned __int8 *)(v19 + 23);
          if ((v21 & 0x80u) == 0)
            v22 = *(unsigned __int8 *)(v19 + 23);
          else
            v22 = *(_QWORD *)(v19 + 8);
          v23 = *((unsigned __int8 *)v15 + 39);
          v24 = (char)v23;
          if ((v23 & 0x80u) != 0)
            v23 = v15[3];
          if (v22 == v23)
          {
            if (v24 >= 0)
              v25 = (unsigned __int8 *)(v15 + 2);
            else
              v25 = (unsigned __int8 *)v15[2];
            if ((v21 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v19, v25, *(_QWORD *)(v19 + 8)))
                goto LABEL_39;
LABEL_37:
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3 + 2, (uint64_t)(v15 + 2)))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a3 + 7), (uint64_t)(v15 + 2), (uint64_t)(v15 + 2));
              goto LABEL_39;
            }
            if (!*(_BYTE *)(v19 + 23))
              goto LABEL_37;
            v26 = 0;
            while (*(unsigned __int8 *)(v19 + v26) == v25[v26])
            {
              if (v21 == ++v26)
                goto LABEL_37;
            }
          }
LABEL_39:
          v19 += 24;
        }
      }
    }
  }
  v17 = *(_QWORD **)a2;
LABEL_44:
  v27 = (_QWORD *)v17[35];
  v28 = v17 + 36;
  if (v27 != v17 + 36)
  {
    do
    {
      if (*((char *)v27 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v27[4], v27[5]);
      else
        __p = *(std::string *)(v27 + 4);
      v40 = *((_BYTE *)v27 + 56);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v42, (uint64_t)&__p))
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a3 + 2), (uint64_t)&__p, (uint64_t)&__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v29 = (_QWORD *)v27[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v27[2];
          v31 = *v30 == (_QWORD)v27;
          v27 = v30;
        }
        while (!v31);
      }
      v27 = v30;
    }
    while (v30 != v28);
    v17 = *(_QWORD **)a2;
  }
  v32 = (_QWORD *)v17[38];
  v33 = v17 + 39;
  if (v32 != v17 + 39)
  {
    v34 = a3 + 2;
    v35 = (uint64_t)(a3 + 7);
    do
    {
      if (*((char *)v32 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v32[4], v32[5]);
      else
        __p = *(std::string *)(v32 + 4);
      v40 = *((_BYTE *)v32 + 56);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v42, (uint64_t)&__p)&& !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v34, (uint64_t)&__p))
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v35, (uint64_t)&__p, (uint64_t)&__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v36 = (_QWORD *)v32[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v32[2];
          v31 = *v37 == (_QWORD)v32;
          v32 = v37;
        }
        while (!v31);
      }
      v32 = v37;
    }
    while (v37 != v33);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v42);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v45);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v47);
}

void sub_190E9EA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = *a3;
    v9[5] = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t std::__split_buffer<Espresso::net_compiler_segment_based::segment_t>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](i - 120);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::kernels_validation_status_t::restore(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19[2];
  char v20;
  void *__p;
  std::__shared_weak_count *v22;
  void *v23[2];
  char v24;
  _QWORD v25[3];
  _QWORD v26[3];

  v4 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "to_fallback");
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 128))(v26, v4, &__p);
  if (SHIBYTE(v23[0]) < 0)
    operator delete(__p);
  v5 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "visit_order");
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void **))(*(_QWORD *)v5 + 128))(v25, v5, &__p);
  if (SHIBYTE(v23[0]) < 0)
    operator delete(__p);
  v6 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "any_fallback");
  *(_BYTE *)(a1 + 120) = (*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, &__p) != 0;
  if (SHIBYTE(v23[0]) < 0)
    operator delete(__p);
  std::vector<int>::resize((std::vector<int> *)(a1 + 24), (uint64_t)(v25[1] - v25[0]) >> 4);
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v25[0] + 16 * v7);
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v19, &__p);
      v9 = *(_QWORD *)(a1 + 24);
      if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)__p + 24))(__p, v23))
        *(_DWORD *)(v9 + 4 * v7) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)__p + 40))(__p, v23);
      if (v24 < 0)
        operator delete(v23[0]);
      v10 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v20 < 0)
        operator delete(v19[0]);
      ++v7;
    }
    while (v7 < (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  }
  std::vector<int>::resize((std::vector<int> *)(a1 + 48), (uint64_t)(v26[1] - v26[0]) >> 4);
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
  {
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(v26[0] + 16 * v13);
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      Espresso::SerDes::generic_serdes_object::operator[](v14, (uint64_t)v19, &__p);
      v15 = *(_QWORD *)(a1 + 48);
      if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)__p + 24))(__p, v23))
        *(_DWORD *)(v15 + 4 * v13) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)__p + 40))(__p, v23);
      if (v24 < 0)
        operator delete(v23[0]);
      v16 = v22;
      if (v22)
      {
        v17 = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v20 < 0)
        operator delete(v19[0]);
      ++v13;
    }
    while (v13 < (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  }
  __p = v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = v26;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_190E9EEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a20 < 0)
    operator delete(__p);
  __p = &a23;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (char *)(v23 - 72);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<Device>::__append(this, __sz - v2);
  }
}

float Espresso::cpu_context_transfer_algo_t::assign_to_fallback_context_v2(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v8;
  std::vector<int> *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t PlatformHeuristics;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  char has_any_fallback;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  Espresso *v30;
  const char *v31;
  BOOL v32;
  NSObject *v33;
  int v34;
  float v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _OWORD *v42;
  char v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t i;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  _BOOL4 v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  void *v63;
  _BOOL4 v65;
  int v67;
  uint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  float v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::vector<int>::size_type v91;
  unint64_t v92;
  char *v93;
  std::vector<int>::pointer begin;
  double *v95;
  unint64_t v96;
  float v97;
  uint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  float v101;
  unint64_t *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v108;
  uint64_t *v109[2];
  uint64_t *v110[2];
  uint64_t *v111[2];
  uint64_t *v112[2];
  void *__p[2];
  char v114;
  void *v115[2];
  char v116;
  std::string v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  _OWORD *v125;
  uint64_t *v126[2];
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint8_t buf[8];
  std::__shared_weak_count *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v8 = 0x6DB6DB6DB6DB6DB7 * (((*a4)[1] - **a4) >> 5);
  v9 = (std::vector<int> *)(a1[7] + 48);
  std::vector<int>::resize(v9, (int)v8);
  if ((int)v8 >= 1)
    bzero(v9->__begin_, 4 * v8);
  v10 = *a4;
  *(_QWORD *)buf = 0;
  v130 = 0;
  v11 = (std::__shared_weak_count *)v10[10];
  if (v11)
  {
    v12 = std::__shared_weak_count::lock(v11);
    v130 = v12;
    if (v12)
      *(_QWORD *)buf = v10[9];
  }
  else
  {
    v12 = 0;
  }
  PlatformHeuristics = GetPlatformHeuristics((Espresso::net **)buf);
  v14 = PlatformHeuristics;
  if (!v12)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v14)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    if (PlatformHeuristics)
    {
LABEL_12:
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 160))(v14);
      goto LABEL_15;
    }
  }
  v17 = -1;
LABEL_15:
  v18 = (std::__shared_weak_count *)a2[1];
  v127 = *a2;
  v128 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = a4[1];
  v126[0] = *a4;
  v126[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 1);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  has_any_fallback = Espresso::cpu_context_transfer_algo_t::has_any_fallback((uint64_t)a1, (uint64_t)&v127, v126);
  if (v21)
  {
    v25 = (unint64_t *)(v21 + 1);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(uint64_t *))(*v21 + 16))(v21);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
    }
  }
  v27 = v128;
  if (!v128)
    goto LABEL_30;
  v28 = (unint64_t *)&v128->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if ((has_any_fallback & 1) != 0)
      goto LABEL_41;
  }
  else
  {
LABEL_30:
    if ((has_any_fallback & 1) != 0)
      goto LABEL_41;
  }
  v30 = (Espresso *)(***(uint64_t (****)(_QWORD))(*a2 + 8))(*(_QWORD *)(*a2 + 8));
  v32 = ((_DWORD)v30 - 10006) > 5 || ((0x2Fu >> ((_BYTE)v30 - 22)) & 1) == 0;
  if (!v32 && ((_DWORD)v8 == 1 || (int)v8 > v17))
  {
    Espresso::espresso_os_log_subsystem(v30, v31);
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      v34 = (***(uint64_t (****)(_QWORD))(a1[9] + 8))(*(_QWORD *)(a1[9] + 8));
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v34;
      _os_log_impl(&dword_190DAF000, v33, OS_LOG_TYPE_INFO, "No fallback needed: %d", buf, 8u);
    }

    return 0.0;
  }
LABEL_41:
  v36 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)buf = *a2;
  v130 = v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = a1[10];
  v131 = a1[9];
  v132 = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v120 = &v123;
  LOBYTE(v121) = 0;
  v42 = operator new(0x20uLL);
  v43 = 0;
  v44 = 0;
  v123 = (char *)v42;
  v124 = (char *)v42;
  v125 = v42 + 2;
  do
  {
    v45 = v43;
    v46 = *(_OWORD *)&buf[16 * v44];
    *v42 = v46;
    if (*((_QWORD *)&v46 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    ++v42;
    v43 = 1;
    v44 = 1;
  }
  while ((v45 & 1) == 0);
  v124 = (char *)v42;
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&buf[i]);
  (***(void (****)(_QWORD))(*a2 + 8))(*(_QWORD *)(*a2 + 8));
  (***(void (****)(_QWORD))(a1[9] + 8))(*(_QWORD *)(a1[9] + 8));
  *(_QWORD *)buf = 0;
  v130 = 0;
  v131 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v50 = *a4;
  v118 = 0;
  v119 = 0;
  v51 = (std::__shared_weak_count *)v50[10];
  if (v51 && (v119 = std::__shared_weak_count::lock(v51)) != 0)
  {
    v52 = v50[9];
    v118 = v52;
  }
  else
  {
    v52 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v115, "espresso.dispatch.fallback_only_when_unavailable");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v52 + 472, (uint64_t)v115, (uint64_t)__p, &v117);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
  {
    v53 = v117.__r_.__value_.__l.__size_ == 1 && *v117.__r_.__value_.__l.__data_ == 49;
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  else
  {
    v53 = SHIBYTE(v117.__r_.__value_.__r.__words[2]) == 1 && v117.__r_.__value_.__s.__data_[0] == 49;
  }
  if (v114 < 0)
    operator delete(__p[0]);
  if (v116 < 0)
    operator delete(v115[0]);
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults", a5);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v54, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v55 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("com.espresso.dispatch_version"));
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = v56;
  if (v56)
    v58 = objc_msgSend(v56, "intValue");
  else
    v58 = 3;

  v59 = getenv("ESPRESSO_DISPATCH_VERSION");
  if (v59)
    v58 = atoi(v59);
  v60 = v118;
  std::string::basic_string[abi:ne180100]<0>(v115, "espresso.dispatch.v3_enable");
  std::string::basic_string[abi:ne180100]<0>(__p, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>(v60 + 472, (uint64_t)v115, (uint64_t)__p, &v117);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v117.__r_.__value_.__l.__size_ == 1)
    {
      v63 = (void *)v117.__r_.__value_.__r.__words[0];
      v65 = *v117.__r_.__value_.__l.__data_ != 48 && v58 == 3;
    }
    else
    {
      v65 = v58 == 3;
      v63 = (void *)v117.__r_.__value_.__r.__words[0];
    }
    if (v14)
      v67 = v65;
    else
      v67 = 0;
    operator delete(v63);
  }
  else
  {
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) == 1)
      v62 = v117.__r_.__value_.__s.__data_[0] != 48 && v58 == 3;
    else
      v62 = v58 == 3;
    v67 = v62 && v14 != 0;
  }
  if (v114 < 0)
    operator delete(__p[0]);
  if (v116 < 0)
    operator delete(v115[0]);
  if (!v67)
  {
    v82 = a4[1];
    v110[0] = *a4;
    v110[1] = v82;
    if (v82)
    {
      v83 = (unint64_t *)(v82 + 1);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    Espresso::cpu_context_transfer_algo_t::compute_local_costs((uint64_t *)&v123, v61, v110, v108, (uint64_t)buf, (uint64_t)&v120);
    if (!v82)
      goto LABEL_126;
    v87 = (unint64_t *)(v82 + 1);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      (*(void (**)(uint64_t *))(*v82 + 16))(v82);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v82);
      if (v53)
        goto LABEL_127;
    }
    else
    {
LABEL_126:
      if (v53)
        goto LABEL_127;
    }
    v98 = *a4;
    v76 = a4[1];
    v109[0] = v98;
    v109[1] = v76;
    if (v76)
    {
      v99 = (unint64_t *)(v76 + 1);
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    Espresso::cpu_context_transfer_algo_t::compute_graph_shortest_path(v85, (uint64_t)&v123, v86, v109, (uint64_t *)buf, (uint64_t *)&v120, (uint64_t *)v9);
    v35 = v101;
    if (!v76)
      goto LABEL_147;
    v102 = (unint64_t *)(v76 + 1);
    do
      v81 = __ldaxr(v102);
    while (__stlxr(v81 - 1, v102));
    goto LABEL_145;
  }
  v68 = a4[1];
  v112[0] = *a4;
  v112[1] = v68;
  if (v68)
  {
    v69 = (unint64_t *)(v68 + 1);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  Espresso::cpu_context_transfer_algo_t::compute_local_costs_v3(&v123, v61, v112, v108, buf, &v120);
  if (v68)
  {
    v73 = (unint64_t *)(v68 + 1);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      (*(void (**)(uint64_t *))(*v68 + 16))(v68);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v68);
      if (!v53)
        goto LABEL_112;
LABEL_127:
      if (v124 - v123 != 32)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("fallback_only_when_unavailable only supports 2 engines");
      v90 = **a4;
      v89 = (*a4)[1];
      v91 = (v89 - v90) / 224;
      std::vector<int>::resize(v9, v91);
      if (v89 == v90)
      {
        v35 = 0.0;
      }
      else
      {
        v92 = 0;
        v93 = (char *)v120;
        begin = v9->__begin_;
        v35 = 0.0;
        v95 = *(double **)buf;
        do
        {
          if (((*(_QWORD *)&v93[(v92 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v92 & 0x3E)) & 1) != 0)
            v96 = v92;
          else
            v96 = v92 + 1;
          *begin++ = ((*(_QWORD *)&v93[(v92 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v92 & 0x3E)) & 1) == 0;
          v97 = v95[v96];
          v35 = v35 + v97;
          v92 += 2;
          --v91;
        }
        while (v91);
      }
      goto LABEL_147;
    }
  }
  if (v53)
    goto LABEL_127;
LABEL_112:
  v75 = *a4;
  v76 = a4[1];
  v111[0] = v75;
  v111[1] = v76;
  if (v76)
  {
    v77 = (unint64_t *)(v76 + 1);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  Espresso::cpu_context_transfer_algo_t::compute_graph_shortest_path_v3(v71, (uint64_t *)&v123, v72, v111, buf, &v120, (uint64_t *)v9);
  v35 = v79;
  if (!v76)
    goto LABEL_147;
  v80 = (unint64_t *)(v76 + 1);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
LABEL_145:
  if (!v81)
  {
    (*(void (**)(uint64_t *))(*v76 + 16))(v76);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v76);
  }
LABEL_147:

  v103 = v119;
  if (v119)
  {
    v104 = (unint64_t *)&v119->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v120)
    operator delete(v120);
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
  *(_QWORD *)buf = &v123;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v35;
}

void sub_190E9F874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;

  _Unwind_Resume(a1);
}

void std::vector<Device>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int *value;
  std::vector<int>::pointer end;
  int *v6;
  std::vector<int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  int *v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (v10 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * __n;
    v16 = (int *)&v13[4 * v12];
    bzero(v14, v15);
    v17 = (int *)&v14[v15];
    if (end != begin)
    {
      v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)((char *)end - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = (__int128 *)(end - 4);
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t GetPlatformHeuristics(Espresso::net **a1)
{
  Espresso::net *v2;
  std::mutex *v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  int v12;
  uint64_t v13;

  v2 = *a1;
  if (GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::onceToken != -1)
    dispatch_once(&GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::onceToken, &__block_literal_global_12612);
  v3 = (std::mutex *)(GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_new + 8);
  std::mutex::lock((std::mutex *)(GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_new + 8));
  v4 = getenv("ESPRESSO_CHIP_ID");
  if (v4)
  {
    v5 = atoi(v4);
    v6 = v5;
    GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::chip_id = v5;
  }
  else
  {
    v6 = GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::chip_id;
  }
  v7 = v6 - 24577;
  if (v7 <= 0x21 && ((1 << v7) & 0x300000003) != 0 && Espresso::net::model_is_mil(*a1))
  {
    v8 = GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_jade;
    goto LABEL_23;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v2 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "isEqualToString:", CFSTR("H12")) & 1) != 0)
  {
    v10 = &GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_old;
LABEL_22:
    v8 = *v10;

    goto LABEL_23;
  }
  if ((objc_msgSend(v9, "isEqualToString:", CFSTR("H13")) & 1) != 0
    || (objc_msgSend(v9, "isEqualToString:", CFSTR("H14")) & 1) != 0
    || (objc_msgSend(v9, "isEqualToString:", CFSTR("H13G")) & 1) != 0
    || (objc_msgSend(v9, "isEqualToString:", CFSTR("H14G")) & 1) != 0
    || (objc_msgSend(v9, "isEqualToString:", CFSTR("H14G.N301")) & 1) != 0
    || (objc_msgSend(v9, "isEqualToString:", CFSTR("H15")) & 1) != 0
    || (objc_msgSend(v9, "isEqualToString:", CFSTR("H15G")) & 1) != 0
    || (objc_msgSend(v9, "isEqualToString:", CFSTR("M11")) & 1) != 0
    || (objc_msgSend(v9, "isEqualToString:", CFSTR("H16")) & 1) != 0)
  {
    v10 = &GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_new;
    goto LABEL_22;
  }
  v12 = objc_msgSend(v9, "isEqualToString:", CFSTR("H17"));
  v13 = GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_new;

  if (v12)
    v8 = v13;
  else
    v8 = 0;
LABEL_23:
  std::mutex::unlock(v3);
  return v8;
}

void sub_190E9FD6C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t newpPlatformHeuristics::small_net_layer_count_threshold(newpPlatformHeuristics *this)
{
  return 10;
}

uint64_t espresso_plan_get_phase(_QWORD *a1)
{
  if (!a1)
    return 2;
  {
    return *(unsigned int *)(a1[133] + 160);
  }
  return 2;
}

void ___ZN8Espresso8on_allocEPvm_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.espresso.memdbgq", 0);
  v1 = (void *)Espresso::alloc_dbg_queue;
  Espresso::alloc_dbg_queue = (uint64_t)v0;

}

double ___ZN8Espresso17ANECompilerEngine25precompilation_settings_t6sharedEv_block_invoke()
{
  uint64_t v0;
  double result;

  if (!Espresso::ANECompilerEngine::precompilation_settings_t::global)
  {
    v0 = operator new();
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)v0, "");
    *(_QWORD *)(v0 + 24) = 850045863;
    result = 0.0;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
    *(_QWORD *)(v0 + 80) = 0;
    Espresso::ANECompilerEngine::precompilation_settings_t::global = v0;
  }
  return result;
}

void sub_190E9FE84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1012C40688F0EE3);
  _Unwind_Resume(a1);
}

void E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(E5RT::ConfigOptionsImpl *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void (*v5)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);

  *(_QWORD *)this = &off_1E2D5AD90;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v2[4];
      if (v5)
        v5(0, v2 + 4, 0, 0, 0);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void (*v5)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);

  *(_QWORD *)this = &off_1E2D5AD90;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v2[4];
      if (v5)
        v5(0, v2 + 4, 0, 0, 0);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x19401CD90);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void (*v5)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);

  *(_QWORD *)this = &off_1E2D5AD90;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v2[4];
      if (v5)
        v5(0, v2 + 4, 0, 0, 0);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
}

uint64_t std::hash<E5RT::E5CompilerOptions>::operator()(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t (*v4)(uint64_t);
  int8x16_t **v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  unint64_t v30;
  void *v31;
  uint64_t (*v32)(uint64_t);
  unsigned __int8 *v33;
  void *v34;
  uint64_t (*v35)(uint64_t);
  unsigned __int8 *v36;
  void *v37;
  uint64_t (*v38)(uint64_t);
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  void *v46;
  uint64_t (*v47)(uint64_t);
  unsigned __int8 *v48;
  void *v49;
  uint64_t (*v50)(uint64_t);
  unsigned __int8 *v51;
  void *v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  int v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  void *v59;
  uint64_t (*v60)(uint64_t);
  unsigned __int8 *v61;
  void *v62;
  uint64_t (*v63)(uint64_t);
  unsigned __int8 *v64;
  void *v65;
  uint64_t (*v66)(uint64_t);
  unsigned __int8 *v67;
  void *v68;
  uint64_t (*v69)(uint64_t);
  unsigned __int8 *v70;
  void *v71;
  uint64_t (*v72)(uint64_t);
  unsigned __int8 *v73;
  void *v74;
  uint64_t (*v75)(uint64_t);
  unsigned __int8 *v76;
  void *v77;
  uint64_t (*v78)(uint64_t);
  unsigned __int8 *v79;
  int8x8_t v81;
  char v82;
  char v83;
  char v84;

  v4 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v3 + 16))(v3, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62);
  if (!v4)
    goto LABEL_68;
  v5 = (int8x16_t **)v4(3);
  if (!v5)
    goto LABEL_68;
  v81 = 0;
  v6 = *v5;
  v7 = (char *)v5[1] - (char *)*v5;
  if (!v7)
    goto LABEL_14;
  v8 = v7 >> 3;
  if (v8 <= 1)
    v8 = 1;
  if (v8 >= 4)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = v6 + 1;
    v12 = 0uLL;
    v13 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v14 = 0uLL;
    do
    {
      v12 = veorq_s8(v12, v11[-1]);
      v14 = veorq_s8(v14, *v11);
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    v15 = veorq_s8(v14, v12);
    v10 = veor_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
    if (v8 == v9)
      goto LABEL_13;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v16 = v8 - v9;
  v17 = &v6->i64[v9];
  do
  {
    v18 = *v17++;
    *(_QWORD *)&v10 ^= v18;
    --v16;
  }
  while (v16);
LABEL_13:
  v81 = v10;
LABEL_14:
  v20 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v19 + 16))(v19, "milEntryPoints<std::vector<std::string>>", 40);
  if (!v20)
    goto LABEL_68;
  v21 = (uint64_t *)v20(3);
  v22 = v21;
  if (!v21)
    goto LABEL_68;
  v23 = *v21;
  if (v21[1] == *v21)
  {
    v25 = 0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = v23 + v24;
      v28 = *(char *)(v27 + 23);
      if (v28 >= 0)
        v29 = (uint64_t *)v27;
      else
        v29 = *(uint64_t **)v27;
      if (v28 >= 0)
        v30 = *(unsigned __int8 *)(v27 + 23);
      else
        v30 = *(_QWORD *)(v27 + 8);
      v25 ^= std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v82, v29, v30);
      ++v26;
      v23 = *v22;
      v24 += 24;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL * ((v22[1] - *v22) >> 3));
  }
  E5Common::HashCombine(&v81, (unint64_t *)v25);
  v32 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v31 + 16))(v31, "enableProfiling<BOOL>", 21);
  if (!v32)
    goto LABEL_68;
  v33 = (unsigned __int8 *)v32(3);
  if (!v33)
    goto LABEL_68;
  E5Common::HashCombine(&v81, (unint64_t *)*v33);
  v35 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v34 + 16))(v34, "forceRecompilation<BOOL>", 24);
  if (!v35)
    goto LABEL_68;
  v36 = (unsigned __int8 *)v35(3);
  if (!v36)
    goto LABEL_68;
  E5Common::HashCombine(&v81, (unint64_t *)*v36);
  v38 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v37 + 16))(v37, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!v38)
    goto LABEL_68;
  v39 = (uint64_t *)v38(3);
  if (!v39)
    goto LABEL_68;
  v40 = *v39;
  v41 = v39[1];
  if (*v39 != v41)
  {
    do
    {
      v42 = *(char *)(v40 + 23);
      if (v42 >= 0)
        v43 = (uint64_t *)v40;
      else
        v43 = *(uint64_t **)v40;
      if (v42 >= 0)
        v44 = *(unsigned __int8 *)(v40 + 23);
      else
        v44 = *(_QWORD *)(v40 + 8);
      v45 = (unint64_t *)std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v83, v43, v44);
      E5Common::HashCombine(&v81, v45);
      v40 += 24;
    }
    while (v40 != v41);
  }
  v47 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v46 + 16))(v46, "enableReshapeWithMinimalAllocations<BOOL>", 41);
  if (!v47)
    goto LABEL_68;
  v48 = (unsigned __int8 *)v47(3);
  if (!v48)
    goto LABEL_68;
  E5Common::HashCombine(&v81, (unint64_t *)*v48);
  v50 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v49 + 16))(v49, "forceClassicAotOldHw<BOOL>", 26);
  if (!v50)
    goto LABEL_68;
  v51 = (unsigned __int8 *)v50(3);
  if (!v51)
    goto LABEL_68;
  E5Common::HashCombine(&v81, (unint64_t *)*v51);
  v53 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v52 + 16))(v52, "customAneCompilerOptions<std::string>", 37);
  if (!v53)
    goto LABEL_68;
  v54 = v53(3);
  if (!v54)
    goto LABEL_68;
  v55 = *(char *)(v54 + 23);
  v56 = v55 >= 0 ? (uint64_t *)v54 : *(uint64_t **)v54;
  v57 = v55 >= 0 ? *(unsigned __int8 *)(v54 + 23) : *(_QWORD *)(v54 + 8);
  v58 = (unint64_t *)std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v84, v56, v57);
  E5Common::HashCombine(&v81, v58);
  v60 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v59 + 16))(v59, "experimentalDisableDataDependentShape<BOOL>", 43);
  if (!v60)
    goto LABEL_68;
  v61 = (unsigned __int8 *)v60(3);
  if (!v61)
    goto LABEL_68;
  E5Common::HashCombine(&v81, (unint64_t *)*v61);
  v63 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v62 + 16))(v62, "experimentalEnableDefaultFunctionForRangeDim<BOOL>", 50);
  if (!v63)
    goto LABEL_68;
  v64 = (unsigned __int8 *)v63(3);
  if (!v64)
    goto LABEL_68;
  E5Common::HashCombine(&v81, (unint64_t *)*v64);
  v66 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v65 + 16))(v65, "experimentalMatchE5MinimalCpuPatterns<BOOL>", 43);
  if (!v66)
    goto LABEL_68;
  v67 = (unsigned __int8 *)v66(3);
  if (!v67)
    goto LABEL_68;
  E5Common::HashCombine(&v81, (unint64_t *)*v67);
  v69 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v68 + 16))(v68, "experimentalMatchE5MinimalCpuPatternsForStates<BOOL>", 52);
  if (!v69)
    goto LABEL_68;
  v70 = (unsigned __int8 *)v69(3);
  if (!v70)
    goto LABEL_68;
  E5Common::HashCombine(&v81, (unint64_t *)*v70);
  v72 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v71 + 16))(v71, "experimentalMoveReadStateOps<BOOL>", 34);
  if (!v72)
    goto LABEL_68;
  v73 = (unsigned __int8 *)v72(3);
  if (!v73)
    goto LABEL_68;
  E5Common::HashCombine(&v81, (unint64_t *)*v73);
  v75 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v74 + 16))(v74, "experimentalShrinkQuantGroup<BOOL>", 34);
  if (!v75
    || (v76 = (unsigned __int8 *)v75(3)) == 0
    || (E5Common::HashCombine(&v81, (unint64_t *)*v76),
  {
LABEL_68:
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  E5Common::HashCombine(&v81, (unint64_t *)*v79);
  return (uint64_t)v81;
}

uint64_t **E5RT::ConfigOptionsImpl::GetConfigOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void *exception;
  std::string __dst;
  std::string v11;
  __int128 v12;
  std::string::size_type v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v3 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::find<std::string_view>((_QWORD *)(a1 + 8), (uint64_t)v14);
  if (!v3)
  {
    std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v14);
    v5 = std::string::insert(&__dst, 0, "Unknown config name ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, " given.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13 = v7->__r_.__value_.__r.__words[2];
    v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "GetConfigOption");
    E5RT::Status::Status(&__dst, 1, &v12);
    E5RT::E5RTError::E5RTError(exception, &v11, &__dst);
  }
  return v3 + 4;
}

void sub_190EA0884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
        operator delete(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::find<std::string_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  size_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char v18;

  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v18, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v9 = *(uint64_t ****)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = *v9;
  if (*v9)
  {
    v13 = a2;
    v12 = *(uint64_t **)a2;
    v11 = *(_QWORD *)(v13 + 8);
    if (v7.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v16 = v10[1];
        if ((uint64_t *)v6 == v16)
        {
          if (v10[3] == (uint64_t *)v11 && !memcmp(v10[2], v12, v11))
            return v10;
        }
        else if (((unint64_t)v16 & v14) != v8)
        {
          return 0;
        }
        v10 = (uint64_t **)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v15 = (unint64_t)v10[1];
      if (v6 == v15)
      {
        if (v10[3] == (uint64_t *)v11 && !memcmp(v10[2], v12, v11))
          return v10;
      }
      else
      {
        if (v15 >= *(_QWORD *)&v5)
          v15 %= *(_QWORD *)&v5;
        if (v15 != v8)
          return 0;
      }
      v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  return v10;
}

_QWORD *E5Common::HashCombine(_QWORD *this, unint64_t *a2)
{
  *this ^= (unint64_t)&a2[8 * *this + 331804471] + (*this >> 2) + 1;
  return this;
}

_QWORD *E5RT::ConfigOptionsImpl::SetConfigOption(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(uint64_t))
{
  uint64_t v6;
  uint64_t (**v7)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  void *exception;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  std::string __dst;
  std::string v22;
  __int128 v23;
  std::string::size_type v24;
  _QWORD v25[2];

  v25[0] = a2;
  v25[1] = a3;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!*a4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "SetConfigOption");
    std::string::basic_string[abi:ne180100]<0>(&v22, "Passed empty value.");
    E5RT::Status::Status(&__dst, 1, &v22);
    E5RT::E5RTError::E5RTError(exception, &v23, &__dst);
  }
  v7 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v6;
  v8 = ((uint64_t (*)(uint64_t, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))*a4)(4, a4, 0, 0, 0);
  if (*v7)
  {
    v9 = (*v7)(4, v7, 0, 0, 0);
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v9 + 8);
    v12 = __OFSUB__(v10, v11);
    if (v10 == v11)
      goto LABEL_9;
  }
  else
  {
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(MEMORY[0x1E0DE4F20] + 8);
    v12 = __OFSUB__(v10, v11);
    if (v10 == v11)
      goto LABEL_9;
  }
  if ((v11 & v10) < 0 == v12
    || strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v25);
    v16 = std::string::insert(&__dst, 0, "Invalid config value type provided for setting config ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v22, ".");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v24 = v18->__r_.__value_.__r.__words[2];
    v23 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v20 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "SetConfigOption");
    E5RT::Status::Status(&__dst, 1, &v23);
    E5RT::E5RTError::E5RTError(v20, &v22, &__dst);
  }
LABEL_9:
  *(_QWORD *)&v23 = v25;
  v13 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(a1 + 8, (uint64_t)v25, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23);
  return std::any::operator=[abi:ne180100](v13 + 4, a4);
}

void sub_190EA0CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
      {
        operator delete(a23);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

void sub_190EA0DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

E5RT::E5CompilerOptions *E5RT::E5CompilerOptions::E5CompilerOptions(E5RT::E5CompilerOptions *this)
{
  _QWORD *v2;
  void (**v3)(int);
  void (**v4)(int);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void (**v11)(int);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v30;
  void (*v31)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  __int128 __p;
  char *v33;
  void *v34[2];
  void *v35[2];
  int v36;
  char **v37;
  _OWORD *v38[2];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)E5RT::ConfigOptions::ConfigOptions(this) = &off_1E2D5ADC0;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)v35 = 0u;
  v36 = 1065353216;
  v2 = operator new(0x18uLL);
  *((_QWORD *)&__p + 1) = v2 + 3;
  v33 = (char *)(v2 + 3);
  v2[2] = 1;
  *(_OWORD *)v2 = xmmword_191A72498;
  *(_QWORD *)&__p = v2;
  v38[0] = &E5RT::E5CompilerOptions::computeDeviceTypesAllowed;
  v3 = (void (**)(int))std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::computeDeviceTypesAllowed, (uint64_t)&std::piecewise_construct, v38);
  std::any::operator=[abi:ne180100]<std::vector<E5RT::ComputeDeviceType>,std::vector<E5RT::ComputeDeviceType>,void>(v3 + 4, (void (**)(int))&__p);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v39 = 4;
  strcpy((char *)v38, "main");
  std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v38, 1uLL);
  v37 = &E5RT::E5CompilerOptions::milEntryPoints;
  v4 = (void (**)(int))std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::milEntryPoints, (uint64_t)&std::piecewise_construct, (_OWORD **)&v37);
  std::any::operator=[abi:ne180100]<std::vector<std::string>,std::vector<std::string>,void>(v4 + 4, (void (**)(int))&__p);
  v5 = __p;
  if ((_QWORD)__p)
  {
    v6 = *((_QWORD *)&__p + 1);
    v7 = (void *)__p;
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)__p;
    }
    *((_QWORD *)&__p + 1) = v5;
    operator delete(v7);
  }
  if (v39 < 0)
    operator delete(v38[0]);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::enableProfiling;
  v8 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::enableProfiling, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v8 + 32, (unsigned __int8 *)&v37);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::forceRecompilation;
  v9 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::forceRecompilation, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v9 + 32, (unsigned __int8 *)&v37);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::forceFetchFromCache;
  v10 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::forceFetchFromCache, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v10 + 32, (unsigned __int8 *)&v37);
  v39 = 11;
  strcpy((char *)v38, "classic_cpu");
  std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v38, 1uLL);
  v37 = &E5RT::E5CompilerOptions::preferredCpuBackends;
  v11 = (void (**)(int))std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::preferredCpuBackends, (uint64_t)&std::piecewise_construct, (_OWORD **)&v37);
  std::any::operator=[abi:ne180100]<std::vector<std::string>,std::vector<std::string>,void>(v11 + 4, (void (**)(int))&__p);
  v12 = __p;
  if ((_QWORD)__p)
  {
    v13 = *((_QWORD *)&__p + 1);
    v14 = (void *)__p;
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0)
          operator delete(*(void **)(v13 - 24));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = (void *)__p;
    }
    *((_QWORD *)&__p + 1) = v12;
    operator delete(v14);
  }
  if (v39 < 0)
    operator delete(v38[0]);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::enableReshapeWithMinimalAllocations;
  v15 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::enableReshapeWithMinimalAllocations, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v15 + 32, (unsigned __int8 *)&v37);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::forceClassicAotOldHw;
  v16 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::forceClassicAotOldHw, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v16 + 32, (unsigned __int8 *)&v37);
  __p = 0uLL;
  v33 = 0;
  v38[0] = &E5RT::E5CompilerOptions::customAneCompilerOptions;
  v17 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::customAneCompilerOptions, (uint64_t)&std::piecewise_construct, v38);
  std::any::operator=[abi:ne180100]<std::string,std::string,void>((uint64_t)v17 + 32, &__p);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::experimentalDisableDataDependentShape;
  v18 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::experimentalDisableDataDependentShape, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v18 + 32, (unsigned __int8 *)&v37);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::experimentalEnableDefaultFunctionForRangeDim;
  v19 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::experimentalEnableDefaultFunctionForRangeDim, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v19 + 32, (unsigned __int8 *)&v37);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::experimentalMatchE5MinimalCpuPatterns;
  v20 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::experimentalMatchE5MinimalCpuPatterns, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v20 + 32, (unsigned __int8 *)&v37);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::experimentalMatchE5MinimalCpuPatternsForStates;
  v21 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::experimentalMatchE5MinimalCpuPatternsForStates, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v21 + 32, (unsigned __int8 *)&v37);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::experimentalMoveReadStateOps;
  v22 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::experimentalMoveReadStateOps, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v22 + 32, (unsigned __int8 *)&v37);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::experimentalShrinkQuantGroup;
  v23 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::experimentalShrinkQuantGroup, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v23 + 32, (unsigned __int8 *)&v37);
  LOBYTE(v37) = 0;
  *(_QWORD *)&__p = &E5RT::E5CompilerOptions::experimentalDisableCompileTimeMPSGraphTypeInference;
  v24 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)v34, (uint64_t)&E5RT::E5CompilerOptions::experimentalDisableCompileTimeMPSGraphTypeInference, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  std::any::operator=[abi:ne180100]<BOOL,BOOL,void>((uint64_t)v24 + 32, (unsigned __int8 *)&v37);
  v25 = (_QWORD *)operator new();
  E5RT::ConfigOptionsImpl::ConfigOptionsImpl((uint64_t)v25, (uint64_t *)v34);
  *v25 = &off_1E2DC8148;
  v26 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v25;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v35[0];
  if (v35[0])
  {
    do
    {
      v30 = (_QWORD *)*v27;
      v31 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v27[4];
      if (v31)
        v31(0, v27 + 4, 0, 0, 0);
      operator delete(v27);
      v27 = v30;
    }
    while (v30);
  }
  v28 = v34[0];
  v34[0] = 0;
  if (v28)
    operator delete(v28);
  return this;
}

void sub_190EA13A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  E5RT::ConfigOptions *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  MEMORY[0x19401CD90](v18, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  E5RT::ConfigOptions::~ConfigOptions(v16);
  _Unwind_Resume(a1);
}

void sub_190EA1468(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x190EA1430);
}

void sub_190EA1480(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x190EA1440);
}

void *std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  void *v13;
  size_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  char v35;

  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v34, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v16 = a2;
        v15 = *(uint64_t **)a2;
        v14 = *(_QWORD *)(v16 + 8);
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = *((_QWORD *)v13 + 1);
            if (v18 == v9)
            {
              if (*((_QWORD *)v13 + 3) == v14 && !memcmp(*((const void **)v13 + 2), v15, v14))
                return v13;
            }
            else if ((v18 & (v10 - 1)) != v4)
            {
              goto LABEL_25;
            }
            v13 = *(void **)v13;
            if (!v13)
              goto LABEL_25;
          }
        }
        do
        {
          v17 = *((_QWORD *)v13 + 1);
          if (v17 == v9)
          {
            if (*((_QWORD *)v13 + 3) == v14 && !memcmp(*((const void **)v13 + 2), v15, v14))
              return v13;
          }
          else
          {
            if (v17 >= v10)
              v17 %= v10;
            if (v17 != v4)
              break;
          }
          v13 = *(void **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_25:
  v19 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x40uLL);
  v34[0] = v13;
  v34[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = **a4;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 5) = 0;
  v35 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      *(_QWORD *)v13 = *v23;
LABEL_63:
      *v23 = v13;
      goto LABEL_64;
    }
  }
  else
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_39;
    if (prime < v10)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < v10)
LABEL_39:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v23)
          goto LABEL_28;
      }
      else
      {
        v4 = v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v23)
          goto LABEL_28;
      }
    }
    else
    {
      v4 = v31 & v9;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v9));
      if (v23)
        goto LABEL_28;
    }
  }
  *(_QWORD *)v13 = *v19;
  *v19 = v13;
  *(_QWORD *)(v22 + 8 * v4) = v19;
  if (*(_QWORD *)v13)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10)
        v32 %= v10;
    }
    else
    {
      v32 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_190EA17F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string_view,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string_view,std::any>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ConfigOptionsImpl::ConfigOptionsImpl(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = &off_1E2D5AD90;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 24) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 32) = v6;
  *(_DWORD *)(result + 40) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 16);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 24;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

E5RT::ConfigOptions *E5RT::ConfigOptions::ConfigOptions(E5RT::ConfigOptions *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2D59C68;
  *((_QWORD *)this + 1) = 0;
  v2 = operator new();
  *(_QWORD *)v2 = &off_1E2D5AD90;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 1065353216;
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return this;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2D59C68;
  *((_QWORD *)this + 1) = 0;
  v2 = operator new();
  *(_QWORD *)v2 = &off_1E2D5AD90;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 1065353216;
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return this;
}

void sub_190EA199C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void Espresso::BNNSEngine::deconvolution_kernel::set_f16_weights(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  const void *v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  std::__shared_weak_count *v28;

  v5 = (const void *)a1[72];
  if (v5
  {
    v7 = (std::__shared_weak_count *)a1[73];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v11 = (const void *)a1[72];
    if (v11
    {
      v13 = (std::__shared_weak_count *)a1[73];
      v27 = v12;
      v28 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v12 = 0;
      v27 = 0;
      v28 = 0;
    }
    v16 = a2[1];
    v25 = *a2;
    v26 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v12 + 544))(v12, &v25, a3);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v28;
    if (v28)
    {
      v23 = (unint64_t *)&v28->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 81, *a2, a2[1]);
  }
}

void sub_190EA1B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 592), *a2, a2[1]);
}

void Espresso::BNNSEngine::deconvolution_kernel::set_biases(_QWORD *a1, uint64_t *a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::__shared_weak_count *v26;

  v4 = (const void *)a1[72];
  if (v4
  {
    v5 = (std::__shared_weak_count *)a1[73];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v9 = (const void *)a1[72];
    if (v9
    {
      v11 = (std::__shared_weak_count *)a1[73];
      v25 = v10;
      v26 = v11;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
    }
    else
    {
      v10 = 0;
      v25 = 0;
      v26 = 0;
    }
    v14 = a2[1];
    v23 = *a2;
    v24 = (std::__shared_weak_count *)v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v10 + 392))(v10, &v23);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v26;
    if (v26)
    {
      v21 = (unint64_t *)&v26->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 77, *a2, a2[1]);
  }
}

void sub_190EA1D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), *a2, a2[1]);
  *(_DWORD *)(a1 + 336) = *a2 != 0;
  return result;
}

void Espresso::load_network_metadata(uint64_t a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  int v11;
  int v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *i;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _QWORD *v29;
  int v30;
  _BOOL4 v31;
  _OWORD *v32;
  _QWORD *v33;
  int v34;
  _QWORD **v35;
  _OWORD *v36;
  _QWORD *v37;
  int v38;
  _BOOL4 v39;
  _OWORD *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  unsigned __int8 *v46;
  int v47;
  _BOOL4 v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  const std::string *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  _BYTE *v58;
  unint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  int v64;
  int v65;
  _QWORD *v66;
  int v67;
  BOOL v69;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  Espresso::abstract_context *v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  _QWORD *v80;
  int v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  Espresso::abstract_context *v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  const char *v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL8 v105;
  int v106;
  int v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  int v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  std::string::size_type v116;
  std::string::size_type v117;
  __int128 v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t **v126;
  char *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  int v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD **v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t *p_shared_owners;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  int v154;
  int v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  _QWORD **v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  int v171;
  int v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  char *j;
  __int128 v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  Espresso *v202;
  const char *v203;
  char v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  NSObject *v208;
  int v209;
  int v210;
  uint64_t v211;
  const void **v212;
  const void **v213;
  size_t v214;
  size_t v215;
  uint64_t v216;
  const void *v217;
  size_t v218;
  size_t v219;
  _QWORD *v220;
  char *v221;
  char v222;
  char v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  const void *v233;
  size_t v234;
  _QWORD *v235;
  _QWORD *v236;
  int v237;
  int v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::string::size_type v242;
  uint64_t v243;
  _QWORD *v244;
  std::string::size_type v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  const void *v254;
  size_t v255;
  _QWORD *v256;
  char *v257;
  int v258;
  int v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  const void *v266;
  size_t v267;
  _QWORD *v268;
  char *v269;
  int v270;
  int v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  const void *v278;
  _QWORD *v279;
  char *v280;
  int v281;
  int v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::string::size_type v286;
  uint64_t v287;
  _QWORD *v288;
  std::string::size_type v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t *k;
  int v303;
  uint64_t **v304;
  uint64_t *v305;
  int v306;
  char *v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  int v311;
  int v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  __n128 v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  int v324;
  __int128 v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  int v329;
  __int128 v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  int v334;
  __int128 v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  int v339;
  __int128 v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  int v344;
  unint64_t v345;
  int v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  int v350;
  int v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  size_t v358;
  uint64_t v359;
  __int128 v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  char *v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::runtime_error *exception;
  std::runtime_error *v390;
  std::runtime_error *v391;
  std::runtime_error *v392;
  void *context;
  void *v394;
  void *v395;
  unint64_t v398;
  __int128 __s;
  __int128 v400;
  __int128 v401;
  unint64_t v402;
  __int128 v403;
  void *v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  std::__shared_weak_count *v408;
  __int128 v409;
  uint64_t v410;
  std::__shared_weak_count *v411;
  uint64_t v412[2];
  __int128 v413;
  __int128 v414;
  void *__p[2];
  void *v416;
  char v417;
  __int128 v418;
  std::string v419;
  _QWORD *v420;
  uint64_t v421;
  std::string v422;
  _BYTE buf[32];
  __int128 v424;
  _OWORD v425[2];
  uint64_t v426;

  v426 = *MEMORY[0x1E0C80C00];
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a6);
  v10 = *a6;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a6 + 16), *a4, a4[1]);
  std::string::operator=((std::string *)(v10 + 592), a2);
  std::string::operator=((std::string *)(v10 + 1024), a3);
  if ((***(unsigned int (****)(_QWORD))(*a4 + 8))(*(_QWORD *)(*a4 + 8)) == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Legacy metal engine Deprecated. It will removed soon");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "name");
  v11 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  v12 = v11;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v12)
      goto LABEL_15;
  }
  else if (!v11)
  {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  v13.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, v10 + 424);
  if (SBYTE7(v424) < 0)
    operator delete(*(void **)&buf[16]);
  v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v416) < 0)
    operator delete(__p[0]);
LABEL_15:
  std::string::basic_string[abi:ne180100]<0>(buf, "properties");
  v17 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  v18 = v17;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v18)
      goto LABEL_30;
  }
  else if (!v17)
  {
    goto LABEL_30;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "properties");
  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a1 + 120))(&v422, a1, buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  memset(buf, 0, 24);
  (*(void (**)(std::string::size_type, _BYTE *))(*(_QWORD *)v422.__r_.__value_.__l.__data_ + 32))(v422.__r_.__value_.__r.__words[0], buf);
  v19 = *(_QWORD **)buf;
  for (i = *(_QWORD **)&buf[8]; v19 != i; v19 += 3)
  {
    (*(void (**)(void **__return_ptr, std::string::size_type, _QWORD *))(*(_QWORD *)v422.__r_.__value_.__l.__data_
                                                                                  + 112))(__p, v422.__r_.__value_.__r.__words[0], v19);
    v21 = (uint64_t **)(*a6 + 472);
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, v19, (uint64_t)&std::piecewise_construct, (__int128 **)&v419);
    v23 = v22 + 7;
    if (*((char *)v22 + 79) < 0)
      operator delete((void *)*v23);
    *(_OWORD *)v23 = *(_OWORD *)__p;
    v23[2] = (uint64_t)v416;
  }
  __p[0] = buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  size = (std::__shared_weak_count *)v422.__r_.__value_.__l.__size_;
  if (v422.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v422.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_30:
  v27 = *a6;
  std::string::basic_string[abi:ne180100]<0>(buf, "training");
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v27 + 480), buf))
  {
    v31 = 0;
    goto LABEL_50;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "training");
  v422.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v27 + 472), __p, (uint64_t)&std::piecewise_construct, &v422);
  v29 = (_QWORD *)v28 + 7;
  v30 = *((char *)v28 + 79);
  if (v30 < 0)
  {
    if (*((_QWORD *)v28 + 8) != 1)
      goto LABEL_39;
    v29 = (_QWORD *)*v29;
  }
  else if (v30 != 1)
  {
LABEL_39:
    std::string::basic_string[abi:ne180100]<0>(&v422, "training");
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)&v422;
    v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v27 + 472), &v422, (uint64_t)&std::piecewise_construct, &v419);
    v33 = (_QWORD *)v32 + 7;
    v34 = *((char *)v32 + 79);
    if (v34 < 0)
    {
      if (*((_QWORD *)v32 + 8) != 4)
      {
LABEL_45:
        v31 = 0;
LABEL_46:
        if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v422.__r_.__value_.__l.__data_);
        goto LABEL_48;
      }
      v33 = (_QWORD *)*v33;
    }
    else if (v34 != 4)
    {
      goto LABEL_45;
    }
    v31 = *(_DWORD *)v33 == 1702195828;
    goto LABEL_46;
  }
  if (*(_BYTE *)v29 != 49)
    goto LABEL_39;
  v31 = 1;
LABEL_48:
  if (SHIBYTE(v416) < 0)
    operator delete(__p[0]);
LABEL_50:
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v31)
      goto LABEL_55;
    goto LABEL_54;
  }
  if (v31)
LABEL_54:
    (*(void (**)(uint64_t))(*(_QWORD *)*a4 + 96))(*a4);
LABEL_55:
  std::string::basic_string[abi:ne180100]<0>(buf, "disable_bnns_client_ptr");
  v35 = (_QWORD **)(v27 + 480);
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v27 + 480), buf))
  {
    v39 = 0;
    goto LABEL_75;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "disable_bnns_client_ptr");
  v422.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v27 + 472), __p, (uint64_t)&std::piecewise_construct, &v422);
  v37 = (_QWORD *)v36 + 7;
  v38 = *((char *)v36 + 79);
  if (v38 < 0)
  {
    if (*((_QWORD *)v36 + 8) != 1)
      goto LABEL_64;
    v37 = (_QWORD *)*v37;
  }
  else if (v38 != 1)
  {
LABEL_64:
    std::string::basic_string[abi:ne180100]<0>(&v422, "disable_bnns_client_ptr");
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)&v422;
    v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v27 + 472), &v422, (uint64_t)&std::piecewise_construct, &v419);
    v41 = (_QWORD *)v40 + 7;
    v42 = *((char *)v40 + 79);
    if (v42 < 0)
    {
      if (*((_QWORD *)v40 + 8) != 4)
      {
LABEL_70:
        v39 = 0;
LABEL_71:
        if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v422.__r_.__value_.__l.__data_);
        goto LABEL_73;
      }
      v41 = (_QWORD *)*v41;
    }
    else if (v42 != 4)
    {
      goto LABEL_70;
    }
    v39 = *(_DWORD *)v41 == 1702195828;
    goto LABEL_71;
  }
  if (*(_BYTE *)v37 != 49)
    goto LABEL_64;
  v39 = 1;
LABEL_73:
  if (SHIBYTE(v416) < 0)
    operator delete(__p[0]);
LABEL_75:
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v39)
      goto LABEL_80;
    goto LABEL_79;
  }
  if (v39)
  {
LABEL_79:
    v43 = *a4;
    Espresso::abstract_context::set_generic_option((Espresso::abstract_context *)*a4, "disable_bnns_client_ptr", 1);
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v43 + 144))(v43, "disable_bnns_client_ptr", 1);
  }
LABEL_80:
  std::string::basic_string[abi:ne180100]<0>(buf, "disable_all_tracepoints");
  v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*v35, buf);
  if (!v44)
  {
    v48 = 0;
    goto LABEL_91;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "disable_all_tracepoints");
  v422.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v44 = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v27 + 472), __p, (uint64_t)&std::piecewise_construct, &v422);
  v46 = (unsigned __int8 *)(v44 + 56);
  v47 = *(char *)(v44 + 79);
  if ((v47 & 0x80000000) == 0)
  {
    if (v47 != 1)
      goto LABEL_88;
LABEL_87:
    v48 = *v46 == 49;
    goto LABEL_89;
  }
  if (*(_QWORD *)(v44 + 64) == 1)
  {
    v46 = *(unsigned __int8 **)v46;
    goto LABEL_87;
  }
LABEL_88:
  v48 = 0;
LABEL_89:
  if (SHIBYTE(v416) < 0)
    operator delete(__p[0]);
LABEL_91:
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v48)
      goto LABEL_98;
  }
  else if (!v48)
  {
    goto LABEL_98;
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v44, v45);
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_190DAF000, v49, OS_LOG_TYPE_DEBUG, "[Espresso Tracepoints Disabled] since disable_all_tracepoints property present ", buf, 2u);
  }

  *(_BYTE *)(v27 + 1352) = 0;
LABEL_98:
  std::string::basic_string[abi:ne180100]<0>(buf, "bnns_n_threads");
  v50 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*v35, buf);
  v51 = v50;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v51)
      goto LABEL_105;
  }
  else if (!v50)
  {
    goto LABEL_105;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "bnns_n_threads");
  v52 = (const std::string *)std::map<std::string,Espresso::blob_numerical_properties>::at(v27 + 472, buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v53 = std::stoul(v52, 0, 10);
  v54 = *a4;
  Espresso::abstract_context::set_generic_option((Espresso::abstract_context *)*a4, "bnns_n_threads", v53);
  (*(void (**)(uint64_t, const char *, unint64_t))(*(_QWORD *)v54 + 144))(v54, "bnns_n_threads", v53);
LABEL_105:
  v55 = *(_QWORD **)(v27 + 472);
  if (v55 != v35)
  {
    do
    {
      v56 = v55 + 4;
      v57 = *((unsigned __int8 *)v55 + 55);
      if (*((char *)v55 + 55) < 0)
      {
        v58 = (_BYTE *)v55[4];
        v59 = v55[5];
      }
      else
      {
        v58 = v55 + 4;
        v59 = *((unsigned __int8 *)v55 + 55);
      }
      if (v59 >= 0x11)
        v59 = 17;
      if (!v59)
        goto LABEL_128;
      v60 = &v58[v59];
      v61 = v58;
      v62 = v60;
      do
      {
        if (*v61 == 98)
        {
          v63 = 1u;
          while (v63 != 17)
          {
            if (&v61[v63] == v60)
              goto LABEL_122;
            v64 = v61[v63];
            v65 = aBnnsExperiment[v63++];
            if (v64 != v65)
              goto LABEL_114;
          }
          v62 = v61;
        }
LABEL_114:
        ++v61;
      }
      while (v61 != v60);
LABEL_122:
      if (v62 != v60 && v62 == v58)
      {
        v66 = v55 + 7;
        if (*((char *)v55 + 79) < 0)
        {
          v78 = v55[8];
          if (v78 != 1)
          {
            if (v78 != 4)
              goto LABEL_249;
            v66 = (_QWORD *)*v66;
            goto LABEL_170;
          }
          v66 = (_QWORD *)*v66;
        }
        else
        {
          v67 = *((unsigned __int8 *)v55 + 79);
          if (v67 != 1)
          {
            if (v67 != 4)
              goto LABEL_249;
LABEL_170:
            if (*(_DWORD *)v66 == 1702195828)
              goto LABEL_217;
            goto LABEL_249;
          }
        }
        if (*(_BYTE *)v66 == 49)
        {
LABEL_217:
          v87 = (Espresso::abstract_context *)*a4;
          if ((v57 & 0x80) != 0)
            v56 = (_QWORD *)*v56;
          v92 = 1;
          goto LABEL_225;
        }
      }
      else
      {
LABEL_128:
        if ((v57 & 0x80) == 0)
        {
          if (*((unsigned __int8 *)v55 + 55) > 0x13u)
          {
            if (v57 == 20)
              goto LABEL_185;
            if (v57 != 24)
            {
              if (v57 != 25)
                goto LABEL_249;
              _ZF = *v56 == 0x7774656E5F726570 && v55[5] == 0x666E6F635F6B726FLL;
              v69 = _ZF && v55[6] == 0x6F69746172756769;
              if (!v69 || *((_BYTE *)v55 + 56) != 110)
                goto LABEL_249;
LABEL_160:
              v75 = (Espresso::abstract_context *)*a4;
              v76 = v55 + 7;
              if (*((char *)v55 + 79) < 0)
              {
                v93 = v55[8];
                if (v93 != 1)
                {
                  if (v93 != 4)
                    goto LABEL_234;
                  v76 = (_QWORD *)*v76;
                  goto LABEL_229;
                }
                v76 = (_QWORD *)*v76;
              }
              else
              {
                v77 = *((unsigned __int8 *)v55 + 79);
                if (v77 != 1)
                {
                  if (v77 != 4)
                  {
LABEL_234:
                    v97 = 0;
LABEL_241:
                    v98 = "is_reload_info_caching_enabled";
                    goto LABEL_248;
                  }
LABEL_229:
                  v94 = *(_DWORD *)v76 == 1702195828;
LABEL_238:
                  v97 = v94;
                  goto LABEL_241;
                }
              }
              v94 = *(_BYTE *)v76 == 49;
              goto LABEL_238;
            }
LABEL_190:
            v82 = v56[2];
            v83 = *v56 == 0x746963696C706D69 && v56[1] == 0x676E69747361635FLL;
            v84 = 0x64656C62616E655FLL;
            goto LABEL_194;
          }
          if (v57 != 12)
          {
            if (v57 != 15)
              goto LABEL_249;
LABEL_175:
            if (*v56 != 0x726F6D656D5F6E69 || *(_QWORD *)((char *)v56 + 7) != 0x6C65646F6D5F7972)
              goto LABEL_249;
            v75 = (Espresso::abstract_context *)*a4;
            v80 = v55 + 7;
            if (*((char *)v55 + 79) < 0)
            {
              v95 = v55[8];
              if (v95 != 1)
              {
                if (v95 != 4)
                  goto LABEL_235;
                v80 = (_QWORD *)*v80;
                goto LABEL_233;
              }
              v80 = (_QWORD *)*v80;
            }
            else
            {
              v81 = *((unsigned __int8 *)v55 + 79);
              if (v81 != 1)
              {
                if (v81 != 4)
                {
LABEL_235:
                  v97 = 0;
                  goto LABEL_247;
                }
LABEL_233:
                v96 = *(_DWORD *)v80 == 1702195828;
LABEL_244:
                v97 = v96;
LABEL_247:
                v98 = "in_memory_model";
LABEL_248:
                Espresso::abstract_context::set_generic_option(v75, v98, v97);
                (*(void (**)(Espresso::abstract_context *, const char *, uint64_t))(*(_QWORD *)v75 + 144))(v75, v98, v97);
                goto LABEL_249;
              }
            }
            v96 = *(_BYTE *)v80 == 49;
            goto LABEL_244;
          }
LABEL_201:
          if (*v56 != 0x7365725F74736166 || *((_DWORD *)v56 + 2) != 1701863784)
            goto LABEL_249;
LABEL_206:
          v87 = (Espresso::abstract_context *)*a4;
          v88 = v55 + 7;
          if (*((char *)v55 + 79) < 0)
          {
            v90 = v55[8];
            if (v90 != 1)
            {
              if (v90 != 4)
                goto LABEL_214;
              v88 = (_QWORD *)*v88;
              goto LABEL_213;
            }
            v88 = (_QWORD *)*v88;
          }
          else
          {
            v89 = *((unsigned __int8 *)v55 + 79);
            if (v89 != 1)
            {
              if (v89 != 4)
              {
LABEL_214:
                v92 = 0;
LABEL_225:
                Espresso::abstract_context::set_generic_option(v87, (const char *)v56, v92);
                (*(void (**)(Espresso::abstract_context *, _QWORD *, uint64_t))(*(_QWORD *)v87 + 144))(v87, v56, v92);
                goto LABEL_249;
              }
LABEL_213:
              v91 = *(_DWORD *)v88 == 1702195828;
LABEL_222:
              v92 = v91;
              goto LABEL_225;
            }
          }
          v91 = *(_BYTE *)v88 == 49;
          goto LABEL_222;
        }
        v71 = v55[5];
        if (v71 > 19)
        {
          if (v71 != 20)
          {
            if (v71 != 24)
            {
              if (v71 != 25)
                goto LABEL_249;
              v72 = *(_QWORD *)*v56 == 0x7774656E5F726570 && *(_QWORD *)(*v56 + 8) == 0x666E6F635F6B726FLL;
              v73 = v72 && *(_QWORD *)(*v56 + 16) == 0x6F69746172756769;
              if (!v73 || *(_BYTE *)(*v56 + 24) != 110)
                goto LABEL_249;
              goto LABEL_160;
            }
            v56 = (_QWORD *)*v56;
            goto LABEL_190;
          }
          v56 = (_QWORD *)*v56;
LABEL_185:
          v82 = *((unsigned int *)v56 + 4);
          v83 = *v56 == 0x757165735F657375 && v56[1] == 0x635F6C6169746E65;
          v84 = 1935764578;
LABEL_194:
          if (!v83 || v82 != v84)
            goto LABEL_249;
          goto LABEL_206;
        }
        if (v71 == 12)
        {
          v56 = (_QWORD *)*v56;
          goto LABEL_201;
        }
        if (v71 == 15)
        {
          v56 = (_QWORD *)*v56;
          goto LABEL_175;
        }
      }
LABEL_249:
      v99 = (_QWORD *)v55[1];
      if (v99)
      {
        do
        {
          v100 = v99;
          v99 = (_QWORD *)*v99;
        }
        while (v99);
      }
      else
      {
        do
        {
          v100 = (_QWORD *)v55[2];
          _ZF = *v100 == (_QWORD)v55;
          v55 = v100;
        }
        while (!_ZF);
      }
      v55 = v100;
    }
    while (v100 != (_QWORD *)(*a6 + 480));
  }
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v101, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v395 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v395, "objectForKeyedSubscript:", CFSTR("com.apple.espresso.threads"));
  v394 = (void *)objc_claimAutoreleasedReturnValue();
  if (v394)
  {
    v102 = objc_msgSend(v394, "integerValue");
    v103 = *a4;
    Espresso::abstract_context::set_generic_option((Espresso::abstract_context *)*a4, "bnns_n_threads", v102);
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v103 + 144))(v103, "bnns_n_threads", v102);
    v104 = *a4;
    v105 = v102 == 1;
    Espresso::abstract_context::set_generic_option((Espresso::abstract_context *)*a4, "use_sequential_cblas", v105);
    (*(void (**)(uint64_t, const char *, _BOOL8))(*(_QWORD *)v104 + 144))(v104, "use_sequential_cblas", v105);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "format_version");
  v106 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  v107 = v106;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v107)
      goto LABEL_272;
  }
  else if (!v106)
  {
    goto LABEL_272;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "format_version");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 24))(*(_QWORD *)buf, &buf[16]))
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, &buf[16]);
  if (SBYTE7(v424) < 0)
    operator delete(*(void **)&buf[16]);
  v108 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v109 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (SHIBYTE(v416) < 0)
    operator delete(__p[0]);
LABEL_272:
  if (*(_BYTE *)(*a4 + 72))
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a6 + 576), *a5, a5[1]);
  std::string::basic_string[abi:ne180100]<0>(buf, "transform_params");
  v111 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v111)
  {
    v420 = 0;
    v421 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "transform_params");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v420);
    if (SBYTE7(v424) < 0)
      operator delete(*(void **)&buf[16]);
    v112 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v113 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    if (SHIBYTE(v416) < 0)
      operator delete(__p[0]);
    v115 = (uint64_t)v420;
    memset(&v422, 0, sizeof(v422));
    (*(void (**)(_QWORD *, std::string *))(*v420 + 32))(v420, &v422);
    v117 = v422.__r_.__value_.__l.__size_;
    v116 = v422.__r_.__value_.__r.__words[0];
    if (v422.__r_.__value_.__r.__words[0] != v422.__r_.__value_.__l.__size_)
    {
      __asm { FMOV            V9.2S, #1.0 }
      do
      {
        if (*(char *)(v116 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v419, *(const std::string::value_type **)v116, *(_QWORD *)(v116 + 8));
        }
        else
        {
          v122 = *(_OWORD *)v116;
          v419.__r_.__value_.__r.__words[2] = *(_QWORD *)(v116 + 16);
          *(_OWORD *)&v419.__r_.__value_.__l.__data_ = v122;
        }
        *(_DWORD *)buf = 1065353216;
        memset(&buf[12], 0, 20);
        *(_QWORD *)&buf[4] = 0x100000000;
        v424 = 0uLL;
        *(_QWORD *)&v425[0] = _D9;
        memset((char *)v425 + 8, 0, 20);
        v418 = 0uLL;
        Espresso::SerDes::generic_serdes_object::operator[](v115, (uint64_t)&v419, __p);
        Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, (uint64_t)&v418);
        if (v417 < 0)
          operator delete(v416);
        v123 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v124 = (unint64_t *)((char *)__p[1] + 8);
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(v418, (uint64_t)buf, 0);
        v126 = (uint64_t **)(*a6 + 328);
        __p[0] = &v419;
        v127 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v126, &v419, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        v128 = *(_OWORD *)((char *)v425 + 12);
        v129 = *(_OWORD *)buf;
        *(_OWORD *)(v127 + 72) = *(_OWORD *)&buf[16];
        v130 = v425[0];
        *(_OWORD *)(v127 + 88) = v424;
        *(_OWORD *)(v127 + 104) = v130;
        *(_OWORD *)(v127 + 116) = v128;
        *(_OWORD *)(v127 + 56) = v129;
        v131 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
        if (*((_QWORD *)&v418 + 1))
        {
          v132 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v419.__r_.__value_.__l.__data_);
        v116 += 24;
      }
      while (v116 != v117);
    }
    *(_QWORD *)buf = &v422;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v134 = (std::__shared_weak_count *)v421;
    if (v421)
    {
      v135 = (unint64_t *)(v421 + 8);
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "numerical_parameters");
  v137 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  v138 = v137;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v138)
      goto LABEL_340;
  }
  else if (!v137)
  {
    goto LABEL_340;
  }
  *(_OWORD *)&v422.__r_.__value_.__l.__data_ = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, "numerical_parameters");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v422);
  if (SBYTE7(v424) < 0)
    operator delete(*(void **)&buf[16]);
  v139 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v140 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  if (SHIBYTE(v416) < 0)
    operator delete(__p[0]);
  v142 = (std::__shared_weak_count *)v422.__r_.__value_.__l.__size_;
  v414 = *(_OWORD *)&v422.__r_.__value_.__l.__data_;
  if (v422.__r_.__value_.__l.__size_)
  {
    v143 = (unint64_t *)(v422.__r_.__value_.__l.__size_ + 8);
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
  }
  Espresso::load_network_metadata(Espresso::SerDes::generic_serdes_object &,std::string const&,std::string const&,std::shared_ptr<Espresso::abstract_context> const&,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()((uint64_t)buf, (uint64_t *)&v414);
  v145 = (_QWORD *)*a6;
  v146 = (_QWORD **)(*a6 + 360);
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*v146);
  v147 = *(_QWORD **)&buf[8];
  v145[44] = *(_QWORD *)buf;
  v145[45] = v147;
  v148 = *(_QWORD *)&buf[16];
  v145[46] = *(_QWORD *)&buf[16];
  if (v148)
  {
    v147[2] = v146;
    *(_QWORD *)buf = &buf[8];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v147 = 0;
  }
  else
  {
    v145[44] = v146;
  }
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v147);
  if (v142)
  {
    p_shared_owners = (unint64_t *)&v142->__shared_owners_;
    do
      v150 = __ldaxr(p_shared_owners);
    while (__stlxr(v150 - 1, p_shared_owners));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v151 = (std::__shared_weak_count *)v422.__r_.__value_.__l.__size_;
  if (v422.__r_.__value_.__l.__size_)
  {
    v152 = (unint64_t *)(v422.__r_.__value_.__l.__size_ + 8);
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
LABEL_340:
  std::string::basic_string[abi:ne180100]<0>(buf, "io_bind_info");
  v154 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  v155 = v154;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v155)
      goto LABEL_369;
  }
  else if (!v154)
  {
    goto LABEL_369;
  }
  *(_OWORD *)&v422.__r_.__value_.__l.__data_ = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, "io_bind_info");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v422);
  if (SBYTE7(v424) < 0)
    operator delete(*(void **)&buf[16]);
  v156 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v157 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (SHIBYTE(v416) < 0)
    operator delete(__p[0]);
  v159 = (std::__shared_weak_count *)v422.__r_.__value_.__l.__size_;
  v413 = *(_OWORD *)&v422.__r_.__value_.__l.__data_;
  if (v422.__r_.__value_.__l.__size_)
  {
    v160 = (unint64_t *)(v422.__r_.__value_.__l.__size_ + 8);
    do
      v161 = __ldxr(v160);
    while (__stxr(v161 + 1, v160));
  }
  Espresso::load_network_metadata(Espresso::SerDes::generic_serdes_object &,std::string const&,std::string const&,std::shared_ptr<Espresso::abstract_context> const&,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()((uint64_t)buf, (uint64_t *)&v413);
  v162 = (_QWORD *)*a6;
  v163 = (_QWORD **)(*a6 + 384);
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*v163);
  v164 = *(_QWORD **)&buf[8];
  v162[47] = *(_QWORD *)buf;
  v162[48] = v164;
  v165 = *(_QWORD *)&buf[16];
  v162[49] = *(_QWORD *)&buf[16];
  if (v165)
  {
    v164[2] = v163;
    *(_QWORD *)buf = &buf[8];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v164 = 0;
  }
  else
  {
    v162[47] = v163;
  }
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v164);
  if (v159)
  {
    v166 = (unint64_t *)&v159->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v168 = (std::__shared_weak_count *)v422.__r_.__value_.__l.__size_;
  if (v422.__r_.__value_.__l.__size_)
  {
    v169 = (unint64_t *)(v422.__r_.__value_.__l.__size_ + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
LABEL_369:
  std::string::basic_string[abi:ne180100]<0>(buf, "numerical_properties");
  v171 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  v172 = v171;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v172)
      goto LABEL_417;
  }
  else if (!v171)
  {
    goto LABEL_417;
  }
  *(_OWORD *)&v419.__r_.__value_.__l.__data_ = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, "numerical_properties");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v419);
  if (SBYTE7(v424) < 0)
    operator delete(*(void **)&buf[16]);
  v173 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v174 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  if (SHIBYTE(v416) < 0)
    operator delete(__p[0]);
  v176 = v419.__r_.__value_.__r.__words[0];
  __p[0] = 0;
  __p[1] = 0;
  v416 = 0;
  (*(void (**)(std::string::size_type, void **))(*(_QWORD *)v419.__r_.__value_.__l.__data_ + 32))(v419.__r_.__value_.__r.__words[0], __p);
  v177 = (char *)__p[0];
  for (j = (char *)__p[1]; v177 != j; v177 += 24)
  {
    if (v177[23] < 0)
    {
      std::string::__init_copy_ctor_external(&v422, *(const std::string::value_type **)v177, *((_QWORD *)v177 + 1));
    }
    else
    {
      v179 = *(_OWORD *)v177;
      v422.__r_.__value_.__r.__words[2] = *((_QWORD *)v177 + 2);
      *(_OWORD *)&v422.__r_.__value_.__l.__data_ = v179;
    }
    LODWORD(v418) = 0;
    v180 = Espresso::keys_translation::c_api_engine_from_name(&v422);
    LODWORD(v418) = Espresso::keys_translation::cpp_platform_from_c_api(v180);
    v420 = 0;
    v421 = 0;
    Espresso::SerDes::generic_serdes_object::operator[](v176, (uint64_t)&v422, buf);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v420);
    if (SBYTE7(v424) < 0)
      operator delete(*(void **)&buf[16]);
    v181 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v182 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
    v184 = (std::__shared_weak_count *)v421;
    v412[0] = (uint64_t)v420;
    v412[1] = v421;
    if (v421)
    {
      v185 = (unint64_t *)(v421 + 8);
      do
        v186 = __ldxr(v185);
      while (__stxr(v186 + 1, v185));
    }
    Espresso::load_network_metadata(Espresso::SerDes::generic_serdes_object &,std::string const&,std::string const&,std::shared_ptr<Espresso::abstract_context> const&,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()((uint64_t)buf, v412);
    v187 = std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(*a6 + 400), v418, &v418);
    v188 = (uint64_t *)(v187 + 6);
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v187[6]);
    v189 = *(uint64_t **)&buf[8];
    v187[5] = *(uint64_t **)buf;
    v187[6] = v189;
    v190 = *(_QWORD *)&buf[16];
    v187[7] = *(uint64_t **)&buf[16];
    if (v190)
    {
      v189[2] = (uint64_t)v188;
      *(_QWORD *)buf = &buf[8];
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      v189 = 0;
    }
    else
    {
      v187[5] = v188;
    }
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v189);
    if (v184)
    {
      v191 = (unint64_t *)&v184->__shared_owners_;
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v193 = (std::__shared_weak_count *)v421;
    if (v421)
    {
      v194 = (unint64_t *)(v421 + 8);
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v422.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v196 = (std::__shared_weak_count *)v419.__r_.__value_.__l.__size_;
  if (v419.__r_.__value_.__l.__size_)
  {
    v197 = (unint64_t *)(v419.__r_.__value_.__l.__size_ + 8);
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
LABEL_417:
  std::string::basic_string[abi:ne180100]<0>(buf, "configurations");
  v199 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  v200 = v199;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v200)
      goto LABEL_433;
  }
  else if (!v199)
  {
    goto LABEL_433;
  }
  v201 = *a6;
  std::string::basic_string[abi:ne180100]<0>(buf, "configurations");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a1 + 120))(&v410, a1, buf);
  v202 = (Espresso *)Espresso::net::restore_additional_configurations(v201, &v410);
  v204 = (char)v202;
  v205 = v411;
  if (v411)
  {
    v206 = (unint64_t *)&v411->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if ((v204 & 1) != 0)
      goto LABEL_433;
  }
  else if ((v204 & 1) != 0)
  {
    goto LABEL_433;
  }
  Espresso::espresso_os_log_subsystem(v202, v203);
  v208 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_190DAF000, v208, OS_LOG_TYPE_ERROR, "Cannot load configurations", buf, 2u);
  }

LABEL_433:
  std::string::basic_string[abi:ne180100]<0>(buf, "analyses");
  v209 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  v210 = v209;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v210)
      goto LABEL_577;
  }
  else if (!v209)
  {
    goto LABEL_577;
  }
  v211 = MEMORY[0x19401D4A4]();
  __p[0] = 0;
  __p[1] = 0;
  v416 = 0;
  std::string::basic_string[abi:ne180100]<0>(buf, "analyses");
  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a1 + 120))(&v422, a1, buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  (*(void (**)(std::string::size_type, void **))(*(_QWORD *)v422.__r_.__value_.__l.__data_ + 32))(v422.__r_.__value_.__r.__words[0], __p);
  context = (void *)v211;
  v213 = (const void **)__p[0];
  v212 = (const void **)__p[1];
  if (__p[0] != __p[1])
  {
    while (1)
    {
      v214 = strlen((const char *)((unint64_t)"N8Espresso27pass_constant_if_conditionsE" & 0x7FFFFFFFFFFFFFFFLL));
      v215 = v214;
      v216 = *((unsigned __int8 *)v213 + 23);
      if (*((char *)v213 + 23) < 0)
      {
        v219 = (size_t)v213[1];
        if (v214 != v219)
        {
          v218 = strlen((const char *)((unint64_t)"N8Espresso31analysis_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL));
          goto LABEL_468;
        }
        if (v214 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v217 = *v213;
      }
      else
      {
        v217 = v213;
        if (v215 != v216)
        {
          v218 = strlen((const char *)((unint64_t)"N8Espresso31analysis_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL));
LABEL_464:
          if (v218 != v216)
          {
            v234 = strlen((const char *)((unint64_t)"N8Espresso30analysis_to_preserve_mil_typesE" & 0x7FFFFFFFFFFFFFFFLL));
LABEL_495:
            if (v234 != v216)
            {
              v255 = strlen((const char *)((unint64_t)"N8Espresso23analysis_debug_metadataE" & 0x7FFFFFFFFFFFFFFFLL));
LABEL_516:
              v219 = v255;
              v266 = v213;
              if (v255 != v216)
              {
                v267 = strlen((const char *)((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL));
LABEL_537:
                v219 = v267;
                v278 = v213;
                if (v267 != v216)
                  goto LABEL_545;
                goto LABEL_544;
              }
              goto LABEL_523;
            }
            v219 = v234;
            v254 = v213;
            goto LABEL_502;
          }
          v219 = v218;
          v233 = v213;
          goto LABEL_471;
        }
      }
      if (!memcmp(v217, (const void *)((unint64_t)"N8Espresso27pass_constant_if_conditionsE" & 0x7FFFFFFFFFFFFFFFLL), v215))break;
LABEL_463:
      v218 = strlen((const char *)((unint64_t)"N8Espresso31analysis_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL));
      if ((v216 & 0x80) == 0)
        goto LABEL_464;
      v219 = (size_t)v213[1];
LABEL_468:
      if (v218 != v219)
      {
        v234 = strlen((const char *)((unint64_t)"N8Espresso30analysis_to_preserve_mil_typesE" & 0x7FFFFFFFFFFFFFFFLL));
        goto LABEL_499;
      }
      if (v219 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v233 = *v213;
LABEL_471:
      if (!memcmp(v233, (const void *)((unint64_t)"N8Espresso31analysis_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL), v219))
      {
        v235 = operator new(0x20uLL);
        v235[1] = 0;
        v235[2] = 0;
        v235[3] = &off_1E2D9B4F8;
        v236 = v235 + 3;
        *v235 = &off_1E2DBE260;
        v419.__r_.__value_.__r.__words[0] = (std::string::size_type)(v235 + 3);
        v419.__r_.__value_.__l.__size_ = (std::string::size_type)v235;
        (*(void (**)(_BYTE *__return_ptr, std::string::size_type, const void **))(*(_QWORD *)v422.__r_.__value_.__l.__data_
                                                                                           + 120))(buf, v422.__r_.__value_.__r.__words[0], v213);
        v237 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*v236 + 16))(v236, buf);
        v238 = v237;
        v239 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_476;
        v240 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v241 = __ldaxr(v240);
        while (__stlxr(v241 - 1, v240));
        if (!v241)
        {
          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
          std::__shared_weak_count::__release_weak(v239);
          if (v238)
          {
LABEL_477:
            v242 = v419.__r_.__value_.__r.__words[0];
            if (!v419.__r_.__value_.__r.__words[0])
            {
              v391 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(buf, "Null analysis");
              std::runtime_error::runtime_error(v391, (const std::string *)buf);
              __cxa_throw(v391, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v243 = *a6 + 1120;
            v420 = *(_QWORD **)(*(_QWORD *)v419.__r_.__value_.__l.__data_ - 8);
            *(_QWORD *)buf = &v420;
            v244 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v243, (uint64_t)&v420, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
            v245 = v419.__r_.__value_.__l.__size_;
            if (v419.__r_.__value_.__l.__size_)
            {
              v246 = (unint64_t *)(v419.__r_.__value_.__l.__size_ + 8);
              do
                v247 = __ldxr(v246);
              while (__stxr(v247 + 1, v246));
            }
            v248 = (std::__shared_weak_count *)v244[4];
            v244[3] = v242;
            v244[4] = v245;
            if (v248)
            {
              v249 = (unint64_t *)&v248->__shared_owners_;
              do
                v250 = __ldaxr(v249);
              while (__stlxr(v250 - 1, v249));
              if (!v250)
              {
                ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                std::__shared_weak_count::__release_weak(v248);
              }
            }
          }
        }
        else
        {
LABEL_476:
          if (v237)
            goto LABEL_477;
        }
        v251 = (std::__shared_weak_count *)v419.__r_.__value_.__l.__size_;
        if (v419.__r_.__value_.__l.__size_)
        {
          v252 = (unint64_t *)(v419.__r_.__value_.__l.__size_ + 8);
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
            std::__shared_weak_count::__release_weak(v251);
          }
        }
        v216 = *((unsigned __int8 *)v213 + 23);
      }
      v234 = strlen((const char *)((unint64_t)"N8Espresso30analysis_to_preserve_mil_typesE" & 0x7FFFFFFFFFFFFFFFLL));
      if ((v216 & 0x80) == 0)
        goto LABEL_495;
      v219 = (size_t)v213[1];
LABEL_499:
      if (v234 != v219)
      {
        v255 = strlen((const char *)((unint64_t)"N8Espresso23analysis_debug_metadataE" & 0x7FFFFFFFFFFFFFFFLL));
        goto LABEL_520;
      }
      if (v219 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v254 = *v213;
LABEL_502:
      if (!memcmp(v254, (const void *)((unint64_t)"N8Espresso30analysis_to_preserve_mil_typesE" & 0x7FFFFFFFFFFFFFFFLL), v219))
      {
        v256 = operator new(0x48uLL);
        v256[1] = 0;
        v256[2] = 0;
        *v256 = &off_1E2DBE0D8;
        v256[3] = &off_1E2D9A0C0;
        v257 = (char *)(v256 + 3);
        *((_OWORD *)v256 + 2) = 0u;
        *((_OWORD *)v256 + 3) = 0u;
        *((_DWORD *)v256 + 16) = 1065353216;
        *(_QWORD *)buf = v256 + 3;
        *(_QWORD *)&buf[8] = v256;
        (*(void (**)(std::string *__return_ptr, std::string::size_type, const void **))(*(_QWORD *)v422.__r_.__value_.__l.__data_
                                                                                                 + 120))(&v419, v422.__r_.__value_.__r.__words[0], v213);
        v258 = (*(uint64_t (**)(char *, std::string *))(*(_QWORD *)v257 + 16))(v257, &v419);
        v259 = v258;
        v260 = (std::__shared_weak_count *)v419.__r_.__value_.__l.__size_;
        if (!v419.__r_.__value_.__l.__size_)
          goto LABEL_507;
        v261 = (unint64_t *)(v419.__r_.__value_.__l.__size_ + 8);
        do
          v262 = __ldaxr(v261);
        while (__stlxr(v262 - 1, v261));
        if (!v262)
        {
          ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
          std::__shared_weak_count::__release_weak(v260);
          if (v259)
LABEL_508:
            Espresso::net::set_analysis<Espresso::analysis_to_preserve_mil_types>(*a6, buf);
        }
        else
        {
LABEL_507:
          if (v258)
            goto LABEL_508;
        }
        v263 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v264 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v265 = __ldaxr(v264);
          while (__stlxr(v265 - 1, v264));
          if (!v265)
          {
            ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
            std::__shared_weak_count::__release_weak(v263);
          }
        }
        v216 = *((unsigned __int8 *)v213 + 23);
      }
      v255 = strlen((const char *)((unint64_t)"N8Espresso23analysis_debug_metadataE" & 0x7FFFFFFFFFFFFFFFLL));
      if ((v216 & 0x80) == 0)
        goto LABEL_516;
      v219 = (size_t)v213[1];
LABEL_520:
      if (v255 != v219)
      {
        v267 = strlen((const char *)((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL));
        goto LABEL_541;
      }
      if (v219 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v266 = *v213;
LABEL_523:
      if (!memcmp(v266, (const void *)((unint64_t)"N8Espresso23analysis_debug_metadataE" & 0x7FFFFFFFFFFFFFFFLL), v219))
      {
        v268 = operator new(0xF0uLL);
        v268[1] = 0;
        v268[2] = 0;
        *v268 = &off_1E2DBCD60;
        v268[3] = &off_1E2D8F218;
        v269 = (char *)(v268 + 3);
        *((_OWORD *)v268 + 2) = 0u;
        *((_OWORD *)v268 + 3) = 0u;
        *((_OWORD *)v268 + 4) = 0u;
        *((_OWORD *)v268 + 5) = 0u;
        *((_OWORD *)v268 + 6) = 0u;
        *((_OWORD *)v268 + 7) = 0u;
        *((_OWORD *)v268 + 8) = 0u;
        *((_OWORD *)v268 + 9) = 0u;
        *((_OWORD *)v268 + 10) = 0u;
        *((_OWORD *)v268 + 11) = 0u;
        *((_OWORD *)v268 + 12) = 0u;
        *((_OWORD *)v268 + 13) = 0u;
        v268[28] = 0;
        *((_DWORD *)v268 + 58) = 1065353216;
        *(_QWORD *)buf = v268 + 3;
        *(_QWORD *)&buf[8] = v268;
        (*(void (**)(std::string *__return_ptr, std::string::size_type, const void **))(*(_QWORD *)v422.__r_.__value_.__l.__data_
                                                                                                 + 120))(&v419, v422.__r_.__value_.__r.__words[0], v213);
        v270 = (*(uint64_t (**)(char *, std::string *))(*(_QWORD *)v269 + 16))(v269, &v419);
        v271 = v270;
        v272 = (std::__shared_weak_count *)v419.__r_.__value_.__l.__size_;
        if (!v419.__r_.__value_.__l.__size_)
          goto LABEL_528;
        v273 = (unint64_t *)(v419.__r_.__value_.__l.__size_ + 8);
        do
          v274 = __ldaxr(v273);
        while (__stlxr(v274 - 1, v273));
        if (!v274)
        {
          ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
          std::__shared_weak_count::__release_weak(v272);
          if (v271)
LABEL_529:
            Espresso::net::set_analysis<Espresso::analysis_debug_metadata>(*a6, buf);
        }
        else
        {
LABEL_528:
          if (v270)
            goto LABEL_529;
        }
        v275 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v276 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v277 = __ldaxr(v276);
          while (__stlxr(v277 - 1, v276));
          if (!v277)
          {
            ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
            std::__shared_weak_count::__release_weak(v275);
          }
        }
        v216 = *((unsigned __int8 *)v213 + 23);
      }
      v267 = strlen((const char *)((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL));
      if ((v216 & 0x80) == 0)
        goto LABEL_537;
      v219 = (size_t)v213[1];
LABEL_541:
      if (v267 != v219)
        goto LABEL_545;
      if (v219 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v278 = *v213;
LABEL_544:
      if (!memcmp(v278, (const void *)((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL), v219))
      {
        v279 = operator new(0x48uLL);
        v279[1] = 0;
        v279[2] = 0;
        *v279 = &off_1E2DBD738;
        v279[3] = &off_1E2D93380;
        v280 = (char *)(v279 + 3);
        v279[8] = 0;
        *((_OWORD *)v279 + 2) = 0u;
        *((_OWORD *)v279 + 3) = 0u;
        *((_DWORD *)v279 + 16) = 1065353216;
        v419.__r_.__value_.__r.__words[0] = (std::string::size_type)(v279 + 3);
        v419.__r_.__value_.__l.__size_ = (std::string::size_type)v279;
        (*(void (**)(_BYTE *__return_ptr, std::string::size_type, const void **))(*(_QWORD *)v422.__r_.__value_.__l.__data_
                                                                                           + 120))(buf, v422.__r_.__value_.__r.__words[0], v213);
        v281 = (*(uint64_t (**)(char *, _BYTE *))(*(_QWORD *)v280 + 16))(v280, buf);
        v282 = v281;
        v283 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_551;
        v284 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v285 = __ldaxr(v284);
        while (__stlxr(v285 - 1, v284));
        if (!v285)
        {
          ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
          std::__shared_weak_count::__release_weak(v283);
          if (v282)
          {
LABEL_552:
            v286 = v419.__r_.__value_.__r.__words[0];
            if (!v419.__r_.__value_.__r.__words[0])
            {
              v390 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(buf, "Null analysis");
              std::runtime_error::runtime_error(v390, (const std::string *)buf);
              __cxa_throw(v390, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v287 = *a6 + 1120;
            v420 = *(_QWORD **)(*(_QWORD *)v419.__r_.__value_.__l.__data_ - 8);
            *(_QWORD *)buf = &v420;
            v288 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v287, (uint64_t)&v420, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
            v289 = v419.__r_.__value_.__l.__size_;
            if (v419.__r_.__value_.__l.__size_)
            {
              v290 = (unint64_t *)(v419.__r_.__value_.__l.__size_ + 8);
              do
                v291 = __ldxr(v290);
              while (__stxr(v291 + 1, v290));
            }
            v292 = (std::__shared_weak_count *)v288[4];
            v288[3] = v286;
            v288[4] = v289;
            if (v292)
            {
              v293 = (unint64_t *)&v292->__shared_owners_;
              do
                v294 = __ldaxr(v293);
              while (__stlxr(v294 - 1, v293));
              if (!v294)
              {
                ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                std::__shared_weak_count::__release_weak(v292);
              }
            }
          }
        }
        else
        {
LABEL_551:
          if (v281)
            goto LABEL_552;
        }
        v295 = (std::__shared_weak_count *)v419.__r_.__value_.__l.__size_;
        if (v419.__r_.__value_.__l.__size_)
        {
          v296 = (unint64_t *)(v419.__r_.__value_.__l.__size_ + 8);
          do
            v297 = __ldaxr(v296);
          while (__stlxr(v297 - 1, v296));
          if (!v297)
          {
            ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
            std::__shared_weak_count::__release_weak(v295);
          }
        }
      }
LABEL_545:
      v213 += 3;
      if (v213 == v212)
        goto LABEL_571;
    }
    v220 = operator new(0x48uLL);
    v220[1] = 0;
    v220[2] = 0;
    *v220 = &off_1E2DBE618;
    v220[3] = &off_1E2D9E910;
    v221 = (char *)(v220 + 3);
    v220[8] = 0;
    *((_OWORD *)v220 + 2) = 0u;
    *((_OWORD *)v220 + 3) = 0u;
    *((_DWORD *)v220 + 16) = 1065353216;
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)(v220 + 3);
    v419.__r_.__value_.__l.__size_ = (std::string::size_type)v220;
    (*(void (**)(_BYTE *__return_ptr, std::string::size_type, const void **))(*(_QWORD *)v422.__r_.__value_.__l.__data_
                                                                                       + 120))(buf, v422.__r_.__value_.__r.__words[0], v213);
    v222 = (*(uint64_t (**)(char *, _BYTE *))(*(_QWORD *)v221 + 16))(v221, buf);
    v223 = v222;
    v224 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_451;
    v225 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
      if ((v223 & 1) != 0)
      {
LABEL_452:
        v227 = v419.__r_.__value_.__r.__words[0];
        if (!v419.__r_.__value_.__r.__words[0])
        {
          v392 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(buf, "Null analysis");
          std::runtime_error::runtime_error(v392, (const std::string *)buf);
          __cxa_throw(v392, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v228 = *a6 + 1120;
        v420 = *(_QWORD **)(*(_QWORD *)v419.__r_.__value_.__l.__data_ - 8);
        *(_QWORD *)buf = &v420;
        v229 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v228, (uint64_t)&v420, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
        v230 = (std::__shared_weak_count *)v419.__r_.__value_.__l.__size_;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v229 + 3, v227, v419.__r_.__value_.__l.__size_);
        if (!v230)
          goto LABEL_462;
        goto LABEL_458;
      }
    }
    else
    {
LABEL_451:
      if ((v222 & 1) != 0)
        goto LABEL_452;
    }
    v230 = (std::__shared_weak_count *)v419.__r_.__value_.__l.__size_;
    if (!v419.__r_.__value_.__l.__size_)
    {
LABEL_462:
      v216 = *((unsigned __int8 *)v213 + 23);
      goto LABEL_463;
    }
LABEL_458:
    v231 = (unint64_t *)&v230->__shared_owners_;
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
    goto LABEL_462;
  }
LABEL_571:
  v298 = (std::__shared_weak_count *)v422.__r_.__value_.__l.__size_;
  if (v422.__r_.__value_.__l.__size_)
  {
    v299 = (unint64_t *)(v422.__r_.__value_.__l.__size_ + 8);
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  *(_QWORD *)buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  objc_autoreleasePoolPop(context);
LABEL_577:
  v301 = *a6;
  Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(&v420, *a6);
  if (v420)
  {
    if (*(_QWORD *)(v301 + 368))
    {
      for (k = (uint64_t *)v420[3]; k; k = (uint64_t *)*k)
      {
        v303 = *((_DWORD *)k + 10);
        v304 = (uint64_t **)(*a6 + 352);
        *(_QWORD *)buf = k + 2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v304, k + 2, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 16) = v303;
      }
    }
    else
    {
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      v305 = (uint64_t *)v420[3];
      if (v305)
      {
        do
        {
          v306 = *((_DWORD *)v305 + 10);
          __p[0] = v305 + 2;
          v307 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)buf, v305 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
          *((_QWORD *)v307 + 7) = 1065353216;
          *((_DWORD *)v307 + 16) = v306;
          *((_DWORD *)v307 + 17) = 1;
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v307 + 72, 0, 0, 0);
          v305 = (uint64_t *)*v305;
        }
        while (v305);
        v301 = *a6;
      }
      v308 = v301 + 360;
      std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*(_QWORD **)(v301 + 360));
      v309 = *(_QWORD **)&buf[8];
      *(_QWORD *)(v301 + 352) = *(_QWORD *)buf;
      *(_QWORD *)(v301 + 360) = v309;
      v310 = *(_QWORD *)&buf[16];
      *(_QWORD *)(v301 + 368) = *(_QWORD *)&buf[16];
      if (v310)
      {
        v309[2] = v308;
        *(_QWORD *)buf = &buf[8];
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = 0;
        v309 = 0;
      }
      else
      {
        *(_QWORD *)(v301 + 352) = v308;
      }
      std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v309);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "metadata_in_weights");
  v311 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, buf);
  v312 = v311;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v312)
      goto LABEL_740;
LABEL_593:
    __p[0] = 0;
    __p[1] = 0;
    v416 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v422, "metadata_in_weights");
    (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 128))(buf, a1, &v422);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate(__p);
    *(_OWORD *)__p = *(_OWORD *)buf;
    v416 = *(void **)&buf[16];
    memset(buf, 0, 24);
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
    if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v422.__r_.__value_.__l.__data_);
    v314 = (uint64_t *)__p[0];
    v313 = (uint64_t *)__p[1];
    if (__p[0] == __p[1])
    {
LABEL_739:
      *(_QWORD *)buf = __p;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      goto LABEL_740;
    }
    while (1)
    {
      v418 = 0uLL;
      memset(&v422, 0, sizeof(v422));
      v409 = 0uLL;
      v315 = *v314;
      std::string::basic_string[abi:ne180100]<0>(&v419, "name");
      Espresso::SerDes::generic_serdes_object::operator[](v315, (uint64_t)&v419, buf);
      v316.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v422);
      if (SBYTE7(v424) < 0)
        operator delete(*(void **)&buf[16]);
      v317 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v318 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v319 = __ldaxr(v318);
        while (__stlxr(v319 - 1, v318));
        if (!v319)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v317->__on_zero_shared)(v317, v316);
          std::__shared_weak_count::__release_weak(v317);
        }
      }
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v419.__r_.__value_.__l.__data_);
      v407 = 0;
      v408 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v419, "shape");
      Espresso::SerDes::generic_serdes_object::operator[](v315, (uint64_t)&v419, buf);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v407);
      if (SBYTE7(v424) < 0)
        operator delete(*(void **)&buf[16]);
      v320 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v321 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v322 = __ldaxr(v321);
        while (__stlxr(v322 - 1, v321));
        if (!v322)
        {
          ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
          std::__shared_weak_count::__release_weak(v320);
        }
      }
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v419.__r_.__value_.__l.__data_);
      v323 = v407;
      std::string::basic_string[abi:ne180100]<0>(&v419, "n");
      Espresso::SerDes::generic_serdes_object::operator[](v323, (uint64_t)&v419, buf);
      __s = xmmword_191A8AA80;
      if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 24))(*(_QWORD *)buf, &buf[16]))
      {
        v324 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, &buf[16]);
        *(_QWORD *)&v325 = 0x100000000;
        DWORD2(v325) = 1;
        HIDWORD(v325) = v324;
        __s = v325;
      }
      if (SBYTE7(v424) < 0)
        operator delete(*(void **)&buf[16]);
      v326 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v327 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v328 = __ldaxr(v327);
        while (__stlxr(v328 - 1, v327));
        if (!v328)
        {
          ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
          std::__shared_weak_count::__release_weak(v326);
        }
      }
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v419.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v419, "k");
      Espresso::SerDes::generic_serdes_object::operator[](v323, (uint64_t)&v419, buf);
      if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 24))(*(_QWORD *)buf, &buf[16]))
      {
        v329 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, &buf[16]);
        v330 = __s;
        DWORD2(v330) = v329;
        __s = v330;
      }
      if (SBYTE7(v424) < 0)
        operator delete(*(void **)&buf[16]);
      v331 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v332 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v333 = __ldaxr(v332);
        while (__stlxr(v333 - 1, v332));
        if (!v333)
        {
          ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
          std::__shared_weak_count::__release_weak(v331);
        }
      }
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v419.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v419, "h");
      Espresso::SerDes::generic_serdes_object::operator[](v323, (uint64_t)&v419, buf);
      if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 24))(*(_QWORD *)buf, &buf[16]))
      {
        v334 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, &buf[16]);
        v335 = __s;
        DWORD1(v335) = v334;
        __s = v335;
      }
      if (SBYTE7(v424) < 0)
        operator delete(*(void **)&buf[16]);
      v336 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v337 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v338 = __ldaxr(v337);
        while (__stlxr(v338 - 1, v337));
        if (!v338)
        {
          ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
          std::__shared_weak_count::__release_weak(v336);
        }
      }
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v419.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v419, "w");
      Espresso::SerDes::generic_serdes_object::operator[](v323, (uint64_t)&v419, buf);
      if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 24))(*(_QWORD *)buf, &buf[16]))
      {
        v339 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, &buf[16]);
        v340 = __s;
        LODWORD(v340) = v339;
        __s = v340;
      }
      if (SBYTE7(v424) < 0)
        operator delete(*(void **)&buf[16]);
      v341 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v342 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v343 = __ldaxr(v342);
        while (__stlxr(v343 - 1, v342));
        if (!v343)
        {
          ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
          std::__shared_weak_count::__release_weak(v341);
        }
      }
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v419.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v419, "_rank");
      Espresso::SerDes::generic_serdes_object::operator[](v323, (uint64_t)&v419, buf);
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 24))(*(_QWORD *)buf, &buf[16]);
      v398 = 0xFFFFFFFF00000001;
      if (v344)
      {
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, &buf[16]);
        LODWORD(v345) = 1;
        HIDWORD(v345) = v346;
        v398 = v345;
      }
      if (SBYTE7(v424) < 0)
        operator delete(*(void **)&buf[16]);
      v347 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v348 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
          std::__shared_weak_count::__release_weak(v347);
        }
      }
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v419.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(buf, "seq");
      v350 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v323 + 24))(v323, buf);
      v351 = v350;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (!v351)
          goto LABEL_684;
      }
      else if (!v350)
      {
        goto LABEL_684;
      }
      std::string::basic_string[abi:ne180100]<0>(&v419, "seq");
      Espresso::SerDes::generic_serdes_object::operator[](v323, (uint64_t)&v419, buf);
      if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 24))(*(_QWORD *)buf, &buf[16]))
        v398 = __PAIR64__(HIDWORD(v398), (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, &buf[16]));
      if (SBYTE7(v424) < 0)
        operator delete(*(void **)&buf[16]);
      v352 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v353 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v354 = __ldaxr(v353);
        while (__stlxr(v354 - 1, v353));
        if (!v354)
        {
          ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
          std::__shared_weak_count::__release_weak(v352);
        }
      }
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v419.__r_.__value_.__l.__data_);
LABEL_684:
      std::string::basic_string[abi:ne180100]<0>(buf, "data");
      if (!(*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)v315 + 24))(v315, buf))
      {
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        goto LABEL_716;
      }
      v355 = *a5;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v355)
        {
LABEL_691:
          *(_OWORD *)&v419.__r_.__value_.__l.__data_ = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(buf, "data");
          v356 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v315 + 80))(v315, buf);
          v357 = a5;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            v357 = a5;
          }
          v358 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v357 + 24))(*v357, v356);
          v359 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v357 + 80))(*v357, v356);
          if ((v359 & 0x3F) != 0)
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(buf, __s, SDWORD1(__s), SDWORD2(__s), SHIDWORD(__s), v398);
            v360 = *(_OWORD *)buf;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            v361 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
            v409 = v360;
            if (v361)
            {
              v362 = (unint64_t *)&v361->__shared_owners_;
              do
                v363 = __ldaxr(v362);
              while (__stlxr(v363 - 1, v362));
              if (!v363)
              {
                ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                std::__shared_weak_count::__release_weak(v361);
              }
            }
            v364 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v365 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v366 = __ldaxr(v365);
              while (__stlxr(v366 - 1, v365));
              if (!v366)
              {
                ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                std::__shared_weak_count::__release_weak(v364);
              }
            }
            memcpy(*(void **)(v409 + 32), (const void *)v359, v358);
          }
          else
          {
            v367 = (char *)operator new(0x68uLL);
            *((_QWORD *)v367 + 1) = 0;
            *((_QWORD *)v367 + 2) = 0;
            *(_QWORD *)v367 = &off_1E2DBECE0;
            *((_QWORD *)v367 + 3) = &off_1E2DA1210;
            *(_OWORD *)(v367 + 72) = 0u;
            *(_OWORD *)(v367 + 88) = 0u;
            *((_OWORD *)v367 + 2) = __s;
            *((_DWORD *)v367 + 12) = v398;
            *((_QWORD *)v367 + 7) = v359;
            v367[64] = 0;
            v368 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
            *(_QWORD *)&v409 = v367 + 24;
            *((_QWORD *)&v409 + 1) = v367;
            if (v368)
            {
              v369 = (unint64_t *)&v368->__shared_owners_;
              do
                v370 = __ldaxr(v369);
              while (__stlxr(v370 - 1, v369));
              if (!v370)
              {
                ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                std::__shared_weak_count::__release_weak(v368);
              }
            }
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v409 + 48), *a5, a5[1]);
          }
          v371 = (std::__shared_weak_count *)v419.__r_.__value_.__l.__size_;
          if (v419.__r_.__value_.__l.__size_)
          {
            v372 = (unint64_t *)(v419.__r_.__value_.__l.__size_ + 8);
            do
              v373 = __ldaxr(v372);
            while (__stlxr(v373 - 1, v372));
            if (!v373)
            {
              ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
              std::__shared_weak_count::__release_weak(v371);
            }
          }
        }
      }
      else if (v355)
      {
        goto LABEL_691;
      }
LABEL_716:
      v374 = *a6;
      v401 = __s;
      v402 = v398;
      v403 = v418;
      v405 = 0;
      v406 = 0;
      v404 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v404, 0, 0, 0);
      v375 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
      v400 = v409;
      if (*((_QWORD *)&v409 + 1))
      {
        v376 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
        do
          v377 = __ldxr(v376);
        while (__stxr(v377 + 1, v376));
      }
      Espresso::net::set_metadata_for_key(v374, (uint64_t)&v422, &v401, &v400);
      if (v375)
      {
        v378 = (unint64_t *)&v375->__shared_owners_;
        do
          v379 = __ldaxr(v378);
        while (__stlxr(v379 - 1, v378));
        if (!v379)
        {
          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
          std::__shared_weak_count::__release_weak(v375);
        }
      }
      if (v404)
      {
        v405 = v404;
        operator delete(v404);
      }
      v380 = v408;
      if (v408)
      {
        v381 = (unint64_t *)&v408->__shared_owners_;
        do
          v382 = __ldaxr(v381);
        while (__stlxr(v382 - 1, v381));
        if (!v382)
        {
          ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
          std::__shared_weak_count::__release_weak(v380);
        }
      }
      v383 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
      if (*((_QWORD *)&v409 + 1))
      {
        v384 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
        do
          v385 = __ldaxr(v384);
        while (__stlxr(v385 - 1, v384));
        if (!v385)
        {
          ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
          std::__shared_weak_count::__release_weak(v383);
        }
      }
      if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v422.__r_.__value_.__l.__data_);
      v314 += 2;
      if (v314 == v313)
        goto LABEL_739;
    }
  }
  if (v311)
    goto LABEL_593;
LABEL_740:
  memset(buf, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(&v422, "layers");
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 128))(__p, a1, &v422);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((void **)buf);
  *(_OWORD *)buf = *(_OWORD *)__p;
  *(_QWORD *)&buf[16] = v416;
  __p[1] = 0;
  v416 = 0;
  __p[0] = 0;
  v419.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
  if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v422.__r_.__value_.__l.__data_);
  *(_BYTE *)(*a6 + 1281) = Espresso::check_3d_layer_from_serdes((uint64_t **)buf);
  __p[0] = buf;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v386 = (std::__shared_weak_count *)v421;
  if (v421)
  {
    v387 = (unint64_t *)(v421 + 8);
    do
      v388 = __ldaxr(v387);
    while (__stlxr(v388 - 1, v387));
    if (!v388)
    {
      ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
      std::__shared_weak_count::__release_weak(v386);
    }
  }

}

void sub_190EA4E2C()
{
  uint64_t v0;
  uint64_t v1;

  if (*(char *)(v0 - 217) < 0)
    operator delete(*(void **)(v0 - 240));
  *(_QWORD *)(v0 - 208) = &v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v0 - 208);
  JUMPOUT(0x190EA55D0);
}

void sub_190EA4E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  int v54;
  uint64_t v55;

  if (*(char *)(v55 - 185) < 0)
  {
    operator delete(*(void **)(v55 - 208));
    if ((v54 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v54)
  {
LABEL_6:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](v55 - 240);
    *(_QWORD *)(v55 - 240) = &a45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 240));
    JUMPOUT(0x190EA55D4);
  }
  __cxa_free_exception(v53);
  goto LABEL_6;
}

void sub_190EA4E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  int v54;
  uint64_t v55;

  if (*(char *)(v55 - 185) < 0)
  {
    operator delete(*(void **)(v55 - 208));
    if ((v54 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v54)
  {
LABEL_6:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
    JUMPOUT(0x190EA531CLL);
  }
  __cxa_free_exception(v53);
  goto LABEL_6;
}

void sub_190EA4E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  int v54;
  uint64_t v55;

  if (*(char *)(v55 - 185) < 0)
  {
    operator delete(*(void **)(v55 - 208));
    if ((v54 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v54)
  {
LABEL_6:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
    JUMPOUT(0x190EA531CLL);
  }
  __cxa_free_exception(v53);
  goto LABEL_6;
}

void sub_190EA4ED0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (*(char *)(v50 - 217) < 0)
    operator delete(*(void **)(v50 - 240));
  if (a50 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 185) < 0)
    operator delete(*(void **)(v50 - 208));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a16);
  JUMPOUT(0x190EA55F8);
}

void sub_190EA5278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  JUMPOUT(0x190EA528CLL);
}

void sub_190EA529C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  JUMPOUT(0x190EA52B4);
}

void sub_190EA52CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  JUMPOUT(0x190EA531CLL);
}

void sub_190EA52F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_190EA5300()
{
  JUMPOUT(0x190EA531CLL);
}

void sub_190EA5308()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 208);
  JUMPOUT(0x190EA5314);
}

void sub_190EA5358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (*(char *)(v53 - 217) < 0)
    operator delete(*(void **)(v53 - 240));
  *(_QWORD *)(v53 - 208) = &a45;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 208));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v53 - 256);
  JUMPOUT(0x190EA55DCLL);
}

void sub_190EA5368()
{
  uint64_t v0;

  if (*(char *)(v0 - 185) < 0)
    operator delete(*(void **)(v0 - 208));
  JUMPOUT(0x190EA535CLL);
}

void sub_190EA5398()
{
  JUMPOUT(0x190EA55E8);
}

void sub_190EA53A4()
{
  JUMPOUT(0x190EA5594);
}

void sub_190EA53D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;

  if ((*(char *)(v45 - 185) & 0x80000000) == 0)
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
    if (*(char *)(v45 - 217) < 0)
      operator delete(*(void **)(v45 - 240));
    *(_QWORD *)(v45 - 208) = &a45;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 208));
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 256);
    JUMPOUT(0x190EA55DCLL);
  }
  JUMPOUT(0x190EA5558);
}

void sub_190EA5418(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  JUMPOUT(0x190EA556CLL);
}

void sub_190EA546C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a35);
  if (*(char *)(v45 - 217) < 0)
    operator delete(*(void **)(v45 - 240));
  *(_QWORD *)(v45 - 208) = &a45;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v45 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 256);
  JUMPOUT(0x190EA55DCLL);
}

void sub_190EA5474(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a58 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (*(char *)(v58 - 217) < 0)
    operator delete(*(void **)(v58 - 240));
  *(_QWORD *)(v58 - 208) = &a45;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 208));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 256);
  JUMPOUT(0x190EA55DCLL);
}

void sub_190EA547C()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 256);
  JUMPOUT(0x190EA54B8);
}

void sub_190EA54E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a45);
  JUMPOUT(0x190EA55A4);
}

void sub_190EA54FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (a50 < 0)
    operator delete(__p);
  __p = (void *)(v50 - 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v50 - 240);
  JUMPOUT(0x190EA55E8);
}

void sub_190EA5540()
{
  uint64_t v0;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy((void **)(v0 - 208));
  JUMPOUT(0x190EA554CLL);
}

void sub_190EA55A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  if (a58 < 0)
    operator delete(__p);
  *(_QWORD *)(v58 - 208) = v58 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 208));
  JUMPOUT(0x190EA55D0);
}

void std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  _DWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  void *v66[2];
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  void *__p[2];
  char v71;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v66, "center_mean");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v68 + 40))(v68, __p);
    if (v71 < 0)
      operator delete(__p[0]);
    v33 = v69;
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v67 < 0)
      operator delete(v66[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "is_network_bgr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v68 + 40))(v68, __p);
    if (v71 < 0)
      operator delete(__p[0]);
    v36 = v69;
    if (v69)
    {
      v37 = (unint64_t *)&v69->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v67 < 0)
      operator delete(v66[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "is_image_bgr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v68 + 40))(v68, __p);
    if (v71 < 0)
      operator delete(__p[0]);
    v39 = v69;
    if (v69)
    {
      v40 = (unint64_t *)&v69->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v67 < 0)
      operator delete(v66[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "scale");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
      *(float *)a2 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v68 + 96))(v68, __p);
    if (v71 < 0)
      operator delete(__p[0]);
    v42 = v69;
    if (v69)
    {
      v43 = (unint64_t *)&v69->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v67 < 0)
      operator delete(v66[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "bias_r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
      *(float *)(a2 + 16) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v68 + 96))(v68, __p);
    if (v71 < 0)
      operator delete(__p[0]);
    v45 = v69;
    if (v69)
    {
      v46 = (unint64_t *)&v69->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v67 < 0)
      operator delete(v66[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "bias_g");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
      *(float *)(a2 + 20) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v68 + 96))(v68, __p);
    if (v71 < 0)
      operator delete(__p[0]);
    v48 = v69;
    if (v69)
    {
      v49 = (unint64_t *)&v69->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v67 < 0)
      operator delete(v66[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "bias_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
      *(float *)(a2 + 24) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v68 + 96))(v68, __p);
    if (v71 < 0)
      operator delete(__p[0]);
    v51 = v69;
    if (v69)
    {
      v52 = (unint64_t *)&v69->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (v67 < 0)
      operator delete(v66[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "bias_a");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
      *(float *)(a2 + 28) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v68 + 96))(v68, __p);
    if (v71 < 0)
      operator delete(__p[0]);
    v54 = v69;
    if (v69)
    {
      v55 = (unint64_t *)&v69->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v67 < 0)
      operator delete(v66[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "no_alpha_premultiply");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
      *(_DWORD *)(a2 + 72) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v68 + 40))(v68, __p);
    if (v71 < 0)
      operator delete(__p[0]);
    v30 = v69;
    if (!v69)
      goto LABEL_179;
    v57 = (unint64_t *)&v69->__shared_owners_;
    do
      v32 = __ldaxr(v57);
    while (__stlxr(v32 - 1, v57));
    goto LABEL_177;
  }
  std::string::basic_string[abi:ne180100]<0>(v66, "center_mean");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 160))(v68, __p, a2 + 4);
  if (v71 < 0)
    operator delete(__p[0]);
  v6 = v69;
  if (v69)
  {
    v7 = (unint64_t *)&v69->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v67 < 0)
    operator delete(v66[0]);
  std::string::basic_string[abi:ne180100]<0>(v66, "is_network_bgr");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 160))(v68, __p, a2 + 12);
  if (v71 < 0)
    operator delete(__p[0]);
  v9 = v69;
  if (v69)
  {
    v10 = (unint64_t *)&v69->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v67 < 0)
    operator delete(v66[0]);
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v66, "is_image_bgr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 160))(v68, __p, a2 + 8);
    if (v71 < 0)
      operator delete(__p[0]);
    v12 = v69;
    if (v69)
    {
      v13 = (unint64_t *)&v69->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v67 < 0)
      operator delete(v66[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v66, "scale");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 216))(v68, __p, a2);
  if (v71 < 0)
    operator delete(__p[0]);
  v15 = v69;
  if (v69)
  {
    v16 = (unint64_t *)&v69->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v67 < 0)
    operator delete(v66[0]);
  std::string::basic_string[abi:ne180100]<0>(v66, "bias_r");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 216))(v68, __p, a2 + 16);
  if (v71 < 0)
    operator delete(__p[0]);
  v18 = v69;
  if (v69)
  {
    v19 = (unint64_t *)&v69->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v67 < 0)
    operator delete(v66[0]);
  std::string::basic_string[abi:ne180100]<0>(v66, "bias_g");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 216))(v68, __p, a2 + 20);
  if (v71 < 0)
    operator delete(__p[0]);
  v21 = v69;
  if (v69)
  {
    v22 = (unint64_t *)&v69->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v67 < 0)
    operator delete(v66[0]);
  std::string::basic_string[abi:ne180100]<0>(v66, "bias_b");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 216))(v68, __p, a2 + 24);
  if (v71 < 0)
    operator delete(__p[0]);
  v24 = v69;
  if (v69)
  {
    v25 = (unint64_t *)&v69->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v67 < 0)
    operator delete(v66[0]);
  std::string::basic_string[abi:ne180100]<0>(v66, "bias_a");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 216))(v68, __p, a2 + 28);
  if (v71 < 0)
    operator delete(__p[0]);
  v27 = v69;
  if (v69)
  {
    v28 = (unint64_t *)&v69->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v67 < 0)
    operator delete(v66[0]);
  if (*(_DWORD *)(a2 + 72))
  {
    std::string::basic_string[abi:ne180100]<0>(v66, "no_alpha_premultiply");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v68 + 160))(v68, __p, a2 + 72);
    if (v71 < 0)
      operator delete(__p[0]);
    v30 = v69;
    if (!v69)
      goto LABEL_179;
    v31 = (unint64_t *)&v69->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
LABEL_177:
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
LABEL_179:
    if (v67 < 0)
      operator delete(v66[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v66, "ane_direct_cvpixelbuffer");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
  v58 = (_DWORD *)(a2 + 68);
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
    *v58 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v68 + 40))(v68, __p);
  if (v71 < 0)
    operator delete(__p[0]);
  v59 = v69;
  if (v69)
  {
    v60 = (unint64_t *)&v69->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v67 < 0)
  {
    operator delete(v66[0]);
    if (!a3)
      goto LABEL_201;
  }
  else if (!a3)
  {
    goto LABEL_201;
  }
  if (*v58)
  {
    std::string::basic_string[abi:ne180100]<0>(v66, "use_direct_cvpixelbuffer");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v68 + 160))(v68, __p, v58);
    if (v71 < 0)
      operator delete(__p[0]);
    v62 = v69;
    if (!v69)
      goto LABEL_211;
    v63 = (unint64_t *)&v69->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    goto LABEL_209;
  }
LABEL_201:
  if ((a3 & 1) != 0)
    return;
  std::string::basic_string[abi:ne180100]<0>(v66, "use_direct_cvpixelbuffer");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v66, &v68);
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v68 + 24))(v68, __p))
    *v58 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v68 + 40))(v68, __p);
  if (v71 < 0)
    operator delete(__p[0]);
  v62 = v69;
  if (v69)
  {
    v65 = (unint64_t *)&v69->__shared_owners_;
    do
      v64 = __ldaxr(v65);
    while (__stlxr(v64 - 1, v65));
LABEL_209:
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
LABEL_211:
  if (v67 < 0)
    operator delete(v66[0]);
}

void sub_190EA63D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::check_3d_layer_from_serdes(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  _BYTE *p_p;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *__p;
  uint64_t v23;
  char v24;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  while (1)
  {
    v3 = *v1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "type");
    v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v3 + 24))(v3, &__p);
    v5 = v4;
    if (v24 < 0)
    {
      operator delete(__p);
      if (!v5)
        goto LABEL_55;
    }
    else if (!v4)
    {
      goto LABEL_55;
    }
    v6 = *v1;
    std::string::basic_string[abi:ne180100]<0>(v20, "type");
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v6 + 112))(&__p, v6, v20);
    if (v21 < 0)
      operator delete(v20[0]);
    v7 = v24;
    if (v24 < 0)
    {
      p_p = __p;
      if (v23 == 6)
      {
        if (*(_DWORD *)__p == 1819242352 && *((_WORD *)__p + 2) == 25651)
          goto LABEL_59;
        if (*(_DWORD *)__p == 1986948963 && *((_WORD *)__p + 2) == 25651)
          goto LABEL_59;
        goto LABEL_54;
      }
      if (v23 == 8)
      {
        if (*(_QWORD *)__p == 0x6433766E6F636564)
          goto LABEL_59;
        goto LABEL_54;
      }
      if (v23 != 9)
        goto LABEL_54;
    }
    else
    {
      if (v24 == 6)
      {
        if ((_DWORD)__p == 1819242352 && WORD2(__p) == 25651)
          return 1;
        if ((_DWORD)__p == 1986948963 && WORD2(__p) == 25651)
          return 1;
        goto LABEL_55;
      }
      if (v24 == 8)
      {
        if (__p == (void *)0x6433766E6F636564)
          return 1;
        goto LABEL_55;
      }
      if (v24 != 9)
        goto LABEL_55;
      p_p = &__p;
    }
    if (*(_QWORD *)p_p == 0x726F6E6863746162 && p_p[8] == 109)
    {
      v10 = *v1;
      std::string::basic_string[abi:ne180100]<0>(v20, "spatial_rank");
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v10 + 24))(v10, v20))
      {
        v11 = *v1;
        std::string::basic_string[abi:ne180100]<0>(v18, "spatial_rank");
        v12 = (*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, v18) == 3;
        if (v19 < 0)
          operator delete(v18[0]);
      }
      else
      {
        v12 = 0;
      }
      if (v21 < 0)
        operator delete(v20[0]);
      v7 = v24;
      if (v12)
        break;
    }
    if (v7 < 0)
    {
      p_p = __p;
LABEL_54:
      operator delete(p_p);
    }
LABEL_55:
    v1 += 2;
    if (v1 == v2)
      return 0;
  }
  if ((v24 & 0x80000000) == 0)
    return 1;
  p_p = __p;
LABEL_59:
  operator delete(p_p);
  return 1;
}

void sub_190EA6734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double Espresso::net::net(Espresso::net *this)
{
  double result;

  *((_QWORD *)this + 10) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_BYTE *)this + 180) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 23) = (char *)this + 192;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 26) = (char *)this + 216;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 29) = (char *)this + 240;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 32) = (char *)this + 264;
  *((_OWORD *)this + 18) = 0u;
  *((_QWORD *)this + 35) = (char *)this + 288;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 38) = (char *)this + 312;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 41) = (char *)this + 336;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 44) = (char *)this + 360;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_QWORD *)this + 47) = (char *)this + 384;
  *((_QWORD *)this + 50) = (char *)this + 408;
  *((_OWORD *)this + 30) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_QWORD *)this + 59) = (char *)this + 480;
  *((_DWORD *)this + 124) = 0;
  *((_BYTE *)this + 500) = 0;
  *((_QWORD *)this + 63) = (char *)this + 512;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 140) = 1065353216;
  *((_BYTE *)this + 568) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 97) = (char *)this + 784;
  *((_QWORD *)this + 102) = 0;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_QWORD *)this + 103) = (char *)this + 832;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_DWORD *)this + 220) = 1065353216;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_DWORD *)this + 230) = 1065353216;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_DWORD *)this + 240) = 1065353216;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((_DWORD *)this + 254) = 1065353216;
  *((_QWORD *)this + 134) = 0;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_DWORD *)this + 270) = 1065353216;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 288) = 1065353216;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((_DWORD *)this + 302) = 1065353216;
  *((_DWORD *)this + 312) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *(_DWORD *)((char *)this + 1279) = 0;
  *((_QWORD *)this + 159) = 0;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *(_OWORD *)((char *)this + 1320) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *((_DWORD *)this + 334) = 1065353216;
  *((_QWORD *)this + 168) = 0;
  *((_BYTE *)this + 1352) = 1;
  *((_WORD *)this + 704) = 0;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_QWORD *)this + 183) = 0;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *((_DWORD *)this + 368) = 1065353216;
  *((_DWORD *)this + 44) = 1;
  return result;
}

void std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void Espresso::net::set_analysis<Espresso::analysis_debug_metadata>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::runtime_error *exception;
  uint64_t v12;
  std::string v13;

  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "Null analysis");
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = *(_QWORD *)(*(_QWORD *)*a2 - 8);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(a1 + 1120, (uint64_t)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13);
  v5 = (_QWORD *)*a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v3[4];
  v3[3] = v5;
  v3[4] = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_190EA6AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

_QWORD *E5Common::AutoMmapPtr::AutoMmapPtr(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t *v10;
  const char *v11;
  size_t v12;
  const char *v13;
  FILE *v14;
  FILE *v15;
  int v16;
  void *v17;
  void *v18;
  std::string::size_type v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v23;
  __int128 v24;
  int *v25;
  std::string *p_p;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  int *v32;
  char *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  int *v40;
  std::string *v41;
  std::string::size_type size;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  int *v47;
  char *v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  int *v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  int *v62;
  char *v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  void *v68;
  void *exception;
  void *v70;
  std::string __p;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  stat v78;
  __int128 v79;
  size_t v80;
  _OWORD *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  *a1 = off_1E2D5CCE0;
  a1[1] = 0;
  v10 = a1 + 1;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (*(char *)(a2 + 23) >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (stat(v11, &v78))
  {
    std::operator+<char>();
    v38 = std::string::append(&v73, ", errno: ");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = __error();
    std::to_string(&v72, *v40);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v72;
    else
      v41 = (std::string *)v72.__r_.__value_.__r.__words[0];
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    else
      size = v72.__r_.__value_.__l.__size_;
    v43 = std::string::append(&v74, (const std::string::value_type *)v41, size);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v75, " (");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = __error();
    v48 = strerror(*v47);
    v49 = std::string::append(&v76, v48);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = std::string::append(&v77, ")");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v80 = v51->__r_.__value_.__r.__words[2];
    v79 = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v77.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_43;
    }
    else if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_44;
      goto LABEL_71;
    }
    operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_44:
      operator delete(v75.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_45;
      goto LABEL_72;
    }
LABEL_71:
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_45:
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_46;
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v72.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_46:
      operator delete(v74.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_75:
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v77, "AutoMmapPtr");
        E5RT::Status::Status(&v76, 1, &v79);
        E5RT::E5RTError::E5RTError(exception, &v77, &v76);
      }
LABEL_74:
      operator delete(v73.__r_.__value_.__l.__data_);
      goto LABEL_75;
    }
LABEL_73:
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_74;
  }
  v12 = E5RT::CastToSizeT<long long>(v78.st_size - a5);
  if (*(char *)(a2 + 23) >= 0)
    v13 = (const char *)a2;
  else
    v13 = *(const char **)a2;
  v14 = fopen(v13, "r");
  v15 = v14;
  if (!v14)
  {
    std::operator+<char>();
    v53 = std::string::append(&v73, ", errno: ");
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = __error();
    std::to_string(&v72, *v55);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &v72;
    else
      v56 = (std::string *)v72.__r_.__value_.__r.__words[0];
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    else
      v57 = v72.__r_.__value_.__l.__size_;
    v58 = std::string::append(&v74, (const std::string::value_type *)v56, v57);
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    v60 = std::string::append(&v75, " (");
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = __error();
    v63 = strerror(*v62);
    v64 = std::string::append(&v76, v63);
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v66 = std::string::append(&v77, ")");
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v80 = v66->__r_.__value_.__r.__words[2];
    v79 = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v77.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
    }
    else if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_57;
      goto LABEL_78;
    }
    operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_57:
      operator delete(v75.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      goto LABEL_79;
    }
LABEL_78:
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_58:
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_59;
      goto LABEL_80;
    }
LABEL_79:
    operator delete(v72.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_59:
      operator delete(v74.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_82:
        v70 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v77, "AutoMmapPtr");
        E5RT::Status::Status(&v76, 1, &v79);
        E5RT::E5RTError::E5RTError(v70, &v77, &v76);
      }
LABEL_81:
      operator delete(v73.__r_.__value_.__l.__data_);
      goto LABEL_82;
    }
LABEL_80:
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_81;
  }
  v16 = fileno(v14);
  v17 = mmap(0, v12, a3, a4, v16, a5);
  *(_QWORD *)&v79 = v17;
  *((_QWORD *)&v79 + 1) = &off_1E2DD0680;
  v81 = (__int128 *)((char *)&v79 + 8);
  v80 = v12;
  if ((unint64_t)v17 + 1 <= 1)
  {
    std::operator+<char>();
    v23 = std::string::append(&v72, ", errno: ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = __error();
    std::to_string(&__p, *v25);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v27 = __p.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v73, (const std::string::value_type *)p_p, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v74, " (");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = __error();
    v33 = strerror(*v32);
    v34 = std::string::append(&v75, v33);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v76, ")");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v76.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
    }
    else if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_31;
      goto LABEL_64;
    }
    operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_31:
      operator delete(v74.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_65;
    }
LABEL_64:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_32:
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_33;
      goto LABEL_66;
    }
LABEL_65:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_33:
      operator delete(v73.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_68:
        v68 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v76, "AutoMmapPtr");
        E5RT::Status::Status(&v75, 1, &v77);
        E5RT::E5RTError::E5RTError(v68, &v76, &v75);
      }
LABEL_67:
      operator delete(v72.__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
LABEL_66:
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_67;
  }
  if (v12)
    v18 = v17;
  else
    v18 = 0;
  a1[6] = v18;
  a1[7] = v12;
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](v10, (uint64_t *)&v79);
  v19 = v79;
  *(_QWORD *)&v79 = 0;
  if (v19)
  {
    v77.__r_.__value_.__r.__words[0] = v19;
    if (!v81)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_OWORD *, std::string *))(*(_QWORD *)v81 + 48))(v81, &v77);
  }
  v20 = v81;
  if (v81 == (__int128 *)((char *)&v79 + 8))
  {
    v21 = 4;
    v20 = (_QWORD *)&v79 + 1;
    goto LABEL_20;
  }
  if (v81)
  {
    v21 = 5;
LABEL_20:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  fclose(v15);
  return a1;
}

void sub_190EA7290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  E5RT::AsyncEventImpl *v54;
  uint64_t *v55;
  void *v56;
  int v57;
  uint64_t v58;

  E5RT::Status::~Status((E5RT::Status *)&a42);
  if (a54 < 0)
  {
    operator delete(__p);
    if ((v57 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v57)
  {
LABEL_6:
    if (*(char *)(v58 - 105) < 0)
      operator delete(*(void **)(v58 - 128));
    std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v55);
    E5RT::AsyncEventImpl::~AsyncEventImpl(v54);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v56);
  goto LABEL_6;
}

void sub_190EA75D8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x190EA75D0);
}

uint64_t E5RT::CastToSizeT<long long>(uint64_t result)
{
  void *exception;
  _QWORD v2[3];
  _BYTE v3[8];
  _QWORD v4[3];

  if (result < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v4, "CastToSizeT");
    std::string::basic_string[abi:ne180100]<0>(v2, "Cannot truncate value to size_t.");
    E5RT::Status::Status(v3, 1, v2);
    E5RT::E5RTError::E5RTError(exception, v4, v3);
  }
  return result;
}

void sub_190EA7684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::PrepareOpForEncode(E5RT::ExecutionStreamOperationInternal **this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  void (**v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  uint8_t v13;
  E5RT *context;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _BYTE *plan;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t InputPorts;
  uint64_t OutputPorts;
  uint64_t *v25;
  char v26;
  void *PortDescriptorRef;
  E5RT::OperandDescriptor *v28;
  E5RT::TensorDescriptor *v29;
  _QWORD *TensorShape;
  uint64_t *v31;
  uint64_t v32;
  unint64_t Rank;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  _BYTE *v43;
  _BYTE *v44;
  std::string *v45;
  NSObject *v46;
  uint64_t **i;
  uint64_t *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t **j;
  uint64_t *v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *k;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *m;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void **v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  void **v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  void **v112;
  void **v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  void **v118;
  void **v119;
  void *v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  std::string::size_type size;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  std::string::size_type v136;
  std::string *v137;
  __int128 v138;
  void *v139;
  int v140;
  _BYTE *v141;
  _BYTE *v142;
  _BYTE *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *exception;
  _QWORD *v152;
  const char *last_error;
  size_t v154;
  void *v155;
  uint64_t v156;
  E5RT::Ops::BaseEirInferenceOperation::Impl *v157;
  void (**v158)(_QWORD);
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  _BYTE v165[32];
  int v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  _BYTE v169[32];
  int v170;
  std::string v171;
  std::string v172;
  std::string v173;
  std::string v174;
  std::string v175;
  std::string v176;
  std::string v177;
  unint64_t __val;
  void *v179;
  void **v180;
  uint64_t v181;
  void *__p[2];
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  _QWORD v187[6];
  uint8_t buf[32];
  _DWORD v189[6];
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this))
    return;
  v157 = (E5RT::Ops::BaseEirInferenceOperation::Impl *)this;
  BYTE7(v183) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = os_signpost_id_generate(v2);

  if (SBYTE7(v183) < 0)
    operator delete(__p[0]);
  BYTE7(v183) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v4 = objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v183) < 0)
  {
    operator delete(__p[0]);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_10;
  }
  else if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_10;
  }
  if (os_signpost_enabled(v4))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "EIROpPrepareForEncode", (const char *)&unk_191C083FD, (uint8_t *)__p, 2u);
  }
LABEL_10:

  v187[0] = MEMORY[0x1E0C809B0];
  v187[1] = 3221225472;
  v187[2] = sub_190EEC208;
  v187[3] = &__block_descriptor_48_e5_v8__0l;
  v187[4] = v157;
  v187[5] = v3;
  v5 = (void (**)(_QWORD))MEMORY[0x19401D648](v187);
  v6 = *((_QWORD *)v157 + 15);
  __p[1] = 0;
  *(_QWORD *)&v183 = 0;
  __p[0] = 0;
  v9 = *(std::string **)(v6 + 56);
  v7 = v6 + 56;
  v8 = v9;
  v10 = *(unsigned __int8 *)(v7 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = (std::string *)v7;
  else
    v11 = v8;
  v12 = *(_QWORD *)(v7 + 8);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  v158 = v5;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)__p, v11, (std::string *)((char *)v11 + v12));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__p, 0);
  v13 = buf[0];
  if (SBYTE7(v183) < 0)
    operator delete(__p[0]);
  if (v13 == 255 || !v13)
  {
    std::operator+<char>();
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "PrepareOpForEncode");
    E5RT::Status::Status(v169, 13, __p);
    E5RT::E5RTError::E5RTError(exception, buf, v169);
  }
  context = (E5RT *)espresso_create_context(*(_DWORD *)(*((_QWORD *)v157 + 15) + 48), 0xFFFFFFFF);
  *((_QWORD *)v157 + 1) = context;
  if (!context)
  {
    v145 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to create context.");
    E5RT::Status::Status(v169, 2, buf);
    E5RT::E5RTError::E5RTError(v145, __p, v169);
  }
  if (E5RT::DoesCurrentPlatformSupportPinningNetworkMemory(context)
    && espresso_context_set_int_option(*((EspressoLight **)v157 + 1), "need_to_keep_blob_storage", 1))
  {
    v149 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to set context flag to keep blob storage alive.");
    E5RT::Status::Status(v169, 2, buf);
    E5RT::E5RTError::E5RTError(v149, __p, v169);
  }
  v15 = *(unsigned int *)(*((_QWORD *)v157 + 15) + 104);
  if (!(_DWORD)v15
    || !espresso_context_set_int_option(*((EspressoLight **)v157 + 1), "compute_unit_mask", v15))
  {
    goto LABEL_30;
  }
  BYTE7(v183) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if ((SBYTE7(v183) & 0x80000000) == 0)
  {
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      goto LABEL_29;
    goto LABEL_28;
  }
  operator delete(__p[0]);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
LABEL_28:
    sub_190EEE410(v17);
LABEL_29:

LABEL_30:
  espresso_tmp_enable_montreal(1);
  plan = (_BYTE *)espresso_create_plan(*((EspressoLight::espresso_context **)v157 + 1), 0);
  *((_QWORD *)v157 + 2) = plan;
  if (!plan)
  {
    v146 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to create plan.");
    E5RT::Status::Status(v169, 2, buf);
    E5RT::E5RTError::E5RTError(v146, __p, v169);
  }
  v19 = *((_QWORD *)v157 + 15);
  v20 = (char *)(v19 + 56);
  if (*(char *)(v19 + 79) < 0)
    v20 = *(char **)v20;
  if (espresso_plan_add_network(plan, v20, *(unsigned int *)(v19 + 52), (uint64_t)v157 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to add network to plan: ", 31);
    last_error = espresso_get_last_error();
    v154 = strlen(last_error);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)last_error, v154);
    v155 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "PrepareOpForEncode");
    std::stringbuf::str();
    E5RT::Status::Status(v165, 2, v169);
    E5RT::E5RTError::E5RTError(v155, buf, v165);
  }
  v179 = 0;
  v180 = 0;
  v181 = 0;
  if (espresso_get_additional_configuration_names(*((_QWORD *)v157 + 3), *((_QWORD *)v157 + 4), (uint64_t *)&v179))
  {
    v147 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to fetch configuration names.");
    E5RT::Status::Status(v169, 2, buf);
    E5RT::E5RTError::E5RTError(v147, __p, v169);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v180 - (_BYTE *)v179) >> 3) >= 2)
  {
    v21 = *((_QWORD *)v157 + 15);
    v22 = (char *)(v21 + 80);
    if (*(char *)(v21 + 103) < 0)
      v22 = *(char **)v22;
    if (espresso_network_select_configuration(*((_QWORD **)v157 + 3), *((_QWORD *)v157 + 4), v22))
    {
      v150 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(buf, "Failed to switch configurations");
      E5RT::Status::Status(v169, 2, buf);
      E5RT::E5RTError::E5RTError(v150, __p, v169);
    }
  }
  E5RT::Ops::BaseEirInferenceOperation::Impl::DeclareEIRInputsAndOutputs((E5RT::ExecutionStreamOperationInternal **)v157);
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)v157);
  E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateBuffersInfo((char *)v157, InputPorts);
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v157);
  E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateBuffersInfo((char *)v157, OutputPorts);
  if (espresso_plan_build(*((_QWORD **)v157 + 2)))
  {
    v148 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to build plan.");
    E5RT::Status::Status(v169, 2, buf);
    E5RT::E5RTError::E5RTError(v148, __p, v169);
  }
  __val = 0;
  v156 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)v157);
  v25 = *(uint64_t **)(v156 + 16);
  if (v25)
  {
    v26 = 0;
    do
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v25[5]);
      if (!E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef))
        goto LABEL_185;
      v28 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v25[5]);
      v29 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v28);
      if (E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v25[5]))
      {
        if ((E5RT::TensorDescriptor::HasKnownShape(v29) & 1) == 0)
          goto LABEL_185;
      }
      TensorShape = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v29);
      v31 = v25 + 2;
      v185 = 0u;
      v186 = 0u;
      v183 = 0u;
      v184 = 0u;
      *(_OWORD *)__p = 0u;
      v32 = (uint64_t)(v25 + 2);
      if (*((char *)v25 + 39) < 0)
        v32 = *v31;
      if (espresso_network_query_blob_shape(*((const void **)v157 + 3), *((_QWORD *)v157 + 4), v32, (uint64_t)&__val, (uint64_t)__p))
      {
        v144 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(buf, "PrepareOpForEncode");
        std::string::basic_string[abi:ne180100]<0>(v169, "Unable to query input dimensions.");
        E5RT::Status::Status(v165, 2, v169);
        E5RT::E5RTError::E5RTError(v144, buf, v165);
      }
      Rank = E5RT::TensorDescriptor::GetRank(v29);
      v34 = Rank;
      if (__val != Rank)
      {
        buf[23] = 4;
        strcpy((char *)buf, "e5rt");
        E5RT::GetE5RTLog((uint64_t)buf);
        v46 = objc_claimAutoreleasedReturnValue();
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v25 + 39) < 0)
            v31 = (uint64_t *)*v31;
          std::to_string((std::string *)v169, v34);
          v140 = v169[23];
          v141 = *(_BYTE **)v169;
          std::to_string((std::string *)v165, __val);
          v142 = v169;
          if (v140 < 0)
            v142 = v141;
          if (v165[23] >= 0)
            v143 = v165;
          else
            v143 = *(_BYTE **)v165;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v31;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v142;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v143;
          _os_log_error_impl(&dword_190DAF000, v46, OS_LOG_TYPE_ERROR, "Detected rank mistmatch between E5 and EIR. Input = %s, E5 rank = %s, EIR rank = %s. Skipped checking shape mistmatch.", buf, 0x20u);
          if ((v165[23] & 0x80000000) != 0)
            operator delete(*(void **)v165);
          if ((v169[23] & 0x80000000) != 0)
            operator delete(*(void **)v169);
        }

        goto LABEL_185;
      }
      if (Rank)
      {
        v35 = 0;
        while (1)
        {
          v36 = *(void **)(*TensorShape + 8 * v35);
          v37 = __p[v35];
          if (v36 != v37)
            break;
LABEL_52:
          if (++v35 >= v34)
            goto LABEL_42;
        }
        if (v36 < v37)
        {
          std::operator+<char>();
          v121 = std::string::append(&v174, " dim = ");
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          v175.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v173, v35);
          if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v123 = &v173;
          else
            v123 = (std::string *)v173.__r_.__value_.__r.__words[0];
          if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v173.__r_.__value_.__r.__words[2]);
          else
            size = v173.__r_.__value_.__l.__size_;
          v125 = std::string::append(&v175, (const std::string::value_type *)v123, size);
          v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
          v176.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v126;
          v125->__r_.__value_.__l.__size_ = 0;
          v125->__r_.__value_.__r.__words[2] = 0;
          v125->__r_.__value_.__r.__words[0] = 0;
          v127 = std::string::append(&v176, " E5 = ");
          v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
          v177.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v128;
          v127->__r_.__value_.__l.__size_ = 0;
          v127->__r_.__value_.__r.__words[2] = 0;
          v127->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v172, *(_QWORD *)(*TensorShape + 8 * v35));
          if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v129 = &v172;
          else
            v129 = (std::string *)v172.__r_.__value_.__r.__words[0];
          if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v130 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
          else
            v130 = v172.__r_.__value_.__l.__size_;
          v131 = std::string::append(&v177, (const std::string::value_type *)v129, v130);
          v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
          *(_QWORD *)&v165[16] = *((_QWORD *)&v131->__r_.__value_.__l + 2);
          *(_OWORD *)v165 = v132;
          v131->__r_.__value_.__l.__size_ = 0;
          v131->__r_.__value_.__r.__words[2] = 0;
          v131->__r_.__value_.__r.__words[0] = 0;
          v133 = std::string::append((std::string *)v165, " EIR = ");
          v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
          *(_QWORD *)&v169[16] = *((_QWORD *)&v133->__r_.__value_.__l + 2);
          *(_OWORD *)v169 = v134;
          v133->__r_.__value_.__l.__size_ = 0;
          v133->__r_.__value_.__r.__words[2] = 0;
          v133->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v171, (unint64_t)__p[v35]);
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135 = &v171;
          else
            v135 = (std::string *)v171.__r_.__value_.__r.__words[0];
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v136 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
          else
            v136 = v171.__r_.__value_.__l.__size_;
          v137 = std::string::append((std::string *)v169, (const std::string::value_type *)v135, v136);
          v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
          *(_QWORD *)&buf[16] = *((_QWORD *)&v137->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v138;
          v137->__r_.__value_.__l.__size_ = 0;
          v137->__r_.__value_.__r.__words[2] = 0;
          v137->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v171.__r_.__value_.__l.__data_);
            if ((v169[23] & 0x80000000) == 0)
              goto LABEL_215;
LABEL_243:
            operator delete(*(void **)v169);
            if ((v165[23] & 0x80000000) == 0)
              goto LABEL_244;
LABEL_216:
            operator delete(*(void **)v165);
            if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_217;
LABEL_245:
            operator delete(v172.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_246;
LABEL_218:
            operator delete(v177.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_219;
LABEL_247:
            operator delete(v176.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_248;
LABEL_220:
            operator delete(v173.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_221;
LABEL_249:
            operator delete(v175.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v174.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_223;
          }
          else
          {
            if ((v169[23] & 0x80000000) != 0)
              goto LABEL_243;
LABEL_215:
            if ((v165[23] & 0x80000000) != 0)
              goto LABEL_216;
LABEL_244:
            if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_245;
LABEL_217:
            if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_218;
LABEL_246:
            if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_247;
LABEL_219:
            if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_220;
LABEL_248:
            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_249;
LABEL_221:
            if ((SHIBYTE(v174.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_223:
              v139 = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(v169, "PrepareOpForEncode");
              E5RT::Status::Status(v165, 2, buf);
              E5RT::E5RTError::E5RTError(v139, v169, v165);
            }
          }
          operator delete(v174.__r_.__value_.__l.__data_);
          goto LABEL_223;
        }
        buf[23] = 4;
        strcpy((char *)buf, "e5rt");
        E5RT::GetE5RTLog((uint64_t)buf);
        v38 = objc_claimAutoreleasedReturnValue();
        v39 = v38;
        if ((char)buf[23] < 0)
        {
          operator delete(*(void **)buf);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
            goto LABEL_60;
        }
        else
        {
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            goto LABEL_72;
LABEL_60:
          v40 = (uint64_t)(v25 + 2);
          if (*((char *)v25 + 39) < 0)
            v40 = *v31;
          std::to_string((std::string *)v169, v35);
          if (v169[23] >= 0)
            v41 = v169;
          else
            v41 = *(_BYTE **)v169;
          std::to_string((std::string *)v165, *(_QWORD *)(*TensorShape + 8 * v35));
          v42 = v165[23];
          v43 = *(_BYTE **)v165;
          std::to_string(&v177, (unint64_t)__p[v35]);
          v44 = v165;
          if (v42 < 0)
            v44 = v43;
          v45 = &v177;
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v45 = (std::string *)v177.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v40;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v41;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v44;
          LOWORD(v189[0]) = 2080;
          *(_QWORD *)((char *)v189 + 2) = v45;
          _os_log_impl(&dword_190DAF000, v39, OS_LOG_TYPE_INFO, "Detected shape mistmatch between E5 and EIR. Input = %s, dim = %s, E5 = %s, EIR = %s. EIR will be reshaped to match E5 shape.", buf, 0x2Au);
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v177.__r_.__value_.__l.__data_);
            v5 = v158;
            if ((v165[23] & 0x80000000) != 0)
              goto LABEL_74;
LABEL_71:
            if ((v169[23] & 0x80000000) != 0)
LABEL_75:
              operator delete(*(void **)v169);
          }
          else
          {
            v5 = v158;
            if ((v165[23] & 0x80000000) == 0)
              goto LABEL_71;
LABEL_74:
            operator delete(*(void **)v165);
            if ((v169[23] & 0x80000000) != 0)
              goto LABEL_75;
          }
        }
LABEL_72:

        v26 = 1;
        v34 = __val;
        goto LABEL_52;
      }
LABEL_42:
      v25 = (uint64_t *)*v25;
    }
    while (v25);
    if ((v26 & 1) != 0)
    {
      memset(buf, 0, sizeof(buf));
      v189[0] = 1065353216;
      memset(v169, 0, sizeof(v169));
      v170 = 1065353216;
      for (i = *(uint64_t ***)(v156 + 16); i; i = (uint64_t **)*i)
      {
        E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)i[5], v165);
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
        v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v169, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v177);
        v49 = *(_OWORD *)v165;
        *(_OWORD *)v165 = 0uLL;
        v50 = (std::__shared_weak_count *)v48[6];
        *(_OWORD *)(v48 + 5) = v49;
        if (v50)
        {
          p_shared_owners = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(p_shared_owners);
          while (__stlxr(v52 - 1, p_shared_owners));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = *(std::__shared_weak_count **)&v165[8];
        if (*(_QWORD *)&v165[8])
        {
          v54 = (unint64_t *)(*(_QWORD *)&v165[8] + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = (uint64_t)i[5];
        v167 = 0;
        v168 = 0;
        E5RT::IOPort::BindMemoryObject(v56, (uint64_t)&v167);
        v57 = v168;
        if (v168)
        {
          v58 = (unint64_t *)&v168->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], v165);
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
        v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)buf, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v177);
        v61 = *(_OWORD *)v165;
        *(_OWORD *)v165 = 0uLL;
        v62 = (std::__shared_weak_count *)v60[6];
        *(_OWORD *)(v60 + 5) = v61;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = *(std::__shared_weak_count **)&v165[8];
        if (*(_QWORD *)&v165[8])
        {
          v66 = (unint64_t *)(*(_QWORD *)&v165[8] + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
      }
      memset(v165, 0, sizeof(v165));
      v166 = 1065353216;
      v68 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v157);
      for (j = *(uint64_t ***)(v68 + 16); j; j = (uint64_t **)*j)
      {
        E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)j[5], &v177);
        v176.__r_.__value_.__r.__words[0] = (std::string::size_type)(j + 2);
        v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v165, (uint64_t)(j + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v176);
        v71 = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
        *(_OWORD *)&v177.__r_.__value_.__l.__data_ = 0uLL;
        v72 = (std::__shared_weak_count *)v70[6];
        *(_OWORD *)(v70 + 5) = v71;
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v75 = (std::__shared_weak_count *)v177.__r_.__value_.__l.__size_;
        if (v177.__r_.__value_.__l.__size_)
        {
          v76 = (unint64_t *)(v177.__r_.__value_.__l.__size_ + 8);
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v78 = (uint64_t)j[5];
        v163 = 0;
        v164 = 0;
        E5RT::IOPort::BindMemoryObject(v78, (uint64_t)&v163);
        v79 = v164;
        if (v164)
        {
          v80 = (unint64_t *)&v164->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
      E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeOperationInternal((uint64_t)v157, (uint64_t)buf);
      for (k = *(_QWORD **)(v156 + 16); k; k = (_QWORD *)*k)
      {
        v83 = k[5];
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)(k + 2);
        v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v169, (uint64_t)(k + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v177);
        v85 = v84[6];
        v161 = v84[5];
        v162 = (std::__shared_weak_count *)v85;
        if (v85)
        {
          v86 = (unint64_t *)(v85 + 8);
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        E5RT::IOPort::BindMemoryObject(v83, (uint64_t)&v161);
        v88 = v162;
        if (v162)
        {
          v89 = (unint64_t *)&v162->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
      }
      for (m = *(_QWORD **)(v68 + 16); m; m = (_QWORD *)*m)
      {
        v92 = m[5];
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)(m + 2);
        v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v165, (uint64_t)(m + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v177);
        v94 = v93[6];
        v159 = v93[5];
        v160 = (std::__shared_weak_count *)v94;
        if (v94)
        {
          v95 = (unint64_t *)(v94 + 8);
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
        }
        E5RT::IOPort::BindMemoryObject(v92, (uint64_t)&v159);
        v97 = v160;
        if (v160)
        {
          v98 = (unint64_t *)&v160->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
      }
      v100 = *(void ***)&v165[16];
      if (*(_QWORD *)&v165[16])
      {
        do
        {
          while (1)
          {
            v101 = (void **)*v100;
            v102 = (std::__shared_weak_count *)v100[6];
            if (v102)
            {
              v103 = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            if (*((char *)v100 + 39) < 0)
              break;
            operator delete(v100);
            v100 = v101;
            if (!v101)
              goto LABEL_159;
          }
          operator delete(v100[2]);
          operator delete(v100);
          v100 = v101;
        }
        while (v101);
      }
LABEL_159:
      v105 = *(void **)v165;
      *(_QWORD *)v165 = 0;
      if (v105)
        operator delete(v105);
      v106 = *(void ***)&v169[16];
      if (*(_QWORD *)&v169[16])
      {
        do
        {
          while (1)
          {
            v107 = (void **)*v106;
            v108 = (std::__shared_weak_count *)v106[6];
            if (v108)
            {
              v109 = (unint64_t *)&v108->__shared_owners_;
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
            if (*((char *)v106 + 39) < 0)
              break;
            operator delete(v106);
            v106 = v107;
            if (!v107)
              goto LABEL_171;
          }
          operator delete(v106[2]);
          operator delete(v106);
          v106 = v107;
        }
        while (v107);
      }
LABEL_171:
      v111 = *(void **)v169;
      *(_QWORD *)v169 = 0;
      if (v111)
        operator delete(v111);
      v112 = *(void ***)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        do
        {
          while (1)
          {
            v113 = (void **)*v112;
            v114 = (std::__shared_weak_count *)v112[6];
            if (v114)
            {
              v115 = (unint64_t *)&v114->__shared_owners_;
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            if (*((char *)v112 + 39) < 0)
              break;
            operator delete(v112);
            v112 = v113;
            if (!v113)
              goto LABEL_183;
          }
          operator delete(v112[2]);
          operator delete(v112);
          v112 = v113;
        }
        while (v113);
      }
LABEL_183:
      v117 = *(void **)buf;
      *(_QWORD *)buf = 0;
      if (v117)
        operator delete(v117);
    }
  }
LABEL_185:
  v118 = (void **)v179;
  if (v179)
  {
    v119 = v180;
    v120 = v179;
    if (v180 != v179)
    {
      do
      {
        if (*((char *)v119 - 1) < 0)
          operator delete(*(v119 - 3));
        v119 -= 3;
      }
      while (v119 != v118);
      v120 = v179;
    }
    v180 = v118;
    operator delete(v120);
  }
  v5[2](v5);

}

void sub_190EA8B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)(_QWORD), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  int v66;
  void *v67;
  uint64_t v68;

  E5RT::Status::~Status((E5RT::Status *)&a21);
  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v68 - 137) < 0)
  {
    operator delete(*(void **)(v68 - 160));
    if ((v66 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&a66);
      a14[2](a14);

      _Unwind_Resume(a1);
    }
  }
  else if (!v66)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v67);
  goto LABEL_8;
}

uint64_t espresso_create_plan(EspressoLight::espresso_context *a1, int a2)
{
  EspressoLight *v4;
  EspressoLight *v5;
  uint64_t v6;
  Espresso *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t *v12;
  const char *v13;
  Espresso *v14;
  const char *v15;
  Espresso *v16;
  const char *v17;
  NSObject *v18;
  _BYTE buf[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (EspressoLight *)MEMORY[0x19401D4A4]();
  v5 = v4;
  if (!a1)
    goto LABEL_8;
  if (*(_QWORD *)a1 != 0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client(v4);
LABEL_8:
    v6 = 0;
    goto LABEL_17;
  }
  if ((a2 & 4) != 0)
  {
    v6 = operator new();
    *(_QWORD *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = a2;
    bzero((void *)(v6 + 20), 0x414uLL);
    *(_QWORD *)v6 = &off_1E2D59588;
    *(_QWORD *)(v6 + 1120) = 0;
    *(_QWORD *)(v6 + 1112) = 0;
    *(_OWORD *)(v6 + 1064) = 0u;
    *(_OWORD *)(v6 + 1080) = 0u;
    *(_QWORD *)(v6 + 1096) = 0;
    *(_QWORD *)(v6 + 1104) = v6 + 1112;
    *(_QWORD *)(v6 + 1144) = 0;
    *(_QWORD *)(v6 + 1136) = 0;
    *(_QWORD *)(v6 + 1128) = v6 + 1136;
    *(_DWORD *)(v6 + 1152) = 0;
    *(_QWORD *)(v6 + 1160) = 0;
    v11 = operator new();
    *(_QWORD *)(v11 + 32) = 0;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    Espresso::espresso_plan_tracer::espresso_plan_tracer((Espresso::espresso_plan_tracer *)v11);
    *(_QWORD *)buf = 0;
    std::unique_ptr<EspressoLight::espresso_nitro_plan::priv_t>::reset[abi:ne180100]((uint64_t *)(v6 + 1160), v11);
    v12 = std::unique_ptr<EspressoLight::espresso_nitro_plan::priv_t>::reset[abi:ne180100]((uint64_t *)buf, 0);
    Espresso::espresso_os_log_subsystem((Espresso *)v12, v13);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v6;
      v10 = "Creating nitro plan %zu";
      goto LABEL_13;
    }
  }
  else if ((a2 & 0x10) != 0)
  {
    v6 = operator new();
    v14 = (Espresso *)EspressoLight::espresso_aot_plan::espresso_aot_plan((EspressoLight::espresso_aot_plan *)v6, a1, a2);
    Espresso::espresso_os_log_subsystem(v14, v15);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v6;
      v10 = "Creating aot plan %zu";
      goto LABEL_13;
    }
  }
  else
  {
    v6 = operator new();
    v7 = EspressoLight::espresso_plan::espresso_plan((EspressoLight::espresso_plan *)v6, a1, a2);
    Espresso::espresso_os_log_subsystem(v7, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v6;
      v10 = "Creating plan %zu";
LABEL_13:
      _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, v10, buf, 0xCu);
    }
  }

  Espresso::espresso_os_log_subsystem(v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl(&dword_190DAF000, v18, OS_LOG_TYPE_INFO, "Creating plan %zu", buf, 0xCu);
  }

LABEL_17:
  objc_autoreleasePoolPop(v5);
  return v6;
}

void sub_190EA94B8(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  EspressoLight *v5;
  std::exception *v6;

  MEMORY[0x19401CD90](v2, 0x10B3C405AE87CAALL);
  if (a2 == 1)
  {
    v5 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v5, v6);
    __cxa_end_catch();
    JUMPOUT(0x190EA92A8);
  }
  _Unwind_Resume(a1);
}

EspressoLight::espresso_plan *EspressoLight::espresso_plan::espresso_plan(EspressoLight::espresso_plan *this, EspressoLight::espresso_context *a2, int a3)
{
  uint64_t v5;
  char *v6;
  NSObject *v7;
  dispatch_queue_t v8;
  void *v9;
  uint64_t v10;
  unsigned int (****v11)(_QWORD);
  void *v12;
  std::runtime_error *exception;

  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = a3;
  bzero((char *)this + 20, 0x414uLL);
  *(_QWORD *)this = &off_1E2D59350;
  v5 = operator new();
  *(_QWORD *)(v5 + 56) = 0;
  v6 = (char *)this + 1064;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 48) = v5 + 56;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = v5 + 80;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = v5 + 104;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = v5 + 128;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_QWORD *)(v5 + 208) = 850045863;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 272) = 1018212795;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_QWORD *)(v5 + 376) = 1;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = dispatch_queue_create("com.espresso.multi_buffers_ane_q", v7);
  v9 = *(void **)(v5 + 192);
  *(_QWORD *)(v5 + 192) = v8;

  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *((_QWORD *)this + 133) = v5;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 134, (char *)EspressoLight::abstract_espresso_plan::main_function_name);
  *((_BYTE *)this + 1096) = 0;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*((_QWORD **)this + 133), **((_QWORD **)a2 + 2), *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v10 = *(_QWORD *)v6;
    *(_DWORD *)(v10 + 164) = 0x7FFF;
    v11 = *(unsigned int (*****)(_QWORD))v10;
    if (*(_QWORD *)v10
    {
      (*(void (**)(void *, uint64_t, uint64_t, float))(*(_QWORD *)v12 + 16))(v12, 1, 2, 4.0);
    }
    else if ((**v11[1])(v11[1]) != 10007
           && (***(unsigned int (****)(_QWORD))(**(_QWORD **)v6 + 8))(*(_QWORD *)(**(_QWORD **)v6 + 8)) != 10006
           && (***(unsigned int (****)(_QWORD))(**(_QWORD **)v6 + 8))(*(_QWORD *)(**(_QWORD **)v6 + 8))
           && (***(unsigned int (****)(_QWORD))(**(_QWORD **)v6 + 8))(*(_QWORD *)(**(_QWORD **)v6 + 8)) != 100)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Low priority mode not supported on this platform");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_190EA983C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void **v3;
  void *v4;

  __cxa_free_exception(v4);
  if (*(char *)(v1 + 1095) < 0)
    operator delete(*v3);
  std::unique_ptr<EspressoLight::espresso_plan::priv_t>::reset[abi:ne180100](v2);
  EspressoLight::abstract_espresso_plan::~abstract_espresso_plan((id *)v1);
  _Unwind_Resume(a1);
}

uint64_t espresso_network_query_blob_shape(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;

  v10 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v11 = (*(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2, a3, a4, a5);
  }
  else
  {
    v11 = 4294967290;
  }
  objc_autoreleasePoolPop(v10);
  return v11;
}

uint64_t EspressoLight::espresso_plan::query_blob_shape(EspressoLight::espresso_plan *this, int a2, char *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v6;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v24;
  char v25[40];
  void *__p;
  void *v27;
  _BYTE v28[20];
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string v32;
  __int128 v33;

  v6 = *(_QWORD *)(*((_QWORD *)this + 133) + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 133) + 32) - v6) >> 4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = *(_OWORD *)(v6 + 16 * a2);
  v33 = v8;
  if (*((_QWORD *)&v8 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = v8;
  if (!(_QWORD)v8)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Null network found.");
    __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v32, *((_QWORD **)this + 133), a2, 0, a3);
  Espresso::net::get_blob_or_global_with_prefix(v11, &v32, &v30);
  if (v30)
  {
    Espresso::abstract_blob_container::shape(v25, v30);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v28, (const Espresso::layer_shape *)v25, 0);
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
    LODWORD(v12) = v29;
    *a4 = v29;
    if ((_DWORD)v12)
    {
      v12 = v12;
      v13 = (int *)v28;
      do
      {
        v14 = *v13++;
        *a5++ = v14;
        --v12;
      }
      while (v12);
    }
    v15 = 0;
  }
  else
  {
    v15 = 4294967290;
  }
  v16 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v15;
}

void sub_190EA9B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 48);
  _Unwind_Resume(a1);
}

uint64_t espresso_network_set_memory_pool_id(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v8[2];

  Espresso::get_internal_network(a1, a2, (uint64_t)v8);
  v4 = (std::__shared_weak_count *)v8[1];
  *(_QWORD *)(v8[0] + 1360) = a3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return 0;
}

uint64_t espresso_get_additional_configuration_names(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  Espresso::get_internal_network(a1, a2, (uint64_t)&v17);
  v4 = v17;
  if (v17)
  {
    std::vector<std::string>::__clear[abi:ne180100](a3);
    v5 = *(_QWORD **)(v4 + 776);
    v6 = (_QWORD *)(v4 + 784);
    if (v5 != (_QWORD *)(v4 + 784))
    {
      v7 = (std::string *)a3[1];
      do
      {
        v8 = (__int128 *)(v5 + 4);
        if ((unint64_t)v7 >= a3[2])
        {
          v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)v8);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v8);
          ++v7;
        }
        a3[1] = (uint64_t)v7;
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v5[2];
            v11 = *v10 == (_QWORD)v5;
            v5 = v10;
          }
          while (!v11);
        }
        v5 = v10;
      }
      while (v10 != v6);
    }
    v12 = 0;
  }
  else
  {
    v12 = 4294967290;
  }
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_190EA9D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::generic_bind_external(uint64_t a1, int a2, char *a3, uint64_t *a4, char *a5)
{
  uint64_t v6;
  int v7;
  int v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t **v27;
  char *v28;
  __int128 v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  char *v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t **v39;
  char *v40;
  __int128 v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t *v52;
  int v53;
  int64x2_t v54;
  __int128 v55;
  unint64_t v56;
  void **v57;
  std::string *v58;
  uint64_t **v59;
  std::string *v60;
  __int128 v61;
  void *v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  BOOL is_blob_dynamic;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  const char *v73;
  std::runtime_error *exception;
  const char *v75;
  std::string *v76;
  char *v77;
  _QWORD *v78;
  void *__p[2];
  _BYTE v80[40];
  __int128 v81;
  std::string::size_type v82;
  std::string *v83;
  std::__shared_weak_count *v84;
  std::string v85;
  int v86;
  std::string *v87;
  std::__shared_weak_count *v88;
  char v89;
  uint64_t v90;

  v86 = a2;
  v6 = *(_QWORD *)(a1 + 1064);
  v7 = *(_DWORD *)(v6 + 160);
  if (v7 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
  if (atomic_load((unint64_t *)(v6 + 408)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Binding buffers cannot be done while a plan is being executed.");
    std::runtime_error::runtime_error(exception, (const std::string *)__p);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -1;
  }
  v9 = (int)a5;
  v12 = v86;
  EspressoLight::espresso_plan::default_blob_name_if_null(&v85, *(_QWORD **)(a1 + 1064), v86, a5, a3);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 144);
  v14 = v13 + 88;
  if (!v9)
    v14 = v13 + 64;
  v17 = *(_QWORD *)(v14 + 8);
  v15 = v14 + 8;
  v16 = v17;
  if (!v17)
    goto LABEL_77;
  v18 = v15;
  do
  {
    v19 = *(_DWORD *)(v16 + 32);
    v20 = v19 < v12;
    if (v19 >= v12)
      v21 = (uint64_t *)v16;
    else
      v21 = (uint64_t *)(v16 + 8);
    if (!v20)
      v18 = v16;
    v16 = *v21;
  }
  while (*v21);
  if (v18 == v15 || v12 < *(_DWORD *)(v18 + 32))
  {
LABEL_77:
    if (v9)
      v73 = "Output not declared";
    else
      v73 = "Input not declared";
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v73);
  }
  v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v18 + 40, &v85);
  if ((_QWORD *)(v18 + 48) == v22)
  {
    v75 = "Input";
    if (v9)
      v75 = "Output";
    __p[0] = (void *)v75;
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v85;
    else
      v76 = (std::string *)v85.__r_.__value_.__r.__words[0];
    v87 = v76;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("%s not declared: %s", __p, &v87);
  }
  v78 = v22;
  if (v9)
  {
    v23 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 40), v12, &v86);
    v24 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 1064) + 72), v12, &v86);
    v25 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v24 + 5), &v85);
    if (std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 1064) + 72), v12, &v86)+ 6 == v25)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 24) + 16 * v12);
      std::string::basic_string[abi:ne180100]<0>(__p, a3);
      Espresso::net::get_blob_or_global_with_prefix(v26, (std::string *)__p, &v87);
      if ((v80[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      Espresso::abstract_blob_container::shape((char *)__p, (uint64_t)v87);
      v27 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 1064) + 72), v12, &v86);
      v83 = &v85;
      v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27 + 5, &v85, (__int128 **)&v83);
      v29 = *(_OWORD *)v80;
      *(_OWORD *)(v28 + 56) = *(_OWORD *)__p;
      *(_OWORD *)(v28 + 72) = v29;
      *((_QWORD *)v28 + 11) = *(_QWORD *)&v80[16];
      v30 = (void *)*((_QWORD *)v28 + 12);
      if (v30)
      {
        *((_QWORD *)v28 + 13) = v30;
        operator delete(v30);
        *((_QWORD *)v28 + 12) = 0;
        *((_QWORD *)v28 + 13) = 0;
        *((_QWORD *)v28 + 14) = 0;
      }
      *((_OWORD *)v28 + 6) = *(_OWORD *)&v80[24];
      *((_QWORD *)v28 + 14) = v81;
      v31 = v88;
      if (v88)
      {
        p_shared_owners = (unint64_t *)&v88->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v12 = v86;
    }
    v34 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 1064) + 72), v12, &v86);
    __p[0] = &v85;
    v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34 + 5, &v85, (__int128 **)__p);
  }
  else
  {
    v23 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 16), v12, &v86);
    v36 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 1064) + 48), v12, &v86);
    v37 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v36 + 5), &v85);
    if (std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 1064) + 48), v12, &v86)+ 6 == v37)
    {
      v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 24) + 16 * v12);
      std::string::basic_string[abi:ne180100]<0>(__p, a3);
      Espresso::net::get_blob_or_global_with_prefix(v38, (std::string *)__p, &v87);
      if ((v80[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      Espresso::abstract_blob_container::shape((char *)__p, (uint64_t)v87);
      v39 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 1064) + 48), v12, &v86);
      v83 = &v85;
      v40 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39 + 5, &v85, (__int128 **)&v83);
      v41 = *(_OWORD *)v80;
      *(_OWORD *)(v40 + 56) = *(_OWORD *)__p;
      *(_OWORD *)(v40 + 72) = v41;
      *((_QWORD *)v40 + 11) = *(_QWORD *)&v80[16];
      v42 = (void *)*((_QWORD *)v40 + 12);
      if (v42)
      {
        *((_QWORD *)v40 + 13) = v42;
        operator delete(v42);
        *((_QWORD *)v40 + 12) = 0;
        *((_QWORD *)v40 + 13) = 0;
        *((_QWORD *)v40 + 14) = 0;
      }
      *((_OWORD *)v40 + 6) = *(_OWORD *)&v80[24];
      *((_QWORD *)v40 + 14) = v81;
      v43 = v88;
      if (v88)
      {
        v44 = (unint64_t *)&v88->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v12 = v86;
    }
    v46 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 1064) + 48), v12, &v86);
    __p[0] = &v85;
    v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46 + 5, &v85, (__int128 **)__p);
  }
  v47 = v35;
  v83 = 0;
  v84 = 0;
  v48 = *a4;
  v50 = a4[13];
  v49 = a4[14];
  v51 = (char *)operator new(0x60uLL);
  *((_QWORD *)v51 + 1) = 0;
  v52 = (unint64_t *)(v51 + 8);
  *((_QWORD *)v51 + 2) = 0;
  *(_QWORD *)v51 = &off_1E2DBECA8;
  v53 = *((_DWORD *)a4 + 20);
  v54 = *(int64x2_t *)(a4 + 11);
  *((_QWORD *)v51 + 3) = &off_1E2DA11F0;
  *((_OWORD *)v51 + 4) = 0u;
  *((_OWORD *)v51 + 5) = 0u;
  *((_DWORD *)v51 + 8) = v53;
  *((_DWORD *)v51 + 11) = v49 * v50;
  *((_QWORD *)v51 + 6) = v48;
  v51[56] = 0;
  v83 = (std::string *)(v51 + 24);
  v84 = (std::__shared_weak_count *)v51;
  *(int32x2_t *)&v55 = vmovn_s64(v54);
  *(_QWORD *)(v51 + 36) = v55;
  *((_QWORD *)&v55 + 1) = __PAIR64__(v49, v50);
  __p[0] = v51 + 24;
  __p[1] = v51;
  do
    v56 = __ldxr(v52);
  while (__stxr(v56 + 1, v52));
  *(_DWORD *)v80 = v53;
  *(_OWORD *)&v80[4] = v55;
  *(_DWORD *)&v80[20] = -1;
  *(_OWORD *)&v80[24] = 0u;
  v81 = 0u;
  v82 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v81, 0, 0, 0);
  v57 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)(v23 + 5), &v90, &v85);
  v58 = (std::string *)*v57;
  if (!*v57)
  {
    v59 = (uint64_t **)v57;
    v58 = (std::string *)operator new(0x88uLL);
    v87 = v58;
    v88 = (std::__shared_weak_count *)(v23 + 6);
    v89 = 0;
    v60 = (std::string *)((char *)v58 + 32);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v60, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
      v58[2].__r_.__value_.__r.__words[0] = v85.__r_.__value_.__r.__words[2];
    }
    v58[5].__r_.__value_.__l.__size_ = 0;
    *(_OWORD *)&v58[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v58[4].__r_.__value_.__r.__words[2] = 0u;
    v58[2].__r_.__value_.__l.__size_ = 0;
    v58[2].__r_.__value_.__r.__words[2] = 0;
    LODWORD(v58[3].__r_.__value_.__l.__data_) = 0;
    *(_QWORD *)&v61 = 0x100000001;
    *((_QWORD *)&v61 + 1) = 0x100000001;
    *(_OWORD *)((char *)v58[3].__r_.__value_.__r.__words + 4) = v61;
    HIDWORD(v58[3].__r_.__value_.__r.__words[2]) = -1;
    v89 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v23 + 5, v90, v59, (uint64_t *)v58);
    v87 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v87);
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v58[2].__r_.__value_.__l.__size_, (__int128 *)__p);
  v62 = (void *)v58[4].__r_.__value_.__r.__words[2];
  v63 = *(_OWORD *)&v80[16];
  *(_OWORD *)&v58[3].__r_.__value_.__l.__data_ = *(_OWORD *)v80;
  *(_OWORD *)&v58[3].__r_.__value_.__r.__words[2] = v63;
  v58[4].__r_.__value_.__l.__size_ = *(_QWORD *)&v80[32];
  if (v62)
  {
    v58[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    operator delete(v62);
    v58[4].__r_.__value_.__r.__words[2] = 0;
    v58[5].__r_.__value_.__r.__words[0] = 0;
    v58[5].__r_.__value_.__l.__size_ = 0;
  }
  *(_OWORD *)&v58[4].__r_.__value_.__r.__words[2] = v81;
  v58[5].__r_.__value_.__l.__size_ = v82;
  v82 = 0;
  v81 = 0uLL;
  v64 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v65 = (unint64_t *)((char *)__p[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  *((_BYTE *)v78 + 56) = 1;
  is_blob_dynamic = Espresso::net::is_blob_dynamic(*(Espresso::net **)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 24) + 16 * v86), a3);
  v68 = *((unsigned int *)v47 + 14);
  v69 = a4[10];
  if (!is_blob_dynamic)
  {
    if (v69 == (int)v68)
    {
      v68 = *((int *)v47 + 15);
      v69 = a4[11];
      if (v69 == v68)
      {
        v68 = *((int *)v47 + 16);
        v69 = a4[12];
        if (v69 == v68)
        {
          v68 = *((int *)v47 + 17);
          v69 = a4[13];
          if (v69 == v68)
          {
            v68 = *((int *)v47 + 18);
            v69 = a4[14];
            if (v69 == v68)
              goto LABEL_69;
            v77 = "Mismatching seq: client:%d != internal:%d";
          }
          else
          {
            v77 = "Mismatching n: client:%d != internal:%d";
          }
        }
        else
        {
          v77 = "Mismatching k: client:%d != internal:%d";
        }
      }
      else
      {
        v77 = "Mismatching h: client:%d != internal:%d";
      }
    }
    else
    {
      v77 = "Mismatching w: client:%d != internal:%d";
    }
LABEL_96:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>(v77, v68, v69);
  }
  if (v69 < (int)v68)
  {
    v77 = "Insufficient w: client:%d < internal:%d";
    goto LABEL_96;
  }
  v68 = *((int *)v47 + 15);
  v69 = a4[11];
  if (v69 < v68)
  {
    v77 = "Insufficient h: client:%d < internal:%d";
    goto LABEL_96;
  }
  v68 = *((int *)v47 + 16);
  v69 = a4[12];
  if (v69 < v68)
  {
    v77 = "Insufficient k: client:%d != internal:%d";
    goto LABEL_96;
  }
  v68 = *((int *)v47 + 17);
  v69 = a4[13];
  if (v69 < v68)
  {
    v77 = "Insufficient n: client:%d != internal:%d";
    goto LABEL_96;
  }
  v68 = *((int *)v47 + 18);
  v69 = a4[14];
  if (v69 < v68)
  {
    v77 = "Insufficient seq: client:%d != internal:%d";
    goto LABEL_96;
  }
LABEL_69:
  v70 = v84;
  if (v84)
  {
    v71 = (unint64_t *)&v84->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
}

void sub_190EAA5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100](v30 - 120);
  std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,Espresso::layer_shape>,0>((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t espresso_blob_is_dynamic(uint64_t a1, int a2, char *a3, _DWORD *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t result;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  Espresso::net *v13;
  std::__shared_weak_count *v14;

  if (!a4)
    return 4294967290;
  *a4 = 0;
  if (!a1)
    return 4294967290;
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    result = 0;
    *a4 = 1;
  }
  else
  {
    Espresso::get_internal_network(a1, a2, (uint64_t)&v13);
    if (v13)
    {
      *a4 = Espresso::net::is_blob_dynamic(v13, a3);
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      return 0;
    }
    else
    {
      v10 = v14;
      if (v14)
      {
        v11 = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return 4294967291;
    }
  }
  return result;
}

void sub_190EAA790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL Espresso::net::is_blob_dynamic(Espresso::net *this, char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL8 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)this + 140, (uint64_t)__p);
  if (!v3)
  {
    v15 = 0;
    v22 = 0;
    v23 = 0;
    goto LABEL_23;
  }
  v4 = v3;
  v5 = (const void *)v3[3];
  v6 = (std::__shared_weak_count *)v4[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5
  {
    v22 = 0;
    v23 = 0;
    if (!v6)
      goto LABEL_21;
    goto LABEL_12;
  }
  v10 = v9;
  v22 = v9;
  v23 = v6;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
LABEL_12:
    v13 = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v10 = v22;
    if (v22)
      goto LABEL_17;
LABEL_21:
    v15 = 0;
    goto LABEL_23;
  }
LABEL_17:
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    v15 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v10 + 1, (uint64_t)__p) != 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v15 = v10[4] != 0;
  }
LABEL_23:
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_190EAA928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t espresso_network_set_tracing_name(const void *a1, int a2, char *a3)
{
  void *v6;
  uint64_t result;
  uint64_t v8;
  Espresso *v9;
  const char *v10;
  void **v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint8_t buf[16];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294967290;
  result = 4294967290;
  if (a3 && v6)
  {
    Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v16);
    v8 = v16;
    if (v16)
    {
      v9 = (Espresso *)std::string::basic_string[abi:ne180100]<0>(buf, a3);
      v11 = (void **)(v8 + 1416);
      if (*(char *)(v8 + 1439) < 0)
        operator delete(*v11);
      *(_OWORD *)v11 = *(_OWORD *)buf;
      *(_QWORD *)(v8 + 1432) = v19;
      Espresso::espresso_os_log_subsystem(v9, v10);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = a3;
        _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "[espresso_plan_set_tracing_name] tracing name: %s", buf, 0xCu);
      }

    }
    v13 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    return 0;
  }
  return result;
}

void sub_190EAAAA4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  std::exception *v12;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 1)
  {
    v12 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v9, v12);
    __cxa_end_catch();
    JUMPOUT(0x190EAAA74);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::get_internal_network@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;

  if (result
    && (v3 = *(_QWORD *)(result + 1064)) != 0
    && (v5 = v3 + 24, v4 = *(_QWORD *)(v3 + 24), a2 < (unint64_t)((*(_QWORD *)(v5 + 8) - v4) >> 4)))
  {
    v6 = *(_OWORD *)(v4 + 16 * a2);
    *(_OWORD *)a3 = v6;
    if (*((_QWORD *)&v6 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t espresso_context_set_int_option(EspressoLight *a1, char *__s1, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  Espresso::abstract_context *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (!a1)
    return 4294967290;
  if (*(_QWORD *)a1 != 0x50FBC8A8A6F7B03CLL)
  {
    EspressoLight::very_bad_client(a1);
    return 4294967290;
  }
  if (!__s1)
    return 4294967290;
  v5 = *((_QWORD *)a1 + 2);
  v7 = *(Espresso::abstract_context **)v5;
  v6 = *(std::__shared_weak_count **)(v5 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = Espresso::abstract_context::set_generic_option(v7, __s1, a3);
  if (v10 | (*(unsigned int (**)(Espresso::abstract_context *, char *, uint64_t))(*(_QWORD *)v7 + 144))(v7, __s1, a3))v11 = 0;
  else
    v11 = 4294967290;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v11;
}

void sub_190EAAC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_context::set_generic_option(Espresso::abstract_context *this, const char *__s1, int a3)
{
  int v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  Espresso *v14;
  const char *v15;
  NSObject *v16;
  int v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!strcmp(__s1, "random_seed"))
  {
    v8 = a3 + ((a3 / 0x7FFFFFFFu) | ((a3 / 0x7FFFFFFFu) << 31));
    if (v8 <= 1)
      v8 = 1;
    **((_DWORD **)this + 11) = v8;
    return 1;
  }
  v6 = strcmp(__s1, "implicit_casting_enabled");
  if (a3 >= 1 && !v6)
  {
    result = 1;
    *((_BYTE *)this + 54) = 1;
    return result;
  }
  v9 = strncmp(__s1, "fast_reshape", 0xDuLL);
  if (a3 >= 1 && !v9)
  {
    result = 1;
    *((_BYTE *)this + 126) = 1;
    return result;
  }
  v10 = strncmp(__s1, "is_reload_info_caching_enabled", 0x1EuLL);
  if (a3 >= 1 && !v10)
  {
    result = 1;
    *((_BYTE *)this + 55) = 1;
    return result;
  }
  v11 = strcmp(__s1, "compute_unit_mask");
  if (a3 >= 1 && !v11)
  {
    *((_QWORD *)this + 16) = a3;
    return 1;
  }
  v12 = strcmp(__s1, "is_from_virtual_machine");
  if (a3 < 1 || v12)
  {
    v13 = strncmp(__s1, "in_memory_model", 0x100uLL);
    if (a3 < 1 || v13)
    {
      v14 = (Espresso *)strcmp(__s1, "need_to_keep_blob_storage");
      if (a3 < 1 || (_DWORD)v14)
      {
        Espresso::espresso_os_log_subsystem(v14, v15);
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v17 = 136315138;
          v18 = __s1;
          _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "option %s does not exist in generic options", (uint8_t *)&v17, 0xCu);
        }

        return 0;
      }
      else
      {
        result = 1;
        *((_BYTE *)this + 72) = 1;
      }
    }
    else
    {
      result = 1;
      *((_BYTE *)this + 123) = 1;
    }
  }
  else
  {
    result = 1;
    *((_BYTE *)this + 121) = 1;
  }
  return result;
}

uint64_t Espresso::BNNSEngine::context::set_platform_specific_option(Espresso::BNNSEngine::context *this, char *__s1, int a3)
{
  Espresso *v6;
  const char *v7;
  NSObject *v9;
  void *__p[2];
  char v11;

  v6 = (Espresso *)strncmp(__s1, "disable_bnns_client_ptr", 0x18uLL);
  if ((_DWORD)v6)
  {
    if (!strncmp(__s1, "bnns_n_threads", 0xFuLL))
    {
      *((_QWORD *)this + 21) = a3;
    }
    else if (!strncmp(__s1, "random_seed", 0xCuLL))
    {
      BNNSInitGumbel();
    }
    else if (!strncmp(__s1, "bnns.experimental.", 0x12uLL))
    {
      if (a3 >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, __s1);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 176, (uint64_t)__p, (uint64_t)__p);
        if (v11 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      if (strcmp(__s1, "use_sequential_cblas"))
        return 0;
      *((_BYTE *)this + 125) = a3 != 0;
    }
  }
  else
  {
    *((_BYTE *)this + 160) = a3 != 0;
    if (a3)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_190DAF000, v9, OS_LOG_TYPE_DEBUG, "context_bnns: BNNSFlagsUseClientPtr flag disabled", (uint8_t *)__p, 2u);
      }

    }
  }
  return 1;
}

void sub_190EAB004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::Impl::DeclareEIRInputsAndOutputs(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t *v5;
  char *v6;
  void *exception;
  void *v8;
  _BYTE v9[24];
  _BYTE v10[8];
  _QWORD v11[3];

  v2 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16;
  while (1)
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      break;
    v3 = (char *)(v2 + 16);
    if (*(char *)(v2 + 39) < 0)
      v3 = *(char **)(v2 + 16);
    if (espresso_network_declare_input(this[3], (int)this[4], v3))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v11, "DeclareEIRInputsAndOutputs");
      std::operator+<char>();
      E5RT::Status::Status(v10, 2, v9);
      E5RT::E5RTError::E5RTError(exception, v11, v10);
    }
  }
  result = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this);
  v5 = (uint64_t *)(result + 16);
  while (1)
  {
    v5 = (uint64_t *)*v5;
    if (!v5)
      break;
    v6 = (char *)(v5 + 2);
    if (*((char *)v5 + 39) < 0)
      v6 = (char *)v5[2];
    result = espresso_network_declare_output(this[3], (int)this[4], v6);
    if ((_DWORD)result)
    {
      v8 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v11, "DeclareEIRInputsAndOutputs");
      std::operator+<char>();
      E5RT::Status::Status(v10, 2, v9);
      E5RT::E5RTError::E5RTError(v8, v11, v10);
    }
  }
  return result;
}

void sub_190EAB1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v23)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t espresso_network_declare_output(EspressoLight::espresso_plan *a1, int a2, char *a3)
{
  void *v6;
  uint64_t v7;

  v6 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    EspressoLight::espresso_plan::declare_output(a1, a2, a3);
    v7 = 0;
  }
  else
  {
    v7 = 4294967290;
  }
  objc_autoreleasePoolPop(v6);
  return v7;
}

uint64_t E5RT::DoesCurrentPlatformSupportPinningNetworkMemory(E5RT *this)
{
  return 0;
}

void E5RT::ExecutionStream::EncodeOperation(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  E5RT::ExecutionStreamImpl::EncodeOperation(v2, (uint64_t)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_190EAB3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamImpl::EncodeOperation(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  E5RT::ExecutionStreamOperationInternal *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t (**v11)();
  unint64_t *v12;
  unint64_t v13;
  uint64_t **i;
  uint64_t **j;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t (**v21)();
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t (**v31)();
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  const void **v39;
  uint64_t (***v40)();
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *exception;
  void *v49;
  void *v50;
  void *v51;
  E5RT::ExecutionStreamOperationInternal *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  char v56[8];
  E5RT::ExecutionStreamOperationInternal *v57;
  std::__shared_weak_count *v58;
  _QWORD v59[3];
  uint64_t (**v60)();
  std::__shared_weak_count *v61;
  uint64_t (***v62)();
  uint64_t (***v63)();
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)(a1 + 80));
  if ((v2 & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v59, "Reset stream to add more operations to stream.");
    E5RT::Status::Status(&v57, 2, v59);
    E5RT::E5RTError::E5RTError(exception, &v60, &v57);
  }
  v5 = *(E5RT::ExecutionStreamOperationInternal **)a2;
  if (!*(_QWORD *)a2)
  {
    v49 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v59, "Operation pointer is null.");
    E5RT::Status::Status(&v57, 1, v59);
    E5RT::E5RTError::E5RTError(v49, &v60, &v57);
  }
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v57 = *(E5RT::ExecutionStreamOperationInternal **)a2;
  v58 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!E5RT::ExecutionStreamOperationInternal::GetOpState(v5))
  {
    v50 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v59, "Operation has not been prepared for encode.");
    E5RT::Status::Status(v56, 2, v59);
    E5RT::E5RTError::E5RTError(v50, &v60, v56);
  }
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(v57) == 2)
  {
    v51 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v60, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v59, "Operation is already in use in another execution stream.");
    E5RT::Status::Status(v56, 2, v59);
    E5RT::E5RTError::E5RTError(v51, &v60, v56);
  }
  v9 = E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal ***)a2) + 16;
  while (1)
  {
    v9 = *(_QWORD *)v9;
    if (!v9)
      break;
    E5RT::IOPort::GetMemoryObject(*(E5RT::IOPort **)(v9 + 40), &v60);
    v11 = v60;
    v10 = v61;
    if (v61)
    {
      v12 = (unint64_t *)&v61->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (!v11)
    {
      v45 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v60, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v59, "No input memory object provided.");
      E5RT::Status::Status(v56, 2, v59);
      E5RT::E5RTError::E5RTError(v45, &v60, v56);
    }
  }
  for (i = *(uint64_t ***)(E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal ***)a2)
                         + 16); i; i = (uint64_t **)*i)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)i[5]) & 1) == 0)
    {
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)i[5], &v60);
      v21 = v60;
      v20 = v61;
      if (v61)
      {
        v22 = (unint64_t *)&v61->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (!v21)
      {
        v46 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v60, "EncodeOperation");
        std::string::basic_string[abi:ne180100]<0>(v59, "No output memory object provided for static port.");
        E5RT::Status::Status(v56, 2, v59);
        E5RT::E5RTError::E5RTError(v46, &v60, v56);
      }
    }
  }
  for (j = *(uint64_t ***)(E5RT::ExecutionStreamOperation::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal ***)a2)
                         + 16); j; j = (uint64_t **)*j)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)j[5]) & 1) == 0)
    {
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)j[5], &v60);
      v31 = v60;
      v30 = v61;
      if (v61)
      {
        v32 = (unint64_t *)&v61->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (!v31)
      {
        v47 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v60, "EncodeOperation");
        std::string::basic_string[abi:ne180100]<0>(v59, "No inout memory object provided for static port.");
        E5RT::Status::Status(v56, 2, v59);
        E5RT::E5RTError::E5RTError(v47, &v60, v56);
      }
    }
  }
  v16 = *(_QWORD *)(a1 + 88);
  if (!v16)
  {
    if (qword_1EE214840 != -1)
      dispatch_once(&qword_1EE214840, &unk_1E2DCB3D8);
    v16 = qword_1EE214838;
  }
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, uint64_t, _QWORD))(*(_QWORD *)v57 + 72))(v57, v16, *(_QWORD *)(a1 + 64));
  std::__hash_table<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>,std::hash<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>,std::equal_to<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>,std::allocator<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>,std::shared_ptr<E5RT::ExecutionStreamOperationInternal> const&>(a1 + 24, (uint64_t *)&v57, &v57);
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, _QWORD))(*(_QWORD *)v57 + 144))(v57, *(unsigned int *)(a1 + 96));
  v60 = &off_1E2DCB408;
  v61 = (std::__shared_weak_count *)a1;
  v62 = &v60;
  v63 = &v60;
  if ((*(unsigned int (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)v57 + 16))(v57))
  {
    v17 = (*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)v57 + 24))(v57);
    v18 = *(uint64_t **)v17;
    v19 = *(uint64_t **)(v17 + 8);
    while (v18 != v19)
    {
      v24 = (std::__shared_weak_count *)v18[1];
      v54 = *v18;
      v55 = v24;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      if (!v63)
        std::__throw_bad_function_call[abi:ne180100]();
      ((void (*)(uint64_t (***)(), uint64_t *))(*v63)[6])(v63, &v54);
      v27 = v55;
      if (v55)
      {
        v28 = (unint64_t *)&v55->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v18 += 2;
    }
    goto LABEL_59;
  }
  v52 = v57;
  v53 = v58;
  if (v58)
  {
    v34 = (unint64_t *)&v58->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  if (!v63)
    std::__throw_bad_function_call[abi:ne180100]();
  ((void (*)(uint64_t (***)(), E5RT::ExecutionStreamOperationInternal **))(*v63)[6])(v63, &v52);
  v36 = v53;
  if (!v53)
    goto LABEL_59;
  v37 = (unint64_t *)&v53->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (v38)
  {
LABEL_59:
    if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 16)
      goto LABEL_69;
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 16)
    goto LABEL_69;
LABEL_60:
  if (*(_QWORD *)(a1 + 48) != 1)
    goto LABEL_69;
  v39 = *(const void ***)(a1 + 88);
  if (!v39)
  {
    if (qword_1EE214840 != -1)
      dispatch_once(&qword_1EE214840, &unk_1E2DCB3D8);
    v39 = (const void **)qword_1EE214838;
  }
  if (!E5RT::ExecutionStreamConfigOptions::GetEnableConcurrentSyncExecution(v39))
  {
LABEL_69:
    *(_BYTE *)(a1 + 101) = 0;
    v40 = v63;
    if (v63 == &v60)
      goto LABEL_67;
    goto LABEL_70;
  }
  *(_BYTE *)(a1 + 101) = *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*(E5RT::ExecutionStreamOperationInternal **)(*(_QWORD *)(a1 + 40) + 16))
                                   + 24) == 0;
  v40 = v63;
  if (v63 == &v60)
  {
LABEL_67:
    v41 = 4;
    v40 = &v60;
LABEL_72:
    (*v40)[v41]();
    goto LABEL_73;
  }
LABEL_70:
  if (v40)
  {
    v41 = 5;
    goto LABEL_72;
  }
LABEL_73:
  v42 = v58;
  if (v58)
  {
    v43 = (unint64_t *)&v58->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_190EABB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void **a32)
{
  void **v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  v33 = a32;
  if (a32 == &a26)
  {
    v34 = 4;
    v33 = &a26;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v34 = 5;
  }
  (*((void (**)(void))*v33 + v34))();
LABEL_6:
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>,std::hash<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>,std::equal_to<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>,std::allocator<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>,std::shared_ptr<E5RT::ExecutionStreamOperationInternal> const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v17 = a3[1];
  v13[2] = *a3;
  v13[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v23)
    {
LABEL_29:
      *v13 = *v23;
LABEL_64:
      *v23 = v13;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v32 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v3 = v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v32 & v9;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v9));
      if (v23)
        goto LABEL_29;
    }
  }
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v22 + 8 * v3) = v16;
  if (*v13)
  {
    v33 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v33 >= v10)
        v33 %= v10;
    }
    else
    {
      v33 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_190EAC17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::IsCompositeOp(E5RT::Ops::PreCompiledComputeOperation *this)
{
  return 1;
}

uint64_t E5RT::ExecutionStreamOperation::GetInOutPorts(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetInOutPorts(this[1]);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::GetPrimitiveOperations(E5RT::Ops::PreCompiledComputeOperation *this)
{
  return *((_QWORD *)this + 37) + 48;
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::EncodeOperation(E5RT::Ops::PreCompiledComputeOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  v6 = *((_QWORD *)this + 37);
  v7 = *(_QWORD **)(v6 + 48);
  for (i = *(_QWORD **)(v6 + 56); v7 != i; v7 += 2)
    (*(void (**)(_QWORD, const E5RT::ExecutionStreamConfigOptions *, uint64_t))(*(_QWORD *)*v7 + 72))(*v7, a2, a3);
  E5RT::ExecutionStreamOperationInternal::EncodeOperation(this, a2, a3);
  return kdebug_trace();
}

void sub_190EAC280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EAC294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::EncodeOperation(E5RT::Ops::BaseEirInferenceOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal **InitializedImpl;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::EncodeOperation(this, a2, a3);
  InitializedImpl = (E5RT::ExecutionStreamOperationInternal **)E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl((const std::string *)this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::EncodeOperation(InitializedImpl);
  return kdebug_trace();
}

void sub_190EAC340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::Impl::UnpinNetworkWeights(uint64_t this)
{
  uint64_t v1;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  if (*(_BYTE *)(this + 128))
  {
    v1 = this;
    this = espresso_network_unpin_weights_blob_storage(*(const void **)(this + 24), *(_QWORD *)(this + 32));
    if ((_DWORD)this)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v5, "UnpinNetworkWeights");
      std::string::basic_string[abi:ne180100]<0>(v3, "Unpin network blob storage failed.");
      E5RT::Status::Status(v4, 2, v3);
      E5RT::E5RTError::E5RTError(exception, v5, v4);
    }
    *(_BYTE *)(v1 + 128) = 0;
  }
  return this;
}

void sub_190EAC40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

const void **E5RT::Ops::BaseEirInferenceOperation::Impl::EncodeOperation(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t InputPorts;
  uint64_t OutputPorts;
  const void **ConfigOptions;

  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::BindBuffers(this, InputPorts, 1);
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::BindBuffers(this, OutputPorts, 0);
  ConfigOptions = (const void **)E5RT::ExecutionStreamOperationInternal::GetConfigOptions(*this);
  if (E5RT::ExecutionStreamOperationConfigOptions::GetPrewireModelMemory(ConfigOptions))
    return E5RT::Ops::BaseEirInferenceOperation::Impl::PinNetworkWeights((const void **)this);
  else
    return (const void **)E5RT::Ops::BaseEirInferenceOperation::Impl::UnpinNetworkWeights((uint64_t)this);
}

uint64_t E5RT::ExecutionStreamOperationConfigOptions::GetPrewireModelMemory(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "prewireModelMemory<BOOL>", 24);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetConfigOptions(E5RT::ExecutionStreamOperationInternal *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 34);
  if (!result)
  {
    if (qword_1EE214850 != -1)
      dispatch_once(&qword_1EE214850, &unk_1E2DCB570);
    return qword_1EE214848;
  }
  return result;
}

void E5RT::ExecutionStreamImpl::ResetStream(E5RT::ExecutionStreamImpl *this)
{
  std::mutex *AsyncComputeScheduler;
  uint64_t **i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  uint64_t k;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  void *__p[2];
  char v19;

  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
  {
    v19 = 4;
    strcpy((char *)__p, "e5rt");
    E5RT::GetE5RTLog((uint64_t)__p);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v19 < 0)
    {
      operator delete(__p[0]);
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        goto LABEL_30;
    }
    else if (!os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
LABEL_30:

      return;
    }
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_190DAF000, v17, OS_LOG_TYPE_INFO, "ResetStream() : No ops in stream.", (uint8_t *)__p, 2u);
    goto LABEL_30;
  }
  if (*((_BYTE *)this + 100))
  {
    AsyncComputeScheduler = (std::mutex *)E5RT::AsyncComputeScheduler::GetAsyncComputeScheduler(this);
    E5RT::AsyncComputeScheduler::FlushStreamTasks(AsyncComputeScheduler, *((_QWORD *)this + 8));
    *((_BYTE *)this + 100) = 0;
  }
  for (i = (uint64_t **)*((_QWORD *)this + 5); i; i = (uint64_t **)*i)
  {
    (*(void (**)(uint64_t *, uint64_t))(*i[2] + 144))(i[2], 5);
    (*(void (**)(uint64_t *))(*i[2] + 80))(i[2]);
  }
  if (*((_QWORD *)this + 6))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 5);
    while (v4)
    {
      v12 = v4;
      v4 = (_QWORD *)*v4;
      v13 = (std::__shared_weak_count *)v12[3];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      operator delete(v12);
    }
    *((_QWORD *)this + 5) = 0;
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      for (j = 0; j != v5; ++j)
        *(_QWORD *)(*((_QWORD *)this + 3) + 8 * j) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  v7 = *(_QWORD *)this;
  for (k = *((_QWORD *)this + 1); k != v7; k -= 16)
  {
    v9 = *(std::__shared_weak_count **)(k - 8);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  *((_QWORD *)this + 1) = v7;
  atomic_store(0, (unsigned __int8 *)this + 80);
  *((_BYTE *)this + 101) = 0;
}

void sub_190EAC7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::SetANEExecutionPriority(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 296);
  v3 = *(uint64_t **)(v2 + 48);
  for (i = *(uint64_t **)(v2 + 56);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 144))(v6, a2))
  {
    v6 = *v3;
    v3 += 2;
  }
  return result;
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::ResetOperation(E5RT::Ops::PreCompiledComputeOperation *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  v2 = *((_QWORD *)this + 37);
  v3 = *(_QWORD **)(v2 + 48);
  for (i = *(_QWORD **)(v2 + 56); v3 != i; v3 += 2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 80))(*v3);
  E5RT::ExecutionStreamOperationInternal::ResetOperation(this);
  return kdebug_trace();
}

void sub_190EAC900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_190EAC914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperationInternal::ResetOperation(E5RT::ExecutionStreamOperationInternal *this)
{
  _QWORD *i;
  E5RT::IOPortPriv *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *j;
  E5RT::IOPortPriv *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *k;
  E5RT::IOPortPriv *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *exception;
  _QWORD v24[3];
  _BYTE v25[8];
  uint64_t v26;
  std::__shared_weak_count *v27;

  if ((*((_BYTE *)this + 248) & 7) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v26, "ResetOperation");
    std::string::basic_string[abi:ne180100]<0>(v24, "Op has not been encoded and hence cannot be reset to \"ReadyForEncode\" state");
    E5RT::Status::Status(v25, 2, v24);
    E5RT::E5RTError::E5RTError(exception, &v26, v25);
  }
  for (i = (_QWORD *)*((_QWORD *)this + 4); i; i = (_QWORD *)*i)
  {
    v3 = (E5RT::IOPortPriv *)i[5];
    if (v3 && *(void (***)(E5RT::IOPortPriv *__hidden))v3 == &off_1E2D59AC8)
    {
      v4 = (std::__shared_weak_count *)i[6];
      v26 = i[5];
      v27 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
    }
    else
    {
      v4 = 0;
      v3 = 0;
      v26 = 0;
      v27 = 0;
    }
    E5RT::IOPortPriv::LockPort(v3, 0);
    if (v4)
    {
      v5 = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  for (j = (_QWORD *)*((_QWORD *)this + 9); j; j = (_QWORD *)*j)
  {
    v10 = (E5RT::IOPortPriv *)j[5];
    if (v10 && *(void (***)(E5RT::IOPortPriv *__hidden))v10 == &off_1E2D59AC8)
    {
      v11 = (std::__shared_weak_count *)j[6];
      v26 = j[5];
      v27 = v11;
      if (v11)
      {
        v14 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v11 = 0;
      v10 = 0;
      v26 = 0;
      v27 = 0;
    }
    E5RT::IOPortPriv::LockPort(v10, 0);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  for (k = (_QWORD *)*((_QWORD *)this + 14); k; k = (_QWORD *)*k)
  {
    v17 = (E5RT::IOPortPriv *)k[5];
    if (v17 && *(void (***)(E5RT::IOPortPriv *__hidden))v17 == &off_1E2D59AC8)
    {
      v18 = (std::__shared_weak_count *)k[6];
      v26 = k[5];
      v27 = v18;
      if (v18)
      {
        v21 = (unint64_t *)&v18->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
    }
    else
    {
      v18 = 0;
      v17 = 0;
      v26 = 0;
      v27 = 0;
    }
    E5RT::IOPortPriv::LockPort(v17, 0);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  *((_BYTE *)this + 248) = *((_BYTE *)this + 248) & 0xF0 | 1;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
}

void sub_190EACBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190EACBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetStreamId(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((_QWORD *)this + 27);
}

void E5RT::ExecutionStreamOperationInternal::EncodeOperation(E5RT::ExecutionStreamOperationInternal *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  BOOL v6;
  void **v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  BOOL v13;
  void **v14;
  void **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  _BOOL4 v20;
  void **v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t **i;
  E5RT::IOPortPriv *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **j;
  E5RT::IOPortPriv *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t **k;
  E5RT::IOPortPriv *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  void *exception;
  void *v50;
  void *v51[2];
  void *v52;
  void *v53[2];
  void *v54;
  void *v55;
  std::__shared_weak_count *v56;
  void *__p;

  if ((*((_BYTE *)this + 248) & 7) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v55, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v53, "Op is not in \"ReadyForEncode\" state and hence cannot be encoded.");
    E5RT::Status::Status(v51, 2, v53);
    E5RT::E5RTError::E5RTError(exception, &v55, v51);
  }
  if (!a2)
  {
    v50 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v55, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v53, "streamConfigOptions is NULL.");
    E5RT::Status::Status(v51, 1, v53);
    E5RT::E5RTError::E5RTError(v50, &v55, v51);
  }
  if ((*(unsigned int (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)this + 32))(this) != 8
    && (*(unsigned int (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)this + 32))(this) != 6)
  {
    std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)&v55, (uint64_t)this + 16);
    v6 = sub_190F616F8((uint64_t *)__p);
    v7 = (void **)__p;
    if (__p)
    {
      do
      {
        while (1)
        {
          v8 = (void **)*v7;
          v9 = (std::__shared_weak_count *)v7[6];
          if (v9)
          {
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (*((char *)v7 + 39) < 0)
            break;
          operator delete(v7);
          v7 = v8;
          if (!v8)
            goto LABEL_15;
        }
        operator delete(v7[2]);
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
LABEL_15:
    v12 = v55;
    v55 = 0;
    if (v12)
      operator delete(v12);
    if (v6)
      goto LABEL_92;
    std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v53, (uint64_t)this + 96);
    v13 = sub_190F616F8((uint64_t *)v54);
    v14 = (void **)v54;
    if (v54)
    {
      do
      {
        while (1)
        {
          v15 = (void **)*v14;
          v16 = (std::__shared_weak_count *)v14[6];
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          if (*((char *)v14 + 39) < 0)
            break;
          operator delete(v14);
          v14 = v15;
          if (!v15)
            goto LABEL_28;
        }
        operator delete(v14[2]);
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
LABEL_28:
    v19 = v53[0];
    v53[0] = 0;
    if (v19)
      operator delete(v19);
    if (v13)
      goto LABEL_92;
    std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v51, (uint64_t)this + 56);
    v20 = sub_190F616F8((uint64_t *)v52);
    v21 = (void **)v52;
    if (v52)
    {
      do
      {
        while (1)
        {
          v22 = (void **)*v21;
          v23 = (std::__shared_weak_count *)v21[6];
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          if (*((char *)v21 + 39) < 0)
            break;
          operator delete(v21);
          v21 = v22;
          if (!v22)
            goto LABEL_41;
        }
        operator delete(v21[2]);
        operator delete(v21);
        v21 = v22;
      }
      while (v22);
    }
LABEL_41:
    v26 = v51[0];
    v51[0] = 0;
    if (v26)
    {
      operator delete(v26);
      if (!v20)
        goto LABEL_43;
LABEL_92:
      v48 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v55, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v53, "Max port descriptor is only supported on GPU ops currently.");
      E5RT::Status::Status(v51, 2, v53);
      E5RT::E5RTError::E5RTError(v48, &v55, v51);
    }
    if (v20)
      goto LABEL_92;
  }
LABEL_43:
  LOBYTE(v53[0]) = 1;
  if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,32ul>,true,BOOL,std::__identity,0>((_QWORD *)this + 29, 0, (uint64_t)this + 232, 0x20u, v53) != 4)
  {
    sub_190F5DBEC(this, *((uint64_t ***)this + 4));
    sub_190F5DBEC(this, *((uint64_t ***)this + 9));
    sub_190F5DBEC(this, *((uint64_t ***)this + 14));
  }
  for (i = (uint64_t **)*((_QWORD *)this + 4); i; i = (uint64_t **)*i)
  {
    v28 = (E5RT::IOPortPriv *)i[5];
    if (v28 && *(void (***)(E5RT::IOPortPriv *__hidden))v28 == &off_1E2D59AC8)
    {
      v29 = (std::__shared_weak_count *)i[6];
      v55 = i[5];
      v56 = v29;
      if (v29)
      {
        v32 = (unint64_t *)&v29->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
    }
    else
    {
      v29 = 0;
      v28 = 0;
      v55 = 0;
      v56 = 0;
    }
    E5RT::IOPortPriv::LockPort(v28, 1);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  for (j = (uint64_t **)*((_QWORD *)this + 9); j; j = (uint64_t **)*j)
  {
    v35 = (E5RT::IOPortPriv *)j[5];
    if (v35 && *(void (***)(E5RT::IOPortPriv *__hidden))v35 == &off_1E2D59AC8)
    {
      v36 = (std::__shared_weak_count *)j[6];
      v55 = j[5];
      v56 = v36;
      if (v36)
      {
        v39 = (unint64_t *)&v36->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
    }
    else
    {
      v36 = 0;
      v35 = 0;
      v55 = 0;
      v56 = 0;
    }
    E5RT::IOPortPriv::LockPort(v35, 1);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  for (k = (uint64_t **)*((_QWORD *)this + 14); k; k = (uint64_t **)*k)
  {
    v42 = (E5RT::IOPortPriv *)k[5];
    if (v42 && *(void (***)(E5RT::IOPortPriv *__hidden))v42 == &off_1E2D59AC8)
    {
      v43 = (std::__shared_weak_count *)k[6];
      v55 = k[5];
      v56 = v43;
      if (v43)
      {
        v46 = (unint64_t *)&v43->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
    }
    else
    {
      v43 = 0;
      v42 = 0;
      v55 = 0;
      v56 = 0;
    }
    E5RT::IOPortPriv::LockPort(v42, 1);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  *((_BYTE *)this + 248) = *((_BYTE *)this + 248) & 0xF8 | 2;
  *((_QWORD *)this + 27) = a3;
  *((_QWORD *)this + 28) = a2;
}

void sub_190EAD2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190EAD2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190EAD2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190EAD2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190EAD2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190EAD308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190EAD31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a20 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v29 & 1) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOPortPriv::LockPort(E5RT::IOPortPriv *this, char a2)
{
  return E5RT::IOPortImpl::LockPort(*((_QWORD *)this + 1), a2);
}

uint64_t E5RT::IOPortImpl::LockPort(uint64_t this, char a2)
{
  *(_BYTE *)(this + 48) = a2;
  return this;
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::GetOpCode(E5RT::Ops::BaseEirInferenceOperation *this)
{
  return *((unsigned int *)this + 82);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::GetOpCode(E5RT::Ops::PreCompiledComputeOperation *this)
{
  return 6;
}

uint64_t ___ZL27get_precompiled_binary_pathP8NSStringS0__block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  get_precompiled_binary_path(NSString *,NSString *)::is_internal_build = result;
  return result;
}

void sub_190EADE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::mutex *a24)
{
  _QWORD *v24;
  uint64_t v25;
  newpACCPHeuristics *v26;
  newpANEHeuristics *v27;
  uint64_t v28;
  uint64_t v29;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v29);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v28);
  newpANEHeuristics::~newpANEHeuristics(v27);
  newpACCPHeuristics::~newpACCPHeuristics(v26);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v25);
  *v24 = off_1E2D56B18;
  std::mutex::~mutex(a24);
  MEMORY[0x19401CD90](v24, 0x10A1C401B1DED7CLL);
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<SOC_PState,float>::unordered_map(uint64_t *a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = 0;
    v8 = a1 + 2;
    v9 = &a2[2 * a3];
    while (1)
    {
      v10 = *v5;
      if (v6)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          v3 = *v5;
          if (v6 <= v10)
            v3 = v10 % v6;
        }
        else
        {
          v3 = (v6 - 1) & v10;
        }
        v12 = *(uint64_t ***)(*a1 + 8 * v3);
        if (v12)
        {
          for (i = *v12; i; i = (uint64_t *)*i)
          {
            v14 = i[1];
            if (v14 == v10)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v10)
                goto LABEL_75;
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v6)
                  v14 %= v6;
              }
              else
              {
                v14 &= v6 - 1;
              }
              if (v14 != v3)
                break;
            }
          }
        }
      }
      v15 = operator new(0x18uLL);
      *v15 = 0;
      v15[1] = v10;
      v15[2] = *(_QWORD *)v5;
      v16 = (float)(unint64_t)(v7 + 1);
      v17 = *((float *)a1 + 8);
      if (!v6 || (float)(v17 * (float)v6) < v16)
        break;
LABEL_65:
      v33 = *a1;
      v34 = *(_QWORD **)(*a1 + 8 * v3);
      if (v34)
      {
        *v15 = *v34;
      }
      else
      {
        *v15 = *v8;
        *v8 = v15;
        *(_QWORD *)(v33 + 8 * v3) = v8;
        if (!*v15)
          goto LABEL_74;
        v35 = *(_QWORD *)(*v15 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v35 >= v6)
            v35 %= v6;
        }
        else
        {
          v35 &= v6 - 1;
        }
        v34 = (_QWORD *)(*a1 + 8 * v35);
      }
      *v34 = v15;
LABEL_74:
      v7 = a1[3] + 1;
      a1[3] = v7;
LABEL_75:
      v5 += 2;
      if (v5 == v9)
        return a1;
    }
    v18 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v18 = 1;
    v19 = v18 | (2 * v6);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = a1[1];
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v6)
    {
      v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v6 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v8;
          if (*v8)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v26) = v8;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v32))
                  {
                    *(_QWORD *)(*a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*a1 + 8 * v32);
                  **(_QWORD **)(*a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_56:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_60;
        }
        v36 = (void *)*a1;
        *a1 = 0;
        if (v36)
          operator delete(v36);
        v6 = 0;
        a1[1] = 0;
      }
    }
LABEL_60:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v10)
        v3 = v10 % v6;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v6 - 1) & v10;
    }
    goto LABEL_65;
  }
  return a1;
}

void sub_190EAE418(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<Device_PState,float>::unordered_map(uint64_t *a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = 0;
    v8 = a1 + 2;
    v9 = &a2[2 * a3];
    while (1)
    {
      v10 = *v5;
      if (v6)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          v3 = *v5;
          if (v6 <= v10)
            v3 = v10 % v6;
        }
        else
        {
          v3 = (v6 - 1) & v10;
        }
        v12 = *(uint64_t ***)(*a1 + 8 * v3);
        if (v12)
        {
          for (i = *v12; i; i = (uint64_t *)*i)
          {
            v14 = i[1];
            if (v14 == v10)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v10)
                goto LABEL_75;
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v6)
                  v14 %= v6;
              }
              else
              {
                v14 &= v6 - 1;
              }
              if (v14 != v3)
                break;
            }
          }
        }
      }
      v15 = operator new(0x18uLL);
      *v15 = 0;
      v15[1] = v10;
      v15[2] = *(_QWORD *)v5;
      v16 = (float)(unint64_t)(v7 + 1);
      v17 = *((float *)a1 + 8);
      if (!v6 || (float)(v17 * (float)v6) < v16)
        break;
LABEL_65:
      v33 = *a1;
      v34 = *(_QWORD **)(*a1 + 8 * v3);
      if (v34)
      {
        *v15 = *v34;
      }
      else
      {
        *v15 = *v8;
        *v8 = v15;
        *(_QWORD *)(v33 + 8 * v3) = v8;
        if (!*v15)
          goto LABEL_74;
        v35 = *(_QWORD *)(*v15 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v35 >= v6)
            v35 %= v6;
        }
        else
        {
          v35 &= v6 - 1;
        }
        v34 = (_QWORD *)(*a1 + 8 * v35);
      }
      *v34 = v15;
LABEL_74:
      v7 = a1[3] + 1;
      a1[3] = v7;
LABEL_75:
      v5 += 2;
      if (v5 == v9)
        return a1;
    }
    v18 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v18 = 1;
    v19 = v18 | (2 * v6);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = a1[1];
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v6)
    {
      v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v6 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v8;
          if (*v8)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v26) = v8;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v32))
                  {
                    *(_QWORD *)(*a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*a1 + 8 * v32);
                  **(_QWORD **)(*a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_56:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_60;
        }
        v36 = (void *)*a1;
        *a1 = 0;
        if (v36)
          operator delete(v36);
        v6 = 0;
        a1[1] = 0;
      }
    }
LABEL_60:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v10)
        v3 = v10 % v6;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v6 - 1) & v10;
    }
    goto LABEL_65;
  }
  return a1;
}

void sub_190EAE840(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void newpANEHeuristics::newpANEHeuristics(newpANEHeuristics *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E2D564D0;
  v2 = xmmword_191AC0070;
  v3 = 0x4266666600000002;
  std::unordered_map<SOC_PState,float>::unordered_map((uint64_t *)this + 1, (int *)&v2, 3);
  v2 = xmmword_191AC0088;
  v3 = 0x50FE109700000002;
  std::unordered_map<SOC_PState,float>::unordered_map((uint64_t *)this + 6, (int *)&v2, 3);
  v2 = xmmword_191AC0058;
  v3 = 0x4EAA3B1A00000002;
  std::unordered_map<Device_PState,float>::unordered_map((uint64_t *)this + 11, (int *)&v2, 3);
  v2 = xmmword_191AC0058;
  v3 = 0x4EAA3B1A00000002;
  std::unordered_map<Device_PState,float>::unordered_map((uint64_t *)this + 16, (int *)&v2, 3);
}

void sub_190EAE978(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v2);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  _WORD *v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;

  v4 = *(const void **)(a1 + 576);
  if (v4
  {
    v5 = *(std::__shared_weak_count **)(a1 + 584);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v9 = *(const void **)(a1 + 576);
    if (v9
    {
      v11 = *(_QWORD *)(a1 + 584);
      *(_QWORD *)&v41 = v10;
      *((_QWORD *)&v41 + 1) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
    }
    else
    {
      v10 = 0;
      v41 = 0uLL;
    }
    v32 = a2[1];
    v39 = *a2;
    v40 = (std::__shared_weak_count *)v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v10 + 400))(v10, &v39);
    v35 = v40;
    if (v40)
    {
      v36 = (unint64_t *)&v40->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v31 = __ldaxr(v38);
      while (__stlxr(v31 - 1, v38));
LABEL_41:
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v14 = a1 + 632;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 632), *a2, a2[1]);
    if (*(_DWORD *)(a1 + 560) == 1)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v41, *a2 + 8);
      v15 = a1 + 648;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v15, &v41);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = 0;
      v20 = *(int **)(*a2 + 24);
      v21 = *(_WORD **)(*(_QWORD *)v15 + 24);
      v22 = *(int *)(*(_QWORD *)v15 + 8);
      do
      {
        v22 *= *(int *)(*(_QWORD *)v15 + 12 + v19);
        v19 += 4;
      }
      while (v19 != 12);
      for (; v22; --v22)
      {
        v23 = *v20++;
        _S0 = v23;
        __asm { FCVT            H0, S0 }
        *v21++ = _S0;
      }
      v41 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v14, &v41);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        goto LABEL_41;
      }
    }
  }
}

void sub_190EAEC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 576), *a2, a2[1]);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _OWORD v14[2];
  int v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v24 = a4;
  v14[0] = xmmword_191A934F0;
  v14[1] = xmmword_191A93320;
  v15 = 2;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v20 = 0;
  v21 = 0x100000001;
  v22 = 0;
  v23 = 0;
  Espresso::SerDes::params_io<Espresso::pool_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190EAED7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::pool_params>(uint64_t a1, uint64_t a2, int a3)
{
  __int16 *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  int v170;
  __int16 v171;
  __int16 v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  void *v185[2];
  char v186;
  void *v187;
  std::__shared_weak_count *v188;
  void *__p[2];
  char v190;

  v5 = (__int16 *)(a2 + 36);
  v6 = *(unsigned __int16 *)(a2 + 36);
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v185, "avg_or_max");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2);
    if (v190 < 0)
      operator delete(__p[0]);
    v7 = v188;
    if (v188)
    {
      p_shared_owners = (unint64_t *)&v188->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v186 < 0)
      operator delete(v185[0]);
    std::string::basic_string[abi:ne180100]<0>(v185, "stride_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 16);
    if (v190 < 0)
      operator delete(__p[0]);
    v10 = v188;
    if (v188)
    {
      v11 = (unint64_t *)&v188->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v186 < 0)
      operator delete(v185[0]);
    std::string::basic_string[abi:ne180100]<0>(v185, "stride_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 20);
    if (v190 < 0)
      operator delete(__p[0]);
    v13 = v188;
    if (v188)
    {
      v14 = (unint64_t *)&v188->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v186 < 0)
      operator delete(v185[0]);
    std::string::basic_string[abi:ne180100]<0>(v185, "size_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 4);
    if (v190 < 0)
      operator delete(__p[0]);
    v16 = v188;
    if (v188)
    {
      v17 = (unint64_t *)&v188->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v186 < 0)
      operator delete(v185[0]);
    std::string::basic_string[abi:ne180100]<0>(v185, "size_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 8);
    if (v190 < 0)
      operator delete(__p[0]);
    v19 = v188;
    if (v188)
    {
      v20 = (unint64_t *)&v188->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v186 < 0)
      operator delete(v185[0]);
    if (*(_DWORD *)(a2 + 16) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "stride_x");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 16);
      if (v190 < 0)
        operator delete(__p[0]);
      v22 = v188;
      if (v188)
      {
        v23 = (unint64_t *)&v188->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    if (*(_DWORD *)(a2 + 20) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "stride_y");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 20);
      if (v190 < 0)
        operator delete(__p[0]);
      v25 = v188;
      if (v188)
      {
        v26 = (unint64_t *)&v188->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v185, "average_count_exclude_padding");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 28);
    if (v190 < 0)
      operator delete(__p[0]);
    v28 = v188;
    if (v188)
    {
      v29 = (unint64_t *)&v188->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v186 < 0)
      operator delete(v185[0]);
    std::string::basic_string[abi:ne180100]<0>(v185, "top_shape_style");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 32);
    if (v190 < 0)
      operator delete(__p[0]);
    v31 = v188;
    if (v188)
    {
      v32 = (unint64_t *)&v188->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v186 < 0)
      operator delete(v185[0]);
    if (*(_WORD *)(a2 + 68))
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "force_num_channels");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 184))(v187, __p, a2 + 68);
      if (v190 < 0)
        operator delete(__p[0]);
      v34 = v188;
      if (v188)
      {
        v35 = (unint64_t *)&v188->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    if (*(_WORD *)(a2 + 60))
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "start_channel_bottom");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 184))(v187, __p, a2 + 60);
      if (v190 < 0)
        operator delete(__p[0]);
      v37 = v188;
      if (v188)
      {
        v38 = (unint64_t *)&v188->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    if (*(_WORD *)(a2 + 62))
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "start_channel_top");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 184))(v187, __p, a2 + 62);
      if (v190 < 0)
        operator delete(__p[0]);
      v40 = v188;
      if (v188)
      {
        v41 = (unint64_t *)&v188->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    if (*(_WORD *)(a2 + 64))
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "total_channel_bottom");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 184))(v187, __p, a2 + 64);
      if (v190 < 0)
        operator delete(__p[0]);
      v43 = v188;
      if (v188)
      {
        v44 = (unint64_t *)&v188->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    if (*(_WORD *)(a2 + 66))
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "total_channel_top");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 184))(v187, __p, a2 + 66);
      if (v190 < 0)
        operator delete(__p[0]);
      v46 = v188;
      if (v188)
      {
        v47 = (unint64_t *)&v188->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    if (*(_DWORD *)(a2 + 72))
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "compute_argmax_mask");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 72);
      if (v190 < 0)
        operator delete(__p[0]);
      v49 = v188;
      if (v188)
      {
        v50 = (unint64_t *)&v188->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    if (*(_DWORD *)(a2 + 56))
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "is_global");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 56);
      if (v190 < 0)
        operator delete(__p[0]);
      v52 = v188;
      if (v188)
      {
        v53 = (unint64_t *)&v188->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    if (v6 != 0xFFFF)
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "pad_l");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 176))(v187, __p, a2 + 44);
      if (v190 < 0)
        operator delete(__p[0]);
      v55 = v188;
      if (v188)
      {
        v56 = (unint64_t *)&v188->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
      std::string::basic_string[abi:ne180100]<0>(v185, "pad_r");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 176))(v187, __p, a2 + 46);
      if (v190 < 0)
        operator delete(__p[0]);
      v58 = v188;
      if (v188)
      {
        v59 = (unint64_t *)&v188->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
      std::string::basic_string[abi:ne180100]<0>(v185, "pad_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 176))(v187, __p, a2 + 48);
      if (v190 < 0)
        operator delete(__p[0]);
      v61 = v188;
      if (v188)
      {
        v62 = (unint64_t *)&v188->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
      std::string::basic_string[abi:ne180100]<0>(v185, "pad_b");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 176))(v187, __p, a2 + 50);
      if (v190 < 0)
        operator delete(__p[0]);
      v64 = v188;
      if (v188)
      {
        v65 = (unint64_t *)&v188->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
      std::string::basic_string[abi:ne180100]<0>(v185, "pad_value");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 216))(v187, __p, a2 + 40);
      if (v190 < 0)
        operator delete(__p[0]);
      v67 = v188;
      if (v188)
      {
        v68 = (unint64_t *)&v188->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
      std::string::basic_string[abi:ne180100]<0>(v185, "pad_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, __int16 *))(*(_QWORD *)v187 + 176))(v187, __p, v5);
      if (v190 < 0)
        operator delete(__p[0]);
      v70 = v188;
      if (v188)
      {
        v71 = (unint64_t *)&v188->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
      std::string::basic_string[abi:ne180100]<0>(v185, "pad_fill_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 176))(v187, __p, a2 + 38);
      if (v190 < 0)
        operator delete(__p[0]);
      v73 = v188;
      if (v188)
      {
        v74 = (unint64_t *)&v188->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    if (*(_DWORD *)(a2 + 12))
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "size_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, a2 + 12);
      if (v190 < 0)
        operator delete(__p[0]);
      v76 = v188;
      if (v188)
      {
        v77 = (unint64_t *)&v188->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    v80 = *(_DWORD *)(a2 + 24);
    v79 = a2 + 24;
    if (v80 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v185, "stride_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v187 + 160))(v187, __p, v79);
      if (v190 < 0)
        operator delete(__p[0]);
      v81 = v188;
      if (v188)
      {
        v82 = (unint64_t *)&v188->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      if (v186 < 0)
        operator delete(v185[0]);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v185, "avg_or_max");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)a2 = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v84 = v188;
  if (v188)
  {
    v85 = (unint64_t *)&v188->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "stride_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v87 = v188;
  if (v188)
  {
    v88 = (unint64_t *)&v188->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "stride_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v90 = v188;
  if (v188)
  {
    v91 = (unint64_t *)&v188->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "size_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v93 = v188;
  if (v188)
  {
    v94 = (unint64_t *)&v188->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "size_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v96 = v188;
  if (v188)
  {
    v97 = (unint64_t *)&v188->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "stride_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v99 = v188;
  if (v188)
  {
    v100 = (unint64_t *)&v188->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "stride_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v102 = v188;
  if (v188)
  {
    v103 = (unint64_t *)&v188->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "average_count_exclude_padding");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v105 = v188;
  if (v188)
  {
    v106 = (unint64_t *)&v188->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "top_shape_style");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v108 = v188;
  if (v188)
  {
    v109 = (unint64_t *)&v188->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "force_num_channels");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 68) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 64))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v111 = v188;
  if (v188)
  {
    v112 = (unint64_t *)&v188->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "start_channel_bottom");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 60) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 64))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v114 = v188;
  if (v188)
  {
    v115 = (unint64_t *)&v188->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "start_channel_top");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 62) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 64))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v117 = v188;
  if (v188)
  {
    v118 = (unint64_t *)&v188->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "total_channel_bottom");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 64) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 64))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v120 = v188;
  if (v188)
  {
    v121 = (unint64_t *)&v188->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "total_channel_top");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 66) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 64))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v123 = v188;
  if (v188)
  {
    v124 = (unint64_t *)&v188->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "compute_argmax_mask");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 72) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v126 = v188;
  if (v188)
  {
    v127 = (unint64_t *)&v188->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "is_global");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 56) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v129 = v188;
  if (v188)
  {
    v130 = (unint64_t *)&v188->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "pad_l");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 44) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 56))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v132 = v188;
  if (v188)
  {
    v133 = (unint64_t *)&v188->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "pad_r");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 46) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 56))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v135 = v188;
  if (v188)
  {
    v136 = (unint64_t *)&v188->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "pad_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 48) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 56))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v138 = v188;
  if (v188)
  {
    v139 = (unint64_t *)&v188->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "pad_b");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 50) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 56))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v141 = v188;
  if (v188)
  {
    v142 = (unint64_t *)&v188->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "pad_value");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(float *)(a2 + 40) = (*(float (**)(void *, void **))(*(_QWORD *)v187 + 96))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v144 = v188;
  if (v188)
  {
    v145 = (unint64_t *)&v188->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "pad_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *v5 = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 56))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v147 = v188;
  if (v188)
  {
    v148 = (unint64_t *)&v188->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "pad_fill_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_WORD *)(a2 + 38) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 56))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v150 = v188;
  if (v188)
  {
    v151 = (unint64_t *)&v188->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "size_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v153 = v188;
  if (v188)
  {
    v154 = (unint64_t *)&v188->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(v185, "stride_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v185, &v187);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v187 + 24))(v187, __p))
    *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v187 + 40))(v187, __p);
  if (v190 < 0)
    operator delete(__p[0]);
  v156 = v188;
  if (v188)
  {
    v157 = (unint64_t *)&v188->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (v186 < 0)
    operator delete(v185[0]);
  std::string::basic_string[abi:ne180100]<0>(&v187, "pad_pad_mode");
  v159 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v187);
  v160 = v159;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v187);
    if (!v160)
      goto LABEL_520;
  }
  else if (!v159)
  {
    goto LABEL_520;
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, "pad_pad_mode");
  *v5 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
LABEL_520:
  std::string::basic_string[abi:ne180100]<0>(&v187, "stride");
  v161 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v187);
  v162 = v161;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v187);
    if (!v162)
      goto LABEL_527;
  }
  else if (!v161)
  {
    goto LABEL_527;
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, "stride");
  v163 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
  *(_DWORD *)(a2 + 16) = v163;
  *(_DWORD *)(a2 + 20) = v163;
LABEL_527:
  std::string::basic_string[abi:ne180100]<0>(&v187, "size");
  v164 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v187);
  v165 = v164;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v187);
    if (!v165)
      goto LABEL_534;
  }
  else if (!v164)
  {
    goto LABEL_534;
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, "size");
  v166 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
  *(_DWORD *)(a2 + 4) = v166;
  *(_DWORD *)(a2 + 8) = v166;
LABEL_534:
  std::string::basic_string[abi:ne180100]<0>(&v187, "padding");
  v167 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v187);
  v168 = v167;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v187);
    if (!v168)
      goto LABEL_541;
  }
  else if (!v167)
  {
    goto LABEL_541;
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, "padding");
  v169 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
  *(_WORD *)(a2 + 36) = 0;
  *(int16x4_t *)(a2 + 44) = vdup_n_s16(v169);
LABEL_541:
  std::string::basic_string[abi:ne180100]<0>(&v187, "padding_x");
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v187))
  {
    std::string::basic_string[abi:ne180100]<0>(v185, "padding_y");
    v170 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, v185);
    if (v186 < 0)
      operator delete(v185[0]);
  }
  else
  {
    v170 = 0;
  }
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v187);
    if (!v170)
      goto LABEL_554;
  }
  else if (!v170)
  {
    goto LABEL_554;
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, "padding_x");
  v171 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
  std::string::basic_string[abi:ne180100]<0>(&v187, "padding_y");
  v172 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
  *(_WORD *)(a2 + 36) = 0;
  *(_WORD *)(a2 + 44) = v171;
  *(_WORD *)(a2 + 46) = v171;
  *(_WORD *)(a2 + 48) = v172;
  v168 = 1;
  *(_WORD *)(a2 + 50) = v172;
LABEL_554:
  std::string::basic_string[abi:ne180100]<0>(&v187, "total_pad_w");
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v187))
  {
    std::string::basic_string[abi:ne180100]<0>(v185, "total_pad_h");
    v173 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, v185);
    if (v186 < 0)
      operator delete(v185[0]);
  }
  else
  {
    v173 = 0;
  }
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v187);
    if (!v173)
      goto LABEL_573;
  }
  else if (!v173)
  {
    goto LABEL_573;
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, "total_pad_w");
  v174 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
  std::string::basic_string[abi:ne180100]<0>(&v187, "total_pad_h");
  v175 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
  *(_WORD *)(a2 + 36) = 0;
  if (v174 >= 0)
    v176 = v174;
  else
    v176 = v174 + 1;
  *(_WORD *)(a2 + 44) = v176 >> 1;
  *(_WORD *)(a2 + 46) = v174 - (v176 >> 1);
  if (v175 >= 0)
    v177 = v175;
  else
    v177 = v175 + 1;
  *(_WORD *)(a2 + 48) = v177 >> 1;
  *(_WORD *)(a2 + 50) = v175 - (v177 >> 1);
  v168 = 1;
LABEL_573:
  std::string::basic_string[abi:ne180100]<0>(&v187, "use_perceptio_version");
  v178 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v187);
  v179 = v178;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v187);
    if (!v179)
      goto LABEL_582;
  }
  else if (!v178)
  {
    goto LABEL_582;
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, "use_perceptio_version");
  v180 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
  if (v180 < 3)
    *(_DWORD *)(a2 + 32) = 2 - v180;
  v168 = 1;
LABEL_582:
  std::string::basic_string[abi:ne180100]<0>(&v187, "strict_zero_padding");
  v181 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v187);
  v182 = v181;
  if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    if (v181)
      goto LABEL_584;
LABEL_589:
    if (*(_DWORD *)(a2 + 32) == 2)
      v184 = v168;
    else
      v184 = 0;
    if (v184 != 1)
      return;
LABEL_593:
    Espresso::padding_params_t::simplify_legacy(v5, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8));
    return;
  }
  operator delete(v187);
  if (!v182)
    goto LABEL_589;
LABEL_584:
  std::string::basic_string[abi:ne180100]<0>(&v187, "strict_zero_padding");
  v183 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v187);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v187);
  *(_DWORD *)(a2 + 28) = v183 != 0;
  if (*(_DWORD *)(a2 + 32) == 2)
    goto LABEL_593;
}

void sub_190EB13AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso23abstract_engine_factory6sharedEv_block_invoke()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v0 = (_QWORD *)operator new();
  *v0 = 0;
  v0[1] = 0;
  singleton = (uint64_t)v0;
  v1 = operator new(0x80uLL);
  v1[1] = 0;
  v1[2] = 0;
  *v1 = &off_1E2DBCCF0;
  *(_QWORD *)&v5 = Espresso::abstract_engine_factory::abstract_engine_factory((Espresso::abstract_engine_factory *)(v1 + 3));
  *((_QWORD *)&v5 + 1) = v1;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](singleton, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_190EB1694(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

Espresso::abstract_engine_factory *Espresso::abstract_engine_factory::abstract_engine_factory(Espresso::abstract_engine_factory *this)
{
  std::recursive_mutex **v2;
  std::recursive_mutex *v3;
  std::recursive_mutex *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v134[2];
  uint64_t v135[2];
  uint64_t v136[2];
  uint64_t v137[2];
  uint64_t v138[2];
  uint64_t v139[2];
  uint64_t v140[2];
  uint64_t v141[2];
  uint64_t v142[2];
  uint64_t v143[2];
  uint64_t v144[2];
  uint64_t v145[2];
  uint64_t v146[2];
  uint64_t v147[2];
  uint64_t v148[2];
  uint64_t v149[2];
  uint64_t v150[2];
  uint64_t v151[2];
  uint64_t v152[2];
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  uint64_t v155[2];

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v2 = (std::recursive_mutex **)((char *)this + 96);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  v3 = (std::recursive_mutex *)operator new();
  MEMORY[0x19401CA6C]();
  std::unique_ptr<std::recursive_mutex>::reset[abi:ne180100](v2, v3);
  v4 = *v2;
  std::recursive_mutex::lock(*v2);
  v5 = (std::__shared_weak_count *)operator new(0x30uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6738;
  v5[1].__shared_owners_ = 0;
  v5[1].__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D5E8F0;
  v155[0] = (uint64_t)&v5[1];
  v155[1] = (uint64_t)v5;
  v153 = 0;
  v154 = 0;
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v155);
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  v9 = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB66C8;
  v8[1].__shared_owners_ = 0;
  v8[1].__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D5E7C8;
  v152[0] = (uint64_t)&v8[1];
  v152[1] = (uint64_t)v8;
  v153 = 0;
  v154 = 0;
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v152);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  v11 = v154;
  if (v154)
  {
    v12 = (unint64_t *)&v154->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)operator new(0x30uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC12B8;
  v14[1].__shared_owners_ = 0;
  v14[1].__shared_weak_owners_ = 0;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2DA4A38;
  v151[0] = (uint64_t)&v14[1];
  v151[1] = (uint64_t)v14;
  v153 = 0;
  v154 = 0;
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v151);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v17 = v154;
  if (v154)
  {
    v18 = (unint64_t *)&v154->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)operator new(0x30uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1AD0;
  v20[1].__shared_owners_ = 0;
  v20[1].__shared_weak_owners_ = 0;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2DA7518;
  v150[0] = (uint64_t)&v20[1];
  v150[1] = (uint64_t)v20;
  v153 = 0;
  v154 = 0;
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v150);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  v23 = v154;
  if (v154)
  {
    v24 = (unint64_t *)&v154->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)operator new(0x98uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAA98;
  *(_OWORD *)&v26[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v26[3].__shared_owners_ = 0u;
  v26[4].std::__shared_count = 0u;
  *(_OWORD *)&v26[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v26[5].__shared_owners_ = 0u;
  *(_OWORD *)&v26[1].__shared_owners_ = 0u;
  v26[2].std::__shared_count = 0u;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D7D570;
  v26[2].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v26[2].__shared_owners_ = 0u;
  v26[3].std::__shared_count = 0u;
  *(_OWORD *)&v26[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v26[4].__shared_owners_ = 0u;
  v26[5].std::__shared_count = 0u;
  v26[5].__shared_weak_owners_ = 0;
  v26[6].__vftable = 0;
  LODWORD(v26[6].__vftable) = 1065353216;
  v149[0] = (uint64_t)&v26[1];
  v149[1] = (uint64_t)v26;
  v153 = 0;
  v154 = 0;
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v149);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  v29 = v154;
  if (v154)
  {
    v30 = (unint64_t *)&v154->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)operator new(0x30uLL);
  v32->__shared_owners_ = 0;
  v33 = (unint64_t *)&v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8098;
  v32[1].__shared_owners_ = 0;
  v32[1].__shared_weak_owners_ = 0;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D66F48;
  v148[0] = (uint64_t)&v32[1];
  v148[1] = (uint64_t)v32;
  v153 = 0;
  v154 = 0;
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v148);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  v35 = v154;
  if (v154)
  {
    v36 = (unint64_t *)&v154->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)operator new(0x30uLL);
  v38->__shared_owners_ = 0;
  v39 = (unint64_t *)&v38->__shared_owners_;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB92F8;
  v38[1].__shared_owners_ = 0;
  v38[1].__shared_weak_owners_ = 0;
  v38[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D703F0;
  v147[0] = (uint64_t)&v38[1];
  v147[1] = (uint64_t)v38;
  v153 = 0;
  v154 = 0;
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v147);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  v41 = v154;
  if (v154)
  {
    v42 = (unint64_t *)&v154->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)operator new(0x30uLL);
  v44->__shared_owners_ = 0;
  v45 = (unint64_t *)&v44->__shared_owners_;
  v44->__shared_weak_owners_ = 0;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB86B8;
  v44[1].__shared_owners_ = 0;
  v44[1].__shared_weak_owners_ = 0;
  v44[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D692C0;
  v146[0] = (uint64_t)&v44[1];
  v146[1] = (uint64_t)v44;
  v153 = 0;
  v154 = 0;
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v146);
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  v47 = v154;
  if (v154)
  {
    v48 = (unint64_t *)&v154->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)operator new(0x30uLL);
  v50->__shared_owners_ = 0;
  v51 = (unint64_t *)&v50->__shared_owners_;
  v50->__shared_weak_owners_ = 0;
  v50->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6A10;
  v50[1].__shared_owners_ = 0;
  v50[1].__shared_weak_owners_ = 0;
  v50[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D5F700;
  v145[0] = (uint64_t)&v50[1];
  v145[1] = (uint64_t)v50;
  v153 = 0;
  v154 = 0;
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v145);
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  v53 = v154;
  if (v154)
  {
    v54 = (unint64_t *)&v154->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)operator new(0x30uLL);
  v56->__shared_owners_ = 0;
  v57 = (unint64_t *)&v56->__shared_owners_;
  v56->__shared_weak_owners_ = 0;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7500;
  v56[1].__shared_owners_ = 0;
  v56[1].__shared_weak_owners_ = 0;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D62878;
  v153 = v56 + 1;
  v154 = v56;
  v144[0] = (uint64_t)&v56[1];
  v144[1] = (uint64_t)v56;
  do
    v58 = __ldxr(v57);
  while (__stxr(v58 + 1, v57));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v144);
  do
    v59 = __ldaxr(v57);
  while (__stlxr(v59 - 1, v57));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  v60 = v154;
  if (v154)
  {
    v61 = (unint64_t *)&v154->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)operator new(0x30uLL);
  v63->__shared_owners_ = 0;
  v64 = (unint64_t *)&v63->__shared_owners_;
  v63->__shared_weak_owners_ = 0;
  v63->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8220;
  v63[1].__shared_owners_ = 0;
  v63[1].__shared_weak_owners_ = 0;
  v63[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D67678;
  v153 = v63 + 1;
  v154 = v63;
  v143[0] = (uint64_t)&v63[1];
  v143[1] = (uint64_t)v63;
  do
    v65 = __ldxr(v64);
  while (__stxr(v65 + 1, v64));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v143);
  do
    v66 = __ldaxr(v64);
  while (__stlxr(v66 - 1, v64));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  v67 = v154;
  if (v154)
  {
    v68 = (unint64_t *)&v154->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)operator new(0x30uLL);
  v70->__shared_owners_ = 0;
  v71 = (unint64_t *)&v70->__shared_owners_;
  v70->__shared_weak_owners_ = 0;
  v70->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC6D0;
  v70[1].__shared_owners_ = 0;
  v70[1].__shared_weak_owners_ = 0;
  v70[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D89240;
  v153 = v70 + 1;
  v154 = v70;
  v142[0] = (uint64_t)&v70[1];
  v142[1] = (uint64_t)v70;
  do
    v72 = __ldxr(v71);
  while (__stxr(v72 + 1, v71));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v142);
  do
    v73 = __ldaxr(v71);
  while (__stlxr(v73 - 1, v71));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  v74 = v154;
  if (v154)
  {
    v75 = (unint64_t *)&v154->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)operator new(0x30uLL);
  v77->__shared_owners_ = 0;
  v78 = (unint64_t *)&v77->__shared_owners_;
  v77->__shared_weak_owners_ = 0;
  v77->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBCC0;
  v77[1].__shared_owners_ = 0;
  v77[1].__shared_weak_owners_ = 0;
  v77[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D844D8;
  v153 = v77 + 1;
  v154 = v77;
  v141[0] = (uint64_t)&v77[1];
  v141[1] = (uint64_t)v77;
  do
    v79 = __ldxr(v78);
  while (__stxr(v79 + 1, v78));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v141);
  do
    v80 = __ldaxr(v78);
  while (__stlxr(v80 - 1, v78));
  if (!v80)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
  v81 = v154;
  if (v154)
  {
    v82 = (unint64_t *)&v154->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = (std::__shared_weak_count *)operator new(0x38uLL);
  v84->__shared_owners_ = 0;
  v85 = (unint64_t *)&v84->__shared_owners_;
  v84->__shared_weak_owners_ = 0;
  v84->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC938;
  v84[1].__shared_weak_owners_ = 0;
  v84[2].__vftable = 0;
  v84[1].__shared_owners_ = 0;
  v84[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D8C820;
  LODWORD(v84[2].__vftable) = 50008;
  v153 = v84 + 1;
  v154 = v84;
  v140[0] = (uint64_t)&v84[1];
  v140[1] = (uint64_t)v84;
  do
    v86 = __ldxr(v85);
  while (__stxr(v86 + 1, v85));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v140);
  do
    v87 = __ldaxr(v85);
  while (__stlxr(v87 - 1, v85));
  if (!v87)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
  v88 = v154;
  if (v154)
  {
    v89 = (unint64_t *)&v154->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)operator new(0x30uLL);
  v91->__shared_owners_ = 0;
  v92 = (unint64_t *)&v91->__shared_owners_;
  v91->__shared_weak_owners_ = 0;
  v91->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1360;
  v91[1].__shared_owners_ = 0;
  v91[1].__shared_weak_owners_ = 0;
  v91[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2DA4C28;
  v153 = v91 + 1;
  v154 = v91;
  v139[0] = (uint64_t)&v91[1];
  v139[1] = (uint64_t)v91;
  do
    v93 = __ldxr(v92);
  while (__stxr(v93 + 1, v92));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v139);
  do
    v94 = __ldaxr(v92);
  while (__stlxr(v94 - 1, v92));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
  }
  v95 = v154;
  if (v154)
  {
    v96 = (unint64_t *)&v154->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)operator new(0x30uLL);
  v98->__shared_owners_ = 0;
  v99 = (unint64_t *)&v98->__shared_owners_;
  v98->__shared_weak_owners_ = 0;
  v98->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB358;
  v98[1].__shared_owners_ = 0;
  v98[1].__shared_weak_owners_ = 0;
  v98[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D814A0;
  v153 = v98 + 1;
  v154 = v98;
  v138[0] = (uint64_t)&v98[1];
  v138[1] = (uint64_t)v98;
  do
    v100 = __ldxr(v99);
  while (__stxr(v100 + 1, v99));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v138);
  do
    v101 = __ldaxr(v99);
  while (__stlxr(v101 - 1, v99));
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
  }
  v102 = v154;
  if (v154)
  {
    v103 = (unint64_t *)&v154->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = (std::__shared_weak_count *)operator new(0x38uLL);
  v105->__shared_owners_ = 0;
  v106 = (unint64_t *)&v105->__shared_owners_;
  v105->__shared_weak_owners_ = 0;
  v105->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC17F8;
  v105[1].__shared_weak_owners_ = 0;
  v105[2].__vftable = 0;
  v105[1].__shared_owners_ = 0;
  v105[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2DA6A68;
  LODWORD(v105[2].__vftable) = 90000;
  v153 = v105 + 1;
  v154 = v105;
  v137[0] = (uint64_t)&v105[1];
  v137[1] = (uint64_t)v105;
  do
    v107 = __ldxr(v106);
  while (__stxr(v107 + 1, v106));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v137);
  do
    v108 = __ldaxr(v106);
  while (__stlxr(v108 - 1, v106));
  if (!v108)
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
  v109 = v154;
  if (v154)
  {
    v110 = (unint64_t *)&v154->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (std::__shared_weak_count *)operator new(0x38uLL);
  v112->__shared_owners_ = 0;
  v113 = (unint64_t *)&v112->__shared_owners_;
  v112->__shared_weak_owners_ = 0;
  v112->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2550;
  v112[1].__shared_weak_owners_ = 0;
  v112[2].__vftable = 0;
  v112[1].__shared_owners_ = 0;
  v112[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2DAC728;
  LODWORD(v112[2].__vftable) = 50000;
  v153 = v112 + 1;
  v154 = v112;
  v136[0] = (uint64_t)&v112[1];
  v136[1] = (uint64_t)v112;
  do
    v114 = __ldxr(v113);
  while (__stxr(v114 + 1, v113));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v136);
  do
    v115 = __ldaxr(v113);
  while (__stlxr(v115 - 1, v113));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
  }
  v116 = v154;
  if (v154)
  {
    v117 = (unint64_t *)&v154->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = (std::__shared_weak_count *)operator new(0x38uLL);
  v119->__shared_owners_ = 0;
  v120 = (unint64_t *)&v119->__shared_owners_;
  v119->__shared_weak_owners_ = 0;
  v119->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB99C0;
  v119[1].__shared_weak_owners_ = 0;
  v119[2].__vftable = 0;
  v119[1].__shared_owners_ = 0;
  v119[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D72BE8;
  LODWORD(v119[2].__vftable) = 50002;
  v153 = v119 + 1;
  v154 = v119;
  v135[0] = (uint64_t)&v119[1];
  v135[1] = (uint64_t)v119;
  do
    v121 = __ldxr(v120);
  while (__stxr(v121 + 1, v120));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v135);
  do
    v122 = __ldaxr(v120);
  while (__stlxr(v122 - 1, v120));
  if (!v122)
  {
    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
    std::__shared_weak_count::__release_weak(v119);
  }
  v123 = v154;
  if (v154)
  {
    v124 = (unint64_t *)&v154->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)operator new(0x38uLL);
  v126->__shared_owners_ = 0;
  v127 = (unint64_t *)&v126->__shared_owners_;
  v126->__shared_weak_owners_ = 0;
  v126->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB75A8;
  v126[1].__shared_weak_owners_ = 0;
  v126[2].__vftable = 0;
  v126[1].__shared_owners_ = 0;
  v126[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E2D629D0;
  LODWORD(v126[2].__vftable) = 50005;
  v153 = v126 + 1;
  v154 = v126;
  v134[0] = (uint64_t)&v126[1];
  v134[1] = (uint64_t)v126;
  do
    v128 = __ldxr(v127);
  while (__stxr(v128 + 1, v127));
  Espresso::abstract_engine_factory::register_engine((uint64_t)this, v134);
  do
    v129 = __ldaxr(v127);
  while (__stlxr(v129 - 1, v127));
  if (!v129)
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
  }
  v130 = v154;
  if (v154)
  {
    v131 = (unint64_t *)&v154->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  std::recursive_mutex::unlock(v4);
  return this;
}

void sub_190EB265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::recursive_mutex **v9;
  std::recursive_mutex *v10;
  _QWORD **v11;
  _QWORD **v12;
  _QWORD **v13;
  _QWORD **v14;
  uint64_t v15;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 112);
  std::recursive_mutex::unlock(v10);
  std::unique_ptr<std::recursive_mutex>::reset[abi:ne180100](v9, 0);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*v14);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v13);
  std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(*v12);
  std::__tree<int>::destroy(*v11);
  _Unwind_Resume(a1);
}

void sub_190EB28C8()
{
  JUMPOUT(0x190EB2894);
}

void Espresso::abstract_engine_factory::register_engine(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t **v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *__p[2];
  uint64_t v23;

  v4 = (**(uint64_t (***)(uint64_t))*a2)(*a2);
  v5 = v4;
  v7 = (uint64_t **)(a1 + 32);
  v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v4 >= v9)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v9 >= v4)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 32);
LABEL_9:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = v5;
    v8[5] = 0;
    v8[6] = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(a1 + 24);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(a1 + 24) = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v12);
    ++*(_QWORD *)(a1 + 40);
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8 + 5, *a2, a2[1]);
  v13 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  std::string::basic_string[abi:ne180100]<0>(__p, v13);
  v15 = (uint64_t **)(a1 + 56);
  v14 = *(uint64_t **)(a1 + 56);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        v15 = (uint64_t **)v14;
        v16 = v14 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v14 + 4))
          break;
        v14 = *v15;
        v17 = v15;
        if (!*v15)
          goto LABEL_20;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, __p))
        break;
      v17 = v15 + 1;
      v14 = v15[1];
      if (!v14)
        goto LABEL_20;
    }
    v18 = v15;
  }
  else
  {
    v17 = (uint64_t **)(a1 + 56);
LABEL_20:
    v18 = operator new(0x48uLL);
    v18[2] = *(_OWORD *)__p;
    v19 = v23;
    __p[1] = 0;
    v23 = 0;
    __p[0] = 0;
    *((_QWORD *)v18 + 7) = 0;
    *((_QWORD *)v18 + 8) = 0;
    *((_QWORD *)v18 + 6) = v19;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v15;
    *v17 = (uint64_t *)v18;
    v20 = **(_QWORD **)(a1 + 48);
    v21 = (uint64_t *)v18;
    if (v20)
    {
      *(_QWORD *)(a1 + 48) = v20;
      v21 = *v17;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v21);
    ++*(_QWORD *)(a1 + 64);
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v18 + 7, *a2, a2[1]);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 64))(*a2, a1);
  if ((**(unsigned int (***)(uint64_t))*a2)(*a2) != 10007
    && (**(unsigned int (***)(uint64_t))*a2)(*a2) != 10006
    && (**(unsigned int (***)(uint64_t))*a2)(*a2) != 10008
    && (**(unsigned int (***)(uint64_t))*a2)(*a2) != 10009
    && (**(unsigned int (***)(uint64_t))*a2)(*a2) != 10011)
  {
    Espresso::abstract_engine_factory::register_kernel_class(a1, "brick", (void (***)(_QWORD))*a2, &__block_literal_global_30_4942);
  }
}

void sub_190EB2B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::CVAEngine::engine::platform(Espresso::CVAEngine::engine *this)
{
  return 7;
}

uint64_t Espresso::HXEngine::engine::platform(Espresso::HXEngine::engine *this)
{
  return 5;
}

void Espresso::ANERuntimeEngine::engine::register_kernels(Espresso::ANERuntimeEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_16164);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_16_16166);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_18_16168);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_20_16170);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_22_16172);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_24_16174);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_26_16176);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_28_16178);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(_QWORD))this, &__block_literal_global_30_16180);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_32_16182);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_34_16184);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(_QWORD))this, &__block_literal_global_36_16186);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_38_16188);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(_QWORD))this, &__block_literal_global_40_16190);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_42_16192);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_44_16194);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(_QWORD))this, &__block_literal_global_46_16196);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(_QWORD))this, &__block_literal_global_48_16198);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(_QWORD))this, &__block_literal_global_50_16200);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_op", (void (***)(_QWORD))this, &__block_literal_global_52_16202);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_unit", (void (***)(_QWORD))this, &__block_literal_global_54_16204);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "degamma", (void (***)(_QWORD))this, &__block_literal_global_56_16206);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_58_16208);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_batch", (void (***)(_QWORD))this, &__block_literal_global_60_16210);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "argsort", (void (***)(_QWORD))this, &__block_literal_global_62_16212);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(_QWORD))this, &__block_literal_global_64_16214);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(_QWORD))this, &__block_literal_global_66_16216);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_68_16218);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(_QWORD))this, &__block_literal_global_70_16220);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather", (void (***)(_QWORD))this, &__block_literal_global_72_16222);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "array_gather", (void (***)(_QWORD))this, &__block_literal_global_74_16224);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(_QWORD))this, &__block_literal_global_76_16226);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resize_nearest_neighbor", (void (***)(_QWORD))this, &__block_literal_global_78_16228);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resample", (void (***)(_QWORD))this, &__block_literal_global_80_16230);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(_QWORD))this, &__block_literal_global_82_16232);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(_QWORD))this, &__block_literal_global_84_16234);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_86_16236);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "broadcast", (void (***)(_QWORD))this, &__block_literal_global_88_16238);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_90_16240);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_92_16242);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(_QWORD))this, &__block_literal_global_94_16244);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_96_16246);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_97_16247);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_99_16249);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_101_16251);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(_QWORD))this, &__block_literal_global_103_16253);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(_QWORD))this, &__block_literal_global_105_16255);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_107_16257);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_109_16259);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(_QWORD))this, &__block_literal_global_111_16261);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconv3d", (void (***)(_QWORD))this, &__block_literal_global_113_16263);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_115_16265);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_117_16267);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(_QWORD))this, &__block_literal_global_119_16269);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(_QWORD))this, &__block_literal_global_121_16271);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "furthest_point_sampling", (void (***)(_QWORD))this, &__block_literal_global_123_16273);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(_QWORD))this, &__block_literal_global_125_16275);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "plane_rw", (void (***)(_QWORD))this, &__block_literal_global_127_16277);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(_QWORD))this, &__block_literal_global_129_16279);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(_QWORD))this, &__block_literal_global_131_16281);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "non_maximum_suppression", (void (***)(_QWORD))this, &__block_literal_global_133_16283);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_repeat", (void (***)(_QWORD))this, &__block_literal_global_135_16285);
}

const char *Espresso::MPSEngine::engine::name(Espresso::MPSEngine::engine *this)
{
  return "MPS";
}

const char *Espresso::BNNSEngine::engine::name(Espresso::BNNSEngine::engine *this)
{
  return "BNNS";
}

void Espresso::MPSEngine::engine::register_kernels(Espresso::MPSEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_17735);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_33_17737);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(_QWORD))this, &__block_literal_global_35_17739);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_37_17741);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_39_17743);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_41_17745);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(_QWORD))this, &__block_literal_global_43_17747);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_45_17749);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(_QWORD))this, &__block_literal_global_47_17751);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_49_17753);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_51_17755);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_53_17757);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_55_17759);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_57_17761);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_59_17763);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_61_17765);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_63_17767);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_65_17769);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_67_17771);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_69_17773);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_71_17775);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_73_17777);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(_QWORD))this, &__block_literal_global_75_17779);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_77_17781);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(_QWORD))this, &__block_literal_global_79_17783);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(_QWORD))this, &__block_literal_global_81_17785);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(_QWORD))this, &__block_literal_global_83_17787);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_if", (void (***)(_QWORD))this, &__block_literal_global_85_17789);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(_QWORD))this, &__block_literal_global_87_17791);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_loop", (void (***)(_QWORD))this, &__block_literal_global_89_17793);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_91_17795);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_93_17797);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_95_17799);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_97_17801);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(_QWORD))this, &__block_literal_global_99_17803);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(_QWORD))this, &__block_literal_global_100_17804);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "adam", (void (***)(_QWORD))this, &__block_literal_global_101_17805);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_grad", (void (***)(_QWORD))this, &__block_literal_global_103_17807);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_weights_grad", (void (***)(_QWORD))this, &__block_literal_global_105_17809);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool_grad", (void (***)(_QWORD))this, &__block_literal_global_107_17811);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation_grad", (void (***)(_QWORD))this, &__block_literal_global_109_17813);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat_grad", (void (***)(_QWORD))this, &__block_literal_global_111_17815);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_grad", (void (***)(_QWORD))this, &__block_literal_global_113_17817);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_weights_grad", (void (***)(_QWORD))this, &__block_literal_global_115_17819);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise_grad", (void (***)(_QWORD))this, &__block_literal_global_117_17821);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias_grad", (void (***)(_QWORD))this, &__block_literal_global_119_17823);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_loss_grad", (void (***)(_QWORD))this, &__block_literal_global_121_17825);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "grid_sampling", (void (***)(_QWORD))this, &__block_literal_global_123_17827);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "local_correlation", (void (***)(_QWORD))this, &__block_literal_global_125_17829);
}

const char *Espresso::CVAEngine::engine::name(Espresso::CVAEngine::engine *this)
{
  return "CVA";
}

void Espresso::CVAEngine::engine::register_kernels(Espresso::CVAEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_3512);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_6_3514);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_8_3516);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_10_3518);
}

const char *Espresso::V9Engine::engine::name(Espresso::V9Engine::engine *this)
{
  return "V9";
}

void Espresso::V9Engine::engine::register_kernels(Espresso::V9Engine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_34_12147);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_36_12149);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(_QWORD))this, &__block_literal_global_38_12151);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_40_12153);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_42_12155);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_44_12157);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_46_12159);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_48_12161);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(_QWORD))this, &__block_literal_global_50_12163);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_52_12165);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_54_12167);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_56_12169);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_58_12171);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_60_12173);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_62_12175);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_64_12177);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_66_12179);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "noise", (void (***)(_QWORD))this, &__block_literal_global_68_12181);
}

const char *Espresso::IREngine::engine::name(Espresso::IREngine::engine *this)
{
  return "IREngine";
}

const char *Espresso::HXEngine::engine::name(Espresso::HXEngine::engine *this)
{
  return "HX";
}

void Espresso::HXEngine::engine::register_kernels(Espresso::HXEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_15348);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_20_15350);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_22_15352);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_24_15354);
}

void Espresso::abstract_engine_factory::set_compatible_fallback_platform(uint64_t **a1, int a2, int a3)
{
  std::recursive_mutex *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  _DWORD *v13;

  v6 = (std::recursive_mutex *)a1[12];
  std::recursive_mutex::lock(v6);
  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = *((_DWORD *)v7 + 7);
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= a2)
      {
        v13 = v9;
        goto LABEL_13;
      }
      v7 = v9[1];
    }
    while (v7);
    v8 = v9 + 1;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_10:
  v13 = operator new(0x28uLL);
  v13[7] = a2;
  v13[8] = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = v9;
  *v8 = (uint64_t *)v13;
  v11 = (uint64_t *)**a1;
  v12 = (uint64_t *)v13;
  if (v11)
  {
    *a1 = v11;
    v12 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_13:
  v13[8] = a3;
  std::recursive_mutex::unlock(v6);
}

void sub_190EB3C80(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

const char *Espresso::MPSGraphCompilerEngine::engine::name(Espresso::MPSGraphCompilerEngine::engine *this)
{
  return "MPSGRAPH_COMPILER";
}

void Espresso::MPSGraphCompilerEngine::engine::register_kernels(Espresso::MPSGraphCompilerEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_8765);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_3_8767);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_5_8769);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_7_8771);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_9_8773);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(_QWORD))this, &__block_literal_global_11_8775);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_13_8777);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_15_8779);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(_QWORD))this, &__block_literal_global_17_8781);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_19_8783);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_21_8785);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(_QWORD))this, &__block_literal_global_23_8787);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_25_8789);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(_QWORD))this, &__block_literal_global_27_8791);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(_QWORD))this, &__block_literal_global_29_8793);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_31_8795);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(_QWORD))this, &__block_literal_global_33_8797);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(_QWORD))this, &__block_literal_global_35_8799);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_37_8801);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(_QWORD))this, &__block_literal_global_39_8803);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_41_8805);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_43_8807);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(_QWORD))this, &__block_literal_global_45_8809);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_47_8811);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(_QWORD))this, &__block_literal_global_49_8813);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(_QWORD))this, &__block_literal_global_51_8815);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(_QWORD))this, &__block_literal_global_53_8817);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(_QWORD))this, &__block_literal_global_55_8819);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_57_8821);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(_QWORD))this, &__block_literal_global_59_8823);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_61_8825);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_63_8827);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(_QWORD))this, &__block_literal_global_65_8829);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn_arch", (void (***)(_QWORD))this, &__block_literal_global_67_8831);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(_QWORD))this, &__block_literal_global_69_8833);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_71_8835);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_73_8837);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_75_8839);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(_QWORD))this, &__block_literal_global_77_8841);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_79_8843);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_81_8845);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(_QWORD))this, &__block_literal_global_83_8847);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(_QWORD))this, &__block_literal_global_85_8849);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(_QWORD))this, &__block_literal_global_87_8851);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(_QWORD))this, &__block_literal_global_89_8853);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(_QWORD))this, &__block_literal_global_91_8855);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_93_8857);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_95_8859);
}

const char *Espresso::DummyMPSBuffersEngine::engine::name(Espresso::DummyMPSBuffersEngine::engine *this)
{
  return "DummyMPSBuffersEngine";
}

void Espresso::DummyMPSBuffersEngine::engine::register_kernels(Espresso::DummyMPSBuffersEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_60);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_61);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_62);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_63);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_65);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_66);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_67);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_68);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_69);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_70);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "matrix_band_part", (void (***)(_QWORD))this, &__block_literal_global_72);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(_QWORD))this, &__block_literal_global_74);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_75);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(_QWORD))this, &__block_literal_global_77);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(_QWORD))this, &__block_literal_global_79);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(_QWORD))this, &__block_literal_global_81);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(_QWORD))this, &__block_literal_global_83);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_85);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_86);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(_QWORD))this, &__block_literal_global_88);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(_QWORD))this, &__block_literal_global_90);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "range", (void (***)(_QWORD))this, &__block_literal_global_92);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_93);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(_QWORD))this, &__block_literal_global_95);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_96);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(_QWORD))this, &__block_literal_global_98);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(_QWORD))this, &__block_literal_global_100);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(_QWORD))this, &__block_literal_global_102);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(_QWORD))this, &__block_literal_global_104);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_105);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(_QWORD))this, &__block_literal_global_107);
}

const char *Espresso::DummyMPSGraphEngine::engine::name(Espresso::DummyMPSGraphEngine::engine *this)
{
  return "DummyMPSGraphEngine";
}

void Espresso::DummyMPSGraphEngine::engine::register_kernels(Espresso::DummyMPSGraphEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_108);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_109);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_110);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_111);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_112);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(_QWORD))this, &__block_literal_global_114);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_115);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_116);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(_QWORD))this, &__block_literal_global_118);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_119);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_120);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(_QWORD))this, &__block_literal_global_122);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_123);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(_QWORD))this, &__block_literal_global_124);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(_QWORD))this, &__block_literal_global_126);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_127);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(_QWORD))this, &__block_literal_global_128);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(_QWORD))this, &__block_literal_global_129);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_130);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(_QWORD))this, &__block_literal_global_131);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_132);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_133);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(_QWORD))this, &__block_literal_global_134);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_135);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(_QWORD))this, &__block_literal_global_136);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(_QWORD))this, &__block_literal_global_138);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(_QWORD))this, &__block_literal_global_139);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(_QWORD))this, &__block_literal_global_141);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_142);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(_QWORD))this, &__block_literal_global_144);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_145);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_146);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(_QWORD))this, &__block_literal_global_148);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn_arch", (void (***)(_QWORD))this, &__block_literal_global_150);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(_QWORD))this, &__block_literal_global_152);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_153);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_154);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_155);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(_QWORD))this, &__block_literal_global_156);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_157);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_158);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(_QWORD))this, &__block_literal_global_159);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(_QWORD))this, &__block_literal_global_161);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(_QWORD))this, &__block_literal_global_163);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(_QWORD))this, &__block_literal_global_164);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(_QWORD))this, &__block_literal_global_166);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_167);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_168);
}

const char *Espresso::MetalLowmemEngine::engine::name(Espresso::MetalLowmemEngine::engine *this)
{
  return "METAL_LOWMEM";
}

void Espresso::MetalLowmemEngine::engine::register_kernels(Espresso::MetalLowmemEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_17493);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_20_17495);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_22_17497);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_24_17499);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_26_17501);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_28_17503);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(_QWORD))this, &__block_literal_global_30_17505);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_32_17507);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_34_17509);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_36_17511);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dropout_augment", (void (***)(_QWORD))this, &__block_literal_global_38_17513);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dropout_augment_join", (void (***)(_QWORD))this, &__block_literal_global_40_17515);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn", (void (***)(_QWORD))this, &__block_literal_global_42_17517);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_44_17519);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_46_17521);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_48_17523);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_50_17525);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_52_17527);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_54_17529);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "meta_convolution", (void (***)(_QWORD))this, &__block_literal_global_56_17531);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "wg_tx_out", (void (***)(_QWORD))this, &__block_literal_global_58_17533);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "wg_tx_in", (void (***)(_QWORD))this, &__block_literal_global_60_17535);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_62_17537);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(_QWORD))this, &__block_literal_global_64_17539);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(_QWORD))this, &__block_literal_global_66_17541);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_grad", (void (***)(_QWORD))this, &__block_literal_global_68_17543);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_weights_grad", (void (***)(_QWORD))this, &__block_literal_global_70_17545);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias_grad", (void (***)(_QWORD))this, &__block_literal_global_72_17547);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool_grad", (void (***)(_QWORD))this, &__block_literal_global_74_17549);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(_QWORD))this, &__block_literal_global_76_17551);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity_grad", (void (***)(_QWORD))this, &__block_literal_global_78_17553);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat_grad", (void (***)(_QWORD))this, &__block_literal_global_80_17555);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias_grad", (void (***)(_QWORD))this, &__block_literal_global_81_17556);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm_grad", (void (***)(_QWORD))this, &__block_literal_global_83_17558);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_grad", (void (***)(_QWORD))this, &__block_literal_global_85_17560);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_weights_grad", (void (***)(_QWORD))this, &__block_literal_global_87_17562);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise_grad", (void (***)(_QWORD))this, &__block_literal_global_89_17564);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "axpby", (void (***)(_QWORD))this, &__block_literal_global_91_17566);
}

const char *Espresso::ANECompilerEngine::engine::name(Espresso::ANECompilerEngine::engine *this)
{
  return "ANE_COMPILER";
}

void Espresso::ANECompilerEngine::engine::register_kernels(Espresso::ANECompilerEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_169_7729);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_171_7731);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_172);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_174);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_175_7733);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_176);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_178);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_179_7734);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(_QWORD))this, &__block_literal_global_181_7736);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_183_7738);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_185_7739);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(_QWORD))this, &__block_literal_global_187_7741);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(_QWORD))this, &__block_literal_global_188);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_189_7742);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(_QWORD))this, &__block_literal_global_191_7744);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(_QWORD))this, &__block_literal_global_193_7746);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(_QWORD))this, &__block_literal_global_195_7748);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_197_7749);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_op", (void (***)(_QWORD))this, &__block_literal_global_198);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_unit", (void (***)(_QWORD))this, &__block_literal_global_200);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "plane_rw", (void (***)(_QWORD))this, &__block_literal_global_202);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "degamma", (void (***)(_QWORD))this, &__block_literal_global_204);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_205_7753);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(_QWORD))this, &__block_literal_global_207_7755);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "argsort", (void (***)(_QWORD))this, &__block_literal_global_209_7757);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(_QWORD))this, &__block_literal_global_211_7759);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_212);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(_QWORD))this, &__block_literal_global_214);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather", (void (***)(_QWORD))this, &__block_literal_global_216);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "array_gather", (void (***)(_QWORD))this, &__block_literal_global_218);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(_QWORD))this, &__block_literal_global_220);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resize_nearest_neighbor", (void (***)(_QWORD))this, &__block_literal_global_222);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resample", (void (***)(_QWORD))this, &__block_literal_global_224);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(_QWORD))this, &__block_literal_global_226);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(_QWORD))this, &__block_literal_global_228);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(_QWORD))this, &__block_literal_global_230);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(_QWORD))this, &__block_literal_global_232);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_233_7770);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "broadcast", (void (***)(_QWORD))this, &__block_literal_global_234);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_235_7771);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_236);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(_QWORD))this, &__block_literal_global_238);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_239_7773);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_241_7774);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_243_7776);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_245_7778);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(_QWORD))this, &__block_literal_global_247_7780);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(_QWORD))this, &__block_literal_global_249_7782);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_250);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_252);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(_QWORD))this, &__block_literal_global_254);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconv3d", (void (***)(_QWORD))this, &__block_literal_global_256);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_258);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_260);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(_QWORD))this, &__block_literal_global_262);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(_QWORD))this, &__block_literal_global_264);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "furthest_point_sampling", (void (***)(_QWORD))this, &__block_literal_global_266);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(_QWORD))this, &__block_literal_global_268);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "non_maximum_suppression", (void (***)(_QWORD))this, &__block_literal_global_270);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_repeat", (void (***)(_QWORD))this, &__block_literal_global_272);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_batch", (void (***)(_QWORD))this, &__block_literal_global_274);
}

const char *Espresso::MPSBuffersEngine::engine::name(Espresso::MPSBuffersEngine::engine *this)
{
  return "MPS_BUFFERS";
}

void Espresso::MPSBuffersEngine::engine::register_kernels(Espresso::MPSBuffersEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_6533);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_25_6534);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_27_6536);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_29_6538);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_31_6540);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_33_6542);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_35_6544);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_37_6546);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_39_6548);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_41_6550);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "matrix_band_part", (void (***)(_QWORD))this, &__block_literal_global_43_6552);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(_QWORD))this, &__block_literal_global_45_6554);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_46_6555);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(_QWORD))this, &__block_literal_global_47_6556);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(_QWORD))this, &__block_literal_global_48_6557);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(_QWORD))this, &__block_literal_global_50_6559);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(_QWORD))this, &__block_literal_global_52_6561);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(_QWORD))this, &__block_literal_global_54_6563);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_56_6565);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_58_6567);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_60_6569);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_62_6571);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(_QWORD))this, &__block_literal_global_64_6573);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(_QWORD))this, &__block_literal_global_66_6575);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "adam", (void (***)(_QWORD))this, &__block_literal_global_68_6577);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(_QWORD))this, &__block_literal_global_70_6579);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_72_6581);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(_QWORD))this, &__block_literal_global_74_6583);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(_QWORD))this, &__block_literal_global_76_6585);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(_QWORD))this, &__block_literal_global_78_6587);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_80_6589);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(_QWORD))this, &__block_literal_global_82_6591);
}

const char *Espresso::ANERuntimeEngine::engine::name(Espresso::ANERuntimeEngine::engine *this)
{
  return "ANE_RUNTIME";
}

const char *Espresso::ANERuntimeEngine::direct_engine::name(Espresso::ANERuntimeEngine::direct_engine *this)
{
  return "ANE_RUNTIME_DIRECT";
}

const char *Espresso::DummyBNNSEngine::engine::name(Espresso::DummyBNNSEngine::engine *this)
{
  return "DummyBNNS";
}

const char *Espresso::QuantSimEngine::engine::name(Espresso::QuantSimEngine::engine *this)
{
  return "QUANT_SIM";
}

void Espresso::QuantSimEngine::engine::register_kernels(Espresso::QuantSimEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_8004);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_3_8006);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_5_8008);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_7_8010);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_9_8012);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_11_8014);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_13_8016);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_15_8018);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_17_8020);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_19_8022);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_21_8024);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_23_8026);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_25_8028);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(_QWORD))this, &__block_literal_global_27_8030);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_29_8032);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_31_8034);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_33_8036);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_35_8038);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_37_8040);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_39_8042);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(_QWORD))this, &__block_literal_global_41_8044);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "quantized_gather", (void (***)(_QWORD))this, &__block_literal_global_43_8046);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(_QWORD))this, &__block_literal_global_45_8048);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_branch", (void (***)(_QWORD))this, &__block_literal_global_47_8050);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_jump", (void (***)(_QWORD))this, &__block_literal_global_49_8052);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_call", (void (***)(_QWORD))this, &__block_literal_global_51_8054);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_return", (void (***)(_QWORD))this, &__block_literal_global_53_8056);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "get_shape", (void (***)(_QWORD))this, &__block_literal_global_55_8058);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(_QWORD))this, &__block_literal_global_57_8060);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather", (void (***)(_QWORD))this, &__block_literal_global_59_8062);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_60_8063);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "alloc", (void (***)(_QWORD))this, &__block_literal_global_62_8065);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_quantize", (void (***)(_QWORD))this, &__block_literal_global_64_8067);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_dequantize", (void (***)(_QWORD))this, &__block_literal_global_66_8069);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(_QWORD))this, &__block_literal_global_68_8071);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(_QWORD))this, &__block_literal_global_70_8073);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_if", (void (***)(_QWORD))this, &__block_literal_global_72_8075);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_loop", (void (***)(_QWORD))this, &__block_literal_global_74_8077);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_for", (void (***)(_QWORD))this, &__block_literal_global_76_8079);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(_QWORD))this, &__block_literal_global_78_8081);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_else", (void (***)(_QWORD))this, &__block_literal_global_80_8083);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_81_8084);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter", (void (***)(_QWORD))this, &__block_literal_global_83_8086);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(_QWORD))this, &__block_literal_global_85_8088);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "range", (void (***)(_QWORD))this, &__block_literal_global_87_8090);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_89_8092);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "matrix_band_part", (void (***)(_QWORD))this, &__block_literal_global_91_8094);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(_QWORD))this, &__block_literal_global_93_8096);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(_QWORD))this, &__block_literal_global_95_8098);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(_QWORD))this, &__block_literal_global_97_8100);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(_QWORD))this, &__block_literal_global_99_8102);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "array_gather", (void (***)(_QWORD))this, &__block_literal_global_101_8104);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "multinomial", (void (***)(_QWORD))this, &__block_literal_global_103_8106);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(_QWORD))this, &__block_literal_global_105_8108);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(_QWORD))this, &__block_literal_global_107_8110);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gumbel_max", (void (***)(_QWORD))this, &__block_literal_global_109_8112);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "builtin", (void (***)(_QWORD))this, &__block_literal_global_111_8114);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(_QWORD))this, &__block_literal_global_113_8116);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(_QWORD))this, &__block_literal_global_115_8118);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(_QWORD))this, &__block_literal_global_117_8120);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_119_8122);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_121_8124);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_123_8126);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sliding_windows", (void (***)(_QWORD))this, &__block_literal_global_125_8128);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reverse_seq", (void (***)(_QWORD))this, &__block_literal_global_127_8130);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cross_entropy", (void (***)(_QWORD))this, &__block_literal_global_129_8132);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(_QWORD))this, &__block_literal_global_131_8134);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "adam", (void (***)(_QWORD))this, &__block_literal_global_133_8136);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "non_maximum_suppression", (void (***)(_QWORD))this, &__block_literal_global_135_8138);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(_QWORD))this, &__block_literal_global_137_8140);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(_QWORD))this, &__block_literal_global_139_8142);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonzero", (void (***)(_QWORD))this, &__block_literal_global_141_8144);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "precompiled_segment", (void (***)(_QWORD))this, &__block_literal_global_143_8146);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(_QWORD))this, &__block_literal_global_145_8148);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cumsum", (void (***)(_QWORD))this, &__block_literal_global_147_8150);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(_QWORD))this, &__block_literal_global_149_8152);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sparse_inner_product", (void (***)(_QWORD))this, &__block_literal_global_151_8154);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "grid_sampling", (void (***)(_QWORD))this, &__block_literal_global_153_8156);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "local_correlation", (void (***)(_QWORD))this, &__block_literal_global_155_8158);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bahdanau_attention", (void (***)(_QWORD))this, &__block_literal_global_157_8160);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "self_attention", (void (***)(_QWORD))this, &__block_literal_global_159_8162);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(_QWORD))this, &__block_literal_global_161_8164);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(_QWORD))this, &__block_literal_global_163_8166);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "argsort", (void (***)(_QWORD))this, &__block_literal_global_165_8168);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice_update", (void (***)(_QWORD))this, &__block_literal_global_167_8170);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "static_quantize", (void (***)(_QWORD))this, &__block_literal_global_169_8172);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "static_dequantize", (void (***)(_QWORD))this, &__block_literal_global_171_8174);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_convolution_grad", (void (***)(_QWORD))this, &__block_literal_global_173_8176);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_inner_product_grad", (void (***)(_QWORD))this, &__block_literal_global_175_8178);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "furthest_point_sampling", (void (***)(_QWORD))this, &__block_literal_global_177_8180);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_179_8182);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_181_8184);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "loopkit", (void (***)(_QWORD))this, &__block_literal_global_183_8186);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(_QWORD))this, &__block_literal_global_185_8188);
}

const char *Espresso::MPSGraphEngine::engine::name(Espresso::MPSGraphEngine::engine *this)
{
  return "MPSGRAPH";
}

void Espresso::MPSGraphEngine::engine::register_kernels(Espresso::MPSGraphEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_3348);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_20_3350);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_22_3352);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_24_3354);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_26_3356);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(_QWORD))this, &__block_literal_global_28_3358);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_30_3360);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_32_3362);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(_QWORD))this, &__block_literal_global_34_3364);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(_QWORD))this, &__block_literal_global_36_3366);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_38_3368);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(_QWORD))this, &__block_literal_global_40_3370);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_42_3372);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(_QWORD))this, &__block_literal_global_44_3374);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(_QWORD))this, &__block_literal_global_46_3376);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_48_3378);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(_QWORD))this, &__block_literal_global_50_3380);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(_QWORD))this, &__block_literal_global_52_3382);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_54_3384);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(_QWORD))this, &__block_literal_global_56_3386);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_58_3388);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_60_3390);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(_QWORD))this, &__block_literal_global_62_3392);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_64_3394);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(_QWORD))this, &__block_literal_global_66_3396);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(_QWORD))this, &__block_literal_global_68_3398);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(_QWORD))this, &__block_literal_global_70_3400);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(_QWORD))this, &__block_literal_global_72_3402);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_74_3404);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(_QWORD))this, &__block_literal_global_76_3406);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_78);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_80_3409);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(_QWORD))this, &__block_literal_global_82);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn_arch", (void (***)(_QWORD))this, &__block_literal_global_84);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(_QWORD))this, &__block_literal_global_86_3413);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_88_3415);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_90_3417);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_92_3419);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(_QWORD))this, &__block_literal_global_94);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_96_3422);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_98_3424);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(_QWORD))this, &__block_literal_global_100_3426);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(_QWORD))this, &__block_literal_global_102_3428);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(_QWORD))this, &__block_literal_global_104_3430);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(_QWORD))this, &__block_literal_global_106);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(_QWORD))this, &__block_literal_global_108_3433);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_110_3435);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_112_3437);
}

const char *Espresso::DummyMPSEngine::engine::name(Espresso::DummyMPSEngine::engine *this)
{
  return "DummyMPSEngine";
}

void Espresso::DummyMPSEngine::engine::register_kernels(Espresso::DummyMPSEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_210);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_4);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(_QWORD))this, &__block_literal_global_6);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_8);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_10);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_12);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(_QWORD))this, &__block_literal_global_14);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(_QWORD))this, &__block_literal_global_16);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(_QWORD))this, &__block_literal_global_18);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_20);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_22);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_24);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(_QWORD))this, &__block_literal_global_26);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(_QWORD))this, &__block_literal_global_28);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_30);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(_QWORD))this, &__block_literal_global_32);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_34);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_36);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(_QWORD))this, &__block_literal_global_38);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(_QWORD))this, &__block_literal_global_40);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(_QWORD))this, &__block_literal_global_42);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_44);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(_QWORD))this, &__block_literal_global_46);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "grid_sampling", (void (***)(_QWORD))this, &__block_literal_global_48);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "local_correlation", (void (***)(_QWORD))this, &__block_literal_global_50);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(_QWORD))this, &__block_literal_global_52);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_54);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(_QWORD))this, &__block_literal_global_56);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(_QWORD))this, &__block_literal_global_58);
}

const char *Espresso::HXSimEngine::engine::name(Espresso::HXSimEngine::engine *this)
{
  return "HX_SIM";
}

void Espresso::HXSimEngine::engine::register_kernels(Espresso::HXSimEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_3760);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_4_3762);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(_QWORD))this, &__block_literal_global_6_3764);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(_QWORD))this, &__block_literal_global_8_3766);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(_QWORD))this, &__block_literal_global_10_3768);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_12_3770);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(_QWORD))this, &__block_literal_global_14_3772);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(_QWORD))this, &__block_literal_global_16_3774);
}

const char *Espresso::engine_cpu::name(Espresso::engine_cpu *this)
{
  return "CPU";
}

void Espresso::BNNSEngine::engine::register_kernels(Espresso::BNNSEngine::engine *this, uint64_t **a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(_QWORD))this, &__block_literal_global_19169);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(_QWORD))this, &__block_literal_global_3_19171);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(_QWORD))this, &__block_literal_global_5_19173);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(_QWORD))this, &__block_literal_global_7_19175);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(_QWORD))this, &__block_literal_global_9_19177);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(_QWORD))this, &__block_literal_global_11_19179);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(_QWORD))this, &__block_literal_global_13_19181);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(_QWORD))this, &__block_literal_global_15_19183);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_quantize", (void (***)(_QWORD))this, &__block_literal_global_17_19185);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(_QWORD))this, &__block_literal_global_19_19187);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_grad", (void (***)(_QWORD))this, &__block_literal_global_21_19189);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_weights_grad", (void (***)(_QWORD))this, &__block_literal_global_23_19191);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool_grad", (void (***)(_QWORD))this, &__block_literal_global_25_19193);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity_grad", (void (***)(_QWORD))this, &__block_literal_global_27_19195);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_grad", (void (***)(_QWORD))this, &__block_literal_global_29_19197);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_weights_grad", (void (***)(_QWORD))this, &__block_literal_global_31_19199);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_convolution_grad", (void (***)(_QWORD))this, &__block_literal_global_33_19200);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_inner_product_grad", (void (***)(_QWORD))this, &__block_literal_global_35_19202);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "linear_quantize", (void (***)(_QWORD))this, &__block_literal_global_37_19204);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "linear_dequantize", (void (***)(_QWORD))this, &__block_literal_global_39_19206);
  Espresso::abstract_engine_factory::set_compatible_fallback_platform(a2, 100, 0);
}

uint64_t ___ZL44is_espresso_running_on_virtual_apple_machinev_block_invoke()
{
  uint64_t result;
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0);
  if (!(_DWORD)result)
    is_espresso_running_on_virtual_apple_machine(void)::result = v2;
  return result;
}

void ___ZN8Espresso16ANERuntimeEngine7contextC2ERKNSt3__110shared_ptrINS_15abstract_engineEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("espresso.ane_surface_alias"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("espresso.ane_surface_alias"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(v1 + 144) = objc_msgSend(v4, "intValue");

  }
}

void sub_190EB7178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::context::network_transform_pre_allocation(Espresso::ANECompilerEngine::context *this, Espresso::net *a2)
{
  Espresso::ANECompilerEngine::context *v4;
  void **v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  NSString *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  unint64_t *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  char v95;
  int64x2_t *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t **v110;
  uint64_t **v111;
  uint64_t *v112;
  _QWORD *v113;
  void *v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  BOOL v129;
  _DWORD *v130;
  _DWORD *v131;
  int v132;
  uint64_t v133;
  void *v134;
  int v135;
  __int32 v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  std::string::size_type v161;
  unint64_t v162;
  uint64_t v163;
  const void *v164;
  _QWORD *v165;
  _QWORD *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  char *v170;
  __int128 v171;
  const void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  const void *v179;
  _QWORD *v180;
  _QWORD *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  unsigned __int8 *v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  unsigned __int8 *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  unint64_t *v214;
  unint64_t v215;
  void **p_data;
  void *size;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::string::size_type v222;
  void *v223;
  uint64_t v224;
  uint64_t *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  void **v238;
  void *v239;
  _QWORD *v240;
  uint64_t v241;
  const void **v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void **v247;
  unint64_t *v248;
  unint64_t v249;
  char *v250;
  __int128 v251;
  char *v252;
  char *v253;
  __int128 v254;
  char *v255;
  const std::string *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t **v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  void *v264;
  unint64_t *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  int v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  void *v296;
  unint64_t *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  int v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  void ***v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  void *v328;
  unint64_t *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  int v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  NSString *v356;
  NSString *v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  char v361;
  uint64_t v362;
  _QWORD *v363;
  Espresso::net **v364;
  Espresso::net **v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  _QWORD *v369;
  unsigned __int8 *v370;
  char *v371;
  const char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  const void *v376;
  Espresso::net *v377;
  Espresso::net *v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  int v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  const void *v386;
  void **v387;
  void **v388;
  uint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  const void *v393;
  Espresso::net **v394;
  uint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  char *v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  Espresso::net *v434;
  float v435;
  float v436;
  unint64_t v437;
  uint64_t *v438;
  float v439;
  float v440;
  NSObject *v441;
  const std::string *v442;
  _QWORD *v443;
  const std::string *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  uint64_t *v448;
  uint64_t *v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t *v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  void *v467;
  int *v468;
  int *i;
  void *v470;
  void *v471;
  void **v472;
  uint64_t v473;
  unint64_t v474;
  int v475;
  uint64_t **v476;
  uint64_t **v477;
  uint64_t *v478;
  _QWORD *v479;
  void *v480;
  unint64_t *v481;
  unint64_t *v482;
  unint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  _QWORD *v487;
  void *v488;
  uint64_t v489;
  unint64_t *v490;
  unint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  BOOL v495;
  _DWORD *v496;
  _DWORD *v497;
  int v498;
  uint64_t v499;
  void *v500;
  int v501;
  __int32 v502;
  uint64_t v503;
  unint64_t *v504;
  unint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  int v526;
  uint64_t **v527;
  uint64_t **v528;
  uint64_t *v529;
  void *v530;
  unint64_t *v531;
  unint64_t *v532;
  unint64_t v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  _QWORD *v537;
  void *v538;
  uint64_t v539;
  unint64_t *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  BOOL v545;
  _DWORD *v546;
  _DWORD *v547;
  int v548;
  uint64_t v549;
  void *v550;
  int v551;
  __int32 v552;
  uint64_t v553;
  unint64_t *v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  _QWORD *v574;
  uint64_t v575;
  unint64_t v576;
  int v577;
  uint64_t **v578;
  uint64_t **v579;
  uint64_t *v580;
  _QWORD *v581;
  void *v582;
  unint64_t *v583;
  unint64_t *v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  _QWORD *v589;
  void *v590;
  uint64_t v591;
  unint64_t *v592;
  unint64_t v593;
  std::__shared_weak_count *v594;
  unint64_t *v595;
  unint64_t v596;
  BOOL v597;
  _DWORD *v598;
  _DWORD *v599;
  int v600;
  uint64_t v601;
  void *v602;
  int v603;
  __int32 v604;
  uint64_t v605;
  unint64_t *v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  std::__shared_weak_count *v611;
  unint64_t *v612;
  unint64_t v613;
  std::__shared_weak_count *v614;
  unint64_t *v615;
  unint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  std::__shared_weak_count *v623;
  unint64_t *v624;
  unint64_t v625;
  _QWORD *v626;
  unint64_t v627;
  uint64_t **v628;
  uint64_t **v629;
  uint64_t **v630;
  uint64_t **v631;
  uint64_t *v632;
  uint64_t *v633;
  uint64_t *v634;
  _QWORD *v635;
  void *v636;
  unint64_t *v637;
  unint64_t *v638;
  unint64_t v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  _QWORD *v643;
  void *v644;
  uint64_t v645;
  unint64_t *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  uint64_t v651;
  void *v652;
  unint64_t *v653;
  unint64_t *v654;
  unint64_t v655;
  std::__shared_weak_count *v656;
  unint64_t *v657;
  unint64_t v658;
  _DWORD *v659;
  _DWORD *v660;
  int v661;
  std::__shared_weak_count *v662;
  unint64_t *v663;
  unint64_t v664;
  std::__shared_weak_count *v665;
  unint64_t *v666;
  unint64_t v667;
  std::__shared_weak_count *v668;
  unint64_t *v669;
  unint64_t v670;
  std::__shared_weak_count *v671;
  unint64_t *v672;
  unint64_t v673;
  std::__shared_weak_count *v674;
  unint64_t *v675;
  unint64_t v676;
  std::__shared_weak_count *v677;
  unint64_t *v678;
  unint64_t v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  NSString *v683;
  Espresso::net *v684;
  unint64_t *v685;
  uint64_t v686;
  unint64_t v687;
  uint64_t v688;
  void *v689;
  unint64_t *v690;
  unint64_t *v691;
  unint64_t v692;
  std::__shared_weak_count *v693;
  unint64_t *v694;
  unint64_t v695;
  _QWORD *v696;
  _QWORD *v697;
  int v698;
  int v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t *v702;
  unint64_t v703;
  std::__shared_weak_count *v704;
  unint64_t *v705;
  unint64_t v706;
  int v707;
  std::__shared_weak_count *v708;
  unint64_t *v709;
  unint64_t v710;
  std::__shared_weak_count *v711;
  unint64_t *v712;
  unint64_t v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  void **v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  void *v721;
  unint64_t *v722;
  unint64_t *v723;
  unint64_t v724;
  std::__shared_weak_count *v725;
  unint64_t *v726;
  unint64_t v727;
  _QWORD *v728;
  _QWORD *v729;
  int v730;
  __int32 v731;
  uint64_t v732;
  uint64_t v733;
  unint64_t *v734;
  unint64_t v735;
  std::__shared_weak_count *v736;
  unint64_t *v737;
  unint64_t v738;
  std::__shared_weak_count *v739;
  unint64_t *v740;
  unint64_t v741;
  std::__shared_weak_count *v742;
  unint64_t *v743;
  unint64_t v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  void ***v748;
  uint64_t v749;
  unint64_t v750;
  uint64_t v751;
  void *v752;
  unint64_t *v753;
  unint64_t *v754;
  unint64_t v755;
  std::__shared_weak_count *v756;
  unint64_t *v757;
  unint64_t v758;
  _QWORD *v759;
  _QWORD *v760;
  int v761;
  __int32 v762;
  uint64_t v763;
  uint64_t v764;
  unint64_t *v765;
  unint64_t v766;
  std::__shared_weak_count *v767;
  unint64_t *v768;
  unint64_t v769;
  std::__shared_weak_count *v770;
  unint64_t *v771;
  unint64_t v772;
  std::__shared_weak_count *v773;
  unint64_t *v774;
  unint64_t v775;
  std::__shared_weak_count *v776;
  unint64_t *v777;
  unint64_t v778;
  Espresso::ANECompilerEngine *v779;
  NSString *v780;
  _BYTE *v781;
  char v782;
  std::string *v783;
  std::string *v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  void *v788;
  unint64_t *v789;
  unint64_t *v790;
  unint64_t v791;
  std::__shared_weak_count *v792;
  unint64_t *v793;
  unint64_t v794;
  _QWORD *v795;
  _QWORD *v796;
  int v797;
  int v798;
  uint64_t v799;
  uint64_t v800;
  unint64_t *v801;
  unint64_t v802;
  std::__shared_weak_count *v803;
  unint64_t *v804;
  unint64_t v805;
  int v806;
  std::__shared_weak_count *v807;
  unint64_t *v808;
  unint64_t v809;
  std::__shared_weak_count *v810;
  unint64_t *v811;
  unint64_t v812;
  std::__shared_weak_count *v813;
  unint64_t *v814;
  unint64_t v815;
  Espresso::net **v816;
  uint64_t v817;
  unint64_t v818;
  uint64_t v819;
  void *v820;
  unint64_t *v821;
  unint64_t *v822;
  unint64_t v823;
  std::__shared_weak_count *v824;
  unint64_t *v825;
  unint64_t v826;
  _QWORD *v827;
  _QWORD *v828;
  int v829;
  int v830;
  uint64_t v831;
  uint64_t v832;
  unint64_t *v833;
  unint64_t v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  unint64_t v837;
  int v838;
  std::__shared_weak_count *v839;
  unint64_t *v840;
  unint64_t v841;
  std::__shared_weak_count *v842;
  unint64_t *v843;
  unint64_t v844;
  std::__shared_weak_count *v845;
  unint64_t *v846;
  unint64_t v847;
  NSString *v848;
  void **v849;
  uint64_t v850;
  int64x2_t *v851;
  uint64_t v852;
  void **v853;
  void **v854;
  uint64_t v855;
  unint64_t v856;
  uint64_t v857;
  void *v858;
  uint64_t v859;
  unint64_t *v860;
  unint64_t v861;
  std::__shared_weak_count *v862;
  unint64_t *v863;
  unint64_t v864;
  uint64_t v865;
  uint64_t v866;
  int v867;
  int v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t *v871;
  unint64_t v872;
  std::__shared_weak_count *v873;
  unint64_t *v874;
  unint64_t v875;
  int v876;
  std::__shared_weak_count *v877;
  unint64_t *v878;
  unint64_t v879;
  std::__shared_weak_count *v880;
  unint64_t *v881;
  unint64_t v882;
  std::__shared_weak_count *v883;
  unint64_t *v884;
  unint64_t v885;
  Espresso::net *v886;
  uint64_t v887;
  void **v888;
  uint64_t v889;
  NSString *v890;
  void **v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  void *v895;
  uint64_t v896;
  unint64_t *v897;
  unint64_t v898;
  std::__shared_weak_count *v899;
  unint64_t *v900;
  unint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  unint64_t *v908;
  unint64_t v909;
  std::__shared_weak_count *v910;
  unint64_t *v911;
  unint64_t v912;
  int v913;
  std::__shared_weak_count *v914;
  unint64_t *v915;
  unint64_t v916;
  std::__shared_weak_count *v917;
  unint64_t *v918;
  unint64_t v919;
  std::__shared_weak_count *v920;
  unint64_t *v921;
  unint64_t v922;
  NSString *v923;
  std::string *v924;
  uint64_t v925;
  unint64_t v926;
  _QWORD *v927;
  _QWORD *v928;
  _QWORD *v929;
  char *v930;
  __int128 v931;
  const void *v932;
  const Espresso::net *v933;
  std::__shared_weak_count *v934;
  unint64_t *v935;
  unint64_t v936;
  unint64_t *v937;
  unint64_t v938;
  char *v939;
  unsigned int v940;
  float v941;
  float v942;
  char *v943;
  _QWORD *v944;
  _QWORD *v945;
  uint64_t v946;
  int v947;
  int v948;
  unsigned int v949;
  int v950;
  char *v951;
  unsigned int v952;
  uint64_t v953;
  BOOL v954;
  int v956;
  _QWORD *v957;
  _QWORD *j;
  _QWORD *v959;
  _QWORD *v960;
  int v961;
  uint64_t v962;
  _QWORD *v963;
  const void *v965;
  std::__shared_weak_count *v966;
  unint64_t *v967;
  unint64_t v968;
  void *v969;
  unint64_t *v970;
  unint64_t v971;
  uint64_t v972;
  unint64_t *v973;
  unint64_t v974;
  std::__shared_weak_count *v975;
  unint64_t *v976;
  unint64_t v977;
  uint64_t v978;
  const void *v979;
  void *v980;
  void *v981;
  std::__shared_weak_count *v982;
  unint64_t *v983;
  unint64_t v984;
  NSString *v985;
  int v986;
  uint64_t v988;
  __int128 v989;
  int v990;
  unint64_t *v991;
  unint64_t v992;
  uint64_t v993;
  const void *v994;
  void *v995;
  std::__shared_weak_count *v996;
  unint64_t *v997;
  unint64_t v998;
  int v999;
  int v1001;
  unint64_t *v1002;
  unint64_t v1003;
  uint64_t v1004;
  const void *v1005;
  std::__shared_weak_count *v1006;
  unint64_t *v1007;
  unint64_t v1008;
  int v1009;
  unint64_t *v1010;
  unint64_t v1011;
  const void *v1012;
  std::string::size_type v1013;
  unint64_t *v1014;
  unint64_t v1015;
  _QWORD *v1016;
  _QWORD *v1017;
  unint64_t *v1018;
  unint64_t v1019;
  _QWORD *v1020;
  char v1021;
  char *v1022;
  float v1023;
  int v1024;
  uint64_t v1025;
  const void *v1026;
  std::__shared_weak_count *v1027;
  unint64_t *v1028;
  unint64_t v1029;
  unint64_t v1030;
  unint64_t *v1031;
  unint64_t v1032;
  unint64_t *v1033;
  unint64_t v1034;
  unint64_t v1035;
  size_t v1036;
  unint64_t *v1037;
  unint64_t v1038;
  std::string::size_type v1039;
  int v1040;
  std::__shared_weak_count *v1041;
  unint64_t *v1042;
  unint64_t v1043;
  unint64_t v1044;
  unint64_t *v1045;
  unint64_t v1046;
  std::string::size_type v1047;
  std::__shared_weak_count *v1048;
  unint64_t *v1049;
  unint64_t v1050;
  std::__shared_weak_count *v1051;
  unint64_t *v1052;
  unint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  float *v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  std::__shared_weak_count *v1060;
  unint64_t *v1061;
  unint64_t v1062;
  unint64_t *v1063;
  float v1064;
  float *v1065;
  uint64_t v1066;
  uint64_t v1067;
  float *v1068;
  uint64_t v1069;
  unint64_t v1070;
  unint64_t *v1071;
  unint64_t v1072;
  std::string::size_type v1073;
  int v1074;
  std::__shared_weak_count *v1075;
  unint64_t *v1076;
  unint64_t v1077;
  std::__shared_weak_count *v1078;
  unint64_t *v1079;
  unint64_t v1080;
  unint64_t v1081;
  unint64_t *v1082;
  unint64_t v1083;
  std::string::size_type v1084;
  std::__shared_weak_count *v1085;
  unint64_t *v1086;
  unint64_t v1087;
  __int128 v1088;
  std::__shared_weak_count *v1089;
  unint64_t *v1090;
  unint64_t v1091;
  std::__shared_weak_count *v1092;
  unint64_t *v1093;
  unint64_t v1094;
  uint64_t v1095;
  float *v1096;
  float *v1097;
  float v1098;
  std::__shared_weak_count *v1099;
  unint64_t *v1100;
  unint64_t v1101;
  std::__shared_weak_count *v1102;
  unint64_t *v1103;
  unint64_t v1104;
  std::__shared_weak_count *v1105;
  unint64_t *v1106;
  unint64_t v1107;
  uint64_t v1108;
  std::__shared_weak_count *v1109;
  unint64_t *v1110;
  unint64_t v1111;
  std::__shared_weak_count *v1112;
  unint64_t *v1113;
  unint64_t v1114;
  std::__shared_weak_count *v1115;
  unint64_t *v1116;
  unint64_t v1117;
  __int128 v1118;
  float v1119;
  float v1120;
  float v1121;
  unsigned int v1122;
  uint64_t v1123;
  uint64_t v1124;
  int v1125;
  uint64_t v1126;
  uint64_t v1127;
  unint64_t v1128;
  uint64_t v1129;
  _QWORD *v1130;
  _QWORD *v1131;
  _QWORD *v1132;
  std::__shared_weak_count *v1133;
  unint64_t *v1134;
  unint64_t v1135;
  uint64_t v1136;
  unint64_t *v1137;
  unint64_t v1138;
  uint64_t v1140;
  NSString *v1141;
  _BYTE *v1142;
  Espresso::ANECompilerEngine *v1143;
  int v1144;
  unsigned __int8 *v1145;
  int v1146;
  void **v1147;
  _QWORD *v1148;
  _QWORD *v1149;
  unsigned int v1150;
  char *v1151;
  char *v1152;
  Espresso::ANECompilerEngine *v1153;
  _QWORD *v1154;
  void ***v1155;
  Espresso::ANECompilerEngine *v1156;
  _QWORD *v1157;
  void *v1158;
  std::string *v1159;
  void **v1160;
  uint64_t *v1161;
  uint64_t **v1162;
  _QWORD *v1163;
  _QWORD *v1164;
  void *v1165;
  char *v1166;
  Espresso::net *v1167;
  std::string v1168;
  _QWORD v1169[2];
  void (*v1170)(uint64_t, void **);
  void *v1171;
  Espresso::net *v1172;
  _QWORD v1173[2];
  void (*v1174)(uint64_t, uint64_t *);
  void *v1175;
  Espresso::net *v1176;
  _QWORD v1177[2];
  void (*v1178)(uint64_t, uint64_t);
  void *v1179;
  Espresso::net *v1180;
  _QWORD v1181[2];
  void (*v1182)(uint64_t, int64x2_t *);
  void *v1183;
  Espresso::net *v1184;
  Espresso::net *v1185;
  unint64_t v1186;
  uint64_t v1187;
  void (*v1188)(uint64_t, int64x2_t *);
  void *v1189;
  Espresso::net *v1190;
  Espresso::net *v1191;
  const void **v1192;
  uint64_t v1193;
  void (*v1194)(uint64_t, int *);
  void *v1195;
  Espresso::net *v1196;
  Espresso::net *v1197;
  void **v1198;
  uint64_t v1199;
  void (*v1200)(uint64_t, int64x2_t *);
  void *v1201;
  Espresso::net *v1202;
  Espresso::net *v1203;
  Espresso::net *v1204;
  uint64_t v1205;
  _QWORD v1206[5];
  _QWORD v1207[2];
  void (*v1208)(uint64_t, int64x2_t *);
  void *v1209;
  Espresso::ANECompilerEngine::context *v1210;
  Espresso::net *v1211;
  _QWORD v1212[2];
  void (*v1213)(uint64_t, int64x2_t *);
  void *v1214;
  Espresso::net *v1215;
  Espresso::net *v1216;
  std::string *v1217;
  uint64_t v1218;
  void (*v1219)(uint64_t, int64x2_t *);
  void *v1220;
  Espresso::net *v1221;
  Espresso::net *v1222;
  _QWORD v1223[2];
  void (*v1224)(uint64_t, uint64_t);
  void *v1225;
  Espresso::net *v1226;
  Espresso::net *v1227;
  _QWORD v1228[2];
  void (*v1229)(uint64_t, int64x2_t *);
  void *v1230;
  Espresso::net *v1231;
  Espresso::net *v1232;
  std::string *v1233;
  uint64_t v1234;
  void (*v1235)(uint64_t, int64x2_t *);
  void *v1236;
  void **v1237;
  Espresso::net **v1238;
  void ***v1239;
  std::string v1240;
  _QWORD *v1241;
  Espresso::net *v1242;
  Espresso::net *v1243;
  _QWORD *v1244;
  unint64_t v1245;
  std::__shared_weak_count *v1246;
  __int128 v1247;
  unint64_t v1248;
  std::__shared_weak_count *v1249;
  unint64_t v1250;
  std::__shared_weak_count *v1251;
  int v1252[2];
  std::__shared_weak_count *v1253;
  std::string v1254;
  std::string v1255;
  std::string __src;
  unint64_t v1257;
  std::__shared_weak_count *v1258;
  unint64_t v1259[2];
  unint64_t v1260;
  unint64_t v1261;
  uint64_t v1262;
  _QWORD *v1263;
  _QWORD *v1264;
  unint64_t v1265;
  void *v1266[2];
  __int128 v1267;
  void *v1268[4];
  void *v1269[2];
  __int128 v1270;
  void *v1271[4];
  int v1272;
  Espresso::net *v1273;
  void *v1274;
  uint64_t v1275;
  void (*v1276)(uint64_t, uint64_t);
  void **v1277;
  Espresso::net *v1278;
  Espresso::net *v1279;
  _BYTE __p[32];
  uint64_t v1281;
  void *v1282;
  _QWORD *v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  int64x2_t v1287;
  __int128 v1288;
  _BYTE v1289[32];
  Espresso::net *v1290;
  _QWORD v1291[3];

  v1291[0] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 568))
    return;
  *((_BYTE *)a2 + 568) = 1;
  (*(void (**)(Espresso::ANECompilerEngine::context *))(*(_QWORD *)this + 176))(this);
  v1167 = this;
  if ((***((unsigned int (****)(_QWORD))this + 1))(*((_QWORD *)this + 1)) >> 1 != 5003)
    goto LABEL_17;
  std::string::basic_string[abi:ne180100]<0>(&v1287, "experimental.ane.skip_network_transform_pre_allocation");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a2 + 472, (uint64_t)&v1287, (uint64_t)__p, (std::string *)v1266);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v1288) < 0)
    operator delete((void *)v1287.i64[0]);
  if (SBYTE7(v1267) < 0)
  {
    if (v1266[1] != (void *)1)
      goto LABEL_13;
    v5 = (void **)v1266[0];
  }
  else
  {
    if (SBYTE7(v1267) != 1)
      goto LABEL_13;
    v5 = v1266;
  }
  if (*(_BYTE *)v5 == 49)
    goto LABEL_14;
LABEL_13:
  if (*((_BYTE *)this + 127))
  {
LABEL_14:
    v6 = 1;
    if ((BYTE7(v1267) & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "per_network_configuration");
  std::string::basic_string[abi:ne180100]<0>(&v1240, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a2 + 472, (uint64_t)__p, (uint64_t)&v1240, (std::string *)&v1287);
  if (SHIBYTE(v1240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1240.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v95 = BYTE7(v1288);
  if (SBYTE7(v1288) < 0)
  {
    v96 = (int64x2_t *)v1287.i64[0];
    if (v1287.i64[1] != 1)
    {
      v6 = 0;
      goto LABEL_1432;
    }
  }
  else
  {
    if (SBYTE7(v1288) != 1)
    {
      v6 = 0;
      goto LABEL_1433;
    }
    v96 = &v1287;
  }
  if (v96->i8[0] == 49)
  {
    Espresso::ANECompilerEngine::context::handle_cast_kernel(a2, this, v4);
    v6 = 1;
    v95 = BYTE7(v1288);
  }
  else
  {
    v6 = 0;
  }
  if (v95 < 0)
  {
    v96 = (int64x2_t *)v1287.i64[0];
LABEL_1432:
    operator delete(v96);
  }
LABEL_1433:
  if ((BYTE7(v1267) & 0x80) != 0)
LABEL_15:
    operator delete(v1266[0]);
LABEL_16:
  if (v6)
    return;
LABEL_17:
  Espresso::ANECompilerEngine::context::handle_cast_kernel(a2, this, v4);
  v1207[0] = MEMORY[0x1E0C809B0];
  v1207[1] = 3221225472;
  v1208 = ___ZN8Espresso17ANECompilerEngine19mix_stack_nd_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke;
  v1209 = &__block_descriptor_48_e9_v16__0_v8l;
  v1210 = this;
  v1211 = a2;
  v7 = v1207;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1268, 0, 28);
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1269[0] = a2;
  v8 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v8)
  {
    v9 = 0;
    v1163 = v7;
    do
    {
      LODWORD(v1268[3]) = v9;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v8 + 16 * v9), *(_QWORD *)(v8 + 16 * v9 + 8));
      v10 = v1267;
      v11 = *(void **)(v1267 + 64);
      if (v11
      {
        v12 = *(unint64_t **)(v10 + 72);
        if (v12)
        {
          v13 = v12 + 1;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
      }
      else
      {
        v12 = 0;
      }
      v15 = (std::__shared_weak_count *)v1266[1];
      v1266[0] = v11;
      v1266[1] = v12;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        v11 = v1266[0];
      }
      if (v11)
        v1208((uint64_t)v7, (int64x2_t *)v1266);
      ++v9;
      v8 = *((_QWORD *)a2 + 4);
    }
    while (v9 < (*((_QWORD *)a2 + 5) - v8) >> 4);
    v18 = v1268[0];
    v19 = v1268[1];
    if (v1268[0] != v1268[1])
    {
      v20 = 0;
      do
      {
        v21 = *(_DWORD *)v18 + v20;
        *(_DWORD *)v18 = v21;
        v22 = v18[1];
        if (v22)
        {
          v1287.i32[0] = v21;
          v23 = v18[2];
          v1287.i64[1] = v22;
          *(_QWORD *)&v1288 = v23;
          if (v23)
          {
            v24 = (unint64_t *)(v23 + 8);
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          *((_QWORD *)&v1288 + 1) = 0;
          *(_OWORD *)v1289 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v18[3], v18[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18[4] - v18[3]) >> 3));
          *(_QWORD *)&v1289[16] = 0;
          *(_QWORD *)&v1289[24] = 0;
          v1290 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v18[6], v18[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18[7] - v18[6]) >> 3));
          memset(&v1240, 0, sizeof(v1240));
          v1233 = &v1240;
          LOBYTE(v1234) = 0;
          v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
          v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
          v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
          v1233 = &v1240;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v1233 = (std::string *)&v1289[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v1233 = (std::string *)((char *)&v1288 + 8);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v26 = (std::__shared_weak_count *)v1288;
          if ((_QWORD)v1288)
          {
            v27 = (unint64_t *)(v1288 + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v21);
          v29 = -1;
        }
        v20 += v29;
        v18 += 9;
      }
      while (v18 != v19);
      v7 = v1163;
    }
  }
  v1287.i64[0] = (uint64_t)v1268;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v34 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v36 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v37 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  v1212[0] = MEMORY[0x1E0C809B0];
  v1212[1] = 3221225472;
  v1213 = ___ZN8Espresso17ANECompilerEngine26mix_sequence_repeat_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke;
  v1214 = &__block_descriptor_48_e9_v16__0_v8l;
  v1215 = v1167;
  v1216 = a2;
  v39 = v1212;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1268, 0, 28);
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1269[0] = a2;
  v40 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v40)
  {
    v41 = 0;
    v1164 = v39;
    do
    {
      LODWORD(v1268[3]) = v41;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v40 + 16 * v41), *(_QWORD *)(v40 + 16 * v41 + 8));
      v42 = v1267;
      v43 = *(void **)(v1267 + 64);
      if (v43
      {
        v44 = *(unint64_t **)(v42 + 72);
        if (v44)
        {
          v45 = v44 + 1;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
      }
      else
      {
        v44 = 0;
      }
      v47 = (std::__shared_weak_count *)v1266[1];
      v1266[0] = v43;
      v1266[1] = v44;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
        v43 = v1266[0];
      }
      if (v43)
        v1213((uint64_t)v39, (int64x2_t *)v1266);
      ++v41;
      v40 = *((_QWORD *)a2 + 4);
    }
    while (v41 < (*((_QWORD *)a2 + 5) - v40) >> 4);
    v50 = v1268[0];
    v51 = v1268[1];
    if (v1268[0] != v1268[1])
    {
      v52 = 0;
      do
      {
        v53 = *(_DWORD *)v50 + v52;
        *(_DWORD *)v50 = v53;
        v54 = v50[1];
        if (v54)
        {
          v1287.i32[0] = v53;
          v55 = v50[2];
          v1287.i64[1] = v54;
          *(_QWORD *)&v1288 = v55;
          if (v55)
          {
            v56 = (unint64_t *)(v55 + 8);
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          *((_QWORD *)&v1288 + 1) = 0;
          *(_OWORD *)v1289 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v50[3], v50[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50[4] - v50[3]) >> 3));
          *(_QWORD *)&v1289[16] = 0;
          *(_QWORD *)&v1289[24] = 0;
          v1290 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v50[6], v50[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50[7] - v50[6]) >> 3));
          memset(&v1240, 0, sizeof(v1240));
          v1233 = &v1240;
          LOBYTE(v1234) = 0;
          v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
          v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
          v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
          v1233 = &v1240;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v1233 = (std::string *)&v1289[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v1233 = (std::string *)((char *)&v1288 + 8);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v58 = (std::__shared_weak_count *)v1288;
          if ((_QWORD)v1288)
          {
            v59 = (unint64_t *)(v1288 + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          v61 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v53);
          v61 = -1;
        }
        v52 += v61;
        v50 += 9;
      }
      while (v50 != v51);
      v39 = v1164;
    }
  }
  v1287.i64[0] = (uint64_t)v1268;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v66 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v68 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v69 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  v1151 = (char *)a2 + 472;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)a2 + 472);
  v1153 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v1153, v71))
  {
    v1181[0] = MEMORY[0x1E0C809B0];
    v1181[1] = 3221225472;
    v1182 = ___ZN8Espresso17ANECompilerEngine7context21decompose_tile_kernelEPNS_3netEPS1__block_invoke;
    v1183 = &__block_descriptor_48_e9_v16__0_v8l;
    v1184 = v1167;
    v1185 = a2;
    v72 = v1181;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
    memset(v1268, 0, 28);
    v1267 = 0u;
    *(_OWORD *)v1266 = 0u;
    v1269[0] = a2;
    v73 = *((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 5) != v73)
    {
      v74 = 0;
      do
      {
        LODWORD(v1268[3]) = v74;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v73 + 16 * v74), *(_QWORD *)(v73 + 16 * v74 + 8));
        v75 = v1267;
        v76 = *(void **)(v1267 + 64);
        if (v76
        {
          v77 = *(unint64_t **)(v75 + 72);
          if (v77)
          {
            v78 = v77 + 1;
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
        }
        else
        {
          v77 = 0;
        }
        v80 = (std::__shared_weak_count *)v1266[1];
        v1266[0] = v76;
        v1266[1] = v77;
        if (v80)
        {
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
          v76 = v1266[0];
        }
        if (v76)
          v1182((uint64_t)v72, (int64x2_t *)v1266);
        ++v74;
        v73 = *((_QWORD *)a2 + 4);
      }
      while (v74 < (*((_QWORD *)a2 + 5) - v73) >> 4);
      v83 = v1268[0];
      v84 = v1268[1];
      if (v1268[0] != v1268[1])
      {
        v85 = 0;
        do
        {
          v86 = *(_DWORD *)v83 + v85;
          *(_DWORD *)v83 = v86;
          v87 = v83[1];
          if (v87)
          {
            v1287.i32[0] = v86;
            v88 = v83[2];
            v1287.i64[1] = v87;
            *(_QWORD *)&v1288 = v88;
            if (v88)
            {
              v89 = (unint64_t *)(v88 + 8);
              do
                v90 = __ldxr(v89);
              while (__stxr(v90 + 1, v89));
            }
            *((_QWORD *)&v1288 + 1) = 0;
            *(_OWORD *)v1289 = 0uLL;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v83[3], v83[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83[4] - v83[3]) >> 3));
            *(_QWORD *)&v1289[16] = 0;
            *(_QWORD *)&v1289[24] = 0;
            v1290 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v83[6], v83[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83[7] - v83[6]) >> 3));
            memset(&v1240, 0, sizeof(v1240));
            v1233 = &v1240;
            LOBYTE(v1234) = 0;
            v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
            v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
            v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
            v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
            Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
            v1233 = &v1240;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
            v1233 = (std::string *)&v1289[16];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
            v1233 = (std::string *)((char *)&v1288 + 8);
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
            v91 = (std::__shared_weak_count *)v1288;
            if ((_QWORD)v1288)
            {
              v92 = (unint64_t *)(v1288 + 8);
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v94 = 1;
          }
          else
          {
            Espresso::net::remove_layer(a2, v86);
            v94 = -1;
          }
          v85 += v94;
          v83 += 9;
        }
        while (v83 != v84);
      }
    }
    v1287.i64[0] = (uint64_t)v1268;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
    if (*((_QWORD *)&v1267 + 1))
    {
      v98 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = (std::__shared_weak_count *)v1266[1];
    if (v1266[1])
    {
      v101 = (unint64_t *)((char *)v1266[1] + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
    v103 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v104 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }

  }
  v1266[0] = (void *)MEMORY[0x1E0C809B0];
  v1266[1] = (void *)3221225472;
  *(_QWORD *)&v1267 = ___ZN8Espresso17ANECompilerEngine7context21decompose_fill_kernelEPNS_3netEPS1__block_invoke;
  *((_QWORD *)&v1267 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  v1268[0] = v1167;
  v1268[1] = a2;
  Espresso::single_match_replace<Espresso::generic_fill_kernel>(a2, v1266);
  v1223[0] = MEMORY[0x1E0C809B0];
  v1223[1] = 3221225472;
  v1224 = ___ZN8Espresso17ANECompilerEngine7context29decompose_layer_normalizationEPNS_3netEPS1__block_invoke;
  v1225 = &__block_descriptor_48_e9_v16__0_v8l;
  v1226 = v1167;
  v1227 = a2;
  v106 = v1223;
  v1165 = v106;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1271, 0, 24);
  v1270 = 0u;
  *(_OWORD *)v1269 = 0u;
  memset(v1268, 0, sizeof(v1268));
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1271[3] = a2;
  v1287.i32[0] = 0;
  v107 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v107)
  {
    v108 = 0;
    v109 = 0;
    do
    {
      LODWORD(v1271[2]) = v109;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v1268, *(_QWORD *)(v107 + 16 * v108), *(_QWORD *)(v107 + 16 * v108 + 8));
      v110 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], v109, &v1287);
      if ((char *)v110[6] - (char *)v110[5] == 4)
      {
        HIDWORD(v1271[2]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], (int)v1271[2], &v1271[2])[5];
        v111 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1282, SHIDWORD(v1271[2]), (_DWORD *)&v1271[2] + 1);
        if ((char *)v111[6] - (char *)v111[5] == 4)
        {
          v112 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * SHIDWORD(v1271[2]));
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1268[2], *v112, v112[1]);
          v113 = v1268[0];
          v114 = (void *)*((_QWORD *)v1268[0] + 8);
          if (v114
          {
            v115 = (unint64_t *)v113[9];
            if (v115)
            {
              v116 = v115 + 1;
              do
                v117 = __ldxr(v116);
              while (__stxr(v117 + 1, v116));
            }
          }
          else
          {
            v115 = 0;
          }
          v118 = (std::__shared_weak_count *)v1266[1];
          v1266[0] = v114;
          v1266[1] = v115;
          if (v118)
          {
            v119 = (unint64_t *)&v118->__shared_owners_;
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
          v121 = v1268[2];
          v122 = (void *)*((_QWORD *)v1268[2] + 8);
          if (v122
          {
            v123 = v121[9];
            if (v123)
            {
              v124 = (unint64_t *)(v123 + 8);
              do
                v125 = __ldxr(v124);
              while (__stxr(v125 + 1, v124));
            }
          }
          else
          {
            v123 = 0;
          }
          v126 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
          *(_QWORD *)&v1267 = v122;
          *((_QWORD *)&v1267 + 1) = v123;
          if (v126)
          {
            v127 = (unint64_t *)&v126->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
          if (v1266[0])
            v129 = (_QWORD)v1267 == 0;
          else
            v129 = 1;
          if (!v129)
            v1224((uint64_t)v106, (uint64_t)v1266);
        }
      }
      v108 = ++v1287.i32[0];
      v107 = *((_QWORD *)a2 + 4);
      v109 = v108;
    }
    while (v108 < (*((_QWORD *)a2 + 5) - v107) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v130 = v1269[0];
  v131 = v1269[1];
  if (v1269[0] != v1269[1])
  {
    v132 = 0;
    do
    {
      Espresso::net::remove_layer(a2, v132 + *v130++);
      --v132;
    }
    while (v130 != v131);
  }
  v133 = *((_QWORD *)&v1270 + 1);
  v134 = v1271[0];
  if (*((void **)&v1270 + 1) != v1271[0])
  {
    v135 = 0;
    do
    {
      v136 = *(_DWORD *)v133;
      LODWORD(v1274) = *(_DWORD *)v133 + v135;
      v1287.i32[0] = v136;
      v137 = *(_QWORD *)(v133 + 16);
      v1287.i64[1] = *(_QWORD *)(v133 + 8);
      *(_QWORD *)&v1288 = v137;
      if (v137)
      {
        v138 = (unint64_t *)(v137 + 8);
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
      }
      *((_QWORD *)&v1288 + 1) = 0;
      *(_OWORD *)v1289 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, *(_QWORD *)(v133 + 24), *(_QWORD *)(v133 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v133 + 32) - *(_QWORD *)(v133 + 24)) >> 3));
      *(_QWORD *)&v1289[16] = 0;
      *(_QWORD *)&v1289[24] = 0;
      v1290 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], *(_QWORD *)(v133 + 48), *(_QWORD *)(v133 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v133 + 56) - *(_QWORD *)(v133 + 48)) >> 3));
      memset(&v1240, 0, sizeof(v1240));
      v1233 = &v1240;
      LOBYTE(v1234) = 0;
      v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
      v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
      v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers((uint64_t)a2, (int *)&v1274, (uint64_t *)&v1240);
      v1233 = &v1240;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
      v1233 = (std::string *)&v1289[16];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
      v1233 = (std::string *)((char *)&v1288 + 8);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
      v140 = (std::__shared_weak_count *)v1288;
      if ((_QWORD)v1288)
      {
        v141 = (unint64_t *)(v1288 + 8);
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      ++v135;
      v133 += 72;
    }
    while ((void *)v133 != v134);
  }
  v1287.i64[0] = (uint64_t)&v1270 + 8;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  if (v1269[0])
  {
    v1269[1] = v1269[0];
    operator delete(v1269[0]);
  }
  v143 = (std::__shared_weak_count *)v1268[3];
  if (v1268[3])
  {
    v144 = (unint64_t *)((char *)v1268[3] + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = (std::__shared_weak_count *)v1268[1];
  if (v1268[1])
  {
    v147 = (unint64_t *)((char *)v1268[1] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v150 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v153 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v155 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v156 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }

  v1162 = (uint64_t **)((char *)a2 + 184);
  v1166 = (char *)a2 + 56;
  v1152 = (char *)a2 + 96;
  v158 = *((_QWORD *)a2 + 4);
  v159 = *((_QWORD *)a2 + 5);
  do
  {
    v1255.__r_.__value_.__r.__words[0] = 0;
    if ((unint64_t)(v159 - v158) < 0x51)
      break;
    v160 = 0;
    v161 = 0;
    v162 = 5;
    do
    {
      v1254.__r_.__value_.__r.__words[0] = v161;
      v1168.__r_.__value_.__r.__words[0] = v161 + 1;
      v1260 = v161 + 2;
      v1259[0] = v161 + 3;
      v1257 = v161 + 4;
      *(_QWORD *)v1252 = v162;
      v163 = *(_QWORD *)(v158 + 16 * v161);
      v164 = *(const void **)(v163 + 64);
      if (!v164)
        goto LABEL_336;
      if (!v165)
        goto LABEL_336;
      v166 = v165;
      v167 = *(std::__shared_weak_count **)(v163 + 72);
      v1287.i64[0] = (uint64_t)v165;
      v1287.i64[1] = (uint64_t)v167;
      if (v167)
      {
        v168 = (unint64_t *)&v167->__shared_owners_;
        do
          v169 = __ldxr(v168);
        while (__stxr(v169 + 1, v168));
      }
      if ((Espresso::net *)v165[1] == v1167
        && *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v165 + 320))(v165) + 20) == 5
        && *(_DWORD *)(*(uint64_t (**)(_QWORD *))(*v166 + 320))(v166) == 1
        && *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v166 + 320))(v166) + 4) == 1)
      {
        *(_QWORD *)__p = &v1254;
        *(_QWORD *)__p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, (unint64_t *)&v1254, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
        v170 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1162, *(_QWORD **)__p, (__int128 **)__p);
        v171 = *(_OWORD *)(v170 + 72);
        *(_OWORD *)v1266 = *(_OWORD *)(v170 + 56);
        v1267 = v171;
        v172 = (const void *)*((_QWORD *)v170 + 12);
        v1268[0] = *((void **)v170 + 11);
        memset(&v1268[1], 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v1268[1], v172, *((_QWORD *)v170 + 13), (uint64_t)(*((_QWORD *)v170 + 13) - (_QWORD)v172) >> 2);
        v173 = (*(uint64_t (**)(_QWORD *))(*v166 + 320))(v166);
        if (*(_DWORD *)(v173 + 8) != LODWORD(v1266[0]))
          goto LABEL_328;
        v174 = (*(uint64_t (**)(_QWORD *))(*v166 + 320))(v166);
        if (*(_DWORD *)(v174 + 12) != HIDWORD(v1266[0]))
          goto LABEL_328;
        v175 = (*(uint64_t (**)(_QWORD *))(*v166 + 320))(v166);
        if (*(_DWORD *)(v175 + 16) != LODWORD(v1266[1]))
          goto LABEL_328;
        v176 = *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v166 + 320))(v166) + 8);
        v177 = (*(uint64_t (**)(_QWORD *))(*v166 + 320))(v166);
        v178 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v1168.__r_.__value_.__r.__words[0]);
        v179 = *(const void **)(v178 + 64);
        if (!v179)
          goto LABEL_328;
        v1146 = *(_DWORD *)(v177 + 12);
        if (!v180)
          goto LABEL_328;
        v181 = v180;
        v182 = *(std::__shared_weak_count **)(v178 + 72);
        *(_QWORD *)__p = v180;
        *(_QWORD *)&__p[8] = v182;
        if (v182)
        {
          v183 = (unint64_t *)&v182->__shared_owners_;
          do
            v184 = __ldxr(v183);
          while (__stxr(v184 + 1, v183));
        }
        if ((Espresso::net *)v180[1] == v1167
          && *(_DWORD *)(*(uint64_t (**)(_QWORD *))(*v180 + 384))(v180) == 1
          && *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v181 + 384))(v181) + 4) == 1
          && *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v181 + 384))(v181) + 8) == v176
          && *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v181 + 384))(v181) + 12) == 1
          && *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v181 + 384))(v181) + 16) == 1)
        {
          v185 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v1260);
          std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v1240, *(void **)(v185 + 64), *(_QWORD *)(v185 + 72));
          if (v1240.__r_.__value_.__r.__words[0]
            && *(Espresso::net **)(v1240.__r_.__value_.__r.__words[0] + 8) == v1167
            && *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v1240.__r_.__value_.__l.__data_ + 320))() == 1
            && *(float *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v1240.__r_.__value_.__l.__data_
                                                                            + 320))(v1240.__r_.__value_.__r.__words[0])
                        + 8) == 1.0
            && *(float *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v1240.__r_.__value_.__l.__data_
                                                                            + 320))(v1240.__r_.__value_.__r.__words[0])
                        + 12) == 0.0
            && !*(_DWORD *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v1240.__r_.__value_.__l.__data_
                                                                              + 320))(v1240.__r_.__value_.__r.__words[0])
                          + 4))
          {
            v186 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v1259[0]);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_load_constant_kernel,Espresso::base_kernel>(&v1233, *(void **)(v186 + 64), *(_QWORD *)(v186 + 72));
            if (v1233
              && (Espresso::net *)v1233->__r_.__value_.__l.__size_ == v1167
              && *(_DWORD *)(*(uint64_t (**)(void))(v1233->__r_.__value_.__r.__words[0] + 384))() == 1
              && *(_DWORD *)((*(uint64_t (**)(std::string *))(v1233->__r_.__value_.__r.__words[0] + 384))(v1233)
                           + 4) == 1
              && *(_DWORD *)((*(uint64_t (**)(std::string *))(v1233->__r_.__value_.__r.__words[0] + 384))(v1233)
                           + 8) == v176
              && *(_DWORD *)((*(uint64_t (**)(std::string *))(v1233->__r_.__value_.__r.__words[0] + 384))(v1233)
                           + 12) == 1
              && *(_DWORD *)((*(uint64_t (**)(std::string *))(v1233->__r_.__value_.__r.__words[0] + 384))(v1233)
                           + 16) == 1)
            {
              v187 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v1257);
              std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v1274, *(void **)(v187 + 64), *(_QWORD *)(v187 + 72));
              if (v1274
                && *((Espresso::net **)v1274 + 1) == v1167
                && !*(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v1274 + 320))()
                && *(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v1274 + 320))(v1274) + 8) == 1.0
                && *(float *)((*(uint64_t (**)(void *))(*(_QWORD *)v1274 + 320))(v1274) + 12) == 0.0
                && !*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v1274 + 320))(v1274) + 4))
              {
                v188 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * *(_QWORD *)v1252);
                std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reshape_kernel,Espresso::base_kernel>(v1228, *(void **)(v188 + 64), *(_QWORD *)(v188 + 72));
                if (v1228[0])
                {
                  if (*(Espresso::net **)(v1228[0] + 8) == v1167
                    && *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v1228[0] + 320))() + 20) == 3
                    && *(_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v1228[0] + 320))(v1228[0]) == v176
                    && *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1228[0] + 320))(v1228[0]) + 4) == v1146
                    && *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1228[0] + 320))(v1228[0]) + 8) == 1)
                  {
                    v1217 = &v1254;
                    v189 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)&v1254, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                    if (v189[4] - v189[3] == 24)
                    {
                      v1217 = (std::string *)&v1260;
                      v190 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1260, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                      if (v190[4] - v190[3] == 24)
                      {
                        v1217 = (std::string *)&v1257;
                        v191 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1257, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                        if (v191[4] - v191[3] == 24)
                        {
                          v1217 = &v1168;
                          v192 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)&v1168, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                          if (v192[4] - v192[3] == 24)
                          {
                            v1217 = (std::string *)v1259;
                            v193 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, v1259, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                            if (v193[4] - v193[3] == 24)
                            {
                              v1217 = (std::string *)v1252;
                              v194 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)v1252, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                              if (v194[4] - v194[3] == 24)
                              {
                                v1217 = &v1254;
                                v195 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, (unint64_t *)&v1254, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                if (v195[4] - v195[3] == 24)
                                {
                                  v1217 = (std::string *)&v1260;
                                  v196 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1260, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                  if (v196[4] - v196[3] == 48)
                                  {
                                    v1217 = (std::string *)&v1257;
                                    v197 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1257, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                    if (v197[4] - v197[3] == 48)
                                    {
                                      v1217 = &v1168;
                                      v198 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, (unint64_t *)&v1168, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                      if (v198[4] == v198[3])
                                      {
                                        v1217 = (std::string *)v1259;
                                        v199 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, v1259, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                        if (v199[4] == v199[3])
                                        {
                                          v1217 = (std::string *)v1252;
                                          v200 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, (unint64_t *)v1252, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                          if (v200[4] - v200[3] == 24)
                                          {
                                            v1217 = (std::string *)&v1260;
                                            v1145 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1260, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217)[3];
                                            v1217 = &v1254;
                                            v201 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)&v1254, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                            if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1145, (unsigned __int8 *)v201[3]))
                                            {
                                              v1217 = (std::string *)&v1260;
                                              v202 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1260, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217)[3];
                                              v1217 = &v1168;
                                              v203 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)&v1168, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                              if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v202 + 24), (unsigned __int8 *)v203[3]))
                                              {
                                                v1217 = (std::string *)&v1257;
                                                v204 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1257, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217)[3];
                                                v1217 = (std::string *)&v1260;
                                                v205 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1260, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                                if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v204, (unsigned __int8 *)v205[3]))
                                                {
                                                  v1217 = (std::string *)&v1257;
                                                  v206 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1257, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217)[3];
                                                  v1217 = (std::string *)v1259;
                                                  v207 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, v1259, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                                  if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v206 + 24), (unsigned __int8 *)v207[3]))
                                                  {
                                                    v1217 = (std::string *)v1252;
                                                    v208 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, (unint64_t *)v1252, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217)[3];
                                                    v1217 = (std::string *)&v1257;
                                                    v209 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1257, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1217);
                                                    if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v208, (unsigned __int8 *)v209[3]))
                                                    {
                                                      v210 = v181[43];
                                                      if (!v210
                                                        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v210 + 32))(v210))
                                                      {
LABEL_321:
                                                        v1218 = 0;
                                                        v1217 = 0;
                                                        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1217);
                                                      }
                                                      else
                                                      {
                                                        v211 = v181[43];
                                                        v213 = *(uint64_t **)(v211 + 160);
                                                        v212 = *(_QWORD *)(v211 + 168);
                                                        v1217 = (std::string *)v213;
                                                        v1218 = v212;
                                                        if (v212)
                                                        {
                                                          v214 = (unint64_t *)(v212 + 8);
                                                          do
                                                            v215 = __ldxr(v214);
                                                          while (__stxr(v215 + 1, v214));
                                                        }
                                                        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1217);
                                                        if (v213)
                                                        {
                                                          p_data = (void **)&v1233->__r_.__value_.__l.__data_;
                                                          size = (void *)v1233[14].__r_.__value_.__l.__size_;
                                                          if (!size
                                                            || (*(unsigned int (**)(void *))(*(_QWORD *)size + 32))(size))
                                                          {
                                                            goto LABEL_321;
                                                          }
                                                          v223 = p_data[43];
                                                          v225 = (uint64_t *)*((_QWORD *)v223 + 20);
                                                          v224 = *((_QWORD *)v223 + 21);
                                                          v1217 = (std::string *)v225;
                                                          v1218 = v224;
                                                          if (v224)
                                                          {
                                                            v226 = (unint64_t *)(v224 + 8);
                                                            do
                                                              v227 = __ldxr(v226);
                                                            while (__stxr(v227 + 1, v226));
                                                          }
                                                          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1217);
                                                          if (v225)
                                                          {
                                                            *(_DWORD *)(*(uint64_t (**)(_QWORD *))(*v181 + 384))(v181) = v176;
                                                            *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v181 + 384))(v181)
                                                                      + 4) = 1;
                                                            *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v181 + 384))(v181)
                                                                      + 8) = 1;
                                                            *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v181 + 384))(v181)
                                                                      + 20) = 1;
                                                            v228 = v181[43];
                                                            if (v228
                                                              && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v228 + 32))(v228))
                                                            {
                                                              v229 = v181[43];
                                                              v231 = *(uint64_t **)(v229 + 160);
                                                              v230 = *(_QWORD *)(v229 + 168);
                                                              v1217 = (std::string *)v231;
                                                              v1218 = v230;
                                                              if (v230)
                                                              {
                                                                v232 = (unint64_t *)(v230 + 8);
                                                                do
                                                                  v233 = __ldxr(v232);
                                                                while (__stxr(v233 + 1, v232));
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v1218 = 0;
                                                              v1217 = 0;
                                                            }
                                                            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v1204, v176, 1, 1, 1);
                                                            v234 = 0;
                                                            v235 = *((int *)v1204 + 2);
                                                            do
                                                            {
                                                              v235 *= *(int *)((char *)v1204 + v234 + 12);
                                                              v234 += 4;
                                                            }
                                                            while (v234 != 12);
                                                            memcpy(*((void **)v1204 + 3), v1217[1].__r_.__value_.__l.__data_, 4 * v235);
                                                            v1198 = (void **)v1204;
                                                            v1199 = v1205;
                                                            if (v1205)
                                                            {
                                                              v236 = (unint64_t *)(v1205 + 8);
                                                              do
                                                                v237 = __ldxr(v236);
                                                              while (__stxr(v237 + 1, v236));
                                                            }
                                                            Espresso::generic_load_constant_kernel::set_constant_blob(v181, (uint64_t)&v1198);
                                                            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1198);
                                                            *(_DWORD *)(*(uint64_t (**)(std::string *))(v1233->__r_.__value_.__r.__words[0] + 384))(v1233) = v176;
                                                            *(_DWORD *)((*(uint64_t (**)(std::string *))(v1233->__r_.__value_.__r.__words[0] + 384))(v1233)
                                                                      + 4) = 1;
                                                            *(_DWORD *)((*(uint64_t (**)(std::string *))(v1233->__r_.__value_.__r.__words[0] + 384))(v1233)
                                                                      + 8) = 1;
                                                            *(_DWORD *)((*(uint64_t (**)(std::string *))(v1233->__r_.__value_.__r.__words[0] + 384))(v1233)
                                                                      + 20) = 1;
                                                            v238 = (void **)&v1233->__r_.__value_.__l.__data_;
                                                            v239 = (void *)v1233[14].__r_.__value_.__l.__size_;
                                                            if (v239
                                                              && !(*(unsigned int (**)(void *))(*(_QWORD *)v239 + 32))(v239))
                                                            {
                                                              v240 = v238[43];
                                                              v242 = (const void **)v240[20];
                                                              v241 = v240[21];
                                                              v1192 = v242;
                                                              v1193 = v241;
                                                              if (v241)
                                                              {
                                                                v243 = (unint64_t *)(v241 + 8);
                                                                do
                                                                  v244 = __ldxr(v243);
                                                                while (__stxr(v244 + 1, v243));
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v1192 = 0;
                                                              v1193 = 0;
                                                            }
                                                            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v1186, v176, 1, 1, 1);
                                                            v245 = 0;
                                                            v246 = *(int *)(v1186 + 8);
                                                            do
                                                            {
                                                              v246 *= *(int *)(v1186 + 12 + v245);
                                                              v245 += 4;
                                                            }
                                                            while (v245 != 12);
                                                            memcpy(*(void **)(v1186 + 24), v1192[3], 4 * v246);
                                                            v247 = (void **)&v1233->__r_.__value_.__l.__data_;
                                                            v1262 = v1186;
                                                            v1263 = (_QWORD *)v1187;
                                                            if (v1187)
                                                            {
                                                              v248 = (unint64_t *)(v1187 + 8);
                                                              do
                                                                v249 = __ldxr(v248);
                                                              while (__stxr(v249 + 1, v248));
                                                            }
                                                            Espresso::generic_load_constant_kernel::set_constant_blob(v247, (uint64_t)&v1262);
                                                            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1262);
                                                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1168;
                                                            __src.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)&v1168, (uint64_t)&std::piecewise_construct, (uint64_t **)&__src)[3];
                                                            v250 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1162, __src.__r_.__value_.__l.__data_, (__int128 **)&__src);
                                                            *((_DWORD *)v250 + 14) = v176;
                                                            *((_DWORD *)v250 + 15) = 1;
                                                            *(_QWORD *)&v251 = 0x100000001;
                                                            *((_QWORD *)&v251 + 1) = 0x100000001;
                                                            *((_OWORD *)v250 + 4) = v251;
                                                            *((_QWORD *)v250 + 10) = 0;
                                                            *((_QWORD *)v250 + 11) = 0;
                                                            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v250 + 96, 0, 0, 0);
                                                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1260;
                                                            __src.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1260, (uint64_t)&std::piecewise_construct, (uint64_t **)&__src)[3];
                                                            v252 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1162, __src.__r_.__value_.__l.__data_, (__int128 **)&__src);
                                                            *((_DWORD *)v252 + 14) = v176;
                                                            *((_DWORD *)v252 + 15) = v1146;
                                                            *((_OWORD *)v252 + 4) = xmmword_191A93700;
                                                            *((_QWORD *)v252 + 10) = 0;
                                                            *((_QWORD *)v252 + 11) = 0;
                                                            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v252 + 96, 0, 0, 0);
                                                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v1259;
                                                            __src.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, v1259, (uint64_t)&std::piecewise_construct, (uint64_t **)&__src)[3];
                                                            v253 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1162, __src.__r_.__value_.__l.__data_, (__int128 **)&__src);
                                                            *((_DWORD *)v253 + 14) = v176;
                                                            *((_DWORD *)v253 + 15) = 1;
                                                            *(_QWORD *)&v254 = 0x100000001;
                                                            *((_QWORD *)&v254 + 1) = 0x100000001;
                                                            *((_OWORD *)v253 + 4) = v254;
                                                            *((_QWORD *)v253 + 10) = 0;
                                                            *((_QWORD *)v253 + 11) = 0;
                                                            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v253 + 96, 0, 0, 0);
                                                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1257;
                                                            __src.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1257, (uint64_t)&std::piecewise_construct, (uint64_t **)&__src)[3];
                                                            v255 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1162, __src.__r_.__value_.__l.__data_, (__int128 **)&__src);
                                                            *((_DWORD *)v255 + 14) = v176;
                                                            *((_DWORD *)v255 + 15) = v1146;
                                                            *((_OWORD *)v255 + 4) = xmmword_191A93700;
                                                            *((_QWORD *)v255 + 10) = 0;
                                                            *((_QWORD *)v255 + 11) = 0;
                                                            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v255 + 96, 0, 0, 0);
                                                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1255;
                                                            v256 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, (unint64_t *)&v1255, (uint64_t)&std::piecewise_construct, (uint64_t **)&__src)[3];
                                                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1260;
                                                            v257 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1260, (uint64_t)&std::piecewise_construct, (uint64_t **)&__src);
                                                            std::string::operator=((std::string *)v257[3], v256);
                                                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v1252;
                                                            v258 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)v1252, (uint64_t)&std::piecewise_construct, (uint64_t **)&__src);
                                                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1257;
                                                            v259 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1257, (uint64_t)&std::piecewise_construct, (uint64_t **)&__src);
                                                            if (v259 != v258)
                                                              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v259 + 3), (std::string *)v258[3], (std::string *)v258[4], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v258[4] - v258[3]) >> 3));
                                                            Espresso::net::remove_layer(a2, v1252[0]);
                                                            Espresso::net::remove_layer(a2, (int)v1254.__r_.__value_.__l.__data_);
                                                            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1186);
                                                            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1192);
                                                            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1204);
                                                            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1217);
                                                            v160 = 1;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1228);
              }
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1274);
            }
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1233);
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1240);
          if (!v182)
          {
LABEL_328:
            if (v1268[1])
            {
              v1268[2] = v1268[1];
              operator delete(v1268[1]);
            }
            v167 = (std::__shared_weak_count *)v1287.i64[1];
            goto LABEL_331;
          }
        }
        else if (!v182)
        {
          goto LABEL_328;
        }
        v218 = (unint64_t *)&v182->__shared_owners_;
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
        goto LABEL_328;
      }
LABEL_331:
      if (v167)
      {
        v220 = (unint64_t *)&v167->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
LABEL_336:
      v222 = v1255.__r_.__value_.__r.__words[0];
      v161 = ++v1255.__r_.__value_.__r.__words[0];
      v162 = v222 + 6;
      v158 = *((_QWORD *)a2 + 4);
      v159 = *((_QWORD *)a2 + 5);
    }
    while (v162 < (v159 - v158) >> 4);
  }
  while ((v160 & 1) != 0);
  v1217 = (std::string *)MEMORY[0x1E0C809B0];
  v1218 = 3221225472;
  v1219 = ___ZN8Espresso17ANECompilerEngine7context29decompose_layer_normalizationEPNS_3netEPS1__block_invoke_2;
  v1220 = &__block_descriptor_48_e9_v16__0_v8l;
  v1221 = v1167;
  v1222 = a2;
  v260 = &v1217;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1268, 0, 28);
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1269[0] = a2;
  v261 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v261)
  {
    v262 = 0;
    do
    {
      LODWORD(v1268[3]) = v262;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v261 + 16 * v262), *(_QWORD *)(v261 + 16 * v262 + 8));
      v263 = v1267;
      v264 = *(void **)(v1267 + 64);
      if (v264
      {
        v265 = *(unint64_t **)(v263 + 72);
        if (v265)
        {
          v266 = v265 + 1;
          do
            v267 = __ldxr(v266);
          while (__stxr(v267 + 1, v266));
        }
      }
      else
      {
        v265 = 0;
      }
      v268 = (std::__shared_weak_count *)v1266[1];
      v1266[0] = v264;
      v1266[1] = v265;
      if (v268)
      {
        v269 = (unint64_t *)&v268->__shared_owners_;
        do
          v270 = __ldaxr(v269);
        while (__stlxr(v270 - 1, v269));
        if (!v270)
        {
          ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
          std::__shared_weak_count::__release_weak(v268);
        }
        v264 = v1266[0];
      }
      if (v264)
        v1219((uint64_t)v260, (int64x2_t *)v1266);
      ++v262;
      v261 = *((_QWORD *)a2 + 4);
    }
    while (v262 < (*((_QWORD *)a2 + 5) - v261) >> 4);
    v271 = v1268[0];
    v272 = v1268[1];
    if (v1268[0] != v1268[1])
    {
      v273 = 0;
      do
      {
        v274 = *(_DWORD *)v271 + v273;
        *(_DWORD *)v271 = v274;
        v275 = v271[1];
        if (v275)
        {
          v1287.i32[0] = v274;
          v276 = v271[2];
          v1287.i64[1] = v275;
          *(_QWORD *)&v1288 = v276;
          if (v276)
          {
            v277 = (unint64_t *)(v276 + 8);
            do
              v278 = __ldxr(v277);
            while (__stxr(v278 + 1, v277));
          }
          *((_QWORD *)&v1288 + 1) = 0;
          *(_OWORD *)v1289 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v271[3], v271[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v271[4] - v271[3]) >> 3));
          *(_QWORD *)&v1289[16] = 0;
          *(_QWORD *)&v1289[24] = 0;
          v1290 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v271[6], v271[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v271[7] - v271[6]) >> 3));
          memset(&v1240, 0, sizeof(v1240));
          v1233 = &v1240;
          LOBYTE(v1234) = 0;
          v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
          v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
          v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
          v1233 = &v1240;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v1233 = (std::string *)&v1289[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v1233 = (std::string *)((char *)&v1288 + 8);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v279 = (std::__shared_weak_count *)v1288;
          if ((_QWORD)v1288)
          {
            v280 = (unint64_t *)(v1288 + 8);
            do
              v281 = __ldaxr(v280);
            while (__stlxr(v281 - 1, v280));
            if (!v281)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
          }
          v282 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v274);
          v282 = -1;
        }
        v273 += v282;
        v271 += 9;
      }
      while (v271 != v272);
    }
  }
  v1287.i64[0] = (uint64_t)v1268;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  v283 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v284 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v287 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v289 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v290 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }

  v1228[0] = MEMORY[0x1E0C809B0];
  v1228[1] = 3221225472;
  v1229 = ___ZN8Espresso17ANECompilerEngine22tensor_zero_pad_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke;
  v1230 = &__block_descriptor_48_e9_v16__0_v8l;
  v1231 = v1167;
  v1232 = a2;
  v292 = v1228;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1268, 0, 28);
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1269[0] = a2;
  v293 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v293)
  {
    v294 = 0;
    v1154 = v292;
    do
    {
      LODWORD(v1268[3]) = v294;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v293 + 16 * v294), *(_QWORD *)(v293 + 16 * v294 + 8));
      v295 = v1267;
      v296 = *(void **)(v1267 + 64);
      if (v296
      {
        v297 = *(unint64_t **)(v295 + 72);
        if (v297)
        {
          v298 = v297 + 1;
          do
            v299 = __ldxr(v298);
          while (__stxr(v299 + 1, v298));
        }
      }
      else
      {
        v297 = 0;
      }
      v300 = (std::__shared_weak_count *)v1266[1];
      v1266[0] = v296;
      v1266[1] = v297;
      if (v300)
      {
        v301 = (unint64_t *)&v300->__shared_owners_;
        do
          v302 = __ldaxr(v301);
        while (__stlxr(v302 - 1, v301));
        if (!v302)
        {
          ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
          std::__shared_weak_count::__release_weak(v300);
        }
        v296 = v1266[0];
      }
      if (v296)
        v1229((uint64_t)v292, (int64x2_t *)v1266);
      ++v294;
      v293 = *((_QWORD *)a2 + 4);
    }
    while (v294 < (*((_QWORD *)a2 + 5) - v293) >> 4);
    v303 = v1268[0];
    v304 = v1268[1];
    if (v1268[0] != v1268[1])
    {
      v305 = 0;
      do
      {
        v306 = *(_DWORD *)v303 + v305;
        *(_DWORD *)v303 = v306;
        v307 = v303[1];
        if (v307)
        {
          v1287.i32[0] = v306;
          v308 = v303[2];
          v1287.i64[1] = v307;
          *(_QWORD *)&v1288 = v308;
          if (v308)
          {
            v309 = (unint64_t *)(v308 + 8);
            do
              v310 = __ldxr(v309);
            while (__stxr(v310 + 1, v309));
          }
          *((_QWORD *)&v1288 + 1) = 0;
          *(_OWORD *)v1289 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v303[3], v303[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v303[4] - v303[3]) >> 3));
          *(_QWORD *)&v1289[16] = 0;
          *(_QWORD *)&v1289[24] = 0;
          v1290 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v303[6], v303[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v303[7] - v303[6]) >> 3));
          memset(&v1240, 0, sizeof(v1240));
          v1233 = &v1240;
          LOBYTE(v1234) = 0;
          v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
          v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
          v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
          v1233 = &v1240;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v1233 = (std::string *)&v1289[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v1233 = (std::string *)((char *)&v1288 + 8);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1233);
          v311 = (std::__shared_weak_count *)v1288;
          if ((_QWORD)v1288)
          {
            v312 = (unint64_t *)(v1288 + 8);
            do
              v313 = __ldaxr(v312);
            while (__stlxr(v313 - 1, v312));
            if (!v313)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
          }
          v314 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v306);
          v314 = -1;
        }
        v305 += v314;
        v303 += 9;
      }
      while (v303 != v304);
      v292 = v1154;
    }
  }
  v1287.i64[0] = (uint64_t)v1268;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  v315 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v316 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v319 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v321 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v322 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
  }

  v1266[0] = (void *)MEMORY[0x1E0C809B0];
  v1266[1] = (void *)3221225472;
  *(_QWORD *)&v1267 = ___ZN8Espresso17ANECompilerEngine7context26transform_embedding_lookupEPNS_3netEPS1__block_invoke;
  *((_QWORD *)&v1267 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  v1268[0] = v1167;
  v1268[1] = a2;
  Espresso::single_match_replace<Espresso::ANECompilerEngine::inner_product_kernel>(a2, v1266);
  v1204 = a2;
  v1198 = (void **)v1167;
  LOBYTE(v1192) = 0;
  v1233 = (std::string *)MEMORY[0x1E0C809B0];
  v1234 = 3321888768;
  v1235 = ___ZN8Espresso17ANECompilerEngine7context40transform_reshape_like_to_static_reshapeEPNS_3netEPS1__block_invoke;
  v1236 = &__block_descriptor_56_ea8_32c104_ZTSKZN8Espresso17ANECompilerEngine7context40transform_reshape_like_to_static_reshapeEPNS_3netEPS1_E3__0_e9_v16__0_v8l;
  v1237 = (void **)&v1192;
  v1238 = &v1204;
  v1239 = &v1198;
  v324 = &v1233;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1268, 0, 28);
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1269[0] = a2;
  v325 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v325)
  {
    v326 = 0;
    v1155 = v324;
    do
    {
      LODWORD(v1268[3]) = v326;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v325 + 16 * v326), *(_QWORD *)(v325 + 16 * v326 + 8));
      v327 = v1267;
      v328 = *(void **)(v1267 + 64);
      if (v328
      {
        v329 = *(unint64_t **)(v327 + 72);
        if (v329)
        {
          v330 = v329 + 1;
          do
            v331 = __ldxr(v330);
          while (__stxr(v331 + 1, v330));
        }
      }
      else
      {
        v329 = 0;
      }
      v332 = (std::__shared_weak_count *)v1266[1];
      v1266[0] = v328;
      v1266[1] = v329;
      if (v332)
      {
        v333 = (unint64_t *)&v332->__shared_owners_;
        do
          v334 = __ldaxr(v333);
        while (__stlxr(v334 - 1, v333));
        if (!v334)
        {
          ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
          std::__shared_weak_count::__release_weak(v332);
        }
        v328 = v1266[0];
      }
      if (v328)
        v1235((uint64_t)v324, (int64x2_t *)v1266);
      ++v326;
      v325 = *((_QWORD *)a2 + 4);
    }
    while (v326 < (*((_QWORD *)a2 + 5) - v325) >> 4);
    v335 = v1268[0];
    v336 = v1268[1];
    if (v1268[0] != v1268[1])
    {
      v337 = 0;
      do
      {
        v338 = *(_DWORD *)v335 + v337;
        *(_DWORD *)v335 = v338;
        v339 = v335[1];
        if (v339)
        {
          v1287.i32[0] = v338;
          v340 = v335[2];
          v1287.i64[1] = v339;
          *(_QWORD *)&v1288 = v340;
          if (v340)
          {
            v341 = (unint64_t *)(v340 + 8);
            do
              v342 = __ldxr(v341);
            while (__stxr(v342 + 1, v341));
          }
          *((_QWORD *)&v1288 + 1) = 0;
          *(_OWORD *)v1289 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v335[3], v335[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v335[4] - v335[3]) >> 3));
          *(_QWORD *)&v1289[16] = 0;
          *(_QWORD *)&v1289[24] = 0;
          v1290 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v335[6], v335[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v335[7] - v335[6]) >> 3));
          memset(&v1240, 0, sizeof(v1240));
          v1274 = &v1240;
          LOBYTE(v1275) = 0;
          v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
          v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
          v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
          v1274 = &v1240;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v1274 = &v1289[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v1274 = (char *)&v1288 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v343 = (std::__shared_weak_count *)v1288;
          if ((_QWORD)v1288)
          {
            v344 = (unint64_t *)(v1288 + 8);
            do
              v345 = __ldaxr(v344);
            while (__stlxr(v345 - 1, v344));
            if (!v345)
            {
              ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
              std::__shared_weak_count::__release_weak(v343);
            }
          }
          v346 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v338);
          v346 = -1;
        }
        v337 += v346;
        v335 += 9;
      }
      while (v335 != v336);
      v324 = v1155;
    }
  }
  v1287.i64[0] = (uint64_t)v1268;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  v347 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v348 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
    }
  }
  v350 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v351 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v353 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v354 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
  }

  if ((_BYTE)v1192)
    Espresso::net::_tag_inputs_and_outputs(v1204);
  if ((***((unsigned int (****)(_QWORD))v1167 + 1))(*((_QWORD *)v1167 + 1)) != 10007
    && (***((unsigned int (****)(_QWORD))v1167 + 1))(*((_QWORD *)v1167 + 1)) != 10006
    || *((_BYTE *)v1167 + 123))
  {
    v1240.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    v1240.__r_.__value_.__l.__size_ = 3221225472;
    v1240.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8Espresso17ANECompilerEngine7context26handle_photon_quantizationEPNS_3netEPNS_16abstract_contextE_block_invoke;
    v1241 = &__block_descriptor_48_e9_v16__0_v8l;
    v1242 = v1167;
    v1243 = a2;
    Espresso::single_match_replace<Espresso::generic_batchnorm_kernel>(a2, &v1240);
    Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v1151);
    v1156 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    if ((Espresso::ANECompilerEngine::is_mix(v1156, v357) & 1) == 0)
    {
      while (1)
      {
        Espresso::net::get_producers_of_blobs(a2, (uint64_t)v1266);
        memset(__p, 0, sizeof(__p));
        LODWORD(v1281) = 1065353216;
        Espresso::net::get_consumers_of_blobs(a2, __p, (uint64_t)&v1287);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
        v1186 = 0;
        v359 = *((_QWORD *)a2 + 4);
        v358 = *((_QWORD *)a2 + 5);
        if (v358 != v359)
          break;
        v361 = 1;
LABEL_718:
        std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v1288);
        v470 = (void *)v1287.i64[0];
        v1287.i64[0] = 0;
        if (v470)
          operator delete(v470);
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v1267);
        v471 = v1266[0];
        v1266[0] = 0;
        if (v471)
          operator delete(v471);
        if ((v361 & 1) != 0)
          goto LABEL_723;
      }
      v360 = 0;
      v361 = 1;
      while (2)
      {
        v362 = *(_QWORD *)(v359 + 16 * v360);
        v363 = *(_QWORD **)(v362 + 64);
        if ((Espresso::net *)v363[1] == v1167)
        {
          if (v364)
          {
            v365 = v364;
            v366 = *(std::__shared_weak_count **)(v362 + 72);
            v1274 = v364;
            v1275 = (uint64_t)v366;
            if (v366)
            {
              v367 = (unint64_t *)&v366->__shared_owners_;
              do
                v368 = __ldxr(v367);
              while (__stxr(v368 + 1, v367));
            }
            if (!*(_DWORD *)(*((uint64_t (**)(Espresso::net **))*v364 + 40))(v364)
              && v365[1] == v1167
              && !v365[50]
              && (*(_QWORD *)__p = &v1186,
                  v369 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1186, (uint64_t)&std::piecewise_construct, (uint64_t **)__p), v369[4] - v369[3] == 48)&& (*(_QWORD *)__p = &v1186, v370 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1186, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3], *(_QWORD *)__p = v370, v371 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v1287, v370, (__int128 **)__p), *((_QWORD *)v371 + 6) - *((_QWORD *)v371 + 5) == 8))
            {
              v1262 = 0;
              *(_QWORD *)__p = v370;
              v1262 = **((_QWORD **)std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v1287, v370, (__int128 **)__p)+ 5);
              __src.__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)__p = &v1186;
              *(_QWORD *)__p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1186, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
              __src.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v1266, *(uint64_t *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[5];
              v1255.__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)__p = &v1186;
              *(_QWORD *)__p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1186, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3]+ 24;
              v373 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v1266, *(uint64_t *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[5];
              v1255.__r_.__value_.__r.__words[0] = v373;
              v374 = *((_QWORD *)a2 + 4);
              v375 = *(_QWORD *)(v374 + 16 * __src.__r_.__value_.__r.__words[0]);
              v376 = *(const void **)(v375 + 64);
              if (v376
              {
                v378 = v377;
                v379 = *(std::__shared_weak_count **)(v375 + 72);
                v1204 = v377;
                v1205 = (uint64_t)v379;
                if (v379)
                {
                  v380 = (unint64_t *)&v379->__shared_owners_;
                  do
                    v381 = __ldxr(v380);
                  while (__stxr(v381 + 1, v380));
                  v374 = *((_QWORD *)a2 + 4);
                }
              }
              else
              {
                v379 = 0;
                v378 = 0;
                v1204 = 0;
                v1205 = 0;
              }
              v385 = *(_QWORD *)(v374 + 16 * v373);
              v386 = *(const void **)(v385 + 64);
              if (v386
              {
                v388 = v387;
                v389 = *(_QWORD *)(v385 + 72);
                v1198 = v387;
                v1199 = v389;
                if (v389)
                {
                  v390 = (unint64_t *)(v389 + 8);
                  do
                    v391 = __ldxr(v390);
                  while (__stxr(v391 + 1, v390));
                  v374 = *((_QWORD *)a2 + 4);
                }
              }
              else
              {
                v388 = 0;
                v1198 = 0;
                v1199 = 0;
              }
              v392 = *(_QWORD *)(v374 + 16 * v1262);
              v393 = *(const void **)(v392 + 64);
              if (v393
              {
                v395 = *(_QWORD *)(v392 + 72);
                v1192 = (const void **)v394;
                v1193 = v395;
                if (v395)
                {
                  v396 = (unint64_t *)(v395 + 8);
                  do
                    v397 = __ldxr(v396);
                  while (__stxr(v397 + 1, v396));
                }
                if (!v378)
                {
LABEL_566:
                  if (v388 && v388[1] != v1167 || v394 && v394[1] != v1167)
                    goto LABEL_613;
                  if (v378)
                  {
                    if (*(_DWORD *)(*(uint64_t (**)(Espresso::net *))(*(_QWORD *)v378 + 320))(v378) != 3)
                    {
                      v1204 = 0;
                      v1205 = 0;
                      if (v379)
                      {
                        v398 = (unint64_t *)&v379->__shared_owners_;
                        do
                          v399 = __ldaxr(v398);
                        while (__stlxr(v399 - 1, v398));
                        if (!v399)
                        {
                          ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                          std::__shared_weak_count::__release_weak(v379);
                        }
                      }
                    }
                  }
                  if (v1198)
                  {
                    if (*(_DWORD *)(*((uint64_t (**)(void **))*v1198 + 40))(v1198) != 3)
                    {
                      v400 = (std::__shared_weak_count *)v1199;
                      v1198 = 0;
                      v1199 = 0;
                      if (v400)
                      {
                        v401 = (unint64_t *)&v400->__shared_owners_;
                        do
                          v402 = __ldaxr(v401);
                        while (__stlxr(v402 - 1, v401));
                        if (!v402)
                        {
                          ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
                          std::__shared_weak_count::__release_weak(v400);
                        }
                      }
                    }
                  }
                  v403 = (char *)v1192;
                  if (v1192)
                  {
                    v403 = (char *)(*((uint64_t (**)(const void **))*v1192 + 40))(v1192);
                    if (*(_DWORD *)v403 != 3)
                    {
                      v404 = (std::__shared_weak_count *)v1193;
                      v1192 = 0;
                      v1193 = 0;
                      if (v404)
                      {
                        v405 = (unint64_t *)&v404->__shared_owners_;
                        do
                          v406 = __ldaxr(v405);
                        while (__stlxr(v406 - 1, v405));
                        if (!v406)
                        {
                          ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                          std::__shared_weak_count::__release_weak(v404);
                        }
                      }
                    }
                  }
                  if (v1204)
                  {
                    if (*((_QWORD *)v1204 + 50))
                    {
                      v407 = (std::__shared_weak_count *)v1205;
                      v1204 = 0;
                      v1205 = 0;
                      if (v407)
                      {
                        v408 = (unint64_t *)&v407->__shared_owners_;
                        do
                          v409 = __ldaxr(v408);
                        while (__stlxr(v409 - 1, v408));
                        if (!v409)
                        {
                          ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                          std::__shared_weak_count::__release_weak(v407);
                        }
                      }
                    }
                  }
                  if (v1198)
                  {
                    if (v1198[50])
                    {
                      v410 = (std::__shared_weak_count *)v1199;
                      v1198 = 0;
                      v1199 = 0;
                      if (v410)
                      {
                        v411 = (unint64_t *)&v410->__shared_owners_;
                        do
                          v412 = __ldaxr(v411);
                        while (__stlxr(v412 - 1, v411));
                        if (!v412)
                        {
                          ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                          std::__shared_weak_count::__release_weak(v410);
                        }
                      }
                    }
                  }
                  if (v1192)
                  {
                    if (v1192[50])
                    {
                      v413 = (std::__shared_weak_count *)v1193;
                      v1192 = 0;
                      v1193 = 0;
                      if (v413)
                      {
                        v414 = (unint64_t *)&v413->__shared_owners_;
                        do
                          v415 = __ldaxr(v414);
                        while (__stlxr(v415 - 1, v414));
                        if (!v415)
                        {
                          ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                          std::__shared_weak_count::__release_weak(v413);
                        }
                      }
                    }
                  }
                  if (*((_QWORD *)v1274 + 50))
                    goto LABEL_613;
                  if (v1192)
                  {
                    *(_QWORD *)__p = &v1186;
                    *(_QWORD *)__p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1186, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
                    v403 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v1287, *(unsigned __int8 **)__p, (__int128 **)__p);
                    if (*((_QWORD *)v403 + 6) - *((_QWORD *)v403 + 5) >= 9uLL)
                    {
                      v425 = (std::__shared_weak_count *)v1193;
                      v1192 = 0;
                      v1193 = 0;
                      if (v425)
                      {
                        v426 = (unint64_t *)&v425->__shared_owners_;
                        do
                          v427 = __ldaxr(v426);
                        while (__stlxr(v427 - 1, v426));
                        if (!v427)
                        {
                          ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
                          std::__shared_weak_count::__release_weak(v425);
                        }
                      }
                    }
                  }
                  if (v1204)
                  {
                    *(_QWORD *)__p = &__src;
                    *(_QWORD *)__p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)&__src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
                    v403 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v1287, *(unsigned __int8 **)__p, (__int128 **)__p);
                    if (*((_QWORD *)v403 + 6) - *((_QWORD *)v403 + 5) >= 9uLL)
                    {
                      v428 = (std::__shared_weak_count *)v1205;
                      v1204 = 0;
                      v1205 = 0;
                      if (v428)
                      {
                        v429 = (unint64_t *)&v428->__shared_owners_;
                        do
                          v430 = __ldaxr(v429);
                        while (__stlxr(v430 - 1, v429));
                        if (!v430)
                        {
                          ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
                          std::__shared_weak_count::__release_weak(v428);
                        }
                      }
                    }
                  }
                  if (v1198)
                  {
                    *(_QWORD *)__p = &v1255;
                    *(_QWORD *)__p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)&v1255, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
                    v403 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v1287, *(unsigned __int8 **)__p, (__int128 **)__p);
                    if (*((_QWORD *)v403 + 6) - *((_QWORD *)v403 + 5) >= 9uLL)
                    {
                      v431 = (std::__shared_weak_count *)v1199;
                      v1198 = 0;
                      v1199 = 0;
                      if (v431)
                      {
                        v432 = (unint64_t *)&v431->__shared_owners_;
                        do
                          v433 = __ldaxr(v432);
                        while (__stlxr(v433 - 1, v432));
                        if (!v433)
                        {
                          ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
                          std::__shared_weak_count::__release_weak(v431);
                        }
                      }
                    }
                  }
                  v434 = v1204;
                  v435 = 1.0;
                  v436 = 1.0;
                  if (v1204)
                  {
                    v403 = (char *)(*(uint64_t (**)(Espresso::net *))(*(_QWORD *)v1204 + 320))(v1204);
                    v436 = *((float *)v403 + 2);
                  }
                  v437 = (unint64_t)v1198;
                  if (v1198)
                  {
                    v403 = (char *)(*((uint64_t (**)(void **))*v1198 + 40))(v1198);
                    v435 = *((float *)v403 + 2);
                  }
                  v438 = (uint64_t *)v1192;
                  if (v1192)
                  {
                    v403 = (char *)(*((uint64_t (**)(const void **))*v1192 + 40))(v1192);
                    v439 = *((float *)v403 + 2);
                  }
                  else
                  {
                    v439 = 1.0;
                    if (!((unint64_t)v434 | v437))
                      goto LABEL_613;
                  }
                  v440 = v436 / v435;
                  if (fabsf((float)(v435 * v439) + -1.0) > 0.00000011921 || fabsf(v440 + -1.0) > 0.00000011921)
                  {
                    v403 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v1274 + 344))(v1274);
                    v403[53] = 1;
                    *((float *)v403 + 14) = v440;
                    *((float *)v403 + 15) = v435 * v439;
                  }
                  Espresso::espresso_os_log_subsystem((Espresso *)v403, v372);
                  v441 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v441, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)__p = 134218496;
                    *(double *)&__p[4] = v436;
                    *(_WORD *)&__p[12] = 2048;
                    *(double *)&__p[14] = v435;
                    *(_WORD *)&__p[22] = 2048;
                    *(double *)&__p[24] = v439;
                    _os_log_debug_impl(&dword_190DAF000, v441, OS_LOG_TYPE_DEBUG, "handle_photon_quantization: l_scale=%e r_scale=%e out_scale=%e", __p, 0x20u);
                  }

                  if (v434)
                  {
                    *(_QWORD *)__p = &__src;
                    v442 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, (unint64_t *)&__src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
                    *(_QWORD *)__p = &v1186;
                    v443 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1186, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
                    std::string::operator=((std::string *)v443[3], v442);
                  }
                  if (v437)
                  {
                    *(_QWORD *)__p = &v1255;
                    v444 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, (unint64_t *)&v1255, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
                    *(_QWORD *)__p = &v1186;
                    v445 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1186, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
                    std::string::operator=((std::string *)(v445[3] + 24), v444);
                  }
                  if (v438)
                  {
                    *(_QWORD *)__p = &v1262;
                    v446 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, (unint64_t *)&v1262, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
                    *(_QWORD *)__p = &v1186;
                    v447 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1186, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
                    if (v447 != v446)
                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v447 + 3), (std::string *)v446[3], (std::string *)v446[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v446[4] - v446[3]) >> 3));
                    memset(__p, 0, 24);
                    v448 = (uint64_t *)operator new(8uLL);
                    *v448 = v1262;
                    v449 = v448 + 1;
                    *(_QWORD *)&__p[16] = v448 + 1;
                    *(_QWORD *)__p = v448;
                    *(_QWORD *)&__p[8] = v448 + 1;
                    v438 = v448;
                  }
                  else
                  {
                    v449 = 0;
                    memset(__p, 0, 24);
                  }
                  if (v434)
                  {
                    v450 = (char *)v449 - (char *)v438;
                    v451 = v449 - v438;
                    v452 = v451 + 1;
                    if ((unint64_t)(v451 + 1) >> 61)
                      goto LABEL_1835;
                    if (v450 >> 2 > v452)
                      v452 = v450 >> 2;
                    if ((unint64_t)v450 >= 0x7FFFFFFFFFFFFFF8)
                      v453 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v453 = v452;
                    if (v453)
                      v453 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v453);
                    else
                      v454 = 0;
                    v455 = (uint64_t *)(v453 + 8 * v451);
                    *v455 = __src.__r_.__value_.__r.__words[0];
                    v456 = v455 + 1;
                    while (v449 != v438)
                    {
                      v457 = *--v449;
                      *--v455 = v457;
                    }
                    v449 = (uint64_t *)(v453 + 8 * v454);
                    *(_QWORD *)__p = v455;
                    *(_QWORD *)&__p[16] = v449;
                    if (v438)
                      operator delete(v438);
                    *(_QWORD *)&__p[8] = v456;
                    v437 = (unint64_t)v1198;
                  }
                  else
                  {
                    v455 = v438;
                    v456 = v449;
                  }
                  if (v437)
                  {
                    if (v456 >= v449)
                    {
                      v459 = v456 - v455;
                      v460 = v459 + 1;
                      if ((unint64_t)(v459 + 1) >> 61)
LABEL_1835:
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      if (((char *)v449 - (char *)v455) >> 2 > v460)
                        v460 = ((char *)v449 - (char *)v455) >> 2;
                      if ((unint64_t)((char *)v449 - (char *)v455) >= 0x7FFFFFFFFFFFFFF8)
                        v461 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v461 = v460;
                      if (v461)
                        v461 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v461);
                      else
                        v462 = 0;
                      v463 = (uint64_t *)(v461 + 8 * v459);
                      *v463 = v1255.__r_.__value_.__r.__words[0];
                      v458 = v463 + 1;
                      while (v456 != v455)
                      {
                        v464 = *--v456;
                        *--v463 = v464;
                      }
                      *(_QWORD *)__p = v463;
                      *(_QWORD *)&__p[8] = v458;
                      *(_QWORD *)&__p[16] = v461 + 8 * v462;
                      if (v455)
                      {
                        operator delete(v455);
                        v455 = *(uint64_t **)__p;
                      }
                      else
                      {
                        v455 = v463;
                      }
                    }
                    else
                    {
                      *v456 = v1255.__r_.__value_.__r.__words[0];
                      v458 = v456 + 1;
                    }
                    *(_QWORD *)&__p[8] = v458;
                    v456 = v458;
                  }
                  v465 = 126 - 2 * __clz(v456 - v455);
                  if (v456 == v455)
                    v466 = 0;
                  else
                    v466 = v465;
                  std::__introsort<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *,false>(v455, v456, v466, 1);
                  v467 = *(void **)__p;
                  v468 = *(int **)&__p[8];
                  for (i = *(int **)__p; i != v468; i += 2)
                    Espresso::net::remove_layer(a2, *i);
                  if (v467)
                    operator delete(v467);
                  v361 = 0;
                  v382 = 4;
                  goto LABEL_614;
                }
              }
              else
              {
                v394 = 0;
                v1192 = 0;
                v1193 = 0;
                if (!v378)
                  goto LABEL_566;
              }
              if (*((Espresso::net **)v378 + 1) == v1167)
                goto LABEL_566;
LABEL_613:
              v382 = 6;
LABEL_614:
              v416 = (std::__shared_weak_count *)v1193;
              if (v1193)
              {
                v417 = (unint64_t *)(v1193 + 8);
                do
                  v418 = __ldaxr(v417);
                while (__stlxr(v418 - 1, v417));
                if (!v418)
                {
                  ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
                  std::__shared_weak_count::__release_weak(v416);
                }
              }
              v419 = (std::__shared_weak_count *)v1199;
              if (v1199)
              {
                v420 = (unint64_t *)(v1199 + 8);
                do
                  v421 = __ldaxr(v420);
                while (__stlxr(v421 - 1, v420));
                if (!v421)
                {
                  ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                  std::__shared_weak_count::__release_weak(v419);
                }
              }
              v422 = (std::__shared_weak_count *)v1205;
              if (v1205)
              {
                v423 = (unint64_t *)(v1205 + 8);
                do
                  v424 = __ldaxr(v423);
                while (__stlxr(v424 - 1, v423));
                if (!v424)
                {
                  ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
                  std::__shared_weak_count::__release_weak(v422);
                }
              }
              v366 = (std::__shared_weak_count *)v1275;
              if (!v1275)
              {
LABEL_545:
                if (v382 != 6)
                  goto LABEL_718;
                v360 = v1186;
                v359 = *((_QWORD *)a2 + 4);
                v358 = *((_QWORD *)a2 + 5);
                goto LABEL_547;
              }
            }
            else
            {
              v382 = 6;
              if (!v366)
                goto LABEL_545;
            }
            v383 = (unint64_t *)&v366->__shared_owners_;
            do
              v384 = __ldaxr(v383);
            while (__stlxr(v384 - 1, v383));
            if (!v384)
            {
              ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
              std::__shared_weak_count::__release_weak(v366);
            }
            goto LABEL_545;
          }
        }
LABEL_547:
        v1186 = ++v360;
        if (v360 >= (v358 - v359) >> 4)
          goto LABEL_718;
        continue;
      }
    }
LABEL_723:
    v1274 = (void *)MEMORY[0x1E0C809B0];
    v1275 = 3221225472;
    v1276 = ___ZN8Espresso17ANECompilerEngine7context26handle_photon_quantizationEPNS_3netEPNS_16abstract_contextE_block_invoke_297;
    v1277 = (void **)&__block_descriptor_48_e9_v16__0_v8l;
    v1278 = v1167;
    v1279 = a2;
    v472 = &v1274;
    v1147 = v472;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
    memset(v1271, 0, 24);
    v1270 = 0u;
    *(_OWORD *)v1269 = 0u;
    memset(v1268, 0, sizeof(v1268));
    v1267 = 0u;
    *(_OWORD *)v1266 = 0u;
    v1271[3] = a2;
    v1287.i32[0] = 0;
    v473 = *((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 5) != v473)
    {
      v474 = 0;
      v475 = 0;
      do
      {
        LODWORD(v1271[2]) = v475;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v1268, *(_QWORD *)(v473 + 16 * v474), *(_QWORD *)(v473 + 16 * v474 + 8));
        v476 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], v475, &v1287);
        if ((char *)v476[6] - (char *)v476[5] == 4)
        {
          HIDWORD(v1271[2]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], (int)v1271[2], &v1271[2])[5];
          v477 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1282, SHIDWORD(v1271[2]), (_DWORD *)&v1271[2] + 1);
          if ((char *)v477[6] - (char *)v477[5] == 4)
          {
            v478 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * SHIDWORD(v1271[2]));
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1268[2], *v478, v478[1]);
            v479 = v1268[0];
            v480 = (void *)*((_QWORD *)v1268[0] + 8);
            if (v480
            {
              v481 = (unint64_t *)v479[9];
              if (v481)
              {
                v482 = v481 + 1;
                do
                  v483 = __ldxr(v482);
                while (__stxr(v483 + 1, v482));
              }
            }
            else
            {
              v481 = 0;
            }
            v484 = (std::__shared_weak_count *)v1266[1];
            v1266[0] = v480;
            v1266[1] = v481;
            if (v484)
            {
              v485 = (unint64_t *)&v484->__shared_owners_;
              do
                v486 = __ldaxr(v485);
              while (__stlxr(v486 - 1, v485));
              if (!v486)
              {
                ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
                std::__shared_weak_count::__release_weak(v484);
              }
            }
            v487 = v1268[2];
            v488 = (void *)*((_QWORD *)v1268[2] + 8);
            if (v488
            {
              v489 = v487[9];
              if (v489)
              {
                v490 = (unint64_t *)(v489 + 8);
                do
                  v491 = __ldxr(v490);
                while (__stxr(v491 + 1, v490));
              }
            }
            else
            {
              v489 = 0;
            }
            v492 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
            *(_QWORD *)&v1267 = v488;
            *((_QWORD *)&v1267 + 1) = v489;
            if (v492)
            {
              v493 = (unint64_t *)&v492->__shared_owners_;
              do
                v494 = __ldaxr(v493);
              while (__stlxr(v494 - 1, v493));
              if (!v494)
              {
                ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
                std::__shared_weak_count::__release_weak(v492);
              }
            }
            if (v1266[0])
              v495 = (_QWORD)v1267 == 0;
            else
              v495 = 1;
            if (!v495)
              v1276((uint64_t)v472, (uint64_t)v1266);
          }
        }
        v474 = ++v1287.i32[0];
        v473 = *((_QWORD *)a2 + 4);
        v475 = v474;
      }
      while (v474 < (*((_QWORD *)a2 + 5) - v473) >> 4);
    }
    std::__sort<std::__less<int,int> &,int *>();
    v496 = v1269[0];
    v497 = v1269[1];
    if (v1269[0] != v1269[1])
    {
      v498 = 0;
      do
      {
        Espresso::net::remove_layer(a2, v498 + *v496++);
        --v498;
      }
      while (v496 != v497);
    }
    v499 = *((_QWORD *)&v1270 + 1);
    v500 = v1271[0];
    if (*((void **)&v1270 + 1) != v1271[0])
    {
      v501 = 0;
      do
      {
        v502 = *(_DWORD *)v499;
        LODWORD(v1192) = *(_DWORD *)v499 + v501;
        v1287.i32[0] = v502;
        v503 = *(_QWORD *)(v499 + 16);
        v1287.i64[1] = *(_QWORD *)(v499 + 8);
        *(_QWORD *)&v1288 = v503;
        if (v503)
        {
          v504 = (unint64_t *)(v503 + 8);
          do
            v505 = __ldxr(v504);
          while (__stxr(v505 + 1, v504));
        }
        *((_QWORD *)&v1288 + 1) = 0;
        *(_OWORD *)v1289 = 0uLL;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, *(_QWORD *)(v499 + 24), *(_QWORD *)(v499 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v499 + 32) - *(_QWORD *)(v499 + 24)) >> 3));
        *(_QWORD *)&v1289[16] = 0;
        *(_QWORD *)&v1289[24] = 0;
        v1290 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], *(_QWORD *)(v499 + 48), *(_QWORD *)(v499 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v499 + 56) - *(_QWORD *)(v499 + 48)) >> 3));
        v1204 = 0;
        v1205 = 0;
        v1206[0] = 0;
        v1198 = (void **)&v1204;
        LOBYTE(v1199) = 0;
        v1204 = (Espresso::net *)operator new(0x48uLL);
        v1205 = (uint64_t)v1204;
        v1206[0] = (char *)v1204 + 72;
        v1205 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v1206, (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1204);
        Espresso::net::insert_layers((uint64_t)a2, (int *)&v1192, (uint64_t *)&v1204);
        v1198 = (void **)&v1204;
        std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v1198);
        v1198 = (void **)&v1289[16];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1198);
        v1198 = (void **)&v1288 + 1;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1198);
        v506 = (std::__shared_weak_count *)v1288;
        if ((_QWORD)v1288)
        {
          v507 = (unint64_t *)(v1288 + 8);
          do
            v508 = __ldaxr(v507);
          while (__stlxr(v508 - 1, v507));
          if (!v508)
          {
            ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
            std::__shared_weak_count::__release_weak(v506);
          }
        }
        ++v501;
        v499 += 72;
      }
      while ((void *)v499 != v500);
    }
    v1287.i64[0] = (uint64_t)&v1270 + 8;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
    if (v1269[0])
    {
      v1269[1] = v1269[0];
      operator delete(v1269[0]);
    }
    v509 = (std::__shared_weak_count *)v1268[3];
    if (v1268[3])
    {
      v510 = (unint64_t *)((char *)v1268[3] + 8);
      do
        v511 = __ldaxr(v510);
      while (__stlxr(v511 - 1, v510));
      if (!v511)
      {
        ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
        std::__shared_weak_count::__release_weak(v509);
      }
    }
    v512 = (std::__shared_weak_count *)v1268[1];
    if (v1268[1])
    {
      v513 = (unint64_t *)((char *)v1268[1] + 8);
      do
        v514 = __ldaxr(v513);
      while (__stlxr(v514 - 1, v513));
      if (!v514)
      {
        ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
        std::__shared_weak_count::__release_weak(v512);
      }
    }
    v515 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
    if (*((_QWORD *)&v1267 + 1))
    {
      v516 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
      do
        v517 = __ldaxr(v516);
      while (__stlxr(v517 - 1, v516));
      if (!v517)
      {
        ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
        std::__shared_weak_count::__release_weak(v515);
      }
    }
    v518 = (std::__shared_weak_count *)v1266[1];
    if (v1266[1])
    {
      v519 = (unint64_t *)((char *)v1266[1] + 8);
      do
        v520 = __ldaxr(v519);
      while (__stlxr(v520 - 1, v519));
      if (!v520)
      {
        ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
        std::__shared_weak_count::__release_weak(v518);
      }
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
    v521 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v522 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v523 = __ldaxr(v522);
      while (__stlxr(v523 - 1, v522));
      if (!v523)
      {
        ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
        std::__shared_weak_count::__release_weak(v521);
      }
    }

  }
  if (Espresso::ANECompilerEngine::is_mix(v1153, v356))
  {
    v1266[0] = (void *)MEMORY[0x1E0C809B0];
    v1266[1] = (void *)3221225472;
    *(_QWORD *)&v1267 = ___ZN8Espresso17ANECompilerEngine7context21handle_elementwise_eqEPNS_3netEPNS_16abstract_contextE_block_invoke;
    *((_QWORD *)&v1267 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    v1268[0] = v1167;
    v1268[1] = a2;
    Espresso::single_match_replace<Espresso::generic_elementwise_kernel>(a2, v1266);
  }
  v1177[0] = MEMORY[0x1E0C809B0];
  v1177[1] = 3221225472;
  v1178 = ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke;
  v1179 = &__block_descriptor_40_e9_v16__0_v8l;
  v1180 = v1167;
  v1157 = v1177;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1271, 0, 24);
  v1270 = 0u;
  *(_OWORD *)v1269 = 0u;
  memset(v1268, 0, sizeof(v1268));
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1271[3] = a2;
  v1287.i32[0] = 0;
  v524 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v524)
  {
    v525 = 0;
    v526 = 0;
    do
    {
      LODWORD(v1271[2]) = v526;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v1268, *(_QWORD *)(v524 + 16 * v525), *(_QWORD *)(v524 + 16 * v525 + 8));
      v527 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], v526, &v1287);
      if ((char *)v527[6] - (char *)v527[5] == 4)
      {
        HIDWORD(v1271[2]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], (int)v1271[2], &v1271[2])[5];
        v528 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1282, SHIDWORD(v1271[2]), (_DWORD *)&v1271[2] + 1);
        if ((char *)v528[6] - (char *)v528[5] == 4)
        {
          v529 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * SHIDWORD(v1271[2]));
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1268[2], *v529, v529[1]);
          v530 = (void *)*((_QWORD *)v1268[0] + 8);
          if (v530)
          {
            v531 = (unint64_t *)*((_QWORD *)v1268[0] + 9);
            if (v531)
            {
              v532 = v531 + 1;
              do
                v533 = __ldxr(v532);
              while (__stxr(v533 + 1, v532));
            }
          }
          else
          {
            v531 = 0;
          }
          v534 = (std::__shared_weak_count *)v1266[1];
          v1266[0] = v530;
          v1266[1] = v531;
          if (v534)
          {
            v535 = (unint64_t *)&v534->__shared_owners_;
            do
              v536 = __ldaxr(v535);
            while (__stlxr(v536 - 1, v535));
            if (!v536)
            {
              ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
              std::__shared_weak_count::__release_weak(v534);
            }
          }
          v537 = v1268[2];
          v538 = (void *)*((_QWORD *)v1268[2] + 8);
          if (v538
          {
            v539 = v537[9];
            if (v539)
            {
              v540 = (unint64_t *)(v539 + 8);
              do
                v541 = __ldxr(v540);
              while (__stxr(v541 + 1, v540));
            }
          }
          else
          {
            v539 = 0;
          }
          v542 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
          *(_QWORD *)&v1267 = v538;
          *((_QWORD *)&v1267 + 1) = v539;
          if (v542)
          {
            v543 = (unint64_t *)&v542->__shared_owners_;
            do
              v544 = __ldaxr(v543);
            while (__stlxr(v544 - 1, v543));
            if (!v544)
            {
              ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
              std::__shared_weak_count::__release_weak(v542);
            }
          }
          if (v1266[0])
            v545 = (_QWORD)v1267 == 0;
          else
            v545 = 1;
          if (!v545)
            v1178((uint64_t)v1157, (uint64_t)v1266);
        }
      }
      v525 = ++v1287.i32[0];
      v524 = *((_QWORD *)a2 + 4);
      v526 = v525;
    }
    while (v525 < (*((_QWORD *)a2 + 5) - v524) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v546 = v1269[0];
  v547 = v1269[1];
  if (v1269[0] != v1269[1])
  {
    v548 = 0;
    do
    {
      Espresso::net::remove_layer(a2, v548 + *v546++);
      --v548;
    }
    while (v546 != v547);
  }
  v549 = *((_QWORD *)&v1270 + 1);
  v550 = v1271[0];
  if (*((void **)&v1270 + 1) != v1271[0])
  {
    v551 = 0;
    do
    {
      v552 = *(_DWORD *)v549;
      LODWORD(v1204) = *(_DWORD *)v549 + v551;
      v1287.i32[0] = v552;
      v553 = *(_QWORD *)(v549 + 16);
      v1287.i64[1] = *(_QWORD *)(v549 + 8);
      *(_QWORD *)&v1288 = v553;
      if (v553)
      {
        v554 = (unint64_t *)(v553 + 8);
        do
          v555 = __ldxr(v554);
        while (__stxr(v555 + 1, v554));
      }
      *((_QWORD *)&v1288 + 1) = 0;
      *(_OWORD *)v1289 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, *(_QWORD *)(v549 + 24), *(_QWORD *)(v549 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v549 + 32) - *(_QWORD *)(v549 + 24)) >> 3));
      *(_QWORD *)&v1289[16] = 0;
      *(_QWORD *)&v1289[24] = 0;
      v1290 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], *(_QWORD *)(v549 + 48), *(_QWORD *)(v549 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v549 + 56) - *(_QWORD *)(v549 + 48)) >> 3));
      memset(&v1240, 0, sizeof(v1240));
      v1274 = &v1240;
      LOBYTE(v1275) = 0;
      v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
      v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
      v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers((uint64_t)a2, (int *)&v1204, (uint64_t *)&v1240);
      v1274 = &v1240;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
      v1274 = &v1289[16];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
      v1274 = (char *)&v1288 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
      v556 = (std::__shared_weak_count *)v1288;
      if ((_QWORD)v1288)
      {
        v557 = (unint64_t *)(v1288 + 8);
        do
          v558 = __ldaxr(v557);
        while (__stlxr(v558 - 1, v557));
        if (!v558)
        {
          ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
          std::__shared_weak_count::__release_weak(v556);
        }
      }
      ++v551;
      v549 += 72;
    }
    while ((void *)v549 != v550);
  }
  v1287.i64[0] = (uint64_t)&v1270 + 8;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  if (v1269[0])
  {
    v1269[1] = v1269[0];
    operator delete(v1269[0]);
  }
  v559 = (std::__shared_weak_count *)v1268[3];
  if (v1268[3])
  {
    v560 = (unint64_t *)((char *)v1268[3] + 8);
    do
      v561 = __ldaxr(v560);
    while (__stlxr(v561 - 1, v560));
    if (!v561)
    {
      ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
      std::__shared_weak_count::__release_weak(v559);
    }
  }
  v562 = (std::__shared_weak_count *)v1268[1];
  if (v1268[1])
  {
    v563 = (unint64_t *)((char *)v1268[1] + 8);
    do
      v564 = __ldaxr(v563);
    while (__stlxr(v564 - 1, v563));
    if (!v564)
    {
      ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
      std::__shared_weak_count::__release_weak(v562);
    }
  }
  v565 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v566 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v567 = __ldaxr(v566);
    while (__stlxr(v567 - 1, v566));
    if (!v567)
    {
      ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
      std::__shared_weak_count::__release_weak(v565);
    }
  }
  v568 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v569 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v570 = __ldaxr(v569);
    while (__stlxr(v570 - 1, v569));
    if (!v570)
    {
      ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
      std::__shared_weak_count::__release_weak(v568);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v571 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v572 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v573 = __ldaxr(v572);
    while (__stlxr(v573 - 1, v572));
    if (!v573)
    {
      ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
      std::__shared_weak_count::__release_weak(v571);
    }
  }

  v1173[0] = MEMORY[0x1E0C809B0];
  v1173[1] = 3221225472;
  v1174 = ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2;
  v1175 = &__block_descriptor_40_e9_v16__0_v8l;
  v1176 = v1167;
  v574 = v1173;
  v1158 = v574;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1271, 0, 24);
  v1270 = 0u;
  *(_OWORD *)v1269 = 0u;
  memset(v1268, 0, sizeof(v1268));
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1271[3] = a2;
  v1287.i32[0] = 0;
  v575 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v575)
  {
    v576 = 0;
    v577 = 0;
    do
    {
      LODWORD(v1271[2]) = v577;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v1268, *(_QWORD *)(v575 + 16 * v576), *(_QWORD *)(v575 + 16 * v576 + 8));
      v578 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], v577, &v1287);
      if ((char *)v578[6] - (char *)v578[5] == 4)
      {
        HIDWORD(v1271[2]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], (int)v1271[2], &v1271[2])[5];
        v579 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1282, SHIDWORD(v1271[2]), (_DWORD *)&v1271[2] + 1);
        if ((char *)v579[6] - (char *)v579[5] == 4)
        {
          v580 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * SHIDWORD(v1271[2]));
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1268[2], *v580, v580[1]);
          v581 = v1268[0];
          v582 = (void *)*((_QWORD *)v1268[0] + 8);
          if (v582
          {
            v583 = (unint64_t *)v581[9];
            if (v583)
            {
              v584 = v583 + 1;
              do
                v585 = __ldxr(v584);
              while (__stxr(v585 + 1, v584));
            }
          }
          else
          {
            v583 = 0;
          }
          v586 = (std::__shared_weak_count *)v1266[1];
          v1266[0] = v582;
          v1266[1] = v583;
          if (v586)
          {
            v587 = (unint64_t *)&v586->__shared_owners_;
            do
              v588 = __ldaxr(v587);
            while (__stlxr(v588 - 1, v587));
            if (!v588)
            {
              ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
              std::__shared_weak_count::__release_weak(v586);
            }
          }
          v589 = v1268[2];
          v590 = (void *)*((_QWORD *)v1268[2] + 8);
          if (v590
          {
            v591 = v589[9];
            if (v591)
            {
              v592 = (unint64_t *)(v591 + 8);
              do
                v593 = __ldxr(v592);
              while (__stxr(v593 + 1, v592));
            }
          }
          else
          {
            v591 = 0;
          }
          v594 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
          *(_QWORD *)&v1267 = v590;
          *((_QWORD *)&v1267 + 1) = v591;
          if (v594)
          {
            v595 = (unint64_t *)&v594->__shared_owners_;
            do
              v596 = __ldaxr(v595);
            while (__stlxr(v596 - 1, v595));
            if (!v596)
            {
              ((void (*)(std::__shared_weak_count *))v594->__on_zero_shared)(v594);
              std::__shared_weak_count::__release_weak(v594);
            }
          }
          if (v1266[0])
            v597 = (_QWORD)v1267 == 0;
          else
            v597 = 1;
          if (!v597)
            v1174((uint64_t)v574, (uint64_t *)v1266);
        }
      }
      v576 = ++v1287.i32[0];
      v575 = *((_QWORD *)a2 + 4);
      v577 = v576;
    }
    while (v576 < (*((_QWORD *)a2 + 5) - v575) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v598 = v1269[0];
  v599 = v1269[1];
  if (v1269[0] != v1269[1])
  {
    v600 = 0;
    do
    {
      Espresso::net::remove_layer(a2, v600 + *v598++);
      --v600;
    }
    while (v598 != v599);
  }
  v601 = *((_QWORD *)&v1270 + 1);
  v602 = v1271[0];
  if (*((void **)&v1270 + 1) != v1271[0])
  {
    v603 = 0;
    do
    {
      v604 = *(_DWORD *)v601;
      LODWORD(v1204) = *(_DWORD *)v601 + v603;
      v1287.i32[0] = v604;
      v605 = *(_QWORD *)(v601 + 16);
      v1287.i64[1] = *(_QWORD *)(v601 + 8);
      *(_QWORD *)&v1288 = v605;
      if (v605)
      {
        v606 = (unint64_t *)(v605 + 8);
        do
          v607 = __ldxr(v606);
        while (__stxr(v607 + 1, v606));
      }
      *((_QWORD *)&v1288 + 1) = 0;
      *(_OWORD *)v1289 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, *(_QWORD *)(v601 + 24), *(_QWORD *)(v601 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v601 + 32) - *(_QWORD *)(v601 + 24)) >> 3));
      *(_QWORD *)&v1289[16] = 0;
      *(_QWORD *)&v1289[24] = 0;
      v1290 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], *(_QWORD *)(v601 + 48), *(_QWORD *)(v601 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v601 + 56) - *(_QWORD *)(v601 + 48)) >> 3));
      memset(&v1240, 0, sizeof(v1240));
      v1274 = &v1240;
      LOBYTE(v1275) = 0;
      v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
      v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
      v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers((uint64_t)a2, (int *)&v1204, (uint64_t *)&v1240);
      v1274 = &v1240;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
      v1274 = &v1289[16];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
      v1274 = (char *)&v1288 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
      v608 = (std::__shared_weak_count *)v1288;
      if ((_QWORD)v1288)
      {
        v609 = (unint64_t *)(v1288 + 8);
        do
          v610 = __ldaxr(v609);
        while (__stlxr(v610 - 1, v609));
        if (!v610)
        {
          ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
          std::__shared_weak_count::__release_weak(v608);
        }
      }
      ++v603;
      v601 += 72;
    }
    while ((void *)v601 != v602);
  }
  v1287.i64[0] = (uint64_t)&v1270 + 8;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  if (v1269[0])
  {
    v1269[1] = v1269[0];
    operator delete(v1269[0]);
  }
  v611 = (std::__shared_weak_count *)v1268[3];
  if (v1268[3])
  {
    v612 = (unint64_t *)((char *)v1268[3] + 8);
    do
      v613 = __ldaxr(v612);
    while (__stlxr(v613 - 1, v612));
    if (!v613)
    {
      ((void (*)(std::__shared_weak_count *))v611->__on_zero_shared)(v611);
      std::__shared_weak_count::__release_weak(v611);
    }
  }
  v614 = (std::__shared_weak_count *)v1268[1];
  if (v1268[1])
  {
    v615 = (unint64_t *)((char *)v1268[1] + 8);
    do
      v616 = __ldaxr(v615);
    while (__stlxr(v616 - 1, v615));
    if (!v616)
    {
      ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
      std::__shared_weak_count::__release_weak(v614);
    }
  }
  v617 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v618 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v619 = __ldaxr(v618);
    while (__stlxr(v619 - 1, v618));
    if (!v619)
    {
      ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
      std::__shared_weak_count::__release_weak(v617);
    }
  }
  v620 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v621 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v622 = __ldaxr(v621);
    while (__stlxr(v622 - 1, v621));
    if (!v622)
    {
      ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
      std::__shared_weak_count::__release_weak(v620);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v623 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v624 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v625 = __ldaxr(v624);
    while (__stlxr(v625 - 1, v624));
    if (!v625)
    {
      ((void (*)(std::__shared_weak_count *))v623->__on_zero_shared)(v623);
      std::__shared_weak_count::__release_weak(v623);
    }
  }

  v1169[0] = MEMORY[0x1E0C809B0];
  v1169[1] = 3221225472;
  v1170 = ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3;
  v1171 = &__block_descriptor_40_e9_v16__0_v8l;
  v1172 = v1167;
  v626 = v1169;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v1287, a2);
  v1272 = 0;
  memset(v1271, 0, sizeof(v1271));
  v1270 = 0u;
  *(_OWORD *)v1269 = 0u;
  memset(v1268, 0, sizeof(v1268));
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1273 = a2;
  *(_DWORD *)__p = 0;
  if (*((_QWORD *)a2 + 5) != *((_QWORD *)a2 + 4))
  {
    v1148 = v626;
    LODWORD(v627) = 0;
    do
    {
      LODWORD(v1271[3]) = v627;
      v628 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1288, v627, __p);
      if ((char *)v628[6] - (char *)v628[5] == 4)
      {
        HIDWORD(v1271[3]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1288, (int)v1271[3], &v1271[3])[5];
        v629 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1288, SHIDWORD(v1271[3]), (_DWORD *)&v1271[3] + 1);
        if ((char *)v629[6] - (char *)v629[5] == 4)
        {
          v1272 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1288, SHIDWORD(v1271[3]), (_DWORD *)&v1271[3] + 1)[5];
          v630 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1289[8], SHIDWORD(v1271[3]), (_DWORD *)&v1271[3] + 1);
          if ((char *)v630[6] - (char *)v630[5] == 4)
          {
            v631 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v1289[8], v1272, &v1272);
            if ((char *)v631[6] - (char *)v631[5] == 4)
            {
              v632 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * (int)v627);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1268[2], *v632, v632[1]);
              v633 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * SHIDWORD(v1271[3]));
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v1269, *v633, v633[1]);
              v634 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * v1272);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1270, *v634, v634[1]);
              v635 = v1268[2];
              v636 = (void *)*((_QWORD *)v1268[2] + 8);
              if (v636
              {
                v637 = (unint64_t *)v635[9];
                if (v637)
                {
                  v638 = v637 + 1;
                  do
                    v639 = __ldxr(v638);
                  while (__stxr(v639 + 1, v638));
                }
              }
              else
              {
                v637 = 0;
              }
              v640 = (std::__shared_weak_count *)v1266[1];
              v1266[0] = v636;
              v1266[1] = v637;
              if (v640)
              {
                v641 = (unint64_t *)&v640->__shared_owners_;
                do
                  v642 = __ldaxr(v641);
                while (__stlxr(v642 - 1, v641));
                if (!v642)
                {
                  ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
                  std::__shared_weak_count::__release_weak(v640);
                }
                v636 = v1266[0];
              }
              if (v636)
              {
                v643 = v1269[0];
                v644 = (void *)*((_QWORD *)v1269[0] + 8);
                if (v644
                {
                  v645 = v643[9];
                  if (v645)
                  {
                    v646 = (unint64_t *)(v645 + 8);
                    do
                      v647 = __ldxr(v646);
                    while (__stxr(v647 + 1, v646));
                  }
                }
                else
                {
                  v645 = 0;
                }
                v648 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
                *(_QWORD *)&v1267 = v644;
                *((_QWORD *)&v1267 + 1) = v645;
                if (v648)
                {
                  v649 = (unint64_t *)&v648->__shared_owners_;
                  do
                    v650 = __ldaxr(v649);
                  while (__stlxr(v650 - 1, v649));
                  if (!v650)
                  {
                    ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
                    std::__shared_weak_count::__release_weak(v648);
                  }
                  v644 = (void *)v1267;
                }
                if (v644)
                {
                  v651 = v1270;
                  v652 = *(void **)(v1270 + 64);
                  if (v652
                  {
                    v653 = *(unint64_t **)(v651 + 72);
                    if (v653)
                    {
                      v654 = v653 + 1;
                      do
                        v655 = __ldxr(v654);
                      while (__stxr(v655 + 1, v654));
                    }
                  }
                  else
                  {
                    v653 = 0;
                  }
                  v656 = (std::__shared_weak_count *)v1268[1];
                  v1268[0] = v652;
                  v1268[1] = v653;
                  if (v656)
                  {
                    v657 = (unint64_t *)&v656->__shared_owners_;
                    do
                      v658 = __ldaxr(v657);
                    while (__stlxr(v658 - 1, v657));
                    if (!v658)
                    {
                      ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
                      std::__shared_weak_count::__release_weak(v656);
                    }
                    v652 = v1268[0];
                  }
                  if (v652)
                    v1170((uint64_t)v1148, v1266);
                }
              }
            }
          }
        }
      }
      v627 = *(int *)__p + 1;
      ++*(_DWORD *)__p;
    }
    while (v627 < (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
    v659 = v1271[0];
    v660 = v1271[1];
    if (v1271[0] != v1271[1])
    {
      v661 = 0;
      do
      {
        Espresso::net::remove_layer(a2, v661 + *v659++);
        --v661;
      }
      while (v659 != v660);
      v659 = v1271[0];
    }
    v626 = v1148;
    if (v659)
    {
      v1271[1] = v659;
      operator delete(v659);
    }
  }
  v662 = (std::__shared_weak_count *)*((_QWORD *)&v1270 + 1);
  if (*((_QWORD *)&v1270 + 1))
  {
    v663 = (unint64_t *)(*((_QWORD *)&v1270 + 1) + 8);
    do
      v664 = __ldaxr(v663);
    while (__stlxr(v664 - 1, v663));
    if (!v664)
    {
      ((void (*)(std::__shared_weak_count *))v662->__on_zero_shared)(v662);
      std::__shared_weak_count::__release_weak(v662);
    }
  }
  v665 = (std::__shared_weak_count *)v1269[1];
  if (v1269[1])
  {
    v666 = (unint64_t *)((char *)v1269[1] + 8);
    do
      v667 = __ldaxr(v666);
    while (__stlxr(v667 - 1, v666));
    if (!v667)
    {
      ((void (*)(std::__shared_weak_count *))v665->__on_zero_shared)(v665);
      std::__shared_weak_count::__release_weak(v665);
    }
  }
  v668 = (std::__shared_weak_count *)v1268[3];
  if (v1268[3])
  {
    v669 = (unint64_t *)((char *)v1268[3] + 8);
    do
      v670 = __ldaxr(v669);
    while (__stlxr(v670 - 1, v669));
    if (!v670)
    {
      ((void (*)(std::__shared_weak_count *))v668->__on_zero_shared)(v668);
      std::__shared_weak_count::__release_weak(v668);
    }
  }
  v671 = (std::__shared_weak_count *)v1268[1];
  if (v1268[1])
  {
    v672 = (unint64_t *)((char *)v1268[1] + 8);
    do
      v673 = __ldaxr(v672);
    while (__stlxr(v673 - 1, v672));
    if (!v673)
    {
      ((void (*)(std::__shared_weak_count *))v671->__on_zero_shared)(v671);
      std::__shared_weak_count::__release_weak(v671);
    }
  }
  v674 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v675 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v676 = __ldaxr(v675);
    while (__stlxr(v676 - 1, v675));
    if (!v676)
    {
      ((void (*)(std::__shared_weak_count *))v674->__on_zero_shared)(v674);
      std::__shared_weak_count::__release_weak(v674);
    }
  }
  v677 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v678 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v679 = __ldaxr(v678);
    while (__stlxr(v679 - 1, v678));
    if (!v679)
    {
      ((void (*)(std::__shared_weak_count *))v677->__on_zero_shared)(v677);
      std::__shared_weak_count::__release_weak(v677);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&v1289[16]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)&v1288 + 1));
  v680 = (std::__shared_weak_count *)v1287.i64[1];
  if (v1287.i64[1])
  {
    v681 = (unint64_t *)(v1287.i64[1] + 8);
    do
      v682 = __ldaxr(v681);
    while (__stlxr(v682 - 1, v681));
    if (!v682)
    {
      ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
      std::__shared_weak_count::__release_weak(v680);
    }
  }

  if (Espresso::ANECompilerEngine::is_mix(v1153, v683)
    && Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(a2, v684))
  {
    v1266[0] = (void *)MEMORY[0x1E0C809B0];
    v1266[1] = (void *)3221225472;
    *(_QWORD *)&v1267 = ___ZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1__block_invoke;
    *((_QWORD *)&v1267 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    v1268[0] = v1167;
    v1268[1] = a2;
    Espresso::single_match_replace<Espresso::ANECompilerEngine::elementwise_kernel>(a2, v1266);
    v1186 = MEMORY[0x1E0C809B0];
    v1187 = 3221225472;
    v1188 = ___ZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1__block_invoke;
    v1189 = &__block_descriptor_48_e9_v16__0_v8l;
    v1190 = v1167;
    v1191 = a2;
    v685 = &v1186;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
    memset(v1268, 0, 28);
    v1267 = 0u;
    *(_OWORD *)v1266 = 0u;
    v1269[0] = a2;
    v686 = *((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 5) != v686)
    {
      v687 = 0;
      do
      {
        LODWORD(v1268[3]) = v687;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v686 + 16 * v687), *(_QWORD *)(v686 + 16 * v687 + 8));
        v688 = v1267;
        v689 = *(void **)(v1267 + 64);
        if (v689
        {
          v690 = *(unint64_t **)(v688 + 72);
          if (v690)
          {
            v691 = v690 + 1;
            do
              v692 = __ldxr(v691);
            while (__stxr(v692 + 1, v691));
          }
        }
        else
        {
          v690 = 0;
        }
        v693 = (std::__shared_weak_count *)v1266[1];
        v1266[0] = v689;
        v1266[1] = v690;
        if (v693)
        {
          v694 = (unint64_t *)&v693->__shared_owners_;
          do
            v695 = __ldaxr(v694);
          while (__stlxr(v695 - 1, v694));
          if (!v695)
          {
            ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
            std::__shared_weak_count::__release_weak(v693);
          }
          v689 = v1266[0];
        }
        if (v689)
          v1188((uint64_t)v685, (int64x2_t *)v1266);
        ++v687;
        v686 = *((_QWORD *)a2 + 4);
      }
      while (v687 < (*((_QWORD *)a2 + 5) - v686) >> 4);
      v696 = v1268[0];
      v697 = v1268[1];
      if (v1268[0] != v1268[1])
      {
        v698 = 0;
        do
        {
          v699 = *(_DWORD *)v696 + v698;
          *(_DWORD *)v696 = v699;
          v700 = v696[1];
          if (v700)
          {
            v1287.i32[0] = v699;
            v701 = v696[2];
            v1287.i64[1] = v700;
            *(_QWORD *)&v1288 = v701;
            if (v701)
            {
              v702 = (unint64_t *)(v701 + 8);
              do
                v703 = __ldxr(v702);
              while (__stxr(v703 + 1, v702));
            }
            *((_QWORD *)&v1288 + 1) = 0;
            *(_OWORD *)v1289 = 0uLL;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v696[3], v696[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v696[4] - v696[3]) >> 3));
            *(_QWORD *)&v1289[16] = 0;
            *(_QWORD *)&v1289[24] = 0;
            v1290 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v696[6], v696[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v696[7] - v696[6]) >> 3));
            memset(&v1240, 0, sizeof(v1240));
            v1274 = &v1240;
            LOBYTE(v1275) = 0;
            v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
            v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
            v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
            v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
            Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
            v1274 = &v1240;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
            v1274 = &v1289[16];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
            v1274 = (char *)&v1288 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
            v704 = (std::__shared_weak_count *)v1288;
            if ((_QWORD)v1288)
            {
              v705 = (unint64_t *)(v1288 + 8);
              do
                v706 = __ldaxr(v705);
              while (__stlxr(v706 - 1, v705));
              if (!v706)
              {
                ((void (*)(std::__shared_weak_count *))v704->__on_zero_shared)(v704);
                std::__shared_weak_count::__release_weak(v704);
              }
            }
            v707 = 1;
          }
          else
          {
            Espresso::net::remove_layer(a2, v699);
            v707 = -1;
          }
          v698 += v707;
          v696 += 9;
        }
        while (v696 != v697);
      }
    }
    v1287.i64[0] = (uint64_t)v1268;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
    v708 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
    if (*((_QWORD *)&v1267 + 1))
    {
      v709 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
      do
        v710 = __ldaxr(v709);
      while (__stlxr(v710 - 1, v709));
      if (!v710)
      {
        ((void (*)(std::__shared_weak_count *))v708->__on_zero_shared)(v708);
        std::__shared_weak_count::__release_weak(v708);
      }
    }
    v711 = (std::__shared_weak_count *)v1266[1];
    if (v1266[1])
    {
      v712 = (unint64_t *)((char *)v1266[1] + 8);
      do
        v713 = __ldaxr(v712);
      while (__stlxr(v713 - 1, v712));
      if (!v713)
      {
        ((void (*)(std::__shared_weak_count *))v711->__on_zero_shared)(v711);
        std::__shared_weak_count::__release_weak(v711);
      }
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
    v714 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v715 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v716 = __ldaxr(v715);
      while (__stlxr(v716 - 1, v715));
      if (!v716)
      {
        ((void (*)(std::__shared_weak_count *))v714->__on_zero_shared)(v714);
        std::__shared_weak_count::__release_weak(v714);
      }
    }

  }
  v1192 = (const void **)MEMORY[0x1E0C809B0];
  v1193 = 3221225472;
  v1194 = ___ZN8Espresso17ANECompilerEngine7context23split_4x4_deconvolutionEPNS_3netEPS1__block_invoke;
  v1195 = &__block_descriptor_48_e9_v16__0_v8l;
  v1196 = v1167;
  v1197 = a2;
  v717 = &v1192;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1268, 0, 28);
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1269[0] = a2;
  v718 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v718)
  {
    v719 = 0;
    do
    {
      LODWORD(v1268[3]) = v719;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v718 + 16 * v719), *(_QWORD *)(v718 + 16 * v719 + 8));
      v720 = v1267;
      v721 = *(void **)(v1267 + 64);
      if (v721
      {
        v722 = *(unint64_t **)(v720 + 72);
        if (v722)
        {
          v723 = v722 + 1;
          do
            v724 = __ldxr(v723);
          while (__stxr(v724 + 1, v723));
        }
      }
      else
      {
        v722 = 0;
      }
      v725 = (std::__shared_weak_count *)v1266[1];
      v1266[0] = v721;
      v1266[1] = v722;
      if (v725)
      {
        v726 = (unint64_t *)&v725->__shared_owners_;
        do
          v727 = __ldaxr(v726);
        while (__stlxr(v727 - 1, v726));
        if (!v727)
        {
          ((void (*)(std::__shared_weak_count *))v725->__on_zero_shared)(v725);
          std::__shared_weak_count::__release_weak(v725);
        }
        v721 = v1266[0];
      }
      if (v721)
        v1194((uint64_t)v717, (int *)v1266);
      ++v719;
      v718 = *((_QWORD *)a2 + 4);
    }
    while (v719 < (*((_QWORD *)a2 + 5) - v718) >> 4);
    v728 = v1268[0];
    v729 = v1268[1];
    if (v1268[0] != v1268[1])
    {
      v730 = 0;
      do
      {
        v731 = *(_DWORD *)v728 + v730;
        *(_DWORD *)v728 = v731;
        v732 = v728[1];
        if (v732)
        {
          v1287.i32[0] = v731;
          v733 = v728[2];
          v1287.i64[1] = v732;
          *(_QWORD *)&v1288 = v733;
          if (v733)
          {
            v734 = (unint64_t *)(v733 + 8);
            do
              v735 = __ldxr(v734);
            while (__stxr(v735 + 1, v734));
          }
          *((_QWORD *)&v1288 + 1) = 0;
          *(_OWORD *)v1289 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v728[3], v728[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v728[4] - v728[3]) >> 3));
          *(_QWORD *)&v1289[16] = 0;
          *(_QWORD *)&v1289[24] = 0;
          v1290 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v728[6], v728[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v728[7] - v728[6]) >> 3));
          memset(&v1240, 0, sizeof(v1240));
          v1274 = &v1240;
          LOBYTE(v1275) = 0;
          v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
          v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
          v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
          v1274 = &v1240;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v1274 = &v1289[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v1274 = (char *)&v1288 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v736 = (std::__shared_weak_count *)v1288;
          if ((_QWORD)v1288)
          {
            v737 = (unint64_t *)(v1288 + 8);
            do
              v738 = __ldaxr(v737);
            while (__stlxr(v738 - 1, v737));
            if (!v738)
            {
              ((void (*)(std::__shared_weak_count *))v736->__on_zero_shared)(v736);
              std::__shared_weak_count::__release_weak(v736);
            }
          }
          ++v730;
        }
        v728 += 9;
      }
      while (v728 != v729);
    }
  }
  v1287.i64[0] = (uint64_t)v1268;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  v739 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v740 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v741 = __ldaxr(v740);
    while (__stlxr(v741 - 1, v740));
    if (!v741)
    {
      ((void (*)(std::__shared_weak_count *))v739->__on_zero_shared)(v739);
      std::__shared_weak_count::__release_weak(v739);
    }
  }
  v742 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v743 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v744 = __ldaxr(v743);
    while (__stlxr(v744 - 1, v743));
    if (!v744)
    {
      ((void (*)(std::__shared_weak_count *))v742->__on_zero_shared)(v742);
      std::__shared_weak_count::__release_weak(v742);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v745 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v746 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v747 = __ldaxr(v746);
    while (__stlxr(v747 - 1, v746));
    if (!v747)
    {
      ((void (*)(std::__shared_weak_count *))v745->__on_zero_shared)(v745);
      std::__shared_weak_count::__release_weak(v745);
    }
  }

  v1198 = (void **)MEMORY[0x1E0C809B0];
  v1199 = 3221225472;
  v1200 = ___ZN8Espresso17ANECompilerEngine7context42transform_network_refactor_large_conv_padsEPNS_3netEPS1__block_invoke;
  v1201 = &__block_descriptor_48_e9_v16__0_v8l;
  v1202 = v1167;
  v1203 = a2;
  v748 = &v1198;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1268, 0, 28);
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1269[0] = a2;
  v749 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v749)
  {
    v750 = 0;
    do
    {
      LODWORD(v1268[3]) = v750;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v749 + 16 * v750), *(_QWORD *)(v749 + 16 * v750 + 8));
      v751 = v1267;
      v752 = *(void **)(v1267 + 64);
      if (v752
      {
        v753 = *(unint64_t **)(v751 + 72);
        if (v753)
        {
          v754 = v753 + 1;
          do
            v755 = __ldxr(v754);
          while (__stxr(v755 + 1, v754));
        }
      }
      else
      {
        v753 = 0;
      }
      v756 = (std::__shared_weak_count *)v1266[1];
      v1266[0] = v752;
      v1266[1] = v753;
      if (v756)
      {
        v757 = (unint64_t *)&v756->__shared_owners_;
        do
          v758 = __ldaxr(v757);
        while (__stlxr(v758 - 1, v757));
        if (!v758)
        {
          ((void (*)(std::__shared_weak_count *))v756->__on_zero_shared)(v756);
          std::__shared_weak_count::__release_weak(v756);
        }
        v752 = v1266[0];
      }
      if (v752)
        v1200((uint64_t)v748, (int64x2_t *)v1266);
      ++v750;
      v749 = *((_QWORD *)a2 + 4);
    }
    while (v750 < (*((_QWORD *)a2 + 5) - v749) >> 4);
    v759 = v1268[0];
    v760 = v1268[1];
    if (v1268[0] != v1268[1])
    {
      v761 = 0;
      do
      {
        v762 = *(_DWORD *)v759 + v761;
        *(_DWORD *)v759 = v762;
        v763 = v759[1];
        if (v763)
        {
          v1287.i32[0] = v762;
          v764 = v759[2];
          v1287.i64[1] = v763;
          *(_QWORD *)&v1288 = v764;
          if (v764)
          {
            v765 = (unint64_t *)(v764 + 8);
            do
              v766 = __ldxr(v765);
            while (__stxr(v766 + 1, v765));
          }
          *((_QWORD *)&v1288 + 1) = 0;
          *(_OWORD *)v1289 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v759[3], v759[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v759[4] - v759[3]) >> 3));
          *(_QWORD *)&v1289[16] = 0;
          *(_QWORD *)&v1289[24] = 0;
          v1290 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v759[6], v759[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v759[7] - v759[6]) >> 3));
          memset(&v1240, 0, sizeof(v1240));
          v1274 = &v1240;
          LOBYTE(v1275) = 0;
          v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
          v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
          v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
          v1274 = &v1240;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v1274 = &v1289[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v1274 = (char *)&v1288 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v767 = (std::__shared_weak_count *)v1288;
          if ((_QWORD)v1288)
          {
            v768 = (unint64_t *)(v1288 + 8);
            do
              v769 = __ldaxr(v768);
            while (__stlxr(v769 - 1, v768));
            if (!v769)
            {
              ((void (*)(std::__shared_weak_count *))v767->__on_zero_shared)(v767);
              std::__shared_weak_count::__release_weak(v767);
            }
          }
          ++v761;
        }
        v759 += 9;
      }
      while (v759 != v760);
    }
  }
  v1287.i64[0] = (uint64_t)v1268;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  v770 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v771 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v772 = __ldaxr(v771);
    while (__stlxr(v772 - 1, v771));
    if (!v772)
    {
      ((void (*)(std::__shared_weak_count *))v770->__on_zero_shared)(v770);
      std::__shared_weak_count::__release_weak(v770);
    }
  }
  v773 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v774 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v775 = __ldaxr(v774);
    while (__stlxr(v775 - 1, v774));
    if (!v775)
    {
      ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
      std::__shared_weak_count::__release_weak(v773);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v776 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v777 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v778 = __ldaxr(v777);
    while (__stlxr(v778 - 1, v777));
    if (!v778)
    {
      ((void (*)(std::__shared_weak_count *))v776->__on_zero_shared)(v776);
      std::__shared_weak_count::__release_weak(v776);
    }
  }

  v1266[0] = (void *)MEMORY[0x1E0C809B0];
  v1266[1] = (void *)3221225472;
  *(_QWORD *)&v1267 = ___ZN8Espresso17ANECompilerEngine7context17transform_softmaxEPNS_3netEPS1__block_invoke;
  *((_QWORD *)&v1267 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  v1268[0] = v1167;
  v1268[1] = a2;
  Espresso::single_match_replace<Espresso::generic_softmax_kernel>(a2, v1266);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v1151);
  v779 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if ((Espresso::ANECompilerEngine::is_mix(v779, v780) & 1) == 0)
    goto LABEL_1209;
  std::string::basic_string[abi:ne180100]<0>(&v1287, "experimental.ane.enable_scenenet_optimizations");
  std::string::basic_string[abi:ne180100]<0>(&v1240, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v1151, (uint64_t)&v1287, (uint64_t)&v1240, (std::string *)__p);
  if (SHIBYTE(v1240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1240.__r_.__value_.__l.__data_);
  if (SBYTE7(v1288) < 0)
    operator delete((void *)v1287.i64[0]);
  std::string::basic_string[abi:ne180100]<0>(&v1287, "allowSoftmaxApproximation");
  std::string::basic_string[abi:ne180100]<0>(&v1274, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v1151, (uint64_t)&v1287, (uint64_t)&v1274, &v1240);
  if (SHIBYTE(v1276) < 0)
    operator delete(v1274);
  if (SBYTE7(v1288) < 0)
    operator delete((void *)v1287.i64[0]);
  if ((__p[23] & 0x80000000) == 0)
  {
    if (__p[23] == 1)
    {
      v781 = __p;
      goto LABEL_1197;
    }
    goto LABEL_1198;
  }
  if (*(_QWORD *)&__p[8] == 1)
  {
    v781 = *(_BYTE **)__p;
LABEL_1197:
    if (*v781 == 49)
      goto LABEL_1203;
  }
LABEL_1198:
  v782 = HIBYTE(v1240.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v1240.__r_.__value_.__r.__words[2]) < 0)
  {
    v783 = (std::string *)v1240.__r_.__value_.__r.__words[0];
    if (v1240.__r_.__value_.__l.__size_ != 1)
      goto LABEL_1206;
LABEL_1202:
    if (v783->__r_.__value_.__s.__data_[0] != 49)
    {
LABEL_1204:
      if ((v782 & 0x80) == 0)
        goto LABEL_1207;
      v783 = (std::string *)v1240.__r_.__value_.__r.__words[0];
LABEL_1206:
      operator delete(v783);
      goto LABEL_1207;
    }
LABEL_1203:
    v1287.i64[0] = MEMORY[0x1E0C809B0];
    v1287.i64[1] = 3221225472;
    *(_QWORD *)&v1288 = ___ZN8Espresso17ANECompilerEngine7context17transform_softmaxEPNS_3netEPS1__block_invoke_2;
    *((_QWORD *)&v1288 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    *(_QWORD *)v1289 = v1167;
    *(_QWORD *)&v1289[8] = a2;
    Espresso::single_match_replace<Espresso::generic_softmax_kernel>(a2, &v1287);
    v782 = HIBYTE(v1240.__r_.__value_.__r.__words[2]);
    goto LABEL_1204;
  }
  if (SHIBYTE(v1240.__r_.__value_.__r.__words[2]) == 1)
  {
    v783 = &v1240;
    goto LABEL_1202;
  }
LABEL_1207:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_1209:

  v1266[0] = (void *)MEMORY[0x1E0C809B0];
  v1266[1] = (void *)3221225472;
  *(_QWORD *)&v1267 = ___ZN8Espresso17ANECompilerEngine7context16transform_ew_powEPNS_3netEPS1__block_invoke;
  *((_QWORD *)&v1267 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  v1268[0] = v1167;
  v1268[1] = a2;
  Espresso::single_match_replace<Espresso::ANECompilerEngine::elementwise_kernel>(a2, v1266);
  if (!v1167
    || !*((_QWORD *)a2 + 99)
    || (***((unsigned int (****)(_QWORD))v1167 + 1))(*((_QWORD *)v1167 + 1)) != 10007
    && (***((unsigned int (****)(_QWORD))v1167 + 1))(*((_QWORD *)v1167 + 1)) != 10006
    || *((_BYTE *)v1167 + 123))
  {
    v1240.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    v1240.__r_.__value_.__l.__size_ = 3221225472;
    v1240.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8Espresso17ANECompilerEngine7context28transform_reflective_paddingEPNS_3netEPS1__block_invoke;
    v1241 = &__block_descriptor_48_e9_v16__0_v8l;
    v1242 = v1167;
    v1243 = a2;
    v784 = &v1240;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
    memset(v1268, 0, 28);
    v1267 = 0u;
    *(_OWORD *)v1266 = 0u;
    v1269[0] = a2;
    v785 = *((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 5) != v785)
    {
      v786 = 0;
      v1159 = v784;
      do
      {
        LODWORD(v1268[3]) = v786;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v785 + 16 * v786), *(_QWORD *)(v785 + 16 * v786 + 8));
        v787 = v1267;
        v788 = *(void **)(v1267 + 64);
        if (v788
        {
          v789 = *(unint64_t **)(v787 + 72);
          if (v789)
          {
            v790 = v789 + 1;
            do
              v791 = __ldxr(v790);
            while (__stxr(v791 + 1, v790));
          }
        }
        else
        {
          v789 = 0;
        }
        v792 = (std::__shared_weak_count *)v1266[1];
        v1266[0] = v788;
        v1266[1] = v789;
        if (v792)
        {
          v793 = (unint64_t *)&v792->__shared_owners_;
          do
            v794 = __ldaxr(v793);
          while (__stlxr(v794 - 1, v793));
          if (!v794)
          {
            ((void (*)(std::__shared_weak_count *))v792->__on_zero_shared)(v792);
            std::__shared_weak_count::__release_weak(v792);
          }
          v788 = v1266[0];
        }
        if (v788)
          ((void (*)(uint64_t, int64x2_t *))v1240.__r_.__value_.__r.__words[2])((uint64_t)v784, (int64x2_t *)v1266);
        ++v786;
        v785 = *((_QWORD *)a2 + 4);
      }
      while (v786 < (*((_QWORD *)a2 + 5) - v785) >> 4);
      v795 = v1268[0];
      v796 = v1268[1];
      if (v1268[0] != v1268[1])
      {
        v797 = 0;
        do
        {
          v798 = *(_DWORD *)v795 + v797;
          *(_DWORD *)v795 = v798;
          v799 = v795[1];
          if (v799)
          {
            v1287.i32[0] = v798;
            v800 = v795[2];
            v1287.i64[1] = v799;
            *(_QWORD *)&v1288 = v800;
            if (v800)
            {
              v801 = (unint64_t *)(v800 + 8);
              do
                v802 = __ldxr(v801);
              while (__stxr(v802 + 1, v801));
            }
            *((_QWORD *)&v1288 + 1) = 0;
            *(_OWORD *)v1289 = 0uLL;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v795[3], v795[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v795[4] - v795[3]) >> 3));
            *(_QWORD *)&v1289[16] = 0;
            *(_QWORD *)&v1289[24] = 0;
            v1290 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v795[6], v795[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v795[7] - v795[6]) >> 3));
            v1275 = 0;
            v1274 = 0;
            v1276 = 0;
            v1204 = (Espresso::net *)&v1274;
            LOBYTE(v1205) = 0;
            v1274 = operator new(0x48uLL);
            v1275 = (uint64_t)v1274;
            v1276 = (void (*)(uint64_t, uint64_t))((char *)v1274 + 72);
            v1275 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1276, (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1274);
            Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1274);
            v1204 = (Espresso::net *)&v1274;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1204);
            v1204 = (Espresso::net *)&v1289[16];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1204);
            v1204 = (Espresso::net *)((char *)&v1288 + 8);
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1204);
            v803 = (std::__shared_weak_count *)v1288;
            if ((_QWORD)v1288)
            {
              v804 = (unint64_t *)(v1288 + 8);
              do
                v805 = __ldaxr(v804);
              while (__stlxr(v805 - 1, v804));
              if (!v805)
              {
                ((void (*)(std::__shared_weak_count *))v803->__on_zero_shared)(v803);
                std::__shared_weak_count::__release_weak(v803);
              }
            }
            v806 = 1;
          }
          else
          {
            Espresso::net::remove_layer(a2, v798);
            v806 = -1;
          }
          v797 += v806;
          v795 += 9;
        }
        while (v795 != v796);
        v784 = v1159;
      }
    }
    v1287.i64[0] = (uint64_t)v1268;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
    v807 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
    if (*((_QWORD *)&v1267 + 1))
    {
      v808 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
      do
        v809 = __ldaxr(v808);
      while (__stlxr(v809 - 1, v808));
      if (!v809)
      {
        ((void (*)(std::__shared_weak_count *))v807->__on_zero_shared)(v807);
        std::__shared_weak_count::__release_weak(v807);
      }
    }
    v810 = (std::__shared_weak_count *)v1266[1];
    if (v1266[1])
    {
      v811 = (unint64_t *)((char *)v1266[1] + 8);
      do
        v812 = __ldaxr(v811);
      while (__stlxr(v812 - 1, v811));
      if (!v812)
      {
        ((void (*)(std::__shared_weak_count *))v810->__on_zero_shared)(v810);
        std::__shared_weak_count::__release_weak(v810);
      }
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
    v813 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v814 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v815 = __ldaxr(v814);
      while (__stlxr(v815 - 1, v814));
      if (!v815)
      {
        ((void (*)(std::__shared_weak_count *))v813->__on_zero_shared)(v813);
        std::__shared_weak_count::__release_weak(v813);
      }
    }

  }
  v1204 = (Espresso::net *)MEMORY[0x1E0C809B0];
  v1205 = 3221225472;
  v1206[0] = ___ZN8Espresso17ANECompilerEngine7context23transform_crop_to_sliceEPNS_3netEPS1__block_invoke;
  v1206[1] = &__block_descriptor_48_e9_v16__0_v8l;
  v1206[2] = v1167;
  v1206[3] = a2;
  v816 = &v1204;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  memset(v1268, 0, 28);
  v1267 = 0u;
  *(_OWORD *)v1266 = 0u;
  v1269[0] = a2;
  v817 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v817)
  {
    v818 = 0;
    do
    {
      LODWORD(v1268[3]) = v818;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1267, *(_QWORD *)(v817 + 16 * v818), *(_QWORD *)(v817 + 16 * v818 + 8));
      v819 = v1267;
      v820 = *(void **)(v1267 + 64);
      if (v820
      {
        v821 = *(unint64_t **)(v819 + 72);
        if (v821)
        {
          v822 = v821 + 1;
          do
            v823 = __ldxr(v822);
          while (__stxr(v823 + 1, v822));
        }
      }
      else
      {
        v821 = 0;
      }
      v824 = (std::__shared_weak_count *)v1266[1];
      v1266[0] = v820;
      v1266[1] = v821;
      if (v824)
      {
        v825 = (unint64_t *)&v824->__shared_owners_;
        do
          v826 = __ldaxr(v825);
        while (__stlxr(v826 - 1, v825));
        if (!v826)
        {
          ((void (*)(std::__shared_weak_count *))v824->__on_zero_shared)(v824);
          std::__shared_weak_count::__release_weak(v824);
        }
        v820 = v1266[0];
      }
      if (v820)
        ((void (*)(Espresso::net **, void **))v1206[0])(v816, v1266);
      ++v818;
      v817 = *((_QWORD *)a2 + 4);
    }
    while (v818 < (*((_QWORD *)a2 + 5) - v817) >> 4);
    v827 = v1268[0];
    v828 = v1268[1];
    if (v1268[0] != v1268[1])
    {
      v829 = 0;
      do
      {
        v830 = *(_DWORD *)v827 + v829;
        *(_DWORD *)v827 = v830;
        v831 = v827[1];
        if (v831)
        {
          v1287.i32[0] = v830;
          v832 = v827[2];
          v1287.i64[1] = v831;
          *(_QWORD *)&v1288 = v832;
          if (v832)
          {
            v833 = (unint64_t *)(v832 + 8);
            do
              v834 = __ldxr(v833);
            while (__stxr(v834 + 1, v833));
          }
          *((_QWORD *)&v1288 + 1) = 0;
          *(_OWORD *)v1289 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v1288 + 1, v827[3], v827[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v827[4] - v827[3]) >> 3));
          *(_QWORD *)&v1289[16] = 0;
          *(_QWORD *)&v1289[24] = 0;
          v1290 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1289[16], v827[6], v827[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v827[7] - v827[6]) >> 3));
          memset(&v1240, 0, sizeof(v1240));
          v1274 = &v1240;
          LOBYTE(v1275) = 0;
          v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v1240.__r_.__value_.__l.__size_ = v1240.__r_.__value_.__r.__words[0];
          v1240.__r_.__value_.__r.__words[2] = v1240.__r_.__value_.__r.__words[0] + 72;
          v1240.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1240.__r_.__value_.__r.__words[2], (uint64_t)&v1287, (uint64_t)v1291, (uint64_t)v1240.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t *)&v1240);
          v1274 = &v1240;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v1274 = &v1289[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v1274 = (char *)&v1288 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1274);
          v835 = (std::__shared_weak_count *)v1288;
          if ((_QWORD)v1288)
          {
            v836 = (unint64_t *)(v1288 + 8);
            do
              v837 = __ldaxr(v836);
            while (__stlxr(v837 - 1, v836));
            if (!v837)
            {
              ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
              std::__shared_weak_count::__release_weak(v835);
            }
          }
          v838 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v830);
          v838 = -1;
        }
        v829 += v838;
        v827 += 9;
      }
      while (v827 != v828);
    }
  }
  v1287.i64[0] = (uint64_t)v1268;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
  v839 = (std::__shared_weak_count *)*((_QWORD *)&v1267 + 1);
  if (*((_QWORD *)&v1267 + 1))
  {
    v840 = (unint64_t *)(*((_QWORD *)&v1267 + 1) + 8);
    do
      v841 = __ldaxr(v840);
    while (__stlxr(v841 - 1, v840));
    if (!v841)
    {
      ((void (*)(std::__shared_weak_count *))v839->__on_zero_shared)(v839);
      std::__shared_weak_count::__release_weak(v839);
    }
  }
  v842 = (std::__shared_weak_count *)v1266[1];
  if (v1266[1])
  {
    v843 = (unint64_t *)((char *)v1266[1] + 8);
    do
      v844 = __ldaxr(v843);
    while (__stlxr(v844 - 1, v843));
    if (!v844)
    {
      ((void (*)(std::__shared_weak_count *))v842->__on_zero_shared)(v842);
      std::__shared_weak_count::__release_weak(v842);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1283);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&__p[24]);
  v845 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v846 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v847 = __ldaxr(v846);
    while (__stlxr(v847 - 1, v846));
    if (!v847)
    {
      ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
      std::__shared_weak_count::__release_weak(v845);
    }
  }

  v1266[0] = (void *)MEMORY[0x1E0C809B0];
  v1266[1] = (void *)3221225472;
  *(_QWORD *)&v1267 = ___ZN8Espresso17ANECompilerEngine7context20transform_leaky_reluEPNS_3netEPS1__block_invoke;
  *((_QWORD *)&v1267 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  v1268[0] = v1167;
  v1268[1] = a2;
  Espresso::single_match_replace<Espresso::generic_activation_kernel>(a2, v1266);
  if ((Espresso::ANECompilerEngine::is_mix(v1153, v848) & 1) == 0)
  {
    *(_QWORD *)__p = a2;
    v1287.i64[0] = (uint64_t)&off_1E2DB1768;
    v1287.i64[1] = (uint64_t)__p;
    *((_QWORD *)&v1288 + 1) = &v1287;
    v1266[0] = (void *)MEMORY[0x1E0C809B0];
    v1266[1] = (void *)3321888768;
    *(_QWORD *)&v1267 = ___Z31surround_kernel_with_transposesIN8Espresso17ANECompilerEngine20inner_product_kernelELi4EEvPNS0_3netEPNS1_7contextENS0_18transpose_params_tES7_NSt3__18functionIFbRNS0_18single_match_stateIT_EEEEE_block_invoke;
    *((_QWORD *)&v1267 + 1) = &__block_descriptor_120_ea8_48c106_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_17ANECompilerEngine20inner_product_kernelEEEEEE_e9_v16__0_v8l;
    v1268[0] = v1167;
    v1268[1] = a2;
    v849 = &v1268[2];
    v1269[1] = &v1268[2];
    std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::__clone((uint64_t)&v1287, &v1268[2]);
    v1270 = xmmword_191A93610;
    *(_OWORD *)((char *)v1271 + 4) = xmmword_191A93600;
    LODWORD(v1271[0]) = 4;
    HIDWORD(v1271[2]) = 4;
    Espresso::single_match_replace<Espresso::ANECompilerEngine::inner_product_kernel>(a2, v1266);
    if (v1269[1] == &v1268[2])
    {
      v850 = 4;
LABEL_1315:
      (*((void (**)(void **))*v849 + v850))(v849);
    }
    else if (v1269[1])
    {
      v850 = 5;
      v849 = (void **)v1269[1];
      goto LABEL_1315;
    }
    v851 = (int64x2_t *)*((_QWORD *)&v1288 + 1);
    if (*((int64x2_t **)&v1288 + 1) == &v1287)
    {
      v852 = 4;
      v851 = &v1287;
LABEL_1320:
      (*(void (**)(void))(v851->i64[0] + 8 * v852))();
    }
    else if (*((_QWORD *)&v1288 + 1))
    {
      v852 = 5;
      goto LABEL_1320;
    }
    v1255.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v1274 = &off_1E2DB17C0;
    v1275 = (uint64_t)&v1255;
    v1277 = &v1274;
    v1266[0] = (void *)MEMORY[0x1E0C809B0];
    v1266[1] = (void *)3321888768;
    *(_QWORD *)&v1267 = ___Z31surround_kernel_with_transposesIN8Espresso23generic_split_nd_kernelELi2EEvPNS0_3netEPNS0_17ANECompilerEngine7contextENS0_18transpose_params_tES7_NSt3__18functionIFbRNS0_18single_match_stateIT_EEEEE_block_invoke;
    *((_QWORD *)&v1267 + 1) = &__block_descriptor_120_ea8_48c90_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_23generic_split_nd_kernelEEEEEE_e9_v16__0_v8l;
    v1268[0] = v1167;
    v1268[1] = a2;
    v853 = &v1268[2];
    v1269[1] = &v1268[2];
    std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::__clone((uint64_t)&v1274, &v1268[2]);
    v1270 = xmmword_191A93620;
    *(_OWORD *)((char *)v1271 + 4) = xmmword_191A93620;
    LODWORD(v1271[0]) = 4;
    HIDWORD(v1271[2]) = 4;
    v854 = v1266;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v1240, a2);
    v1288 = 0u;
    memset(v1289, 0, 28);
    v1287 = 0u;
    v1290 = a2;
    v855 = *((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 5) != v855)
    {
      v856 = 0;
      do
      {
        *(_DWORD *)&v1289[24] = v856;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1288, *(_QWORD *)(v855 + 16 * v856), *(_QWORD *)(v855 + 16 * v856 + 8));
        v857 = v1288;
        v858 = *(void **)(v1288 + 64);
        if (v858
        {
          v859 = *(_QWORD *)(v857 + 72);
          if (v859)
          {
            v860 = (unint64_t *)(v859 + 8);
            do
              v861 = __ldxr(v860);
            while (__stxr(v861 + 1, v860));
          }
        }
        else
        {
          v859 = 0;
        }
        v862 = (std::__shared_weak_count *)v1287.i64[1];
        v1287.i64[0] = (uint64_t)v858;
        v1287.i64[1] = v859;
        if (v862)
        {
          v863 = (unint64_t *)&v862->__shared_owners_;
          do
            v864 = __ldaxr(v863);
          while (__stlxr(v864 - 1, v863));
          if (!v864)
          {
            ((void (*)(std::__shared_weak_count *))v862->__on_zero_shared)(v862);
            std::__shared_weak_count::__release_weak(v862);
          }
          v858 = (void *)v1287.i64[0];
        }
        if (v858)
          ((void (*)(_QWORD *, int64x2_t *))v1267)(v854, &v1287);
        ++v856;
        v855 = *((_QWORD *)a2 + 4);
      }
      while (v856 < (*((_QWORD *)a2 + 5) - v855) >> 4);
      v865 = *(_QWORD *)&v1289[8];
      v866 = *(_QWORD *)v1289;
      if (*(_QWORD *)v1289 != *(_QWORD *)&v1289[8])
      {
        v867 = 0;
        do
        {
          v868 = *(_DWORD *)v866 + v867;
          *(_DWORD *)v866 = v868;
          v869 = *(_QWORD *)(v866 + 8);
          if (v869)
          {
            *(_DWORD *)__p = v868;
            v870 = *(_QWORD *)(v866 + 16);
            *(_QWORD *)&__p[8] = v869;
            *(_QWORD *)&__p[16] = v870;
            if (v870)
            {
              v871 = (unint64_t *)(v870 + 8);
              do
                v872 = __ldxr(v871);
              while (__stxr(v872 + 1, v871));
            }
            *(_QWORD *)&__p[24] = 0;
            v1281 = 0;
            v1282 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(_QWORD *)(v866 + 24), *(_QWORD *)(v866 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v866 + 32) - *(_QWORD *)(v866 + 24)) >> 3));
            v1283 = 0;
            v1284 = 0;
            v1285 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1283, *(_QWORD *)(v866 + 48), *(_QWORD *)(v866 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v866 + 56) - *(_QWORD *)(v866 + 48)) >> 3));
            v1263 = 0;
            v1262 = 0;
            v1264 = 0;
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1262;
            __src.__r_.__value_.__s.__data_[8] = 0;
            v1262 = (uint64_t)operator new(0x48uLL);
            v1263 = (_QWORD *)v1262;
            v1264 = (_QWORD *)(v1262 + 72);
            v1263 = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1264, (uint64_t)__p, (uint64_t)&v1286, v1262);
            Espresso::net::insert_layers((uint64_t)a2, &v1262);
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1262;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1283;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
            v873 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v874 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v875 = __ldaxr(v874);
              while (__stlxr(v875 - 1, v874));
              if (!v875)
              {
                ((void (*)(std::__shared_weak_count *))v873->__on_zero_shared)(v873);
                std::__shared_weak_count::__release_weak(v873);
              }
            }
            v876 = 1;
          }
          else
          {
            Espresso::net::remove_layer(a2, v868);
            v876 = -1;
          }
          v867 += v876;
          v866 += 72;
        }
        while (v866 != v865);
        v853 = &v1268[2];
      }
    }
    *(_QWORD *)__p = v1289;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v877 = (std::__shared_weak_count *)*((_QWORD *)&v1288 + 1);
    if (*((_QWORD *)&v1288 + 1))
    {
      v878 = (unint64_t *)(*((_QWORD *)&v1288 + 1) + 8);
      do
        v879 = __ldaxr(v878);
      while (__stlxr(v879 - 1, v878));
      if (!v879)
      {
        ((void (*)(std::__shared_weak_count *))v877->__on_zero_shared)(v877);
        std::__shared_weak_count::__release_weak(v877);
      }
    }
    v880 = (std::__shared_weak_count *)v1287.i64[1];
    if (v1287.i64[1])
    {
      v881 = (unint64_t *)(v1287.i64[1] + 8);
      do
        v882 = __ldaxr(v881);
      while (__stlxr(v882 - 1, v881));
      if (!v882)
      {
        ((void (*)(std::__shared_weak_count *))v880->__on_zero_shared)(v880);
        std::__shared_weak_count::__release_weak(v880);
      }
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1244);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1241);
    v883 = (std::__shared_weak_count *)v1240.__r_.__value_.__l.__size_;
    if (v1240.__r_.__value_.__l.__size_)
    {
      v884 = (unint64_t *)(v1240.__r_.__value_.__l.__size_ + 8);
      do
        v885 = __ldaxr(v884);
      while (__stlxr(v885 - 1, v884));
      if (!v885)
      {
        ((void (*)(std::__shared_weak_count *))v883->__on_zero_shared)(v883);
        std::__shared_weak_count::__release_weak(v883);
      }
    }

    if (v1269[1] == &v1268[2])
    {
      v887 = 4;
LABEL_1373:
      (*((void (**)(void **))*v853 + v887))(v853);
    }
    else if (v1269[1])
    {
      v887 = 5;
      v853 = (void **)v1269[1];
      goto LABEL_1373;
    }
    v888 = v1277;
    if (v1277 == &v1274)
    {
      v889 = 4;
      v888 = &v1274;
LABEL_1378:
      (*((void (**)(void))*v888 + v889))();
    }
    else if (v1277)
    {
      v889 = 5;
      goto LABEL_1378;
    }
    if (Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(a2, v886))
    {
      if (!v1167
        || (***((unsigned int (****)(_QWORD))v1167 + 1))(*((_QWORD *)v1167 + 1)) != 10007
        && (***((unsigned int (****)(_QWORD))v1167 + 1))(*((_QWORD *)v1167 + 1)) != 10006
        || *((_BYTE *)v1167 + 123))
      {
        v1287.i64[0] = MEMORY[0x1E0C809B0];
        v1287.i64[1] = 3221225472;
        *(_QWORD *)&v1288 = ___ZN8Espresso17ANECompilerEngine7context30transform_large_separated_poolEPNS_3netEPS1__block_invoke;
        *((_QWORD *)&v1288 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
        *(_QWORD *)v1289 = v1167;
        *(_QWORD *)&v1289[8] = a2;
        Espresso::single_match_replace<Espresso::generic_pool_kernel>(a2, &v1287);
      }
      if (Espresso::ANECompilerEngine::is_mix_e(v1153, v890)
        && (!v1167
         || (***((unsigned int (****)(_QWORD))v1167 + 1))(*((_QWORD *)v1167 + 1)) != 10007
         && (***((unsigned int (****)(_QWORD))v1167 + 1))(*((_QWORD *)v1167 + 1)) != 10006
         || *((_BYTE *)v1167 + 123)))
      {
        v1274 = (void *)MEMORY[0x1E0C809B0];
        v1275 = 3221225472;
        v1276 = (void (*)(uint64_t, uint64_t))___ZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1__block_invoke;
        v1277 = (void **)&__block_descriptor_48_e9_v16__0_v8l;
        v1278 = v1167;
        v1279 = a2;
        v891 = &v1274;
        Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v1240, a2);
        v1288 = 0u;
        memset(v1289, 0, 28);
        v1287 = 0u;
        v1290 = a2;
        v892 = *((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 5) != v892)
        {
          v893 = 0;
          v1160 = v891;
          do
          {
            *(_DWORD *)&v1289[24] = v893;
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v1288, *(_QWORD *)(v892 + 16 * v893), *(_QWORD *)(v892 + 16 * v893 + 8));
            v894 = v1288;
            v895 = *(void **)(v1288 + 64);
            if (v895
            {
              v896 = *(_QWORD *)(v894 + 72);
              if (v896)
              {
                v897 = (unint64_t *)(v896 + 8);
                do
                  v898 = __ldxr(v897);
                while (__stxr(v898 + 1, v897));
              }
            }
            else
            {
              v896 = 0;
            }
            v899 = (std::__shared_weak_count *)v1287.i64[1];
            v1287.i64[0] = (uint64_t)v895;
            v1287.i64[1] = v896;
            if (v899)
            {
              v900 = (unint64_t *)&v899->__shared_owners_;
              do
                v901 = __ldaxr(v900);
              while (__stlxr(v901 - 1, v900));
              if (!v901)
              {
                ((void (*)(std::__shared_weak_count *))v899->__on_zero_shared)(v899);
                std::__shared_weak_count::__release_weak(v899);
              }
              v895 = (void *)v1287.i64[0];
            }
            if (v895)
              v1276((uint64_t)v891, (uint64_t)&v1287);
            ++v893;
            v892 = *((_QWORD *)a2 + 4);
          }
          while (v893 < (*((_QWORD *)a2 + 5) - v892) >> 4);
          v902 = *(_QWORD *)&v1289[8];
          v903 = *(_QWORD *)v1289;
          if (*(_QWORD *)v1289 != *(_QWORD *)&v1289[8])
          {
            v904 = 0;
            do
            {
              v905 = *(_DWORD *)v903 + v904;
              *(_DWORD *)v903 = v905;
              v906 = *(_QWORD *)(v903 + 8);
              if (v906)
              {
                *(_DWORD *)__p = v905;
                v907 = *(_QWORD *)(v903 + 16);
                *(_QWORD *)&__p[8] = v906;
                *(_QWORD *)&__p[16] = v907;
                if (v907)
                {
                  v908 = (unint64_t *)(v907 + 8);
                  do
                    v909 = __ldxr(v908);
                  while (__stxr(v909 + 1, v908));
                }
                *(_QWORD *)&__p[24] = 0;
                v1281 = 0;
                v1282 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(_QWORD *)(v903 + 24), *(_QWORD *)(v903 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v903 + 32) - *(_QWORD *)(v903 + 24)) >> 3));
                v1283 = 0;
                v1284 = 0;
                v1285 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1283, *(_QWORD *)(v903 + 48), *(_QWORD *)(v903 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v903 + 56) - *(_QWORD *)(v903 + 48)) >> 3));
                v1263 = 0;
                v1262 = 0;
                v1264 = 0;
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1262;
                __src.__r_.__value_.__s.__data_[8] = 0;
                v1262 = (uint64_t)operator new(0x48uLL);
                v1263 = (_QWORD *)v1262;
                v1264 = (_QWORD *)(v1262 + 72);
                v1263 = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v1264, (uint64_t)__p, (uint64_t)&v1286, v1262);
                Espresso::net::insert_layers((uint64_t)a2, &v1262);
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1262;
                std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1283;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
                v910 = *(std::__shared_weak_count **)&__p[16];
                if (*(_QWORD *)&__p[16])
                {
                  v911 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                  do
                    v912 = __ldaxr(v911);
                  while (__stlxr(v912 - 1, v911));
                  if (!v912)
                  {
                    ((void (*)(std::__shared_weak_count *))v910->__on_zero_shared)(v910);
                    std::__shared_weak_count::__release_weak(v910);
                  }
                }
                v913 = 1;
              }
              else
              {
                Espresso::net::remove_layer(a2, v905);
                v913 = -1;
              }
              v904 += v913;
              v903 += 72;
            }
            while (v903 != v902);
            v891 = v1160;
          }
        }
        *(_QWORD *)__p = v1289;
        std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v914 = (std::__shared_weak_count *)*((_QWORD *)&v1288 + 1);
        if (*((_QWORD *)&v1288 + 1))
        {
          v915 = (unint64_t *)(*((_QWORD *)&v1288 + 1) + 8);
          do
            v916 = __ldaxr(v915);
          while (__stlxr(v916 - 1, v915));
          if (!v916)
          {
            ((void (*)(std::__shared_weak_count *))v914->__on_zero_shared)(v914);
            std::__shared_weak_count::__release_weak(v914);
          }
        }
        v917 = (std::__shared_weak_count *)v1287.i64[1];
        if (v1287.i64[1])
        {
          v918 = (unint64_t *)(v1287.i64[1] + 8);
          do
            v919 = __ldaxr(v918);
          while (__stlxr(v919 - 1, v918));
          if (!v919)
          {
            ((void (*)(std::__shared_weak_count *))v917->__on_zero_shared)(v917);
            std::__shared_weak_count::__release_weak(v917);
          }
        }
        std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1244);
        std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v1241);
        v920 = (std::__shared_weak_count *)v1240.__r_.__value_.__l.__size_;
        if (v1240.__r_.__value_.__l.__size_)
        {
          v921 = (unint64_t *)(v1240.__r_.__value_.__l.__size_ + 8);
          do
            v922 = __ldaxr(v921);
          while (__stlxr(v922 - 1, v921));
          if (!v922)
          {
            ((void (*)(std::__shared_weak_count *))v920->__on_zero_shared)(v920);
            std::__shared_weak_count::__release_weak(v920);
          }
        }

      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v1287, "ane_compilation_remove_dequantization_goc_simple");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v1151, (uint64_t)&v1287, (uint64_t)__p, &v1168);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v1288) < 0)
    operator delete((void *)v1287.i64[0]);
  if ((SHIBYTE(v1168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) == 1)
    {
      v924 = &v1168;
      goto LABEL_1460;
    }
    goto LABEL_1791;
  }
  if (v1168.__r_.__value_.__l.__size_ == 1)
  {
    v924 = (std::string *)v1168.__r_.__value_.__r.__words[0];
LABEL_1460:
    if (v924->__r_.__value_.__s.__data_[0] == 49)
    {
      Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v1151);
      v1143 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
      v1265 = 0;
      v925 = *((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 5) == v925)
      {
LABEL_1790:

        goto LABEL_1791;
      }
      v926 = 0;
      while (2)
      {
        v1287.i64[0] = (uint64_t)&v1265;
        v927 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1152, &v1265, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1287);
        v1276 = 0;
        v1274 = 0;
        v1275 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1274, v927[3], v927[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v927[4] - v927[3]) >> 3));
        v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1265;
        v928 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v1166, &v1265, (uint64_t)&std::piecewise_construct, (uint64_t **)&v1240);
        v1264 = 0;
        v1262 = 0;
        v1263 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1262, v928[3], v928[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v928[4] - v928[3]) >> 3));
        v929 = v1274;
        std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v1260, *(_QWORD *)a2, *((std::__shared_weak_count **)a2 + 1));
        if ((!v1167
           || *(Espresso::net **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1260 + 32) + 16 * v1265) + 64) + 8) == v1167)
          && v1275 - (_QWORD)v1274 == 24
          && (_QWORD *)v1262 != v1263)
        {
          v1240.__r_.__value_.__r.__words[0] = (std::string::size_type)v929;
          v930 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v1162, v929, (__int128 **)&v1240);
          v931 = *(_OWORD *)(v930 + 72);
          v1287 = *(int64x2_t *)(v930 + 56);
          v1288 = v931;
          v932 = (const void *)*((_QWORD *)v930 + 12);
          *(_OWORD *)v1289 = *((unint64_t *)v930 + 11);
          *(_QWORD *)&v1289[16] = 0;
          *(_QWORD *)&v1289[24] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v1289[8], v932, *((_QWORD *)v930 + 13), (uint64_t)(*((_QWORD *)v930 + 13) - (_QWORD)v932) >> 2);
          v933 = (const Espresso::net *)v1260;
          v934 = (std::__shared_weak_count *)v1261;
          v1259[0] = v1260;
          v1259[1] = v1261;
          if (v1261)
          {
            v935 = (unint64_t *)(v1261 + 8);
            do
              v936 = __ldxr(v935);
            while (__stxr(v936 + 1, v935));
          }
          *(int64x2_t *)__p = v1287;
          *(_OWORD *)&__p[16] = v1288;
          v1281 = *(_QWORD *)v1289;
          v1283 = 0;
          v1284 = 0;
          v1282 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v1282, *(const void **)&v1289[8], *(uint64_t *)&v1289[16], (uint64_t)(*(_QWORD *)&v1289[16] - *(_QWORD *)&v1289[8]) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v1240, v933, (const Espresso::layer_shape *)__p, 1);
          if (v1282)
          {
            v1283 = v1282;
            operator delete(v1282);
          }
          if (v934)
          {
            v937 = (unint64_t *)&v934->__shared_owners_;
            do
              v938 = __ldaxr(v937);
            while (__stlxr(v938 - 1, v937));
            if (!v938)
            {
              ((void (*)(std::__shared_weak_count *))v934->__on_zero_shared)(v934);
              std::__shared_weak_count::__release_weak(v934);
            }
          }
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v929;
          v939 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v929, (uint64_t)&std::piecewise_construct, (__int128 **)&__src);
          v940 = *((_DWORD *)v939 + 16);
          v941 = *((float *)v939 + 14);
          __src.__r_.__value_.__r.__words[0] = v1262;
          v942 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, (_QWORD *)v1262, (uint64_t)&std::piecewise_construct, (__int128 **)&__src)+ 14);
          __src.__r_.__value_.__r.__words[0] = v1262;
          v943 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, (_QWORD *)v1262, (uint64_t)&std::piecewise_construct, (__int128 **)&__src);
          v1161 = (uint64_t *)(v925 + 16 * v926);
          v944 = (_QWORD *)v1262;
          v945 = v1263;
          if ((_QWORD *)v1262 == v1263)
          {
            LOBYTE(v946) = 0;
            v947 = 0;
            v948 = 0;
            goto LABEL_1532;
          }
          v946 = 0;
          v947 = 0;
          v948 = 0;
          v949 = *((_DWORD *)v943 + 16);
          while (2)
          {
            v950 = v947;
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v944;
            v951 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v944, (uint64_t)&std::piecewise_construct, (__int128 **)&__src);
            v952 = *((_DWORD *)v951 + 16);
            if (v952 < 2 && ((v953 = 1, v940 == 2) || v940 == 4))
            {
LABEL_1490:
              v947 = 1;
              v946 = v953;
              if (v949 != 2 && v949 != 4)
                goto LABEL_1492;
            }
            else
            {
              if (v940 <= 1 && (v952 != 2 ? (v954 = v952 == 4) : (v954 = 1), v954))
              {
                v946 = 1;
              }
              else
              {
                v953 = v946;
                if (v952 <= 1)
                  goto LABEL_1490;
              }
LABEL_1492:
              if (v952 == 4 || v952 == 2)
                v956 = 1;
              else
                v956 = v950;
              if (v949 <= 1)
                v947 = v956;
              else
                v947 = v950;
            }
            v948 |= v942 != *((float *)v951 + 14);
            v944 += 3;
            if (v944 != v945)
              continue;
            break;
          }
          v957 = (_QWORD *)v1262;
          for (j = v1263; v957 != j; v957 += 3)
          {
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v957;
            if (*((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v957, (uint64_t)&std::piecewise_construct, (__int128 **)&__src)+ 14) == 1.0)
            {
              v959 = (_QWORD *)*v1161;
              v960 = (_QWORD *)(*v1161 + 40);
              v961 = *(char *)(*v1161 + 63);
              if (v961 < 0)
              {
                if (v959[6] != 16)
                  goto LABEL_1513;
                v960 = (_QWORD *)*v960;
              }
              else if (v961 != 16)
              {
                goto LABEL_1513;
              }
              v963 = (_QWORD *)*v960;
              v962 = v960[1];
              if (v963 != (_QWORD *)0x5F747865746E6F63 || v962 != 0x726566736E617274)
              {
LABEL_1513:
                v965 = (const void *)v959[8];
                v966 = (std::__shared_weak_count *)v959[9];
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v965;
                __src.__r_.__value_.__l.__size_ = (std::string::size_type)v966;
                if (v966)
                {
                  v967 = (unint64_t *)&v966->__shared_owners_;
                  do
                    v968 = __ldxr(v967);
                  while (__stxr(v968 + 1, v967));
                }
                v1255.__r_.__value_.__r.__words[0] = (std::string::size_type)v969;
                v1255.__r_.__value_.__l.__size_ = (std::string::size_type)v966;
                if (v966)
                {
                  v970 = (unint64_t *)&v966->__shared_owners_;
                  do
                    v971 = __ldxr(v970);
                  while (__stxr(v971 + 1, v970));
                }
                v972 = (*(uint64_t (**)(void *))(*(_QWORD *)v969 + 104))(v969);
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v972, (uint64_t)v957, (uint64_t)v957);
                if (v966)
                {
                  v973 = (unint64_t *)&v966->__shared_owners_;
                  do
                    v974 = __ldaxr(v973);
                  while (__stlxr(v974 - 1, v973));
                  if (!v974)
                  {
                    ((void (*)(std::__shared_weak_count *))v966->__on_zero_shared)(v966);
                    std::__shared_weak_count::__release_weak(v966);
                  }
                }
                v975 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
                if (__src.__r_.__value_.__l.__size_)
                {
                  v976 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
                  do
                    v977 = __ldaxr(v976);
                  while (__stlxr(v977 - 1, v976));
                  if (!v977)
                  {
                    ((void (*)(std::__shared_weak_count *))v975->__on_zero_shared)(v975);
                    std::__shared_weak_count::__release_weak(v975);
                  }
                }
              }
            }
          }
LABEL_1532:
          v978 = *v1161;
          v979 = *(const void **)(*v1161 + 64);
          if (!v979
          {
            v982 = 0;
            v1258 = 0;
            v1257 = 0;
LABEL_1547:
            v990 = 0;
            goto LABEL_1548;
          }
          v981 = v980;
          v982 = *(std::__shared_weak_count **)(v978 + 72);
          v1257 = (unint64_t)v980;
          v1258 = v982;
          if (v982)
          {
            v983 = (unint64_t *)&v982->__shared_owners_;
            do
              v984 = __ldxr(v983);
            while (__stxr(v984 + 1, v983));
          }
          v986 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v980 + 320))(v980);
          if (v986 != 33 && v986 != 0)
            goto LABEL_1547;
          if ((Espresso::ANECompilerEngine::prefer_ne(v1143, v985) & 1) != 0)
            goto LABEL_1547;
          v988 = v1262;
          if ((_QWORD *)((char *)v1263 - v1262) != (_QWORD *)48)
            goto LABEL_1547;
          if (*(char *)(v1262 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__src, *(const std::string::value_type **)v1262, *(_QWORD *)(v1262 + 8));
            v988 = v1262;
          }
          else
          {
            v989 = *(_OWORD *)v1262;
            __src.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1262 + 16);
            *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v989;
          }
          if (*(char *)(v988 + 47) < 0)
            std::string::__init_copy_ctor_external(&v1255, *(const std::string::value_type **)(v988 + 24), *(_QWORD *)(v988 + 32));
          else
            v1255 = *(std::string *)(v988 + 24);
          if (*((char *)v1274 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v1254, *(const std::string::value_type **)v1274, *((_QWORD *)v1274 + 1));
          }
          else
          {
            v1118 = *(_OWORD *)v1274;
            v1254.__r_.__value_.__r.__words[2] = *((_QWORD *)v1274 + 2);
            *(_OWORD *)&v1254.__r_.__value_.__l.__data_ = v1118;
          }
          *(_QWORD *)&v1247 = &__src;
          v1119 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, &__src, (uint64_t)&std::piecewise_construct, (__int128 **)&v1247)+ 14);
          *(_QWORD *)&v1247 = &v1255;
          v1120 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, &v1255, (uint64_t)&std::piecewise_construct, (__int128 **)&v1247)+ 14);
          *(_QWORD *)&v1247 = &v1254;
          v1121 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, &v1254, (uint64_t)&std::piecewise_construct, (__int128 **)&v1247)+ 14);
          *(_QWORD *)&v1247 = &__src;
          v1150 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, &__src, (uint64_t)&std::piecewise_construct, (__int128 **)&v1247)+ 16);
          *(_QWORD *)&v1247 = &v1255;
          v1122 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, &v1255, (uint64_t)&std::piecewise_construct, (__int128 **)&v1247)+ 16);
          *(_QWORD *)&v1247 = &v1254;
          if (*((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, &v1254, (uint64_t)&std::piecewise_construct, (__int128 **)&v1247)+ 16) < 2u)v1121 = 1.0;
          if (v1150 < 2)
            v1119 = 1.0;
          if (v1122 < 2)
            v1120 = 1.0;
          v1123 = (*(uint64_t (**)(void *))(*(_QWORD *)v981 + 344))(v981);
          v1124 = v1123;
          v1125 = *(unsigned __int8 *)(v1123 + 53);
          if (*(_BYTE *)(v1123 + 53))
          {
            v990 = 0;
          }
          else
          {
            *(_BYTE *)(v1123 + 53) = 1;
            *(float *)(v1123 + 56) = v1120 / v1119;
            *(float *)(v1123 + 60) = v1121 / v1120;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v1123, (uint64_t)&__src, (uint64_t)&__src);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v1124, (uint64_t)&v1255, (uint64_t)&v1255);
            *(_BYTE *)(v1124 + 40) = 1;
            v990 = 4;
          }
          if (SHIBYTE(v1254.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1254.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1255.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1255.__r_.__value_.__l.__data_);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__src.__r_.__value_.__l.__data_);
          if (v1125)
            goto LABEL_1547;
LABEL_1548:
          if (v982)
          {
            v991 = (unint64_t *)&v982->__shared_owners_;
            do
              v992 = __ldaxr(v991);
            while (__stlxr(v992 - 1, v991));
            if (!v992)
            {
              ((void (*)(std::__shared_weak_count *))v982->__on_zero_shared)(v982);
              std::__shared_weak_count::__release_weak(v982);
            }
          }
          if (((v990 == 0) & v946) == 1)
          {
            v993 = *v1161;
            v994 = *(const void **)(*v1161 + 64);
            if (!v994
            {
              v996 = 0;
              v1144 = 0;
              *(_OWORD *)&__src.__r_.__value_.__l.__data_ = 0uLL;
LABEL_1567:
              v1001 = 1;
              if (v996)
                goto LABEL_1572;
              goto LABEL_1576;
            }
            v996 = *(std::__shared_weak_count **)(v993 + 72);
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v995;
            __src.__r_.__value_.__l.__size_ = (std::string::size_type)v996;
            if (v996)
            {
              v997 = (unint64_t *)&v996->__shared_owners_;
              do
                v998 = __ldxr(v997);
              while (__stxr(v998 + 1, v997));
            }
            v999 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v995 + 320))(v995);
            if (v999 != 33 && v999 != 0)
            {
              v1144 = 0;
              goto LABEL_1570;
            }
            if (((v948 | v947) & 1) != 0)
            {
              v1144 = 0;
              goto LABEL_1571;
            }
            v1144 = 1;
LABEL_1570:
            if (((v999 == 1) & v947) == 0)
              goto LABEL_1567;
LABEL_1571:
            v1001 = 0;
            if (v996)
            {
LABEL_1572:
              v1002 = (unint64_t *)&v996->__shared_owners_;
              do
                v1003 = __ldaxr(v1002);
              while (__stlxr(v1003 - 1, v1002));
              if (!v1003)
              {
                ((void (*)(std::__shared_weak_count *))v996->__on_zero_shared)(v996);
                std::__shared_weak_count::__release_weak(v996);
              }
            }
LABEL_1576:
            if (v1001)
            {
              v1004 = *v1161;
              v1005 = *(const void **)(*v1161 + 64);
              if (!v1005
              {
                v1006 = 0;
LABEL_1585:
                v1009 = 1;
                goto LABEL_1586;
              }
              v1006 = *(std::__shared_weak_count **)(v1004 + 72);
              if (v1006)
              {
                v1007 = (unint64_t *)&v1006->__shared_owners_;
                do
                  v1008 = __ldxr(v1007);
                while (__stxr(v1008 + 1, v1007));
              }
              v1144 = 1;
              if (((v948 | v947) & 1) == 0)
                goto LABEL_1585;
              v1009 = 0;
LABEL_1586:
              if (v1006)
              {
                v1010 = (unint64_t *)&v1006->__shared_owners_;
                do
                  v1011 = __ldaxr(v1010);
                while (__stlxr(v1011 - 1, v1010));
                if (!v1011)
                {
                  ((void (*)(std::__shared_weak_count *))v1006->__on_zero_shared)(v1006);
                  std::__shared_weak_count::__release_weak(v1006);
                }
              }
              if (v1009)
              {
                v1012 = *(const void **)(*v1161 + 64);
                v1013 = *(_QWORD *)(*v1161 + 72);
                v1254.__r_.__value_.__r.__words[0] = (std::string::size_type)v1012;
                v1254.__r_.__value_.__l.__size_ = v1013;
                if (v1013)
                {
                  v1014 = (unint64_t *)(v1013 + 8);
                  do
                    v1015 = __ldxr(v1014);
                  while (__stxr(v1015 + 1, v1014));
                }
                if (v1012
                {
                  v1017 = v1016;
                  v1257 = (unint64_t)v1016;
                  v1258 = (std::__shared_weak_count *)v1013;
                  if (v1013)
                  {
                    v1018 = (unint64_t *)(v1013 + 8);
                    do
                      v1019 = __ldxr(v1018);
                    while (__stxr(v1019 + 1, v1018));
                  }
                }
                else
                {
                  v1017 = 0;
                  v1258 = 0;
                  v1257 = 0;
                }
                v1020 = (_QWORD *)v1262;
                v1149 = v1263;
                if ((_QWORD *)v1262 != v1263)
                {
                  v1021 = 1;
                  while (1)
                  {
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v1020;
                    v1022 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v1020, (uint64_t)&std::piecewise_construct, (__int128 **)&__src);
                    v1023 = *((float *)v1022 + 14);
                    v1024 = *((_DWORD *)v1022 + 16);
                    v1025 = *v1161;
                    v1026 = *(const void **)(*v1161 + 64);
                    if (v1026)
                    {
                      {
                        v1027 = *(std::__shared_weak_count **)(v1025 + 72);
                        if (!v1027)
                          goto LABEL_1624;
                        v1028 = (unint64_t *)&v1027->__shared_owners_;
                        do
                          v1029 = __ldxr(v1028);
                        while (__stxr(v1029 + 1, v1028));
                        do
                          v1030 = __ldaxr(v1028);
                        while (__stlxr(v1030 - 1, v1028));
LABEL_1622:
                        if (!v1030)
                        {
                          ((void (*)(std::__shared_weak_count *))v1027->__on_zero_shared)(v1027);
                          std::__shared_weak_count::__release_weak(v1027);
                        }
                        goto LABEL_1624;
                      }
                      {
                        v1027 = *(std::__shared_weak_count **)(v1025 + 72);
                        if (!v1027)
                          goto LABEL_1624;
                        v1031 = (unint64_t *)&v1027->__shared_owners_;
                        do
                          v1032 = __ldxr(v1031);
                        while (__stxr(v1032 + 1, v1031));
                        do
                          v1030 = __ldaxr(v1031);
                        while (__stlxr(v1030 - 1, v1031));
                        goto LABEL_1622;
                      }
                      {
                        v1027 = *(std::__shared_weak_count **)(v1025 + 72);
                        if (v1027)
                        {
                          v1033 = (unint64_t *)&v1027->__shared_owners_;
                          do
                            v1034 = __ldxr(v1033);
                          while (__stxr(v1034 + 1, v1033));
                          do
                            v1030 = __ldaxr(v1033);
                          while (__stlxr(v1030 - 1, v1033));
                          goto LABEL_1622;
                        }
LABEL_1624:
                        v1035 = v1257;
                        if (!*(_QWORD *)(v1257 + 64))
                        {
                          v1036 = SHIDWORD(v1240.__r_.__value_.__r.__words[0]);
                          *(_QWORD *)v1252 = v1260;
                          v1253 = (std::__shared_weak_count *)v1261;
                          if (v1261)
                          {
                            v1037 = (unint64_t *)(v1261 + 8);
                            do
                              v1038 = __ldxr(v1037);
                            while (__stxr(v1038 + 1, v1037));
                          }
                          v1039 = v1254.__r_.__value_.__r.__words[0];
                          std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
                          v1040 = (*(uint64_t (**)(unint64_t, int *, std::string::size_type, std::string *))(*(_QWORD *)v1035 + 88))(v1035, v1252, v1039, &__src);
                          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__src.__r_.__value_.__l.__data_);
                          v1041 = v1253;
                          if (v1253)
                          {
                            v1042 = (unint64_t *)&v1253->__shared_owners_;
                            do
                              v1043 = __ldaxr(v1042);
                            while (__stlxr(v1043 - 1, v1042));
                            if (!v1043)
                            {
                              ((void (*)(std::__shared_weak_count *))v1041->__on_zero_shared)(v1041);
                              std::__shared_weak_count::__release_weak(v1041);
                            }
                          }
                          if (v1040 < 0)
                          {
                            v1070 = v1257;
                            v1248 = v1260;
                            v1249 = (std::__shared_weak_count *)v1261;
                            if (v1261)
                            {
                              v1071 = (unint64_t *)(v1261 + 8);
                              do
                                v1072 = __ldxr(v1071);
                              while (__stxr(v1072 + 1, v1071));
                            }
                            v1073 = v1254.__r_.__value_.__r.__words[0];
                            std::string::basic_string[abi:ne180100]<0>(&__src, "per_ch_qscale");
                            v1074 = (*(uint64_t (**)(unint64_t, unint64_t *, std::string::size_type, std::string *))(*(_QWORD *)v1070 + 88))(v1070, &v1248, v1073, &__src);
                            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__src.__r_.__value_.__l.__data_);
                            v1075 = v1249;
                            if (v1249)
                            {
                              v1076 = (unint64_t *)&v1249->__shared_owners_;
                              do
                                v1077 = __ldaxr(v1076);
                              while (__stlxr(v1077 - 1, v1076));
                              if (!v1077)
                              {
                                ((void (*)(std::__shared_weak_count *))v1075->__on_zero_shared)(v1075);
                                std::__shared_weak_count::__release_weak(v1075);
                              }
                            }
                            if (v1074 < 1)
                            {
                              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__src, 1, 1, 1, 1);
                              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v1257 + 64, (__int128 *)&__src);
                              v1105 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
                              if (__src.__r_.__value_.__l.__size_)
                              {
                                v1106 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
                                do
                                  v1107 = __ldaxr(v1106);
                                while (__stlxr(v1107 - 1, v1106));
                                if (!v1107)
                                {
                                  ((void (*)(std::__shared_weak_count *))v1105->__on_zero_shared)(v1105);
                                  std::__shared_weak_count::__release_weak(v1105);
                                }
                              }
                              **(float **)(*(_QWORD *)(v1257 + 64) + 16) = v941 / v1023;
                            }
                            else
                            {
                              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__src, v1036, 1, 1, 1);
                              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v1257 + 64, (__int128 *)&__src);
                              v1078 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
                              if (__src.__r_.__value_.__l.__size_)
                              {
                                v1079 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
                                do
                                  v1080 = __ldaxr(v1079);
                                while (__stlxr(v1080 - 1, v1079));
                                if (!v1080)
                                {
                                  ((void (*)(std::__shared_weak_count *))v1078->__on_zero_shared)(v1078);
                                  std::__shared_weak_count::__release_weak(v1078);
                                }
                              }
                              v1247 = 0uLL;
                              v1081 = v1257;
                              v1245 = v1260;
                              v1246 = (std::__shared_weak_count *)v1261;
                              if (v1261)
                              {
                                v1082 = (unint64_t *)(v1261 + 8);
                                do
                                  v1083 = __ldxr(v1082);
                                while (__stxr(v1083 + 1, v1082));
                              }
                              v1084 = v1254.__r_.__value_.__r.__words[0];
                              std::string::basic_string[abi:ne180100]<0>(&v1255, "per_ch_qscale");
                              (*(void (**)(std::string *__return_ptr, unint64_t, unint64_t *, std::string::size_type, std::string *))(*(_QWORD *)v1081 + 120))(&__src, v1081, &v1245, v1084, &v1255);
                              if (SHIBYTE(v1255.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v1255.__r_.__value_.__l.__data_);
                              v1085 = v1246;
                              if (v1246)
                              {
                                v1086 = (unint64_t *)&v1246->__shared_owners_;
                                do
                                  v1087 = __ldaxr(v1086);
                                while (__stlxr(v1087 - 1, v1086));
                                if (!v1087)
                                {
                                  ((void (*)(std::__shared_weak_count *))v1085->__on_zero_shared)(v1085);
                                  std::__shared_weak_count::__release_weak(v1085);
                                }
                              }
                              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v1255, v1036, 1, 1, 1);
                              v1088 = *(_OWORD *)&v1255.__r_.__value_.__l.__data_;
                              *(_OWORD *)&v1255.__r_.__value_.__l.__data_ = 0uLL;
                              v1089 = (std::__shared_weak_count *)*((_QWORD *)&v1247 + 1);
                              v1247 = v1088;
                              if (v1089)
                              {
                                v1090 = (unint64_t *)&v1089->__shared_owners_;
                                do
                                  v1091 = __ldaxr(v1090);
                                while (__stlxr(v1091 - 1, v1090));
                                if (!v1091)
                                {
                                  ((void (*)(std::__shared_weak_count *))v1089->__on_zero_shared)(v1089);
                                  std::__shared_weak_count::__release_weak(v1089);
                                }
                              }
                              v1092 = (std::__shared_weak_count *)v1255.__r_.__value_.__l.__size_;
                              if (v1255.__r_.__value_.__l.__size_)
                              {
                                v1093 = (unint64_t *)(v1255.__r_.__value_.__l.__size_ + 8);
                                do
                                  v1094 = __ldaxr(v1093);
                                while (__stlxr(v1094 - 1, v1093));
                                if (!v1094)
                                {
                                  ((void (*)(std::__shared_weak_count *))v1092->__on_zero_shared)(v1092);
                                  std::__shared_weak_count::__release_weak(v1092);
                                }
                              }
                              v1095 = v1247;
                              memcpy(*(void **)(v1247 + 16), __src.__r_.__value_.__l.__data_, v1036);
                              if ((_DWORD)v1036)
                              {
                                v1096 = *(float **)(v1095 + 16);
                                v1097 = *(float **)(*(_QWORD *)(v1257 + 64) + 16);
                                do
                                {
                                  v1098 = *v1096++;
                                  *v1097++ = v941 / (float)(v1023 * v1098);
                                  --v1036;
                                }
                                while (v1036);
                              }
                              v1099 = (std::__shared_weak_count *)*((_QWORD *)&v1247 + 1);
                              if (*((_QWORD *)&v1247 + 1))
                              {
                                v1100 = (unint64_t *)(*((_QWORD *)&v1247 + 1) + 8);
                                do
                                  v1101 = __ldaxr(v1100);
                                while (__stlxr(v1101 - 1, v1100));
                                if (!v1101)
                                {
                                  ((void (*)(std::__shared_weak_count *))v1099->__on_zero_shared)(v1099);
                                  std::__shared_weak_count::__release_weak(v1099);
                                }
                              }
                            }
                          }
                          else
                          {
                            v1044 = v1257;
                            v1250 = v1260;
                            v1251 = (std::__shared_weak_count *)v1261;
                            if (v1261)
                            {
                              v1045 = (unint64_t *)(v1261 + 8);
                              do
                                v1046 = __ldxr(v1045);
                              while (__stxr(v1046 + 1, v1045));
                            }
                            v1047 = v1254.__r_.__value_.__r.__words[0];
                            std::string::basic_string[abi:ne180100]<0>(&v1255, "post_scale");
                            (*(void (**)(std::string *__return_ptr, unint64_t, unint64_t *, std::string::size_type, std::string *))(*(_QWORD *)v1044 + 120))(&__src, v1044, &v1250, v1047, &v1255);
                            if (SHIBYTE(v1255.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v1255.__r_.__value_.__l.__data_);
                            v1048 = v1251;
                            if (v1251)
                            {
                              v1049 = (unint64_t *)&v1251->__shared_owners_;
                              do
                                v1050 = __ldaxr(v1049);
                              while (__stlxr(v1050 - 1, v1049));
                              if (!v1050)
                              {
                                ((void (*)(std::__shared_weak_count *))v1048->__on_zero_shared)(v1048);
                                std::__shared_weak_count::__release_weak(v1048);
                              }
                            }
                            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v1255, v1036, 1, 1, 1);
                            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v1257 + 64, (__int128 *)&v1255);
                            v1051 = (std::__shared_weak_count *)v1255.__r_.__value_.__l.__size_;
                            if (v1255.__r_.__value_.__l.__size_)
                            {
                              v1052 = (unint64_t *)(v1255.__r_.__value_.__l.__size_ + 8);
                              do
                                v1053 = __ldaxr(v1052);
                              while (__stlxr(v1053 - 1, v1052));
                              if (!v1053)
                              {
                                ((void (*)(std::__shared_weak_count *))v1051->__on_zero_shared)(v1051);
                                std::__shared_weak_count::__release_weak(v1051);
                              }
                            }
                            memcpy(*(void **)(*(_QWORD *)(v1257 + 64) + 16), __src.__r_.__value_.__l.__data_, v1036);
                          }
                        }
                        if (v1024 == 2 || v1024 == 4)
                        {
                          v1017 = (_QWORD *)v1257;
                          v1054 = *(_QWORD *)(v1257 + 64);
                          v1055 = *(int *)(v1054 + 8);
                          if ((_DWORD)v1055)
                          {
                            v1056 = *(float **)(v1054 + 16);
                            do
                            {
                              *v1056 = *v1056 / v941;
                              ++v1056;
                              --v1055;
                            }
                            while (v1055);
                          }
                        }
                        else
                        {
                          v1017 = (_QWORD *)v1257;
                          v1066 = *(_QWORD *)(v1257 + 64);
                          v1067 = *(int *)(v1066 + 8);
                          if ((_DWORD)v1067)
                          {
                            v1068 = *(float **)(v1066 + 16);
                            do
                            {
                              *v1068 = v1023 * *v1068;
                              ++v1068;
                              --v1067;
                            }
                            while (v1067);
                          }
                        }
                        goto LABEL_1685;
                      }
                    }
                    v1059 = v1017[8];
                    v1058 = (uint64_t)(v1017 + 8);
                    v1057 = v1059;
                    if ((_QWORD *)((char *)v1263 - v1262) == (_QWORD *)24)
                      break;
                    if (v1144)
                    {
                      if (!v1057)
                      {
                        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__src, 1, 1, 1, 1);
                        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v1058, (__int128 *)&__src);
                        v1060 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
                        if (__src.__r_.__value_.__l.__size_)
                        {
                          v1063 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
                          do
                            v1062 = __ldaxr(v1063);
                          while (__stlxr(v1062 - 1, v1063));
                          goto LABEL_1669;
                        }
                      }
LABEL_1671:
                      if (v1024 != 4 && v1024 != 2)
                        goto LABEL_1684;
                      v1064 = 1.0 / v1023;
                      v1017 = (_QWORD *)v1257;
                      v1065 = *(float **)(*(_QWORD *)(v1257 + 64) + 16);
                      goto LABEL_1674;
                    }
                    if (!v1057)
                    {
                      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__src, 1, 1, 1, 1);
                      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v1058, (__int128 *)&__src);
                      v1102 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
                      if (__src.__r_.__value_.__l.__size_)
                      {
                        v1103 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
                        do
                          v1104 = __ldaxr(v1103);
                        while (__stlxr(v1104 - 1, v1103));
                        if (!v1104)
                        {
                          ((void (*)(std::__shared_weak_count *))v1102->__on_zero_shared)(v1102);
                          std::__shared_weak_count::__release_weak(v1102);
                        }
                      }
                    }
                    if ((v1021 & 1) != 0)
                      **(_DWORD **)(*(_QWORD *)(v1257 + 64) + 16) = 1065353216;
                    if (v940 == 4 || v940 == 2)
                    {
LABEL_1684:
                      v1017 = (_QWORD *)v1257;
                      **(float **)(*(_QWORD *)(v1257 + 64) + 16) = v941;
                      goto LABEL_1685;
                    }
                    v1017 = (_QWORD *)v1257;
                    v1065 = *(float **)(*(_QWORD *)(v1257 + 64) + 16);
                    v1064 = *v1065 / v1023;
LABEL_1674:
                    *v1065 = v1064;
LABEL_1685:
                    *(_BYTE *)((*(uint64_t (**)(_QWORD *))(*v1017 + 104))(v1017) + 41) = 1;
                    v1069 = (*(uint64_t (**)(_QWORD *))(*v1017 + 104))(v1017);
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v1069, (uint64_t)v1020, (uint64_t)v1020);
                    v1021 = 0;
                    v1020 += 3;
                    if (v1020 == v1149)
                      goto LABEL_1743;
                  }
                  if (!v1057)
                  {
                    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__src, 1, 1, 1, 1);
                    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v1058, (__int128 *)&__src);
                    v1060 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
                    if (__src.__r_.__value_.__l.__size_)
                    {
                      v1061 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
                      do
                        v1062 = __ldaxr(v1061);
                      while (__stlxr(v1062 - 1, v1061));
LABEL_1669:
                      if (!v1062)
                      {
                        ((void (*)(std::__shared_weak_count *))v1060->__on_zero_shared)(v1060);
                        std::__shared_weak_count::__release_weak(v1060);
                      }
                    }
                  }
                  goto LABEL_1671;
                }
LABEL_1743:
                v1108 = v1017[8];
                if (v1108 && *(_DWORD *)(v1108 + 8) == 1 && **(float **)(v1108 + 16) == 1.0)
                  *(_BYTE *)((*(uint64_t (**)(_QWORD *))(*v1017 + 104))(v1017) + 40) = 1;
                v1109 = v1258;
                if (v1258)
                {
                  v1110 = (unint64_t *)&v1258->__shared_owners_;
                  do
                    v1111 = __ldaxr(v1110);
                  while (__stlxr(v1111 - 1, v1110));
                  if (!v1111)
                  {
                    ((void (*)(std::__shared_weak_count *))v1109->__on_zero_shared)(v1109);
                    std::__shared_weak_count::__release_weak(v1109);
                  }
                }
                v1112 = (std::__shared_weak_count *)v1254.__r_.__value_.__l.__size_;
                if (v1254.__r_.__value_.__l.__size_)
                {
                  v1113 = (unint64_t *)(v1254.__r_.__value_.__l.__size_ + 8);
                  do
                    v1114 = __ldaxr(v1113);
                  while (__stlxr(v1114 - 1, v1113));
                  if (!v1114)
                  {
                    ((void (*)(std::__shared_weak_count *))v1112->__on_zero_shared)(v1112);
                    std::__shared_weak_count::__release_weak(v1112);
                  }
                }
              }
            }
          }
          if (*(_QWORD *)&v1289[8])
          {
            *(_QWORD *)&v1289[16] = *(_QWORD *)&v1289[8];
            operator delete(*(void **)&v1289[8]);
          }
        }
        v1115 = (std::__shared_weak_count *)v1261;
        if (v1261)
        {
          v1116 = (unint64_t *)(v1261 + 8);
          do
            v1117 = __ldaxr(v1116);
          while (__stlxr(v1117 - 1, v1116));
          if (!v1117)
          {
            ((void (*)(std::__shared_weak_count *))v1115->__on_zero_shared)(v1115);
            std::__shared_weak_count::__release_weak(v1115);
          }
        }
        v1287.i64[0] = (uint64_t)&v1262;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
        v1287.i64[0] = (uint64_t)&v1274;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1287);
        v926 = v1265 + 1;
        v1265 = v926;
        v925 = *((_QWORD *)a2 + 4);
        if (v926 >= (*((_QWORD *)a2 + 5) - v925) >> 4)
          goto LABEL_1790;
        continue;
      }
    }
  }
LABEL_1791:
  if ((Espresso::ANECompilerEngine::is_mix(v1153, v923) & 1) == 0)
  {
    v1287.i64[0] = MEMORY[0x1E0C809B0];
    v1287.i64[1] = 3221225472;
    *(_QWORD *)&v1288 = ___ZN8Espresso17ANECompilerEngine7context20transform_l2_poolingEPNS_3netEPS1__block_invoke;
    *((_QWORD *)&v1288 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    *(_QWORD *)v1289 = v1167;
    *(_QWORD *)&v1289[8] = a2;
    Espresso::single_match_replace<Espresso::generic_pool_kernel>(a2, &v1287);
    v1127 = *((_QWORD *)a2 + 4);
    v1126 = *((_QWORD *)a2 + 5);
    if (v1126 != v1127)
    {
      v1128 = 0;
      do
      {
        v1129 = *(_QWORD *)(v1127 + 16 * v1128);
        v1130 = *(_QWORD **)(v1129 + 64);
        if (!v1167 || (Espresso::net *)v1130[1] == v1167)
        {
          if (v1131)
          {
            v1132 = v1131;
            v1133 = *(std::__shared_weak_count **)(v1129 + 72);
            v1287.i64[0] = (uint64_t)v1131;
            v1287.i64[1] = (uint64_t)v1133;
            if (v1133)
            {
              v1134 = (unint64_t *)&v1133->__shared_owners_;
              do
                v1135 = __ldxr(v1134);
              while (__stxr(v1135 + 1, v1134));
            }
            v1136 = (*(uint64_t (**)(_QWORD *))(*v1131 + 320))(v1131);
            if (!*(_BYTE *)((*(uint64_t (**)(_QWORD *))(*v1132 + 344))(v1132) + 40)
              && *(_DWORD *)v1136 <= 0x21u
              && ((1 << *(_DWORD *)v1136) & 0x200C00001) != 0)
            {
              v1140 = v1132[50];
              if (v1140)
              {
                if (*(_DWORD *)(v1140 + 8) == 1)
                {
                  *(float *)(v1136 + 8) = **(float **)(v1140 + 16) * *(float *)(v1136 + 8);
                  *(_BYTE *)((*(uint64_t (**)(_QWORD *))(*v1132 + 344))(v1132) + 40) = 1;
                }
              }
            }
            if (v1133)
            {
              v1137 = (unint64_t *)&v1133->__shared_owners_;
              do
                v1138 = __ldaxr(v1137);
              while (__stlxr(v1138 - 1, v1137));
              if (!v1138)
              {
                ((void (*)(std::__shared_weak_count *))v1133->__on_zero_shared)(v1133);
                std::__shared_weak_count::__release_weak(v1133);
              }
            }
          }
          v1127 = *((_QWORD *)a2 + 4);
          v1126 = *((_QWORD *)a2 + 5);
        }
        ++v1128;
      }
      while (v1128 < (v1126 - v1127) >> 4);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v1287, "experimental.ane.use_custom_activation_lut");
  std::string::basic_string[abi:ne180100]<0>(&v1240, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v1151, (uint64_t)&v1287, (uint64_t)&v1240, (std::string *)__p);
  if (SHIBYTE(v1240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1240.__r_.__value_.__l.__data_);
  if (SBYTE7(v1288) < 0)
    operator delete((void *)v1287.i64[0]);
  if ((__p[23] & 0x80000000) != 0)
  {
    if (*(_QWORD *)&__p[8] == 1)
    {
      v1142 = *(_BYTE **)__p;
      goto LABEL_1825;
    }
  }
  else if (__p[23] == 1)
  {
    v1142 = __p;
LABEL_1825:
    if (*v1142 == 49)
    {
      v1287.i64[0] = MEMORY[0x1E0C809B0];
      v1287.i64[1] = 3221225472;
      *(_QWORD *)&v1288 = ___ZN8Espresso17ANECompilerEngine7context32handle_quantized_activation_lutsEPNS_3netEPS1__block_invoke;
      *((_QWORD *)&v1288 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
      *(_QWORD *)v1289 = v1167;
      *(_QWORD *)&v1289[8] = a2;
      Espresso::single_match_replace<Espresso::generic_activation_kernel>(a2, &v1287);
    }
  }
  if ((Espresso::ANECompilerEngine::is_mix(v1153, v1141) & 1) == 0)
  {
    v1287.i64[0] = MEMORY[0x1E0C809B0];
    v1287.i64[1] = 3221225472;
    *(_QWORD *)&v1288 = ___ZN8Espresso17ANECompilerEngine7context33cross_correlation_use_anec_layoutEPNS_3netEPS1__block_invoke;
    *((_QWORD *)&v1288 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    *(_QWORD *)v1289 = v1167;
    *(_QWORD *)&v1289[8] = a2;
    Espresso::single_match_replace<Espresso::generic_convolution_kernel>(a2, &v1287);
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1168.__r_.__value_.__l.__data_);

}

void sub_190EBFD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;
  void *v69;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x268]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x500]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x330]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x530]);
  v69 = (void *)STACK[0x498];
  if (STACK[0x498])
  {
    STACK[0x4A0] = (unint64_t)v69;
    operator delete(v69);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v67 - 240);

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::elementwise_kernel::get_anec_lowering_hint(Espresso::ANECompilerEngine::elementwise_kernel *this)
{
  return (uint64_t)this + 552;
}

void Espresso::single_match_replace<Espresso::generic_fill_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_190EC1750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _BYTE v14[137];
  int v15;
  int v16;

  v16 = a4;
  memset(v14, 0, sizeof(v14));
  v15 = 2;
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190EC18E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::squeeze_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t i;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  std::string v35;
  std::string v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2);
    if (v40 < 0)
      operator delete(__p[0]);
    v6 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v36, "size_of_axes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 4);
    if (v40 < 0)
      operator delete(__p[0]);
    v9 = v38;
    if (!v38)
      goto LABEL_37;
    v10 = (unint64_t *)&v38->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v12 = v38;
    if (v38)
    {
      v13 = (unint64_t *)&v38->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v36, "size_of_axes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v9 = v38;
    if (!v38)
      goto LABEL_37;
    v15 = (unint64_t *)&v38->__shared_owners_;
    do
      v11 = __ldaxr(v15);
    while (__stlxr(v11 - 1, v15));
  }
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_37:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  for (i = 0; i != 32; ++i)
  {
    while (1)
    {
      if (a3 && i < *(int *)(a2 + 4))
      {
        std::to_string(&v35, i);
        v17 = std::string::insert(&v35, 0, "axes_");
        v36 = *v17;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
        (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 4 * i + 8);
        if (v40 < 0)
          operator delete(__p[0]);
        v18 = v38;
        if (v38)
        {
          v19 = (unint64_t *)&v38->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        goto LABEL_54;
      }
      if ((a3 & 1) == 0)
        break;
LABEL_54:
      if (++i == 32)
      {
        if (*(_BYTE *)(a2 + 136))
        {
          std::string::basic_string[abi:ne180100]<0>(&v36, "squeeze_all");
          Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
          (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 208))(v37, __p, a2 + 136);
          if (v40 < 0)
            operator delete(__p[0]);
          v31 = v38;
          if (v38)
          {
            v32 = (unint64_t *)&v38->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v36, "version");
        Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
        (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 140);
        if (v40 < 0)
          operator delete(__p[0]);
        v28 = v38;
        if (v38)
        {
          v34 = (unint64_t *)&v38->__shared_owners_;
          do
            v30 = __ldaxr(v34);
          while (__stlxr(v30 - 1, v34));
          goto LABEL_104;
        }
        goto LABEL_106;
      }
    }
    std::to_string(&v35, i);
    v21 = std::string::insert(&v35, 0, "axes_");
    v36 = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 4 * i + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v22 = v38;
    if (v38)
    {
      v23 = (unint64_t *)&v38->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "squeeze_all");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
    *(_BYTE *)(a2 + 136) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 88))(v37, __p);
  if (v40 < 0)
    operator delete(__p[0]);
  v25 = v38;
  if (v38)
  {
    v26 = (unint64_t *)&v38->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v36, "version");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v36, &v37);
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
    *(_DWORD *)(a2 + 140) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
  if (v40 < 0)
    operator delete(__p[0]);
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
LABEL_104:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_106:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_190EC2004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double ___ZN13EspressoLight37intermediate_buffer_sharing_singleton6sharedEv_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_DWORD *)(v0 + 96) = 1065353216;
  EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::ret = v0;
  return result;
}

__n128 Espresso::pool_kernel_cpu::pool_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 304) = xmmword_191A934F0;
  *(_OWORD *)(v5 + 320) = xmmword_191A93320;
  *(_DWORD *)(v5 + 336) = 2;
  *(_WORD *)(v5 + 340) = 1;
  *(_OWORD *)(v5 + 342) = 0u;
  *(_OWORD *)(v5 + 358) = 0u;
  *(_QWORD *)(v5 + 376) = 0;
  *(_QWORD *)(v5 + 384) = 0;
  *(_QWORD *)(v5 + 392) = 0x100000001;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_QWORD *)v5 = &off_1E2D68038;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  result = (__n128)a4[3];
  v9 = a4[4];
  v10 = a4[6];
  *(_OWORD *)(v5 + 384) = a4[5];
  *(_OWORD *)(v5 + 400) = v10;
  *(__n128 *)(v5 + 352) = result;
  *(_OWORD *)(v5 + 368) = v9;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 304) = xmmword_191A934F0;
  *(_OWORD *)(v5 + 320) = xmmword_191A93320;
  *(_DWORD *)(v5 + 336) = 2;
  *(_WORD *)(v5 + 340) = 1;
  *(_OWORD *)(v5 + 342) = 0u;
  *(_OWORD *)(v5 + 358) = 0u;
  *(_QWORD *)(v5 + 376) = 0;
  *(_QWORD *)(v5 + 384) = 0;
  *(_QWORD *)(v5 + 392) = 0x100000001;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_QWORD *)v5 = &off_1E2D68038;
  v6 = *a4;
  v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  result = (__n128)a4[3];
  v9 = a4[4];
  v10 = a4[6];
  *(_OWORD *)(v5 + 384) = a4[5];
  *(_OWORD *)(v5 + 400) = v10;
  *(__n128 *)(v5 + 352) = result;
  *(_OWORD *)(v5 + 368) = v9;
  return result;
}

uint64_t e5rt_tensor_desc_dtype_create(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E2DCD6E0;
  v7[1] = a1;
  v7[2] = a2 | (unint64_t)(a3 << 32);
  v8 = v7;
  v3 = E5RT::ExceptionSafeExecute((uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_190EC2250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8Espresso25EspressoReporterSingletonINS_27EventReporterImplementationEE11getInstanceEv_block_invoke()
{
  uint64_t result;
  uint64_t v1;

  result = operator new();
  v1 = result;
  if (Espresso::EventReporterImplementation::shared_event_pond_ptr)
  {
    Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::evt_reporter_instance = result;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    Espresso::EventReporterImplementation::shared_event_pond_ptr = (_UNKNOWN *)result;
    Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::evt_reporter_instance = v1;
  }
  return result;
}

void sub_190EC2310(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso25EspressoReporterSingletonINS_27EventReporterImplementationEE11getInstanceEv_block_invoke_0()
{
  uint64_t result;
  uint64_t v1;

  result = operator new();
  v1 = result;
  if (!Espresso::EventReporterImplementation::shared_event_pond_ptr)
  {
    result = operator new();
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    Espresso::EventReporterImplementation::shared_event_pond_ptr = (_UNKNOWN *)result;
  }
  Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::evt_reporter_instance = v1;
  return result;
}

void sub_190EC239C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_dtype_get_component_pack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCDAE0;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EC2458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_tensor_desc_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DCDC00;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a4;
  v8[4] = a3;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190EC2554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::ANERuntimeEngine::batch::~batch(Espresso::ANERuntimeEngine::batch *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D70398;
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 264));
  std::mutex::~mutex((std::mutex *)((char *)this + 200));
  std::__tree<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>>>::destroy(*((_QWORD **)this + 23));
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E2D85988;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  Espresso::abstract_batch::~abstract_batch(this);
}

{
  Espresso::ANERuntimeEngine::batch::~batch(this);
  JUMPOUT(0x19401CD90);
}

void std::__tree<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

_QWORD *E5RT::ExecutionStreamImpl::ExecuteStreamSync(E5RT::ExecutionStreamImpl *this)
{
  const void **v2;
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = (const void **)E5RT::ExecuteOptions::SharedDefaultOption(this);
  v6 = 0;
  E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730532>((uint64_t)this, v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_190EC26CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::ExecuteSync(E5RT::Ops::BaseEirInferenceOperation *this)
{
  E5RT::Ops::BaseEirInferenceOperation::Impl *InitializedImpl;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  InitializedImpl = (E5RT::Ops::BaseEirInferenceOperation::Impl *)E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl((const std::string *)this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::ExecuteSync(InitializedImpl);
  return kdebug_trace();
}

void sub_190EC2790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::ExecuteSync(E5RT::Ops::BaseEirInferenceOperation::Impl *this)
{
  uint64_t *i;
  uint64_t *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t InputPorts;
  uint64_t v12;
  void **v13;
  void **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t **j;
  void *exception;
  void *v21;
  void *v22[2];
  void *__p[2];
  int v24;
  _OWORD v25[2];
  __int128 *v26;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v25, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(&v26, 2, v25);
    E5RT::E5RTError::E5RTError(exception, v22, &v26);
  }
  if (E5RT::ExecutionStreamOperationInternal::HasDynamicInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this))
  {
    *(_OWORD *)v22 = 0u;
    *(_OWORD *)__p = 0u;
    v24 = 1065353216;
    for (i = *(uint64_t **)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                          + 16); i; i = (uint64_t *)*i)
    {
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], v25);
      v26 = (__int128 *)(i + 2);
      v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v22, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, &v26);
      v4 = v25[0];
      v25[0] = 0uLL;
      v5 = (std::__shared_weak_count *)v3[6];
      *(_OWORD *)(v3 + 5) = v4;
      if (!v5)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v25[0] + 1);
        if (*((_QWORD *)&v25[0] + 1))
        {
LABEL_11:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_10:
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v25[0] + 1);
        if (*((_QWORD *)&v25[0] + 1))
          goto LABEL_11;
      }
    }
    E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeEIRNetworkWithNewTensorDescriptors((E5RT::ExecutionStreamOperationInternal **)this, (uint64_t)v22);
    InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateBuffersInfo((char *)this, InputPorts);
    v12 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    E5RT::Ops::BaseEirInferenceOperation::Impl::BindBuffers(this, v12, 1);
    v13 = (void **)__p[0];
    if (__p[0])
    {
      do
      {
        while (1)
        {
          v14 = (void **)*v13;
          v15 = (std::__shared_weak_count *)v13[6];
          if (v15)
          {
            v16 = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          if (*((char *)v13 + 39) < 0)
            break;
          operator delete(v13);
          v13 = v14;
          if (!v14)
            goto LABEL_27;
        }
        operator delete(v13[2]);
        operator delete(v13);
        v13 = v14;
      }
      while (v14);
    }
LABEL_27:
    v18 = v22[0];
    v22[0] = 0;
    if (v18)
      operator delete(v18);
  }
  if (espresso_plan_execute_sync(*((const void **)this + 2)))
  {
    v21 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v25, "Unable to successfully execute plan.");
    E5RT::Status::Status(&v26, 11, v25);
    E5RT::E5RTError::E5RTError(v21, v22, &v26);
  }
  if (E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this))
  {
    for (j = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                           + 16); j; j = (uint64_t **)*j)
    {
      if (E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)j[5]))
        E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateDataDependentDynamicPort((uint64_t)this, (uint64_t)(j + 2), (void (***)(E5RT::IOPortPriv *__hidden))j[5]);
    }
  }
}

void sub_190EC2ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190EC2AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190EC2AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190EC2B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_190EC2B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  E5RT::Status::~Status((E5RT::Status *)(v25 - 40));
  if (a23 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v24 & 1) != 0)
      goto LABEL_8;
  }
  else if (v24)
  {
LABEL_8:
    __cxa_free_exception(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_plan_execute_sync(const void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    (*(void (**)(const void *))(*(_QWORD *)a1 + 24))(a1);
    v3 = 0;
  }
  else
  {
    v3 = 4294967290;
  }
  objc_autoreleasePoolPop(v2);
  return v3;
}

void EspressoLight::espresso_plan::execute_sync(EspressoLight::espresso_plan *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  void (***v6)(_BYTE *__return_ptr, _QWORD, uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  EspressoLight::espresso_plan *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t **v43;
  void *v44;
  void **v45;
  void *v46;
  uint64_t v47;
  void **v48;
  void *v49;
  void *v50;
  uint64_t *v51;
  uint64_t **v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  char *v56;
  void *v57;
  char *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  std::__shared_weak_count *size;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *end;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  int v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  size_t v83;
  void *v84;
  _BYTE *v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  BOOL v98;
  uint64_t v99;
  uint64_t **v100;
  void *v101;
  void **v102;
  void *v103;
  uint64_t v104;
  void **v105;
  void *v106;
  uint64_t *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  CVPixelBufferRef *v113;
  uint64_t v114;
  __CVBuffer *v115;
  int Width;
  int Height;
  int PlaneCount;
  void *BaseAddress;
  size_t BytesPerRow;
  size_t DataSize;
  int v122;
  _BYTE *v123;
  int *v124;
  _BYTE *v125;
  void *v126;
  _BYTE *v127;
  void *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void **v134;
  void *v135;
  void *v136;
  uint64_t v137;
  void **v138;
  void *v139;
  void *v140;
  _QWORD *v141;
  uint64_t v142;
  void (***v143)(uint64_t *__return_ptr, _QWORD);
  std::vector<int>::pointer v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::runtime_error *v160;
  std::runtime_error *v161;
  std::runtime_error *v162;
  std::runtime_error *v163;
  std::runtime_error *v164;
  std::runtime_error *v165;
  std::runtime_error *exception;
  std::string *v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  void *v171;
  uint64_t **v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  void *v179[2];
  char v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  void *v185;
  char v186;
  void *__p[2];
  char v188;
  int v189;
  _QWORD v190[9];
  void (***v191)(_BYTE *__return_ptr, _QWORD, uint64_t);
  std::__shared_weak_count *v192;
  _BYTE v193[20];
  int v194;
  _BYTE v195[56];
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  CVPixelBufferRef *v201;
  CVPixelBufferRef *v202;
  CVPixelBufferRef *v203;
  void *v204[2];
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  void *lpsrc;
  uint64_t v210;
  uint64_t (*v211)(uint64_t, uint64_t);
  void *v212;
  __int128 **v213;
  std::vector<int> *p_buf;
  __int128 *v215;
  __int128 **v216;
  uint64_t v217;
  char *v218;
  std::string v219;
  char v220;
  std::vector<int> buf;
  __n128 (*v222)(__n128 *, __n128 *);
  uint64_t (*v223)(uint64_t);
  char *v224;
  char *v225;
  std::__shared_weak_count *v226;
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 133);
  if (*(_DWORD *)(v1 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string((std::string *)v190, *(_DWORD *)(*((_QWORD *)this + 133) + 160));
    v167 = std::string::insert((std::string *)v190, 0, "Inconsistent phase of espresso_plan: ");
    v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
    *(_QWORD *)&v195[16] = *((_QWORD *)&v167->__r_.__value_.__l + 2);
    *(_OWORD *)v195 = v168;
    v167->__r_.__value_.__l.__size_ = 0;
    v167->__r_.__value_.__r.__words[2] = 0;
    v167->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v195);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -5;
  }
  v2 = *(_QWORD *)(v1 + 144);
  v3 = *(uint64_t **)(v1 + 24);
  v4 = *v3;
  v6 = *(void (****)(_BYTE *__return_ptr, _QWORD, uint64_t))(*v3 + 16);
  v5 = *(std::__shared_weak_count **)(*v3 + 24);
  v191 = v6;
  v192 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v3 = *(uint64_t **)(v1 + 24);
    v4 = *v3;
  }
  LOBYTE(v190[0]) = *(_BYTE *)(v4 + 1352);
  memset((char *)v190 + 4, 0, 68);
  if (LOBYTE(v190[0]))
  {
    v190[1] = v2;
    v190[2] = v4;
    v190[3] = 0;
    v190[4] = 0;
    v190[5] = v2;
    v190[6] = v4;
    v190[7] = 0;
    v190[8] = 0;
    HIDWORD(v190[0]) = 723714128;
    kdebug_trace();
    v3 = *(uint64_t **)(v1 + 24);
  }
  if (*(uint64_t **)(v1 + 32) != v3)
  {
    v9 = 0;
    do
    {
      v10 = *(_OWORD *)&v3[2 * v9];
      *(_OWORD *)v195 = v10;
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = v10;
      if (*(_BYTE *)(v10 + 180))
      {
        *(_BYTE *)(v10 + 180) = 0;
        Espresso::shape_network_recursive((Espresso *)v10, (Espresso::net *)(v10 + 184), 0, 0);
        *(_BYTE *)(v14 + 180) = 0;
      }
      if (v11)
      {
        v15 = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v2);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      ++v9;
      v3 = *(uint64_t **)(v1 + 24);
    }
    while (v9 < (uint64_t)(*(_QWORD *)(v1 + 32) - (_QWORD)v3) >> 4);
    v6 = v191;
  }
  (**v6)(v195, v6, v2);
  v17 = this;
  v18 = *(_QWORD *)v195;
  v19 = *((_QWORD *)this + 131);
  v20 = *((_QWORD *)this + 132);
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(v18 + 112);
  *(_QWORD *)(v18 + 104) = v19;
  *(_QWORD *)(v18 + 112) = v20;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  EspressoLight::espresso_plan::dispatch_task_on_compute_batch((uint64_t)this, v195, (uint64_t ***)(*((_QWORD *)this + 133) + 144));
  (*(void (**)(_QWORD))(**(_QWORD **)v195 + 16))(*(_QWORD *)v195);
  (*(void (**)(_QWORD))(**(_QWORD **)v195 + 24))(*(_QWORD *)v195);
  v27 = *(std::__shared_weak_count **)&v195[8];
  if (*(_QWORD *)&v195[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&v195[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if ((*((_BYTE *)this + 16) & 2) != 0)
    EspressoLight::espresso_plan::wipe_layers(*((EspressoLight::espresso_plan **)this + 133));
  v30 = *((_QWORD *)this + 133);
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 384);
    if (v31)
    {
      v189 = 0;
      v32 = *(_QWORD *)(v31 + 16);
      if (*(_QWORD *)(v31 + 24) != v32)
      {
        v33 = 0;
        v34 = 0;
        *(_QWORD *)&v26 = 136315138;
        v169 = v26;
        do
        {
          v35 = *(_QWORD *)(v32 + 8 * v34);
          v36 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(v30 + 144) + 184), v33, &v189);
          v37 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*((_QWORD *)v17 + 133) + 144) + 208), v33, &v189);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          Espresso::tracer::add_frame<espresso_buffer_t>(v35, v36 + 5, v37 + 5, (uint64_t *)__p);
          if (v188 < 0)
            operator delete(__p[0]);
          v38 = *((_QWORD *)v17 + 133);
          v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 384) + 16) + 8 * v33);
          v40 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(v38 + 144) + 16), v33, &v189);
          v41 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*((_QWORD *)v17 + 133) + 144) + 40), v33, &v189);
          std::string::basic_string[abi:ne180100]<0>(&v185, "");
          std::string::basic_string[abi:ne180100]<0>(v195, "inputs");
          Espresso::tracer::set_attachment<std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>(v39, (uint64_t *)v195, v40 + 5);
          if ((v195[23] & 0x80000000) != 0)
            operator delete(*(void **)v195);
          std::string::basic_string[abi:ne180100]<0>(&buf, "outputs");
          Espresso::tracer::set_attachment<std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>(v39, (uint64_t *)&buf, v41 + 5);
          if (SHIBYTE(buf.__end_cap_.__value_) < 0)
            operator delete(buf.__begin_);
          std::string::basic_string[abi:ne180100]<0>(v204, "ground_truths");
          v210 = 0;
          v211 = 0;
          lpsrc = &v210;
          Espresso::tracer::set_attachment<std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>(v39, (uint64_t *)v204, &lpsrc);
          std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy((_QWORD *)v210);
          if (SBYTE7(v205) < 0)
            operator delete(v204[0]);
          if (v186 < 0)
            operator delete(v185);
          v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 133) + 384) + 16) + 8 * v33);
          std::string::basic_string[abi:ne180100]<0>(v183, "inputs");
          v43 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*((_QWORD *)v17 + 133) + 144) + 112), v33, &v189);
          objc_msgSend(*(id *)(v42 + 80), "lastObject", v169);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v44)
          {
            v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v160, "Invalid state: No frames exists in the trace");
            __cxa_throw(v160, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (v184 >= 0)
            v45 = v183;
          else
            v45 = (void **)v183[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "objectForKeyedSubscript:", v46);
          v174 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v174)
          {
            v47 = objc_opt_new();
            if (v184 >= 0)
              v48 = v183;
            else
              v48 = (void **)v183[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v48);
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "setObject:forKeyedSubscript:", v47, v49);

            v174 = (void *)v47;
          }
          v50 = v44;
          if (!*(_QWORD *)v42)
          {
            v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v161, "Invalid state: network not added");
            __cxa_throw(v161, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v176 = (void *)objc_opt_new();
          v51 = v43[5];
          v52 = v43 + 6;
          if (v51 != (uint64_t *)(v43 + 6))
          {
            do
            {
              if (*((char *)v51 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v195, (const std::string::value_type *)v51[4], v51[5]);
              }
              else
              {
                *(_OWORD *)v195 = *((_OWORD *)v51 + 2);
                *(_QWORD *)&v195[16] = v51[6];
              }
              v53 = *(_OWORD *)(v51 + 13);
              v196 = *(_OWORD *)(v51 + 11);
              v197 = v53;
              v198 = *(_OWORD *)(v51 + 15);
              LODWORD(v199) = *((_DWORD *)v51 + 34);
              v54 = *(_OWORD *)(v51 + 9);
              *(_OWORD *)&v195[24] = *(_OWORD *)(v51 + 7);
              *(_OWORD *)&v195[40] = v54;
              v200 = 0uLL;
              *((_QWORD *)&v199 + 1) = 0;
              std::vector<vImage_Buffer>::__init_with_size[abi:ne180100]<vImage_Buffer*,vImage_Buffer*>((_QWORD *)&v199 + 1, (const void *)v51[18], v51[19], (v51[19] - v51[18]) >> 5);
              LODWORD(buf.__begin_) = 0;
              Espresso::create_context((int *)&buf, v204);
              v55 = (char *)operator new(0x118uLL);
              *((_QWORD *)v55 + 1) = 0;
              *((_QWORD *)v55 + 2) = 0;
              *(_QWORD *)v55 = &off_1E2DC1868;
              *((_QWORD *)v55 + 3) = off_1E2D8F108;
              v56 = v55 + 24;
              *((_DWORD *)v55 + 13) = -1;
              *(_OWORD *)(v55 + 56) = 0u;
              *(_OWORD *)(v55 + 72) = 0u;
              v57 = v204[0];
              v58 = (char *)v204[1];
              *((_QWORD *)v55 + 11) = 0;
              *((_QWORD *)v55 + 12) = v57;
              *((_QWORD *)v55 + 13) = v58;
              if (v58)
              {
                v59 = (unint64_t *)(v58 + 8);
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 1, v59));
              }
              *((_QWORD *)v55 + 14) = 0;
              *((_QWORD *)v55 + 15) = 0;
              *((_DWORD *)v55 + 32) = 0;
              *((_DWORD *)v55 + 34) = 1065353216;
              *(_QWORD *)(v55 + 140) = 0xFFFFFFFF00000000;
              *((_DWORD *)v55 + 37) = 1;
              *((_QWORD *)v55 + 4) = 0;
              *((_QWORD *)v55 + 5) = 0;
              *((_DWORD *)v55 + 12) = 0;
              *(_OWORD *)(v55 + 152) = 0u;
              *(_OWORD *)(v55 + 168) = 0u;
              *((_QWORD *)v55 + 3) = &off_1E2DA6B80;
              *((_QWORD *)v55 + 34) = 0;
              *(_OWORD *)(v55 + 184) = 0u;
              *(_OWORD *)(v55 + 200) = 0u;
              *(_OWORD *)(v55 + 216) = 0u;
              *(_OWORD *)(v55 + 232) = 0u;
              *(_OWORD *)(v55 + 248) = 0u;
              *((_DWORD *)v55 + 66) = 0;
              lpsrc = v55 + 24;
              v210 = (uint64_t)v55;
              v61 = *(_QWORD *)v42 + 136;
              v215 = (__int128 *)v195;
              v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v61, v195, &v215);
              Espresso::abstract_blob_container::shape((char *)&buf, *((_QWORD *)v62 + 5));
              *(_OWORD *)&v219.__r_.__value_.__l.__data_ = 0uLL;
              (*(void (**)(char *, std::vector<int> *, std::string *))(*(_QWORD *)v56 + 16))(v56, &buf, &v219);
              size = (std::__shared_weak_count *)v219.__r_.__value_.__l.__size_;
              if (v219.__r_.__value_.__l.__size_)
              {
                v65 = (unint64_t *)(v219.__r_.__value_.__l.__size_ + 8);
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
              if (v224)
              {
                v225 = v224;
                operator delete(v224);
              }
              buf.__begin_ = 0;
              buf.__end_ = 0;
              Espresso::fill_blob_with_images_batch_safe_v2((uint64_t)&buf, (int *)lpsrc, (const char ***)&v199 + 1, v199, v63, (__int128 *)&v195[24]);
              end = (std::__shared_weak_count *)buf.__end_;
              if (buf.__end_)
              {
                v68 = (unint64_t *)(buf.__end_ + 2);
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
                  std::__shared_weak_count::__release_weak(end);
                }
              }
              v70 = lpsrc;
              v71 = (std::__shared_weak_count *)v210;
              buf.__begin_ = (std::vector<int>::pointer)lpsrc;
              buf.__end_ = (std::vector<int>::pointer)v210;
              if (v210)
              {
                v72 = (unint64_t *)(v210 + 8);
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
              }
              Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v215, v70, v71);
              if (v71)
              {
                v74 = (unint64_t *)&v71->__shared_owners_;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 - 1, v74));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v76 = 0;
              v77 = (void *)*((_QWORD *)v215 + 3);
              v78 = *((int *)v215 + 2);
              do
              {
                v78 *= *(int *)((char *)v215 + v76 + 12);
                v76 += 4;
              }
              while (v76 != 12);
              Espresso::abstract_blob_container::shape((char *)&buf, (uint64_t)lpsrc);
              Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v193, (const Espresso::layer_shape *)&buf, 0);
              if (v224)
              {
                v225 = v224;
                operator delete(v224);
              }
              v79 = v194;
              v80 = v195[23];
              v81 = *(_BYTE **)v195;
              Espresso::layer_nd_shape::shape_vector(&buf, (uint64_t)v193);
              if (v80 >= 0)
                v82 = v195;
              else
                v82 = v81;
              if (v79)
                v83 = 4 * v78;
              else
                v83 = 4;
              Espresso::tracer::trace_blob_data(v42, (uint64_t)v82, v77, v83, (uint64_t *)&buf, 0);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              if (v195[23] >= 0)
                v85 = v195;
              else
                v85 = *(_BYTE **)v195;
              v17 = this;
              v44 = v50;
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v85);
              v86 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v176, "setObject:forKeyedSubscript:", v84, v86);

              if (buf.__begin_)
              {
                buf.__end_ = buf.__begin_;
                operator delete(buf.__begin_);
              }
              v87 = (std::__shared_weak_count *)v216;
              if (v216)
              {
                v88 = (unint64_t *)(v216 + 1);
                do
                  v89 = __ldaxr(v88);
                while (__stlxr(v89 - 1, v88));
                if (!v89)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
              v90 = (std::__shared_weak_count *)v210;
              if (v210)
              {
                v91 = (unint64_t *)(v210 + 8);
                do
                  v92 = __ldaxr(v91);
                while (__stlxr(v92 - 1, v91));
                if (!v92)
                {
                  ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                  std::__shared_weak_count::__release_weak(v90);
                }
              }
              v93 = (std::__shared_weak_count *)v204[1];
              if (v204[1])
              {
                v94 = (unint64_t *)((char *)v204[1] + 8);
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              if (*((_QWORD *)&v199 + 1))
              {
                *(_QWORD *)&v200 = *((_QWORD *)&v199 + 1);
                operator delete(*((void **)&v199 + 1));
              }
              if ((v195[23] & 0x80000000) != 0)
                operator delete(*(void **)v195);
              v96 = (uint64_t *)v51[1];
              if (v96)
              {
                do
                {
                  v97 = v96;
                  v96 = (uint64_t *)*v96;
                }
                while (v96);
              }
              else
              {
                do
                {
                  v97 = (uint64_t *)v51[2];
                  v98 = *v97 == (_QWORD)v51;
                  v51 = v97;
                }
                while (!v98);
              }
              v51 = v97;
            }
            while (v97 != (uint64_t *)v52);
          }
          objc_msgSend(v174, "addEntriesFromDictionary:", v176);

          if (v184 < 0)
            operator delete(v183[0]);
          v99 = v189;
          v177 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 133) + 384) + 16) + 8 * v189);
          std::string::basic_string[abi:ne180100]<0>(v181, "inputs");
          v170 = v99;
          v100 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*((_QWORD *)v17 + 133) + 144) + 136), v99, &v189);
          objc_msgSend(*(id *)(v177 + 80), "lastObject");
          v101 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v101)
          {
            v162 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v162, "Invalid state: No frames exists in the trace");
            __cxa_throw(v162, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (v182 >= 0)
            v102 = v181;
          else
            v102 = (void **)v181[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v102);
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v101, "objectForKeyedSubscript:", v103);
          v171 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v171)
          {
            v104 = objc_opt_new();
            if (v182 >= 0)
              v105 = v181;
            else
              v105 = (void **)v181[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v105);
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v101, "setObject:forKeyedSubscript:", v104, v106);

            v171 = (void *)v104;
          }
          v173 = v101;
          if (!*(_QWORD *)v177)
          {
            v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v163, "Invalid state: network not added");
            __cxa_throw(v163, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v175 = (void *)objc_opt_new();
          v107 = v100[5];
          v172 = v100 + 6;
          if (v107 != (uint64_t *)(v100 + 6))
          {
            do
            {
              if (*((char *)v107 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v195, (const std::string::value_type *)v107[4], v107[5]);
              }
              else
              {
                *(_OWORD *)v195 = *((_OWORD *)v107 + 2);
                *(_QWORD *)&v195[16] = v107[6];
              }
              v108 = *(_OWORD *)(v107 + 15);
              v197 = *(_OWORD *)(v107 + 13);
              v198 = v108;
              v109 = *(_OWORD *)(v107 + 19);
              v199 = *(_OWORD *)(v107 + 17);
              v200 = v109;
              v110 = *(_OWORD *)(v107 + 9);
              *(_OWORD *)&v195[24] = *(_OWORD *)(v107 + 7);
              *(_OWORD *)&v195[40] = v110;
              v196 = *(_OWORD *)(v107 + 11);
              v202 = 0;
              v203 = 0;
              v201 = 0;
              v111 = v107[22];
              v112 = v107[21];
              buf.__begin_ = (std::vector<int>::pointer)&v201;
              LOBYTE(buf.__end_) = 0;
              if (v111 - v112 < 0)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v113 = (CVPixelBufferRef *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>((v111 - v112) >> 4);
              v201 = v113;
              v202 = v113;
              v203 = &v113[2 * v114];
              do
              {
                *v113 = *(CVPixelBufferRef *)v112;
                v113[1] = (CVPixelBufferRef)*(id *)(v112 + 8);
                v113 += 2;
                v112 += 16;
              }
              while (v112 != v111);
              v202 = v113;
              v115 = *v201;
              CVPixelBufferLockBaseAddress(*v201, 1uLL);
              Width = CVPixelBufferGetWidth(v115);
              Height = CVPixelBufferGetHeight(v115);
              PlaneCount = CVPixelBufferGetPlaneCount(v115);
              BaseAddress = CVPixelBufferGetBaseAddress(v115);
              BytesPerRow = CVPixelBufferGetBytesPerRow(v115);
              DataSize = CVPixelBufferGetDataSize(v115);
              v122 = v195[23];
              v123 = *(_BYTE **)v195;
              v124 = (int *)operator new(0xCuLL);
              buf.__end_ = v124 + 3;
              buf.__end_cap_.__value_ = v124 + 3;
              if (v122 >= 0)
                v125 = v195;
              else
                v125 = v123;
              *v124 = Height;
              v124[1] = Width;
              v124[2] = PlaneCount;
              buf.__begin_ = v124;
              Espresso::tracer::trace_blob_data(v177, (uint64_t)v125, BaseAddress, DataSize, (uint64_t *)&buf, BytesPerRow);
              v126 = (void *)objc_claimAutoreleasedReturnValue();
              if (v195[23] >= 0)
                v127 = v195;
              else
                v127 = *(_BYTE **)v195;
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v127);
              v128 = (void *)objc_claimAutoreleasedReturnValue();
              v101 = v173;
              objc_msgSend(v175, "setObject:forKeyedSubscript:", v126, v128);

              v17 = this;
              if (buf.__begin_)
                operator delete(buf.__begin_);
              CVPixelBufferUnlockBaseAddress(v115, 1uLL);
              buf.__begin_ = (std::vector<int>::pointer)&v201;
              std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              if ((v195[23] & 0x80000000) != 0)
                operator delete(*(void **)v195);
              v129 = (uint64_t *)v107[1];
              if (v129)
              {
                do
                {
                  v130 = v129;
                  v129 = (uint64_t *)*v129;
                }
                while (v129);
              }
              else
              {
                do
                {
                  v130 = (uint64_t *)v107[2];
                  v98 = *v130 == (_QWORD)v107;
                  v107 = v130;
                }
                while (!v98);
              }
              v107 = v130;
            }
            while (v130 != (uint64_t *)v172);
          }
          objc_msgSend(v171, "addEntriesFromDictionary:", v175);

          if (v182 < 0)
            operator delete(v181[0]);
          v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 133) + 384) + 16) + 8 * v170);
          std::string::basic_string[abi:ne180100]<0>(v179, "outputs");
          v132 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 133) + 24) + 16 * v170);
          objc_msgSend(*(id *)(v131 + 80), "lastObject");
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v133)
          {
            v164 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v164, "Invalid state: No frames exists in the trace");
            __cxa_throw(v164, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (v180 >= 0)
            v134 = v179;
          else
            v134 = (void **)v179[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v134);
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v133, "objectForKeyedSubscript:", v135);
          v136 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v136)
          {
            v137 = objc_opt_new();
            if (v180 >= 0)
              v138 = v179;
            else
              v138 = (void **)v179[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v138);
            v139 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "setObject:forKeyedSubscript:", v137, v139);

            v136 = (void *)v137;
          }
          if (!*(_QWORD *)v131)
          {
            v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v165, "net is null in tracer.");
            __cxa_throw(v165, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v140 = (void *)objc_opt_new();
          v141 = *(_QWORD **)(v132 + 256);
          if (v141 != (_QWORD *)(v132 + 264))
          {
            do
            {
              if (*((char *)v141 + 55) < 0)
                std::string::__init_copy_ctor_external(&v219, (const std::string::value_type *)v141[4], v141[5]);
              else
                v219 = *(std::string *)(v141 + 4);
              v220 = *((_BYTE *)v141 + 56);
              v215 = 0;
              v216 = &v215;
              v217 = 0x2020000000;
              v142 = *(_QWORD *)v131 + 136;
              *(_QWORD *)v195 = &v219;
              v218 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v142, (unsigned __int8 *)&v219, (__int128 **)v195)+ 40;
              buf.__begin_ = 0;
              buf.__end_ = (std::vector<int>::pointer)&buf;
              buf.__end_cap_.__value_ = (int *)0x4012000000;
              v222 = __Block_byref_object_copy__3626;
              v223 = __Block_byref_object_dispose__3627;
              v224 = "";
              (*(void (**)(_QWORD))(**(_QWORD **)v216[3] + 56))(*(_QWORD *)v216[3]);
              v143 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)v216[3] + 72);
              lpsrc = (void *)MEMORY[0x1E0C809B0];
              v210 = 3221225472;
              v211 = ___ZN8Espresso6tracer11trace_blobsIbEEP19NSMutableDictionaryRKNSt3__13mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEET_NS4_4lessISB_EENS9_INS4_4pairIKSB_SC_EEEEEE_block_invoke;
              v212 = &unk_1E2DD32C8;
              v213 = &v215;
              p_buf = &buf;
              Espresso::abstract_context::compute_batch_sync(v143, &lpsrc);
              v144 = buf.__end_;
              Espresso::abstract_blob_container::shape((char *)v204, *(_QWORD *)v216[3]);
              v145 = *((_QWORD *)v144 + 7);
              *(_QWORD *)v195 = *((_QWORD *)v144 + 6);
              *(_QWORD *)&v195[8] = v145;
              if (v145)
              {
                v146 = (unint64_t *)(v145 + 8);
                do
                  v147 = __ldxr(v146);
                while (__stxr(v147 + 1, v146));
              }
              *(_OWORD *)&v195[16] = *(_OWORD *)v204;
              *(_OWORD *)&v195[32] = v205;
              *(_QWORD *)&v195[48] = v206;
              v196 = v207;
              *(_QWORD *)&v197 = v208;
              v208 = 0;
              v207 = 0uLL;
              Espresso::tracer::trace_blob(v131, v140, (uint64_t)&v219, (uint64_t)v195);
              if ((_QWORD)v196)
              {
                *((_QWORD *)&v196 + 1) = v196;
                operator delete((void *)v196);
              }
              v148 = *(std::__shared_weak_count **)&v195[8];
              if (*(_QWORD *)&v195[8])
              {
                v149 = (unint64_t *)(*(_QWORD *)&v195[8] + 8);
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }
              if ((_QWORD)v207)
              {
                *((_QWORD *)&v207 + 1) = v207;
                operator delete((void *)v207);
              }
              _Block_object_dispose(&buf, 8);
              v151 = v226;
              if (v226)
              {
                v152 = (unint64_t *)&v226->__shared_owners_;
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }
              _Block_object_dispose(&v215, 8);
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              v154 = (_QWORD *)v141[1];
              if (v154)
              {
                do
                {
                  v155 = v154;
                  v154 = (_QWORD *)*v154;
                }
                while (v154);
              }
              else
              {
                do
                {
                  v155 = (_QWORD *)v141[2];
                  v98 = *v155 == (_QWORD)v141;
                  v141 = v155;
                }
                while (!v98);
              }
              v141 = v155;
            }
            while (v155 != (_QWORD *)(v132 + 264));
          }
          objc_msgSend(v136, "addEntriesFromDictionary:", v140);

          if (v180 < 0)
            operator delete(v179[0]);
          v156 = v189;
          Espresso::tracer::save_frames(*(Espresso::tracer **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 133) + 384)
                                                                         + 16)
                                                             + 8 * v189));
          v34 = v156 + 1;
          v189 = v156 + 1;
          v30 = *((_QWORD *)v17 + 133);
          v32 = *(_QWORD *)(*(_QWORD *)(v30 + 384) + 16);
          v33 = v156 + 1;
        }
        while (v156 + 1 < (unint64_t)((*(_QWORD *)(*(_QWORD *)(v30 + 384) + 24) - v32) >> 3));
      }
    }
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v190);
  v157 = v192;
  if (v192)
  {
    v158 = (unint64_t *)&v192->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
}

void sub_190EC41DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  int v63;
  void *v64;

  if (a63 < 0)
    operator delete(__p);
  if (a46 < 0)
  {
    operator delete(a41);
    if ((v63 & 1) == 0)
LABEL_8:
      JUMPOUT(0x190EC4640);
  }
  else if (!v63)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v64);
  goto LABEL_8;
}

void sub_190EC423C()
{
  JUMPOUT(0x190EC4638);
}

void sub_190EC4248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;

  if (a30 < 0)
    JUMPOUT(0x190EC462CLL);
  JUMPOUT(0x190EC4630);
}

void sub_190EC4258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;

  if (a33 < 0)
    JUMPOUT(0x190EC462CLL);
  JUMPOUT(0x190EC4630);
}

void sub_190EC4268()
{
  void *v0;

  JUMPOUT(0x190EC4614);
}

void sub_190EC4278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  JUMPOUT(0x190EC4630);
}

void sub_190EC4288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;

  if (a30 < 0)
    JUMPOUT(0x190EC462CLL);
  JUMPOUT(0x190EC4630);
}

void sub_190EC4404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a33 < 0)
    JUMPOUT(0x190EC462CLL);
  JUMPOUT(0x190EC4630);
}

void sub_190EC440C()
{
  JUMPOUT(0x190EC4614);
}

void sub_190EC4414()
{
  JUMPOUT(0x190EC45E0);
}

void sub_190EC441C()
{
  JUMPOUT(0x190EC4620);
}

void sub_190EC4438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

  JUMPOUT(0x190EC45D4);
}

void sub_190EC4440()
{
  void *v0;

  JUMPOUT(0x190EC44C4);
}

void sub_190EC4448()
{
  JUMPOUT(0x190EC460CLL);
}

void sub_190EC4450()
{
  JUMPOUT(0x190EC4630);
}

void sub_190EC4458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  uint64_t v56;
  void *v57;

  std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,Espresso::layer_shape>,0>((uint64_t)&a55);
  v57 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v57;
    operator delete(v57);
  }
  _Block_object_dispose((const void *)(v56 - 208), 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a16);
  _Block_object_dispose(&STACK[0x280], 8);
  if (*(char *)(v56 - 217) < 0)
    operator delete(*(void **)(v56 - 240));

  JUMPOUT(0x190EC44C4);
}

void sub_190EC44DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>::~pair((uint64_t)&__p);

  JUMPOUT(0x190EC45D4);
}

__n128 Espresso::ANERuntimeEngine::context::begin_batch@<Q0>(Espresso::ANERuntimeEngine::context *this@<X0>, __n128 *a2@<X8>)
{
  char *v4;
  __n128 result;
  char v6;

  v4 = (char *)operator new(0x168uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DB92C0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[64] = 1;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  v4[121] = 1;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_DWORD *)v4 + 40) = 0;
  *((_QWORD *)v4 + 3) = &off_1E2D70398;
  *((_QWORD *)v4 + 21) = 128;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 26) = 0;
  *((_QWORD *)v4 + 23) = 0;
  *((_QWORD *)v4 + 24) = 0;
  *((_QWORD *)v4 + 25) = v4 + 208;
  *((_QWORD *)v4 + 27) = 0;
  *((_QWORD *)v4 + 28) = 850045863;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 338) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 1018212795;
  v6 = *((_BYTE *)this + 140);
  v4[120] = *((_BYTE *)this + 141);
  v4[353] = v6;
  *a2 = result;
  return result;
}

uint64_t Espresso::switch_engine_batch::commit(Espresso::switch_engine_batch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void EspressoLight::espresso_plan::dispatch_task_on_compute_batch(uint64_t a1, _QWORD *a2, uint64_t ***a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t **i;
  __int128 *v17;
  size_t v18;
  size_t v19;
  __int128 *v20;
  _BOOL4 v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t j;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57[2];
  uint64_t **v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  uint64_t **v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  _QWORD *v64;
  uint64_t **v65;
  uint64_t **v66;
  void *v67;
  uint64_t v68;
  __int128 *v69;

  v6 = *(_QWORD *)(a1 + 1064);
  EspressoLight::plan_task_t::disable_memory_lingering_if_needed(*a3, (void *)*a2);
  v7 = *(_QWORD **)(v6 + 24);
  if (v7 != *(_QWORD **)(v6 + 32))
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, *v7);
  v9 = *a3;
  v8 = (uint64_t)a3[1];
  v64 = (_QWORD *)(v6 + 24);
  v65 = v9;
  v66 = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a2[1];
  v67 = (void *)*a2;
  v68 = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (*(_QWORD *)(v6 + 32) != *(_QWORD *)(v6 + 24))
  {
    v15 = 0;
    do
    {
      LODWORD(v63) = v15;
      for (i = (uint64_t **)*((_QWORD *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v65 + 29, v15, &v63)+ 7); i; i = (uint64_t **)*i)
        (*(void (**)(uint64_t *, _QWORD *))(*i[2] + 168))(i[2], a2);
      ++v15;
    }
    while (v15 < (uint64_t)(v64[1] - *v64) >> 4);
  }
  v17 = (__int128 *)(a1 + 1072);
  v18 = strlen((const char *)EspressoLight::abstract_espresso_plan::main_function_name);
  v19 = v18;
  if ((*(char *)(a1 + 1095) & 0x80000000) == 0)
  {
    v20 = (__int128 *)(a1 + 1072);
    if (v19 != *(unsigned __int8 *)(a1 + 1095))
      goto LABEL_21;
LABEL_20:
    v21 = memcmp(v20, (const void *)EspressoLight::abstract_espresso_plan::main_function_name, v19) == 0;
    goto LABEL_22;
  }
  if (v18 == *(_QWORD *)(a1 + 1080))
  {
    if (v18 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v20 = *(__int128 **)v17;
    goto LABEL_20;
  }
LABEL_21:
  v21 = 0;
LABEL_22:
  v22 = *(_QWORD *)(v6 + 24);
  if (*(_QWORD *)(v6 + 32) != v22)
  {
    v23 = 0;
    do
    {
      v24 = *(_OWORD *)(v22 + 16 * v23);
      v63 = v24;
      if (*((_QWORD *)&v24 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      if (v21)
      {
        v27 = (std::__shared_weak_count *)a3[1];
        v61 = *a3;
        v62 = v27;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
        }
        v60 = v24;
        if (*((_QWORD *)&v24 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        EspressoLight::espresso_plan::__copy_inputs((uint64_t *)&v61, (uint64_t)a2, v23, (uint64_t *)&v60);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (*((_QWORD *)&v60 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = v62;
        if (v62)
        {
          v36 = (unint64_t *)&v62->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = v63;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 184))
        {
          for (j = 0; j < (uint64_t)(*(_QWORD *)(v38 + 40) - *(_QWORD *)(v38 + 32)) >> 4; j = v40)
          {
            v40 = j + 1;
            Espresso::net::__forward(v38, a2, j, j + 1);
          }
        }
        else
        {
          Espresso::net::__forward(v63, a2, 0, 0xFFFFFFFFLL);
        }
      }
      else
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 184))
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("hose_fd is supported for main function only");
        v38 = v24;
        v41 = v24 + 984;
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(v24 + 984), (unsigned __int8 *)(a1 + 1072)))
        {
          if (*(char *)(a1 + 1095) < 0)
            v17 = *(__int128 **)v17;
          v69 = v17;
          Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("subnetwork with name %s does not exist", &v69);
        }
        v69 = (__int128 *)(a1 + 1072);
        v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, a1 + 1072, (uint64_t)&std::piecewise_construct, &v69);
        Espresso::net::__forward(v42[5], a2, 0, 0xFFFFFFFFLL);
      }
      v43 = (std::__shared_weak_count *)a3[1];
      v58 = *a3;
      v59 = v43;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v46 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      v57[0] = v38;
      v57[1] = *((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v47 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      EspressoLight::espresso_plan::__copy_outputs((uint64_t)&v58, (uint64_t)a2, v23, v57);
      if (v46)
      {
        v49 = (unint64_t *)&v46->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v51 = v59;
      if (v59)
      {
        v52 = (unint64_t *)&v59->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      ++v23;
      v22 = *(_QWORD *)(v6 + 24);
    }
    while (v23 < (*(_QWORD *)(v6 + 32) - v22) >> 4);
  }
  scoped_storage_swapper::~scoped_storage_swapper((scoped_storage_swapper *)&v64);
}

void sub_190EC4BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  scoped_storage_swapper::~scoped_storage_swapper((scoped_storage_swapper *)va1);
  _Unwind_Resume(a1);
}

void Espresso::net::__forward(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t (***v28)(_QWORD);
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  void *__p[2];
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  if (*a2)
    std::string::operator=((std::string *)(*a2 + 8), (const std::string *)(a1 + 424));
  v8 = *(_QWORD *)(a1 + 968);
  if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "__main__");
    (*(void (**)(uint64_t, _QWORD *, void **, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2, __p, a3, a4);
    if (SHIBYTE(v35) < 0)
      operator delete(__p[0]);
    return;
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v9 + 124))
  {
    v10 = *(_QWORD *)(a1 + 1256);
    if (v10)
    {
      if (*(_BYTE *)(v10 + 124))
      {
        Espresso::net::__forward_network_two_compilers(a1, (uint64_t)a2);
        return;
      }
    }
  }
  v11 = (***(uint64_t (****)(_QWORD))(v9 + 8))(*(_QWORD *)(v9 + 8));
  v12 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(a1 + 528), v11);
  if (v12)
  {
    v13 = v12;
    v14 = v12[3];
    v15 = (std::__shared_weak_count *)v13[4];
    v38 = v14;
    v39 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    if (v14)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 24))(v14, a2);
      if (!v15)
        return;
      goto LABEL_42;
    }
  }
  else
  {
    v15 = 0;
    v38 = 0;
    v39 = 0;
  }
  if ((a4 & 0x80000000) != 0)
    a4 = (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4;
  v19 = *a2;
  v18 = a2[1];
  __p[1] = (void *)a1;
  v35 = v19;
  v36 = v18;
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v37 = 0;
  if ((int)a4 > (int)a3)
  {
    a3 = (int)a3;
    do
    {
      if (*a2)
        *(_QWORD *)(*a2 + 48) = a3;
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(_OWORD *)(v22 + 16 * a3);
      v24 = *(std::__shared_weak_count **)(v22 + 16 * a3 + 8);
      if (*((_QWORD *)&v23 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v22 = *(_QWORD *)(a1 + 32);
      }
      if (*(_BYTE *)(a1 + 1352))
      {
        v27 = std::string::compare((const std::string *)(*(_QWORD *)(v22 + 16 * a3) + 40), "context_transfer");
        v22 = *(_QWORD *)(a1 + 32);
        if (v27)
        {
          v28 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 16 * a3) + 64) + 8)
                                                   + 8);
          v29 = (**v28)(v28);
          JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)__p, v29);
          v22 = *(_QWORD *)(a1 + 32);
        }
      }
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v22 + 16 * a3) + 8))(*(_QWORD *)(v22 + 16 * a3), a2, a3);
      if (v24)
      {
        v30 = (unint64_t *)&v24->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      ++a3;
    }
    while ((_DWORD)a4 != (_DWORD)a3);
    v15 = v39;
  }
  JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)__p);
  if (v15)
  {
LABEL_42:
    v32 = (unint64_t *)&v15->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_190EC4F14(_Unwind_Exception *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::string *a7, char a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 80);
  _Unwind_Resume(a1);
}

void scoped_storage_swapper::~scoped_storage_swapper(scoped_storage_swapper *this)
{
  unint64_t v2;
  uint64_t **i;
  char *v4;
  int v5;

  if (*(_QWORD *)(*(_QWORD *)this + 8) != **(_QWORD **)this)
  {
    v2 = 0;
    do
    {
      v5 = v2;
      for (i = (uint64_t **)*((_QWORD *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 232), v2, &v5)+ 7); i; i = (uint64_t **)*i)
        (*(void (**)(uint64_t *, char *))(*i[2] + 176))(i[2], (char *)this + 24);
      v4 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)this + 1) + 232), v2, &v5);
      std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear((uint64_t)(v4 + 40));
      ++v2;
    }
    while (v2 < (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 4);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

char *std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x50uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_DWORD *)v7 + 18) = 1065353216;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *EspressoLight::plan_task_t::disable_memory_lingering_if_needed(_QWORD *result, void *lpsrc)
{
  BOOL v2;

  if (result[7] | result[4] | result[16] | result[19] | result[25] | result[28] | result[22])
    v2 = 1;
  else
    v2 = lpsrc == 0;
  if (!v2)
  {
    if (result)
      JUMPOUT(0x19401B068);
  }
  return result;
}

uint64_t Espresso::abstract_batch::setup_for_network(uint64_t this, Espresso::net *a2)
{
  *(_QWORD *)(this + 32) = a2;
  *(_BYTE *)(this + 40) = *((_BYTE *)a2 + 1352);
  return this;
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((unsigned __int8 *)this + 289);
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasDynamicInputPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((unsigned __int8 *)this + 288);
}

void Espresso::net_compiler_segment_based::__forward(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t (***v49)(_QWORD);
  int v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::runtime_error *exception;
  _QWORD v73[17];
  _OWORD v74[2];
  char v75;
  _BYTE v76[68];
  int v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 v80;
  void *v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;

  v83 = 0;
  v84 = 0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v84 = std::__shared_weak_count::lock(v2)) == 0 || (v83 = a1[1]) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*a2
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v81 = v4;
    v82 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v81 = 0;
    v82 = 0;
  }
  v8 = a1[5] - a1[4];
  if (v8 != -120)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 3);
    do
    {
      if (v10 >= v11)
        v12 = (uint64_t)(*(_QWORD *)(v83 + 40) - *(_QWORD *)(v83 + 32)) >> 4;
      else
        v12 = *(_QWORD *)(a1[4] + 120 * v10);
      v13 = a2[1];
      *(_QWORD *)&v80 = *a2;
      *((_QWORD *)&v80 + 1) = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      if (v9 < v12 && *(_BYTE *)(*a2 + 97))
      {
        if (v81)
        {
          v16 = v83;
          v17 = *(_QWORD *)(*(_QWORD *)(v83 + 32) + 16 * v9);
          v18 = *(_QWORD **)(v17 + 64);
          v19 = v18[2];
          *(_QWORD *)v76 = v18[1];
          *(_QWORD *)&v76[8] = v19;
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
            v17 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 16 * v9);
            v18 = *(_QWORD **)(v17 + 64);
            if (!v18)
              goto LABEL_35;
          }
          if (v22)
          {
            v23 = *(std::__shared_weak_count **)(v17 + 72);
            if (v23)
            {
              v24 = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
              v26 = v22[345] != 0;
              do
                v27 = __ldaxr(v24);
              while (__stlxr(v27 - 1, v24));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            else
            {
              v26 = v22[345] != 0;
            }
          }
          else
          {
LABEL_35:
            v26 = 0;
          }
          v28 = (uint64_t)v81;
          v78 = *(_QWORD *)v76;
          v79 = *(std::__shared_weak_count **)&v76[8];
          if (*(_QWORD *)&v76[8])
          {
            v29 = (unint64_t *)(*(_QWORD *)&v76[8] + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          Espresso::switch_engine_batch::switch_to_engine(v28, (uint64_t)&v78, v26, v74);
          v31 = v74[0];
          v74[0] = 0uLL;
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
          v80 = v31;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v35 = (std::__shared_weak_count *)*((_QWORD *)&v74[0] + 1);
          if (*((_QWORD *)&v74[0] + 1))
          {
            v36 = (unint64_t *)(*((_QWORD *)&v74[0] + 1) + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v38 = v79;
          if (v79)
          {
            v39 = (unint64_t *)&v79->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v41 = *(std::__shared_weak_count **)&v76[8];
          if (*(_QWORD *)&v76[8])
          {
            v42 = (unint64_t *)(*(_QWORD *)&v76[8] + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
        }
        else
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
        }
      }
      v44 = v83;
      v76[0] = *(_BYTE *)(v83 + 1352);
      memset(&v76[4], 0, 64);
      v77 = 0;
      if (v76[0])
      {
        *(_QWORD *)&v76[8] = v9;
        *(_QWORD *)&v76[16] = v12;
        memset(&v76[32], 0, 24);
        *(_QWORD *)&v76[24] = v83;
        *(_QWORD *)&v76[56] = v83;
        *(_DWORD *)&v76[4] = 723714152;
        kdebug_trace();
      }
      *((_QWORD *)&v74[0] + 1) = v44;
      v74[1] = v80;
      if (*((_QWORD *)&v80 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v75 = 0;
      if (v9 < v12)
      {
        v47 = 16 * v9;
        v48 = v9;
        do
        {
          if (*a2)
            *(_QWORD *)(*a2 + 48) = v48;
          if (*(_BYTE *)(v44 + 1352)
            && std::string::compare((const std::string *)(*(_QWORD *)(*(_QWORD *)(v44 + 32) + v47) + 40), "context_transfer"))
          {
            v49 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 32) + v47)
                                                                             + 64)
                                                                 + 8)
                                                     + 8);
            v50 = (**v49)(v49);
            JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)v74, v50);
          }
          (*(void (**)(_QWORD, __int128 *, unint64_t))(**(_QWORD **)(*(_QWORD *)(v44 + 32) + v47) + 8))(*(_QWORD *)(*(_QWORD *)(v44 + 32) + v47), &v80, v48++);
          v47 += 16;
        }
        while (v12 != v48);
      }
      JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)v74);
      Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v76);
      if (v10 < v11)
      {
        v51 = (uint64_t)v81;
        if (v81 && *(_BYTE *)(*a2 + 97))
        {
          v52 = *(std::__shared_weak_count **)(v44 + 24);
          v73[0] = *(_QWORD *)(v44 + 16);
          v73[1] = v52;
          if (v52)
          {
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          Espresso::switch_engine_batch::switch_to_engine(v51, (uint64_t)v73, 0, v76);
          if (v52)
          {
            v55 = (unint64_t *)&v52->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          v57 = *(std::__shared_weak_count **)&v76[8];
          if (*(_QWORD *)&v76[8])
          {
            v58 = (unint64_t *)(*(_QWORD *)&v76[8] + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v44 = v83;
        }
        v60 = a1[4];
        v76[0] = *(_BYTE *)(v44 + 1352);
        memset(&v76[4], 0, 64);
        v77 = 0;
        if (v76[0])
        {
          *(_DWORD *)&v76[4] = 723714096;
          kdebug_trace();
        }
        (*(void (**)(_QWORD *, _QWORD *, unint64_t, unint64_t))(*a1 + 80))(a1, a2, v10, v60 + 120 * v10);
        v9 = *(_QWORD *)(v60 + 120 * v10 + 8);
        Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v76);
      }
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
      if (*((_QWORD *)&v80 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
    }
    while (v10++ != v11);
    v4 = v81;
  }
  if (v4
    && *(_BYTE *)(*a2 + 97)
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 40) - 16) + 64) + 8) == *(_QWORD *)(v83 + 16))
  {
    (*(void (**)(void *))(*(_QWORD *)v4 + 24))(v4);
  }
  v65 = v82;
  if (v82)
  {
    v66 = (unint64_t *)&v82->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v84;
  if (v84)
  {
    v69 = (unint64_t *)&v84->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_190EC5A80(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, std::string *a6, std::string *a7, uint64_t a8, std::string *a9, uint64_t a10, std::string *a11, uint64_t a12, std::string *a13, uint64_t a14, std::string *a15, uint64_t a16, std::string *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  __break(1u);
}

void sub_190EC5C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;

  if (a67 < 0)
    operator delete(__p);
  if (a60 < 0)
    operator delete(a55);
  if (a53 < 0)
    operator delete(a48);
  if (a46 < 0)
    operator delete(a41);
  if (a39 < 0)
    operator delete(a34);
  if (a32 < 0)
    operator delete(a27);
  if (a25 < 0)
    operator delete(a20);
  if (a19 < 0)
    operator delete(a14);
  __cxa_end_catch();
  JUMPOUT(0x190EC5D64);
}

void JITBackendSignpostEmitter::~JITBackendSignpostEmitter(JITBackendSignpostEmitter *this)
{
  JITBackendSignpostEmitter::endJITSegment((uint64_t)this);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

uint64_t JITBackendSignpostEmitter::endJITSegment(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 32))
  {
    v1 = this;
    if (*(_DWORD *)this != 1)
    {
      this = kdebug_trace();
      *(_BYTE *)(v1 + 32) = 0;
    }
  }
  return this;
}

void Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::ANERuntimeEngine::batch *this, Espresso::net *a2)
{
  BOOL is_fallback_gpu;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  is_fallback_gpu = Espresso::net::is_fallback_gpu(a2);
  *((_BYTE *)this + 96) = is_fallback_gpu;
  *((_QWORD *)this + 4) = a2;
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 1352);
  if (!is_fallback_gpu)
  {
    v5 = (_QWORD *)*((_QWORD *)a2 + 80);
    v6 = (_QWORD *)*((_QWORD *)a2 + 81);
    if (v5 != v6)
    {
      v7 = is_fallback_gpu;
      v8 = (char *)a2 + 184;
      v9 = (char *)a2 + 192;
      do
      {
        v10 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v8, v5);
        if (v9 != v10)
        {
          v7 |= *((_DWORD *)v10 + 18) * *((_DWORD *)v10 + 17) > 1;
          *((_BYTE *)this + 96) = v7;
        }
        if (v7)
          break;
        v7 = 0;
        v5 += 3;
      }
      while (v5 != v6);
    }
  }
  if (Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::onceToken != -1)
    dispatch_once(&Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::onceToken, &__block_literal_global_136_16144);
  if (Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::override_use_iofence == 1)
  {
    v11 = Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::use_iofence_from_defaults;
    *((_BYTE *)this + 96) = Espresso::ANERuntimeEngine::batch::setup_for_network(Espresso::net &)::use_iofence_from_defaults;
    if (!v11)
      return;
    goto LABEL_12;
  }
  if (*((_BYTE *)this + 96))
LABEL_12:
    std::vector<Espresso::ANERuntimeEngine::async_request_status>::reserve((char **)this + 19, *((_QWORD *)this + 18));
}

void Espresso::single_match_replace<Espresso::generic_softmax_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_190EC631C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context17transform_softmaxEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  std::string **v36;
  uint64_t v37;
  unint64_t v38;
  std::string **v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::string lpsrc;
  uint64_t v50[2];
  std::string __p;
  unint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::string::size_type size;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t v58[5];

  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 320))(a2->i64[0]);
    if (*(_DWORD *)(v6 + 20))
    {
      if (((*(_BYTE *)(v6 + 26) | *(_BYTE *)(v6 + 24)) & 1) == 0)
      {
        v7 = *(_QWORD *)(a1 + 40) + 96;
        v58[0] = a2[3].i32[2];
        v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v58[0], v58);
        if (v8[4] - v8[3] == 24)
        {
          v9 = *(_QWORD *)(a1 + 40) + 56;
          v58[0] = a2[3].i32[2];
          v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v58[0], v58);
          if (v10[4] - v10[3] == 24)
          {
            __asm { FMOV            V0.2S, #1.0 }
            *(unint64_t *)((char *)v58 + 4) = _D0;
            *(unint64_t *)((char *)&v58[1] + 4) = 0;
            *(unint64_t *)((char *)&v58[3] + 4) = 0;
            *(unint64_t *)((char *)&v58[2] + 4) = 0;
            LODWORD(v58[0]) = 3;
            v15 = *(_QWORD *)(a1 + 40);
            v17 = *(_QWORD *)(v15 + 16);
            v16 = *(std::__shared_weak_count **)(v15 + 24);
            v56 = v17;
            v57 = v16;
            if (v16)
            {
              p_shared_owners = (unint64_t *)&v16->__shared_owners_;
              do
                v19 = __ldxr(p_shared_owners);
              while (__stxr(v19 + 1, p_shared_owners));
            }
            Espresso::abstract_engine_factory::shared(&v52);
            v20 = v52;
            std::string::basic_string[abi:ne180100]<0>(&__p, "activation");
            LODWORD(v48) = (***(uint64_t (****)(_QWORD))(v56 + 8))(*(_QWORD *)(v56 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v20, (uint64_t)&v56, (uint64_t)&__p, (uint64_t)v58, (int *)&v48);
            if (lpsrc.__r_.__value_.__r.__words[0]
            {
              v54 = (uint64_t)v21;
              size = lpsrc.__r_.__value_.__l.__size_;
              if (lpsrc.__r_.__value_.__l.__size_)
              {
                v22 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
            }
            else
            {
              v54 = 0;
              size = 0;
            }
            v24 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
            if (lpsrc.__r_.__value_.__l.__size_)
            {
              v25 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v27 = v53;
            if (v53)
            {
              v28 = (unint64_t *)&v53->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
            if (*(char *)(v30 + 39) < 0)
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v30 + 16), *(_QWORD *)(v30 + 24));
            else
              __p = *(std::string *)(v30 + 16);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::remove_layer(a2);
            v31 = (std::__shared_weak_count *)size;
            v50[0] = v54;
            v50[1] = size;
            if (size)
            {
              v32 = (unint64_t *)(size + 8);
              do
                v33 = __ldxr(v32);
              while (__stxr(v33 + 1, v32));
            }
            std::string::basic_string[abi:ne180100]<0>(&lpsrc, "activation");
            v34 = *(_QWORD *)(a1 + 40) + 56;
            v35 = a2[3].i32[2];
            v52 = v35;
            v36 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v34, v35, &v52);
            v37 = *(_QWORD *)(a1 + 40) + 96;
            v38 = a2[3].i32[2];
            v48 = v38;
            v39 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37, v38, &v48);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v50, &lpsrc, &__p, v36 + 3, v39 + 3);
            if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
              operator delete(lpsrc.__r_.__value_.__l.__data_);
            if (v31)
            {
              v40 = (unint64_t *)&v31->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v42 = (std::__shared_weak_count *)size;
            if (size)
            {
              v43 = (unint64_t *)(size + 8);
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v45 = v57;
            if (v57)
            {
              v46 = (unint64_t *)&v57->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
          }
        }
      }
    }
  }
}

void sub_190EC6764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 88);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::softmax_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

uint64_t e5rt_program_library_create(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC90A8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EC6890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_function_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC8778;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190EC6964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_create_with_program_function(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCB7C8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EC6A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_replace<Espresso::generic_pool_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_190EC6E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context20transform_l2_poolingEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  size_t size;
  __int128 *v20;
  std::string *v21;
  uint64_t v22;
  size_t v23;
  std::string *v24;
  const void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  char *v47;
  __int128 v48;
  const void *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t **v52;
  char *v53;
  __int128 v54;
  size_t v55;
  std::string *v56;
  std::string *v57;
  uint64_t v58;
  size_t v59;
  std::string *v60;
  const void *v61;
  uint64_t v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  void *v80;
  uint64_t **v81;
  char *v82;
  __int128 v83;
  const void *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t **v87;
  char *v88;
  __int128 v89;
  size_t v90;
  std::string *v91;
  std::string *v92;
  uint64_t v93;
  size_t v94;
  std::string *v95;
  const void *v96;
  uint64_t v97;
  void *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t **v113;
  char *v114;
  __int128 v115;
  const void *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t **v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  size_t v123;
  std::string *v124;
  const void *v125;
  uint64_t v126;
  void *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t **v142;
  char *v143;
  __int128 v144;
  const void *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t **v148;
  char *v149;
  __int128 v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::string *v169;
  void **p_data;
  void **v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  std::string v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  int v181;
  int v182;
  uint64_t v183[2];
  uint64_t v184;
  uint64_t v185;
  std::string v186;
  std::string v187;
  uint64_t v188[2];
  _QWORD *v189;
  std::__shared_weak_count *v190;
  void *v191;
  uint64_t v192;
  std::string v193;
  std::string v194;
  __int128 lpsrc;
  __int128 v196;
  uint64_t v197;
  void *v198;
  _BYTE *v199;
  uint64_t v200;
  uint64_t v201[2];
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  std::string v206;
  __int128 v207;
  uint64_t v208;
  _QWORD v209[3];
  char v210;
  int v211;
  int v212;
  std::string v213;
  std::string v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  int v221;
  void ***v222;
  char v223;
  _BYTE v224[32];
  uint64_t v225;
  void *v226;
  void *v227;
  uint64_t v228;
  std::string v229;
  uint64_t v230;
  std::string v231;
  uint64_t v232;
  _BYTE v233[32];
  uint64_t v234;
  void *v235;
  _BYTE *v236;
  uint64_t v237;
  std::string v238;
  uint64_t v239;
  std::string v240;
  __int128 v241;
  int v242;
  int v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  void *__p;
  _BYTE *v248;
  uint64_t v249;
  _BYTE v250[32];
  uint64_t v251;
  void *__src;
  _BYTE *v253;
  uint64_t v254;
  _BYTE v255[76];
  __int128 v256;
  __int128 v257;
  int v258;
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2->i64[0] + 384))(a2->i64[0]);
    v7 = *(_DWORD *)v6;
    v8 = *(_DWORD *)(v6 + 4);
    v9 = *(_DWORD *)(v6 + 8);
    v10 = *(_OWORD *)(v6 + 60);
    v11 = *(_OWORD *)(v6 + 92);
    v219 = *(_OWORD *)(v6 + 76);
    v220 = v11;
    v221 = *(_DWORD *)(v6 + 108);
    v12 = *(_OWORD *)(v6 + 28);
    v215 = *(_OWORD *)(v6 + 12);
    v216 = v12;
    v217 = *(_OWORD *)(v6 + 44);
    v218 = v10;
    if (v7 == 2)
    {
      Espresso::single_match_state<Espresso::generic_pool_kernel>::remove_layer(a2);
      v13 = *(_QWORD *)(a1 + 40) + 96;
      *(_QWORD *)v255 = a2[3].i32[2];
      v14 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, *(unint64_t *)v255, v255)[3];
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v15 = *v14;
        v214.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
        *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v15;
      }
      v16 = *(_QWORD *)(a1 + 40) + 56;
      *(_QWORD *)v255 = a2[3].i32[2];
      v17 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16, *(unint64_t *)v255, v255)[3];
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
      }
      else
      {
        v18 = *v17;
        v213.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
        *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v18;
      }
      v209[2] = 897988541;
      v210 = 0;
      v212 = 0;
      v211 = 0;
      v209[0] = 13;
      v209[1] = 0x40000000;
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        size = v214.__r_.__value_.__l.__size_;
      v20 = &v207;
      std::string::basic_string[abi:ne180100]((uint64_t)&v207, size + 19);
      if (v208 < 0)
        v20 = (__int128 *)v207;
      if (size)
      {
        if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v214;
        else
          v21 = (std::string *)v214.__r_.__value_.__r.__words[0];
        memmove(v20, v21, size);
      }
      strcpy((char *)v20 + size, "__ew_pow@l2_pooling");
      v22 = a2[1].i64[0];
      if (*(char *)(v22 + 39) >= 0)
        v23 = *(unsigned __int8 *)(v22 + 39);
      else
        v23 = *(_QWORD *)(v22 + 24);
      v24 = &v206;
      std::string::basic_string[abi:ne180100]((uint64_t)&v206, v23 + 19);
      if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v206.__r_.__value_.__r.__words[0];
      if (v23)
      {
        if (*(char *)(v22 + 39) >= 0)
          v25 = (const void *)(v22 + 16);
        else
          v25 = *(const void **)(v22 + 16);
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "__ew_pow@l2_pooling");
      v26 = *(_QWORD *)(a1 + 40);
      v28 = *(_QWORD *)(v26 + 16);
      v27 = *(std::__shared_weak_count **)(v26 + 24);
      v204 = v28;
      v205 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      Espresso::abstract_engine_factory::shared(v250);
      v31 = *(_QWORD *)v250;
      std::string::basic_string[abi:ne180100]<0>(v255, "elementwise");
      LODWORD(v244) = (***(uint64_t (****)(_QWORD))(v204 + 8))(*(_QWORD *)(v204 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v31, (uint64_t)&v204, (uint64_t)v255, (uint64_t)v209, (int *)&v244);
      if ((_QWORD)lpsrc
      {
        v202 = (uint64_t)v32;
        v203 = *((_QWORD *)&lpsrc + 1);
        if (*((_QWORD *)&lpsrc + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
      }
      else
      {
        v202 = 0;
        v203 = 0;
      }
      if (*((_QWORD *)&lpsrc + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&lpsrc + 1) + 16))(*((_QWORD *)&lpsrc + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&lpsrc + 1));
        }
      }
      if ((v255[23] & 0x80000000) != 0)
        operator delete(*(void **)v255);
      v37 = *(std::__shared_weak_count **)&v250[8];
      if (*(_QWORD *)&v250[8])
      {
        v38 = (unint64_t *)(*(_QWORD *)&v250[8] + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v203;
      v201[0] = v202;
      v201[1] = v203;
      if (v203)
      {
        v41 = (unint64_t *)(v203 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      std::string::basic_string[abi:ne180100]<0>(v255, "elementwise");
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v250, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
      else
        *(std::string *)v250 = v213;
      lpsrc = 0uLL;
      *(_QWORD *)&v196 = 0;
      *(_QWORD *)&v244 = &lpsrc;
      BYTE8(v244) = 0;
      *(_QWORD *)&lpsrc = operator new(0x18uLL);
      *((_QWORD *)&lpsrc + 1) = lpsrc;
      *(_QWORD *)&v196 = lpsrc + 24;
      *((_QWORD *)&lpsrc + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v196, (__int128 *)v250, (__int128 *)&v250[24], (std::string *)lpsrc);
      if (SHIBYTE(v208) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v233, (const std::string::value_type *)v207, *((std::string::size_type *)&v207 + 1));
      }
      else
      {
        *(_OWORD *)v233 = v207;
        *(_QWORD *)&v233[16] = v208;
      }
      v244 = 0uLL;
      *(_QWORD *)&v245 = 0;
      *(_QWORD *)v224 = &v244;
      v224[8] = 0;
      *(_QWORD *)&v244 = operator new(0x18uLL);
      *((_QWORD *)&v244 + 1) = v244;
      *(_QWORD *)&v245 = v244 + 24;
      *((_QWORD *)&v244 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v245, (__int128 *)v233, (__int128 *)&v233[24], (std::string *)v244);
      Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(a2, v201, (const std::string *)v255, &v206, (std::string **)&lpsrc, (std::string **)&v244);
      *(_QWORD *)v224 = &v244;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
      if ((v233[23] & 0x80000000) != 0)
        operator delete(*(void **)v233);
      *(_QWORD *)&v244 = &lpsrc;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
      if ((v250[23] & 0x80000000) != 0)
        operator delete(*(void **)v250);
      if ((v255[23] & 0x80000000) != 0)
        operator delete(*(void **)v255);
      if (v40)
      {
        v43 = (unint64_t *)&v40->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v45 = v202;
      v46 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      *(_QWORD *)v233 = &v213;
      v47 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, &v213, (__int128 **)v233);
      v48 = *(_OWORD *)(v47 + 72);
      *(_OWORD *)v255 = *(_OWORD *)(v47 + 56);
      *(_OWORD *)&v255[16] = v48;
      v49 = (const void *)*((_QWORD *)v47 + 12);
      *(_QWORD *)&v255[32] = *((_QWORD *)v47 + 11);
      memset(&v255[40], 0, 24);
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v255[40], v49, *((_QWORD *)v47 + 13), (uint64_t)(*((_QWORD *)v47 + 13) - (_QWORD)v49) >> 2);
      v244 = 0uLL;
      *(_QWORD *)&v245 = 0;
      *(_QWORD *)v233 = &v244;
      v233[8] = 0;
      *(_QWORD *)&v244 = operator new(0x40uLL);
      *((_QWORD *)&v244 + 1) = v244;
      *(_QWORD *)&v245 = v244 + 64;
      *((_QWORD *)&v244 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v245, (__int128 *)v255, (__int128 *)&v255[64], v244);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v45 + 64))(v250, v45, &v244);
      v50 = *(_QWORD *)(*(_QWORD *)v250 + 32);
      v51 = *(_OWORD *)(*(_QWORD *)v250 + 16);
      lpsrc = **(_OWORD **)v250;
      v196 = v51;
      v197 = v50;
      v198 = 0;
      v199 = 0;
      v200 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v198, *(const void **)(*(_QWORD *)v250 + 40), *(_QWORD *)(*(_QWORD *)v250 + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)v250 + 48) - *(_QWORD *)(*(_QWORD *)v250 + 40)) >> 2);
      *(_QWORD *)v233 = v250;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v233);
      *(_QWORD *)v233 = &v244;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v233);
      if (*(_QWORD *)&v255[40])
      {
        *(_QWORD *)&v255[48] = *(_QWORD *)&v255[40];
        operator delete(*(void **)&v255[40]);
      }
      v52 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      *(_QWORD *)v255 = &v207;
      v53 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v52, &v207, (__int128 **)v255);
      v54 = v196;
      *(_OWORD *)(v53 + 56) = lpsrc;
      *(_OWORD *)(v53 + 72) = v54;
      *((_QWORD *)v53 + 11) = v197;
      if (v53 + 56 != (char *)&lpsrc)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v53 + 96, (char *)v198, (uint64_t)v199, (v199 - (_BYTE *)v198) >> 2);
      *(_OWORD *)&v255[28] = v216;
      *(_OWORD *)&v255[60] = v218;
      v256 = v219;
      v257 = v220;
      *(_OWORD *)&v255[12] = v215;
      v258 = v221;
      *(_OWORD *)&v255[44] = v217;
      *(_DWORD *)v255 = 0;
      *(_DWORD *)&v255[4] = v8;
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v55 = v214.__r_.__value_.__l.__size_;
      *(_DWORD *)&v255[8] = v9;
      *(_DWORD *)&v255[28] = 0;
      v56 = &v194;
      std::string::basic_string[abi:ne180100]((uint64_t)&v194, v55 + 21);
      if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v56 = (std::string *)v194.__r_.__value_.__r.__words[0];
      if (v55)
      {
        if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = &v214;
        else
          v57 = (std::string *)v214.__r_.__value_.__r.__words[0];
        memmove(v56, v57, v55);
      }
      strcpy((char *)v56 + v55, "__pool_avg@l2_pooling");
      v58 = a2[1].i64[0];
      if (*(char *)(v58 + 39) >= 0)
        v59 = *(unsigned __int8 *)(v58 + 39);
      else
        v59 = *(_QWORD *)(v58 + 24);
      v60 = &v193;
      std::string::basic_string[abi:ne180100]((uint64_t)&v193, v59 + 21);
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v60 = (std::string *)v193.__r_.__value_.__r.__words[0];
      if (v59)
      {
        if (*(char *)(v58 + 39) >= 0)
          v61 = (const void *)(v58 + 16);
        else
          v61 = *(const void **)(v58 + 16);
        memmove(v60, v61, v59);
      }
      strcpy((char *)v60 + v59, "__pool_avg@l2_pooling");
      Espresso::abstract_engine_factory::shared(v233);
      v62 = *(_QWORD *)v233;
      std::string::basic_string[abi:ne180100]<0>(v250, "pool");
      *(_DWORD *)v224 = (***(uint64_t (****)(_QWORD))(v204 + 8))(*(_QWORD *)(v204 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v62, (uint64_t)&v204, (uint64_t)v250, (uint64_t)v255, (int *)v224);
      if ((_QWORD)v244
      {
        v191 = v63;
        v192 = *((_QWORD *)&v244 + 1);
        if (*((_QWORD *)&v244 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
      }
      else
      {
        v191 = 0;
        v192 = 0;
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
      if (*((_QWORD *)&v244 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if ((v250[23] & 0x80000000) != 0)
        operator delete(*(void **)v250);
      v69 = *(std::__shared_weak_count **)&v233[8];
      if (*(_QWORD *)&v233[8])
      {
        v70 = (unint64_t *)(*(_QWORD *)&v233[8] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      if (v191
      {
        v189 = v72;
        v190 = (std::__shared_weak_count *)v192;
        if (v192)
        {
          v73 = (unint64_t *)(v192 + 8);
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
      }
      else
      {
        v72 = 0;
        v189 = 0;
        v190 = 0;
      }
      *(_BYTE *)((*(uint64_t (**)(_QWORD *))(v72[54] + 104))(v72 + 54) + 52) = 1;
      v75 = (std::__shared_weak_count *)v192;
      v188[0] = (uint64_t)v191;
      v188[1] = v192;
      if (v192)
      {
        v76 = (unint64_t *)(v192 + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      std::string::basic_string[abi:ne180100]<0>(v250, "pool");
      if (SHIBYTE(v208) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v233, (const std::string::value_type *)v207, *((std::string::size_type *)&v207 + 1));
      }
      else
      {
        *(_OWORD *)v233 = v207;
        *(_QWORD *)&v233[16] = v208;
      }
      v244 = 0uLL;
      *(_QWORD *)&v245 = 0;
      *(_QWORD *)v224 = &v244;
      v224[8] = 0;
      *(_QWORD *)&v244 = operator new(0x18uLL);
      *((_QWORD *)&v244 + 1) = v244;
      *(_QWORD *)&v245 = v244 + 24;
      *((_QWORD *)&v244 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v245, (__int128 *)v233, (__int128 *)&v233[24], (std::string *)v244);
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v240, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
      else
        v240 = v194;
      memset(v224, 0, 24);
      LOBYTE(v178) = 0;
      *(_QWORD *)v224 = operator new(0x18uLL);
      *(_QWORD *)&v224[8] = *(_QWORD *)v224;
      *(_QWORD *)&v224[16] = *(_QWORD *)v224 + 24;
      *(_QWORD *)&v224[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v224[16], (__int128 *)&v240, &v241, *(std::string **)v224);
      Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(a2, v188, (const std::string *)v250, &v193, (std::string **)&v244, (std::string **)v224);
      v177 = (uint64_t)v224;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      *(_QWORD *)v224 = &v244;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
      if ((v233[23] & 0x80000000) != 0)
        operator delete(*(void **)v233);
      if ((v250[23] & 0x80000000) != 0)
        operator delete(*(void **)v250);
      if (v75)
      {
        v78 = (unint64_t *)&v75->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v80 = v191;
      v81 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v207;
      v82 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v81, &v207, (__int128 **)&v240);
      v83 = *(_OWORD *)(v82 + 72);
      v244 = *(_OWORD *)(v82 + 56);
      v245 = v83;
      v84 = (const void *)*((_QWORD *)v82 + 12);
      v246 = *((_QWORD *)v82 + 11);
      __p = 0;
      v248 = 0;
      v249 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v84, *((_QWORD *)v82 + 13), (uint64_t)(*((_QWORD *)v82 + 13) - (_QWORD)v84) >> 2);
      memset(v224, 0, 24);
      v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
      v240.__r_.__value_.__s.__data_[8] = 0;
      *(_QWORD *)v224 = operator new(0x40uLL);
      *(_QWORD *)&v224[8] = *(_QWORD *)v224;
      *(_QWORD *)&v224[16] = *(_QWORD *)v224 + 64;
      *(_QWORD *)&v224[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v224[16], &v244, (__int128 *)v250, *(uint64_t *)v224);
      (*(void (**)(_BYTE *__return_ptr, void *, _BYTE *))(*(_QWORD *)v80 + 64))(v233, v80, v224);
      v85 = *(_QWORD *)(*(_QWORD *)v233 + 32);
      v86 = *(_OWORD *)(*(_QWORD *)v233 + 16);
      *(_OWORD *)v250 = **(_OWORD **)v233;
      *(_OWORD *)&v250[16] = v86;
      v251 = v85;
      __src = 0;
      v254 = 0;
      v253 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__src, *(const void **)(*(_QWORD *)v233 + 40), *(_QWORD *)(*(_QWORD *)v233 + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)v233 + 48) - *(_QWORD *)(*(_QWORD *)v233 + 40)) >> 2);
      v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v233;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v240);
      v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v240);
      if (__p)
      {
        v248 = __p;
        operator delete(__p);
      }
      v87 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      *(_QWORD *)&v244 = &v194;
      v88 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v87, &v194, (__int128 **)&v244);
      v89 = *(_OWORD *)&v250[16];
      *(_OWORD *)(v88 + 56) = *(_OWORD *)v250;
      *(_OWORD *)(v88 + 72) = v89;
      *((_QWORD *)v88 + 11) = v251;
      if (v88 + 56 != v250)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v88 + 96, (char *)__src, (uint64_t)v253, (v253 - (_BYTE *)__src) >> 2);
      *(std::string::size_type *)((char *)&v240.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
      HIDWORD(v240.__r_.__value_.__r.__words[2]) = 0;
      LOBYTE(v241) = 0;
      v243 = 0;
      v242 = 0;
      v240.__r_.__value_.__r.__words[0] = 1;
      *(float *)&v240.__r_.__value_.__r.__words[1] = (float)(v9 * v8);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v90 = v214.__r_.__value_.__l.__size_;
      v91 = &v187;
      std::string::basic_string[abi:ne180100]((uint64_t)&v187, v90 + 19);
      if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v91 = (std::string *)v187.__r_.__value_.__r.__words[0];
      if (v90)
      {
        if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v92 = &v214;
        else
          v92 = (std::string *)v214.__r_.__value_.__r.__words[0];
        memmove(v91, v92, v90);
      }
      strcpy((char *)v91 + v90, "__ew_mul@l2_pooling");
      v93 = a2[1].i64[0];
      if (*(char *)(v93 + 39) >= 0)
        v94 = *(unsigned __int8 *)(v93 + 39);
      else
        v94 = *(_QWORD *)(v93 + 24);
      v95 = &v186;
      std::string::basic_string[abi:ne180100]((uint64_t)&v186, v94 + 19);
      if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v95 = (std::string *)v186.__r_.__value_.__r.__words[0];
      if (v94)
      {
        if (*(char *)(v93 + 39) >= 0)
          v96 = (const void *)(v93 + 16);
        else
          v96 = *(const void **)(v93 + 16);
        memmove(v95, v96, v94);
      }
      strcpy((char *)v95 + v94, "__ew_mul@l2_pooling");
      Espresso::abstract_engine_factory::shared(v224);
      v97 = *(_QWORD *)v224;
      std::string::basic_string[abi:ne180100]<0>(&v244, "elementwise");
      LODWORD(v177) = (***(uint64_t (****)(_QWORD))(v204 + 8))(*(_QWORD *)(v204 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v97, (uint64_t)&v204, (uint64_t)&v244, (uint64_t)&v240, (int *)&v177);
      if (*(_QWORD *)v233
      {
        v184 = (uint64_t)v98;
        v185 = *(_QWORD *)&v233[8];
        if (*(_QWORD *)&v233[8])
        {
          v99 = (unint64_t *)(*(_QWORD *)&v233[8] + 8);
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
        }
      }
      else
      {
        v184 = 0;
        v185 = 0;
      }
      v101 = *(std::__shared_weak_count **)&v233[8];
      if (*(_QWORD *)&v233[8])
      {
        v102 = (unint64_t *)(*(_QWORD *)&v233[8] + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      if (SBYTE7(v245) < 0)
        operator delete((void *)v244);
      v104 = *(std::__shared_weak_count **)&v224[8];
      if (*(_QWORD *)&v224[8])
      {
        v105 = (unint64_t *)(*(_QWORD *)&v224[8] + 8);
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = (std::__shared_weak_count *)v185;
      v183[0] = v184;
      v183[1] = v185;
      if (v185)
      {
        v108 = (unint64_t *)(v185 + 8);
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      std::string::basic_string[abi:ne180100]<0>(&v244, "elementwise");
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v224, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
      else
        *(std::string *)v224 = v194;
      memset(v233, 0, 24);
      v177 = (uint64_t)v233;
      LOBYTE(v178) = 0;
      *(_QWORD *)v233 = operator new(0x18uLL);
      *(_QWORD *)&v233[8] = *(_QWORD *)v233;
      *(_QWORD *)&v233[16] = *(_QWORD *)v233 + 24;
      *(_QWORD *)&v233[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v233[16], (__int128 *)v224, (__int128 *)&v224[24], *(std::string **)v233);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v238, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      else
        v238 = v187;
      v177 = 0;
      v178 = 0;
      v179 = 0;
      v176.__r_.__value_.__s.__data_[8] = 0;
      v177 = (uint64_t)operator new(0x18uLL);
      v178 = v177;
      v179 = v177 + 24;
      v178 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v179, (__int128 *)&v238, (__int128 *)&v239, (std::string *)v177);
      Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(a2, v183, (const std::string *)&v244, &v186, (std::string **)v233, (std::string **)&v177);
      v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v238.__r_.__value_.__l.__data_);
      v177 = (uint64_t)v233;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
      if ((v224[23] & 0x80000000) != 0)
        operator delete(*(void **)v224);
      if (SBYTE7(v245) < 0)
        operator delete((void *)v244);
      if (v107)
      {
        v110 = (unint64_t *)&v107->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v112 = v184;
      v113 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
      v114 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v113, &v194, (__int128 **)&v238);
      v115 = *(_OWORD *)(v114 + 72);
      *(_OWORD *)v233 = *(_OWORD *)(v114 + 56);
      *(_OWORD *)&v233[16] = v115;
      v116 = (const void *)*((_QWORD *)v114 + 12);
      v234 = *((_QWORD *)v114 + 11);
      v235 = 0;
      v236 = 0;
      v237 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v235, v116, *((_QWORD *)v114 + 13), (uint64_t)(*((_QWORD *)v114 + 13) - (_QWORD)v116) >> 2);
      v177 = 0;
      v178 = 0;
      v179 = 0;
      v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
      v238.__r_.__value_.__s.__data_[8] = 0;
      v177 = (uint64_t)operator new(0x40uLL);
      v178 = v177;
      v179 = v177 + 64;
      v178 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v179, (__int128 *)v233, (__int128 *)&v238, v177);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v112 + 64))(v224, v112, &v177);
      v117 = *(_QWORD *)(*(_QWORD *)v224 + 32);
      v118 = *(_OWORD *)(*(_QWORD *)v224 + 16);
      v244 = **(_OWORD **)v224;
      v245 = v118;
      v246 = v117;
      __p = 0;
      v249 = 0;
      v248 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(*(_QWORD *)v224 + 40), *(_QWORD *)(*(_QWORD *)v224 + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)v224 + 48) - *(_QWORD *)(*(_QWORD *)v224 + 40)) >> 2);
      v238.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
      v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
      if (v235)
      {
        v236 = v235;
        operator delete(v235);
      }
      v119 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      *(_QWORD *)v233 = &v187;
      v120 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v119, &v187, (__int128 **)v233);
      v121 = v245;
      *(_OWORD *)(v120 + 56) = v244;
      *(_OWORD *)(v120 + 72) = v121;
      *((_QWORD *)v120 + 11) = v246;
      if (v120 + 56 != (char *)&v244)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v120 + 96, (char *)__p, (uint64_t)v248, (v248 - (_BYTE *)__p) >> 2);
      v179 = 897988541;
      v180 = 0;
      v181 = 0;
      v182 = 0;
      v177 = 11;
      v178 = 1065353216;
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v238, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
      else
        v238 = v214;
      v122 = a2[1].i64[0];
      if (*(char *)(v122 + 39) >= 0)
        v123 = *(unsigned __int8 *)(v122 + 39);
      else
        v123 = *(_QWORD *)(v122 + 24);
      v124 = &v176;
      std::string::basic_string[abi:ne180100]((uint64_t)&v176, v123 + 20);
      if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v124 = (std::string *)v176.__r_.__value_.__r.__words[0];
      if (v123)
      {
        if (*(char *)(v122 + 39) >= 0)
          v125 = (const void *)(v122 + 16);
        else
          v125 = *(const void **)(v122 + 16);
        memmove(v124, v125, v123);
      }
      strcpy((char *)v124 + v123, "__ew_sqrt@l2_pooling");
      Espresso::abstract_engine_factory::shared(&v231);
      v126 = v231.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(v233, "elementwise");
      LODWORD(v169) = (***(uint64_t (****)(_QWORD))(v204 + 8))(*(_QWORD *)(v204 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v126, (uint64_t)&v204, (uint64_t)v233, (uint64_t)&v177, (int *)&v169);
      if (*(_QWORD *)v224
      {
        v174 = (uint64_t)v127;
        v175 = *(std::__shared_weak_count **)&v224[8];
        if (*(_QWORD *)&v224[8])
        {
          v128 = (unint64_t *)(*(_QWORD *)&v224[8] + 8);
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
      }
      else
      {
        v174 = 0;
        v175 = 0;
      }
      v130 = *(std::__shared_weak_count **)&v224[8];
      if (*(_QWORD *)&v224[8])
      {
        v131 = (unint64_t *)(*(_QWORD *)&v224[8] + 8);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      if ((v233[23] & 0x80000000) != 0)
        operator delete(*(void **)v233);
      v133 = (std::__shared_weak_count *)v231.__r_.__value_.__l.__size_;
      if (v231.__r_.__value_.__l.__size_)
      {
        v134 = (unint64_t *)(v231.__r_.__value_.__l.__size_ + 8);
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v172 = v174;
      v173 = v175;
      if (v175)
      {
        v136 = (unint64_t *)&v175->__shared_owners_;
        do
          v137 = __ldxr(v136);
        while (__stxr(v137 + 1, v136));
      }
      std::string::basic_string[abi:ne180100]<0>(v233, "elementwise");
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v231, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      else
        v231 = v187;
      memset(v224, 0, 24);
      v169 = (std::string *)v224;
      LOBYTE(p_data) = 0;
      *(_QWORD *)v224 = operator new(0x18uLL);
      *(_QWORD *)&v224[8] = *(_QWORD *)v224;
      *(_QWORD *)&v224[16] = *(_QWORD *)v224 + 24;
      *(_QWORD *)&v224[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v224[16], (__int128 *)&v231, (__int128 *)&v232, *(std::string **)v224);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v229, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
      else
        v229 = v238;
      v169 = 0;
      p_data = 0;
      v171 = 0;
      v222 = (void ***)&v169;
      v223 = 0;
      v169 = (std::string *)operator new(0x18uLL);
      p_data = (void **)&v169->__r_.__value_.__l.__data_;
      v171 = (void **)&v169[1].__r_.__value_.__l.__data_;
      p_data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v171, (__int128 *)&v229, (__int128 *)&v230, v169);
      Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(a2, &v172, (const std::string *)v233, &v176, (std::string **)v224, &v169);
      v222 = (void ***)&v169;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
      if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v229.__r_.__value_.__l.__data_);
      v169 = (std::string *)v224;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v231.__r_.__value_.__l.__data_);
      if ((v233[23] & 0x80000000) != 0)
        operator delete(*(void **)v233);
      v138 = v173;
      if (v173)
      {
        v139 = (unint64_t *)&v173->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      v141 = v174;
      v142 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      v229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
      v143 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v142, &v187, (__int128 **)&v229);
      v144 = *(_OWORD *)(v143 + 72);
      *(_OWORD *)v224 = *(_OWORD *)(v143 + 56);
      *(_OWORD *)&v224[16] = v144;
      v145 = (const void *)*((_QWORD *)v143 + 12);
      v225 = *((_QWORD *)v143 + 11);
      v226 = 0;
      v227 = 0;
      v228 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v226, v145, *((_QWORD *)v143 + 13), (uint64_t)(*((_QWORD *)v143 + 13) - (_QWORD)v145) >> 2);
      v169 = 0;
      p_data = 0;
      v171 = 0;
      v229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v169;
      v229.__r_.__value_.__s.__data_[8] = 0;
      v169 = (std::string *)operator new(0x40uLL);
      p_data = (void **)&v169->__r_.__value_.__l.__data_;
      v171 = (void **)&v169[2].__r_.__value_.__r.__words[2];
      p_data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v171, (__int128 *)v224, (__int128 *)&v229, (uint64_t)v169);
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string **))(*(_QWORD *)v141 + 64))(&v231, v141, &v169);
      v146 = *(_QWORD *)(v231.__r_.__value_.__r.__words[0] + 32);
      v147 = *(_OWORD *)(v231.__r_.__value_.__r.__words[0] + 16);
      *(_OWORD *)v233 = *(_OWORD *)v231.__r_.__value_.__l.__data_;
      *(_OWORD *)&v233[16] = v147;
      v234 = v146;
      v235 = 0;
      v237 = 0;
      v236 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v235, *(const void **)(v231.__r_.__value_.__r.__words[0] + 40), *(_QWORD *)(v231.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(_QWORD *)(v231.__r_.__value_.__r.__words[0] + 48)- *(_QWORD *)(v231.__r_.__value_.__r.__words[0] + 40)) >> 2);
      v229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
      v229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v169;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
      if (v226)
      {
        v227 = v226;
        operator delete(v226);
      }
      v148 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
      *(_QWORD *)v224 = &v238;
      v149 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, &v238, (__int128 **)v224);
      v150 = *(_OWORD *)&v233[16];
      *(_OWORD *)(v149 + 56) = *(_OWORD *)v233;
      *(_OWORD *)(v149 + 72) = v150;
      *((_QWORD *)v149 + 11) = v234;
      if (v149 + 56 != v233)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v149 + 96, (char *)v235, (uint64_t)v236, (v236 - (_BYTE *)v235) >> 2);
      if (v235)
      {
        v236 = v235;
        operator delete(v235);
      }
      v151 = v175;
      if (v175)
      {
        v152 = (unint64_t *)&v175->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v238.__r_.__value_.__l.__data_);
      if (__p)
      {
        v248 = __p;
        operator delete(__p);
      }
      v154 = (std::__shared_weak_count *)v185;
      if (v185)
      {
        v155 = (unint64_t *)(v185 + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v186.__r_.__value_.__l.__data_);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v187.__r_.__value_.__l.__data_);
      if (__src)
      {
        v253 = __src;
        operator delete(__src);
      }
      v157 = v190;
      if (v190)
      {
        v158 = (unint64_t *)&v190->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v160 = (std::__shared_weak_count *)v192;
      if (v192)
      {
        v161 = (unint64_t *)(v192 + 8);
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v193.__r_.__value_.__l.__data_);
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v194.__r_.__value_.__l.__data_);
      if (v198)
      {
        v199 = v198;
        operator delete(v198);
      }
      v163 = (std::__shared_weak_count *)v203;
      if (v203)
      {
        v164 = (unint64_t *)(v203 + 8);
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      v166 = v205;
      if (v205)
      {
        v167 = (unint64_t *)&v205->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v206.__r_.__value_.__l.__data_);
      if (SHIBYTE(v208) < 0)
        operator delete((void *)v207);
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v213.__r_.__value_.__l.__data_);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
    }
  }
}

void sub_190EC891C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a71;
  uint64_t a72;
  char a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *v79;
  void *v80;

  a12 = (uint64_t)&STACK[0x2F0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a24 < 0)
    operator delete(a19);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  v79 = (void *)STACK[0x438];
  if (STACK[0x438])
  {
    STACK[0x440] = (unint64_t)v79;
    operator delete(v79);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  v80 = (void *)STACK[0x478];
  if (STACK[0x478])
  {
    STACK[0x480] = (unint64_t)v80;
    operator delete(v80);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  if (a59 < 0)
    operator delete(a54);
  if (a65 < 0)
    operator delete(a60);
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a73);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a74);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_190EC8E70()
{
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x350]);
  JUMPOUT(0x190EC8D70);
}

void sub_190EC8E90()
{
  JUMPOUT(0x190EC8DA0);
}

void sub_190EC8E98()
{
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  JUMPOUT(0x190EC8DA8);
}

void sub_190EC8EC0()
{
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x370]);
  JUMPOUT(0x190EC8DE8);
}

void sub_190EC8EE0()
{
  JUMPOUT(0x190EC8E18);
}

void sub_190EC8EE8()
{
  uint64_t v0;

  if (*(char *)(v0 - 201) < 0)
    operator delete(*(void **)(v0 - 224));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x450]);
  JUMPOUT(0x190EC8E20);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v19 = a4;
  v15 = 0;
  v17 = 0;
  v16 = 0;
  v14 = 0x200000002;
  v18 = 0;
  Espresso::SerDes::params_io<Espresso::split_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "split");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190EC905C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::split_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "cut");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v22 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "n_outputs");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v25 = v38;
    if (v38)
    {
      v26 = (unint64_t *)&v38->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "legacy_cut_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v28 = v38;
    if (v38)
    {
      v29 = (unint64_t *)&v38->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v31 = v38;
    if (v38)
    {
      v32 = (unint64_t *)&v38->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_BYTE *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 88))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v19 = v38;
    if (!v38)
      goto LABEL_100;
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v34);
    while (__stlxr(v21 - 1, v34));
    goto LABEL_98;
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "cut");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 12);
  if (v40 < 0)
    operator delete(__p[0]);
  v5 = v38;
  if (v38)
  {
    v6 = (unint64_t *)&v38->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v36 < 0)
    operator delete(v35[0]);
  std::string::basic_string[abi:ne180100]<0>(v35, "n_outputs");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2);
  if (v40 < 0)
    operator delete(__p[0]);
  v8 = v38;
  if (v38)
  {
    v9 = (unint64_t *)&v38->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v36 < 0)
    operator delete(v35[0]);
  if (*(_DWORD *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "legacy_cut_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 16);
    if (v40 < 0)
      operator delete(__p[0]);
    v11 = v38;
    if (v38)
    {
      v12 = (unint64_t *)&v38->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
  }
  if (*(_DWORD *)(a2 + 4) != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 4);
    if (v40 < 0)
      operator delete(__p[0]);
    v14 = v38;
    if (v38)
    {
      v15 = (unint64_t *)&v38->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
  }
  v18 = *(unsigned __int8 *)(a2 + 8);
  v17 = a2 + 8;
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 208))(v37, __p, v17);
    if (v40 < 0)
      operator delete(__p[0]);
    v19 = v38;
    if (!v38)
      goto LABEL_100;
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
LABEL_98:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
LABEL_100:
    if (v36 < 0)
      operator delete(v35[0]);
  }
}

void sub_190EC9700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_library_retain_program_function(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC9328;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190EC9830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::map_const_get<std::unordered_map<std::string,std::string>>(std::string *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;

  v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, a3);
  if (v6)
  {
    if ((*((char *)v6 + 63) & 0x80000000) == 0)
    {
      v7 = *(_OWORD *)(v6 + 5);
      a1->__r_.__value_.__r.__words[2] = v6[7];
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v7;
      return;
    }
    v8 = (const std::string::value_type *)v6[5];
    v9 = v6[6];
  }
  else
  {
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
      return;
    }
    v8 = *(const std::string::value_type **)a4;
    v9 = *(_QWORD *)(a4 + 8);
  }
  std::string::__init_copy_ctor_external(a1, v8, v9);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<MIL::IRProgram>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  int v6;
  std::string *v7;
  uint64_t v8;
  std::string v9;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v11;
  std::__fs::filesystem::path v12;

  memset(&v11, 0, sizeof(v11));
  v6 = *(char *)(a1 + 55);
  if (v6 >= 0)
    v7 = (std::string *)(a1 + 32);
  else
    v7 = *(std::string **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 55);
  std::string::append[abi:ne180100]<char const*,0>(&v11.__pn_, v7, (std::string *)((char *)v7 + v8));
  std::__fs::filesystem::operator/[abi:ne180100](&v11, a1 + 8, &v12);
  E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(a2, 0, &v9);
  __p.__pn_ = v9;
  memset(&v9, 0, sizeof(v9));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&v12, a3);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v9.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_13:
  operator delete(v12.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_190EC9C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
  {
    operator delete(a16);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 33) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((*(char *)(v28 - 33) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(*(void **)(v28 - 56));
  if ((a28 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_190EC9CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if ((a22 & 0x80000000) == 0)
    JUMPOUT(0x190EC9C60);
  JUMPOUT(0x190EC9C58);
}

void E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 v6;
  __int128 *v7;
  size_t v8;
  char *v9;
  __int128 *v10;
  char *v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  char v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  std::string *v21;
  std::string *i;
  int v23;
  BOOL v24;
  std::string *v25;
  std::string::size_type size;
  uint64_t v27;
  void **v28;
  void *v29;
  void **p_data;
  void **v31;
  std::string *v32;
  void **v33;
  void *v34;
  void *__dst;
  char *v36;
  std::string __p;
  uint64_t v38;
  char v39[55];
  char v40;
  uint64_t __src;
  void *v42[2];
  void *v43;
  std::string *v44;
  std::string *v45;
  uint64_t v46;
  void *v47[2];
  unsigned __int8 v48;

  v6 = atomic_load((unsigned __int8 *)&qword_1EE214768);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EE214768))
  {
    xmmword_1EE214788 = 0uLL;
    unk_1EE214798 = 0;
    __cxa_guard_release(&qword_1EE214768);
  }
  if (qword_1EE214760 != -1)
    dispatch_once(&qword_1EE214760, &unk_1E2DC8000);
  if (byte_1EE21479F >= 0)
    v7 = &xmmword_1EE214788;
  else
    v7 = (__int128 *)xmmword_1EE214788;
  if (byte_1EE21479F >= 0)
    v8 = byte_1EE21479F;
  else
    v8 = *((_QWORD *)&xmmword_1EE214788 + 1);
  __dst = 0;
  v36 = 0;
  v34 = 0;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    v34 = v9;
    __dst = v9;
    v36 = &v9[v8];
    if (v8 < 0x20)
    {
      v10 = v7;
    }
    else
    {
      v10 = v7;
      if ((unint64_t)(v9 - (char *)v7) >= 0x20)
      {
        v10 = (__int128 *)((char *)v7 + (v8 & 0xFFFFFFFFFFFFFFE0));
        v11 = &v9[v8 & 0xFFFFFFFFFFFFFFE0];
        v12 = v9 + 16;
        v13 = v7 + 1;
        v14 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v15 = *v13;
          *(v12 - 1) = *(v13 - 1);
          *v12 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 32;
        }
        while (v14);
        v9 += v8 & 0xFFFFFFFFFFFFFFE0;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_21;
      }
    }
    v11 = v9;
    do
    {
      v16 = *(_BYTE *)v10;
      v10 = (__int128 *)((char *)v10 + 1);
      *v11++ = v16;
    }
    while (v10 != (__int128 *)((char *)v7 + v8));
LABEL_21:
    __dst = v11;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v47, a1);
  v17 = v48;
  if ((v48 & 0x80u) == 0)
    v18 = (char *)v47;
  else
    v18 = (char *)v47[0];
  if ((v48 & 0x80u) != 0)
    v17 = (unint64_t)v47[1];
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<char *>,std::__wrap_iter<char *>,std::back_insert_iterator<std::vector<unsigned char>>,0>(v18, &v18[v17], (unint64_t *)&v34);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  E5RT::GetPathsToMILWeights<MIL::IRProgram>((uint64_t)v42);
  if (v43)
  {
    v19 = 0;
    v20 = v43;
    do
    {
      ++v19;
      v20 = (_QWORD *)*v20;
    }
    while (v20);
  }
  else
  {
    v19 = 0;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void **)&v44, (uint64_t)v45, v43, 0, v19);
  v21 = v44;
  for (i = v45; v21 != i; ++v21)
  {
    __src = 0;
    memset(&__p, 0, sizeof(__p));
    v23 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
    v24 = v23 < 0;
    if (v23 >= 0)
      v25 = v21;
    else
      v25 = (std::string *)v21->__r_.__value_.__r.__words[0];
    size = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    if (v24)
      size = v21->__r_.__value_.__l.__size_;
    std::string::append[abi:ne180100]<char const*,0>(&__p, v25, (std::string *)((char *)v25 + size));
    E5RT::FileUpdateIdentifier::FileUpdateIdentifier((E5RT::FileUpdateIdentifier *)&v38, (const std::__fs::filesystem::path *)&__p);
    v27 = std::hash<E5RT::FileUpdateIdentifier>::operator()((uint64_t)&v40, &v38);
    E5RT::FileUpdateIdentifier::~FileUpdateIdentifier((void **)&v38);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __src = v27;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v34, (char *)__dst, (char *)&__src, (char *)v42, 8);
  }
  v28 = (void **)v43;
  if (v43)
  {
    do
    {
      v33 = (void **)*v28;
      if (*((char *)v28 + 39) < 0)
        operator delete(v28[2]);
      operator delete(v28);
      v28 = v33;
    }
    while (v33);
  }
  v29 = v42[0];
  v42[0] = 0;
  if (v29)
    operator delete(v29);
  p_data = (void **)&v44->__r_.__value_.__l.__data_;
  if (v44)
  {
    v31 = (void **)&v45->__r_.__value_.__l.__data_;
    v32 = v44;
    if (v45 != v44)
    {
      do
      {
        if (*((char *)v31 - 1) < 0)
          operator delete(*(v31 - 3));
        v31 -= 3;
      }
      while (v31 != p_data);
      v32 = v44;
    }
    v45 = (std::string *)p_data;
    operator delete(v32);
  }
  if ((char)v48 < 0)
  {
    operator delete(v47[0]);
    if (!a2)
      goto LABEL_60;
    goto LABEL_59;
  }
  if (a2)
  {
LABEL_59:
    v38 = std::hash<E5RT::E5CompilerOptions>::operator()((uint64_t)&v38, a2);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v34, (char *)__dst, (char *)&v38, v39, 8);
  }
LABEL_60:
  E5Common::StringUtils::ComputeHashString((uint64_t)&v34, a3);
  if (v34)
  {
    __dst = v34;
    operator delete(v34);
  }
}

void sub_190ECA048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a27);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v27 - 112));
  if (*(char *)(v27 - 65) < 0)
    operator delete(*(void **)(v27 - 88));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(std::string *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 v6;
  __int128 *v7;
  size_t v8;
  _OWORD *v9;
  __int128 *v10;
  _BYTE *v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  char v16;
  std::string *v17;
  std::string *v18;
  int v19;
  BOOL v20;
  std::string *v21;
  std::string::size_type size;
  uint64_t v23;
  std::string *v24;
  std::string *v25;
  void *v26;
  void *__dst;
  char *v28;
  std::string __p;
  uint64_t v30;
  char v31[55];
  char v32;
  uint64_t __src;
  std::string *v34;
  std::string *v35;

  v6 = atomic_load((unsigned __int8 *)&qword_1EE214758);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EE214758))
  {
    xmmword_1EE214770 = 0uLL;
    unk_1EE214780 = 0;
    __cxa_guard_release(&qword_1EE214758);
  }
  if (qword_1EE214750 != -1)
    dispatch_once(&qword_1EE214750, &unk_1E2DC7FE0);
  if (byte_1EE214787 >= 0)
    v7 = &xmmword_1EE214770;
  else
    v7 = (__int128 *)xmmword_1EE214770;
  if (byte_1EE214787 >= 0)
    v8 = byte_1EE214787;
  else
    v8 = *((_QWORD *)&xmmword_1EE214770 + 1);
  __dst = 0;
  v28 = 0;
  v26 = 0;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = operator new(v8);
    v26 = v9;
    v28 = (char *)v9 + v8;
    if (v8 < 0x20)
    {
      v10 = v7;
      v11 = v9;
    }
    else
    {
      v10 = v7;
      v11 = v9;
      if ((unint64_t)((char *)v9 - (char *)v7) >= 0x20)
      {
        v10 = (__int128 *)((char *)v7 + (v8 & 0xFFFFFFFFFFFFFFE0));
        v11 = (char *)v9 + (v8 & 0xFFFFFFFFFFFFFFE0);
        v12 = v9 + 1;
        v13 = v7 + 1;
        v14 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v15 = *v13;
          *(v12 - 1) = *(v13 - 1);
          *v12 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 32;
        }
        while (v14);
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_20;
      }
    }
    do
    {
      v16 = *(_BYTE *)v10;
      v10 = (__int128 *)((char *)v10 + 1);
      *v11++ = v16;
    }
    while (v10 != (__int128 *)((char *)v7 + v8));
LABEL_20:
    __dst = v11;
  }
  E5RT::E5BundleCacheKeyUtils::GetAllAssociatedFiles(a1, (void **)&v34);
  v17 = v34;
  v18 = v35;
  if (v34 != v35)
  {
    do
    {
      __src = 0;
      memset(&__p, 0, sizeof(__p));
      v19 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
      v20 = v19 < 0;
      if (v19 >= 0)
        v21 = v17;
      else
        v21 = (std::string *)v17->__r_.__value_.__r.__words[0];
      size = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      if (v20)
        size = v17->__r_.__value_.__l.__size_;
      std::string::append[abi:ne180100]<char const*,0>(&__p, v21, (std::string *)((char *)v21 + size));
      E5RT::FileUpdateIdentifier::FileUpdateIdentifier((E5RT::FileUpdateIdentifier *)&v30, (const std::__fs::filesystem::path *)&__p);
      v23 = std::hash<E5RT::FileUpdateIdentifier>::operator()((uint64_t)&v32, &v30);
      E5RT::FileUpdateIdentifier::~FileUpdateIdentifier((void **)&v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __src = v23;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v26, (char *)__dst, (char *)&__src, (char *)&v34, 8);
      ++v17;
    }
    while (v17 != v18);
    v17 = v34;
  }
  if (v17)
  {
    v24 = v35;
    v25 = v17;
    if (v35 != v17)
    {
      do
      {
        if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24[-1].__r_.__value_.__l.__data_);
        --v24;
      }
      while (v24 != v17);
      v25 = v34;
    }
    v35 = v17;
    operator delete(v25);
  }
  if (a2)
  {
    v30 = std::hash<E5RT::E5CompilerOptions>::operator()((uint64_t)&v30, a2);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v26, (char *)__dst, (char *)&v30, v31, 8);
  }
  E5Common::StringUtils::ComputeHashString((uint64_t)&v26, a3);
  if (v26)
  {
    __dst = v26;
    operator delete(v26);
  }
}

void sub_190ECA378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  _Unwind_Resume(exception_object);
}

uint64_t std::hash<E5RT::FileUpdateIdentifier>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string *p_p;
  std::string::size_type size;
  unint64_t v7;
  std::string __p;
  char v10;

  v3 = *a2;
  v4 = a2[1];
  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a2[2], a2[3]);
  else
    __p = *(std::string *)(a2 + 2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v10, (uint64_t *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3 ^ (2 * v4) ^ (4 * v7) ^ (8 * *((unsigned int *)a2 + 10)) ^ (16 * a2[6]);
}

uint64_t E5Common::StringUtils::ComputeHashString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 md[32];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  CC_SHA256(*(const void **)a1, *(_DWORD *)(a1 + 8) - *(_QWORD *)a1, md);
  return E5Common::StringUtils::ConvertToHexString((E5Common::StringUtils *)md, (const unsigned __int8 *)0x20, a2);
}

uint64_t E5Common::StringUtils::ConvertToHexString@<X0>(E5Common::StringUtils *this@<X0>, const unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  std::locale::id *v11;
  uint64_t v12;
  const std::ios_base *v13;
  const std::locale::facet *v14;
  unsigned __int8 v15;
  unint64_t v16;
  unsigned __int8 *locale;
  std::string *v18;
  std::string *v20;
  std::locale v21[2];
  std::string::size_type v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p[2];
  __int128 v26;
  int v27;
  uint64_t v28[20];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v28[0] = MEMORY[0x1E0DE4FE0] + 64;
  v23 = v8;
  *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24));
  std::ios_base::init(v10, v24);
  v20 = a3;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v23 = v6 + 24;
  v28[0] = v7;
  std::streambuf::basic_streambuf();
  v24[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v26 = 0u;
  v27 = 16;
  if (a2)
  {
    v11 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v12 = v23;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v23 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v23 - 24)) & 0xFFFFFFB5 | 8;
      *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v12 - 24)) = 2;
      v13 = (const std::ios_base *)((char *)&v24[-1] + *(_QWORD *)(v12 - 24));
      if (v13[1].__fmtflags_ == -1)
      {
        std::ios_base::getloc(v13);
        v14 = std::locale::use_facet(v21, v11);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 32);
        std::locale::~locale(v21);
      }
      v13[1].__fmtflags_ = 48;
      std::ostream::operator<<();
      this = (E5Common::StringUtils *)((char *)this + 1);
      --a2;
    }
    while (a2);
  }
  std::stringbuf::str();
  v15 = HIBYTE(v22);
  if (SHIBYTE(v22) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)v21[0].__locale_, (std::string::size_type)v21[1].__locale_);
    v15 = HIBYTE(v22);
    if (SHIBYTE(v22) < 0)
    {
      locale = (unsigned __int8 *)v21[0].__locale_;
      v16 = (unint64_t)v21[1].__locale_;
      if (!v21[1].__locale_)
        goto LABEL_16;
    }
    else
    {
      v16 = HIBYTE(v22);
      locale = (unsigned __int8 *)v21;
      if (!HIBYTE(v22))
        goto LABEL_16;
    }
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v21[0].__locale_;
    v20->__r_.__value_.__r.__words[2] = v22;
    v16 = v15;
    locale = (unsigned __int8 *)v21;
    if (!v15)
      goto LABEL_16;
  }
  if ((v20->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = v20;
  else
    v18 = (std::string *)v20->__r_.__value_.__r.__words[0];
  do
  {
    v18->__r_.__value_.__s.__data_[0] = __toupper(*locale);
    v18 = (std::string *)((char *)v18 + 1);
    ++locale;
    --v16;
  }
  while (v16);
  v15 = HIBYTE(v22);
LABEL_16:
  if ((v15 & 0x80) != 0)
    operator delete(v21[0].__locale_);
  v23 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v24[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401CCD0](v28);
}

void sub_190ECA784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if ((a17 & 0x80000000) == 0)
  {
    std::ostringstream::~ostringstream((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_190ECA850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5RT::FileUpdateIdentifier::~FileUpdateIdentifier(void **this)
{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

E5RT::FileUpdateIdentifier *E5RT::FileUpdateIdentifier::FileUpdateIdentifier(E5RT::FileUpdateIdentifier *this, const std::__fs::filesystem::path *a2)
{
  std::string *v4;
  std::string *p_pn;
  int v7;
  void *exception;
  int *v10;
  std::string *v11;
  __int128 v12;
  void *v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  std::string v17;
  _OWORD v18[2];
  std::string pn;
  __int128 v20;
  std::string::size_type v21;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (std::string *)((char *)this + 16);
  *((_QWORD *)this + 4) = 0;
  std::__fs::filesystem::__status(a2, 0);
  if (LOBYTE(v18[0]) == 255 || LOBYTE(v18[0]) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "FileUpdateIdentifier");
    if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
    else
      pn = a2->__pn_;
    v14 = std::string::insert(&pn, 0, "Input file path does not exist: ");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v21 = v14->__r_.__value_.__r.__words[2];
    v20 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(&v17, 1, &v20);
    E5RT::E5RTError::E5RTError(exception, v18, &v17);
  }
  memset(v18, 0, sizeof(v18));
  v20 = xmmword_191A84FDC;
  v21 = 0;
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  else
    pn = a2->__pn_;
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_pn = &pn;
  else
    p_pn = (std::string *)pn.__r_.__value_.__r.__words[0];
  v7 = getattrlist((const char *)p_pn, &v20, v18, 0x20uLL, 0x20u);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  if (v7 < 0)
  {
    v10 = __error();
    std::to_string(&v17, *v10);
    v11 = std::string::insert(&v17, 0, "getattrlist failed with error = ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    pn.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v13 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "FileUpdateIdentifier");
    E5RT::Status::Status(&v16, 2, &pn);
    E5RT::E5RTError::E5RTError(v13, &v17, &v16);
  }
  *((_QWORD *)this + 6) = *((_QWORD *)&v18[1] + 1);
  *((_DWORD *)this + 10) = DWORD1(v18[1]);
  *(_OWORD *)this = *(_OWORD *)((char *)v18 + 4);
  std::string::operator=(v4, &a2->__pn_);
  return this;
}

void sub_190ECAB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void **v28;
  uint64_t v29;
  void *v30;
  int v31;

  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
        operator delete(a23);
      if (*(char *)(v29 + 39) < 0)
        operator delete(*v28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void E5RT::E5BundleCacheKeyUtils::GetAllAssociatedFiles(std::string *a1@<X0>, void **a2@<X8>)
{
  std::string::size_type size;
  std::string *v5;
  const std::__fs::filesystem::path *v6;
  char IsFileMIL;
  char v8;
  std::string::size_type v9;
  std::string *v10;
  const std::__fs::filesystem::path *v11;
  char IsFileMILHash;
  char v13;
  std::string::size_type v14;
  std::string *v15;
  const std::__fs::filesystem::path *v16;
  int IsFileEIR;
  std::string::size_type v18;
  std::string *v19;
  std::__fs::filesystem::path *v20;
  __int128 v21;
  _QWORD *v22;
  __int128 v23;
  char *v24;
  int v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  _BOOL4 v33;
  id v34;
  const char *v35;
  size_t v36;
  std::string::size_type v37;
  _BYTE *p_replacement;
  uint64_t v39;
  uint64_t v40;
  std::string::size_type v41;
  std::string *v42;
  std::__fs::filesystem::path::__string_view v43;
  _BYTE *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v45;
  std::basic_string_view<_CharT, _Traits>::size_type v46;
  std::string::size_type v47;
  std::__fs::filesystem::path *v48;
  _QWORD *v49;
  __int128 v50;
  char *v51;
  int v52;
  void *exception;
  std::__fs::filesystem::path __p;
  std::string pn;
  std::__fs::filesystem::path v56;
  std::__fs::filesystem::path v57;
  void *v58[2];
  std::string::size_type v59;
  std::__fs::filesystem::path __replacement;
  id v61;
  std::string __dst;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, a1->__r_.__value_.__l.__data_, a1->__r_.__value_.__l.__size_);
  else
    __dst = *a1;
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__dst, 1uLL);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  memset(&__dst, 0, sizeof(__dst));
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v5 = a1;
  else
    v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v5, (std::string *)((char *)v5 + size));
  IsFileMIL = E5RT::IsFileMIL(&__dst, v6);
  v8 = IsFileMIL;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v8 & 1) != 0)
      return;
  }
  else if ((IsFileMIL & 1) != 0)
  {
    return;
  }
  memset(&__dst, 0, sizeof(__dst));
  v9 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v9 & 0x80u) == 0)
    v10 = a1;
  else
    v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((v9 & 0x80u) != 0)
    v9 = a1->__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v10, (std::string *)((char *)v10 + v9));
  IsFileMILHash = E5RT::IsFileMILHash(&__dst, v11);
  v13 = IsFileMILHash;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v13 & 1) != 0)
      return;
  }
  else if ((IsFileMILHash & 1) != 0)
  {
    return;
  }
  memset(&__dst, 0, sizeof(__dst));
  v14 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v14 & 0x80u) == 0)
    v15 = a1;
  else
    v15 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((v14 & 0x80u) != 0)
    v14 = a1->__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v15, (std::string *)((char *)v15 + v14));
  IsFileEIR = E5RT::IsFileEIR(&__dst, v16);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!IsFileEIR)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__dst, "GetAllAssociatedFiles");
    std::string::basic_string[abi:ne180100]<0>(&__replacement, "Unknown input file type.");
    E5RT::Status::Status(v58, 1, &__replacement);
    E5RT::E5RTError::E5RTError(exception, &__dst, v58);
  }
  memset(&v56, 0, sizeof(v56));
  v18 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v18 & 0x80u) == 0)
    v19 = a1;
  else
    v19 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((v18 & 0x80u) != 0)
    v18 = a1->__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&v56.__pn_, v19, (std::string *)((char *)v19 + v18));
  memset(&__replacement, 0, sizeof(__replacement));
  std::string::append[abi:ne180100]<char const*,0>(&__replacement.__pn_, (std::string *)".shape", (std::string *)"");
  v20 = std::__fs::filesystem::path::replace_extension(&v56, &__replacement);
  if (SHIBYTE(v20->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, v20->__pn_.__r_.__value_.__l.__data_, v20->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v21 = *(_OWORD *)&v20->__pn_.__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v20->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v21;
  }
  v22 = a2[1];
  if (v22 >= a2[2])
  {
    v24 = std::vector<std::string>::__push_back_slow_path<std::string>(a2, (uint64_t)&__dst);
    v25 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    a2[1] = v24;
    if (v25 < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    v22[2] = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    *(_OWORD *)v22 = v23;
    memset(&__dst, 0, sizeof(__dst));
    a2[1] = v22 + 3;
  }
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  v26 = (void *)MEMORY[0x1E0C99D50];
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = (uint64_t *)a1;
  else
    v27 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "dataWithContentsOfFile:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    v61 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v29, 0, &v61);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v61;
    if (v31
      || !v30
      || (objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("storage")),
          v32 = (void *)objc_claimAutoreleasedReturnValue(),
          v33 = v32 == 0,
          v32,
          v33))
    {
      sub_190EF4ACC(&__p, a1);
      goto LABEL_84;
    }
    objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("storage"));
    v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v35 = (const char *)objc_msgSend(v34, "UTF8String");
    v36 = strlen(v35);
    if (v36 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v37 = v36;
    if (v36 >= 0x17)
    {
      v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v39 = v36 | 7;
      v40 = v39 + 1;
      p_replacement = operator new(v39 + 1);
      __replacement.__pn_.__r_.__value_.__l.__size_ = v37;
      __replacement.__pn_.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
      __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_replacement;
    }
    else
    {
      *((_BYTE *)&__replacement.__pn_.__r_.__value_.__s + 23) = v36;
      p_replacement = &__replacement;
      if (!v36)
      {
LABEL_61:
        p_replacement[v37] = 0;
        memset(&v57, 0, sizeof(v57));
        v41 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        if ((v41 & 0x80u) == 0)
          v42 = a1;
        else
          v42 = (std::string *)a1->__r_.__value_.__r.__words[0];
        if ((v41 & 0x80u) != 0)
          v41 = a1->__r_.__value_.__l.__size_;
        std::string::append[abi:ne180100]<char const*,0>(&v57.__pn_, v42, (std::string *)((char *)v42 + v41));
        v43 = std::__fs::filesystem::path::__parent_path(&v57);
        if (v43.__size_ > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v43.__size_ >= 0x17)
        {
          v45 = (v43.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v43.__size_ | 7) != 0x17)
            v45 = v43.__size_ | 7;
          v46 = v45 + 1;
          p_dst = operator new(v45 + 1);
          __dst.__r_.__value_.__l.__size_ = v43.__size_;
          __dst.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          v31 = 0;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v43.__size_;
          p_dst = &__dst;
          v31 = 0;
          if (!v43.__size_)
          {
LABEL_74:
            p_dst[v43.__size_] = 0;
            v59 = __dst.__r_.__value_.__r.__words[2];
            v47 = HIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]);
            if ((__replacement.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v48 = &__replacement;
            else
              v48 = (std::__fs::filesystem::path *)__replacement.__pn_.__r_.__value_.__r.__words[0];
            *(_OWORD *)v58 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            memset(&__dst, 0, sizeof(__dst));
            if ((__replacement.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v47 = __replacement.__pn_.__r_.__value_.__l.__size_;
            std::string::append[abi:ne180100]<char const*,0>(&__dst, &v48->__pn_, (std::string *)((char *)&v48->__pn_ + v47));
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)v58, &__p);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v59) & 0x80000000) == 0)
              {
LABEL_81:
                if ((SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_82;
                goto LABEL_98;
              }
            }
            else if ((SHIBYTE(v59) & 0x80000000) == 0)
            {
              goto LABEL_81;
            }
            operator delete(v58[0]);
            if ((SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_82:
              if ((SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_83:

LABEL_84:
                goto LABEL_85;
              }
LABEL_99:
              operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
              goto LABEL_83;
            }
LABEL_98:
            operator delete(v57.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_83;
            goto LABEL_99;
          }
        }
        memmove(p_dst, v43.__data_, v43.__size_);
        goto LABEL_74;
      }
    }
    memmove(p_replacement, v35, v37);
    goto LABEL_61;
  }
  sub_190EF4ACC(&__p, a1);
LABEL_85:

  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
  else
    pn = __p.__pn_;
  v49 = a2[1];
  if (v49 < a2[2])
  {
    v50 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
    v49[2] = *((_QWORD *)&pn.__r_.__value_.__l + 2);
    *(_OWORD *)v49 = v50;
    memset(&pn, 0, sizeof(pn));
    a2[1] = v49 + 3;
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_90;
LABEL_94:
    if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_91;
    return;
  }
  v51 = std::vector<std::string>::__push_back_slow_path<std::string>(a2, (uint64_t)&pn);
  v52 = SHIBYTE(pn.__r_.__value_.__r.__words[2]);
  a2[1] = v51;
  if (v52 < 0)
  {
    operator delete(pn.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_94;
  }
  else if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_94;
  }
LABEL_90:
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_91:
    operator delete(v56.__pn_.__r_.__value_.__l.__data_);
}

void sub_190ECB31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void **v47;
  void *v48;
  void *v49;

  if (a28 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](v47);
    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100](v47);
  _Unwind_Resume(a1);
}

void sub_190ECB544(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x190ECB564);
}

uint64_t E5RT::IsFileMIL(std::string *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;
  std::string v6;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    v6 = *this;
  v5 = 4;
  strcpy((char *)__p, ".mil");
  v2 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)&v6, (unsigned __int8 *)__p);
  if (v5 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v2;
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return v2;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return v2;
}

void sub_190ECB61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *E5RT::GetPathsToMILWeights<MIL::IRProgram>@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3[0] = &off_1E2DD0788;
  v3[1] = a1;
  v4 = v3;
  MIL::Util::Walk();
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_190ECB700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void Espresso::layer::~layer(void **this)
{
  Espresso::layer *v2;
  uint64_t v3;
  void **v4;

  *this = &off_1E2DA1A38;
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  v2 = (Espresso::layer *)this[23];
  if (v2 == (Espresso::layer *)(this + 20))
  {
    v3 = 4;
    v2 = (Espresso::layer *)(this + 20);
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_8:
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  v4 = this + 13;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = this + 10;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  Espresso::layer::~layer(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::get_shape_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t i;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  Espresso *v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  _WORD *v55;
  uint64_t v56;
  int v57;
  unint64_t v63;
  _DWORD *v64;
  unint64_t j;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  void *__p;
  void *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  _QWORD v83[2];
  unsigned int v84;

  v7 = *a3;
  v8 = **a3;
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8))
  {
    v9 = *(_QWORD *)(*v7 + 160);
    v41 = *(std::__shared_weak_count **)(*v7 + 168);
    v81 = v9;
    v82 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(p_shared_owners);
      while (__stxr(v43 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v81 = 0;
    v82 = 0;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v79, *a3);
  v10 = *a3;
  v11 = **a3;
  if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11) == 3)
  {
    v12 = *v10;
    v14 = *(_QWORD *)(*v10 + 208);
    v13 = *(std::__shared_weak_count **)(v12 + 216);
    v77 = v14;
    v78 = v13;
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  else
  {
    v14 = 0;
    v77 = 0;
    v78 = 0;
  }
  v17 = *a3;
  v18 = **a3;
  if (v18 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18) == 1)
  {
    v19 = *v17;
    v21 = *(_QWORD *)(*v17 + 176);
    v20 = *(std::__shared_weak_count **)(v19 + 184);
    v75 = v21;
    v76 = v20;
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  else
  {
    v21 = 0;
    v75 = 0;
    v76 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v68, **a4);
  if (v9)
  {
    Espresso::get_shape_kernel_cpu::__compute<Espresso::blob<float,4>,float>(a1, (uint64_t)&v81, (Espresso::layer_shape *)&v68);
    goto LABEL_20;
  }
  v36 = v79;
  if (v79)
  {
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a3 + 32))(**a3);
    v38 = *(_DWORD *)(a1 + 284);
    if (v37 == 2)
    {
      if (!v38)
      {
        switch(*(_DWORD *)(a1 + 280))
        {
          case 0xFFFFFFFF:
            goto LABEL_76;
          case 0:
            goto LABEL_90;
          case 1:
            goto LABEL_88;
          case 2:
            goto LABEL_89;
          case 3:
            goto LABEL_87;
          case 4:
            goto LABEL_91;
          default:
            goto LABEL_20;
        }
        goto LABEL_20;
      }
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v83, (const Espresso::layer_shape *)&v68, 0);
      v39 = *(int *)(a1 + 280);
      if ((_DWORD)v39 == -1)
      {
        if (v84)
        {
          for (i = 0; i < v84; ++i)
            *(_BYTE *)(*(_QWORD *)(v36 + 24) + i) = *((_DWORD *)v83 + i);
        }
        goto LABEL_20;
      }
LABEL_62:
      v46 = *((_DWORD *)v83 + v39);
LABEL_63:
      **(_BYTE **)(v36 + 24) = v46;
      goto LABEL_20;
    }
    if (v38)
    {
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v83, (const Espresso::layer_shape *)&v68, 0);
      v39 = *(int *)(a1 + 280);
      if ((_DWORD)v39 == -1)
      {
        if (v84)
        {
          for (j = 0; j < v84; ++j)
            *(_BYTE *)(*(_QWORD *)(v36 + 24) + j) = *((_DWORD *)v83 + j);
        }
        goto LABEL_20;
      }
      goto LABEL_62;
    }
    switch(*(_DWORD *)(a1 + 280))
    {
      case 0xFFFFFFFF:
LABEL_76:
        **(_BYTE **)(v36 + 24) = v68;
        *(_BYTE *)(*(_QWORD *)(v36 + 24) + 1) = v69;
        *(_BYTE *)(*(_QWORD *)(v36 + 24) + 2) = v70;
        *(_BYTE *)(*(_QWORD *)(v36 + 24) + 3) = v71;
        *(_BYTE *)(*(_QWORD *)(v36 + 24) + 4) = v72;
        break;
      case 0:
LABEL_90:
        LOBYTE(v46) = v68;
        goto LABEL_63;
      case 1:
LABEL_88:
        LOBYTE(v46) = v69;
        goto LABEL_63;
      case 2:
LABEL_89:
        LOBYTE(v46) = v70;
        goto LABEL_63;
      case 3:
LABEL_87:
        LOBYTE(v46) = v71;
        goto LABEL_63;
      case 4:
LABEL_91:
        LOBYTE(v46) = v72;
        goto LABEL_63;
      default:
        break;
    }
  }
  else if (v14)
  {
    if (*(_DWORD *)(a1 + 284))
    {
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v83, (const Espresso::layer_shape *)&v68, 0);
      v44 = *(int *)(a1 + 280);
      if ((_DWORD)v44 == -1)
      {
        if (v84)
        {
          v66 = 0;
          v67 = *(_QWORD *)(v14 + 24);
          do
          {
            *(_DWORD *)(v67 + 4 * v66) = *((_DWORD *)v83 + v66);
            ++v66;
          }
          while (v66 < v84);
        }
      }
      else
      {
        v45 = *((_DWORD *)v83 + v44);
LABEL_59:
        **(_DWORD **)(v14 + 24) = v45;
      }
    }
    else
    {
      switch(*(_DWORD *)(a1 + 280))
      {
        case 0xFFFFFFFF:
          v64 = *(_DWORD **)(v14 + 24);
          *v64 = v68;
          v64[1] = v69;
          v64[2] = v70;
          v64[3] = v71;
          v64[4] = v72;
          break;
        case 0:
          v45 = v68;
          goto LABEL_59;
        case 1:
          v45 = v69;
          goto LABEL_59;
        case 2:
          v45 = v70;
          goto LABEL_59;
        case 3:
          v45 = v71;
          goto LABEL_59;
        case 4:
          v45 = v72;
          goto LABEL_59;
        default:
          break;
      }
    }
  }
  else
  {
    if (!v21)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("get_shape_kernel_cpu: only implemented for float, float16, int8, uint8 and int32 input blobs");
    v47 = 0;
    v48 = *(_DWORD *)(v21 + 8);
    do
    {
      v48 *= *(_DWORD *)(v21 + 12 + v47);
      v47 += 4;
    }
    while (v47 != 12);
    v49 = (std::__shared_weak_count *)operator new(0x60uLL);
    v49->__shared_owners_ = 0;
    v50 = (unint64_t *)&v49->__shared_owners_;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA11F0;
    v49->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBECA8;
    *(_OWORD *)&v49[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v49[3].__shared_owners_ = 0u;
    LODWORD(v49[1].__shared_owners_) = v48;
    *(uint64_t *)((char *)&v49[1].__shared_owners_ + 4) = 0x100000001;
    v51 = (Espresso *)(4 * v48);
    HIDWORD(v49[1].__shared_weak_owners_) = 1;
    v52 = (std::__shared_weak_count_vtbl *)Espresso::kern_alloc_uninitialized(v51);
    bzero(v52, (size_t)v51);
    v49[2].__vftable = v52;
    LOBYTE(v49[2].__shared_owners_) = 1;
    v83[0] = v49 + 1;
    v83[1] = v49;
    Espresso::get_shape_kernel_cpu::__compute<Espresso::blob<float,4>,float>(a1, (uint64_t)v83, (Espresso::layer_shape *)&v68);
    v53 = 0;
    v54 = v49[2].__vftable;
    v55 = *(_WORD **)(v21 + 24);
    v56 = *(int *)(v21 + 8);
    do
    {
      v56 *= *(int *)(v21 + 12 + v53);
      v53 += 4;
    }
    while (v53 != 12);
    for (; v56; --v56)
    {
      v57 = (int)v54->~__shared_weak_count;
      v54 = (std::__shared_weak_count_vtbl *)((char *)v54 + 4);
      _S0 = v57;
      __asm { FCVT            H0, S0 }
      *v55++ = _S0;
    }
    do
      v63 = __ldaxr(v50);
    while (__stlxr(v63 - 1, v50));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
LABEL_20:
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  v24 = v76;
  if (v76)
  {
    v25 = (unint64_t *)&v76->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v78;
  if (v78)
  {
    v28 = (unint64_t *)&v78->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v80;
  if (v80)
  {
    v31 = (unint64_t *)&v80->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v82;
  if (v82)
  {
    v34 = (unint64_t *)&v82->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_190ECBE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24 - 104);
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t Espresso::get_shape_kernel_cpu::__compute<Espresso::blob<float,4>,float>(uint64_t result, uint64_t a2, Espresso::layer_shape *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float32x4_t *v7;
  uint64_t v8;
  float *v9;
  int *v10;
  int v11;
  _DWORD v12[5];
  unsigned int v13;

  v4 = result;
  if (*(_DWORD *)(result + 284))
  {
    result = Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v12, a3, 0);
    v5 = *(int *)(v4 + 280);
    if ((_DWORD)v5 == -1)
    {
      v8 = v13;
      if (v13)
      {
        v9 = *(float **)(*(_QWORD *)a2 + 24);
        v10 = v12;
        do
        {
          v11 = *v10++;
          *v9++ = (float)v11;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v6 = v12[v5];
LABEL_4:
      **(float **)(*(_QWORD *)a2 + 24) = (float)v6;
    }
  }
  else
  {
    switch(*(_DWORD *)(result + 280))
    {
      case 0xFFFFFFFF:
        v7 = *(float32x4_t **)(*(_QWORD *)a2 + 24);
        *v7 = vcvtq_f32_s32(*(int32x4_t *)a3);
        v7[1].f32[0] = (float)*((int *)a3 + 4);
        break;
      case 0:
        v6 = *(_DWORD *)a3;
        goto LABEL_4;
      case 1:
        v6 = *((_DWORD *)a3 + 1);
        goto LABEL_4;
      case 2:
        v6 = *((_DWORD *)a3 + 2);
        goto LABEL_4;
      case 3:
        v6 = *((_DWORD *)a3 + 3);
        goto LABEL_4;
      case 4:
        v6 = *((_DWORD *)a3 + 4);
        goto LABEL_4;
      default:
        return result;
    }
  }
  return result;
}

uint64_t espresso_plan_set_priority(_QWORD *a1, int a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int (****v8)(_QWORD);
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    if (a2 > 16382)
    {
      if (a2 != 0x3FFF && a2 != 24574 && a2 != 0x7FFF)
LABEL_27:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The priority passed is not a valid value.");
    }
    else if (a2 >= 2 && a2 != 0x2000)
    {
      goto LABEL_27;
    }
    v6 = a1[133];
    v7 = *(_DWORD *)(v6 + 160);
    if (v7)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
    if (*(_DWORD *)(v6 + 164) == a2)
      goto LABEL_23;
    v8 = *(unsigned int (*****)(_QWORD))v6;
    if (*(_QWORD *)v6)
    {
      if (v9)
      {
        v10 = 2;
        v11 = 1;
        if (a2 != 0x7FFF && a2 != 24574)
        {
          v11 = 0;
          if (a2 == 1)
            v10 = 4;
          else
            v10 = 1;
        }
        (*(void (**)(void *, uint64_t, uint64_t, float))(*(_QWORD *)v9 + 16))(v9, v11, v10, 4.0);
LABEL_23:
        v5 = 0;
        goto LABEL_24;
      }
    }
    if ((**v8[1])(v8[1]) >> 1 != 5003)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Setting the priority is not supported on this engine.");
    v5 = 0;
    *(_DWORD *)(a1[133] + 164) = a2;
  }
  else
  {
    v5 = 4294967290;
  }
LABEL_24:
  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_190ECC14C(_Unwind_Exception *exception_object, int a2)
{
  char *v2;
  std::exception *v3;

  if (a2 == 1)
  {
    v3 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v2, v3);
    __cxa_end_catch();
    JUMPOUT(0x190ECC108);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso35use_multiple_procedure_for_segmentsERKNSt3__110shared_ptrINS_3netEEE_block_invoke()
{
  void *v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v2 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.merge_segments"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::use_multiple_procedure_for_segments(std::shared_ptr<Espresso::net> const&)::ret = objc_msgSend(v1, "intValue") != 0;

}

void sub_190ECC214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t e5rt_program_library_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC9128;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190ECC2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::context::network_transform_post_load(Espresso::ANECompilerEngine::context *this, Espresso::net *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  std::string *v11;
  char *v12;
  unint64_t *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  char *v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  float v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  void *v77;
  char *v78;
  char *v79;
  unint64_t *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t *v83;
  char *v84;
  uint64_t *v85[3];
  unint64_t v86;
  unint64_t *v87;
  unint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  __int128 v93;
  int v94;
  _QWORD v95[5];

  v92 = 0u;
  v93 = 0u;
  v94 = 1065353216;
  Espresso::net::get_consumers_of_blobs(a2, &v92, (uint64_t)v95);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v92);
  v3 = (char *)&v92 + 8;
  *(_QWORD *)&v93 = 0;
  v91 = 0;
  v92 = (unint64_t)&v92 + 8;
  v4 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) == v4)
    goto LABEL_117;
  v5 = 0;
  v6 = (char *)a2 + 96;
  v84 = (char *)a2 + 56;
  do
  {
    v7 = *(_QWORD *)(v4 + 16 * v5);
    v8 = (_QWORD *)(v7 + 40);
    v9 = *(char *)(v7 + 63);
    if (v9 < 0)
    {
      if (*(_QWORD *)(v7 + 48) != 4)
        goto LABEL_109;
      v8 = (_QWORD *)*v8;
    }
    else if (v9 != 4)
    {
      goto LABEL_109;
    }
    if (*(_DWORD *)v8 == 1953718627)
    {
      v87 = &v91;
      v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87);
      if (v10[4] - v10[3] == 24)
      {
        v87 = &v91;
        v11 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v84, &v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87)[3];
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 30), v11))
        {
          v87 = (unint64_t *)v11;
          v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95, (unsigned __int8 *)v11, (__int128 **)&v87);
          if (*((_QWORD *)v12 + 6) - *((_QWORD *)v12 + 5) <= 8uLL)
          {
            v87 = &v91;
            v13 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87)[3];
            if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v95, (unsigned __int8 *)v13))
            {
              v87 = v13;
              v14 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95, (unsigned __int8 *)v13, (__int128 **)&v87);
              if (*((_QWORD *)v14 + 6) - *((_QWORD *)v14 + 5) == 8)
              {
                v90 = 0;
                v87 = v13;
                v90 = **((_QWORD **)std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95, (unsigned __int8 *)v13, (__int128 **)&v87)+ 5);
                v15 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v90);
                v16 = (_QWORD *)(v15 + 40);
                v17 = *(char *)(v15 + 63);
                if (v17 < 0)
                {
                  if (*(_QWORD *)(v15 + 48) != 16)
                    goto LABEL_109;
                  v16 = (_QWORD *)*v16;
                }
                else if (v17 != 16)
                {
                  goto LABEL_109;
                }
                v19 = (_QWORD *)*v16;
                v18 = v16[1];
                v20 = v19 == (_QWORD *)0x5F747865746E6F63 && v18 == 0x726566736E617274;
                if (v20)
                {
                  v87 = &v90;
                  v82 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v90, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87);
                  v87 = &v90;
                  v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v84, &v90, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87);
                  v80 = v13;
                  v87 = 0;
                  v88 = 0;
                  v89 = 0;
                  std::vector<unsigned long>::reserve((void **)&v87, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[4] - v21[3]) >> 3));
                  v78 = v6;
                  v79 = v3;
                  v86 = 0;
                  v81 = v21;
                  v24 = v21 + 3;
                  v23 = v21[3];
                  v22 = v24[1];
                  if (v22 == v23)
                  {
LABEL_75:
                    v54 = *((_QWORD *)a2 + 4);
                    v55 = *(char **)(*(_QWORD *)(v54 + 16 * v90) + 64);
                    v56 = *(_QWORD *)(*(_QWORD *)(v54 + 16 * v91) + 64);
                    v57 = (uint64_t *)operator new(8uLL);
                    *v57 = v56;
                    v85[1] = v57 + 1;
                    v85[2] = v57 + 1;
                    v85[0] = v57;
                    Espresso::merge_kernel_attributes(v55, (uint64_t *)v85);
                    v3 = v79;
                    operator delete(v57);
                    v58 = (uint64_t *)*((_QWORD *)&v92 + 1);
                    v59 = (uint64_t **)v79;
                    v60 = (uint64_t **)v79;
                    if (*((_QWORD *)&v92 + 1))
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v60 = (uint64_t **)v58;
                          v61 = v58[4];
                          if (v91 <= v61)
                            break;
                          v58 = *v60;
                          v59 = v60;
                          if (!*v60)
                            goto LABEL_82;
                        }
                        if (v61 <= v91)
                          break;
                        v58 = v60[1];
                        if (!v58)
                        {
                          v59 = v60 + 1;
                          goto LABEL_82;
                        }
                      }
                    }
                    else
                    {
LABEL_82:
                      v62 = (uint64_t *)operator new(0x28uLL);
                      v62[4] = v91;
                      *v62 = 0;
                      v62[1] = 0;
                      v62[2] = (uint64_t)v60;
                      *v59 = v62;
                      if (*(_QWORD *)v92)
                      {
                        *(_QWORD *)&v92 = *(_QWORD *)v92;
                        v62 = *v59;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v92 + 1), v62);
                      *(_QWORD *)&v93 = v93 + 1;
                    }
                    v64 = v87;
                    v63 = v88;
                    if (v87 != v88)
                    {
                      do
                      {
                        v65 = *v64;
                        v66 = v81[4];
                        v67 = v81[3] + 24 * *v64;
                        v68 = v67 + 24;
                        if (v67 + 24 != v66)
                        {
                          do
                          {
                            if (*(char *)(v67 + 23) < 0)
                              operator delete(*(void **)v67);
                            *(_OWORD *)v67 = *(_OWORD *)(v67 + 24);
                            *(_QWORD *)(v67 + 16) = *(_QWORD *)(v67 + 40);
                            *(_BYTE *)(v67 + 47) = 0;
                            v69 = v67 + 48;
                            *(_BYTE *)(v67 + 24) = 0;
                            v67 += 24;
                          }
                          while (v69 != v66);
                          v68 = v81[4];
                        }
                        while (v68 != v67)
                        {
                          if (*(char *)(v68 - 1) < 0)
                            operator delete(*(void **)(v68 - 24));
                          v68 -= 24;
                        }
                        v81[4] = v67;
                        v70 = v82[4];
                        v71 = v82[3] + 24 * v65;
                        v72 = v71 + 24;
                        if (v71 + 24 != v70)
                        {
                          do
                          {
                            if (*(char *)(v71 + 23) < 0)
                              operator delete(*(void **)v71);
                            *(_OWORD *)v71 = *(_OWORD *)(v71 + 24);
                            *(_QWORD *)(v71 + 16) = *(_QWORD *)(v71 + 40);
                            *(_BYTE *)(v71 + 47) = 0;
                            v73 = v71 + 48;
                            *(_BYTE *)(v71 + 24) = 0;
                            v71 += 24;
                          }
                          while (v73 != v70);
                          v72 = v82[4];
                        }
                        while (v72 != v71)
                        {
                          if (*(char *)(v72 - 1) < 0)
                            operator delete(*(void **)(v72 - 24));
                          v72 -= 24;
                        }
                        v82[4] = v71;
                        ++v64;
                      }
                      while (v64 != v63);
                      v64 = v87;
                    }
                    if (v64)
                    {
                      v88 = v64;
                      operator delete(v64);
                    }
                    v6 = v78;
                    goto LABEL_109;
                  }
                  v25 = 0;
                  while (1)
                  {
                    v26 = v23 + 24 * v25;
                    v27 = *(unsigned __int8 *)(v26 + 23);
                    if ((v27 & 0x80u) == 0)
                      v28 = *(unsigned __int8 *)(v26 + 23);
                    else
                      v28 = *(_QWORD *)(v26 + 8);
                    v29 = *((unsigned __int8 *)v80 + 23);
                    v30 = (char)v29;
                    if ((v29 & 0x80u) != 0)
                      v29 = v80[1];
                    if (v28 == v29)
                    {
                      v31 = v82[3];
                      if (v30 >= 0)
                        v32 = (unsigned __int8 *)v80;
                      else
                        v32 = (unsigned __int8 *)*v80;
                      if ((v27 & 0x80) != 0)
                      {
                        if (memcmp(*(const void **)v26, v32, *(_QWORD *)(v26 + 8)))
                          goto LABEL_74;
                      }
                      else if (*(_BYTE *)(v26 + 23))
                      {
                        v33 = 24 * v25;
                        do
                        {
                          if (*(unsigned __int8 *)(v23 + v33) != *v32)
                            goto LABEL_74;
                          ++v32;
                          ++v33;
                          --v27;
                        }
                        while (v27);
                      }
                      v34 = (uint64_t *)(v31 + 24 * v25);
                      v85[0] = v34;
                      v35 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95, (unsigned __int8 *)v34, (__int128 **)v85);
                      v37 = (uint64_t *)*((_QWORD *)v35 + 5);
                      v36 = (uint64_t *)*((_QWORD *)v35 + 6);
                      v83 = v36;
LABEL_43:
                      if (v37 != v36)
                      {
                        v85[0] = v37;
                        v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v84, (unint64_t *)v37, (uint64_t)&std::piecewise_construct, v85);
                        v39 = v38[3];
                        v40 = v38[4];
                        while (1)
                        {
                          if (v39 == v40)
                          {
                            ++v37;
                            v36 = v83;
                            goto LABEL_43;
                          }
                          v41 = *(unsigned __int8 *)(v39 + 23);
                          if ((v41 & 0x80u) == 0)
                            v42 = *(unsigned __int8 *)(v39 + 23);
                          else
                            v42 = *(_QWORD *)(v39 + 8);
                          v43 = *((unsigned __int8 *)v34 + 23);
                          v44 = (char)v43;
                          if ((v43 & 0x80u) != 0)
                            v43 = v34[1];
                          if (v42 == v43)
                          {
                            if (v44 >= 0)
                              v45 = (unsigned __int8 *)v34;
                            else
                              v45 = (unsigned __int8 *)*v34;
                            if ((v41 & 0x80) != 0)
                            {
                              if (memcmp(*(const void **)v39, v45, *(_QWORD *)(v39 + 8)))
                                goto LABEL_71;
LABEL_62:
                              std::string::operator=((std::string *)v39, v11);
                              if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), v11))
                              {
                                v85[0] = v34;
                                v47 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v34, (uint64_t)&std::piecewise_construct, (__int128 **)v85)+ 16);
                                v85[0] = (uint64_t *)v11;
                                v48 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v11, (uint64_t)&std::piecewise_construct, (__int128 **)v85);
                              }
                              else
                              {
                                v85[0] = (uint64_t *)v11;
                                v49 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v11, (uint64_t)&std::piecewise_construct, (__int128 **)v85);
                                *((_DWORD *)v49 + 14) = 1065353216;
                                *(_QWORD *)(v49 + 60) = 0xFFFFFFFF00000000;
                                *((_DWORD *)v49 + 17) = 1;
                                v51 = v49 + 72;
                                v50 = (void *)*((_QWORD *)v49 + 9);
                                if (v50)
                                {
                                  *((_QWORD *)v49 + 10) = v50;
                                  operator delete(v50);
                                  *v51 = 0;
                                  v51[1] = 0;
                                  v51[2] = 0;
                                }
                                *v51 = 0;
                                v51[1] = 0;
                                v51[2] = 0;
                                if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), v34))
                                {
                                  v85[0] = v34;
                                  v47 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v34, (uint64_t)&std::piecewise_construct, (__int128 **)v85)+ 16);
                                  v85[0] = v34;
                                  v52 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v34, (uint64_t)&std::piecewise_construct, (__int128 **)v85)+ 14);
                                  v85[0] = v34;
                                  v53 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v34, (uint64_t)&std::piecewise_construct, (__int128 **)v85)+ 15);
                                }
                                else
                                {
                                  v53 = 0;
                                  v47 = -1;
                                  v52 = 1.0;
                                }
                                v85[0] = (uint64_t *)v11;
                                v48 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v11, (uint64_t)&std::piecewise_construct, (__int128 **)v85);
                                *((float *)v48 + 14) = v52;
                                *((_DWORD *)v48 + 15) = v53;
                              }
                              *((_DWORD *)v48 + 16) = v47;
                              goto LABEL_71;
                            }
                            if (!*(_BYTE *)(v39 + 23))
                              goto LABEL_62;
                            v46 = 0;
                            while (*(unsigned __int8 *)(v39 + v46) == v45[v46])
                            {
                              if (v41 == ++v46)
                                goto LABEL_62;
                            }
                          }
LABEL_71:
                          v39 += 24;
                        }
                      }
                      std::vector<unsigned long>::insert((void **)&v87, v87, (char *)&v86);
                      v25 = v86;
                      v23 = v81[3];
                      v22 = v81[4];
                    }
LABEL_74:
                    v86 = ++v25;
                    if (v25 >= 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 3))
                      goto LABEL_75;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_109:
    v5 = v91 + 1;
    v91 = v5;
    v4 = *((_QWORD *)a2 + 4);
  }
  while (v5 < (*((_QWORD *)a2 + 5) - v4) >> 4);
  v74 = (char *)v92;
  if ((char *)v92 != v3)
  {
    do
    {
      Espresso::net::remove_layer(a2, *((_DWORD *)v74 + 8));
      v75 = (char *)*((_QWORD *)v74 + 1);
      if (v75)
      {
        do
        {
          v76 = v75;
          v75 = *(char **)v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          v76 = (char *)*((_QWORD *)v74 + 2);
          v20 = *(_QWORD *)v76 == (_QWORD)v74;
          v74 = v76;
        }
        while (!v20);
      }
      v74 = v76;
    }
    while (v76 != v3);
  }
LABEL_117:
  std::__tree<int>::destroy(*((_QWORD **)&v92 + 1));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v95[2]);
  v77 = (void *)v95[0];
  v95[0] = 0;
  if (v77)
    operator delete(v77);
}

void sub_190ECCC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26)
{
  void *v26;
  uint64_t v27;

  operator delete(v26);
  if (__p)
    operator delete(__p);
  std::__tree<int>::destroy(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(v27 - 152);
  _Unwind_Resume(a1);
}

void Espresso::generic_squeeze_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const Espresso::layer_shape *v4;
  int *begin;
  int *end;
  char *v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *j;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  int *v33;
  int64_t v34;
  int *i;
  std::vector<int>::pointer v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  std::vector<int>::pointer v47;
  std::vector<int>::pointer v48;
  int *v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  unint64_t v58;
  std::vector<int> __src;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  __int128 __dst;
  uint64_t v65;
  void *__p;
  void *v67;
  __int128 v68;

  *(_QWORD *)&v68 = *MEMORY[0x1E0C80C00];
  v4 = *(const Espresso::layer_shape **)a2;
  if (*(_QWORD *)(a2 + 8) - (_QWORD)v4 != 64)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_squeeze_kernel: one input required");
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v60, v4, 0);
  if (!HIDWORD(v61))
  {
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v60, 0, (uint64_t)&__dst);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    __src.__begin_ = (std::vector<int>::pointer)a3;
    LOBYTE(__src.__end_) = 0;
    v9 = (char *)operator new(0x40uLL);
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = v9 + 64;
    *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, &__dst, &v68, (uint64_t)v9);
    v10 = __p;
    if (!__p)
      return;
    v67 = __p;
    goto LABEL_100;
  }
  Espresso::layer_nd_shape::shape_vector(&__src, (uint64_t)&v60);
  v57 = 0;
  v58 = 0;
  if (*(_BYTE *)(a1 + 416))
  {
    begin = __src.__begin_;
    end = __src.__end_;
    if (__src.__begin_ == __src.__end_)
    {
      end = __src.__begin_;
    }
    else
    {
      while (*begin != 1)
      {
        if (++begin == __src.__end_)
          goto LABEL_66;
      }
      if (begin != __src.__end_)
      {
        for (i = begin + 1; i != end; ++i)
        {
          if (*i != 1)
            *begin++ = *i;
        }
      }
      if (begin != end)
      {
        end = begin;
        __src.__end_ = begin;
      }
    }
LABEL_66:
    v36 = __src.__begin_;
    if (*(int *)(a1 + 420) <= 1)
    {
      v37 = (char *)end - (char *)__src.__begin_;
      if (end == __src.__begin_)
      {
        if (end >= __src.__end_cap_.__value_)
        {
          v42 = v37 >> 2;
          v43 = (char *)__src.__end_cap_.__value_ - (char *)__src.__begin_;
          if (((char *)__src.__end_cap_.__value_ - (char *)__src.__begin_) >> 1 <= (unint64_t)((v37 >> 2) + 1))
            v44 = v42 + 1;
          else
            v44 = v43 >> 1;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
            v45 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v45);
          v47 = __src.__begin_;
          v48 = __src.__end_;
          v49 = (int *)&v46[4 * v42];
          v51 = (int *)&v46[4 * v50];
          *v49 = 1;
          end = v49 + 1;
          while (v48 != v47)
          {
            v52 = *--v48;
            *--v49 = v52;
          }
          __src.__begin_ = v49;
          __src.__end_ = end;
          __src.__end_cap_.__value_ = v51;
          if (v47)
            operator delete(v47);
        }
        else
        {
          *end++ = 1;
        }
        __src.__end_ = end;
        v36 = __src.__begin_;
      }
    }
    __dst = 0uLL;
    LODWORD(v65) = 0;
    v53 = (char *)end - (char *)v36;
    if (end != v36)
    {
      v54 = v53 >> 2;
      if ((unint64_t)(v53 >> 2) <= 1)
        v54 = 1;
      memcpy(&__dst, v36, 4 * v54);
    }
    HIDWORD(v65) = (unint64_t)v53 >> 2;
    v60 = __dst;
    v61 = v65;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v60, 0, (uint64_t)&__dst);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v62 = (_QWORD *)a3;
    v63 = 0;
    v55 = (char *)operator new(0x40uLL);
    *(_QWORD *)a3 = v55;
    *(_QWORD *)(a3 + 8) = v55;
    *(_QWORD *)(a3 + 16) = v55 + 64;
    *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, &__dst, &v68, (uint64_t)v55);
    v41 = __p;
    if (!__p)
      goto LABEL_98;
    v67 = __p;
  }
  else
  {
    v56 = (_QWORD *)a3;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = *(_DWORD *)(a1 + 284);
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v14;
    do
    {
      if (*(int *)(a1 + 284) <= 0)
        v16 = (unsigned int *)(a1 + 280);
      else
        v16 = (unsigned int *)(a1 + 4 * v13 + 288);
      v17 = *v16;
      if ((v17 & 0x80000000) != 0 && (v17 = (HIDWORD(v61) + v17), (int)v17 < 0)
        || SHIDWORD(v61) <= (unint64_t)v17)
      {
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Invalid axis %d for rank %zu", v17, SHIDWORD(v61));
      }
      v18 = *((unsigned int *)&v60 + v17);
      if ((_DWORD)v18 != 1)
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Cannot squeeze a dimension whose value is not 1: shape[%d]=%d", v17, v18);
      v19 = v11;
      if (v11 != v12)
      {
        while (*(_DWORD *)v19 != (_DWORD)v17)
        {
          v19 += 4;
          if (v19 == v12)
          {
            v19 = v12;
            break;
          }
        }
      }
      if (v19 != v12)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("All the values in the 'axes' parameter of squeeze kernel must be unique");
      if ((unint64_t)v12 >= v58)
      {
        v20 = (v12 - v11) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v22 = v58 - (_QWORD)v11;
        if ((uint64_t)(v58 - (_QWORD)v11) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
        else
          v24 = 0;
        v25 = (char *)(v23 + 4 * v20);
        *(_DWORD *)v25 = v17;
        for (j = v25 + 4; v12 != v11; v25 -= 4)
        {
          v27 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v25 - 1) = v27;
        }
        v57 = v25;
        v58 = v23 + 4 * v24;
        if (v11)
          operator delete(v11);
        v11 = v25;
        v12 = j;
      }
      else
      {
        *(_DWORD *)v12 = v17;
        v12 += 4;
      }
      ++v13;
    }
    while (v13 != v15);
    v28 = 126 - 2 * __clz((v12 - v57) >> 2);
    if (v12 == v57)
      v29 = 0;
    else
      v29 = v28;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>,false>(v12, v12, (uint64_t)v57, v57, v29, 1);
    if (v12 == v57)
    {
      v31 = __src.__end_;
    }
    else
    {
      v30 = 0;
      v31 = __src.__end_;
      do
      {
        if (*(int *)(a1 + 420) > 1 || (unint64_t)((char *)v31 - (char *)__src.__begin_) >= 5)
        {
          v33 = &__src.__begin_[*(int *)&v57[4 * v30]];
          v34 = (char *)v31 - (char *)(v33 + 1);
          if (v31 != v33 + 1)
            memmove(&__src.__begin_[*(int *)&v57[4 * v30]], v33 + 1, (char *)v31 - (char *)(v33 + 1));
          v31 = (int *)((char *)v33 + v34);
          __src.__end_ = (int *)((char *)v33 + v34);
        }
        ++v30;
      }
      while (v30 < (v12 - v57) >> 2);
    }
    __dst = 0uLL;
    LODWORD(v65) = 0;
    v38 = (char *)v31 - (char *)__src.__begin_;
    if (v31 != __src.__begin_)
    {
      v39 = v38 >> 2;
      if ((unint64_t)(v38 >> 2) <= 1)
        v39 = 1;
      memcpy(&__dst, __src.__begin_, 4 * v39);
    }
    HIDWORD(v65) = (unint64_t)v38 >> 2;
    v60 = __dst;
    v61 = v65;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v60, 0, (uint64_t)&__dst);
    *v56 = 0;
    v56[1] = 0;
    v56[2] = 0;
    v62 = v56;
    v63 = 0;
    v40 = (char *)operator new(0x40uLL);
    *v56 = v40;
    v56[1] = v40;
    v56[2] = v40 + 64;
    v56[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(v56 + 2), &__dst, &v68, (uint64_t)v40);
    if (__p)
    {
      v67 = __p;
      operator delete(__p);
    }
    if (!v57)
      goto LABEL_98;
    v41 = v57;
  }
  operator delete(v41);
LABEL_98:
  v10 = __src.__begin_;
  if (!__src.__begin_)
    return;
  __src.__end_ = __src.__begin_;
LABEL_100:
  operator delete(v10);
}

void sub_190ECD26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>,false>(_DWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5, char a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  char v42;
  int v43;
  char *v44;
  BOOL v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  int v78;
  int v79;
  char *v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  char *v86;
  _DWORD *v87;

  while (2)
  {
    v87 = a1;
    v10 = (uint64_t)a1;
    v11 = a2;
LABEL_2:
    v12 = v11 - a4;
    v13 = (v11 - a4) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v43 = *((_DWORD *)v11 - 1);
        if (*(_DWORD *)a4 < v43)
        {
          *((_DWORD *)v11 - 1) = *(_DWORD *)a4;
          *(_DWORD *)a4 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v10, (uint64_t)v11, (uint64_t)(v11 - 4), (uint64_t)(v11 - 4), a3, (uint64_t)(a4 + 4));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v10, (uint64_t)v11, (uint64_t)(v11 - 4), (uint64_t)(v11 - 4), (uint64_t)(v11 - 8), (uint64_t)(v11 - 8), a3, (uint64_t)(a4 + 4));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v10, (uint64_t)v11, (uint64_t)(v11 - 4), (uint64_t)(v11 - 4), (uint64_t)(v11 - 8), (uint64_t)(v11 - 8), (uint64_t)(v11 - 12), (uint64_t)(v11 - 12), a3, (uint64_t)(a4 + 4));
        return;
      default:
        if (v12 > 95)
        {
          if (!a5)
          {
            if (v11 != a4)
            {
              v56 = (v13 - 2) >> 1;
              v57 = v56;
              do
              {
                v58 = v57;
                if (v56 >= (4 * v57) >> 2)
                {
                  v59 = (4 * v57) >> 1;
                  v60 = v59 | 1;
                  v61 = &v11[-4 * (v59 | 1)];
                  v62 = v59 + 2;
                  if (v62 < (uint64_t)v13 && *((_DWORD *)v61 - 1) < *((_DWORD *)v61 - 2))
                  {
                    v61 -= 4;
                    v60 = v62;
                  }
                  v63 = &v11[-4 * v58];
                  v64 = *((_DWORD *)v61 - 1);
                  v65 = *((_DWORD *)v63 - 1);
                  if (v64 >= v65)
                  {
                    do
                    {
                      *((_DWORD *)v63 - 1) = v64;
                      v63 = v61;
                      if (v56 < v60)
                        break;
                      v66 = (2 * v60) | 1;
                      v61 = &v11[-4 * v66];
                      v67 = 2 * v60 + 2;
                      if (v67 < (uint64_t)v13 && *((_DWORD *)v61 - 1) < *((_DWORD *)v61 - 2))
                      {
                        v61 -= 4;
                        v66 = v67;
                      }
                      v64 = *((_DWORD *)v61 - 1);
                      v60 = v66;
                    }
                    while (v64 >= v65);
                    *((_DWORD *)v63 - 1) = v65;
                  }
                }
                v57 = v58 - 1;
              }
              while (v58);
              v68 = (unint64_t)v12 >> 2;
              do
              {
                v69 = 0;
                v70 = *((_DWORD *)v11 - 1);
                v71 = v11;
                do
                {
                  v72 = &v71[4 * ~v69];
                  v73 = (2 * v69) | 1;
                  v74 = 2 * v69 + 2;
                  if (v74 < v68 && *((_DWORD *)v72 - 1) < *((_DWORD *)v72 - 2))
                  {
                    v72 -= 4;
                    v73 = v74;
                  }
                  *((_DWORD *)v71 - 1) = *((_DWORD *)v72 - 1);
                  v71 = v72;
                  v69 = v73;
                }
                while (v73 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                v75 = v72 - 4;
                if (v72 == a4 + 4)
                {
                  *(_DWORD *)v75 = v70;
                }
                else
                {
                  *(_DWORD *)v75 = *(_DWORD *)a4;
                  *(_DWORD *)a4 = v70;
                  if (v11 - v75 >= 5)
                  {
                    v76 = (((unint64_t)(v11 - v75) >> 2) - 2) >> 1;
                    v77 = &v11[-4 * v76];
                    v78 = *((_DWORD *)v77 - 1);
                    v79 = *(_DWORD *)v75;
                    if (v78 < v79)
                    {
                      do
                      {
                        *((_DWORD *)v72 - 1) = v78;
                        v72 = v77;
                        if (!v76)
                          break;
                        v76 = (v76 - 1) >> 1;
                        v77 = &v11[-4 * v76];
                        v78 = *((_DWORD *)v77 - 1);
                      }
                      while (v78 < v79);
                      *((_DWORD *)v72 - 1) = v79;
                    }
                  }
                }
                a4 += 4;
              }
              while (v68-- > 2);
            }
            return;
          }
          v14 = v13 >> 1;
          v15 = (uint64_t)&v11[-4 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>((uint64_t)&v11[-4 * (v13 >> 1)], (uint64_t)&v11[-4 * (v13 >> 1)], v10, (uint64_t)v11, (uint64_t)(a4 + 4), (uint64_t)(a4 + 4));
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v10, (uint64_t)v11, (uint64_t)&v11[-4 * (v13 >> 1)], (uint64_t)&v11[-4 * (v13 >> 1)], (uint64_t)(a4 + 4), (uint64_t)(a4 + 4));
            v16 = v10;
            v17 = (uint64_t)&v11[4 * (1 - v14)];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>((uint64_t)(v11 - 4), (uint64_t)(v11 - 4), v17, v17, (uint64_t)(a4 + 8), (uint64_t)(a4 + 8));
            v18 = (uint64_t)&v11[4 * ~v14];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>((uint64_t)(v11 - 8), (uint64_t)(v11 - 8), v18, v18, (uint64_t)(a4 + 12), (uint64_t)(a4 + 12));
            v19 = v17;
            v20 = v17;
            v10 = v16;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v19, v20, v15, v15, v18, v18);
            v21 = *((_DWORD *)v11 - 1);
            *((_DWORD *)v11 - 1) = *(_DWORD *)(v15 - 4);
            *(_DWORD *)(v15 - 4) = v21;
          }
          --a5;
          v22 = v11 - 4;
          if ((a6 & 1) != 0)
          {
            v23 = *(_DWORD *)v22;
LABEL_28:
            v33 = v11;
            do
            {
              v34 = v33;
              v33 -= 4;
            }
            while (*((_DWORD *)v34 - 2) < v23);
            v35 = a4;
            if (v34 == v11)
            {
              v35 = a4;
              do
              {
                if (v35 >= v33)
                  break;
                v37 = *(_DWORD *)v35;
                v35 += 4;
              }
              while (v37 >= v23);
            }
            else
            {
              do
              {
                v36 = *(_DWORD *)v35;
                v35 += 4;
              }
              while (v36 >= v23);
            }
            a2 = v33;
            if (v35 < v33)
            {
              v38 = v35;
              do
              {
                v39 = *((_DWORD *)a2 - 1);
                *((_DWORD *)a2 - 1) = *((_DWORD *)v38 - 1);
                *((_DWORD *)v38 - 1) = v39;
                do
                {
                  v40 = *((_DWORD *)a2 - 2);
                  a2 -= 4;
                }
                while (v40 < v23);
                do
                {
                  v41 = *(_DWORD *)v38;
                  v38 += 4;
                }
                while (v41 >= v23);
              }
              while (v38 < a2);
            }
            if (a2 + 4 != v11)
              *(_DWORD *)v22 = *(_DWORD *)a2;
            *(_DWORD *)a2 = v23;
            if (v35 >= v33)
            {
              v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v10, (uint64_t)v11, (uint64_t)(a2 + 4), (_DWORD *)a2 + 1);
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>((uint64_t)a2, (uint64_t)a2, a3, a4))
              {
                a3 = (uint64_t)(a2 + 4);
                a4 = a2 + 4;
                a2 = v11;
                a1 = v87;
                if ((v42 & 1) == 0)
                  continue;
                return;
              }
              a1 = a2 + 4;
              if ((v42 & 1) != 0)
                continue;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>,false>(v10, v11, a2 + 4, a2 + 4, a5, a6 & 1);
            a6 = 0;
            a1 = a2 + 4;
            continue;
          }
          v23 = *((_DWORD *)v11 - 1);
          if (*(_DWORD *)v11 < v23)
            goto LABEL_28;
          v24 = v11 - 4;
          if (v23 >= *(_DWORD *)a4)
          {
            do
            {
              v26 = v24;
              if (v24 <= a4)
                break;
              v24 -= 4;
            }
            while (v23 >= *((_DWORD *)v26 - 1));
          }
          else
          {
            v25 = v11;
            do
            {
              v26 = v25 - 4;
              v27 = *((_DWORD *)v25 - 2);
              v25 -= 4;
            }
            while (v23 >= v27);
          }
          v28 = a4;
          if (v26 > a4)
          {
            v28 = a4;
            do
            {
              v29 = *(_DWORD *)v28;
              v28 += 4;
            }
            while (v23 < v29);
          }
          while (v28 < v26)
          {
            v30 = *((_DWORD *)v26 - 1);
            *((_DWORD *)v26 - 1) = *((_DWORD *)v28 - 1);
            *((_DWORD *)v28 - 1) = v30;
            do
            {
              v31 = *((_DWORD *)v26 - 2);
              v26 -= 4;
            }
            while (v23 >= v31);
            do
            {
              v32 = *(_DWORD *)v28;
              v28 += 4;
            }
            while (v23 < v32);
          }
          if (v26 + 4 != v11)
            *(_DWORD *)v22 = *(_DWORD *)v26;
          a6 = 0;
          *(_DWORD *)v26 = v23;
          v11 = v26;
          goto LABEL_2;
        }
        v44 = v11 - 4;
        v46 = v11 == a4 || v44 == a4;
        if ((a6 & 1) != 0)
        {
          if (!v46)
          {
            v47 = 0;
            v48 = v11 - 4;
            do
            {
              v50 = *((_DWORD *)v48 - 1);
              v48 -= 4;
              v49 = v50;
              v51 = *(_DWORD *)v44;
              if (v50 < v51)
              {
                v52 = v47;
                while (1)
                {
                  v53 = v52;
                  v54 = &v11[v52];
                  *((_DWORD *)v54 - 2) = v51;
                  if (!v53)
                    break;
                  v51 = *(_DWORD *)&v11[v53];
                  v52 = v53 + 4;
                  if (v49 >= v51)
                  {
                    v55 = &v11[v53 - 4];
                    goto LABEL_71;
                  }
                }
                v55 = v54 - 4;
LABEL_71:
                *(_DWORD *)v55 = v49;
              }
              v47 -= 4;
              v44 = v48;
            }
            while (v48 != a4);
          }
        }
        else if (!v46)
        {
          v81 = v11 - 8;
          v82 = v11 - 4;
          do
          {
            v84 = *((_DWORD *)v82 - 1);
            v82 -= 4;
            v83 = v84;
            v85 = *(_DWORD *)v44;
            if (v84 < v85)
            {
              v86 = v81;
              do
              {
                *(_DWORD *)v86 = v85;
                v85 = *((_DWORD *)v86 + 2);
                v86 += 4;
              }
              while (v83 < v85);
              *(_DWORD *)v86 = v83;
            }
            v81 -= 4;
            v44 = v82;
          }
          while (v82 != a4);
        }
        return;
    }
  }
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal *a1, uint64_t a2)
{
  int v4;
  std::string::size_type InitializedImpl;
  void *exception;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  _BYTE v12[8];

  if (((*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)a1 + 160))(a1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v11, "Reshape is not supported by this operation.");
    E5RT::Status::Status(v12, 2, v11);
    E5RT::E5RTError::E5RTError(exception, &v8, v12);
  }
  v4 = *((_DWORD *)a1 + 81);
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(a1);
  LODWORD(v8) = 0;
  HIDWORD(v8) = v4;
  v9 = 0u;
  v10 = 0u;
  kdebug_trace();
  InitializedImpl = E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl((const std::string *)a1);
  E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeOperationInternal(InitializedImpl, a2);
  E5RT::ExecutionStreamOperationInternal::UpdateDynamicPorts(a1);
  return kdebug_trace();
}

void sub_190ECDB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  E5RT::Status::~Status((E5RT::Status *)(v25 - 40));
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::CpuInferenceOperation::SupportsReshaping(E5RT::Ops::CpuInferenceOperation *this)
{
  return 1;
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::PrepareOpForEncode(E5RT::Ops::BnnsCpuInferenceOperation::Impl **this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::Ops::BnnsCpuInferenceOperation::Impl::PrepareOpForEncode(this[37]);
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  E5RT::ExecutionStreamOperationInternal::UpdateDynamicPorts(this);
  return kdebug_trace();
}

void sub_190ECDC5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

_BYTE *E5RT::ExecutionStreamOperationInternal::UpdateDynamicPorts(_BYTE *this)
{
  _BYTE *v1;
  _QWORD *i;
  E5RT::IOPortImpl **v3;
  char HasKnownShape;
  _QWORD *j;
  E5RT::IOPortImpl **v6;
  char v7;
  _QWORD *k;
  E5RT::IOPortImpl **v9;
  char v10;

  v1 = this;
  *((_WORD *)this + 144) = 0;
  this[290] = 0;
  for (i = (_QWORD *)*((_QWORD *)this + 4); i; i = (_QWORD *)*i)
  {
    v3 = (E5RT::IOPortImpl **)i[5];
    if (!v3 || *v3 != (E5RT::IOPortImpl *)&off_1E2D59AC8)
      v3 = 0;
    HasKnownShape = E5RT::IOPort::HasKnownShape(v3);
    this = E5RT::IOPortPriv::SetDynamic((E5RT::IOPortPriv *)v3, HasKnownShape ^ 1u);
    if ((HasKnownShape & 1) == 0)
      v1[288] = 1;
  }
  for (j = (_QWORD *)*((_QWORD *)v1 + 9); j; j = (_QWORD *)*j)
  {
    v6 = (E5RT::IOPortImpl **)j[5];
    if (!v6 || *v6 != (E5RT::IOPortImpl *)&off_1E2D59AC8)
      v6 = 0;
    v7 = E5RT::IOPort::HasKnownShape(v6);
    this = E5RT::IOPortPriv::SetDynamic((E5RT::IOPortPriv *)v6, v7 ^ 1u);
    if ((v7 & 1) == 0)
      v1[289] = 1;
  }
  for (k = (_QWORD *)*((_QWORD *)v1 + 14); k; k = (_QWORD *)*k)
  {
    v9 = (E5RT::IOPortImpl **)k[5];
    if (!v9 || *v9 != (E5RT::IOPortImpl *)&off_1E2D59AC8)
      v9 = 0;
    v10 = E5RT::IOPort::HasKnownShape(v9);
    this = E5RT::IOPortPriv::SetDynamic((E5RT::IOPortPriv *)v9, v10 ^ 1u);
    if ((v10 & 1) == 0)
      v1[290] = 1;
  }
  return this;
}

_BYTE *E5RT::IOPortPriv::SetDynamic(E5RT::IOPortPriv *this, char a2)
{
  return E5RT::IOPortImpl::SetDynamic(*((_BYTE **)this + 1), a2);
}

void E5RT::Ops::BnnsCpuInferenceOperation::Impl::PrepareOpForEncode(E5RT::Ops::BnnsCpuInferenceOperation::Impl *this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  const char *v8;
  __int128 *v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t InputCount;
  unint64_t OutputCount;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t OutputPorts;
  _QWORD *v51;
  uint64_t v52;
  const char *v53;
  size_t v54;
  _BYTE *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t InputPorts;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  const char *v74;
  size_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  E5RT::IOPortImpl **v100;
  void *v101;
  uint64_t v102;
  const char *v103;
  size_t v104;
  std::string::size_type v105;
  std::string *p_dst;
  uint64_t v107;
  uint64_t v108;
  E5RT::TensorDescriptor *v109;
  E5RT::TensorDescriptor *v110;
  unint64_t Rank;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  unint64_t v124;
  char **TensorStrides;
  void *v126;
  uint64_t v127;
  const char *v128;
  size_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  E5RT::TensorDescriptor *v134;
  E5RT::TensorDataType::Impl **TensorDataTypeRef;
  int NumComponents;
  unint64_t v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  _QWORD *v154;
  char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  size_t v160;
  void *v161;
  char *v162;
  char *v163;
  char *v164;
  unint64_t v165;
  void *v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  __int128 v170;
  std::string *v171;
  std::string::size_type size;
  std::string *v173;
  __int128 v174;
  std::string *v175;
  __int128 v176;
  std::string *v177;
  std::string::size_type v178;
  std::string *v179;
  __int128 v180;
  std::string *v181;
  __int128 v182;
  char *v183;
  char *v184;
  unint64_t v185;
  __int128 v186;
  char *v187;
  char *v188;
  unint64_t v189;
  uint64_t v190;
  void *v191;
  std::string *v192;
  __int128 v193;
  std::string *v194;
  std::string::size_type v195;
  std::string *v196;
  __int128 v197;
  std::string *v198;
  __int128 v199;
  std::string *v200;
  std::string::size_type v201;
  std::string *v202;
  __int128 v203;
  std::string *v204;
  __int128 v205;
  std::string *v206;
  std::string::size_type v207;
  std::string *v208;
  __int128 v209;
  std::string *v210;
  __int128 v211;
  void *v212;
  void *v213;
  char *v214;
  char v215;
  uint64_t v216;
  void *PortDescriptorRef;
  E5RT::TensorDescriptor *v218;
  E5RT::TensorDescriptor *v219;
  _QWORD *TensorShape;
  unint64_t i;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  unint64_t FunctionCount;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  uint64_t *j;
  std::string::size_type v238;
  const void *v239;
  unint64_t *v240;
  unint64_t v241;
  std::string::size_type v242;
  std::string::size_type v243;
  uint64_t *v244;
  int v245;
  void *v246;
  void *v247;
  void *v248;
  std::string *v249;
  __int128 v250;
  void *exception;
  void *v252;
  void *v253;
  std::string *v254;
  __int128 v255;
  std::string *v256;
  __int128 v257;
  std::string *v258;
  std::string::size_type v259;
  std::string *v260;
  __int128 v261;
  std::string *v262;
  __int128 v263;
  void *v264;
  void *v265;
  std::string *v266;
  __int128 v267;
  void (**v268)(_QWORD);
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  char *v273;
  __int128 v274;
  void *v275[2];
  unint64_t v276;
  const void *v277;
  std::__shared_weak_count *v278;
  _QWORD v279[6];
  void *__p[2];
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  std::string v291;
  std::string v292;
  char v293[8];
  std::string v294;
  std::string v295;
  std::string v296;
  std::string v297;
  std::string v298;
  std::string v299;
  std::string v300;
  std::string v301;
  std::string __dst;
  __int128 v303;
  std::string::size_type v304;

  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this))
    return;
  BYTE7(v281) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = os_signpost_id_generate(v2);

  if (SBYTE7(v281) < 0)
    operator delete(__p[0]);
  BYTE7(v281) = 4;
  strcpy((char *)__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v4 = objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v281) < 0)
  {
    operator delete(__p[0]);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_10;
  }
  else if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_10;
  }
  if (os_signpost_enabled(v4))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "BnnsCpuOpPrepareForEncode", (const char *)&unk_191C083FD, (uint8_t *)__p, 2u);
  }
LABEL_10:

  v279[0] = MEMORY[0x1E0C809B0];
  v279[1] = 3221225472;
  v279[2] = sub_190F1C624;
  v279[3] = &__block_descriptor_48_e5_v8__0l;
  v279[4] = this;
  v279[5] = v3;
  v268 = (void (**)(_QWORD))MEMORY[0x19401D648](v279);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = 1;
    v8 = (const char *)(v5 + 16);
    if (((char)v5[39] & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (v6 != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v303, "Invalid E5 bundle resource path for BNNS op.");
    E5RT::Status::Status(&__dst, 2, &v303);
    E5RT::E5RTError::E5RTError(exception, __p, &__dst);
  }
  v7 = 0;
  v8 = (const char *)(v5 + 16);
  if ((char)v5[39] < 0)
LABEL_15:
    v8 = *(const char **)v8;
LABEL_16:
  v9 = (__int128 *)*((_QWORD *)v5 + 1);
  v10 = strlen(v8);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __p[1] = v11;
    *(_QWORD *)&v281 = v14 | 0x8000000000000000;
    __p[0] = v12;
  }
  else
  {
    BYTE7(v281) = v10;
    v12 = __p;
    if (!v10)
      goto LABEL_24;
  }
  memmove(v12, v8, (size_t)v11);
LABEL_24:
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  sub_190F1C760((uint64_t *)&v303, v9, (uint64_t *)__p, v7);
  v15 = v303;
  v303 = 0uLL;
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *(_OWORD *)((char *)this + 24) = v15;
  if (!v16)
    goto LABEL_28;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
    if (!*((_QWORD *)&v303 + 1))
      goto LABEL_32;
  }
  else
  {
LABEL_28:
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
    if (!*((_QWORD *)&v303 + 1))
      goto LABEL_32;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_32:
    if ((SBYTE7(v281) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (SBYTE7(v281) < 0)
LABEL_33:
    operator delete(__p[0]);
LABEL_34:
  v22 = (const void *)*((_QWORD *)this + 3);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v277 = v22;
  v278 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = E5RT::SharedResource::GetResourceHandle<E5Common::AutoResourcePtr &>(v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  if (v23)
  {
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v29 = BNNSGraphContextMake();
  *((_QWORD *)this + 5) = v29;
  *((_QWORD *)this + 6) = v30;
  if (!v29)
  {
    v226 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v303, "Could not load compiled BNNS graph IR into a BNNS graph context.");
    E5RT::Status::Status(&__dst, 2, &v303);
    E5RT::E5RTError::E5RTError(v226, __p, &__dst);
  }
  if (BNNSGraphContextSetArgumentType())
  {
    v227 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v303, "Could not set BNNS graph context argument type to NDArray.");
    E5RT::Status::Status(&__dst, 2, &v303);
    E5RT::E5RTError::E5RTError(v227, __p, &__dst);
  }
  *((_QWORD *)this + 10) = 24;
  *((_QWORD *)this + 11) = (char *)this + 56;
  if (BNNSGraphContextSetMessageLogCallback())
  {
    v228 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v303, "Could not set BNNS graph context logging callback.");
    E5RT::Status::Status(&__dst, 2, &v303);
    E5RT::E5RTError::E5RTError(v228, __p, &__dst);
  }
  InputCount = BNNSGraphGetInputCount();
  OutputCount = BNNSGraphGetOutputCount();
  if (InputCount != *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                               + 24))
  {
    v229 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v303, "BNNS IR input count doesn't match E5 input count");
    E5RT::Status::Status(&__dst, 2, &v303);
    E5RT::E5RTError::E5RTError(v229, __p, &__dst);
  }
  if (OutputCount != *(_QWORD *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                                + 24))
  {
    v230 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v303, "BNNS IR output count doesn't match E5 output count");
    E5RT::Status::Status(&__dst, 2, &v303);
    E5RT::E5RTError::E5RTError(v230, __p, &__dst);
  }
  v33 = *((_QWORD *)this + 12);
  v34 = OutputCount + InputCount;
  v35 = 0x2E8BA2E8BA2E8BA3 * ((*((_QWORD *)this + 13) - v33) >> 4);
  if (OutputCount + InputCount <= v35)
  {
    if (OutputCount + InputCount < v35)
      *((_QWORD *)this + 13) = v33 + 176 * v34;
  }
  else
  {
    std::vector<BNNSNDArrayDescriptor>::__append((char **)this + 12, OutputCount + InputCount - v35);
  }
  v36 = *((_QWORD *)this + 18);
  v37 = *((_QWORD *)this + 19);
  v38 = (uint64_t *)((char *)this + 144);
  v39 = (v37 - v36) >> 4;
  v40 = v34 - v39;
  v269 = (uint64_t *)((char *)this + 96);
  if (v34 <= v39)
  {
    if (v34 < v39)
    {
      v41 = v36 + 16 * v34;
      while (v37 != v41)
      {
        v42 = *(std::__shared_weak_count **)(v37 - 8);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v42->__on_zero_shared)(v42, v40);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v37 -= 16;
      }
      *((_QWORD *)this + 19) = v41;
    }
  }
  else
  {
    std::vector<std::shared_ptr<E5RT::IOPort>>::__append((uint64_t)this + 144, v40);
  }
  v45 = *((_QWORD *)this + 15);
  v46 = (*((_QWORD *)this + 16) - v45) >> 4;
  if (v34 <= v46)
  {
    if (v34 < v46)
      *((_QWORD *)this + 16) = v45 + 16 * v34;
  }
  else
  {
    std::vector<bnns_graph_argument_t>::__append((char **)this + 15, v34 - v46);
  }
  v47 = *((_QWORD *)this + 21);
  v48 = (_QWORD *)((char *)this + 168);
  v49 = (*((_QWORD *)this + 22) - v47) >> 3;
  if (v34 <= v49)
  {
    if (v34 < v49)
      *((_QWORD *)this + 22) = v47 + 8 * v34;
  }
  else
  {
    std::vector<char const*>::__append((void **)this + 21, v34 - v49);
  }
  BNNSGraphGetOutputNames_v2();
  BNNSGraphGetInputNames_v2();
  OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
  v272 = (_QWORD *)((char *)this + 168);
  if (OutputCount)
  {
    v51 = (_QWORD *)OutputPorts;
    v52 = 0;
    while (1)
    {
      v53 = *(const char **)(*v48 + 8 * v52);
      v54 = strlen(v53);
      if (v54 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v55 = (_BYTE *)v54;
      if (v54 >= 0x17)
        break;
      BYTE7(v281) = v54;
      v56 = __p;
      if (v54)
        goto LABEL_81;
LABEL_82:
      v55[(_QWORD)v56] = 0;
      v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v51, (uint64_t)__p);
      v60 = v59;
      if (!v59)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (SBYTE7(v281) < 0)
      {
        operator delete(__p[0]);
        v61 = *v38;
        v63 = v60[5];
        v62 = v60[6];
        if (v62)
        {
LABEL_87:
          v64 = (unint64_t *)(v62 + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
      }
      else
      {
        v61 = *v38;
        v63 = v59[5];
        v62 = v59[6];
        if (v62)
          goto LABEL_87;
      }
      v66 = (uint64_t *)(v61 + 16 * v52);
      v67 = (std::__shared_weak_count *)v66[1];
      *v66 = v63;
      v66[1] = v62;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (++v52 == OutputCount)
        goto LABEL_94;
    }
    v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17)
      v57 = v54 | 7;
    v58 = v57 + 1;
    v56 = operator new(v57 + 1);
    __p[1] = v55;
    *(_QWORD *)&v281 = v58 | 0x8000000000000000;
    __p[0] = v56;
    v48 = (_QWORD *)((char *)this + 168);
LABEL_81:
    memmove(v56, v53, (size_t)v55);
    goto LABEL_82;
  }
LABEL_94:
  InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
  v71 = (_QWORD *)((char *)this + 168);
  if (OutputCount < v34)
  {
    v72 = (_QWORD *)InputPorts;
    v73 = OutputCount;
    while (1)
    {
      v74 = *(const char **)(*v71 + 8 * v73);
      v75 = strlen(v74);
      if (v75 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v76 = (void *)v75;
      if (v75 >= 0x17)
      {
        v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v75 | 7) != 0x17)
          v78 = v75 | 7;
        v79 = v78 + 1;
        v77 = operator new(v78 + 1);
        __p[1] = v76;
        *(_QWORD *)&v281 = v79 | 0x8000000000000000;
        __p[0] = v77;
        v71 = (_QWORD *)((char *)this + 168);
      }
      else
      {
        BYTE7(v281) = v75;
        v77 = __p;
        if (!v75)
          goto LABEL_106;
      }
      memmove(v77, v74, (size_t)v76);
LABEL_106:
      *((_BYTE *)v76 + (_QWORD)v77) = 0;
      v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v72, (uint64_t)__p);
      if (!v80)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v81 = *v38;
      v83 = v80[5];
      v82 = v80[6];
      if (v82)
      {
        v84 = (unint64_t *)(v82 + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v86 = (uint64_t *)(v81 + 16 * v73);
      v87 = (std::__shared_weak_count *)v86[1];
      *v86 = v83;
      v86[1] = v82;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (SBYTE7(v281) < 0)
      {
        operator delete(__p[0]);
        if (++v73 == v34)
          break;
      }
      else if (++v73 == v34)
      {
        break;
      }
    }
  }
  v90 = *((_QWORD *)this + 19);
  if (v90 == *((_QWORD *)this + 18))
  {
    v96 = *((_QWORD *)this + 19);
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 40))
      goto LABEL_120;
  }
  else
  {
    v91 = 0;
    v92 = 0;
    v93 = 0;
    do
    {
      v94 = *((_QWORD *)this + 12) + v92;
      BNNSGraphContextGetTensorDescriptor_v2();
      v95 = (_QWORD *)(*((_QWORD *)this + 15) + v91);
      *v95 = v94;
      v95[1] = 0;
      ++v93;
      v90 = *((_QWORD *)this + 18);
      v96 = *((_QWORD *)this + 19);
      v92 += 176;
      v91 += 16;
    }
    while (v93 < (v96 - v90) >> 4);
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 40))
    {
LABEL_120:
      v97 = *((_QWORD *)this + 24);
      v98 = (*((_QWORD *)this + 25) - v97) >> 4;
      if (v34 <= v98)
      {
        if (v34 < v98)
          *((_QWORD *)this + 25) = v97 + 16 * v34;
      }
      else
      {
        std::vector<bnns_graph_argument_t>::__append((char **)this + 24, v34 - v98);
      }
      v151 = *((_QWORD *)this + 27);
      v152 = (*((_QWORD *)this + 28) - v151) >> 6;
      if (v34 <= v152)
      {
        if (v34 < v152)
          *((_QWORD *)this + 28) = v151 + (v34 << 6);
      }
      else
      {
        std::vector<std::array<unsigned long long,8ul>>::__append((char **)this + 27, v34 - v152);
      }
      v153 = (char *)*((_QWORD *)this + 30);
      v155 = (char *)*((_QWORD *)this + 31);
      v154 = (_QWORD *)((char *)this + 240);
      v156 = v155 - v153;
      if (OutputCount <= v155 - v153)
      {
        if (OutputCount < v155 - v153)
          *((_QWORD *)this + 31) = &v153[OutputCount];
LABEL_258:
        if (!OutputCount)
        {
LABEL_267:
          E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeBnnsGraphContextBasedOnE5InputPorts(this, 1, 0);
          goto LABEL_268;
        }
LABEL_259:
        v216 = 0;
        do
        {
          *(_BYTE *)(*v154 + v216) = 0;
          PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*v38 + 16 * v216));
          v218 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
          v219 = v218;
          if (v218)
          {
            TensorShape = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v218);
            for (i = 0; i < E5RT::TensorDescriptor::GetRank(v219); ++i)
            {
              if (*(_QWORD *)(*TensorShape + 8 * i) == -1)
                *(_BYTE *)(*v154 + v216) |= 1 << i;
            }
          }
          ++v216;
        }
        while (v216 != OutputCount);
        goto LABEL_267;
      }
      v157 = *((_QWORD *)this + 32);
      if (v157 - (uint64_t)v155 >= OutputCount - (v155 - v153))
      {
        bzero(*((void **)this + 31), OutputCount - (v155 - v153));
        *((_QWORD *)this + 31) = &v153[OutputCount];
        goto LABEL_259;
      }
      if ((OutputCount & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v158 = v157 - (_QWORD)v153;
      v159 = 2 * v158;
      if (2 * v158 <= OutputCount)
        v159 = OutputCount;
      if (v158 >= 0x3FFFFFFFFFFFFFFFLL)
        v160 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v160 = v159;
      v161 = operator new(v160);
      v162 = (char *)v161 + v160;
      v273 = (char *)v161 + v156;
      bzero((char *)v161 + v156, OutputCount - (v155 - v153));
      if (v155 == v153)
      {
        v164 = (char *)v161 + OutputCount;
        v161 = (char *)v161 + v156;
        goto LABEL_256;
      }
      if (v156 < 8)
      {
        v163 = (char *)v161 + v156;
        goto LABEL_253;
      }
      v163 = (char *)v161 + v156;
      if ((unint64_t)(v153 - (_BYTE *)v161) >= 0x20)
      {
        if (v156 < 0x20)
        {
          v165 = 0;
          goto LABEL_227;
        }
        v165 = v156 & 0xFFFFFFFFFFFFFFE0;
        v183 = v155 - 16;
        v184 = (char *)v161 + v155 - 16 - v153;
        v185 = v156 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v186 = *(_OWORD *)v183;
          *((_OWORD *)v184 - 1) = *((_OWORD *)v183 - 1);
          *(_OWORD *)v184 = v186;
          v184 -= 32;
          v183 -= 32;
          v185 -= 32;
        }
        while (v185);
        if (v156 == v165)
          goto LABEL_255;
        if ((v156 & 0x18) != 0)
        {
LABEL_227:
          v163 = &v273[-(v156 & 0xFFFFFFFFFFFFFFF8)];
          v187 = &v155[-v165 - 8];
          v188 = (char *)(v187 - v153);
          v189 = v165 - (v156 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v190 = *(_QWORD *)v187;
            v187 -= 8;
            *(_QWORD *)&v188[(_QWORD)v161] = v190;
            v188 -= 8;
            v189 += 8;
          }
          while (v189);
          v155 -= v156 & 0xFFFFFFFFFFFFFFF8;
          if (v156 == (v156 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_255;
          goto LABEL_253;
        }
        v163 = &v273[-v165];
        v155 -= v165;
      }
LABEL_253:
      v214 = v163 - 1;
      do
      {
        v215 = *--v155;
        *v214-- = v215;
      }
      while (v155 != v153);
LABEL_255:
      v155 = v153;
      v164 = (char *)v161 + OutputCount;
LABEL_256:
      *((_QWORD *)this + 30) = v161;
      *((_QWORD *)this + 31) = v164;
      *((_QWORD *)this + 32) = v162;
      if (v155)
        operator delete(v155);
      goto LABEL_258;
    }
  }
  if (v96 != v90)
  {
    v99 = 0;
    v270 = 0;
    v271 = 8;
    while (1)
    {
      v100 = *(E5RT::IOPortImpl ***)(v90 + 16 * v99);
      v101 = (void *)E5RT::IOPort::GetPortDescriptorRef(v100);
      v102 = *v269;
      v103 = *(const char **)(*v272 + 8 * v99);
      v104 = strlen(v103);
      if (v104 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v105 = v104;
      if (v104 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v104;
      p_dst = &__dst;
      if (v104)
        goto LABEL_133;
LABEL_134:
      p_dst->__r_.__value_.__s.__data_[v105] = 0;
      v109 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v101);
      v110 = v109;
      if (!v109)
      {
        v247 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "PopulateStridesFromPortDescriptor");
        std::string::basic_string[abi:ne180100]<0>(&v303, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
        E5RT::Status::Status(&v301, 6, &v303);
        E5RT::E5RTError::E5RTError(v247, __p, &v301);
      }
      Rank = E5RT::TensorDescriptor::GetRank(v109);
      if (Rank)
      {
        v112 = v102 + 176 * v99;
        v115 = *(_QWORD *)(v112 + 72);
        v114 = (unint64_t *)(v112 + 72);
        v113 = v115;
        if ((v115 & 0x7FFFFFFFFFFFFFFFLL) == 0)
          goto LABEL_147;
        v116 = Rank - 1;
        if (Rank == 1)
          goto LABEL_148;
        v117 = v102 + 176 * v99;
        v118 = *(_QWORD *)(v117 + 80);
        if (v118 == 0x8000000000000000 || v118 < *(_QWORD *)(v117 + 8 * Rank) * v113)
        {
LABEL_147:
          v124 = sub_190F1EA90(*(_DWORD *)(v102 + 176 * v99 + 144));
          TensorStrides = (char **)E5RT::TensorDescriptor::GetTensorStrides(v110);
          sub_190F1C1E4(v114, *TensorStrides, TensorStrides[1], v124);
        }
        else
        {
          v119 = v102 + v270;
          v120 = 11;
          while (1)
          {
            v121 = v116 - 1;
            if (v116 == 1)
              break;
            v122 = *(_QWORD *)(v119 + 8 * v116) * v118;
            v118 = *(_QWORD *)(v119 + 8 * v120++);
            v123 = v118 != 0x8000000000000000 && v118 >= v122;
            v116 = v121;
            if (!v123)
            {
              if (v120 - 10 >= Rank)
                break;
              goto LABEL_147;
            }
          }
        }
      }
LABEL_148:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v126 = (void *)E5RT::IOPort::GetPortDescriptorRef(v100);
      v127 = *v269;
      v128 = *(const char **)(*v272 + 8 * v99);
      v129 = strlen(v128);
      if (v129 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v130 = (void *)v129;
      if (v129 >= 0x17)
      {
        v132 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v129 | 7) != 0x17)
          v132 = v129 | 7;
        v133 = v132 + 1;
        v131 = operator new(v132 + 1);
        v275[1] = v130;
        v276 = v133 | 0x8000000000000000;
        v275[0] = v131;
      }
      else
      {
        HIBYTE(v276) = v129;
        v131 = v275;
        if (!v129)
          goto LABEL_158;
      }
      memmove(v131, v128, (size_t)v130);
LABEL_158:
      *((_BYTE *)v130 + (_QWORD)v131) = 0;
      v134 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v126);
      if (!v134)
      {
        v246 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "ValidatePortDescriptor");
        std::string::basic_string[abi:ne180100]<0>(&v303, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
        E5RT::Status::Status(&__dst, 6, &v303);
        E5RT::E5RTError::E5RTError(v246, __p, &__dst);
      }
      v289 = 0u;
      v290 = 0u;
      v287 = 0u;
      v288 = 0u;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      *(_OWORD *)__p = 0u;
      v281 = 0u;
      sub_190F1BD3C((uint64_t)__p, v134);
      TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v134);
      NumComponents = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
      v137 = E5RT::TensorDescriptor::GetRank(v134);
      v138 = *(_DWORD *)(v127 + 176 * v99 + 144);
      if ((_DWORD)v289 != v138 && ((_DWORD)v289 != 262152 || v138 != 1048584))
      {
        v212 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v303, "DescriptorCompatibility");
        std::string::basic_string[abi:ne180100]<0>(&__dst, "E5RT tensor data type does not match BNNS tensor data type");
        E5RT::Status::Status(&v301, 6, &__dst);
        E5RT::E5RTError::E5RTError(v212, &v303, &v301);
      }
      if (HIDWORD(__p[0]) != *(_DWORD *)(v127 + 176 * v99 + 4))
      {
        v213 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v303, "DescriptorCompatibility");
        std::string::basic_string[abi:ne180100]<0>(&__dst, "E5RT tensor layout does not match BNNS tensor layout");
        E5RT::Status::Status(&v301, 6, &__dst);
        E5RT::E5RTError::E5RTError(v213, &v303, &v301);
      }
      if (v137)
      {
        v139 = 0;
        v140 = v127;
        v141 = v127 + v271;
        v142 = 1;
        do
        {
          v143 = *(void **)(v141 + 8 * v139);
          if (v143 && (v144 = __p[v139 + 1]) != 0)
          {
            if (v144 != v143)
            {
              v166 = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(&v303, "DescriptorCompatibility");
              std::to_string(&v296, v139);
              v167 = std::string::insert(&v296, 0, "E5RT tensor shape does not match BNNS tensor shape at index ");
              v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
              v297.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v168;
              v167->__r_.__value_.__l.__size_ = 0;
              v167->__r_.__value_.__r.__words[2] = 0;
              v167->__r_.__value_.__r.__words[0] = 0;
              v169 = std::string::append(&v297, " (");
              v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
              v298.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v170;
              v169->__r_.__value_.__l.__size_ = 0;
              v169->__r_.__value_.__r.__words[2] = 0;
              v169->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v295, (unint64_t)v144);
              if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v171 = &v295;
              else
                v171 = (std::string *)v295.__r_.__value_.__r.__words[0];
              if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v295.__r_.__value_.__r.__words[2]);
              else
                size = v295.__r_.__value_.__l.__size_;
              v173 = std::string::append(&v298, (const std::string::value_type *)v171, size);
              v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
              v299.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v174;
              v173->__r_.__value_.__l.__size_ = 0;
              v173->__r_.__value_.__r.__words[2] = 0;
              v173->__r_.__value_.__r.__words[0] = 0;
              v175 = std::string::append(&v299, " vs ");
              v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
              v300.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v176;
              v175->__r_.__value_.__l.__size_ = 0;
              v175->__r_.__value_.__r.__words[2] = 0;
              v175->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v294, *(_QWORD *)(v140 + v271 + 8 * v139));
              if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v177 = &v294;
              else
                v177 = (std::string *)v294.__r_.__value_.__r.__words[0];
              if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v178 = HIBYTE(v294.__r_.__value_.__r.__words[2]);
              else
                v178 = v294.__r_.__value_.__l.__size_;
              v179 = std::string::append(&v300, (const std::string::value_type *)v177, v178);
              v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
              v301.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v180;
              v179->__r_.__value_.__l.__size_ = 0;
              v179->__r_.__value_.__r.__words[2] = 0;
              v179->__r_.__value_.__r.__words[0] = 0;
              v181 = std::string::append(&v301, ")");
              v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v182;
              v181->__r_.__value_.__l.__size_ = 0;
              v181->__r_.__value_.__r.__words[2] = 0;
              v181->__r_.__value_.__r.__words[0] = 0;
              E5RT::Status::Status(&v292, 6, &__dst);
              E5RT::E5RTError::E5RTError(v166, &v303, &v292);
            }
          }
          else
          {
            v142 = 0;
          }
          ++v139;
        }
        while (v137 != v139);
        if (v142)
        {
          v145 = sub_190F1EA90(v289);
          if (NumComponents == 1)
          {
            v146 = v145;
            v147 = v140 + v270;
            v148 = 9;
            do
            {
              v149 = *(void **)(v147 + v148 * 8);
              if (v149 != (void *)0x8000000000000000 && *(_QWORD *)(v147 + 8 * v137) >= 2uLL)
              {
                v150 = __p[v148];
                if (v150 != v149)
                {
                  v191 = __cxa_allocate_exception(0x18uLL);
                  std::string::basic_string[abi:ne180100]<0>(&v303, "DescriptorCompatibility");
                  std::operator+<char>();
                  v192 = std::string::append(&v295, "' stride does not match BNNS tensor stride at index ");
                  v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
                  v296.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v296.__r_.__value_.__l.__data_ = v193;
                  v192->__r_.__value_.__l.__size_ = 0;
                  v192->__r_.__value_.__r.__words[2] = 0;
                  v192->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v294, v137 - 1);
                  if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v194 = &v294;
                  else
                    v194 = (std::string *)v294.__r_.__value_.__r.__words[0];
                  if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v195 = HIBYTE(v294.__r_.__value_.__r.__words[2]);
                  else
                    v195 = v294.__r_.__value_.__l.__size_;
                  v196 = std::string::append(&v296, (const std::string::value_type *)v194, v195);
                  v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
                  v297.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v197;
                  v196->__r_.__value_.__l.__size_ = 0;
                  v196->__r_.__value_.__r.__words[2] = 0;
                  v196->__r_.__value_.__r.__words[0] = 0;
                  v198 = std::string::append(&v297, " (");
                  v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
                  v298.__r_.__value_.__r.__words[2] = v198->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v199;
                  v198->__r_.__value_.__l.__size_ = 0;
                  v198->__r_.__value_.__r.__words[2] = 0;
                  v198->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v292, (_QWORD)v150 * v146);
                  if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v200 = &v292;
                  else
                    v200 = (std::string *)v292.__r_.__value_.__r.__words[0];
                  if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v201 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
                  else
                    v201 = v292.__r_.__value_.__l.__size_;
                  v202 = std::string::append(&v298, (const std::string::value_type *)v200, v201);
                  v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
                  v299.__r_.__value_.__r.__words[2] = v202->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v203;
                  v202->__r_.__value_.__l.__size_ = 0;
                  v202->__r_.__value_.__r.__words[2] = 0;
                  v202->__r_.__value_.__r.__words[0] = 0;
                  v204 = std::string::append(&v299, " vs ");
                  v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
                  v300.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v205;
                  v204->__r_.__value_.__l.__size_ = 0;
                  v204->__r_.__value_.__r.__words[2] = 0;
                  v204->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v291, *(_QWORD *)(v140 + v270 + v148 * 8) * v146);
                  if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v206 = &v291;
                  else
                    v206 = (std::string *)v291.__r_.__value_.__r.__words[0];
                  if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v207 = HIBYTE(v291.__r_.__value_.__r.__words[2]);
                  else
                    v207 = v291.__r_.__value_.__l.__size_;
                  v208 = std::string::append(&v300, (const std::string::value_type *)v206, v207);
                  v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
                  v301.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v209;
                  v208->__r_.__value_.__l.__size_ = 0;
                  v208->__r_.__value_.__r.__words[2] = 0;
                  v208->__r_.__value_.__r.__words[0] = 0;
                  v210 = std::string::append(&v301, ").");
                  v211 = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
                  __dst.__r_.__value_.__r.__words[2] = v210->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v211;
                  v210->__r_.__value_.__l.__size_ = 0;
                  v210->__r_.__value_.__r.__words[2] = 0;
                  v210->__r_.__value_.__r.__words[0] = 0;
                  E5RT::Status::Status(v293, 6, &__dst);
                  E5RT::E5RTError::E5RTError(v191, &v303, v293);
                }
              }
              ++v148;
              --v137;
            }
            while (v137);
          }
        }
      }
      else
      {
        sub_190F1EA90(v289);
      }
      if (SHIBYTE(v276) < 0)
        operator delete(v275[0]);
      ++v99;
      v90 = *((_QWORD *)this + 18);
      v270 += 176;
      v271 += 176;
      if (v99 >= (*((_QWORD *)this + 19) - v90) >> 4)
        goto LABEL_268;
    }
    v107 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v107 = v104 | 7;
    v108 = v107 + 1;
    p_dst = (std::string *)operator new(v107 + 1);
    __dst.__r_.__value_.__l.__size_ = v105;
    __dst.__r_.__value_.__r.__words[2] = v108 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_133:
    memmove(p_dst, v103, v105);
    goto LABEL_134;
  }
LABEL_268:
  v222 = *((_QWORD *)this + 1);
  v224 = *(_QWORD *)(v222 + 48);
  v223 = *(_QWORD *)(v222 + 56);
  v225 = v223 - v224;
  if (v223 != v224)
  {
    FunctionCount = BNNSGraphGetFunctionCount();
    v232 = FunctionCount;
    if (FunctionCount == -1)
    {
      v252 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(&v303, "Unable to query # of BNNS functions.");
      E5RT::Status::Status(&__dst, 8, &v303);
      E5RT::E5RTError::E5RTError(v252, __p, &__dst);
    }
    v233 = 0xAAAAAAAAAAAAAAABLL * (v225 >> 3) + 1;
    if (v233 > FunctionCount)
    {
      v253 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
      std::to_string(&v299, v233);
      v254 = std::string::insert(&v299, 0, "Expected at least ");
      v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
      v300.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v255;
      v254->__r_.__value_.__l.__size_ = 0;
      v254->__r_.__value_.__r.__words[2] = 0;
      v254->__r_.__value_.__r.__words[0] = 0;
      v256 = std::string::append(&v300, " callables in BNNS graph, found ");
      v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
      v301.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v257;
      v256->__r_.__value_.__l.__size_ = 0;
      v256->__r_.__value_.__r.__words[2] = 0;
      v256->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v298, v232);
      if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v258 = &v298;
      else
        v258 = (std::string *)v298.__r_.__value_.__r.__words[0];
      if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v259 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
      else
        v259 = v298.__r_.__value_.__l.__size_;
      v260 = std::string::append(&v301, (const std::string::value_type *)v258, v259);
      v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v260->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v261;
      v260->__r_.__value_.__l.__size_ = 0;
      v260->__r_.__value_.__r.__words[2] = 0;
      v260->__r_.__value_.__r.__words[0] = 0;
      v262 = std::string::append(&__dst, " instead.");
      v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
      v304 = v262->__r_.__value_.__r.__words[2];
      v303 = v263;
      v262->__r_.__value_.__l.__size_ = 0;
      v262->__r_.__value_.__r.__words[2] = 0;
      v262->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(&v297, 2, &v303);
      E5RT::E5RTError::E5RTError(v253, __p, &v297);
    }
    std::vector<char const*>::vector(__p, FunctionCount);
    if (BNNSGraphGetFunctionNames())
    {
      v264 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v303, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(&__dst, "Unable to query BNNS for function names.");
      E5RT::Status::Status(&v301, 8, &__dst);
      E5RT::E5RTError::E5RTError(v264, &v303, &v301);
    }
    if (v232)
    {
      v234 = 0;
      v235 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 16);
      do
      {
        while (1)
        {
          v236 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v303, *((char **)__p[0] + v234));
          if (!std::operator==[abi:ne180100]<std::allocator<char>>(v236, v235)
            && *(_QWORD *)(v222 + 56) == std::find[abi:ne180100]<std::__wrap_iter<std::string const*>,std::string>(*(_QWORD *)(v222 + 48), *(_QWORD *)(v222 + 56), (unsigned __int8 **)&v303))
          {
            v248 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(&__dst, "PrepareOpForEncode");
            std::operator+<char>();
            v249 = std::string::append(&v300, " is not part of base or possible callee names.");
            v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
            v301.__r_.__value_.__r.__words[2] = v249->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v250;
            v249->__r_.__value_.__l.__size_ = 0;
            v249->__r_.__value_.__r.__words[2] = 0;
            v249->__r_.__value_.__r.__words[0] = 0;
            E5RT::Status::Status(&v299, 2, &v301);
            E5RT::E5RTError::E5RTError(v248, &__dst, &v299);
          }
          if (SHIBYTE(v304) < 0)
            break;
          if (v232 == ++v234)
            goto LABEL_287;
        }
        operator delete((void *)v303);
        ++v234;
      }
      while (v232 != v234);
    }
LABEL_287:
    if (*((_QWORD *)this + 36))
    {
      v303 = 0uLL;
      v304 = 0;
      for (j = (uint64_t *)*((_QWORD *)this + 35); j; j = (uint64_t *)*j)
      {
        v238 = (std::string::size_type)(j + 2);
        if (*((char *)j + 39) < 0)
          v238 = j[2];
        sub_190F1C760((uint64_t *)&v301, (__int128 *)(j + 5), j + 2, 0);
        v239 = (const void *)v301.__r_.__value_.__r.__words[0];
        v274 = *(_OWORD *)&v301.__r_.__value_.__l.__data_;
        if (v301.__r_.__value_.__l.__size_)
        {
          v240 = (unint64_t *)(v301.__r_.__value_.__l.__size_ + 8);
          do
            v241 = __ldxr(v240);
          while (__stxr(v241 + 1, v240));
        }
        sub_190F1C960(v239);
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&v274);
        v242 = BNNSGraphContextMake();
        __dst.__r_.__value_.__r.__words[0] = v238;
        __dst.__r_.__value_.__l.__size_ = v242;
        __dst.__r_.__value_.__r.__words[2] = v243;
        std::vector<function_graph_map_t>::push_back[abi:ne180100]((void **)&v303, (__int128 *)&__dst);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(j + 2);
        v244 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 304, (uint64_t)(j + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
        std::shared_ptr<E5RT::SharedResource>::operator=[abi:ne180100]((uint64_t)(v244 + 5), (__int128 *)&v301);
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&v301);
      }
      v245 = BNNSGraphContextReplaceFunctions();
      if (v245)
      {
        v265 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__dst, "PrepareOpForEncode");
        std::to_string(&v300, v245);
        v266 = std::string::insert(&v300, 0, "BNNSGraphContextReplaceFunctions failed with error num = ");
        v267 = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
        v301.__r_.__value_.__r.__words[2] = v266->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v267;
        v266->__r_.__value_.__l.__size_ = 0;
        v266->__r_.__value_.__r.__words[2] = 0;
        v266->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v299, 11, &v301);
        E5RT::E5RTError::E5RTError(v265, &__dst, &v299);
      }
      if ((_QWORD)v303)
      {
        *((_QWORD *)&v303 + 1) = v303;
        operator delete((void *)v303);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v268[2](v268);

}

void sub_190ECFA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(_QWORD), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)(v29 - 128);
  if (v31)
  {
    *(_QWORD *)(v29 - 120) = v31;
    operator delete(v31);
  }
  if (__p)
    operator delete(__p);
  a11[2](a11);

  _Unwind_Resume(a1);
}

void std::vector<char const*>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void std::vector<std::shared_ptr<E5RT::IOPort>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v5)
LABEL_27:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v6);
      v18 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v5 != v18)
      {
        do
        {
          v19 = (std::__shared_weak_count *)*(v5 - 1);
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v5 -= 2;
        }
        while (v5 != v18);
        v5 = v18;
      }
      if (v5)
        goto LABEL_27;
    }
  }
}

void std::vector<bnns_graph_argument_t>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<BNNSNDArrayDescriptor>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v5 = a1[1];
  v4 = a1[2];
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 176 * ((176 * a2 - 176) / 0xB0) + 176;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1745D1745D1745DLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = 0x2E8BA2E8BA2E8BA3 * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xBA2E8BA2E8BA2ELL)
      v10 = 0x1745D1745D1745DLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1745D1745D1745DLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(176 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[176 * v7];
    v14 = &v11[176 * v10];
    v15 = 176 * ((176 * a2 - 176) / 0xB0) + 176;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 11);
        v18 = *((_OWORD *)v5 - 9);
        *((_OWORD *)v13 - 10) = *((_OWORD *)v5 - 10);
        *((_OWORD *)v13 - 9) = v18;
        *((_OWORD *)v13 - 11) = v17;
        v19 = *((_OWORD *)v5 - 8);
        v20 = *((_OWORD *)v5 - 7);
        v21 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v13 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v13 - 5) = v21;
        *((_OWORD *)v13 - 8) = v19;
        *((_OWORD *)v13 - 7) = v20;
        v22 = *((_OWORD *)v5 - 4);
        v23 = *((_OWORD *)v5 - 3);
        v24 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v24;
        *((_OWORD *)v13 - 4) = v22;
        *((_OWORD *)v13 - 3) = v23;
        v13 -= 176;
        v5 -= 176;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::PrepareOpForEncode(E5RT::Ops::BaseEirInferenceOperation *this)
{
  E5RT::ExecutionStreamOperationInternal **InitializedImpl;

  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  InitializedImpl = (E5RT::ExecutionStreamOperationInternal **)E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl((const std::string *)this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::PrepareOpForEncode(InitializedImpl);
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_190ED0BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

std::string::size_type E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl(const std::string *this)
{
  std::string::size_type size;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  size = this[12].__r_.__value_.__l.__size_;
  if (*(_BYTE *)(size + 129))
    return size;
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  v21 = v4;
  std::string::operator=((std::string *)(v4 + 56), this + 14);
  (*(void (**)(void **__return_ptr, const std::string *))(this->__r_.__value_.__r.__words[0] + 168))(__p, this);
  v5 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(v4 + 8) = v5;
    operator delete(v5);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)v4 = *(_OWORD *)__p;
  *(_QWORD *)(v4 + 16) = v20;
  (*(void (**)(void **__return_ptr, const std::string *))(this->__r_.__value_.__r.__words[0] + 176))(__p, this);
  v6 = *(void **)(v4 + 24);
  if (v6)
  {
    *(_QWORD *)(v4 + 32) = v6;
    operator delete(v6);
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
  }
  *(_OWORD *)(v4 + 24) = *(_OWORD *)__p;
  *(_QWORD *)(v4 + 40) = v20;
  *(_DWORD *)(v4 + 48) = (*(uint64_t (**)(const std::string *))(this->__r_.__value_.__r.__words[0] + 184))(this);
  *(_DWORD *)(v4 + 52) = (*(uint64_t (**)(const std::string *))(this->__r_.__value_.__r.__words[0] + 192))(this);
  (*(void (**)(void **__return_ptr, const std::string *))(this->__r_.__value_.__r.__words[0] + 200))(__p, this);
  v7 = (void **)(v4 + 80);
  if (*(char *)(v4 + 103) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)__p;
  *(_QWORD *)(v4 + 96) = v20;
  (*(void (**)(void **__return_ptr, const std::string *))(this->__r_.__value_.__r.__words[0] + 208))(__p, this);
  v8 = (int *)__p[0];
  if (__p[0] == __p[1])
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v11 = *v8++;
      v10 = v11;
      v12 = v9 | 4;
      v13 = v9 | 2;
      if (v11 == 1)
        v9 |= 1u;
      if (v10 == 2)
        v9 = v13;
      if (v10 == 3)
        v9 = v12;
    }
    while (v8 != __p[1]);
  }
  *(_DWORD *)(v4 + 104) = v9;
  v14 = this[12].__r_.__value_.__l.__size_;
  v21 = 0;
  v18 = v4;
  E5RT::Ops::BaseEirInferenceOperation::Impl::Initialize(v14, &v18);
  v15 = v18;
  v18 = 0;
  if (!v15)
    goto LABEL_28;
  if ((*(char *)(v15 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(v15 + 79) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_31:
    operator delete(*(void **)(v15 + 56));
    v16 = *(void **)(v15 + 24);
    if (!v16)
      goto LABEL_25;
    goto LABEL_24;
  }
  operator delete(*(void **)(v15 + 80));
  if (*(char *)(v15 + 79) < 0)
    goto LABEL_31;
LABEL_23:
  v16 = *(void **)(v15 + 24);
  if (v16)
  {
LABEL_24:
    *(_QWORD *)(v15 + 32) = v16;
    operator delete(v16);
  }
LABEL_25:
  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  MEMORY[0x19401CD90](v15, 0x1092C40A2AD7073);
LABEL_28:
  size = this[12].__r_.__value_.__l.__size_;
  if (!__p[0])
    return size;
  __p[1] = __p[0];
  operator delete(__p[0]);
  return size;
}

void sub_190ED0E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::~unique_ptr[abi:ne180100](&a10);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
    std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::~unique_ptr[abi:ne180100](&a14);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

_OWORD *E5RT::Ops::CpuInferenceOperation::SupportedInputsOutputsTypes@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  _OWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(0x10uLL);
  *a1 = v3;
  *v3 = xmmword_191A761A0;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

_OWORD *E5RT::Ops::CpuInferenceOperation::SupportedSurfaceTypes@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  _OWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(0x10uLL);
  *a1 = v3;
  *v3 = xmmword_191A71260;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t E5RT::Ops::CpuInferenceOperation::StorageTypeForLayers(E5RT::Ops::CpuInferenceOperation *this)
{
  return 65568;
}

void E5RT::Ops::CpuInferenceOperation::ConfigurationName(E5RT::Ops::CpuInferenceOperation *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 48);
  if (*(char *)(v2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 24), *(_QWORD *)(v2 + 32));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 24);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

_DWORD *E5RT::Ops::CpuInferenceOperation::AllowedBackends@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *v3;
  _DWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(4uLL);
  *a1 = v3;
  *v3 = 1;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t E5RT::Ops::CpuInferenceOperation::PlatformEngine(E5RT::Ops::CpuInferenceOperation *this)
{
  return 0;
}

uint64_t E5RT::SharedResource::GetResourceHandle<E5Common::AutoResourcePtr &>(const void *a1)
{
  _QWORD *v1;

  if (!v1)
    __cxa_bad_cast();
  return v1[4];
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  EspressoInnerProductWeightsForMPS *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  _OWORD v24[8];
  int v25;

  v6 = (char *)operator new(0x278uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1EC0;
  v21 = a2[6];
  v22 = a2[7];
  v23 = *((_DWORD *)a2 + 32);
  v17 = a2[2];
  v18 = a2[3];
  v19 = a2[4];
  v20 = a2[5];
  v15 = *a2;
  v16 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA90F8;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *((_QWORD *)v6 + 58) = 0;
  *((_QWORD *)v6 + 59) = 0;
  v6[480] = 0;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *((_QWORD *)v6 + 77) = 0;
  v6[624] = 1;
  *(_OWORD *)(v6 + 360) = v17;
  *(_OWORD *)(v6 + 376) = v18;
  *(_OWORD *)(v6 + 328) = v15;
  *(_OWORD *)(v6 + 344) = v16;
  *((_DWORD *)v6 + 114) = v23;
  *(_OWORD *)(v6 + 424) = v21;
  *(_OWORD *)(v6 + 440) = v22;
  *(_OWORD *)(v6 + 392) = v19;
  *(_OWORD *)(v6 + 408) = v20;
  v7 = [EspressoInnerProductWeightsForMPS alloc];
  v8 = *(_OWORD *)(v6 + 440);
  v24[6] = *(_OWORD *)(v6 + 424);
  v24[7] = v8;
  v25 = *((_DWORD *)v6 + 114);
  v9 = *(_OWORD *)(v6 + 376);
  v24[2] = *(_OWORD *)(v6 + 360);
  v24[3] = v9;
  v10 = *(_OWORD *)(v6 + 408);
  v24[4] = *(_OWORD *)(v6 + 392);
  v24[5] = v10;
  v11 = *(_OWORD *)(v6 + 344);
  v24[0] = *(_OWORD *)(v6 + 328);
  v24[1] = v11;
  v12 = -[EspressoInnerProductWeightsForMPS initWithParams:](v7, "initWithParams:", v24);
  v13 = (void *)*((_QWORD *)v6 + 72);
  *((_QWORD *)v6 + 72) = v12;

  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190ED1168(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t espresso_plan_submit_set_multiple_buffering(_QWORD *a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)MEMORY[0x19401D4A4]();
  if (a1)
  {
    v6 = 4294967290;
    if (a2 && v5)
    {
      v7 = a1[133];
      if (*(_DWORD *)(v7 + 160))
      {
        v6 = 4294967291;
      }
      else
      {
        EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::set_n_async_buffers((EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *)(v7 + 192), a2);
        v6 = 0;
      }
    }
  }
  else
  {
    v6 = 4294967290;
  }
  objc_autoreleasePoolPop(v4);
  return v6;
}

void EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t::set_n_async_buffers(EspressoLight::espresso_plan::priv_t::multiple_buffers_manager_t *this, unint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  *((_QWORD *)this + 1) = a2;
  std::vector<unsigned long>::resize((_QWORD *)this + 16, a2);
  v5 = *((_QWORD *)this + 19);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 20) - v5;
  if (v6 <= v7)
  {
    if (v6 < v7)
      *((_QWORD *)this + 20) = v5 + v6;
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)this + 19, v6 - v7);
  }
  std::mutex::unlock(v4);
}

void sub_190ED1434(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::vector<signed char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t e5rt_precompiled_compute_op_create_options_set_operation_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCB8C8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190ED160C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DCB848;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190ED16E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC68D8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190ED17B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC74F8;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190ED1888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_preferred_cpu_backend(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v3 = operator new(0x20uLL);
  *v3 = &off_1E2DC9E68;
  v3[1] = a1;
  v3[2] = &v8;
  v3[3] = 1;
  v10 = v3;
  v4 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
  }
  return v4;
}

void sub_190ED1978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC9668;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190ED1A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_create(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC95E8;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190ED1B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_create(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC73F8;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190ED1BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shape(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DCA468;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190ED1CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_compute_device_types_mask(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7[0] = &off_1E2DC96E8;
  v7[1] = &v6;
  v7[2] = a1;
  v8 = v7;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190ED1DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_compile_from_ir_program(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DC75F8;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190ED1EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5Compiler::GetCompiler(E5RT::E5Compiler *this)
{
  uint64_t result;
  void *exception;
  _QWORD v3[3];
  _BYTE v4[8];
  _QWORD v5[3];

  E5Common::DispatchOnceWithExceptionThrow(&qword_1EE2147A0, (uint64_t)&unk_1E2DC9078);
  result = qword_1EE2147A8;
  if (!qword_1EE2147A8)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetCompiler");
    std::string::basic_string[abi:ne180100]<0>(v3, "Unable to obtain the shared E5Compiler. An exception was encountered while creating the object.");
    E5RT::Status::Status(v4, 11, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_190ED1F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5Common::DispatchOnceWithExceptionThrow(dispatch_once_t *a1, uint64_t a2)
{
  void *ptr;
  void *v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  _QWORD block[6];
  uint64_t v8;
  const std::exception_ptr *v9;
  uint64_t v10;
  std::exception_ptr *(*v11)(std::exception_ptr *, const std::exception_ptr *);
  void (*v12)(std::exception_ptr *);
  std::exception_ptr v13;

  v8 = 0;
  v9 = (const std::exception_ptr *)&v8;
  v10 = 0x3002000000;
  v11 = sub_1910088AC;
  v12 = sub_1910088B8;
  v13.__ptr_ = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1910088C0;
  block[3] = &unk_1E2DCFA30;
  block[4] = a2;
  block[5] = &v8;
  if (*a1 == -1)
  {
    v6.__ptr_ = 0;
    ptr = v9[5].__ptr_;
    std::exception_ptr::~exception_ptr(&v6);
    if (!ptr)
    {
LABEL_3:
      _Block_object_dispose(&v8, 8);
      std::exception_ptr::~exception_ptr(&v13);
      return;
    }
  }
  else
  {
    dispatch_once(a1, block);
    v6.__ptr_ = 0;
    v3 = v9[5].__ptr_;
    std::exception_ptr::~exception_ptr(&v6);
    if (!v3)
      goto LABEL_3;
  }
  std::exception_ptr::exception_ptr(&v5, v9 + 5);
  v4.__ptr_ = &v5;
  std::rethrow_exception(v4);
  __break(1u);
}

void sub_190ED20FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::exception_ptr *v17;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  _Block_object_dispose(&a17, 8);
  std::exception_ptr::~exception_ptr(v17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v28 = a4;
  v19 = xmmword_191A93470;
  v20 = 0x100000000;
  v21 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v22 = _D0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = _D0;
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(a2, (uint64_t)&v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_190ED223C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  int v63;
  void *v64[2];
  char v65;
  void *v66;
  std::__shared_weak_count *v67;
  void *__p[2];
  char v69;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v64, "scaling_factor_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v66 + 160))(v66, __p, a2 + 4);
    if (v69 < 0)
      operator delete(__p[0]);
    v5 = v67;
    if (v67)
    {
      p_shared_owners = (unint64_t *)&v67->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "scaling_factor_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v66 + 160))(v66, __p, a2 + 8);
    if (v69 < 0)
      operator delete(__p[0]);
    v8 = v67;
    if (v67)
    {
      v9 = (unint64_t *)&v67->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v66 + 160))(v66, __p, a2 + 12);
    if (v69 < 0)
      operator delete(__p[0]);
    v11 = v67;
    if (v67)
    {
      v12 = (unint64_t *)&v67->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "align_corners");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v66 + 160))(v66, __p, a2 + 16);
    if (v69 < 0)
      operator delete(__p[0]);
    v14 = v67;
    if (v67)
    {
      v15 = (unint64_t *)&v67->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "is_legacy_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v66 + 160))(v66, __p, a2 + 20);
    if (v69 < 0)
      operator delete(__p[0]);
    v17 = v67;
    if (v67)
    {
      v18 = (unint64_t *)&v67->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "fractional_scaling_factor_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v66 + 216))(v66, __p, a2 + 28);
    if (v69 < 0)
      operator delete(__p[0]);
    v20 = v67;
    if (v67)
    {
      v21 = (unint64_t *)&v67->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "fractional_scaling_factor_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v66 + 216))(v66, __p, a2 + 32);
    if (v69 < 0)
      operator delete(__p[0]);
    v23 = v67;
    if (v67)
    {
      v24 = (unint64_t *)&v67->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "use_fractional_scale_factors");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v66 + 208))(v66, __p, a2 + 24);
    if (v69 < 0)
      operator delete(__p[0]);
    v26 = v67;
    if (v67)
    {
      v27 = (unint64_t *)&v67->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    v30 = *(unsigned __int8 *)(a2 + 36);
    v29 = a2 + 36;
    if (!v30)
    {
      std::string::basic_string[abi:ne180100]<0>(v64, "recompute_fractional_scale_factors");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v66 + 208))(v66, __p, v29);
      if (v69 < 0)
        operator delete(__p[0]);
      v31 = v67;
      if (v67)
      {
        v32 = (unint64_t *)&v67->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v65 < 0)
      {
        v34 = v64[0];
LABEL_191:
        operator delete(v34);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v64, "scaling_factor_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v66 + 24))(v66, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v66 + 40))(v66, __p);
    if (v69 < 0)
      operator delete(__p[0]);
    v35 = v67;
    if (v67)
    {
      v36 = (unint64_t *)&v67->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "scaling_factor_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v66 + 24))(v66, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v66 + 40))(v66, __p);
    if (v69 < 0)
      operator delete(__p[0]);
    v38 = v67;
    if (v67)
    {
      v39 = (unint64_t *)&v67->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v66 + 24))(v66, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v66 + 40))(v66, __p);
    if (v69 < 0)
      operator delete(__p[0]);
    v41 = v67;
    if (v67)
    {
      v42 = (unint64_t *)&v67->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "align_corners");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v66 + 24))(v66, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v66 + 40))(v66, __p);
    if (v69 < 0)
      operator delete(__p[0]);
    v44 = v67;
    if (v67)
    {
      v45 = (unint64_t *)&v67->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "is_legacy_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v66 + 24))(v66, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v66 + 40))(v66, __p);
    if (v69 < 0)
      operator delete(__p[0]);
    v47 = v67;
    if (v67)
    {
      v48 = (unint64_t *)&v67->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "fractional_scaling_factor_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v66 + 24))(v66, __p))
      *(float *)(a2 + 28) = (*(float (**)(void *, void **))(*(_QWORD *)v66 + 96))(v66, __p);
    if (v69 < 0)
      operator delete(__p[0]);
    v50 = v67;
    if (v67)
    {
      v51 = (unint64_t *)&v67->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "fractional_scaling_factor_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v66 + 24))(v66, __p))
      *(float *)(a2 + 32) = (*(float (**)(void *, void **))(*(_QWORD *)v66 + 96))(v66, __p);
    if (v69 < 0)
      operator delete(__p[0]);
    v53 = v67;
    if (v67)
    {
      v54 = (unint64_t *)&v67->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "use_fractional_scale_factors");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v66 + 24))(v66, __p))
      *(_BYTE *)(a2 + 24) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v66 + 88))(v66, __p);
    if (v69 < 0)
      operator delete(__p[0]);
    v56 = v67;
    if (v67)
    {
      v57 = (unint64_t *)&v67->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "recompute_fractional_scale_factors");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v64, &v66);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v66 + 24))(v66, __p))
      *(_BYTE *)(a2 + 36) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v66 + 88))(v66, __p);
    if (v69 < 0)
      operator delete(__p[0]);
    v59 = v67;
    if (v67)
    {
      v60 = (unint64_t *)&v67->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (v65 < 0)
      operator delete(v64[0]);
    std::string::basic_string[abi:ne180100]<0>(&v66, "scaling_factor");
    v62 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, &v66);
    v63 = v62;
    if (SHIBYTE(__p[0]) < 0)
    {
      operator delete(v66);
      if (!v63)
        return;
    }
    else if (!v62)
    {
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&v66, "scaling_factor");
    *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v66);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v66);
    std::string::basic_string[abi:ne180100]<0>(&v66, "scaling_factor");
    *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v66);
    if (SHIBYTE(__p[0]) < 0)
    {
      v34 = v66;
      goto LABEL_191;
    }
  }
}

void sub_190ED2EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy((void **)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t espresso_plan_set_execution_queue(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  void *v9;
  dispatch_queue_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v3 = a2;
  v4 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    v5 = v3;
    v6 = (_DWORD *)a1[133];
    v7 = v6[40];
    if (v7)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
    if ((***(unsigned int (****)(_QWORD))(*(_QWORD *)v6 + 8))(*(_QWORD *)(*(_QWORD *)v6 + 8)) >> 1 != 5003)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Setting the execution queue is not supported on this engine.");
    v8 = a1[133];
    v9 = *(void **)(v8 + 168);
    *(_QWORD *)(v8 + 168) = v5;

    if (v5)
    {
      v10 = dispatch_queue_create_with_target_V2("com.espresso.multi_buffers_ane_q", 0, v5);
      v11 = a1[133];
      v12 = *(void **)(v11 + 192);
      *(_QWORD *)(v11 + 192) = v10;

    }
    v13 = 0;
  }
  else
  {
    v13 = 4294967290;
  }
  objc_autoreleasePoolPop(v4);

  return v13;
}

void sub_190ED3080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_190ED3090(void *a1, int a2)
{
  char *v2;
  void *v3;
  std::exception *v6;

  if (a2 == 1)
  {
    v6 = (std::exception *)__cxa_begin_catch(a1);
    handle_ex_plan(v2, v6);
    __cxa_end_catch();
    JUMPOUT(0x190ED3044);
  }
  JUMPOUT(0x190ED3084);
}

void sub_190ED30C8()
{
  __cxa_end_catch();
  JUMPOUT(0x190ED3084);
}

BOOL E5RT::IsMultiSliceFormat(unsigned int a1)
{
  return a1 > 0x1F;
}

uint64_t Espresso::ANECompilerEngine::upsample_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  _OWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  const Espresso::net *v9;
  std::__shared_weak_count *v10;
  Espresso::ANECompilerEngine *v11;
  NSString *v12;
  Espresso::ANECompilerEngine *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  float v30;
  float v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  const Espresso::net *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v45;
  char v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char v65;
  unsigned int v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  int64x2_t *v111;
  uint64_t v112;
  int64x2_t *v113;
  std::__shared_weak_count *v114;
  int64x2_t *v115;
  std::__shared_weak_count *v116;
  int64x2_t *v117;
  std::__shared_weak_count *v118;
  int64x2_t *v119;
  std::__shared_weak_count *v120;
  int64x2_t *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  int64x2_t *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  char v129;
  __int128 v130;
  __int128 v131;
  int v132;
  char v133[8];
  __int128 v134;
  char v135;
  _OWORD v136[2];
  uint64_t v137;
  void *v138;
  void *v139;
  uint64_t v140;
  const Espresso::net *v141;
  std::__shared_weak_count *v142;
  void **v143;
  uint32x2_t v144;
  int64x2_t *v145;
  uint64_t v146;
  std::string __p;
  _BYTE v148[24];
  _BYTE v149[32];
  std::__shared_weak_count *v150;
  int64x2_t *v151;
  uint64_t v152;
  const Espresso::net *v153;
  std::__shared_weak_count *v154;
  void **v155[3];

  v4 = a3[6];
  v153 = 0;
  v154 = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 10);
  if (!v5
    || (v8 = std::__shared_weak_count::lock(v5), (v154 = v8) == 0)
    || (v9 = (const Espresso::net *)*((_QWORD *)v4 + 9), (v153 = v9) == 0))
  {
    Espresso::throw_exception_selector<Espresso::generic_error>("Null pointer in upsample validation");
  }
  v10 = v8;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  v11 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v13 = v11;
  if (*(_BYTE *)(a1 + 304)
    && Espresso::ANECompilerEngine::is_mix_e(v11, v12)
    && (*(float *)(a1 + 312) != ceilf(*(float *)(a1 + 312)) || *(float *)(a1 + 308) != ceilf(*(float *)(a1 + 308))))
  {
    v14 = *(_QWORD *)(a2 + 8);
    v151 = *(int64x2_t **)a2;
    v152 = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::string::basic_string[abi:ne180100]<0>(&v130, "use_fractional_scale_factors with non-integral values unsupported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v130, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v151, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v17 = v150;
    if (v150)
    {
      p_shared_owners = (unint64_t *)&v150->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v143 = (void **)v149;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v143);
    v143 = (void **)v148;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v143);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SBYTE7(v131) < 0)
      operator delete((void *)v130);
    v20 = v152;
    if (v152)
    {
      v21 = (unint64_t *)(v152 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
LABEL_41:
      if (!v22)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
      }
      v20 = 0;
      goto LABEL_61;
    }
    goto LABEL_61;
  }
  if (*(_BYTE *)(a1 + 316) || *(_DWORD *)(a1 + 292) != 1)
  {
    if (*(_BYTE *)(a1 + 304))
    {
      v30 = *(float *)(a1 + 308);
      v31 = *(float *)(a1 + 312);
    }
    else
    {
      v30 = (float)*(int *)(a1 + 284);
      v31 = (float)*(int *)(a1 + 288);
    }
    v32 = *(_QWORD *)a3[6] + 224 * (_QWORD)a3[9];
    v33 = *(_QWORD **)(v32 + 136);
    if (*(_QWORD **)(v32 + 144) == v33)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v141 = v9;
    v142 = v10;
    v34 = (unint64_t *)&v10->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    v36 = *a3;
    v37 = *((_QWORD *)*a3 + 4);
    v38 = (*a3)[1];
    v136[0] = **a3;
    v136[1] = v38;
    v137 = v37;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v138, *((const void **)v36 + 5), *((_QWORD *)v36 + 6), (uint64_t)(*((_QWORD *)v36 + 6) - *((_QWORD *)v36 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v143, v9, (const Espresso::layer_shape *)v136, 1);
    if (v138)
    {
      v139 = v138;
      operator delete(v138);
    }
    do
      v39 = __ldaxr(v34);
    while (__stlxr(v39 - 1, v34));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    v40 = v153;
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v153 + 45), v33))
    {
      std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v40 + 352, v33);
    }
    Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step((uint64_t)v133, a1, v13, (uint64_t)&v143, *(_DWORD *)(a1 + 584), v30, v31);
    if (v133[0])
      goto LABEL_58;
    if (Espresso::ANECompilerEngine::upsample_kernel::needs_nearest_pow2_workaround((Espresso::ANECompilerEngine::upsample_kernel *)a1, (NSString *)v13))
    {
      v130 = 0u;
      v131 = 0u;
      v132 = 1065353216;
      v45 = (uint64_t)v30;
      if ((uint64_t)v30 < 2)
      {
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v130);
LABEL_58:
        v20 = 1;
LABEL_59:
        if (v135 < 0)
          operator delete((void *)v134);
        goto LABEL_61;
      }
      v46 = 1;
      do
      {
        if ((v45 & 3) != 0)
        {
          if ((v45 & 1) != 0)
          {
            v85 = *(std::__shared_weak_count **)(a2 + 8);
            v115 = *(int64x2_t **)a2;
            v116 = v85;
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldxr(v86);
              while (__stxr(v87 + 1, v86));
            }
            std::string::basic_string[abi:ne180100]<0>(v127, "Workaround produced an unfactorable upsample.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v127, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v115, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            v88 = v150;
            if (v150)
            {
              v89 = (unint64_t *)&v150->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            v123[0] = v149;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v123);
            v123[0] = v148;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v123);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v128 < 0)
              operator delete(v127[0]);
            v91 = v116;
            if (v116)
            {
              v92 = (unint64_t *)&v116->__shared_owners_;
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v130);
            goto LABEL_169;
          }
          Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step((uint64_t)v127, a1, v13, (uint64_t)&v143, *(_DWORD *)(a1 + 584), 2.0, 2.0);
          if (!LOBYTE(v127[0]))
          {
            v47 = *(std::__shared_weak_count **)(a2 + 8);
            v119 = *(int64x2_t **)a2;
            v120 = v47;
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            std::string::basic_string[abi:ne180100]<0>(v123, "ANECValidateResizeLayer rejected upsample_kernel for 2x2 upsample.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v123, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v119, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            v50 = v150;
            if (v150)
            {
              v51 = (unint64_t *)&v150->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v155[0] = (void **)v149;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v155);
            v155[0] = (void **)v148;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v155);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v124 < 0)
              operator delete(v123[0]);
            v53 = v120;
            if (v120)
            {
              v54 = (unint64_t *)&v120->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            v56 = *(std::__shared_weak_count **)(a2 + 8);
            v117 = *(int64x2_t **)a2;
            v118 = v56;
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
            }
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v127[1], (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v117, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            v59 = v150;
            if (v150)
            {
              v60 = (unint64_t *)&v150->__shared_owners_;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            v123[0] = v149;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v123);
            v123[0] = v148;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v123);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v62 = v118;
            if (v118)
            {
              v63 = (unint64_t *)&v118->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v46 = (char)v127[0];
          }
          if (v129 < 0)
            operator delete(v127[1]);
          v65 = 1;
          v66 = 1;
        }
        else
        {
          Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step((uint64_t)v127, a1, v13, (uint64_t)&v143, *(_DWORD *)(a1 + 584), 4.0, 4.0);
          if (!LOBYTE(v127[0]))
          {
            v67 = *(std::__shared_weak_count **)(a2 + 8);
            v125 = *(int64x2_t **)a2;
            v126 = v67;
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            std::string::basic_string[abi:ne180100]<0>(v123, "ANECValidateResizeLayer rejected upsample_kernel for 4x4 upsample.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v123, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v125, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            v70 = v150;
            if (v150)
            {
              v71 = (unint64_t *)&v150->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v155[0] = (void **)v149;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v155);
            v155[0] = (void **)v148;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v155);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v124 < 0)
              operator delete(v123[0]);
            v73 = v126;
            if (v126)
            {
              v74 = (unint64_t *)&v126->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v76 = *(std::__shared_weak_count **)(a2 + 8);
            v121 = *(int64x2_t **)a2;
            v122 = v76;
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldxr(v77);
              while (__stxr(v78 + 1, v77));
            }
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v127[1], (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v121, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            v79 = v150;
            if (v150)
            {
              v80 = (unint64_t *)&v150->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v123[0] = v149;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v123);
            v123[0] = v148;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v123);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v82 = v122;
            if (v122)
            {
              v83 = (unint64_t *)&v122->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            v46 = (char)v127[0];
          }
          if (v129 < 0)
            operator delete(v127[1]);
          v65 = 2;
          v66 = 2;
        }
        v45 >>= v65;
        v144 = vshl_u32(v144, (uint32x2_t)vdup_n_s32(v66));
      }
      while (v45 >= 2 && (v46 & 1) != 0);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v130);
      if ((v46 & 1) != 0)
        goto LABEL_58;
    }
LABEL_169:
    v94 = *(std::__shared_weak_count **)(a2 + 8);
    v113 = *(int64x2_t **)a2;
    v114 = v94;
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    std::string::basic_string[abi:ne180100]<0>(&v130, "ANECValidateResizeLayer rejected upsample_kernel and workaround not applicable.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v130, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v113, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v97 = v150;
    if (v150)
    {
      v98 = (unint64_t *)&v150->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v127[0] = v149;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v127);
    v127[0] = v148;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v127);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SBYTE7(v131) < 0)
      operator delete((void *)v130);
    v100 = v114;
    if (v114)
    {
      v101 = (unint64_t *)&v114->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v103 = *(_QWORD *)(a2 + 8);
    v111 = *(int64x2_t **)a2;
    v112 = v103;
    if (v103)
    {
      v104 = (unint64_t *)(v103 + 8);
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v134, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v111, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v106 = v150;
    if (v150)
    {
      v107 = (unint64_t *)&v150->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    *(_QWORD *)&v130 = v149;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
    *(_QWORD *)&v130 = v148;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v20 = v112;
    if (v112)
    {
      v109 = (unint64_t *)(v112 + 8);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
      }
      v20 = 0;
    }
    goto LABEL_59;
  }
  v23 = *(_QWORD *)(a2 + 8);
  v145 = *(int64x2_t **)a2;
  v146 = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  std::string::basic_string[abi:ne180100]<0>(&v130, "Bilinear interpolation doesn't yet support recompute_fractional_scale_factors == false");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v130, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v145, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v26 = v150;
  if (v150)
  {
    v27 = (unint64_t *)&v150->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v143 = (void **)v149;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v143);
  v143 = (void **)v148;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v143);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v131) < 0)
    operator delete((void *)v130);
  v20 = v146;
  if (v146)
  {
    v29 = (unint64_t *)(v146 + 8);
    do
      v22 = __ldaxr(v29);
    while (__stlxr(v22 - 1, v29));
    goto LABEL_41;
  }
LABEL_61:

  v41 = v154;
  if (v154)
  {
    v42 = (unint64_t *)&v154->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return v20;
}

void sub_190ED3D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *v64;
  uint64_t v65;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a64);
  if (a32 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a34);
  if (a46 < 0)
    operator delete(a41);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v65 - 136);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, float a6, float a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __CFString *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  const __CFString *v20;
  int v21;
  int v22;
  int v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  int v27;
  std::string *v28;
  std::string::size_type size;
  uint64_t **i;
  _QWORD *v31;
  const char *v32;
  size_t v33;
  std::string v34;
  _QWORD v35[11];
  char v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t **v39;
  __CFString *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  const __CFString *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;

  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v56, (NSString *)(a2 + 352), a3);
  ANECResizeLayerDescInitialize();
  v44 = 0;
  v45 = 0;
  ANECTensorDescInitialize();
  if (a5 >= 8 || ((0x97u >> a5) & 1) == 0)
  {
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "upsample: unexpected compute path.");
    goto LABEL_4;
  }
  v16 = off_1E2DD20A8[a5];
  v17 = *(_QWORD *)(a4 + 12);
  *(_QWORD *)&v18 = (int)v17;
  *((_QWORD *)&v18 + 1) = SHIDWORD(v17);
  v42 = v18;
  v19 = *(int *)(a4 + 8);
  v40 = v16;
  v43 = v19;
  *(_QWORD *)&v18 = (int)*(_QWORD *)a4;
  *((_QWORD *)&v18 + 1) = (int)HIDWORD(*(_QWORD *)a4);
  v41 = v18;
  v46 = a6;
  v47 = a7;
  v20 = CFSTR("Linear");
  v21 = *(_DWORD *)(a2 + 292);
  if (!v21)
    v20 = CFSTR("NearestNeighbor");
  if (v21 != 1)
  {
    if (!v21)
    {
      if (a6 == 4.0 && a7 == 4.0 || a6 == 3.0 && a7 == 3.0 || a6 == 2.0 && a7 == 2.0)
      {
        v26 = CFSTR("UnalignedCorners");
        goto LABEL_29;
      }
      v23 = *(unsigned __int8 *)(a2 + 316);
      v24 = CFSTR("OffsetDefault");
      v25 = CFSTR("OffsetDefaultWithNominalScale");
      goto LABEL_16;
    }
LABEL_20:
    *(_BYTE *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "upsample: unsupported sampling_grid mode.");
    goto LABEL_4;
  }
  v22 = *(_DWORD *)(a2 + 300);
  if (v22 == 1)
  {
    v26 = CFSTR("Default");
    goto LABEL_29;
  }
  if (v22)
    goto LABEL_20;
  v23 = *(_DWORD *)(a2 + 296);
  v24 = CFSTR("AlignedCorners");
  v25 = CFSTR("UnalignedCorners");
LABEL_16:
  if (v23)
    v26 = v24;
  else
    v26 = v25;
LABEL_29:
  v48 = CFSTR("Width");
  v49 = v20;
  v50 = CFSTR("Height");
  v51 = v20;
  v52 = CFSTR("Width");
  v53 = v26;
  v54 = CFSTR("Height");
  v55 = v26;
  v27 = ANECValidateResizeLayer();
  if (v27)
  {
    Espresso::ANECompilerEngine::violations_from_alternates<ANECResizeLayerDescAlternate>((uint64_t)v38, v45, v44);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"ANECValidateResizeLayer rejected with status ", 45);
    std::to_string(&v34, v27);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v34;
    else
      v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v28, size);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    for (i = v39; i; i = (uint64_t **)*i)
    {
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", ", 2);
      v32 = (const char *)objc_msgSend(objc_retainAutorelease(i[2]), "UTF8String");
      v33 = strlen(v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    }
    std::stringbuf::str();
    *(_BYTE *)a1 = 0;
    *(std::string *)(a1 + 8) = v34;
    v35[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v35[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v36 < 0)
      operator delete((void *)v35[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401CCD0](&v37);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v38);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
  }
LABEL_4:
  v13 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_190ED42B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v49 - 80);
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, char a9)
{
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *exception;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *a6;
  v17 = a6[1];
  v42 = *a6;
  v43 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v49, a7, a8, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v49);
    size = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
    if (v49.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (a5 != 4 * *(int *)(*a1 + 8) * (uint64_t)*(int *)(*a1 + 12))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v46, a5);
      v34 = std::string::insert(&v46, 0, "Unexpected size s=");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = std::string::append(&v47, "/blob=");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v45, 4 * *(int *)(*a1 + 8) * (uint64_t)*(int *)(*a1 + 12));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v45;
      else
        v38 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v39 = v45.__r_.__value_.__l.__size_;
      v40 = std::string::append(&v48, (const std::string::value_type *)v38, v39);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v49);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 16), a4, a5);
    v23 = (std::__shared_weak_count *)v43;
    if (!v43)
      goto LABEL_30;
LABEL_26:
    v29 = (unint64_t *)&v23->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_30;
  }
  if (!v16 || (a9 & 1) != 0)
  {
    if (!v16)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v24 = (char *)operator new(0x58uLL);
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = &off_1E2DBEC38;
  *((_QWORD *)v24 + 3) = &off_1E2DA11B0;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *((_DWORD *)v24 + 8) = a7;
  *((_DWORD *)v24 + 9) = a8;
  *((_QWORD *)v24 + 5) = a4;
  v24[48] = 0;
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 24);
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v49);
  v25 = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
  if (v49.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (_QWORD *)(*a1 + 32);
  v23 = (std::__shared_weak_count *)v43;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v28, v42, v43);
  if (v43)
    goto LABEL_26;
LABEL_30:
  if (a3)
  {
    v31 = (unint64_t *)&a3->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_190ED4664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;

  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a18 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v39 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v38);
  goto LABEL_14;
}

void Espresso::SerDes::layer_io_base::factory_initialize_registry(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  void *__p[2];
  char v414;

  std::string::basic_string[abi:ne180100]<0>(__p, "no_op");
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF178;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1D98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  v6 = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0058;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2E98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v5[1], (uint64_t)v5);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
  v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  v9 = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF1B0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1DD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v8[1], (uint64_t)v8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "pool");
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF3A8;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2018;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v11[1], (uint64_t)v11);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
  v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFB18;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2898;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v14[1], (uint64_t)v14);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC04B8;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3398;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v17[1], (uint64_t)v17);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_quantized");
  v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0E90;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3ED8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v20[1], (uint64_t)v20);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "concat");
  v23 = (std::__shared_weak_count *)operator new(0x20uLL);
  v23->__shared_owners_ = 0;
  v24 = (unint64_t *)&v23->__shared_owners_;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF610;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA22D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v23[1], (uint64_t)v23);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFCD8;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2A98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v26[1], (uint64_t)v26);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  v29 = (std::__shared_weak_count *)operator new(0x20uLL);
  v29->__shared_owners_ = 0;
  v30 = (unint64_t *)&v29->__shared_owners_;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0090;
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2ED8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v29[1], (uint64_t)v29);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "split");
  v32 = (std::__shared_weak_count *)operator new(0x20uLL);
  v32->__shared_owners_ = 0;
  v33 = (unint64_t *)&v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF568;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2218;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v32[1], (uint64_t)v32);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
  v35 = (std::__shared_weak_count *)operator new(0x20uLL);
  v35->__shared_owners_ = 0;
  v36 = (unint64_t *)&v35->__shared_owners_;
  v35->__shared_weak_owners_ = 0;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0410;
  v35[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA32D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v35[1], (uint64_t)v35);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_grad");
  v38 = (std::__shared_weak_count *)operator new(0x20uLL);
  v38->__shared_owners_ = 0;
  v39 = (unint64_t *)&v38->__shared_owners_;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0918;
  v38[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3898;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v38[1], (uint64_t)v38);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_weights_grad");
  v41 = (std::__shared_weak_count *)operator new(0x20uLL);
  v41->__shared_owners_ = 0;
  v42 = (unint64_t *)&v41->__shared_owners_;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0F38;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3F98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v41[1], (uint64_t)v41);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "pool_grad");
  v44 = (std::__shared_weak_count *)operator new(0x20uLL);
  v44->__shared_owners_ = 0;
  v45 = (unint64_t *)&v44->__shared_owners_;
  v44->__shared_weak_owners_ = 0;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFE98;
  v44[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2C98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v44[1], (uint64_t)v44);
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "concat_grad");
  v47 = (std::__shared_weak_count *)operator new(0x20uLL);
  v47->__shared_owners_ = 0;
  v48 = (unint64_t *)&v47->__shared_owners_;
  v47->__shared_weak_owners_ = 0;
  v47->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0020;
  v47[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2E58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v47[1], (uint64_t)v47);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_loss_grad");
  v50 = (std::__shared_weak_count *)operator new(0x20uLL);
  v50->__shared_owners_ = 0;
  v51 = (unint64_t *)&v50->__shared_owners_;
  v50->__shared_weak_owners_ = 0;
  v50->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0B48;
  v50[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3B18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v50[1], (uint64_t)v50);
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  v53 = (std::__shared_weak_count *)operator new(0x20uLL);
  v53->__shared_owners_ = 0;
  v54 = (unint64_t *)&v53->__shared_owners_;
  v53->__shared_weak_owners_ = 0;
  v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF08;
  v53[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2D18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v53[1], (uint64_t)v53);
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nonlinearity");
  v56 = (std::__shared_weak_count *)operator new(0x20uLL);
  v56->__shared_owners_ = 0;
  v57 = (unint64_t *)&v56->__shared_owners_;
  v56->__shared_weak_owners_ = 0;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF08;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2D18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v56[1], (uint64_t)v56);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "activation_grad");
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v60 = (unint64_t *)&v59->__shared_owners_;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0640;
  v59[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3558;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v59[1], (uint64_t)v59);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  v62 = (std::__shared_weak_count *)operator new(0x20uLL);
  v62->__shared_owners_ = 0;
  v63 = (unint64_t *)&v62->__shared_owners_;
  v62->__shared_weak_owners_ = 0;
  v62->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF290;
  v62[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1ED8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v62[1], (uint64_t)v62);
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bias_grad");
  v65 = (std::__shared_weak_count *)operator new(0x20uLL);
  v65->__shared_owners_ = 0;
  v66 = (unint64_t *)&v65->__shared_owners_;
  v65->__shared_weak_owners_ = 0;
  v65->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFD48;
  v65[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2B18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v65[1], (uint64_t)v65);
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm");
  v68 = (std::__shared_weak_count *)operator new(0x20uLL);
  v68->__shared_owners_ = 0;
  v69 = (unint64_t *)&v68->__shared_owners_;
  v68->__shared_weak_owners_ = 0;
  v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFD10;
  v68[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2AD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v68[1], (uint64_t)v68);
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 - 1, v69));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_grad");
  v71 = (std::__shared_weak_count *)operator new(0x20uLL);
  v71->__shared_owners_ = 0;
  v72 = (unint64_t *)&v71->__shared_owners_;
  v71->__shared_weak_owners_ = 0;
  v71->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0528;
  v71[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3418;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v71[1], (uint64_t)v71);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize");
  v74 = (std::__shared_weak_count *)operator new(0x20uLL);
  v74->__shared_owners_ = 0;
  v75 = (unint64_t *)&v74->__shared_owners_;
  v74->__shared_weak_owners_ = 0;
  v74->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC02C0;
  v74[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3158;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v74[1], (uint64_t)v74);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize_grad");
  v77 = (std::__shared_weak_count *)operator new(0x20uLL);
  v77->__shared_owners_ = 0;
  v78 = (unint64_t *)&v77->__shared_owners_;
  v77->__shared_weak_owners_ = 0;
  v77->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0AA0;
  v77[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3A58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v77[1], (uint64_t)v77);
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_grad");
  v80 = (std::__shared_weak_count *)operator new(0x20uLL);
  v80->__shared_owners_ = 0;
  v81 = (unint64_t *)&v80->__shared_owners_;
  v80->__shared_weak_owners_ = 0;
  v80->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0C60;
  v80[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3C58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v80[1], (uint64_t)v80);
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_weights_grad");
  v83 = (std::__shared_weak_count *)operator new(0x20uLL);
  v83->__shared_owners_ = 0;
  v84 = (unint64_t *)&v83->__shared_owners_;
  v83->__shared_weak_owners_ = 0;
  v83->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0FE0;
  v83[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA4058;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v83[1], (uint64_t)v83);
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (!v85)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise_grad");
  v86 = (std::__shared_weak_count *)operator new(0x20uLL);
  v86->__shared_owners_ = 0;
  v87 = (unint64_t *)&v86->__shared_owners_;
  v86->__shared_weak_owners_ = 0;
  v86->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0988;
  v86[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3918;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v86[1], (uint64_t)v86);
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout");
  v89 = (std::__shared_weak_count *)operator new(0x20uLL);
  v89->__shared_owners_ = 0;
  v90 = (unint64_t *)&v89->__shared_owners_;
  v89->__shared_weak_owners_ = 0;
  v89->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF990;
  v89[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA26D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v89[1], (uint64_t)v89);
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout_grad");
  v92 = (std::__shared_weak_count *)operator new(0x20uLL);
  v92->__shared_owners_ = 0;
  v93 = (unint64_t *)&v92->__shared_owners_;
  v92->__shared_weak_owners_ = 0;
  v92->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0288;
  v92[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3118;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v92[1], (uint64_t)v92);
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "axpby");
  v95 = (std::__shared_weak_count *)operator new(0x20uLL);
  v95->__shared_owners_ = 0;
  v96 = (unint64_t *)&v95->__shared_owners_;
  v95->__shared_weak_owners_ = 0;
  v95->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF488;
  v95[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2118;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v95[1], (uint64_t)v95);
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (!v97)
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "load_constant");
  v98 = (std::__shared_weak_count *)operator new(0x20uLL);
  v98->__shared_owners_ = 0;
  v99 = (unint64_t *)&v98->__shared_owners_;
  v98->__shared_weak_owners_ = 0;
  v98->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC04F0;
  v98[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA33D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v98[1], (uint64_t)v98);
  do
    v100 = __ldaxr(v99);
  while (__stlxr(v100 - 1, v99));
  if (!v100)
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "context_transfer");
  v101 = (std::__shared_weak_count *)operator new(0x20uLL);
  v101->__shared_owners_ = 0;
  v102 = (unint64_t *)&v101->__shared_owners_;
  v101->__shared_weak_owners_ = 0;
  v101->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC08E0;
  v101[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3858;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v101[1], (uint64_t)v101);
  do
    v103 = __ldaxr(v102);
  while (__stlxr(v103 - 1, v102));
  if (!v103)
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  v104 = (std::__shared_weak_count *)operator new(0x20uLL);
  v104->__shared_owners_ = 0;
  v105 = (unint64_t *)&v104->__shared_owners_;
  v104->__shared_weak_owners_ = 0;
  v104->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFAA8;
  v104[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2818;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v104[1], (uint64_t)v104);
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 - 1, v105));
  if (!v106)
  {
    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
    std::__shared_weak_count::__release_weak(v104);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_like");
  v107 = (std::__shared_weak_count *)operator new(0x20uLL);
  v107->__shared_owners_ = 0;
  v108 = (unint64_t *)&v107->__shared_owners_;
  v107->__shared_weak_owners_ = 0;
  v107->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC02F8;
  v107[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3198;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v107[1], (uint64_t)v107);
  do
    v109 = __ldaxr(v108);
  while (__stlxr(v109 - 1, v108));
  if (!v109)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tile");
  v110 = (std::__shared_weak_count *)operator new(0x20uLL);
  v110->__shared_owners_ = 0;
  v111 = (unint64_t *)&v110->__shared_owners_;
  v110->__shared_weak_owners_ = 0;
  v110->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF3E0;
  v110[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2058;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v110[1], (uint64_t)v110);
  do
    v112 = __ldaxr(v111);
  while (__stlxr(v112 - 1, v111));
  if (!v112)
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
  v113 = (std::__shared_weak_count *)operator new(0x20uLL);
  v113->__shared_owners_ = 0;
  v114 = (unint64_t *)&v113->__shared_owners_;
  v113->__shared_weak_owners_ = 0;
  v113->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF7D0;
  v113[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA24D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v113[1], (uint64_t)v113);
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v113);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn");
  v116 = (std::__shared_weak_count *)operator new(0x20uLL);
  v116->__shared_owners_ = 0;
  v117 = (unint64_t *)&v116->__shared_owners_;
  v116->__shared_weak_owners_ = 0;
  v116->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF1E8;
  v116[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1E18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v116[1], (uint64_t)v116);
  do
    v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn_arch");
  v119 = (std::__shared_weak_count *)operator new(0x20uLL);
  v119->__shared_owners_ = 0;
  v120 = (unint64_t *)&v119->__shared_owners_;
  v119->__shared_weak_owners_ = 0;
  v119->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFC30;
  v119[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA29D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v119[1], (uint64_t)v119);
  do
    v121 = __ldaxr(v120);
  while (__stlxr(v121 - 1, v120));
  if (!v121)
  {
    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
    std::__shared_weak_count::__release_weak(v119);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "general_padding");
  v122 = (std::__shared_weak_count *)operator new(0x20uLL);
  v122->__shared_owners_ = 0;
  v123 = (unint64_t *)&v122->__shared_owners_;
  v122->__shared_weak_owners_ = 0;
  v122->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC06B0;
  v122[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA35D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v122[1], (uint64_t)v122);
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v124 - 1, v123));
  if (!v124)
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  v125 = (std::__shared_weak_count *)operator new(0x20uLL);
  v125->__shared_owners_ = 0;
  v126 = (unint64_t *)&v125->__shared_owners_;
  v125->__shared_weak_owners_ = 0;
  v125->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFED0;
  v125[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2CD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v125[1], (uint64_t)v125);
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  v128 = (std::__shared_weak_count *)operator new(0x20uLL);
  v128->__shared_owners_ = 0;
  v129 = (unint64_t *)&v128->__shared_owners_;
  v128->__shared_weak_owners_ = 0;
  v128->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF9C8;
  v128[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2718;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v128[1], (uint64_t)v128);
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (!v130)
  {
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_concat");
  v131 = (std::__shared_weak_count *)operator new(0x20uLL);
  v131->__shared_owners_ = 0;
  v132 = (unint64_t *)&v131->__shared_owners_;
  v131->__shared_weak_owners_ = 0;
  v131->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0790;
  v131[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA36D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v131[1], (uint64_t)v131);
  do
    v133 = __ldaxr(v132);
  while (__stlxr(v133 - 1, v132));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_reverse");
  v134 = (std::__shared_weak_count *)operator new(0x20uLL);
  v134->__shared_owners_ = 0;
  v135 = (unint64_t *)&v134->__shared_owners_;
  v134->__shared_weak_owners_ = 0;
  v134->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0A68;
  v134[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3A18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v134[1], (uint64_t)v134);
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (!v136)
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_repeat");
  v137 = (std::__shared_weak_count *)operator new(0x20uLL);
  v137->__shared_owners_ = 0;
  v138 = (unint64_t *)&v137->__shared_owners_;
  v137->__shared_weak_owners_ = 0;
  v137->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC07C8;
  v137[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3718;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v137[1], (uint64_t)v137);
  do
    v139 = __ldaxr(v138);
  while (__stlxr(v139 - 1, v138));
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v137);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "crop");
  v140 = (std::__shared_weak_count *)operator new(0x20uLL);
  v140->__shared_owners_ = 0;
  v141 = (unint64_t *)&v140->__shared_owners_;
  v140->__shared_weak_owners_ = 0;
  v140->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF338;
  v140[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1F98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v140[1], (uint64_t)v140);
  do
    v142 = __ldaxr(v141);
  while (__stlxr(v142 - 1, v141));
  if (!v142)
  {
    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
    std::__shared_weak_count::__release_weak(v140);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "prediction_smoothing");
  v143 = (std::__shared_weak_count *)operator new(0x20uLL);
  v143->__shared_owners_ = 0;
  v144 = (unint64_t *)&v143->__shared_owners_;
  v143->__shared_weak_owners_ = 0;
  v143->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0DB0;
  v143[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3DD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v143[1], (uint64_t)v143);
  do
    v145 = __ldaxr(v144);
  while (__stlxr(v145 - 1, v144));
  if (!v145)
  {
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_depth");
  v146 = (std::__shared_weak_count *)operator new(0x20uLL);
  v146->__shared_owners_ = 0;
  v147 = (unint64_t *)&v146->__shared_owners_;
  v146->__shared_weak_owners_ = 0;
  v146->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0608;
  v146[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3518;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v146[1], (uint64_t)v146);
  do
    v148 = __ldaxr(v147);
  while (__stlxr(v148 - 1, v147));
  if (!v148)
  {
    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
    std::__shared_weak_count::__release_weak(v146);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_batch");
  v149 = (std::__shared_weak_count *)operator new(0x20uLL);
  v149->__shared_owners_ = 0;
  v150 = (unint64_t *)&v149->__shared_owners_;
  v149->__shared_weak_owners_ = 0;
  v149->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC05D0;
  v149[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA34D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v149[1], (uint64_t)v149);
  do
    v151 = __ldaxr(v150);
  while (__stlxr(v151 - 1, v150));
  if (!v151)
  {
    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
    std::__shared_weak_count::__release_weak(v149);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  v152 = (std::__shared_weak_count *)operator new(0x20uLL);
  v152->__shared_owners_ = 0;
  v153 = (unint64_t *)&v152->__shared_owners_;
  v152->__shared_weak_owners_ = 0;
  v152->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF530;
  v152[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA21D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v152[1], (uint64_t)v152);
  do
    v154 = __ldaxr(v153);
  while (__stlxr(v154 - 1, v153));
  if (!v154)
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  v155 = (std::__shared_weak_count *)operator new(0x20uLL);
  v155->__shared_owners_ = 0;
  v156 = (unint64_t *)&v155->__shared_owners_;
  v155->__shared_weak_owners_ = 0;
  v155->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFD80;
  v155[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2B58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v155[1], (uint64_t)v155);
  do
    v157 = __ldaxr(v156);
  while (__stlxr(v157 - 1, v156));
  if (!v157)
  {
    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
    std::__shared_weak_count::__release_weak(v155);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cast");
  v158 = (std::__shared_weak_count *)operator new(0x20uLL);
  v158->__shared_owners_ = 0;
  v159 = (unint64_t *)&v158->__shared_owners_;
  v158->__shared_weak_owners_ = 0;
  v158->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF2C8;
  v158[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1F18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v158[1], (uint64_t)v158);
  do
    v160 = __ldaxr(v159);
  while (__stlxr(v160 - 1, v159));
  if (!v160)
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "compute_stats");
  v161 = (std::__shared_weak_count *)operator new(0x20uLL);
  v161->__shared_owners_ = 0;
  v162 = (unint64_t *)&v161->__shared_owners_;
  v161->__shared_weak_owners_ = 0;
  v161->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC03A0;
  v161[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3258;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v161[1], (uint64_t)v161);
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 - 1, v162));
  if (!v163)
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lambda");
  v164 = (std::__shared_weak_count *)operator new(0x20uLL);
  v164->__shared_owners_ = 0;
  v165 = (unint64_t *)&v164->__shared_owners_;
  v164->__shared_weak_owners_ = 0;
  v164->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF760;
  v164[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2458;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v164[1], (uint64_t)v164);
  do
    v166 = __ldaxr(v165);
  while (__stlxr(v166 - 1, v165));
  if (!v166)
  {
    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
    std::__shared_weak_count::__release_weak(v164);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "patch_extractor");
  v167 = (std::__shared_weak_count *)operator new(0x20uLL);
  v167->__shared_owners_ = 0;
  v168 = (unint64_t *)&v167->__shared_owners_;
  v167->__shared_weak_owners_ = 0;
  v167->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0758;
  v167[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3698;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v167[1], (uint64_t)v167);
  do
    v169 = __ldaxr(v168);
  while (__stlxr(v169 - 1, v168));
  if (!v169)
  {
    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
    std::__shared_weak_count::__release_weak(v167);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "crop_and_resize");
  v170 = (std::__shared_weak_count *)operator new(0x20uLL);
  v170->__shared_owners_ = 0;
  v171 = (unint64_t *)&v170->__shared_owners_;
  v170->__shared_weak_owners_ = 0;
  v170->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0678;
  v170[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3598;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v170[1], (uint64_t)v170);
  do
    v172 = __ldaxr(v171);
  while (__stlxr(v172 - 1, v171));
  if (!v172)
  {
    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
    std::__shared_weak_count::__release_weak(v170);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_quantize");
  v173 = (std::__shared_weak_count *)operator new(0x20uLL);
  v173->__shared_owners_ = 0;
  v174 = (unint64_t *)&v173->__shared_owners_;
  v173->__shared_weak_owners_ = 0;
  v173->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0950;
  v173[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA38D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v173[1], (uint64_t)v173);
  do
    v175 = __ldaxr(v174);
  while (__stlxr(v175 - 1, v174));
  if (!v175)
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_dequantize");
  v176 = (std::__shared_weak_count *)operator new(0x20uLL);
  v176->__shared_owners_ = 0;
  v177 = (unint64_t *)&v176->__shared_owners_;
  v176->__shared_weak_owners_ = 0;
  v176->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0C28;
  v176[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3C18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v176[1], (uint64_t)v176);
  do
    v178 = __ldaxr(v177);
  while (__stlxr(v178 - 1, v177));
  if (!v178)
  {
    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
    std::__shared_weak_count::__release_weak(v176);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_gather");
  v179 = (std::__shared_weak_count *)operator new(0x20uLL);
  v179->__shared_owners_ = 0;
  v180 = (unint64_t *)&v179->__shared_owners_;
  v179->__shared_weak_owners_ = 0;
  v179->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0A30;
  v179[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA39D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v179[1], (uint64_t)v179);
  do
    v181 = __ldaxr(v180);
  while (__stlxr(v181 - 1, v180));
  if (!v181)
  {
    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
    std::__shared_weak_count::__release_weak(v179);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
  v182 = (std::__shared_weak_count *)operator new(0x20uLL);
  v182->__shared_owners_ = 0;
  v183 = (unint64_t *)&v182->__shared_owners_;
  v182->__shared_weak_owners_ = 0;
  v182->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D08;
  v182[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3D18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v182[1], (uint64_t)v182);
  do
    v184 = __ldaxr(v183);
  while (__stlxr(v184 - 1, v183));
  if (!v184)
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_branch");
  v185 = (std::__shared_weak_count *)operator new(0x20uLL);
  v185->__shared_owners_ = 0;
  v186 = (unint64_t *)&v185->__shared_owners_;
  v185->__shared_weak_owners_ = 0;
  v185->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFDB8;
  v185[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2B98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v185[1], (uint64_t)v185);
  do
    v187 = __ldaxr(v186);
  while (__stlxr(v187 - 1, v186));
  if (!v187)
  {
    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
    std::__shared_weak_count::__release_weak(v185);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_jump");
  v188 = (std::__shared_weak_count *)operator new(0x20uLL);
  v188->__shared_owners_ = 0;
  v189 = (unint64_t *)&v188->__shared_owners_;
  v188->__shared_weak_owners_ = 0;
  v188->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF8E8;
  v188[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2618;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v188[1], (uint64_t)v188);
  do
    v190 = __ldaxr(v189);
  while (__stlxr(v190 - 1, v189));
  if (!v190)
  {
    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
    std::__shared_weak_count::__release_weak(v188);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_call");
  v191 = (std::__shared_weak_count *)operator new(0x20uLL);
  v191->__shared_owners_ = 0;
  v192 = (unint64_t *)&v191->__shared_owners_;
  v191->__shared_weak_owners_ = 0;
  v191->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF878;
  v191[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2598;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v191[1], (uint64_t)v191);
  do
    v193 = __ldaxr(v192);
  while (__stlxr(v193 - 1, v192));
  if (!v193)
  {
    ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
    std::__shared_weak_count::__release_weak(v191);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_return");
  v194 = (std::__shared_weak_count *)operator new(0x20uLL);
  v194->__shared_owners_ = 0;
  v195 = (unint64_t *)&v194->__shared_owners_;
  v194->__shared_weak_owners_ = 0;
  v194->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFDF0;
  v194[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2BD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v194[1], (uint64_t)v194);
  do
    v196 = __ldaxr(v195);
  while (__stlxr(v196 - 1, v195));
  if (!v196)
  {
    ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
    std::__shared_weak_count::__release_weak(v194);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "get_shape");
  v197 = (std::__shared_weak_count *)operator new(0x20uLL);
  v197->__shared_owners_ = 0;
  v198 = (unint64_t *)&v197->__shared_owners_;
  v197->__shared_weak_owners_ = 0;
  v197->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFE60;
  v197[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2C58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v197[1], (uint64_t)v197);
  do
    v199 = __ldaxr(v198);
  while (__stlxr(v199 - 1, v198));
  if (!v199)
  {
    ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
    std::__shared_weak_count::__release_weak(v197);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  v200 = (std::__shared_weak_count *)operator new(0x20uLL);
  v200->__shared_owners_ = 0;
  v201 = (unint64_t *)&v200->__shared_owners_;
  v200->__shared_weak_owners_ = 0;
  v200->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF418;
  v200[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2098;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v200[1], (uint64_t)v200);
  do
    v202 = __ldaxr(v201);
  while (__stlxr(v202 - 1, v201));
  if (!v202)
  {
    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
    std::__shared_weak_count::__release_weak(v200);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "gather");
  v203 = (std::__shared_weak_count *)operator new(0x20uLL);
  v203->__shared_owners_ = 0;
  v204 = (unint64_t *)&v203->__shared_owners_;
  v203->__shared_weak_owners_ = 0;
  v203->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF728;
  v203[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2418;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v203[1], (uint64_t)v203);
  do
    v205 = __ldaxr(v204);
  while (__stlxr(v205 - 1, v204));
  if (!v205)
  {
    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
    std::__shared_weak_count::__release_weak(v203);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
  v206 = (std::__shared_weak_count *)operator new(0x20uLL);
  v206->__shared_owners_ = 0;
  v207 = (unint64_t *)&v206->__shared_owners_;
  v206->__shared_weak_owners_ = 0;
  v206->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0560;
  v206[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3458;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v206[1], (uint64_t)v206);
  do
    v208 = __ldaxr(v207);
  while (__stlxr(v208 - 1, v207));
  if (!v208)
  {
    ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
    std::__shared_weak_count::__release_weak(v206);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  Espresso::generic_alloc_kernel::register_layer_io(a1);
  Espresso::generic_load_global_kernel::register_layer_io(a1);
  Espresso::generic_store_global_kernel::register_layer_io(a1);
  Espresso::generic_cf_if_kernel::register_layer_io(a1);
  Espresso::generic_cf_loop_kernel::register_layer_io(a1);
  Espresso::generic_alloc_kernel::register_layer_io(a1);
  Espresso::generic_load_global_kernel::register_layer_io(a1);
  Espresso::generic_store_global_kernel::register_layer_io(a1);
  Espresso::generic_cf_if_kernel::register_layer_io(a1);
  Espresso::generic_cf_loop_kernel::register_layer_io(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_for");
  v209 = (std::__shared_weak_count *)operator new(0x20uLL);
  v209->__shared_owners_ = 0;
  v210 = (unint64_t *)&v209->__shared_owners_;
  v209->__shared_weak_owners_ = 0;
  v209->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF5D8;
  v209[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2298;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v209[1], (uint64_t)v209);
  do
    v211 = __ldaxr(v210);
  while (__stlxr(v211 - 1, v210));
  if (!v211)
  {
    ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
    std::__shared_weak_count::__release_weak(v209);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
  v212 = (std::__shared_weak_count *)operator new(0x20uLL);
  v212->__shared_owners_ = 0;
  v213 = (unint64_t *)&v212->__shared_owners_;
  v212->__shared_weak_owners_ = 0;
  v212->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF5A0;
  v212[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2258;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v212[1], (uint64_t)v212);
  do
    v214 = __ldaxr(v213);
  while (__stlxr(v214 - 1, v213));
  if (!v214)
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_else");
  v215 = (std::__shared_weak_count *)operator new(0x20uLL);
  v215->__shared_owners_ = 0;
  v216 = (unint64_t *)&v215->__shared_owners_;
  v215->__shared_weak_owners_ = 0;
  v215->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF8B0;
  v215[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA25D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v215[1], (uint64_t)v215);
  do
    v217 = __ldaxr(v216);
  while (__stlxr(v217 - 1, v216));
  if (!v217)
  {
    ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
    std::__shared_weak_count::__release_weak(v215);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  v218 = (std::__shared_weak_count *)operator new(0x20uLL);
  v218->__shared_owners_ = 0;
  v219 = (unint64_t *)&v218->__shared_owners_;
  v218->__shared_weak_owners_ = 0;
  v218->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF300;
  v218[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1F58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v218[1], (uint64_t)v218);
  do
    v220 = __ldaxr(v219);
  while (__stlxr(v220 - 1, v219));
  if (!v220)
  {
    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
    std::__shared_weak_count::__release_weak(v218);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter");
  v221 = (std::__shared_weak_count *)operator new(0x20uLL);
  v221->__shared_owners_ = 0;
  v222 = (unint64_t *)&v221->__shared_owners_;
  v221->__shared_weak_owners_ = 0;
  v221->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFAE0;
  v221[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2858;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v221[1], (uint64_t)v221);
  do
    v223 = __ldaxr(v222);
  while (__stlxr(v223 - 1, v222));
  if (!v223)
  {
    ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
    std::__shared_weak_count::__release_weak(v221);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  v224 = (std::__shared_weak_count *)operator new(0x20uLL);
  v224->__shared_owners_ = 0;
  v225 = (unint64_t *)&v224->__shared_owners_;
  v224->__shared_weak_owners_ = 0;
  v224->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0138;
  v224[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2F98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v224[1], (uint64_t)v224);
  do
    v226 = __ldaxr(v225);
  while (__stlxr(v226 - 1, v225));
  if (!v226)
  {
    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
    std::__shared_weak_count::__release_weak(v224);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  v227 = (std::__shared_weak_count *)operator new(0x20uLL);
  v227->__shared_owners_ = 0;
  v228 = (unint64_t *)&v227->__shared_owners_;
  v227->__shared_weak_owners_ = 0;
  v227->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF4F8;
  v227[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2198;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v227[1], (uint64_t)v227);
  do
    v229 = __ldaxr(v228);
  while (__stlxr(v229 - 1, v228));
  if (!v229)
  {
    ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
    std::__shared_weak_count::__release_weak(v227);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_matmul");
  v230 = (std::__shared_weak_count *)operator new(0x20uLL);
  v230->__shared_owners_ = 0;
  v231 = (unint64_t *)&v230->__shared_owners_;
  v230->__shared_weak_owners_ = 0;
  v230->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0250;
  v230[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA30D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v230[1], (uint64_t)v230);
  do
    v232 = __ldaxr(v231);
  while (__stlxr(v232 - 1, v231));
  if (!v232)
  {
    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
    std::__shared_weak_count::__release_weak(v230);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  v233 = (std::__shared_weak_count *)operator new(0x20uLL);
  v233->__shared_owners_ = 0;
  v234 = (unint64_t *)&v233->__shared_owners_;
  v233->__shared_weak_owners_ = 0;
  v233->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC09C0;
  v233[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3958;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v233[1], (uint64_t)v233);
  do
    v235 = __ldaxr(v234);
  while (__stlxr(v235 - 1, v234));
  if (!v235)
  {
    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
    std::__shared_weak_count::__release_weak(v233);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  v236 = (std::__shared_weak_count *)operator new(0x20uLL);
  v236->__shared_owners_ = 0;
  v237 = (unint64_t *)&v236->__shared_owners_;
  v236->__shared_weak_owners_ = 0;
  v236->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF370;
  v236[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1FD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v236[1], (uint64_t)v236);
  do
    v238 = __ldaxr(v237);
  while (__stlxr(v238 - 1, v237));
  if (!v238)
  {
    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
    std::__shared_weak_count::__release_weak(v236);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
  v239 = (std::__shared_weak_count *)operator new(0x20uLL);
  v239->__shared_owners_ = 0;
  v240 = (unint64_t *)&v239->__shared_owners_;
  v239->__shared_weak_owners_ = 0;
  v239->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0870;
  v239[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA37D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v239[1], (uint64_t)v239);
  do
    v241 = __ldaxr(v240);
  while (__stlxr(v241 - 1, v240));
  if (!v241)
  {
    ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
    std::__shared_weak_count::__release_weak(v239);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  v242 = (std::__shared_weak_count *)operator new(0x20uLL);
  v242->__shared_owners_ = 0;
  v243 = (unint64_t *)&v242->__shared_owners_;
  v242->__shared_weak_owners_ = 0;
  v242->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFB50;
  v242[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA28D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v242[1], (uint64_t)v242);
  do
    v244 = __ldaxr(v243);
  while (__stlxr(v244 - 1, v243));
  if (!v244)
  {
    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
    std::__shared_weak_count::__release_weak(v242);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  v245 = (std::__shared_weak_count *)operator new(0x20uLL);
  v245->__shared_owners_ = 0;
  v246 = (unint64_t *)&v245->__shared_owners_;
  v245->__shared_weak_owners_ = 0;
  v245->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC00C8;
  v245[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2F18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v245[1], (uint64_t)v245);
  do
    v247 = __ldaxr(v246);
  while (__stlxr(v247 - 1, v246));
  if (!v247)
  {
    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
    std::__shared_weak_count::__release_weak(v245);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "array_gather");
  v248 = (std::__shared_weak_count *)operator new(0x20uLL);
  v248->__shared_owners_ = 0;
  v249 = (unint64_t *)&v248->__shared_owners_;
  v248->__shared_weak_owners_ = 0;
  v248->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0218;
  v248[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3098;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v248[1], (uint64_t)v248);
  do
    v250 = __ldaxr(v249);
  while (__stlxr(v250 - 1, v249));
  if (!v250)
  {
    ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
    std::__shared_weak_count::__release_weak(v248);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "multinomial");
  v251 = (std::__shared_weak_count *)operator new(0x20uLL);
  v251->__shared_owners_ = 0;
  v252 = (unint64_t *)&v251->__shared_owners_;
  v251->__shared_weak_owners_ = 0;
  v251->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0170;
  v251[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2FD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v251[1], (uint64_t)v251);
  do
    v253 = __ldaxr(v252);
  while (__stlxr(v253 - 1, v252));
  if (!v253)
  {
    ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
    std::__shared_weak_count::__release_weak(v251);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "instancenorm_1d");
  v254 = (std::__shared_weak_count *)operator new(0x20uLL);
  v254->__shared_owners_ = 0;
  v255 = (unint64_t *)&v254->__shared_owners_;
  v254->__shared_weak_owners_ = 0;
  v254->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC06E8;
  v254[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3618;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v254[1], (uint64_t)v254);
  do
    v256 = __ldaxr(v255);
  while (__stlxr(v256 - 1, v255));
  if (!v256)
  {
    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
    std::__shared_weak_count::__release_weak(v254);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "phi_virtual");
  v257 = (std::__shared_weak_count *)operator new(0x20uLL);
  v257->__shared_owners_ = 0;
  v258 = (unint64_t *)&v257->__shared_owners_;
  v257->__shared_weak_owners_ = 0;
  v257->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC01A8;
  v257[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3018;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v257[1], (uint64_t)v257);
  do
    v259 = __ldaxr(v258);
  while (__stlxr(v259 - 1, v258));
  if (!v259)
  {
    ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
    std::__shared_weak_count::__release_weak(v257);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "gumbel_max");
  v260 = (std::__shared_weak_count *)operator new(0x20uLL);
  v260->__shared_owners_ = 0;
  v261 = (unint64_t *)&v260->__shared_owners_;
  v260->__shared_weak_owners_ = 0;
  v260->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF40;
  v260[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2D58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v260[1], (uint64_t)v260);
  do
    v262 = __ldaxr(v261);
  while (__stlxr(v262 - 1, v261));
  if (!v262)
  {
    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
    std::__shared_weak_count::__release_weak(v260);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "builtin");
  v263 = (std::__shared_weak_count *)operator new(0x20uLL);
  v263->__shared_owners_ = 0;
  v264 = (unint64_t *)&v263->__shared_owners_;
  v263->__shared_weak_owners_ = 0;
  v263->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF840;
  v263[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2558;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v263[1], (uint64_t)v263);
  do
    v265 = __ldaxr(v264);
  while (__stlxr(v265 - 1, v264));
  if (!v265)
  {
    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
    std::__shared_weak_count::__release_weak(v263);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transplant");
  v266 = (std::__shared_weak_count *)operator new(0x20uLL);
  v266->__shared_owners_ = 0;
  v267 = (unint64_t *)&v266->__shared_owners_;
  v266->__shared_weak_owners_ = 0;
  v266->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFFE8;
  v266[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2E18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v266[1], (uint64_t)v266);
  do
    v268 = __ldaxr(v267);
  while (__stlxr(v268 - 1, v267));
  if (!v268)
  {
    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
    std::__shared_weak_count::__release_weak(v266);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  v269 = (std::__shared_weak_count *)operator new(0x20uLL);
  v269->__shared_owners_ = 0;
  v270 = (unint64_t *)&v269->__shared_owners_;
  v269->__shared_weak_owners_ = 0;
  v269->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0448;
  v269[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3318;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v269[1], (uint64_t)v269);
  do
    v271 = __ldaxr(v270);
  while (__stlxr(v271 - 1, v270));
  if (!v271)
  {
    ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
    std::__shared_weak_count::__release_weak(v269);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "stack_nd");
  v272 = (std::__shared_weak_count *)operator new(0x20uLL);
  v272->__shared_owners_ = 0;
  v273 = (unint64_t *)&v272->__shared_owners_;
  v272->__shared_weak_owners_ = 0;
  v272->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFCA0;
  v272[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2A58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v272[1], (uint64_t)v272);
  do
    v274 = __ldaxr(v273);
  while (__stlxr(v274 - 1, v273));
  if (!v274)
  {
    ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
    std::__shared_weak_count::__release_weak(v272);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "split_nd");
  v275 = (std::__shared_weak_count *)operator new(0x20uLL);
  v275->__shared_owners_ = 0;
  v276 = (unint64_t *)&v275->__shared_owners_;
  v275->__shared_weak_owners_ = 0;
  v275->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFC68;
  v275[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2A18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v275[1], (uint64_t)v275);
  do
    v277 = __ldaxr(v276);
  while (__stlxr(v277 - 1, v276));
  if (!v277)
  {
    ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
    std::__shared_weak_count::__release_weak(v275);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_nd");
  v278 = (std::__shared_weak_count *)operator new(0x20uLL);
  v278->__shared_owners_ = 0;
  v279 = (unint64_t *)&v278->__shared_owners_;
  v278->__shared_weak_owners_ = 0;
  v278->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFFB0;
  v278[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2DD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v278[1], (uint64_t)v278);
  do
    v280 = __ldaxr(v279);
  while (__stlxr(v280 - 1, v279));
  if (!v280)
  {
    ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
    std::__shared_weak_count::__release_weak(v278);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sliding_windows");
  v281 = (std::__shared_weak_count *)operator new(0x20uLL);
  v281->__shared_owners_ = 0;
  v282 = (unint64_t *)&v281->__shared_owners_;
  v281->__shared_weak_owners_ = 0;
  v281->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0800;
  v281[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3758;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v281[1], (uint64_t)v281);
  do
    v283 = __ldaxr(v282);
  while (__stlxr(v283 - 1, v282));
  if (!v283)
  {
    ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
    std::__shared_weak_count::__release_weak(v281);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reverse_seq");
  v284 = (std::__shared_weak_count *)operator new(0x20uLL);
  v284->__shared_owners_ = 0;
  v285 = (unint64_t *)&v284->__shared_owners_;
  v284->__shared_weak_owners_ = 0;
  v284->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC01E0;
  v284[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3058;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v284[1], (uint64_t)v284);
  do
    v286 = __ldaxr(v285);
  while (__stlxr(v286 - 1, v285));
  if (!v286)
  {
    ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
    std::__shared_weak_count::__release_weak(v284);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cross_entropy");
  v287 = (std::__shared_weak_count *)operator new(0x20uLL);
  v287->__shared_owners_ = 0;
  v288 = (unint64_t *)&v287->__shared_owners_;
  v287->__shared_weak_owners_ = 0;
  v287->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC03D8;
  v287[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3298;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v287[1], (uint64_t)v287);
  do
    v289 = __ldaxr(v288);
  while (__stlxr(v289 - 1, v288));
  if (!v289)
  {
    ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
    std::__shared_weak_count::__release_weak(v287);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "non_maximum_suppression");
  v290 = (std::__shared_weak_count *)operator new(0x20uLL);
  v290->__shared_owners_ = 0;
  v291 = (unint64_t *)&v290->__shared_owners_;
  v290->__shared_weak_owners_ = 0;
  v290->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0EC8;
  v290[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3F18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v290[1], (uint64_t)v290);
  do
    v292 = __ldaxr(v291);
  while (__stlxr(v292 - 1, v291));
  if (!v292)
  {
    ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
    std::__shared_weak_count::__release_weak(v290);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sgd");
  v293 = (std::__shared_weak_count *)operator new(0x20uLL);
  v293->__shared_owners_ = 0;
  v294 = (unint64_t *)&v293->__shared_owners_;
  v293->__shared_weak_owners_ = 0;
  v293->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF220;
  v293[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1E58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v293[1], (uint64_t)v293);
  do
    v295 = __ldaxr(v294);
  while (__stlxr(v295 - 1, v294));
  if (!v295)
  {
    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
    std::__shared_weak_count::__release_weak(v293);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "adam");
  v296 = (std::__shared_weak_count *)operator new(0x20uLL);
  v296->__shared_owners_ = 0;
  v297 = (unint64_t *)&v296->__shared_owners_;
  v296->__shared_weak_owners_ = 0;
  v296->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF258;
  v296[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1E98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v296[1], (uint64_t)v296);
  do
    v298 = __ldaxr(v297);
  while (__stlxr(v298 - 1, v297));
  if (!v298)
  {
    ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
    std::__shared_weak_count::__release_weak(v296);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  v299 = (std::__shared_weak_count *)operator new(0x20uLL);
  v299->__shared_owners_ = 0;
  v300 = (unint64_t *)&v299->__shared_owners_;
  v299->__shared_weak_owners_ = 0;
  v299->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFE28;
  v299[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2C18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v299[1], (uint64_t)v299);
  do
    v301 = __ldaxr(v300);
  while (__stlxr(v301 - 1, v300));
  if (!v301)
  {
    ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
    std::__shared_weak_count::__release_weak(v299);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  v302 = (std::__shared_weak_count *)operator new(0x20uLL);
  v302->__shared_owners_ = 0;
  v303 = (unint64_t *)&v302->__shared_owners_;
  v302->__shared_weak_owners_ = 0;
  v302->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF78;
  v302[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2D98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v302[1], (uint64_t)v302);
  do
    v304 = __ldaxr(v303);
  while (__stlxr(v304 - 1, v303));
  if (!v304)
  {
    ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
    std::__shared_weak_count::__release_weak(v302);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nonzero");
  v305 = (std::__shared_weak_count *)operator new(0x20uLL);
  v305->__shared_owners_ = 0;
  v306 = (unint64_t *)&v305->__shared_owners_;
  v305->__shared_weak_owners_ = 0;
  v305->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFA38;
  v305[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2798;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v305[1], (uint64_t)v305);
  do
    v307 = __ldaxr(v306);
  while (__stlxr(v307 - 1, v306));
  if (!v307)
  {
    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
    std::__shared_weak_count::__release_weak(v305);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "precompiled_segment");
  v308 = (std::__shared_weak_count *)operator new(0x20uLL);
  v308->__shared_owners_ = 0;
  v309 = (unint64_t *)&v308->__shared_owners_;
  v308->__shared_weak_owners_ = 0;
  v308->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0CD0;
  v308[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3CD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v308[1], (uint64_t)v308);
  do
    v310 = __ldaxr(v309);
  while (__stlxr(v310 - 1, v309));
  if (!v310)
  {
    ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
    std::__shared_weak_count::__release_weak(v308);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "one_hot");
  v311 = (std::__shared_weak_count *)operator new(0x20uLL);
  v311->__shared_owners_ = 0;
  v312 = (unint64_t *)&v311->__shared_owners_;
  v311->__shared_weak_owners_ = 0;
  v311->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFA70;
  v311[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA27D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v311[1], (uint64_t)v311);
  do
    v313 = __ldaxr(v312);
  while (__stlxr(v313 - 1, v312));
  if (!v313)
  {
    ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
    std::__shared_weak_count::__release_weak(v311);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cumsum");
  v314 = (std::__shared_weak_count *)operator new(0x20uLL);
  v314->__shared_owners_ = 0;
  v315 = (unint64_t *)&v314->__shared_owners_;
  v314->__shared_weak_owners_ = 0;
  v314->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF680;
  v314[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2358;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v314[1], (uint64_t)v314);
  do
    v316 = __ldaxr(v315);
  while (__stlxr(v316 - 1, v315));
  if (!v316)
  {
    ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
    std::__shared_weak_count::__release_weak(v314);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dev_op");
  v317 = (std::__shared_weak_count *)operator new(0x20uLL);
  v317->__shared_owners_ = 0;
  v318 = (unint64_t *)&v317->__shared_owners_;
  v317->__shared_weak_owners_ = 0;
  v317->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF6B8;
  v317[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2398;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v317[1], (uint64_t)v317);
  do
    v319 = __ldaxr(v318);
  while (__stlxr(v319 - 1, v318));
  if (!v319)
  {
    ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
    std::__shared_weak_count::__release_weak(v317);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sparse_inner_product");
  v320 = (std::__shared_weak_count *)operator new(0x20uLL);
  v320->__shared_owners_ = 0;
  v321 = (unint64_t *)&v320->__shared_owners_;
  v320->__shared_weak_owners_ = 0;
  v320->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0DE8;
  v320[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3E18;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v320[1], (uint64_t)v320);
  do
    v322 = __ldaxr(v321);
  while (__stlxr(v322 - 1, v321));
  if (!v322)
  {
    ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
    std::__shared_weak_count::__release_weak(v320);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "grid_sampling");
  v323 = (std::__shared_weak_count *)operator new(0x20uLL);
  v323->__shared_owners_ = 0;
  v324 = (unint64_t *)&v323->__shared_owners_;
  v323->__shared_weak_owners_ = 0;
  v323->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0480;
  v323[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3358;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v323[1], (uint64_t)v323);
  do
    v325 = __ldaxr(v324);
  while (__stlxr(v325 - 1, v324));
  if (!v325)
  {
    ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
    std::__shared_weak_count::__release_weak(v323);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "resample");
  v326 = (std::__shared_weak_count *)operator new(0x20uLL);
  v326->__shared_owners_ = 0;
  v327 = (unint64_t *)&v326->__shared_owners_;
  v326->__shared_weak_owners_ = 0;
  v326->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFBF8;
  v326[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2998;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v326[1], (uint64_t)v326);
  do
    v328 = __ldaxr(v327);
  while (__stlxr(v328 - 1, v327));
  if (!v328)
  {
    ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
    std::__shared_weak_count::__release_weak(v326);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "local_correlation");
  v329 = (std::__shared_weak_count *)operator new(0x20uLL);
  v329->__shared_owners_ = 0;
  v330 = (unint64_t *)&v329->__shared_owners_;
  v329->__shared_weak_owners_ = 0;
  v329->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0B10;
  v329[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3AD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v329[1], (uint64_t)v329);
  do
    v331 = __ldaxr(v330);
  while (__stlxr(v331 - 1, v330));
  if (!v331)
  {
    ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
    std::__shared_weak_count::__release_weak(v329);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bahdanau_attention");
  v332 = (std::__shared_weak_count *)operator new(0x20uLL);
  v332->__shared_owners_ = 0;
  v333 = (unint64_t *)&v332->__shared_owners_;
  v332->__shared_weak_owners_ = 0;
  v332->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0BF0;
  v332[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3BD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v332[1], (uint64_t)v332);
  do
    v334 = __ldaxr(v333);
  while (__stlxr(v334 - 1, v333));
  if (!v334)
  {
    ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
    std::__shared_weak_count::__release_weak(v332);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "self_attention");
  v335 = (std::__shared_weak_count *)operator new(0x20uLL);
  v335->__shared_owners_ = 0;
  v336 = (unint64_t *)&v335->__shared_owners_;
  v335->__shared_weak_owners_ = 0;
  v335->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0598;
  v335[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3498;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v335[1], (uint64_t)v335);
  do
    v337 = __ldaxr(v336);
  while (__stlxr(v337 - 1, v336));
  if (!v337)
  {
    ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
    std::__shared_weak_count::__release_weak(v335);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "loopkit");
  v338 = (std::__shared_weak_count *)operator new(0x20uLL);
  v338->__shared_owners_ = 0;
  v339 = (unint64_t *)&v338->__shared_owners_;
  v338->__shared_weak_owners_ = 0;
  v338->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFA00;
  v338[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2758;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v338[1], (uint64_t)v338);
  do
    v340 = __ldaxr(v339);
  while (__stlxr(v340 - 1, v339));
  if (!v340)
  {
    ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
    std::__shared_weak_count::__release_weak(v338);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "pool3d");
  v341 = (std::__shared_weak_count *)operator new(0x20uLL);
  v341->__shared_owners_ = 0;
  v342 = (unint64_t *)&v341->__shared_owners_;
  v341->__shared_weak_owners_ = 0;
  v341->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF798;
  v341[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2498;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v341[1], (uint64_t)v341);
  do
    v343 = __ldaxr(v342);
  while (__stlxr(v343 - 1, v342));
  if (!v343)
  {
    ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
    std::__shared_weak_count::__release_weak(v341);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hierarchical_inner_product");
  v344 = (std::__shared_weak_count *)operator new(0x20uLL);
  v344->__shared_owners_ = 0;
  v345 = (unint64_t *)&v344->__shared_owners_;
  v344->__shared_weak_owners_ = 0;
  v344->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0FA8;
  v344[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA4018;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v344[1], (uint64_t)v344);
  do
    v346 = __ldaxr(v345);
  while (__stlxr(v346 - 1, v345));
  if (!v346)
  {
    ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
    std::__shared_weak_count::__release_weak(v344);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
  v347 = (std::__shared_weak_count *)operator new(0x20uLL);
  v347->__shared_owners_ = 0;
  v348 = (unint64_t *)&v347->__shared_owners_;
  v347->__shared_weak_owners_ = 0;
  v347->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF648;
  v347[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2318;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v347[1], (uint64_t)v347);
  do
    v349 = __ldaxr(v348);
  while (__stlxr(v349 - 1, v348));
  if (!v349)
  {
    ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
    std::__shared_weak_count::__release_weak(v347);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "argsort");
  v350 = (std::__shared_weak_count *)operator new(0x20uLL);
  v350->__shared_owners_ = 0;
  v351 = (unint64_t *)&v350->__shared_owners_;
  v350->__shared_weak_owners_ = 0;
  v350->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF808;
  v350[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2518;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v350[1], (uint64_t)v350);
  do
    v352 = __ldaxr(v351);
  while (__stlxr(v352 - 1, v351));
  if (!v352)
  {
    ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
    std::__shared_weak_count::__release_weak(v350);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "slice_update");
  v353 = (std::__shared_weak_count *)operator new(0x20uLL);
  v353->__shared_owners_ = 0;
  v354 = (unint64_t *)&v353->__shared_owners_;
  v353->__shared_weak_owners_ = 0;
  v353->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0330;
  v353[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA31D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v353[1], (uint64_t)v353);
  do
    v355 = __ldaxr(v354);
  while (__stlxr(v355 - 1, v354));
  if (!v355)
  {
    ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
    std::__shared_weak_count::__release_weak(v353);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "static_quantize");
  v356 = (std::__shared_weak_count *)operator new(0x20uLL);
  v356->__shared_owners_ = 0;
  v357 = (unint64_t *)&v356->__shared_owners_;
  v356->__shared_weak_owners_ = 0;
  v356->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0838;
  v356[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3798;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v356[1], (uint64_t)v356);
  do
    v358 = __ldaxr(v357);
  while (__stlxr(v358 - 1, v357));
  if (!v358)
  {
    ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
    std::__shared_weak_count::__release_weak(v356);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "static_dequantize");
  v359 = (std::__shared_weak_count *)operator new(0x20uLL);
  v359->__shared_owners_ = 0;
  v360 = (unint64_t *)&v359->__shared_owners_;
  v359->__shared_weak_owners_ = 0;
  v359->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0B80;
  v359[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3B58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v359[1], (uint64_t)v359);
  do
    v361 = __ldaxr(v360);
  while (__stlxr(v361 - 1, v360));
  if (!v361)
  {
    ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
    std::__shared_weak_count::__release_weak(v359);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_convolution_grad");
  v362 = (std::__shared_weak_count *)operator new(0x20uLL);
  v362->__shared_owners_ = 0;
  v363 = (unint64_t *)&v362->__shared_owners_;
  v362->__shared_weak_owners_ = 0;
  v362->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0E20;
  v362[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3E58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v362[1], (uint64_t)v362);
  do
    v364 = __ldaxr(v363);
  while (__stlxr(v364 - 1, v363));
  if (!v364)
  {
    ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
    std::__shared_weak_count::__release_weak(v362);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_inner_product_grad");
  v365 = (std::__shared_weak_count *)operator new(0x20uLL);
  v365->__shared_owners_ = 0;
  v366 = (unint64_t *)&v365->__shared_owners_;
  v365->__shared_weak_owners_ = 0;
  v365->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0F70;
  v365[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3FD8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v365[1], (uint64_t)v365);
  do
    v367 = __ldaxr(v366);
  while (__stlxr(v367 - 1, v366));
  if (!v367)
  {
    ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
    std::__shared_weak_count::__release_weak(v365);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "deconv3d");
  v368 = (std::__shared_weak_count *)operator new(0x20uLL);
  v368->__shared_owners_ = 0;
  v369 = (unint64_t *)&v368->__shared_owners_;
  v368->__shared_weak_owners_ = 0;
  v368->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFB88;
  v368[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2918;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v368[1], (uint64_t)v368);
  do
    v370 = __ldaxr(v369);
  while (__stlxr(v370 - 1, v369));
  if (!v370)
  {
    ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
    std::__shared_weak_count::__release_weak(v368);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice_update");
  v371 = (std::__shared_weak_count *)operator new(0x20uLL);
  v371->__shared_owners_ = 0;
  v372 = (unint64_t *)&v371->__shared_owners_;
  v371->__shared_weak_owners_ = 0;
  v371->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D78;
  v371[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3D98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v371[1], (uint64_t)v371);
  do
    v373 = __ldaxr(v372);
  while (__stlxr(v373 - 1, v372));
  if (!v373)
  {
    ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
    std::__shared_weak_count::__release_weak(v371);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "resize_nearest_neighbor");
  v374 = (std::__shared_weak_count *)operator new(0x20uLL);
  v374->__shared_owners_ = 0;
  v375 = (unint64_t *)&v374->__shared_owners_;
  v374->__shared_weak_owners_ = 0;
  v374->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0F00;
  v374[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3F58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v374[1], (uint64_t)v374);
  do
    v376 = __ldaxr(v375);
  while (__stlxr(v376 - 1, v375));
  if (!v376)
  {
    ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
    std::__shared_weak_count::__release_weak(v374);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "einsum");
  v377 = (std::__shared_weak_count *)operator new(0x20uLL);
  v377->__shared_owners_ = 0;
  v378 = (unint64_t *)&v377->__shared_owners_;
  v377->__shared_weak_owners_ = 0;
  v377->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF6F0;
  v377[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA23D8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v377[1], (uint64_t)v377);
  do
    v379 = __ldaxr(v378);
  while (__stlxr(v379 - 1, v378));
  if (!v379)
  {
    ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
    std::__shared_weak_count::__release_weak(v377);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_op");
  v380 = (std::__shared_weak_count *)operator new(0x20uLL);
  v380->__shared_owners_ = 0;
  v381 = (unint64_t *)&v380->__shared_owners_;
  v380->__shared_weak_owners_ = 0;
  v380->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC08A8;
  v380[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3818;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v380[1], (uint64_t)v380);
  do
    v382 = __ldaxr(v381);
  while (__stlxr(v382 - 1, v381));
  if (!v382)
  {
    ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
    std::__shared_weak_count::__release_weak(v380);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_unit");
  v383 = (std::__shared_weak_count *)operator new(0x20uLL);
  v383->__shared_owners_ = 0;
  v384 = (unint64_t *)&v383->__shared_owners_;
  v383->__shared_weak_owners_ = 0;
  v383->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0BB8;
  v383[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3B98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v383[1], (uint64_t)v383);
  do
    v385 = __ldaxr(v384);
  while (__stlxr(v385 - 1, v384));
  if (!v385)
  {
    ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
    std::__shared_weak_count::__release_weak(v383);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "plane_rw");
  v386 = (std::__shared_weak_count *)operator new(0x20uLL);
  v386->__shared_owners_ = 0;
  v387 = (unint64_t *)&v386->__shared_owners_;
  v386->__shared_weak_owners_ = 0;
  v386->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFBC0;
  v386[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2958;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v386[1], (uint64_t)v386);
  do
    v388 = __ldaxr(v387);
  while (__stlxr(v388 - 1, v387));
  if (!v388)
  {
    ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
    std::__shared_weak_count::__release_weak(v386);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_quantize");
  v389 = (std::__shared_weak_count *)operator new(0x20uLL);
  v389->__shared_owners_ = 0;
  v390 = (unint64_t *)&v389->__shared_owners_;
  v389->__shared_weak_owners_ = 0;
  v389->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0720;
  v389[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3658;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v389[1], (uint64_t)v389);
  do
    v391 = __ldaxr(v390);
  while (__stlxr(v391 - 1, v390));
  if (!v391)
  {
    ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
    std::__shared_weak_count::__release_weak(v389);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_dequantize");
  v392 = (std::__shared_weak_count *)operator new(0x20uLL);
  v392->__shared_owners_ = 0;
  v393 = (unint64_t *)&v392->__shared_owners_;
  v392->__shared_weak_owners_ = 0;
  v392->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0AD8;
  v392[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3A98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v392[1], (uint64_t)v392);
  do
    v394 = __ldaxr(v393);
  while (__stlxr(v394 - 1, v393));
  if (!v394)
  {
    ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
    std::__shared_weak_count::__release_weak(v392);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_in");
  v395 = (std::__shared_weak_count *)operator new(0x20uLL);
  v395->__shared_owners_ = 0;
  v396 = (unint64_t *)&v395->__shared_owners_;
  v395->__shared_weak_owners_ = 0;
  v395->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0C98;
  v395[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3C98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v395[1], (uint64_t)v395);
  do
    v397 = __ldaxr(v396);
  while (__stlxr(v397 - 1, v396));
  if (!v397)
  {
    ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
    std::__shared_weak_count::__release_weak(v395);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_out");
  v398 = (std::__shared_weak_count *)operator new(0x20uLL);
  v398->__shared_owners_ = 0;
  v399 = (unint64_t *)&v398->__shared_owners_;
  v398->__shared_weak_owners_ = 0;
  v398->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D40;
  v398[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3D58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v398[1], (uint64_t)v398);
  do
    v400 = __ldaxr(v399);
  while (__stlxr(v400 - 1, v399));
  if (!v400)
  {
    ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
    std::__shared_weak_count::__release_weak(v398);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_transform_weights");
  v401 = (std::__shared_weak_count *)operator new(0x20uLL);
  v401->__shared_owners_ = 0;
  v402 = (unint64_t *)&v401->__shared_owners_;
  v401->__shared_weak_owners_ = 0;
  v401->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D40;
  v401[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3D58;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v401[1], (uint64_t)v401);
  do
    v403 = __ldaxr(v402);
  while (__stlxr(v403 - 1, v402));
  if (!v403)
  {
    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
    std::__shared_weak_count::__release_weak(v401);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "meta_convolution");
  v404 = (std::__shared_weak_count *)operator new(0x20uLL);
  v404->__shared_owners_ = 0;
  v405 = (unint64_t *)&v404->__shared_owners_;
  v404->__shared_weak_owners_ = 0;
  v404->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC09F8;
  v404[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3998;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v404[1], (uint64_t)v404);
  do
    v406 = __ldaxr(v405);
  while (__stlxr(v406 - 1, v405));
  if (!v406)
  {
    ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
    std::__shared_weak_count::__release_weak(v404);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "furthest_point_sampling");
  v407 = (std::__shared_weak_count *)operator new(0x20uLL);
  v407->__shared_owners_ = 0;
  v408 = (unint64_t *)&v407->__shared_owners_;
  v407->__shared_weak_owners_ = 0;
  v407->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0E58;
  v407[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3E98;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v407[1], (uint64_t)v407);
  do
    v409 = __ldaxr(v408);
  while (__stlxr(v409 - 1, v408));
  if (!v409)
  {
    ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
    std::__shared_weak_count::__release_weak(v407);
  }
  if (v414 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "degamma");
  v410 = (std::__shared_weak_count *)operator new(0x20uLL);
  v410->__shared_owners_ = 0;
  v411 = (unint64_t *)&v410->__shared_owners_;
  v410->__shared_weak_owners_ = 0;
  v410->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF958;
  v410[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2698;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v410[1], (uint64_t)v410);
  do
    v412 = __ldaxr(v411);
  while (__stlxr(v412 - 1, v411));
  if (!v412)
  {
    ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
    std::__shared_weak_count::__release_weak(v410);
  }
  if (v414 < 0)
    operator delete(__p[0]);
}

void sub_190ED94B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v18;

  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::generic_store_global_kernel::register_layer_io(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "store_global");
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0368;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA3218;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_190EDA5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::generic_cf_if_kernel::register_layer_io(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF4C0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA2158;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_190EDA6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::convolution_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int32x2_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  __int128 v21[2];
  void *__p;
  void *v23;

  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 632))(v21, a1);
  v11 = (std::__shared_weak_count *)a1[2];
  v20[0] = a1[1];
  v20[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(_QWORD *))(a1[70] + 136))(a1 + 70);
  Espresso::set_conv_quantized_weight_helper(v15, v16, v17, v14, (unsigned __int8 **)a3, (char *)a4, a5, a6, (uint64_t)(a1 + 59), v21, v20, v14, 1);
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 70, (uint64_t *)a3, a4, a5);
}

void sub_190EDA83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_convolution_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  int v39;
  int v40;
  int v48;
  int v49;
  int v52;
  int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  int v73;
  BOOL v74;
  int v75;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  int v89;
  int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  vImagePixelCount v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  int v132;
  int v133;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  vImagePixelCount v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  void *v192;
  vImagePixelCount v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  void *v214;
  vImagePixelCount v215;
  uint64_t v216[2];
  uint64_t v217;
  std::__shared_weak_count *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  std::string v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  uint64_t v226[2];
  uint64_t v227;
  std::__shared_weak_count *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231[2];
  uint64_t v232;
  std::__shared_weak_count *v233;
  void *v234;
  vImagePixelCount v235;
  uint64_t v236[2];
  void *v237;
  vImagePixelCount v238;
  uint64_t v239[2];
  uint64_t v240;
  std::__shared_weak_count *v241;
  void *v242;
  vImagePixelCount v243;
  uint64_t v244[2];
  uint64_t v245;
  std::__shared_weak_count *v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  uint64_t v251[2];
  uint64_t v252;
  std::__shared_weak_count *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  void *data;
  vImagePixelCount height;
  uint64_t v258[2];
  uint64_t v259;
  int v260;
  int v261;
  void *v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;

  v271 = *MEMORY[0x1E0C80C00];
  v264 = 0;
  v265 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v264, *a6, a6[1]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 464))(&v259, a1);
  v11 = v259;
  v12 = HIDWORD(v259);
  v268 = v259;
  v13 = v260;
  v14 = v261;
  v269 = v260;
  v270 = v261;
  v15 = a3[23];
  if ((v15 & 0x80) == 0)
  {
    switch(a3[23])
    {
      case 1u:
        v16 = *a3;
        if (v16 != 87)
          goto LABEL_7;
        goto LABEL_11;
      case 2u:
        v39 = *(unsigned __int16 *)a3;
        v40 = 14423;
        goto LABEL_51;
      case 4u:
        v39 = *(_DWORD *)a3;
        v40 = 947216215;
LABEL_51:
        if (v39 == v40)
          goto LABEL_105;
        goto LABEL_383;
      case 5u:
        if (*(_DWORD *)a3 != 828792663 || a3[4] != 54)
          goto LABEL_57;
        goto LABEL_161;
      case 6u:
        if (*(_DWORD *)a3 == 1852399447 && *((_WORD *)a3 + 2) == 14452)
          goto LABEL_105;
        goto LABEL_383;
      case 9u:
        goto LABEL_255;
      case 0xAu:
        goto LABEL_146;
      case 0x14u:
        if (*(_QWORD *)a3 != 0x6F635F3233665F57
          || *((_QWORD *)a3 + 1) != 0x646573736572706DLL
          || *((_DWORD *)a3 + 4) != 909207135)
        {
          goto LABEL_76;
        }
        goto LABEL_184;
      default:
        goto LABEL_383;
    }
  }
  v17 = *((_QWORD *)a3 + 1);
  switch(v17)
  {
    case 1:
      if (**(_BYTE **)a3 != 87)
        goto LABEL_100;
LABEL_11:
      v18 = (std::__shared_weak_count *)v265;
      v258[0] = v264;
      v258[1] = v265;
      if (v265)
      {
        v19 = (unint64_t *)(v265 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v258, v11, v12, v13, v14, (a4 & 0x3F) == 0);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      data = src.data;
      height = src.height;
      if (src.height)
      {
        v23 = (unint64_t *)(src.height + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = (std::__shared_weak_count *)a2[1];
      v254 = *a2;
      v255 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 424))(a1, &data, &v254);
      v28 = v255;
      if (v255)
      {
        v29 = (unint64_t *)&v255->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = (std::__shared_weak_count *)height;
      if (height)
      {
        v32 = (unint64_t *)(height + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v35 = (unint64_t *)(src.height + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        goto LABEL_381;
      }
      goto LABEL_383;
    case 2:
      v48 = **(unsigned __int16 **)a3;
      v49 = 14423;
      goto LABEL_87;
    case 3:
      goto LABEL_100;
    case 4:
      v48 = **(_DWORD **)a3;
      v49 = 947216215;
LABEL_87:
      if (v48 == v49)
        goto LABEL_105;
      goto LABEL_100;
    case 5:
      if (**(_DWORD **)a3 == 828792663 && *(_BYTE *)(*(_QWORD *)a3 + 4) == 54)
      {
LABEL_161:
        v78 = (std::__shared_weak_count *)v265;
        v239[0] = v264;
        v239[1] = v265;
        if (v265)
        {
          v79 = (unint64_t *)(v265 + 8);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,4>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v239, v11, v12, v13, v14, (a4 & 0x3F) == 0);
        if (v78)
        {
          v81 = (unint64_t *)&v78->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v237 = src.data;
        v238 = src.height;
        if (src.height)
        {
          v83 = (unint64_t *)(src.height + 8);
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v237, a2);
        v85 = (std::__shared_weak_count *)v238;
        if (v238)
        {
          v86 = (unint64_t *)(v238 + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v34 = (std::__shared_weak_count *)src.height;
        if (!src.height)
          goto LABEL_383;
        v88 = (unint64_t *)(src.height + 8);
        do
          v36 = __ldaxr(v88);
        while (__stlxr(v36 - 1, v88));
        goto LABEL_381;
      }
      if ((v15 & 0x80) == 0)
      {
        switch(a3[23])
        {
          case 1u:
            v16 = *a3;
LABEL_7:
            if (v16 == 98)
              goto LABEL_102;
            goto LABEL_383;
          case 2u:
          case 3u:
          case 4u:
          case 6u:
          case 7u:
          case 8u:
            goto LABEL_383;
          case 5u:
            goto LABEL_57;
          case 9u:
            goto LABEL_255;
          case 0xAu:
            goto LABEL_146;
          default:
            if (v15 != 20)
              goto LABEL_383;
LABEL_76:
            if (*(_QWORD *)a3 != 0x6F635F3233665F62
              || *((_QWORD *)a3 + 1) != 0x646573736572706DLL
              || *((_DWORD *)a3 + 4) != 909207135)
            {
              goto LABEL_383;
            }
            goto LABEL_181;
        }
      }
LABEL_100:
      if (*((_QWORD *)a3 + 1) != 1)
        goto LABEL_134;
      if (**(_BYTE **)a3 != 98)
      {
        if ((v15 & 0x80) == 0)
          goto LABEL_383;
LABEL_134:
        if (*((_QWORD *)a3 + 1) != 20)
          goto LABEL_147;
        if (**(_QWORD **)a3 != 0x6F635F3233665F62
          || *(_QWORD *)(*(_QWORD *)a3 + 8) != 0x646573736572706DLL
          || *(_DWORD *)(*(_QWORD *)a3 + 16) != 909207135)
        {
          if ((v15 & 0x80) == 0)
          {
            if (v15 != 5)
            {
              if (v15 != 9)
              {
                if (v15 != 10)
                  goto LABEL_383;
LABEL_146:
                v73 = *((unsigned __int16 *)a3 + 4);
                v74 = *(_QWORD *)a3 == 0x6E61725F38755F71;
                v75 = 25959;
LABEL_256:
                if (!v74 || v73 != v75)
                  goto LABEL_383;
                goto LABEL_261;
              }
LABEL_255:
              v73 = a3[8];
              v74 = *(_QWORD *)a3 == 0x616D6E696D5F3857;
              v75 = 120;
              goto LABEL_256;
            }
LABEL_57:
            if (*(_DWORD *)a3 != 828792674 || a3[4] != 54)
              goto LABEL_383;
LABEL_250:
            v132 = *(_DWORD *)(a1 + 344);
            v133 = *(_DWORD *)(a1 + 424);
            if (v133 < 2)
            {
              if (!*(_DWORD *)(a1 + 416))
                goto LABEL_328;
              v133 = 1;
            }
            else if (!*(_DWORD *)(a1 + 416))
            {
              v132 *= v133;
LABEL_328:
              v175 = (std::__shared_weak_count *)v265;
              v226[0] = v264;
              v226[1] = v265;
              if (v265)
              {
                v176 = (unint64_t *)(v265 + 8);
                do
                  v177 = __ldxr(v176);
                while (__stxr(v177 + 1, v176));
              }
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v252, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v226, v132, (a4 & 0x3F) == 0);
              if (v175)
              {
                v178 = (unint64_t *)&v175->__shared_owners_;
                do
                  v179 = __ldaxr(v178);
                while (__stlxr(v179 - 1, v178));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              v180 = *(std::__shared_weak_count **)(a1 + 16);
              v224 = *(_QWORD *)(a1 + 8);
              v225 = v180;
              if (v180)
              {
                v181 = (unint64_t *)&v180->__shared_owners_;
                do
                  v182 = __ldxr(v181);
                while (__stxr(v182 + 1, v181));
              }
              if ((char)a3[23] < 0)
                std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
              else
                v223 = *(std::string *)a3;
              v221 = v252;
              v222 = v253;
              if (v253)
              {
                v183 = (unint64_t *)&v253->__shared_owners_;
                do
                  v184 = __ldxr(v183);
                while (__stxr(v184 + 1, v183));
              }
              Espresso::base_kernel::set_parameter_blob<unsigned short,1>(a1, &v224, (__int128 *)&v223, &v221);
              v185 = v222;
              if (v222)
              {
                v186 = (unint64_t *)&v222->__shared_owners_;
                do
                  v187 = __ldaxr(v186);
                while (__stlxr(v187 - 1, v186));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                  std::__shared_weak_count::__release_weak(v185);
                }
              }
              if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v223.__r_.__value_.__l.__data_);
              v188 = v225;
              if (v225)
              {
                v189 = (unint64_t *)&v225->__shared_owners_;
                do
                  v190 = __ldaxr(v189);
                while (__stlxr(v190 - 1, v189));
                if (!v190)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v249, (int *)(v252 + 8));
              v191 = v249;
              v192 = *(void **)(v249 + 16);
              v193 = *(int *)(v252 + 8);
              src.data = *(void **)(v252 + 16);
              src.height = 1;
              src.width = v193;
              src.rowBytes = 2 * v193;
              dest.data = v192;
              dest.height = 1;
              dest.width = v193;
              dest.rowBytes = 4 * v193;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              v219 = v191;
              v220 = v250;
              if (v250)
              {
                v194 = (unint64_t *)&v250->__shared_owners_;
                do
                  v195 = __ldxr(v194);
                while (__stxr(v195 + 1, v194));
              }
              v196 = (std::__shared_weak_count *)a2[1];
              v217 = *a2;
              v218 = v196;
              if (v196)
              {
                v197 = (unint64_t *)&v196->__shared_owners_;
                do
                  v198 = __ldxr(v197);
                while (__stxr(v198 + 1, v197));
              }
              (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 416))(a1, &v219, &v217);
              v199 = v218;
              if (v218)
              {
                v200 = (unint64_t *)&v218->__shared_owners_;
                do
                  v201 = __ldaxr(v200);
                while (__stlxr(v201 - 1, v200));
                if (!v201)
                {
                  ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                  std::__shared_weak_count::__release_weak(v199);
                }
              }
              v202 = v220;
              if (v220)
              {
                v203 = (unint64_t *)&v220->__shared_owners_;
                do
                  v204 = __ldaxr(v203);
                while (__stlxr(v204 - 1, v203));
                if (!v204)
                {
                  ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                  std::__shared_weak_count::__release_weak(v202);
                }
              }
              v205 = v250;
              if (v250)
              {
                v206 = (unint64_t *)&v250->__shared_owners_;
                do
                  v207 = __ldaxr(v206);
                while (__stlxr(v207 - 1, v206));
                if (!v207)
                {
                  ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                  std::__shared_weak_count::__release_weak(v205);
                }
              }
              v34 = v253;
              if (!v253)
                goto LABEL_383;
              v208 = (unint64_t *)&v253->__shared_owners_;
              do
                v36 = __ldaxr(v208);
              while (__stlxr(v36 - 1, v208));
              goto LABEL_381;
            }
            v132 *= 4 * v133;
            goto LABEL_328;
          }
LABEL_147:
          if (*((_QWORD *)a3 + 1) == 5)
          {
            if (**(_DWORD **)a3 == 828792674 && *(_BYTE *)(*(_QWORD *)a3 + 4) == 54)
              goto LABEL_250;
            if ((v15 & 0x80) == 0)
              goto LABEL_383;
          }
          if (*((_QWORD *)a3 + 1) != 10)
            goto LABEL_253;
          if (**(_QWORD **)a3 == 0x6E61725F38755F71 && *(_WORD *)(*(_QWORD *)a3 + 8) == 25959)
          {
LABEL_261:
            v135 = (std::__shared_weak_count *)v265;
            v216[0] = v264;
            v216[1] = v265;
            if (v265)
            {
              v136 = (unint64_t *)(v265 + 8);
              do
                v137 = __ldxr(v136);
              while (__stxr(v137 + 1, v136));
            }
            Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v216, 2 * *(_DWORD *)(a1 + 344), (a4 & 0x3F) == 0);
            if (v135)
            {
              v138 = (unint64_t *)&v135->__shared_owners_;
              do
                v139 = __ldaxr(v138);
              while (__stlxr(v139 - 1, v138));
              if (!v139)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            v214 = src.data;
            v215 = src.height;
            if (src.height)
            {
              v140 = (unint64_t *)(src.height + 8);
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
            }
            v142 = (std::__shared_weak_count *)a2[1];
            v212 = *a2;
            v213 = v142;
            if (v142)
            {
              v143 = (unint64_t *)&v142->__shared_owners_;
              do
                v144 = __ldxr(v143);
              while (__stxr(v144 + 1, v143));
            }
            (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 592))(a1, &v214, &v212);
            v145 = v213;
            if (v213)
            {
              v146 = (unint64_t *)&v213->__shared_owners_;
              do
                v147 = __ldaxr(v146);
              while (__stlxr(v147 - 1, v146));
              if (!v147)
              {
                ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                std::__shared_weak_count::__release_weak(v145);
              }
            }
            v148 = (std::__shared_weak_count *)v215;
            if (v215)
            {
              v149 = (unint64_t *)(v215 + 8);
              do
                v150 = __ldaxr(v149);
              while (__stlxr(v150 - 1, v149));
              if (!v150)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
            v34 = (std::__shared_weak_count *)src.height;
            if (!src.height)
              goto LABEL_383;
            v151 = (unint64_t *)(src.height + 8);
            do
              v36 = __ldaxr(v151);
            while (__stlxr(v36 - 1, v151));
            goto LABEL_381;
          }
          if ((v15 & 0x80) != 0)
          {
LABEL_253:
            if (*((_QWORD *)a3 + 1) != 9)
              goto LABEL_383;
            a3 = *(unsigned __int8 **)a3;
          }
          else if (v15 != 9)
          {
            goto LABEL_383;
          }
          goto LABEL_255;
        }
LABEL_181:
        v89 = *(_DWORD *)(a1 + 344);
        v90 = *(_DWORD *)(a1 + 424);
        if (v90 < 2)
        {
          if (!*(_DWORD *)(a1 + 416))
            goto LABEL_292;
          v90 = 1;
        }
        else if (!*(_DWORD *)(a1 + 416))
        {
          v89 *= v90;
LABEL_292:
          v152 = (std::__shared_weak_count *)v265;
          v231[0] = v264;
          v231[1] = v265;
          if (v265)
          {
            v153 = (unint64_t *)(v265 + 8);
            do
              v154 = __ldxr(v153);
            while (__stxr(v154 + 1, v153));
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v252, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v231, v89, (a4 & 0x3F) == 0);
          if (v152)
          {
            v155 = (unint64_t *)&v152->__shared_owners_;
            do
              v156 = __ldaxr(v155);
            while (__stlxr(v156 - 1, v155));
            if (!v156)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v249, v89, 1, 1, 1);
          v157 = v249;
          v158 = *(void **)(v249 + 16);
          v159 = *(int *)(v252 + 8);
          src.data = *(void **)(v252 + 16);
          src.height = 1;
          src.width = v159;
          src.rowBytes = 2 * v159;
          dest.data = v158;
          dest.height = 1;
          dest.width = v159;
          dest.rowBytes = 4 * v159;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          v229 = v157;
          v230 = v250;
          if (v250)
          {
            v160 = (unint64_t *)&v250->__shared_owners_;
            do
              v161 = __ldxr(v160);
            while (__stxr(v161 + 1, v160));
          }
          v162 = (std::__shared_weak_count *)a2[1];
          v227 = *a2;
          v228 = v162;
          if (v162)
          {
            v163 = (unint64_t *)&v162->__shared_owners_;
            do
              v164 = __ldxr(v163);
            while (__stxr(v164 + 1, v163));
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 416))(a1, &v229, &v227);
          v165 = v228;
          if (v228)
          {
            v166 = (unint64_t *)&v228->__shared_owners_;
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          v168 = v230;
          if (v230)
          {
            v169 = (unint64_t *)&v230->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          v171 = v250;
          if (v250)
          {
            v172 = (unint64_t *)&v250->__shared_owners_;
            do
              v173 = __ldaxr(v172);
            while (__stlxr(v173 - 1, v172));
            if (!v173)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
          v34 = v253;
          if (!v253)
            goto LABEL_383;
          v174 = (unint64_t *)&v253->__shared_owners_;
          do
            v36 = __ldaxr(v174);
          while (__stlxr(v36 - 1, v174));
LABEL_381:
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
          goto LABEL_383;
        }
        v89 *= 4 * v90;
        goto LABEL_292;
      }
LABEL_102:
      v52 = *(_DWORD *)(a1 + 344);
      v53 = *(_DWORD *)(a1 + 424);
      if (v53 < 2)
      {
        if (!*(_DWORD *)(a1 + 416))
          goto LABEL_222;
        v53 = 1;
      }
      else if (!*(_DWORD *)(a1 + 416))
      {
        v52 *= v53;
        goto LABEL_222;
      }
      v52 *= 4 * v53;
LABEL_222:
      v115 = (std::__shared_weak_count *)v265;
      v236[0] = v264;
      v236[1] = v265;
      if (v265)
      {
        v116 = (unint64_t *)(v265 + 8);
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v236, v52, (a4 & 0x3F) == 0);
      if (v115)
      {
        v118 = (unint64_t *)&v115->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      v234 = src.data;
      v235 = src.height;
      if (src.height)
      {
        v120 = (unint64_t *)(src.height + 8);
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
      }
      v122 = (std::__shared_weak_count *)a2[1];
      v232 = *a2;
      v233 = v122;
      if (v122)
      {
        v123 = (unint64_t *)&v122->__shared_owners_;
        do
          v124 = __ldxr(v123);
        while (__stxr(v124 + 1, v123));
      }
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 416))(a1, &v234, &v232);
      v125 = v233;
      if (v233)
      {
        v126 = (unint64_t *)&v233->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      v128 = (std::__shared_weak_count *)v235;
      if (v235)
      {
        v129 = (unint64_t *)(v235 + 8);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      v34 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v131 = (unint64_t *)(src.height + 8);
        do
          v36 = __ldaxr(v131);
        while (__stlxr(v36 - 1, v131));
        goto LABEL_381;
      }
LABEL_383:
      if (v262)
      {
        v263 = v262;
        operator delete(v262);
      }
      v209 = (std::__shared_weak_count *)v265;
      if (v265)
      {
        v210 = (unint64_t *)(v265 + 8);
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      return;
    case 6:
      if (**(_DWORD **)a3 != 1852399447 || *(_WORD *)(*(_QWORD *)a3 + 4) != 14452)
        goto LABEL_100;
LABEL_105:
      v54 = (std::__shared_weak_count *)v265;
      v244[0] = v264;
      v244[1] = v265;
      if (v265)
      {
        v55 = (unint64_t *)(v265 + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,4>(&src, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v244, v11, v12, v13, v14, (a4 & 0x3F) == 0);
      if (v54)
      {
        v57 = (unint64_t *)&v54->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v242 = src.data;
      v243 = src.height;
      if (src.height)
      {
        v59 = (unint64_t *)(src.height + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      v61 = (std::__shared_weak_count *)a2[1];
      v240 = *a2;
      v241 = v61;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 560))(a1, &v242, &v240);
      v64 = v241;
      if (v241)
      {
        v65 = (unint64_t *)&v241->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v243;
      if (v243)
      {
        v68 = (unint64_t *)(v243 + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      std::string::operator=((std::string *)(a1 + 536), (const std::string *)a3);
      v34 = (std::__shared_weak_count *)src.height;
      if (!src.height)
        goto LABEL_383;
      v70 = (unint64_t *)(src.height + 8);
      do
        v36 = __ldaxr(v70);
      while (__stlxr(v36 - 1, v70));
      goto LABEL_381;
    default:
      if (v17 != 20)
        goto LABEL_100;
      v37 = **(_QWORD **)a3 == 0x6F635F3233665F57 && *(_QWORD *)(*(_QWORD *)a3 + 8) == 0x646573736572706DLL;
      if (!v37 || *(_DWORD *)(*(_QWORD *)a3 + 16) != 909207135)
        goto LABEL_100;
LABEL_184:
      v91 = (std::__shared_weak_count *)v265;
      v251[0] = v264;
      v251[1] = v265;
      if (v265)
      {
        v92 = (unint64_t *)(v265 + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,4>(&v252, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v251, v11, v12, v13, v14, (a4 & 0x3F) == 0);
      if (v91)
      {
        v94 = (unint64_t *)&v91->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v249, (uint64_t)&v268);
      v96 = 0;
      v97 = v249;
      v98 = *(void **)(v249 + 24);
      v99 = *(int *)(v252 + 8);
      do
      {
        v99 *= *(int *)(v252 + 12 + v96);
        v96 += 4;
      }
      while (v96 != 12);
      src.data = *(void **)(v252 + 24);
      src.height = 1;
      src.width = v99;
      src.rowBytes = 2 * v99;
      dest.data = v98;
      dest.height = 1;
      dest.width = v99;
      dest.rowBytes = 4 * v99;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      v247 = v97;
      v248 = v250;
      if (v250)
      {
        v100 = (unint64_t *)&v250->__shared_owners_;
        do
          v101 = __ldxr(v100);
        while (__stxr(v101 + 1, v100));
      }
      v102 = (std::__shared_weak_count *)a2[1];
      v245 = *a2;
      v246 = v102;
      if (v102)
      {
        v103 = (unint64_t *)&v102->__shared_owners_;
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 424))(a1, &v247, &v245);
      v105 = v246;
      if (v246)
      {
        v106 = (unint64_t *)&v246->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v108 = v248;
      if (v248)
      {
        v109 = (unint64_t *)&v248->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v111 = v250;
      if (v250)
      {
        v112 = (unint64_t *)&v250->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v34 = v253;
      if (!v253)
        goto LABEL_383;
      v114 = (unint64_t *)&v253->__shared_owners_;
      do
        v36 = __ldaxr(v114);
      while (__stlxr(v36 - 1, v114));
      goto LABEL_381;
  }
}

void sub_190EDBB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;
  void *v62;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  v62 = *(void **)(v60 - 192);
  if (v62)
  {
    *(_QWORD *)(v60 - 184) = v62;
    operator delete(v62);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v60 - 168);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5CompilerOptions::GetForceRecompilation(const void **this)
{
  void *v1;
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "forceRecompilation<BOOL>", 24);
  if (!*v2
    || (v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, void *))*v2)(3, v2, 0, MEMORY[0x1E0DE4EC0], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

double E5RT::E5CompilerImpl::IsNewCompileRequiredInternal@<D0>(const void **this@<X2>, uint64_t a2@<X0>, std::string::size_type a3@<X1>, uint64_t a4@<X8>)
{
  NSObject *v7;
  NSObject *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  uint64_t ComputeDeviceTypesAllowed;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  std::string *v16;
  std::__shared_weak_count *v17;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  E5RT::E5BundleCacheManager *v25;
  char *v26;
  std::string *v27;
  std::string::size_type v28;
  char v29;
  const std::__fs::filesystem::directory_entry *v30;
  std::__fs::filesystem::path::__string_view v31;
  std::string *p_buf;
  std::basic_string_view<_CharT, _Traits>::size_type v33;
  std::basic_string_view<_CharT, _Traits>::size_type v34;
  std::__fs::filesystem::path::__string_view v35;
  int v36;
  void *v37;
  std::string *v38;
  void *v39;
  void *v40;
  int v41;
  char v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *cntrl;
  uint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  E5RT::E5BundleCacheManager *v52;
  char *v53;
  std::string *v54;
  double result;
  std::string::size_type v56;
  void *v57;
  std::__fs::filesystem::path v59;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v60;
  std::__shared_weak_count *v61;
  char v62;
  std::__fs::filesystem::recursive_directory_iterator v63;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v64;
  std::__shared_weak_count *v65;
  BOOL v66;
  void *__p[2];
  uint64_t v68;
  std::string buf;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v68 = 0;
  if (E5RT::E5CompilerOptions::GetForceRecompilation(this))
  {
    E5RT::E5CompilerOptions::operator=(*(_QWORD *)(a2 + 32), (uint64_t)this);
    E5RT::E5CompilerOptions::SetForceRecompilation(*(const void ***)(a2 + 32), 0);
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&buf, "e5rt");
    E5RT::GetE5RTLog((uint64_t)&buf);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_8;
    }
    else if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      goto LABEL_8;
    }
    if (*(char *)(a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = *(_QWORD *)a3;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
    _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "E5BundleCache IsNewCompileRequired: input=%s forceRecompile=True\n", (uint8_t *)&buf, 0xCu);
LABEL_8:

    E5RT::E5BundleCacheManager::Lookup(*(_QWORD *)(a2 + 24), a3, *(_QWORD *)(a2 + 32), (uint64_t)&buf);
    v10 = buf.__r_.__value_.__s.__data_[0];
    if (SHIBYTE(v68) < 0)
    {
      operator delete(__p[0]);
      *(_OWORD *)__p = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
      v68 = v70;
      if (!v10)
      {
LABEL_46:
        v28 = 0;
        v29 = 1;
        goto LABEL_109;
      }
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
      v68 = v70;
      if (!buf.__r_.__value_.__s.__data_[0])
        goto LABEL_46;
    }
    v25 = *(E5RT::E5BundleCacheManager **)(a2 + 24);
    memset(&buf, 0, sizeof(buf));
    v26 = (char *)HIBYTE(v68);
    if (v68 >= 0)
      v27 = (std::string *)__p;
    else
      v27 = (std::string *)__p[0];
    if (v68 < 0)
      v26 = (char *)__p[1];
    std::string::append[abi:ne180100]<char const*,0>(&buf, v27, (std::string *)&v26[(_QWORD)v27]);
    E5RT::E5BundleCacheManager::PurgeBundle(v25, (std::__fs::filesystem::path *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_46;
  }
  E5RT::E5BundleCacheManager::Lookup(*(_QWORD *)(a2 + 24), a3, (uint64_t)this, (uint64_t)&buf);
  v11 = buf.__r_.__value_.__s.__data_[0];
  if (SHIBYTE(v68) < 0)
  {
    operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    v68 = v70;
    if (!v11)
      goto LABEL_100;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    v68 = v70;
    if (!buf.__r_.__value_.__s.__data_[0])
      goto LABEL_100;
  }
  E5RT::ProgramLibrary::OpenLibrary((E5RT::SharedResourceManager *)__p, &buf);
  v56 = buf.__r_.__value_.__r.__words[0];
  ComputeDeviceTypesAllowed = E5RT::E5CompilerOptions::GetComputeDeviceTypesAllowed(this);
  v14 = *(_QWORD **)ComputeDeviceTypesAllowed;
  v13 = *(_QWORD **)(ComputeDeviceTypesAllowed + 8);
  if (*(_QWORD **)ComputeDeviceTypesAllowed != v13)
  {
    while (*v14 != 4)
    {
      if (++v14 == v13)
      {
        v14 = *(_QWORD **)(ComputeDeviceTypesAllowed + 8);
        break;
      }
    }
  }
  if (v14 == v13)
    goto LABEL_97;
  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  memset(&buf, 0, sizeof(buf));
  v15 = (char *)HIBYTE(v68);
  if (v68 >= 0)
    v16 = (std::string *)__p;
  else
    v16 = (std::string *)__p[0];
  if (v68 < 0)
    v15 = (char *)__p[1];
  std::string::append[abi:ne180100]<char const*,0>(&buf, v16, (std::string *)&v15[(_QWORD)v16]);
  MEMORY[0x19401CB80](&v64, &buf, 0, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    v18 = v64;
    v17 = v65;
    if (v65)
      goto LABEL_27;
LABEL_48:
    v63.__imp_.__ptr_ = v18;
    v63.__imp_.__cntrl_ = v17;
    v63.__rec_ = v66;
LABEL_49:
    v60 = 0;
    v61 = 0;
    v62 = 0;
    goto LABEL_53;
  }
  v18 = v64;
  v17 = v65;
  if (!v65)
    goto LABEL_48;
LABEL_27:
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v21 = v65;
  v63.__imp_.__ptr_ = v18;
  v63.__imp_.__cntrl_ = v17;
  v63.__rec_ = v66;
  if (!v65)
    goto LABEL_49;
  v22 = (unint64_t *)&v65->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  v60 = 0;
  v61 = 0;
  v62 = 0;
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_53:
  while (v63.__imp_.__ptr_ != v60)
  {
    v30 = std::__fs::filesystem::recursive_directory_iterator::__dereference(&v63);
    v31 = std::__fs::filesystem::path::__extension(&v30->__p_);
    if (v31.__size_ >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v31.__size_ >= 0x17)
    {
      v33 = (v31.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31.__size_ | 7) != 0x17)
        v33 = v31.__size_ | 7;
      v34 = v33 + 1;
      p_buf = (std::string *)operator new(v33 + 1);
      buf.__r_.__value_.__l.__size_ = v31.__size_;
      buf.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
LABEL_61:
      memmove(p_buf, v31.__data_, v31.__size_);
      goto LABEL_62;
    }
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = v31.__size_;
    p_buf = &buf;
    if (v31.__size_)
      goto LABEL_61;
LABEL_62:
    p_buf->__r_.__value_.__s.__data_[v31.__size_] = 0;
    v59.__pn_ = buf;
    memset(&buf, 0, sizeof(buf));
    std::string::append[abi:ne180100]<char const*,0>(&buf, (std::string *)".anehash", (std::string *)"");
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35.__data_ = (const std::string_view::value_type *)&buf;
    else
      v35.__data_ = (const std::string_view::value_type *)buf.__r_.__value_.__r.__words[0];
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35.__size_ = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    else
      v35.__size_ = buf.__r_.__value_.__l.__size_;
    v36 = std::__fs::filesystem::path::__compare(&v59, v35);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(v59.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_73:
        operator delete(v59.__pn_.__r_.__value_.__l.__data_);
        if (v36)
          goto LABEL_52;
        goto LABEL_74;
      }
    }
    else if (SHIBYTE(v59.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_73;
    }
    if (v36)
      goto LABEL_52;
LABEL_74:
    E5RT::ReadAneCacheUrlIdentifier(&v30->__p_, &buf);
    v37 = (void *)MEMORY[0x1E0CFDF68];
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &buf;
    else
      v38 = (std::string *)buf.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "modelWithCacheURLIdentifier:", v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    v41 = objc_msgSend(v57, "compiledModelExistsFor:", v40);
    v42 = v41;
    if (!v41)
      LOBYTE(v11) = 0;

    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if ((v42 & 1) == 0)
      break;
LABEL_52:
    std::__fs::filesystem::recursive_directory_iterator::__increment(&v63, 0);
  }
  v43 = v61;
  if (v61)
  {
    v44 = (unint64_t *)&v61->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  cntrl = v63.__imp_.__cntrl_;
  if (v63.__imp_.__cntrl_)
  {
    v47 = &v63.__imp_.__cntrl_->__shared_owners_;
    do
      v48 = __ldaxr((unint64_t *)v47);
    while (__stlxr(v48 - 1, (unint64_t *)v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v49 = v65;
  if (v65)
  {
    v50 = (unint64_t *)&v65->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }

LABEL_97:
  if (!(_BYTE)v11)
  {
    if (v56)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v56 + 8))(v56);
LABEL_100:
    v52 = *(E5RT::E5BundleCacheManager **)(a2 + 24);
    memset(&buf, 0, sizeof(buf));
    v53 = (char *)HIBYTE(v68);
    if (v68 >= 0)
      v54 = (std::string *)__p;
    else
      v54 = (std::string *)__p[0];
    if (v68 < 0)
      v53 = (char *)__p[1];
    std::string::append[abi:ne180100]<char const*,0>(&buf, v54, (std::string *)&v53[(_QWORD)v54]);
    E5RT::E5BundleCacheManager::PurgeBundle(v52, (std::__fs::filesystem::path *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    LOBYTE(v11) = 0;
    v56 = 0;
  }
  v29 = v11 ^ 1;
  v28 = v56;
LABEL_109:
  *(_BYTE *)a4 = v29;
  result = *(double *)__p;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 24) = v68;
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

void sub_190EDC488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 121) < 0)
    operator delete(*(void **)(v33 - 144));

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void E5RT::E5BundleCacheManager::Lookup(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v9;
  std::string::size_type v10;
  char v11;
  BOOL v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  std::string::size_type v16;
  std::__fs::filesystem::path *v17;
  int v18;
  std::string v19;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v21;
  std::__fs::filesystem::path v22;
  std::string pn;
  int v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<std::string>(a1, (std::string *)a2, &v22);
  std::__fs::filesystem::__status(&v22, 0);
  if (pn.__r_.__value_.__s.__data_[0] == 255 || pn.__r_.__value_.__s.__data_[0] == 0)
  {
    std::__fs::filesystem::__create_directories(&v22, 0);
    if (*(_BYTE *)(a1 + 56))
    {
      if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&pn, v22.__pn_.__r_.__value_.__l.__data_, v22.__pn_.__r_.__value_.__l.__size_);
      else
        pn = v22.__pn_;
      E5RT::E5BundleCacheManager::MarkAsMobileOwned(a1, (std::string::size_type)&pn);
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pn.__r_.__value_.__l.__data_);
    }
  }
  E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<std::string>(a1, (std::string *)a2, (std::__fs::filesystem::path *)&pn);
  E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey((std::string *)a2, a3, &v19);
  v9 = std::string::append(&v19, ".bundle");
  v10 = v9->__r_.__value_.__r.__words[0];
  v25[0] = v9->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v25 + 7);
  __p.__pn_.__r_.__value_.__r.__words[0] = v10;
  __p.__pn_.__r_.__value_.__l.__size_ = v25[0];
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v11;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&pn, &v21);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_33:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_33;
LABEL_14:
  if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_34:
  operator delete(pn.__r_.__value_.__l.__data_);
LABEL_15:
  std::__fs::filesystem::__status(&v21, 0);
  if (pn.__r_.__value_.__s.__data_[0])
    v12 = pn.__r_.__value_.__s.__data_[0] == 255;
  else
    v12 = 1;
  v13 = !v12;
  *((_BYTE *)&pn.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&pn, "e5rt");
  E5RT::GetE5RTLog((uint64_t)&pn);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(pn.__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      goto LABEL_29;
  }
  else if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    goto LABEL_29;
  }
  if (*(char *)(a2 + 23) >= 0)
    v16 = a2;
  else
    v16 = *(_QWORD *)a2;
  v17 = &v21;
  if ((v21.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::__fs::filesystem::path *)v21.__pn_.__r_.__value_.__r.__words[0];
  LODWORD(pn.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)pn.__r_.__value_.__r.__words + 4) = v16;
  WORD2(pn.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&pn.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
  HIWORD(pn.__r_.__value_.__r.__words[2]) = 1024;
  v24 = v13;
  _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "E5BundleCache Lookup: input=%s output=%s exists=%d\n", (uint8_t *)&pn, 0x1Cu);
LABEL_29:

  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, v21.__pn_.__r_.__value_.__l.__data_, v21.__pn_.__r_.__value_.__l.__size_);
    v18 = SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]);
    *(_BYTE *)a4 = v13;
    *(std::string *)(a4 + 8) = pn;
    if (v18 < 0)
    {
      operator delete(v21.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_31;
    }
    else if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_31;
    }
  }
  else
  {
    *(_BYTE *)a4 = v13;
    *(std::__fs::filesystem::path *)(a4 + 8) = v21;
    if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_31:
      operator delete(v22.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_190EDC8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a32 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetComputeDeviceTypesAllowed(const void **this)
{
  void *v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62);
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

uint64_t espresso_network_bind_input_vimagebuffer_bgra8(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  uint64_t v13;

  v12 = (void *)MEMORY[0x19401D4A4]();
  if (a1
  {
    (*(void (**)(const void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2, a3, a4, a5, 4, a6, 1);
    v13 = 0;
  }
  else
  {
    v13 = 4294967290;
  }
  objc_autoreleasePoolPop(v12);
  return v13;
}

void EspressoLight::espresso_plan::bind_input_vimagebuffer_XYZA8(uint64_t a1, int a2, char *a3, int a4, _QWORD *a5, int a6, uint64_t a7, int a8)
{
  uint64_t v10;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v27;
  int v28;
  int v29;
  int v30;
  float v31;
  float v32;
  int v33;
  uint64_t *v34;
  float v35;
  int v36;
  char *v37;
  int v38;
  float v39;
  float v40;
  uint64_t **v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::runtime_error *exception;
  std::string *v59;
  __int128 v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  std::runtime_error *v63;
  std::runtime_error *v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  std::string::size_type size;
  std::string *v71;
  __int128 v72;
  std::runtime_error *v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  uint64_t *v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  std::string v90;
  std::string v91;
  int v92[3];

  v92[0] = a2;
  v10 = *(_QWORD *)(a1 + 1064);
  if (*(_DWORD *)(v10 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v90, *(_DWORD *)(*(_QWORD *)(a1 + 1064) + 160));
    v59 = std::string::insert(&v90, 0, "Inconsistent phase of espresso_plan: ");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v91);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(exception[1].__vftable) = -5;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v91, (_QWORD *)v10, a2, 0, a3);
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 24);
  if (a2 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 32) - v16) >> 4))
  {
    v61 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v90, "Invalid network_index.");
    std::runtime_error::runtime_error(v61, &v90);
    v61->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v61[1].__vftable) = -6;
  }
  v17 = *(_OWORD *)(v16 + 16 * a2);
  v89 = v17;
  if (*((_QWORD *)&v17 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = v17;
  if (!(_QWORD)v17)
  {
    v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Null network found.");
    goto LABEL_50;
  }
  if (!a5)
  {
    v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Null image buffer");
    goto LABEL_50;
  }
  if (!*a5)
  {
    v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Null image buffer data");
LABEL_50:
    __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Espresso::net::get_blob_or_global_with_prefix(v17, &v91, &v87);
  v21 = v87;
  if (!v87)
  {
    v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v63, &v90);
    __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a5[2] != *(_DWORD *)(v87 + 8))
  {
    v64 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v84, *(_DWORD *)(v21 + 8));
    v65 = std::string::insert(&v84, 0, "Invalid X-dimension ");
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = std::string::append(&v85, "/");
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, a5[2]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = &v83;
    else
      v69 = (std::string *)v83.__r_.__value_.__r.__words[0];
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    else
      size = v83.__r_.__value_.__l.__size_;
    v71 = std::string::append(&v86, (const std::string::value_type *)v69, size);
    v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v64, &v90);
    v64->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v64[1].__vftable) = -7;
  }
  if (a5[1] != *(_DWORD *)(v87 + 12))
  {
    v73 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&v84, *(_DWORD *)(v21 + 12));
    v74 = std::string::insert(&v84, 0, "Invalid Y-dimension ");
    v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    v76 = std::string::append(&v85, "/");
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, a5[1]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &v83;
    else
      v78 = (std::string *)v83.__r_.__value_.__r.__words[0];
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    else
      v79 = v83.__r_.__value_.__l.__size_;
    v80 = std::string::append(&v86, (const std::string::value_type *)v78, v79);
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v73, &v90);
    v73->__vftable = (std::runtime_error_vtbl *)&off_1E2D59458;
    LODWORD(v73[1].__vftable) = -7;
  }
  *(_OWORD *)&v90.__r_.__value_.__l.__data_ = 0uLL;
  __asm { FMOV            V8.2S, #1.0 }
  if (a7)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = *(unsigned __int8 *)(a7 + 16);
    v31 = *(float *)(a7 + 8);
    v32 = *(float *)(a7 + 12);
    v82 = 0;
    v33 = 1;
    v34 = 0;
    v35 = *(float *)a7;
    v36 = *(_DWORD *)(a7 + 4);
  }
  else if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v20 + 336), &v91))
  {
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
    v37 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v20 + 328), &v91, (uint64_t)&std::piecewise_construct, (__int128 **)&v86);
    v32 = *((float *)v37 + 14);
    v29 = *((_DWORD *)v37 + 15);
    v33 = *((_DWORD *)v37 + 16);
    v30 = *((_DWORD *)v37 + 17);
    v35 = *((float *)v37 + 18);
    v36 = *((_DWORD *)v37 + 19);
    v31 = *((float *)v37 + 20);
    v27 = *((_DWORD *)v37 + 21);
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)(v37 + 88);
    _D8 = (uint64_t *)*((_QWORD *)v37 + 13);
    v34 = (uint64_t *)*((_QWORD *)v37 + 14);
    v82 = (uint64_t *)*((_QWORD *)v37 + 15);
    v28 = *((_DWORD *)v37 + 32);
  }
  else
  {
    v27 = 0;
    v30 = 0;
    v28 = 0;
    v29 = 0;
    v82 = 0;
    v32 = 1.0;
    v33 = 1;
    v34 = 0;
    v35 = 0.0;
    v36 = 0;
    v31 = 0.0;
  }
  if (a6 < 2)
    v38 = 1;
  else
    v38 = a8;
  if (a6 < 2)
    a8 = v33;
  if (v38)
    v39 = v35;
  else
    v39 = v31;
  if (v38)
    v40 = v31;
  else
    v40 = v35;
  v41 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 1064) + 144) + 112), v92[0], v92);
  v42 = std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41 + 5, &v91, (uint64_t)&v91);
  v43 = v42[18];
  *((_DWORD *)v42 + 34) = a6;
  *((float *)v42 + 14) = v32;
  *((_DWORD *)v42 + 15) = v29;
  *((_DWORD *)v42 + 16) = a8;
  *((_DWORD *)v42 + 17) = v30;
  *((float *)v42 + 18) = v39;
  *((_DWORD *)v42 + 19) = v36;
  *((float *)v42 + 20) = v40;
  *((_DWORD *)v42 + 21) = v27;
  *(_OWORD *)(v42 + 11) = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
  v42[13] = _D8;
  v42[14] = v34;
  v42[15] = v82;
  *((_DWORD *)v42 + 32) = v28;
  v44 = (char *)v42[19] - (char *)v43;
  if ((int)((unint64_t)v44 >> 5) <= a4)
  {
    std::vector<vImage_Buffer>::resize((char **)v42 + 18, a4 + 1);
    v43 = v42[18];
    v45 = ((char *)v42[19] - (char *)v43) >> 5;
    if (v45 > (int)((unint64_t)v44 >> 5))
    {
      v46 = (int)(v44 >> 5);
      v47 = v45 - v46;
      v48 = 4 * v46;
      do
      {
        v49 = &v43[v48];
        *(_OWORD *)v49 = 0uLL;
        *((_OWORD *)v49 + 1) = 0uLL;
        v48 += 4;
        --v47;
      }
      while (v47);
    }
  }
  v50 = &v43[4 * a4];
  v51 = *((_OWORD *)a5 + 1);
  *(_OWORD *)v50 = *(_OWORD *)a5;
  *((_OWORD *)v50 + 1) = v51;
  v52 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
}

void sub_190EDD228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a46 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v47 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
      if (*(char *)(v48 - 153) < 0)
        operator delete(*(void **)(v48 - 176));
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v46);
  goto LABEL_14;
}

void Espresso::fill_network_with_images_batch_safe_v2(uint64_t a1, uint64_t *a2, const char ***a3, uint64_t a4, uint64_t a5, __int128 *a6, std::string::size_type a7)
{
  uint64_t v7;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::logic_error *exception;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::string v36;
  int *v37;
  std::__shared_weak_count *v38;

  v7 = *a2;
  if (*(_QWORD *)(*a2 + 40) == *(_QWORD *)(*a2 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[Espresso] uninitialized network");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if ((*(char *)(a7 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a7 + 23))
      goto LABEL_5;
    goto LABEL_4;
  }
  if (!*(_QWORD *)(a7 + 8))
  {
LABEL_4:
    v36.__r_.__value_.__r.__words[0] = 0;
    v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7 + 56, 0, &v36);
    std::string::operator=((std::string *)a7, (const std::string *)v14[3]);
    v7 = *a2;
  }
LABEL_5:
  v36.__r_.__value_.__r.__words[0] = a7;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a7, (__int128 **)&v36);
  v18 = (int *)*((_QWORD *)v15 + 5);
  v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v37 = v18;
  v38 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  if (!v18)
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v34, &v36);
    __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_QWORD *)a1
  {
    v22 = *(std::__shared_weak_count **)(a1 + 8);
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v36.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v22 = 0;
    v21 = 0;
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = 0uLL;
  }
  v25 = *(_DWORD *)(**(_QWORD **)(*a2 + 32) + 8);
  if ((v25 == 20000 || v25 == 1) && v21 == 0)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Espresso: wrong_batch_type");
    v35->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  Espresso::fill_blob_with_images_batch_safe_v2(a1, v18, a3, a4, v16, a6);
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v30 = v38;
  if (v38)
  {
    v31 = (unint64_t *)&v38->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_190EDD680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::fill_blob_with_images_batch_safe_v2(uint64_t a1, int *a2, const char ***a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  float32x4_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int64x2_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const char **v20;
  const char **v21;
  BOOL v22;
  _DWORD *v24;
  const char **v25;
  _DWORD *v26;
  float v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  const char *v37;
  unsigned int v38;
  int v39;
  const char *v40;
  char *v41;
  unsigned int j;
  char v43;
  char v44;
  const void *v45;
  id *v46;
  id *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  int64x2_t *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  __n128 *v56;
  __n128 *v57;
  void *v58;
  id v59;
  std::runtime_error *v60;
  const char **v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  void *v67;
  id *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  id v74;
  id v75;
  id *v76;
  id *v77;
  void *v78;
  uint64_t v79;
  int64x2_t *v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  __n128 *v92;
  _QWORD *v93;
  _QWORD *v94;
  char *v95;
  __int128 v96;
  int64x2_t v97;
  uint64_t v98;
  const char **v99;
  const char *v100;
  const unsigned __int8 *v101;
  const char *v102;
  const char *v103;
  vDSP_Length v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  float v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  float v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  vDSP_Length v130;
  __n128 v131;
  int32x2_t v132;
  int32x2_t v133;
  int32x2_t v134;
  int32x2_t v135;
  int32x2_t v136;
  float32x4_t *v137;
  int64x2_t *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  __n128 *v151;
  _QWORD *v152;
  _QWORD *v153;
  char *v154;
  __int128 v155;
  int64x2_t v156;
  uint64_t v157;
  _OWORD *v158;
  _BOOL4 v159;
  _BOOL4 v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t *v170;
  float32x4_t *v171;
  float32x4_t *v172;
  float32x4_t *v173;
  int v174;
  const float *v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  const float *v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  int v185;
  _OWORD *v186;
  int v187;
  float v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  float *v198;
  float *v199;
  float *v200;
  uint64_t v201;
  _OWORD *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  unsigned int v211;
  float32x4_t v212;
  float *v213;
  int v214;
  float32x4_t v215;
  float32x4_t *v216;
  int k;
  float32x4_t v218;
  float32x4_t v219;
  float *f32;
  unsigned int m;
  float v222;
  int v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t *v227;
  float32x4_t *v228;
  float32x4_t *v229;
  int v230;
  const float *v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  const float *v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int n;
  unint64_t *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unsigned int v247;
  int v248;
  const char *v249;
  char *v250;
  unsigned int i;
  char v252;
  std::logic_error *v253;
  std::logic_error *exception;
  std::runtime_error *v255;
  void (__cdecl *v256)(std::runtime_error *__hidden);
  struct type_info *v257;
  std::runtime_error *v258;
  std::logic_error *v259;
  void *v260;
  std::__shared_weak_count *v261;
  uint64_t v262;
  unint64_t v263;
  void *v264;
  int v265;
  int64x2_t v266;
  int v267;
  int64x2_t v268;
  float32x4_t *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  const char **v274;
  uint64_t v275;
  int *lpsrc;
  int64x2_t *v277;
  const char **v278;
  uint64_t v279;
  id *v280;
  uint64_t v281;
  __n128 v282;
  unint64_t v283;
  void *v284;
  float32_t __B;
  int64x2_t v286;
  _QWORD v287[3];
  int64x2_t v288;
  _QWORD v289[3];
  __n128 v290;
  _OWORD v291[2];
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  std::runtime_error v295;
  __n128 v296;
  __int128 v297;
  uint64_t *v298;
  std::__shared_weak_count *v299;
  int8x16x4_t v300;
  float32x4x4_t v301;
  float32x4x4_t v302;
  int8x16x4_t v303;
  int8x16x4_t v304;
  float32x4x4_t v305;
  float32x4x4_t v306;
  int8x16x4_t v307;

  v6 = (float32x4_t *)a6;
  if (((*(uint64_t (**)(int *, uint64_t, const char ***, uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, a1, a3, a4, a6) & 1) != 0)return;
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[6];
  if (v14 <= 1)
    v14 = 1;
  v15 = v14 * a2[5];
  v263 = (char *)a3[1] - (char *)*a3;
  v271 = v263 >> 5;
  if (*(_QWORD *)a1
  {
    v17 = *(std::__shared_weak_count **)(a1 + 8);
    v298 = (uint64_t *)v16;
    v299 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
  }
  else
  {
    v16 = 0;
    v298 = 0;
    v299 = 0;
  }
  if (v15 < (int)v271)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[Espresso] wrong number of images in image batch");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v20 = *a3;
  v21 = a3[1];
  if (*a3 != v21)
  {
    while (v20[2] == (const char *)(int)v12 && v20[1] == (const char *)(int)v11)
    {
      if (!*v20)
      {
        v253 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v253, "[Espresso] emtpy image");
        goto LABEL_271;
      }
      v20 += 4;
      if (v20 == v21)
        goto LABEL_17;
    }
    v253 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v253, "[Espresso] wrong image size");
LABEL_271:
    v253->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v253, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
LABEL_17:
  v277 = v16;
  v267 = v6->i32[3];
  v265 = v6->i32[2];
  v297 = 0uLL;
  v22 = (***(unsigned int (****)(_QWORD))(*((_QWORD *)a2 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8)) == 50000
     && v6->i32[1] == 0;
  v275 = v11;
  lpsrc = a2;
  if (v22)
  {
    v45 = (const void *)*((_QWORD *)a2 + 9);
    if (v45
    {
      v47 = v46;
      v48 = (std::__shared_weak_count *)*((_QWORD *)a2 + 10);
      v296.n128_u64[0] = (unint64_t)v46;
      v296.n128_u64[1] = (unint64_t)v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
    }
    else
    {
      v48 = 0;
      v47 = 0;
      v296 = 0uLL;
    }
    if (v280)
    {
      if (!v277)
      {
        v255 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v255, "Espresso: wrong_batch_type");
        v255->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
        v256 = Espresso::wrong_batch_type::~wrong_batch_type;
        goto LABEL_276;
      }
      if (v47)
      {
        v264 = (void *)objc_opt_new();
        v58 = (void *)objc_opt_new();
        LOWORD(v291[0]) = 0;
        objc_msgSend(v58, "appendFormat:", CFSTR("%d:%d_"), 0, 0, v58);
        objc_msgSend(v264, "setConstantValue:type:atIndex:", v291, 41, 0);
        LOWORD(v291[0]) = 0;
        objc_msgSend(v58, "appendFormat:", CFSTR("%d:%d_"), 1, 0);
        objc_msgSend(v264, "setConstantValue:type:atIndex:", v291, 41, 1);
        LOWORD(v291[0]) = a4;
        objc_msgSend(v58, "appendFormat:", CFSTR("%d:%d_"), 2, a4);
        objc_msgSend(v264, "setConstantValue:type:atIndex:", v291, 41, 2);
        v261 = v48;
        v59 = objc_retainAutorelease(v58);
        objc_msgSend(v47[20], "kernelForFunction:cacheString:withConstants:", "TARR_vimage2espresso", objc_msgSend(v59, "UTF8String"), v264);
        v284 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v284)
        {
          v60 = std::runtime_error::runtime_error(&v295, "Error creating vimage2espresso: Unsupported number of channels");
          std::runtime_error::~runtime_error(v60);
        }
        v260 = v59;
        v61 = *a3;
        v278 = a3[1];
        if (*a3 != v278)
        {
          v62 = 0;
          v63 = v12 - 1;
          v64 = v11 - 1;
          v65 = v11 + 6;
          if ((int)v12 < 1)
            v63 = v12 + 2;
          if (v64 >= 0)
            v65 = v11 - 1;
          v272 = (v63 >> 2) + 1;
          v273 = (v65 >> 3) + 1;
          v66 = v11 + 2;
          if (v64 >= 0)
            v66 = v11 - 1;
          v270 = (v66 >> 2) + 1;
          v266 = vdupq_n_s64(8uLL);
          v268 = vdupq_n_s64(4uLL);
          do
          {
            v67 = (void *)objc_msgSend(v47[18], "newBufferWithBytes:length:options:", *v61, (_QWORD)v61[3] * (_QWORD)v61[1], 0);
            v68 = v47;
            v69 = v6[2];
            v70 = v6[3];
            v71 = *v6;
            v291[1] = v6[1];
            v292 = v69;
            v72 = v6;
            v73 = v6[4];
            v293 = v70;
            v294 = v73;
            v291[0] = v71;
            v292.i32[2] = v275;
            v292.i32[3] = v61[3];
            v292.i64[0] = __PAIR64__(v12, v62);
            Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v290, (uint64_t)v277);
            v74 = (id)v290.n128_u64[0];
            v75 = v280[21];
            if (v76)
            {
              v77 = v76;
              if ((unint64_t)objc_msgSend(v76[32], "count") >= 2)
              {
                objc_msgSend(v77[32], "objectAtIndexedSubscript:", v62);
                v78 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v78, "texture");
                v79 = objc_claimAutoreleasedReturnValue();

                v292.i32[0] = 0;
                v75 = (id)v79;
              }
            }
            objc_msgSend(v74, "setComputePipelineState:", v284);
            v47 = v68;
            objc_msgSend(v74, "setTexture:atIndex:", v75, 0);
            objc_msgSend(v74, "setBuffer:offset:atIndex:", v67, 0, 0);
            objc_msgSend(v74, "setBytes:length:atIndex:", v291, 80, 1);
            if ((int)v12 > 7)
            {
              v287[0] = ((v12 - 1) >> 3) + 1;
              v287[1] = v273;
              v287[2] = 1;
              v80 = &v286;
              v81 = v287;
              v286 = v266;
            }
            else
            {
              v289[0] = v272;
              v289[1] = v270;
              v289[2] = 1;
              v80 = &v288;
              v81 = v289;
              v288 = v268;
            }
            v80[1].i64[0] = 1;
            objc_msgSend(v74, "dispatchThreadgroups:threadsPerThreadgroup:", v81);
            ++v62;

            Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)&v290);
            v61 += 4;
            v6 = v72;
          }
          while (v61 != v278);
        }

        v82 = v261;
        if (!v261)
          goto LABEL_250;
        v83 = (unint64_t *)&v261->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        goto LABEL_248;
      }
    }
    v255 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v255, "Espresso: wrong_context_type");
    v255->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    v256 = Espresso::wrong_context_type::~wrong_context_type;
LABEL_276:
    __cxa_throw(v255, v257, (void (*)(void *))v256);
  }
  v269 = v6;
  __B = v6->f32[0];
  if (((***(uint64_t (****)(_QWORD))(*((_QWORD *)a2 + 9) + 8))(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8)) & 0xFFFFFFFD) == 5
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v6[1])))) & 1) == 0
    && fabsf(__B + -1.0) <= 0.00001
    && v6->i32[1] == 0)
  {
    if (!v24)
    {
      v258 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v258, "Unexpected tensor type for backend.");
      __cxa_throw(v258, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v25 = *a3;
    if ((char *)a3[1] - (char *)*a3 == 32)
    {
      v26 = v24;
      if (v25[2] == (const char *)(int)v24[2]
        && v25[1] == (const char *)(int)v24[3]
        && v24[4] <= (int)a4
        && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v24 + 32))(v24) == 4
        && !v26[29])
      {
        v27 = *((float *)v26 + 28);
        if ((float)(v27 * ldexpf(1.0, v26[41])) == 1.0
          && v26[40] - (v26[29] != 0) == 8
          && (_DWORD)a4 == 4
          && v26[4] == 3)
        {
          v28 = (char *)Espresso::HXEngine::blob_container::util_lock_pixel_buffer((Espresso::HXEngine::blob_container *)v26, *((CVPixelBufferRef *)v26 + 21), 0);
          v29 = v26[3];
          v30 = v26[2];
          v32 = v31 - (int)v26[4] * (uint64_t)v30;
          v33 = (uint64_t)&v25[3][-4 * (_QWORD)v25[2]];
          if (v30 >= 0)
            v34 = v26[2];
          else
            v34 = v30 + 31;
          v35 = v34 >> 5;
          v36 = v30 - (v34 & 0xFFFFFFE0);
          v37 = *v25;
          if (v267 == v265)
          {
            if (v29)
            {
              v247 = v30 + 31;
              do
              {
                v248 = v35;
                if (v247 >= 0x3F)
                {
                  do
                  {
                    v303 = vld4q_s8(v37);
                    v249 = v37 + 64;
                    v307 = vld4q_s8(v249);
                    v37 = v249 + 64;
                    vst3q_s8(v28, *(int8x16x3_t *)v303.val[0].i8);
                    v250 = v28 + 48;
                    vst3q_s8(v250, *(int8x16x3_t *)v307.val[0].i8);
                    v28 = v250 + 48;
                    --v248;
                  }
                  while (v248);
                }
                for (i = v36; i; --i)
                {
                  v252 = v37[2];
                  *(_WORD *)v28 = *(_WORD *)v37;
                  v28[2] = v252;
                  v28 += 3;
                  v37 += 4;
                }
                v37 += v33;
                v28 += v32;
                --v29;
              }
              while (v29);
            }
          }
          else if (v29)
          {
            v38 = v30 + 31;
            do
            {
              v39 = v35;
              if (v38 >= 0x3F)
              {
                do
                {
                  v300 = vld4q_s8(v37);
                  v40 = v37 + 64;
                  v304 = vld4q_s8(v40);
                  v37 = v40 + 64;
                  v300.val[3] = v300.val[0];
                  v300.val[0] = v300.val[2];
                  v300.val[2] = v300.val[3];
                  v304.val[3] = v304.val[0];
                  v304.val[0] = v304.val[2];
                  v304.val[2] = v304.val[3];
                  vst3q_s8(v28, *(int8x16x3_t *)v300.val[0].i8);
                  v41 = v28 + 48;
                  vst3q_s8(v41, *(int8x16x3_t *)v304.val[0].i8);
                  v28 = v41 + 48;
                  --v39;
                }
                while (v39);
              }
              for (j = v36; j; --j)
              {
                v43 = *v37;
                v44 = v37[1];
                *v28 = v37[2];
                v28[1] = v44;
                v28[2] = v43;
                v28 += 3;
                v37 += 4;
              }
              v37 += v33;
              v28 += v32;
              --v29;
            }
            while (v29);
          }
          Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(*((Espresso::HXEngine::blob_container **)v26 + 21), 0);
          goto LABEL_250;
        }
      }
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(v291, a4, *((_DWORD *)*a3 + 4), *((_DWORD *)*a3 + 2), v271);
  v51 = *((_QWORD *)&v291[0] + 1);
  v283 = *(_QWORD *)&v291[0];
  v297 = v291[0];
  v52 = v277;
  if (v277)
  {
    v296 = (__n128)v291[0];
    if (*((_QWORD *)&v291[0] + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v291[0] + 1) + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = v277[11].u64[0];
    v56 = (__n128 *)v277[10].i64[1];
    if ((unint64_t)v56 >= v55)
    {
      v85 = v277[10].i64[0];
      v86 = ((uint64_t)v56 - v85) >> 4;
      if ((unint64_t)(v86 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v87 = v55 - v85;
      v88 = v87 >> 3;
      if (v87 >> 3 <= (unint64_t)(v86 + 1))
        v88 = v86 + 1;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
        v89 = 0xFFFFFFFFFFFFFFFLL;
      else
        v89 = v88;
      v292.i64[0] = (uint64_t)v277[11].i64;
      v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v89);
      v92 = (__n128 *)&v90[16 * v86];
      *v92 = v296;
      v94 = (_QWORD *)v277[10].i64[0];
      v93 = (_QWORD *)v277[10].i64[1];
      if (v93 == v94)
      {
        v97 = vdupq_n_s64((unint64_t)v93);
        v95 = &v90[16 * v86];
      }
      else
      {
        v95 = &v90[16 * v86];
        do
        {
          v96 = *((_OWORD *)v93 - 1);
          v93 -= 2;
          *((_OWORD *)v95 - 1) = v96;
          v95 -= 16;
          *v93 = 0;
          v93[1] = 0;
        }
        while (v93 != v94);
        v97 = v277[10];
      }
      v57 = v92 + 1;
      v277[10].i64[0] = (uint64_t)v95;
      v277[10].i64[1] = (uint64_t)&v92[1];
      *(int64x2_t *)((char *)v291 + 8) = v97;
      v98 = v277[11].i64[0];
      v277[11].i64[0] = (uint64_t)&v90[16 * v91];
      *((_QWORD *)&v291[1] + 1) = v98;
      *(_QWORD *)&v291[0] = v97.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v291);
      v52 = v277;
    }
    else
    {
      v56->n128_u64[0] = v283;
      v56->n128_u64[1] = v51;
      v57 = v56 + 1;
    }
    v52[10].i64[1] = (uint64_t)v57;
  }
  v262 = a1;
  v99 = *a3;
  v274 = a3[1];
  if (*a3 != v274)
  {
    v279 = 4 * (int)a4;
    v281 = 0;
    do
    {
      v100 = v99[1];
      if (v100)
      {
        v101 = (const unsigned __int8 *)*v99;
        v102 = v99[2];
        v103 = v99[3];
        v104 = (_QWORD)v102 * (int)a4;
        v105 = (_QWORD)v100 * (_QWORD)v102 * v281;
        v106 = v279 * (_QWORD)v102;
        do
        {
          vDSP_vfltu8(v101, 1, (float *)(*(_QWORD *)(v283 + 24) + v105), 1, v104);
          v105 += v106;
          v101 = (const unsigned __int8 *)&v103[(_QWORD)v101];
          --v100;
        }
        while (v100);
      }
      v99 += 4;
      v281 += v279;
    }
    while (v99 != v274);
  }
  v107 = v275 * v12;
  v108 = v275 * v12 * v13;
  v109 = v263 >> 5;
  if (v269->i32[1])
    v110 = (int)v271 < 1;
  else
    v110 = 1;
  if (!v110)
  {
    v111 = 0;
    v112 = *(_QWORD *)(v283 + 24);
    v113 = v12 * a4;
    do
    {
      if ((int)v275 >= 1)
      {
        v114 = 0;
        v115 = 0;
        v116 = v112 + 4 * (int)v12 * (int)a4 * (int)v275 * (int)v111;
        v117 = 0.0;
        do
        {
          if ((int)v12 >= 1)
          {
            v118 = 0;
            v119 = v114;
            do
            {
              v120 = v119;
              v121 = v13;
              if ((int)v13 >= 1)
              {
                do
                {
                  v117 = v117 + *(float *)(v116 + 4 * v120++);
                  --v121;
                }
                while (v121);
              }
              ++v118;
              v119 += a4;
            }
            while (v118 != (_DWORD)v12);
          }
          ++v115;
          v114 += v113;
        }
        while (v115 != (_DWORD)v275);
        v122 = 0;
        v123 = 0;
        v124 = v117 / (float)v108;
        do
        {
          if ((int)v12 >= 1)
          {
            v125 = 0;
            v126 = v122;
            do
            {
              v127 = v126;
              v128 = v13;
              if ((int)v13 >= 1)
              {
                do
                {
                  *(float *)(v116 + 4 * v127) = *(float *)(v116 + 4 * v127) - v124;
                  ++v127;
                  --v128;
                }
                while (v128);
              }
              ++v125;
              v126 += a4;
            }
            while (v125 != (_DWORD)v12);
          }
          ++v123;
          v122 += v113;
        }
        while (v123 != (_DWORD)v275);
      }
      ++v111;
    }
    while (v111 != (v263 >> 5));
  }
  if (fabsf(__B + -1.0) > 0.00001)
  {
    v129 = 0;
    v130 = *(int *)(v283 + 8);
    do
    {
      v130 *= *(int *)(v283 + 12 + v129);
      v129 += 4;
    }
    while (v129 != 12);
    vDSP_vsmul(*(const float **)(v283 + 24), 1, &__B, *(float **)(v283 + 24), 1, v130);
  }
  (*(void (**)(__n128 *__return_ptr, int *))(*(_QWORD *)lpsrc + 56))(&v296, lpsrc);
  v137 = v269;
  v138 = v277;
  if (v277)
  {
    v131 = v296;
    v290 = v296;
    if (v296.n128_u64[1])
    {
      v139 = (unint64_t *)(v296.n128_u64[1] + 8);
      do
        v140 = __ldxr(v139);
      while (__stxr(v140 + 1, v139));
    }
    v141 = v277[11].u64[0];
    v142 = (__n128 *)v277[10].i64[1];
    if ((unint64_t)v142 >= v141)
    {
      v282 = v131;
      v144 = v277[10].i64[0];
      v145 = ((uint64_t)v142 - v144) >> 4;
      if ((unint64_t)(v145 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v146 = v141 - v144;
      v147 = v146 >> 3;
      if (v146 >> 3 <= (unint64_t)(v145 + 1))
        v147 = v145 + 1;
      if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF0)
        v148 = 0xFFFFFFFFFFFFFFFLL;
      else
        v148 = v147;
      v292.i64[0] = (uint64_t)v277[11].i64;
      v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v148);
      v151 = (__n128 *)&v149[16 * v145];
      *v151 = v282;
      v153 = (_QWORD *)v277[10].i64[0];
      v152 = (_QWORD *)v277[10].i64[1];
      if (v152 == v153)
      {
        v156 = vdupq_n_s64((unint64_t)v152);
        v154 = &v149[16 * v145];
      }
      else
      {
        v154 = &v149[16 * v145];
        do
        {
          v155 = *((_OWORD *)v152 - 1);
          v152 -= 2;
          *((_OWORD *)v154 - 1) = v155;
          v154 -= 16;
          *v152 = 0;
          v152[1] = 0;
        }
        while (v152 != v153);
        v156 = v277[10];
      }
      v143 = v151 + 1;
      v277[10].i64[0] = (uint64_t)v154;
      v277[10].i64[1] = (uint64_t)&v151[1];
      *(int64x2_t *)((char *)v291 + 8) = v156;
      v157 = v277[11].i64[0];
      v277[11].i64[0] = (uint64_t)&v149[16 * v150];
      *((_QWORD *)&v291[1] + 1) = v157;
      *(_QWORD *)&v291[0] = v156.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v291);
      v138 = v277;
    }
    else
    {
      *v142 = v131;
      v143 = v142 + 1;
    }
    v138[10].i64[1] = (uint64_t)v143;
    v137 = v269;
  }
  v158 = *(_OWORD **)(v283 + 24);
  switch((_DWORD)a4)
  {
    case 1:
      v132.i32[0] = v137[1].i32[0];
      if (*(float *)v132.i32 == 0.0)
      {
        if ((_DWORD)v271)
        {
          v203 = *(char **)(v296.n128_u64[0] + 24);
          v204 = 4
               * *(_DWORD *)(v296.n128_u64[0] + 12)
               * *(_DWORD *)(v296.n128_u64[0] + 8)
               * *(_DWORD *)(v296.n128_u64[0] + 16);
          do
          {
            --v109;
            memcpy(v203, v158, 4 * v107);
            v203 += v204;
            v158 = (_OWORD *)((char *)v158 + 4 * v107);
          }
          while (v109);
        }
      }
      else
      {
        v209 = v107 + 7;
        if (v107 >= 0)
          v209 = v275 * v12;
        if ((_DWORD)v271)
        {
          v210 = v209 >> 3;
          v211 = v107 - (v209 & 0xFFFFFFF8);
          v212 = (float32x4_t)vdupq_lane_s32(v132, 0);
          v213 = *(float **)(v296.n128_u64[0] + 24);
          v214 = v210 - 1;
          do
          {
            if (v107 < 8)
            {
              f32 = v213;
            }
            else
            {
              v131 = *(__n128 *)v158;
              v215 = *((float32x4_t *)v158 + 1);
              v158 += 2;
              v216 = (float32x4_t *)v213;
              for (k = v214; k; --k)
              {
                v218 = vaddq_f32(v212, (float32x4_t)v131);
                v219 = vaddq_f32(v212, v215);
                v131 = *(__n128 *)v158;
                v215 = *((float32x4_t *)v158 + 1);
                v158 += 2;
                *v216 = v218;
                v216[1] = v219;
                v216 += 2;
              }
              *v216 = vaddq_f32(v212, (float32x4_t)v131);
              v216[1] = vaddq_f32(v212, v215);
              f32 = v216[2].f32;
            }
            for (m = v211; m; --m)
            {
              v222 = *(float *)v158;
              v158 = (_OWORD *)((char *)v158 + 4);
              v131.n128_f32[0] = *(float *)v132.i32 + v222;
              *f32++ = *(float *)v132.i32 + v222;
            }
            v213 += v108;
            --v109;
          }
          while (v109);
        }
      }
      break;
    case 3:
      if ((int)v13 <= 2)
      {
        v259 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v259, "[Espresso] wrong number of input channels in image");
        v259->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v259, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v187 = 2 * v107;
      v188 = v137[1].f32[0];
      if (v267 == v265)
        v189 = 0;
      else
        v189 = 2 * v107;
      if (v267 != v265)
        v187 = 0;
      v190 = v137->i32[3];
      if (v190)
        v131.n128_u32[0] = v137[1].u32[2];
      else
        v131.n128_u32[0] = v137[1].u32[0];
      if (!v190)
        v188 = v137[1].f32[2];
      if ((int)v271 >= 1)
      {
        v191 = 0;
        do
        {
          if ((int)v275 >= 1)
          {
            v192 = 0;
            v193 = v296.n128_u64[0];
            v194 = v189;
            v195 = v107;
            v196 = v187;
            do
            {
              if ((int)v12 >= 1)
              {
                v197 = *(_QWORD *)(v193 + 24);
                v198 = (float *)(v197 + 4 * v196);
                v199 = (float *)(v197 + 4 * v195);
                v200 = (float *)(v197 + 4 * v194);
                v201 = v12;
                do
                {
                  *v200++ = v131.n128_f32[0] + *(float *)v158;
                  *v199++ = *((float *)v158 + 1) + v137[1].f32[1];
                  v202 = (_OWORD *)((char *)v158 + 12);
                  *v198++ = v188 + *((float *)v158 + 2);
                  v158 = (_OWORD *)((char *)v158 + 12);
                  --v201;
                }
                while (v201);
                v158 = v202;
              }
              ++v192;
              v196 += v12;
              v195 += v12;
              v194 += v12;
            }
            while (v192 != v275);
          }
          ++v191;
          v187 += v108;
          v107 += v108;
          v189 += v108;
        }
        while (v191 != (_DWORD)v271);
      }
      break;
    case 4:
      if ((int)v13 <= 1)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("[Espresso] wrong number of input channels while binding XYZA image: it should be at least 2");
      v159 = v267 != v265;
      v133.i32[0] = v137[1].i32[1];
      v131.n128_u32[0] = v137[1].u32[2];
      v160 = v13 != 2;
      if (v159 && v160)
        v161 = 2 * v107;
      else
        v161 = 0;
      if (v159 && v160)
        v162 = 0;
      else
        v162 = 2 * v107;
      v163 = v137->i32[3];
      if (v163)
        v134.i32[0] = v137[1].i32[2];
      else
        v134.i32[0] = v137[1].i32[0];
      if (v163)
        v135.i32[0] = v137[1].i32[0];
      else
        v135.i32[0] = v137[1].i32[2];
      v164 = *(_QWORD *)(v296.n128_u64[0] + 24);
      if (v13 < 4)
      {
        if ((_DWORD)v13 == 2)
        {
          if ((_DWORD)v271)
          {
            v205 = 4 * v161;
            do
            {
              v206 = v205;
              v207 = 4 * v107;
              v208 = v275 * v12;
              if (v267 == v265)
              {
                if (v107)
                {
                  do
                  {
                    *(float *)(v164 + v206) = *(float *)v134.i32 + *(float *)v158;
                    v131.n128_f32[0] = *(float *)v133.i32 + *((float *)v158 + 1);
                    *(_DWORD *)(v164 + v207) = v131.n128_u32[0];
                    ++v158;
                    v207 += 4;
                    v206 += 4;
                    --v208;
                  }
                  while (v208);
                }
              }
              else if (v107)
              {
                do
                {
                  *(float *)(v164 + v207) = *(float *)v133.i32 + *((float *)v158 + 1);
                  v131.n128_f32[0] = *(float *)v135.i32 + *((float *)v158 + 2);
                  *(_DWORD *)(v164 + v206) = v131.n128_u32[0];
                  ++v158;
                  v207 += 4;
                  v206 += 4;
                  --v208;
                }
                while (v208);
              }
              v164 += 4 * v108;
              --v109;
            }
            while (v109);
          }
        }
        else
        {
          if (v107 <= 0)
            v223 = -(-v107 & 7);
          else
            v223 = v107 & 7;
          if ((_DWORD)v271)
          {
            v224 = (float32x4_t)vdupq_lane_s32(v134, 0);
            v225 = (float32x4_t)vdupq_lane_s32(v133, 0);
            v226 = (float32x4_t)vdupq_lane_s32(v135, 0);
            do
            {
              v227 = (float32x4_t *)(v164 + 4 * v161);
              v228 = (float32x4_t *)(v164 + 4 * v107);
              v229 = (float32x4_t *)(v164 + 4 * v162);
              if (v107 >= 8)
              {
                v230 = v107 / 8 - 1;
                *(float32x4x4_t *)v131.n128_u64 = vld4q_f32((const float *)v158);
                v231 = (const float *)(v158 + 4);
                v306 = vld4q_f32(v231);
                v158 = v231 + 16;
                if (v107 / 8 != 1)
                {
                  do
                  {
                    v232 = vaddq_f32(v224, (float32x4_t)v131);
                    v233 = vaddq_f32(v225, v302.val[1]);
                    v234 = vaddq_f32(v226, v302.val[2]);
                    *(float32x4x4_t *)v131.n128_u64 = vld4q_f32((const float *)v158);
                    v235 = (const float *)(v158 + 4);
                    v236 = vaddq_f32(v224, v306.val[0]);
                    v237 = vaddq_f32(v225, v306.val[1]);
                    v238 = vaddq_f32(v226, v306.val[2]);
                    v306 = vld4q_f32(v235);
                    v158 = v235 + 16;
                    *v227 = v232;
                    v227[1] = v236;
                    v227 += 2;
                    *v228 = v233;
                    v228[1] = v237;
                    v228 += 2;
                    *v229 = v234;
                    v229[1] = v238;
                    v229 += 2;
                    --v230;
                  }
                  while (v230);
                }
                *v227 = vaddq_f32(v224, (float32x4_t)v131);
                v227[1] = vaddq_f32(v224, v306.val[0]);
                v227 += 2;
                *v228 = vaddq_f32(v225, v302.val[1]);
                v228[1] = vaddq_f32(v225, v306.val[1]);
                v228 += 2;
                *v229 = vaddq_f32(v226, v302.val[2]);
                v229[1] = vaddq_f32(v226, v306.val[2]);
                v229 += 2;
              }
              for (n = v223; n; --n)
              {
                v227->f32[0] = *(float *)v134.i32 + *(float *)v158;
                v227 = (float32x4_t *)((char *)v227 + 4);
                v228->f32[0] = *(float *)v133.i32 + *((float *)v158 + 1);
                v228 = (float32x4_t *)((char *)v228 + 4);
                v131.n128_f32[0] = *(float *)v135.i32 + *((float *)v158 + 2);
                v229->i32[0] = v131.n128_u32[0];
                v229 = (float32x4_t *)((char *)v229 + 4);
                ++v158;
              }
              v164 += 4 * v108;
              --v109;
            }
            while (v109);
          }
        }
      }
      else
      {
        if (v107 <= 0)
          v165 = -(-v107 & 7);
        else
          v165 = v107 & 7;
        if ((_DWORD)v271)
        {
          v166 = (float32x4_t)vdupq_lane_s32(v134, 0);
          v136.i32[0] = v137[1].i32[3];
          v167 = (float32x4_t)vdupq_lane_s32(v133, 0);
          v168 = (float32x4_t)vdupq_lane_s32(v135, 0);
          v169 = (float32x4_t)vdupq_lane_s32(v136, 0);
          do
          {
            v170 = (float32x4_t *)(v164 + 4 * v161);
            v171 = (float32x4_t *)(v164 + 4 * v107);
            v172 = (float32x4_t *)(v164 + 4 * v162);
            v173 = (float32x4_t *)(v164 + 12 * v107);
            if (v107 >= 8)
            {
              v174 = v107 / 8 - 1;
              *(float32x4x4_t *)v131.n128_u64 = vld4q_f32((const float *)v158);
              v175 = (const float *)(v158 + 4);
              v305 = vld4q_f32(v175);
              v158 = v175 + 16;
              if (v107 / 8 != 1)
              {
                do
                {
                  v176 = vaddq_f32(v166, (float32x4_t)v131);
                  v177 = vaddq_f32(v167, v301.val[1]);
                  v178 = vaddq_f32(v168, v301.val[2]);
                  v179 = vaddq_f32(v169, v301.val[3]);
                  *(float32x4x4_t *)v131.n128_u64 = vld4q_f32((const float *)v158);
                  v180 = (const float *)(v158 + 4);
                  v181 = vaddq_f32(v166, v305.val[0]);
                  v182 = vaddq_f32(v167, v305.val[1]);
                  v183 = vaddq_f32(v168, v305.val[2]);
                  v184 = vaddq_f32(v169, v305.val[3]);
                  v305 = vld4q_f32(v180);
                  v158 = v180 + 16;
                  *v170 = v176;
                  v170[1] = v181;
                  v170 += 2;
                  *v171 = v177;
                  v171[1] = v182;
                  v171 += 2;
                  *v172 = v178;
                  v172[1] = v183;
                  v172 += 2;
                  *v173 = v179;
                  v173[1] = v184;
                  v173 += 2;
                  --v174;
                }
                while (v174);
              }
              *v170 = vaddq_f32(v166, (float32x4_t)v131);
              v170[1] = vaddq_f32(v166, v305.val[0]);
              v170 += 2;
              *v171 = vaddq_f32(v167, v301.val[1]);
              v171[1] = vaddq_f32(v167, v305.val[1]);
              v171 += 2;
              *v172 = vaddq_f32(v168, v301.val[2]);
              v172[1] = vaddq_f32(v168, v305.val[2]);
              v172 += 2;
              *v173 = vaddq_f32(v169, v301.val[3]);
              v173[1] = vaddq_f32(v169, v305.val[3]);
              v173 += 2;
            }
            v185 = v165;
            if (v165)
            {
              do
              {
                v170->f32[0] = *(float *)v134.i32 + *(float *)v158;
                v170 = (float32x4_t *)((char *)v170 + 4);
                v171->f32[0] = *(float *)v133.i32 + *((float *)v158 + 1);
                v171 = (float32x4_t *)((char *)v171 + 4);
                v172->f32[0] = *(float *)v135.i32 + *((float *)v158 + 2);
                v172 = (float32x4_t *)((char *)v172 + 4);
                v186 = v158 + 1;
                v131.n128_f32[0] = *(float *)v136.i32 + *((float *)v158 + 3);
                v173->i32[0] = v131.n128_u32[0];
                v173 = (float32x4_t *)((char *)v173 + 4);
                ++v158;
                --v185;
              }
              while (v185);
              v158 = v186;
            }
            v164 += 4 * v108;
            --v109;
          }
          while (v109);
        }
      }
      break;
  }
  (*(void (**)(int *, uint64_t, __n128 *, __n128))(*(_QWORD *)lpsrc + 48))(lpsrc, v262, &v296, v131);
  v82 = (std::__shared_weak_count *)v296.n128_u64[1];
  if (v296.n128_u64[1])
  {
    v240 = (unint64_t *)(v296.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v240);
    while (__stlxr(v84 - 1, v240));
LABEL_248:
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
LABEL_250:
  v241 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
  if (*((_QWORD *)&v297 + 1))
  {
    v242 = (unint64_t *)(*((_QWORD *)&v297 + 1) + 8);
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v299;
  if (v299)
  {
    v245 = (unint64_t *)&v299->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
}

void sub_190EDEB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;
  uint64_t v44;

  __cxa_free_exception(v43);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 128);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::blob_container::__copy_from_vimage_buffers(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v9;
  uint64_t v11;
  const vImage_Buffer *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  unsigned __int8 *data;
  size_t rowBytes;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v28;
  _BOOL4 v29;
  int v36;
  __IOSurface *v37;
  size_t v38;
  char *v39;
  size_t v40;
  float *k;
  uint64_t v42;
  uint64_t v43;
  __IOSurface *v45;
  size_t v46;
  char *v47;
  int v48;
  __IOSurface *v49;
  size_t v50;
  char *v51;
  size_t v52;
  size_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t m;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v63;
  _DWORD *v64;
  __IOSurface *v66;
  size_t BytesPerRowOfPlane;
  char *BaseAddress;
  size_t v69;
  size_t v70;
  void *v71;
  uint64_t v72;
  __IOSurface *v74;
  size_t v75;
  char *v76;
  size_t v77;
  size_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t ii;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v92;
  _DWORD *v93;
  __IOSurface *v95;
  size_t v96;
  char *v97;
  size_t v98;
  void *i;
  uint64_t v104;
  uint64_t v105;
  size_t v107;
  char *v108;
  size_t v109;
  char *v110;
  uint64_t v111;
  uint64_t kk;
  uint64_t v114;
  _DWORD *v115;
  uint64_t v121;
  uint64_t n;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v127;
  _DWORD *v128;
  __IOSurface *v130;
  size_t v131;
  char *v132;
  void *j;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  __IOSurface *v139;
  size_t v140;
  char *v141;
  size_t v142;
  float *v143;
  uint64_t v144;
  uint64_t nn;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v154;
  _DWORD *v155;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  uint64_t v161;
  _DWORD *v162;
  uint64_t v164;
  _DWORD *v165;
  uint64_t v173;
  uint64_t jj;
  uint64_t v176;
  _DWORD *v177;
  uint64_t v179;
  _DWORD *v180;
  uint64_t v182;
  _DWORD *v183;
  uint64_t v189;
  uint64_t mm;
  uint64_t v192;
  _DWORD *v193;
  uint64_t v195;
  uint64_t v196;
  _DWORD *v197;
  uint64_t v199;
  _DWORD *v200;
  uint64_t v202;
  _DWORD *v203;
  uint64_t v205;
  _DWORD *v206;
  uint64_t v208;
  uint64_t v209;
  _DWORD *v210;
  uint64_t v212;
  _DWORD *v213;
  uint64_t v215;
  _DWORD *v216;
  uint64_t v218;
  _DWORD *v219;
  uint64_t v223;
  uint64_t i1;
  uint64_t v226;
  uint64_t v227;
  _DWORD *v228;
  uint64_t v230;
  _DWORD *v231;
  uint64_t v233;
  uint64_t v234;
  _DWORD *v235;
  uint64_t v237;
  _DWORD *v238;
  std::runtime_error *exception;
  __IOSurface *buffer;
  __IOSurface *buffera;
  int v245;
  int v246;
  _BOOL4 v247;
  uint64_t v251;
  id v253;
  _BYTE src[68];
  int v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float __C;
  vImage_Buffer destB;
  vImage_Buffer destA;
  vImage_Buffer permuteMap;
  vImage_Buffer memptr;
  vImage_Buffer dest;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  uint8_t v272[8];
  void *v273[2];

  v5 = *a3;
  v6 = a3[1];
  _ZF = (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3 == (v6 - *a3) >> 5 && *(_DWORD *)(a1 + 160) == 1;
  if (!_ZF || *(_DWORD *)(a5 + 4) != 0)
    return 0;
  v9 = *(_DWORD *)(a1 + 192);
  if (v9 != 4 && v9 != 1)
    return 0;
  v247 = 0;
  if (fabsf(*(float *)a5 + -1.0) <= 0.00001
    && *(float *)(a5 + 16) == 0.0
    && *(float *)(a5 + 20) == 0.0
    && *(float *)(a5 + 24) == 0.0)
  {
    v247 = *(float *)(a5 + 28) == 0.0;
  }
  if (v6 == v5)
    return 1;
  v11 = 0;
  v245 = *(_DWORD *)(a5 + 8);
  v246 = *(_DWORD *)(a5 + 12);
  while (1)
  {
    v251 = v11;
    v12 = (const vImage_Buffer *)(v5 + 32 * v11);
    v253 = *(id *)(*(_QWORD *)(a1 + 216) + 8 * v11);
    v14 = *(int *)(a1 + 164);
    v13 = *(int *)(a1 + 168);
    v15 = *(_DWORD *)(a1 + 172);
    v16 = *(int *)(a1 + 176);
    data = (unsigned __int8 *)v12->data;
    rowBytes = v12->rowBytes;
    v19 = *(_DWORD *)(a1 + 196);
    if (v19 != 4)
      break;
    if (!v247)
      goto LABEL_278;
    if ((*(_DWORD *)(a1 + 192) - 3) > 1)
    {
      if (a4 == 4 && (_DWORD)v14 == 3)
      {
        v66 = (__IOSurface *)objc_msgSend(v253, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
        IOSurfaceLock(v66, 0, 0);
        BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v66, 0);
        buffer = v66;
        BaseAddress = (char *)IOSurfaceGetBaseAddress(v66);
        v69 = BytesPerRowOfPlane * v15;
        v70 = v69 * v13;
        if (v246 == v245)
        {
          v71 = malloc_type_malloc(v16, 0x6B1B3916uLL);
          if (v15)
          {
            v134 = 2 * v69 * v13;
            do
            {
              *(_QWORD *)src = data;
              *(_QWORD *)&src[8] = 1;
              *(_QWORD *)&src[16] = v16;
              *(_QWORD *)&src[24] = rowBytes;
              dest.data = &BaseAddress[v134];
              dest.height = 1;
              dest.width = v16;
              dest.rowBytes = v16;
              memptr.data = &BaseAddress[v70];
              memptr.height = 1;
              memptr.width = v16;
              memptr.rowBytes = v16;
              permuteMap.data = BaseAddress;
              permuteMap.height = 1;
              permuteMap.width = v16;
              permuteMap.rowBytes = v16;
              destA.data = v71;
              destA.height = 1;
              destA.width = v16;
              destA.rowBytes = v16;
              vImageConvert_ARGB8888toPlanar8((const vImage_Buffer *)src, &permuteMap, &memptr, &dest, &destA, 0);
              data += rowBytes;
              BaseAddress += BytesPerRowOfPlane;
              --v15;
            }
            while (v15);
          }
        }
        else
        {
          v71 = malloc_type_malloc(v16, 0x6B1B3916uLL);
          if (v15)
          {
            v72 = 2 * v69 * v13;
            do
            {
              *(_QWORD *)src = data;
              *(_QWORD *)&src[8] = 1;
              *(_QWORD *)&src[16] = v16;
              *(_QWORD *)&src[24] = rowBytes;
              dest.data = &BaseAddress[v72];
              dest.height = 1;
              dest.width = v16;
              dest.rowBytes = v16;
              memptr.data = &BaseAddress[v70];
              memptr.height = 1;
              memptr.width = v16;
              memptr.rowBytes = v16;
              permuteMap.data = BaseAddress;
              permuteMap.height = 1;
              permuteMap.width = v16;
              permuteMap.rowBytes = v16;
              destA.data = v71;
              destA.height = 1;
              destA.width = v16;
              destA.rowBytes = v16;
              vImageConvert_ARGB8888toPlanar8((const vImage_Buffer *)src, &dest, &memptr, &permuteMap, &destA, 0);
              data += rowBytes;
              BaseAddress += BytesPerRowOfPlane;
              --v15;
            }
            while (v15);
          }
        }
        free(v71);
        IOSurfaceUnlock(buffer, 0, 0);
      }
      else if (a4 == 4 && (_DWORD)v14 == 2)
      {
        v95 = (__IOSurface *)objc_msgSend(v253, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
        IOSurfaceLock(v95, 0, 0);
        v96 = IOSurfaceGetBytesPerRowOfPlane(v95, 0);
        v97 = (char *)IOSurfaceGetBaseAddress(v95);
        v98 = v96 * v15 * v13;
        if (v246 == v245)
        {
          for (i = malloc_type_malloc(v16, 0x6B1B3916uLL); v15; --v15)
          {
            *(_QWORD *)src = data;
            *(_QWORD *)&src[8] = 1;
            *(_QWORD *)&src[16] = v16;
            *(_QWORD *)&src[24] = rowBytes;
            dest.width = v16;
            dest.rowBytes = v16;
            memptr.data = &v97[v98];
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = v97;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = i;
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            dest.data = i;
            dest.height = 1;
            vImageConvert_ARGB8888toPlanar8((const vImage_Buffer *)src, &permuteMap, &memptr, &dest, &destA, 0);
            data += rowBytes;
            v97 += v96;
          }
        }
        else
        {
          for (i = malloc_type_malloc(v16, 0x6B1B3916uLL); v15; --v15)
          {
            *(_QWORD *)src = data;
            *(_QWORD *)&src[8] = 1;
            *(_QWORD *)&src[16] = v16;
            *(_QWORD *)&src[24] = rowBytes;
            dest.width = v16;
            dest.rowBytes = v16;
            memptr.data = &v97[v98];
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = v97;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = i;
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            dest.data = i;
            dest.height = 1;
            vImageConvert_ARGB8888toPlanar8((const vImage_Buffer *)src, &dest, &memptr, &permuteMap, &destA, 0);
            data += rowBytes;
            v97 += v96;
          }
        }
        free(i);
        IOSurfaceUnlock(v95, 0, 0);
      }
      else
      {
        if (a4 != 1 || (_DWORD)v14 != 1)
          goto LABEL_278;
        v130 = (__IOSurface *)objc_msgSend(v253, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
        IOSurfaceLock(v130, 0, 0);
        v131 = IOSurfaceGetBytesPerRowOfPlane(v130, 0);
        v132 = (char *)IOSurfaceGetBaseAddress(v130);
        for (j = malloc_type_malloc(v16, 0x6B1B3916uLL); v15; v132 += v131)
        {
          --v15;
          memcpy(v132, data, v16);
          data += rowBytes;
        }
        free(j);
        IOSurfaceUnlock(v130, 0, 0);
      }
    }
    else
    {
      if (a4 != 4)
        goto LABEL_278;
      v45 = (__IOSurface *)objc_msgSend(v253, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
      IOSurfaceLock(v45, 0, 0);
      v46 = IOSurfaceGetBytesPerRowOfPlane(v45, 0);
      v47 = (char *)IOSurfaceGetBaseAddress(v45);
      *(_QWORD *)src = v47;
      *(_QWORD *)&src[8] = v15;
      *(_QWORD *)&src[16] = v16;
      *(_QWORD *)&src[24] = v46;
      v48 = *(_DWORD *)(a1 + 192);
      if (v48 == 4 && (_DWORD)v14 == 4)
      {
        if (v15 >= 1)
        {
          do
          {
            memcpy(v47, data, 4 * v16);
            v47 += v46;
            data += rowBytes;
            --v15;
          }
          while (v15);
        }
        if (v246 != v245)
        {
          LODWORD(dest.data) = 50331906;
          vImagePermuteChannels_ARGB8888((const vImage_Buffer *)src, (const vImage_Buffer *)src, (const uint8_t *)&dest, 0);
        }
        IOSurfaceUnlock(v45, 0, 0);
      }
      else
      {
        if (v48 != 3 || (_DWORD)v14 != 3 || v246 != v245)
          goto LABEL_278;
        vImageConvert_RGBA8888toRGB888(v12, (const vImage_Buffer *)src, 0);
        IOSurfaceUnlock(v45, 0, 0);
      }
    }
LABEL_275:

    v11 = v251 + 1;
    v5 = *a3;
    if (v251 + 1 >= (unint64_t)((a3[1] - *a3) >> 5))
      return 1;
  }
  if (v19 != 1)
    goto LABEL_278;
  v20 = *(int *)(a1 + 160);
  v21 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  src[0] = *(_BYTE *)(*(_QWORD *)a2 + 40);
  memset(&src[4], 0, 64);
  v255 = 0;
  if (src[0])
  {
    *(_QWORD *)&src[8] = v21;
    *(_QWORD *)&src[16] = v16;
    *(_QWORD *)&src[24] = v15;
    *(_QWORD *)&src[32] = v14;
    *(_QWORD *)&src[40] = v21;
    *(_QWORD *)&src[48] = v20;
    *(_QWORD *)&src[56] = v13;
    *(_DWORD *)&src[4] = 723714904;
    kdebug_trace();
  }
  if (!v253)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  _S0 = *(float *)(a5 + 16);
  _S1 = *(_DWORD *)(a5 + 20);
  __asm { FCVT            H0, S0 }
  _S2 = *(float *)(a5 + 24);
  __asm { FCVT            H2, S2 }
  v28 = *(_DWORD *)(a5 + 12) != 0;
  v29 = v14 != 1;
  if (v28 && v29)
    _S10 = _S0;
  else
    _S10 = _S2;
  if (v28 && v29)
    _S8 = _S2;
  else
    _S8 = _S0;
  __asm { FCVT            H11, S1 }
  _S0 = *(float *)a5;
  __asm { FCVT            H9, S0 }
  v36 = _ZF && (_DWORD)v14 == 3;
  if (*(_DWORD *)(a1 + 192) == 4)
  {
    if (!v36)
      goto LABEL_277;
    v37 = (__IOSurface *)objc_msgSend(v253, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
    IOSurfaceLock(v37, 0, 0);
    v38 = IOSurfaceGetBytesPerRowOfPlane(v37, 0);
    v39 = (char *)IOSurfaceGetBaseAddress(v37);
    v40 = v38 >> 1;
    if (v247)
    {
      if (v246 == v245)
      {
        dest.data = 0;
        malloc_type_posix_memalign(&dest.data, 0x80uLL, 16 * v16, 0x6FDE1D66uLL);
        bzero(dest.data, 16 * v16);
        for (k = (float *)dest.data; v15; --v15)
        {
          vDSP_vfltu8(data + 2, 4, k + 2, 4, v16);
          vDSP_vfltu8(data + 1, 4, (float *)dest.data + 1, 4, v16);
          vDSP_vfltu8(data, 4, (float *)dest.data, 4, v16);
          k = (float *)dest.data;
          if ((_DWORD)v16)
          {
            v135 = 0;
            do
            {
              _S0 = k[v135];
              __asm { FCVT            H0, S0 }
              *(_WORD *)&v39[2 * v135++] = LOWORD(_S0);
            }
            while (4 * v16 != v135);
          }
          data += rowBytes;
          v39 += 2 * v40;
        }
      }
      else
      {
        memptr.data = 0;
        malloc_type_posix_memalign(&memptr.data, 0x80uLL, 16 * v16, 0x6FDE1D66uLL);
        bzero(memptr.data, 16 * v16);
        k = (float *)memptr.data;
        if (v15)
        {
          v42 = 2 * v40;
          do
          {
            vDSP_vfltu8(data + 2, 4, k + 2, 4, v16);
            vDSP_vfltu8(data + 1, 4, (float *)memptr.data + 1, 4, v16);
            vDSP_vfltu8(data, 4, (float *)memptr.data, 4, v16);
            dest.data = memptr.data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = 16 * v16;
            LODWORD(permuteMap.data) = 50331906;
            vImagePermuteChannels_ARGBFFFF(&dest, &dest, (const uint8_t *)&permuteMap, 0);
            k = (float *)memptr.data;
            if ((_DWORD)v16)
            {
              v43 = 0;
              do
              {
                _S0 = k[v43];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v39[2 * v43++] = LOWORD(_S0);
              }
              while (4 * v16 != v43);
            }
            data += rowBytes;
            v39 += v42;
            --v15;
          }
          while (v15);
        }
      }
    }
    else
    {
      __asm
      {
        FCVT            S3, H9
        FCVT            S2, H8
        FCVT            S0, H11
        FCVT            S1, H10
      }
      if (v246 == v245)
      {
        LODWORD(memptr.data) = _S3;
        LODWORD(permuteMap.data) = _S2;
        LODWORD(destA.data) = _S0;
        LODWORD(destB.data) = _S1;
        dest.data = 0;
        malloc_type_posix_memalign(&dest.data, 0x80uLL, 16 * v16, 0x6FDE1D66uLL);
        bzero(dest.data, 16 * v16);
        for (k = (float *)dest.data; v15; --v15)
        {
          vDSP_vfltu8(data + 2, 4, k + 2, 4, v16);
          vDSP_vfltu8(data + 1, 4, (float *)dest.data + 1, 4, v16);
          vDSP_vfltu8(data, 4, (float *)dest.data, 4, v16);
          vDSP_vsmsa((const float *)dest.data + 2, 4, (const float *)&memptr, (const float *)&destB, (float *)dest.data + 2, 4, v16);
          vDSP_vsmsa((const float *)dest.data + 1, 4, (const float *)&memptr, (const float *)&destA, (float *)dest.data + 1, 4, v16);
          vDSP_vsmsa((const float *)dest.data, 4, (const float *)&memptr, (const float *)&permuteMap, (float *)dest.data, 4, v16);
          k = (float *)dest.data;
          if ((_DWORD)v16)
          {
            v137 = 0;
            do
            {
              _S0 = k[v137];
              __asm { FCVT            H0, S0 }
              *(_WORD *)&v39[2 * v137++] = LOWORD(_S0);
            }
            while (4 * v16 != v137);
          }
          data += rowBytes;
          v39 += 2 * v40;
        }
      }
      else
      {
        LODWORD(permuteMap.data) = _S3;
        LODWORD(destA.data) = _S2;
        LODWORD(destB.data) = _S0;
        LODWORD(v273[0]) = _S1;
        memptr.data = 0;
        malloc_type_posix_memalign(&memptr.data, 0x80uLL, 16 * v16, 0x6FDE1D66uLL);
        bzero(memptr.data, 16 * v16);
        k = (float *)memptr.data;
        if (v15)
        {
          v104 = 2 * v40;
          do
          {
            vDSP_vfltu8(data + 2, 4, k + 2, 4, v16);
            vDSP_vfltu8(data + 1, 4, (float *)memptr.data + 1, 4, v16);
            vDSP_vfltu8(data, 4, (float *)memptr.data, 4, v16);
            vDSP_vsmsa((const float *)memptr.data + 2, 4, (const float *)&permuteMap, (const float *)v273, (float *)memptr.data + 2, 4, v16);
            vDSP_vsmsa((const float *)memptr.data + 1, 4, (const float *)&permuteMap, (const float *)&destB, (float *)memptr.data + 1, 4, v16);
            vDSP_vsmsa((const float *)memptr.data, 4, (const float *)&permuteMap, (const float *)&destA, (float *)memptr.data, 4, v16);
            dest.data = memptr.data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = 16 * v16;
            *(_DWORD *)v272 = 50331906;
            vImagePermuteChannels_ARGBFFFF(&dest, &dest, v272, 0);
            k = (float *)memptr.data;
            if ((_DWORD)v16)
            {
              v105 = 0;
              do
              {
                _S0 = k[v105];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v39[2 * v105++] = LOWORD(_S0);
              }
              while (4 * v16 != v105);
            }
            data += rowBytes;
            v39 += v104;
            --v15;
          }
          while (v15);
        }
      }
    }
    goto LABEL_273;
  }
  if (v36)
  {
    v49 = (__IOSurface *)objc_msgSend(v253, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
    IOSurfaceLock(v49, 0, 0);
    v50 = IOSurfaceGetBytesPerRowOfPlane(v49, 0);
    v51 = (char *)IOSurfaceGetBaseAddress(v49);
    v52 = v50 >> 1;
    v53 = (v50 >> 1) * v15 * v13;
    v54 = &v51[2 * v53];
    v55 = &v54[2 * v53];
    if (v247)
    {
      if (v246 == v245)
      {
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x93A031F3uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0x98F0C21CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0x9C9510ADuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0xA1CDE46EuLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v147 = 2 * v52;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            if ((_DWORD)v16)
            {
              v148 = 0;
              v149 = v269;
              do
              {
                _S0 = v149[v148];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v51[2 * v148++] = _S0;
              }
              while (v16 != v148);
              v151 = 0;
              v152 = v268;
              do
              {
                _S0 = v152[v151];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v54[2 * v151++] = _S0;
              }
              while (v16 != v151);
              v154 = 0;
              v155 = v267;
              do
              {
                _S0 = v155[v154];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v55[2 * v154++] = _S0;
              }
              while (v16 != v154);
            }
            data += rowBytes;
            v51 += v147;
            v54 += v147;
            v55 += v147;
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x93A031F3uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0x98F0C21CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0x9C9510ADuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0xA1CDE46EuLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v56 = 2 * v52;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            v57 = v267;
            if ((_DWORD)v16)
            {
              for (m = 0; m != v16; ++m)
              {
                _S0 = v57[m];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v51[2 * m] = _S0;
              }
              v60 = 0;
              v61 = v268;
              do
              {
                _S0 = v61[v60];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v54[2 * v60++] = _S0;
              }
              while (v16 != v60);
              v63 = 0;
              v64 = v269;
              do
              {
                _S0 = v64[v63];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v55[2 * v63++] = _S0;
              }
              while (v16 != v63);
            }
            data += rowBytes;
            v51 += v56;
            v54 += v56;
            v55 += v56;
            --v15;
          }
          while (v15);
          goto LABEL_193;
        }
      }
    }
    else
    {
      __asm
      {
        FCVT            S3, H9
        FCVT            S2, H8
        FCVT            S1, H11
        FCVT            S0, H10
      }
      if (v246 == v245)
      {
        LODWORD(v266) = _S3;
        v259 = _S1;
        __C = _S2;
        v258 = _S0;
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x93A031F3uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0x98F0C21CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0x9C9510ADuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0xA1CDE46EuLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v157 = 2 * v52;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            vDSP_vsmsa((const float *)v269, 1, (const float *)&v266, &__C, (float *)v269, 1, v16);
            vDSP_vsmsa((const float *)v268, 1, (const float *)&v266, &v259, (float *)v268, 1, v16);
            vDSP_vsmsa((const float *)v267, 1, (const float *)&v266, &v258, (float *)v267, 1, v16);
            if ((_DWORD)v16)
            {
              v158 = 0;
              v159 = v269;
              do
              {
                _S0 = v159[v158];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v51[2 * v158++] = _S0;
              }
              while (v16 != v158);
              v161 = 0;
              v162 = v268;
              do
              {
                _S0 = v162[v161];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v54[2 * v161++] = _S0;
              }
              while (v16 != v161);
              v164 = 0;
              v165 = v267;
              do
              {
                _S0 = v165[v164];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v55[2 * v164++] = _S0;
              }
              while (v16 != v164);
            }
            data += rowBytes;
            v51 += v157;
            v54 += v157;
            v55 += v157;
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        LODWORD(v266) = _S3;
        v259 = _S1;
        __C = _S2;
        v258 = _S0;
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x93A031F3uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0x98F0C21CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0x9C9510ADuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0xA1CDE46EuLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v121 = 2 * v52;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            vDSP_vsmsa((const float *)v269, 1, (const float *)&v266, &__C, (float *)v269, 1, v16);
            vDSP_vsmsa((const float *)v268, 1, (const float *)&v266, &v259, (float *)v268, 1, v16);
            vDSP_vsmsa((const float *)v267, 1, (const float *)&v266, &v258, (float *)v267, 1, v16);
            v57 = v267;
            if ((_DWORD)v16)
            {
              for (n = 0; n != v16; ++n)
              {
                _S0 = v57[n];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v51[2 * n] = _S0;
              }
              v124 = 0;
              v125 = v268;
              do
              {
                _S0 = v125[v124];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v54[2 * v124++] = _S0;
              }
              while (v16 != v124);
              v127 = 0;
              v128 = v269;
              do
              {
                _S0 = v128[v127];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v55[2 * v127++] = _S0;
              }
              while (v16 != v127);
            }
            data += rowBytes;
            v51 += v121;
            v54 += v121;
            v55 += v121;
            --v15;
          }
          while (v15);
          goto LABEL_193;
        }
      }
    }
    v57 = v267;
LABEL_193:
    free(v57);
    free(v268);
    free(v269);
    free(v271);
    free(*(void **)v272);
    free(v273[0]);
    free(v270);
    IOSurfaceUnlock(v49, 0, 0);
LABEL_274:
    Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)src);
    goto LABEL_275;
  }
  if (a4 == 4 && (_DWORD)v14 == 4)
  {
    _S12 = *(_DWORD *)(a5 + 28);
    v74 = (__IOSurface *)objc_msgSend(v253, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
    IOSurfaceLock(v74, 0, 0);
    v75 = IOSurfaceGetBytesPerRowOfPlane(v74, 0);
    buffera = v74;
    v76 = (char *)IOSurfaceGetBaseAddress(v74);
    v77 = v75 >> 1;
    v78 = (v75 >> 1) * v15 * v13;
    v79 = &v76[2 * v78];
    v80 = &v79[2 * v78];
    v81 = &v80[2 * v78];
    if (v247)
    {
      if (v246 == v245)
      {
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v266 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x8B44C1F5uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0xACB5154CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0xA793F05BuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0x6F81051uLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v266, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v195 = 2 * v77;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destB.data, 1, (float *)v266, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            if ((_DWORD)v16)
            {
              v196 = 0;
              v197 = v269;
              do
              {
                _S0 = v197[v196];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v76[2 * v196++] = _S0;
              }
              while (v16 != v196);
              v199 = 0;
              v200 = v268;
              do
              {
                _S0 = v200[v199];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v79[2 * v199++] = _S0;
              }
              while (v16 != v199);
              v202 = 0;
              v203 = v267;
              do
              {
                _S0 = v203[v202];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v80[2 * v202++] = _S0;
              }
              while (v16 != v202);
              v205 = 0;
              v206 = v266;
              do
              {
                _S0 = v206[v205];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v81[2 * v205++] = _S0;
              }
              while (v16 != v205);
            }
            data += rowBytes;
            v76 += v195;
            v79 += v195;
            v80 += v195;
            v81 += v195;
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v266 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x8B44C1F5uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0xACB5154CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0xA793F05BuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0x6F81051uLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v266, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v82 = 2 * v77;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destB.data, 1, (float *)v266, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            v83 = v267;
            if ((_DWORD)v16)
            {
              for (ii = 0; ii != v16; ++ii)
              {
                _S0 = v83[ii];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v76[2 * ii] = _S0;
              }
              v86 = 0;
              v87 = v268;
              do
              {
                _S0 = v87[v86];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v79[2 * v86++] = _S0;
              }
              while (v16 != v86);
              v89 = 0;
              v90 = v269;
              do
              {
                _S0 = v90[v89];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v80[2 * v89++] = _S0;
              }
              while (v16 != v89);
              v92 = 0;
              v93 = v266;
              do
              {
                _S0 = v93[v92];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v81[2 * v92++] = _S0;
              }
              while (v16 != v92);
            }
            data += rowBytes;
            v76 += v82;
            v79 += v82;
            v80 += v82;
            v81 += v82;
            --v15;
          }
          while (v15);
          goto LABEL_247;
        }
      }
    }
    else
    {
      __asm
      {
        FCVT            H0, S12
        FCVT            S4, H9
        FCVT            S3, H8
        FCVT            S2, H11
        FCVT            S1, H10
        FCVT            S0, H0
      }
      if (v246 == v245)
      {
        v259 = _S3;
        __C = _S4;
        v257 = _S1;
        v258 = _S2;
        v256 = _S0;
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v266 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x8B44C1F5uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0xACB5154CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0xA793F05BuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0x6F81051uLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v266, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v208 = 2 * v77;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destB.data, 1, (float *)v266, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            vDSP_vsmsa((const float *)v266, 1, &__C, &v256, (float *)v266, 1, v16);
            vDSP_vsmsa((const float *)v269, 1, &__C, &v259, (float *)v269, 1, v16);
            vDSP_vsmsa((const float *)v268, 1, &__C, &v258, (float *)v268, 1, v16);
            vDSP_vsmsa((const float *)v267, 1, &__C, &v257, (float *)v267, 1, v16);
            if ((_DWORD)v16)
            {
              v209 = 0;
              v210 = v269;
              do
              {
                _S0 = v210[v209];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v76[2 * v209++] = _S0;
              }
              while (v16 != v209);
              v212 = 0;
              v213 = v268;
              do
              {
                _S0 = v213[v212];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v79[2 * v212++] = _S0;
              }
              while (v16 != v212);
              v215 = 0;
              v216 = v267;
              do
              {
                _S0 = v216[v215];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v80[2 * v215++] = _S0;
              }
              while (v16 != v215);
              v218 = 0;
              v219 = v266;
              do
              {
                _S0 = v219[v218];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v81[2 * v218++] = _S0;
              }
              while (v16 != v218);
            }
            data += rowBytes;
            v76 += v208;
            v79 += v208;
            v80 += v208;
            v81 += v208;
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        v259 = _S3;
        __C = _S4;
        v257 = _S1;
        v258 = _S2;
        v256 = _S0;
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v266 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x8B44C1F5uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0xACB5154CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0xA793F05BuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0x6F81051uLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v266, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v173 = 2 * v77;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destB.data, 1, (float *)v266, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            vDSP_vsmsa((const float *)v266, 1, &__C, &v256, (float *)v266, 1, v16);
            vDSP_vsmsa((const float *)v269, 1, &__C, &v259, (float *)v269, 1, v16);
            vDSP_vsmsa((const float *)v268, 1, &__C, &v258, (float *)v268, 1, v16);
            vDSP_vsmsa((const float *)v267, 1, &__C, &v257, (float *)v267, 1, v16);
            v83 = v267;
            if ((_DWORD)v16)
            {
              for (jj = 0; jj != v16; ++jj)
              {
                _S0 = v83[jj];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v76[2 * jj] = _S0;
              }
              v176 = 0;
              v177 = v268;
              do
              {
                _S0 = v177[v176];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v79[2 * v176++] = _S0;
              }
              while (v16 != v176);
              v179 = 0;
              v180 = v269;
              do
              {
                _S0 = v180[v179];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v80[2 * v179++] = _S0;
              }
              while (v16 != v179);
              v182 = 0;
              v183 = v266;
              do
              {
                _S0 = v183[v182];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v81[2 * v182++] = _S0;
              }
              while (v16 != v182);
            }
            data += rowBytes;
            v76 += v173;
            v79 += v173;
            v80 += v173;
            v81 += v173;
            --v15;
          }
          while (v15);
          goto LABEL_247;
        }
      }
    }
    v83 = v267;
LABEL_247:
    free(v83);
    free(v268);
    free(v269);
    free(v266);
    free(v271);
    free(*(void **)v272);
    free(v273[0]);
    free(v270);
    IOSurfaceUnlock(buffera, 0, 0);
    goto LABEL_274;
  }
  if (a4 == 4 && (_DWORD)v14 == 2)
  {
    v37 = (__IOSurface *)objc_msgSend(v253, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
    IOSurfaceLock(v37, 0, 0);
    v107 = IOSurfaceGetBytesPerRowOfPlane(v37, 0);
    v108 = (char *)IOSurfaceGetBaseAddress(v37);
    v109 = v107 >> 1;
    v110 = &v108[2 * (v107 >> 1) * v15 * v13];
    if (v247)
    {
      if (v246 == v245)
      {
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x93A031F3uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0x98F0C21CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0x9C9510ADuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0xA1CDE46EuLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v226 = 2 * v109;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            if ((_DWORD)v16)
            {
              v227 = 0;
              v228 = v269;
              do
              {
                _S0 = v228[v227];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v108[2 * v227++] = _S0;
              }
              while (v16 != v227);
              v230 = 0;
              v231 = v268;
              do
              {
                _S0 = v231[v230];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v110[2 * v230++] = _S0;
              }
              while (v16 != v230);
            }
            data += rowBytes;
            v108 += v226;
            v110 += v226;
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x93A031F3uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0x98F0C21CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0x9C9510ADuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0xA1CDE46EuLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v111 = 2 * v109;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            k = (float *)v267;
            if ((_DWORD)v16)
            {
              for (kk = 0; kk != v16; ++kk)
              {
                _S0 = k[kk];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v108[2 * kk] = LOWORD(_S0);
              }
              v114 = 0;
              v115 = v268;
              do
              {
                _S0 = v115[v114];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v110[2 * v114++] = _S0;
              }
              while (v16 != v114);
            }
            data += rowBytes;
            v108 += v111;
            v110 += v111;
            --v15;
          }
          while (v15);
          goto LABEL_273;
        }
      }
    }
    else
    {
      __asm
      {
        FCVT            S3, H9
        FCVT            S2, H8
        FCVT            S1, H11
        FCVT            S0, H10
      }
      if (v246 == v245)
      {
        LODWORD(v266) = _S3;
        v259 = _S1;
        __C = _S2;
        v258 = _S0;
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x93A031F3uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0x98F0C21CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0x9C9510ADuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0xA1CDE46EuLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v233 = 2 * v109;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            vDSP_vsmsa((const float *)v269, 1, (const float *)&v266, &__C, (float *)v269, 1, v16);
            vDSP_vsmsa((const float *)v268, 1, (const float *)&v266, &v259, (float *)v268, 1, v16);
            vDSP_vsmsa((const float *)v267, 1, (const float *)&v266, &v258, (float *)v267, 1, v16);
            if ((_DWORD)v16)
            {
              v234 = 0;
              v235 = v269;
              do
              {
                _S0 = v235[v234];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v108[2 * v234++] = _S0;
              }
              while (v16 != v234);
              v237 = 0;
              v238 = v268;
              do
              {
                _S0 = v238[v237];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v110[2 * v237++] = _S0;
              }
              while (v16 != v237);
            }
            data += rowBytes;
            v108 += v233;
            v110 += v233;
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        LODWORD(v266) = _S3;
        v259 = _S1;
        __C = _S2;
        v258 = _S0;
        *(_QWORD *)v272 = 0;
        v273[0] = 0;
        v270 = 0;
        v271 = 0;
        v268 = 0;
        v269 = 0;
        v267 = 0;
        malloc_type_posix_memalign(&v267, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v271, 0x80uLL, v16, 0x93A031F3uLL);
        malloc_type_posix_memalign((void **)v272, 0x80uLL, v16, 0x98F0C21CuLL);
        malloc_type_posix_memalign(v273, 0x80uLL, v16, 0x9C9510ADuLL);
        malloc_type_posix_memalign(&v270, 0x80uLL, v16, 0xA1CDE46EuLL);
        malloc_type_posix_memalign(&v268, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        malloc_type_posix_memalign(&v269, 0x80uLL, 4 * v16, 0x100004052888210uLL);
        if (v15)
        {
          v189 = 2 * v109;
          do
          {
            dest.data = data;
            dest.height = 1;
            dest.width = v16;
            dest.rowBytes = rowBytes;
            memptr.data = v271;
            memptr.height = 1;
            memptr.width = v16;
            memptr.rowBytes = v16;
            permuteMap.data = *(void **)v272;
            permuteMap.height = 1;
            permuteMap.width = v16;
            permuteMap.rowBytes = v16;
            destA.data = v273[0];
            destA.height = 1;
            destA.width = v16;
            destA.rowBytes = v16;
            destB.data = v270;
            destB.height = 1;
            destB.width = v16;
            destB.rowBytes = v16;
            vImageConvert_ARGB8888toPlanar8(&dest, &destA, &permuteMap, &memptr, &destB, 0);
            vDSP_vfltu8((const unsigned __int8 *)destA.data, 1, (float *)v269, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)permuteMap.data, 1, (float *)v268, 1, v16);
            vDSP_vfltu8((const unsigned __int8 *)memptr.data, 1, (float *)v267, 1, v16);
            vDSP_vsmsa((const float *)v269, 1, (const float *)&v266, &__C, (float *)v269, 1, v16);
            vDSP_vsmsa((const float *)v268, 1, (const float *)&v266, &v259, (float *)v268, 1, v16);
            vDSP_vsmsa((const float *)v267, 1, (const float *)&v266, &v258, (float *)v267, 1, v16);
            k = (float *)v267;
            if ((_DWORD)v16)
            {
              for (mm = 0; mm != v16; ++mm)
              {
                _S0 = k[mm];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v108[2 * mm] = LOWORD(_S0);
              }
              v192 = 0;
              v193 = v268;
              do
              {
                _S0 = v193[v192];
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v110[2 * v192++] = _S0;
              }
              while (v16 != v192);
            }
            data += rowBytes;
            v108 += v189;
            v110 += v189;
            --v15;
          }
          while (v15);
          goto LABEL_273;
        }
      }
    }
    k = (float *)v267;
LABEL_273:
    free(k);
    IOSurfaceUnlock(v37, 0, 0);
    goto LABEL_274;
  }
  if (a4 == 1 && (_DWORD)v14 == 1)
  {
    v139 = (__IOSurface *)objc_msgSend(v253, "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80));
    IOSurfaceLock(v139, 0, 0);
    v140 = IOSurfaceGetBytesPerRowOfPlane(v139, 0);
    v141 = (char *)IOSurfaceGetBaseAddress(v139);
    v142 = v140 >> 1;
    if (v247)
    {
      dest.data = 0;
      malloc_type_posix_memalign(&dest.data, 0x80uLL, 4 * v16, 0x100004052888210uLL);
      v143 = (float *)dest.data;
      if (v15)
      {
        v144 = 2 * v142;
        do
        {
          vDSP_vfltu8(data, 1, v143, 1, v16);
          v143 = (float *)dest.data;
          if ((_DWORD)v16)
          {
            for (nn = 0; nn != v16; ++nn)
            {
              _S0 = v143[nn];
              __asm { FCVT            H0, S0 }
              *(_WORD *)&v141[2 * nn] = LOWORD(_S0);
            }
          }
          data += rowBytes;
          v141 += v144;
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      __asm { FCVT            S0, H9 }
      LODWORD(memptr.data) = _S0;
      __asm { FCVT            S0, H8 }
      LODWORD(permuteMap.data) = _S0;
      dest.data = 0;
      malloc_type_posix_memalign(&dest.data, 0x80uLL, 4 * v16, 0x100004052888210uLL);
      v143 = (float *)dest.data;
      if (v15)
      {
        v223 = 2 * v142;
        do
        {
          vDSP_vfltu8(data, 1, v143, 1, v16);
          vDSP_vsmsa((const float *)dest.data, 1, (const float *)&memptr, (const float *)&permuteMap, (float *)dest.data, 1, v16);
          v143 = (float *)dest.data;
          if ((_DWORD)v16)
          {
            for (i1 = 0; i1 != v16; ++i1)
            {
              _S0 = v143[i1];
              __asm { FCVT            H0, S0 }
              *(_WORD *)&v141[2 * i1] = LOWORD(_S0);
            }
          }
          data += rowBytes;
          v141 += v223;
          --v15;
        }
        while (v15);
      }
    }
    free(v143);
    IOSurfaceUnlock(v139, 0, 0);
    goto LABEL_274;
  }
LABEL_277:
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)src);
LABEL_278:

  return 0;
}

void sub_190EE18C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, ...)
{
  va_list va;

  va_start(va, a12);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);

  _Unwind_Resume(a1);
}

uint64_t e5rt_program_library_get_num_functions(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC91A8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE1A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_program_library_get_function_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC9228;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190EE1B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x418uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB8878;
  v9 = Espresso::ANECompilerEngine::split_nd_kernel::split_nd_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &off_1E2D6A038;
  v8[103] = &unk_1E2D6A198;
  *((_BYTE *)v8 + 1040) = *(_BYTE *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190EE1C48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v8 = operator new(0x168uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB7148;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D61108;
  *((_DWORD *)v8 + 89) = a3;
  v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_190EE1D24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_97@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x1F8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB5F8;
  result.n128_u64[0] = Espresso::dev_op_kernel_cpu::dev_op_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_190EE1D9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (a3 == 1)
  {
    v8 = operator new(0x168uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1E2DB6EA8;
    v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
    v8[3] = &off_1E2D604E8;
    v10 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
    *((_OWORD *)v8 + 20) = v10;
    *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
    *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
    *(_QWORD *)&v7 = v9;
    *((_QWORD *)&v7 + 1) = v8;
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::split_kernel_cpu,std::allocator<Espresso::split_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v11, a1, (__n128 *)a2);
    v7 = v11;
LABEL_5:
    *(_OWORD *)a4 = v7;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

void sub_190EE1E68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::generic_load_constant_kernel_impl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<Espresso::dev_op_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

BOOL Espresso::dev_op_kernel_cpu::is_valid_for_engine(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 280);
  return !v1 || v1 == 100;
}

uint64_t Espresso::DummyMPSEngine::split_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v4[20];
  unsigned int v5;

  if (*(_BYTE *)(a1 + 288))
    return 0;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
    return 1;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v4, *(const Espresso::layer_shape **)a3, 0);
  result = 0;
  if (v5 >= 4)
    return 1;
  return result;
}

void Espresso::SerDes::params_io<Espresso::split_nd_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t i;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  unint64_t *v22;
  std::string v23;
  std::string v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (a3 && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v25 + 160))(v25, __p, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v6 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v12 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v24, "num_splits");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v9 = v26;
    if (!v26)
      goto LABEL_40;
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldaxr(v15);
    while (__stlxr(v11 - 1, v15));
    goto LABEL_38;
  }
  if (a2[1] != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "num_splits");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v25 + 160))(v25, __p, a2 + 1);
    if (v28 < 0)
      operator delete(__p[0]);
    v9 = v26;
    if (!v26)
      goto LABEL_40;
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
LABEL_38:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_40:
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  for (i = 0; i != 128; ++i)
  {
    if (a3)
    {
      std::to_string(&v23, i);
      v17 = std::string::insert(&v23, 0, "begin_");
      v24 = *v17;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
      (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v25 + 160))(v25, __p, &a2[i + 2]);
      if (v28 < 0)
        operator delete(__p[0]);
      v18 = v26;
      if (v26)
      {
        v19 = (unint64_t *)&v26->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        goto LABEL_57;
      }
    }
    else
    {
      std::to_string(&v23, i);
      v21 = std::string::insert(&v23, 0, "begin_");
      v24 = *v21;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v24, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        a2[i + 2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v18 = v26;
      if (v26)
      {
        v22 = (unint64_t *)&v26->__shared_owners_;
        do
          v20 = __ldaxr(v22);
        while (__stlxr(v20 - 1, v22));
LABEL_57:
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_190EE236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;

  v47 = a4;
  v14 = 0x200000000;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "split_nd");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_190EE2550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::invalid_argument_error>(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dev_op_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::dev_op_kernel_cpu::~dev_op_kernel_cpu(Espresso::dev_op_kernel_cpu *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E2D81E50;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  v9 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 440);
  if (*((char *)this + 439) < 0)
    operator delete(*((void **)this + 52));
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel((void **)this);
}

{
  Espresso::dev_op_kernel_cpu::~dev_op_kernel_cpu(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::dev_op_kernel_cpu::dev_op_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  _OWORD *v6;

  v6 = (_OWORD *)(Espresso::base_kernel::base_kernel(a1, a2) + 280);
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)a1 = &off_1E2D81E50;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  Espresso::dev_op_params_t::operator=((uint64_t)v6, a4);
  return a1;
}

void sub_190EE2714(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v5;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 464);
  v5 = *(_QWORD *)(v1 + 456);
  *(_QWORD *)(v1 + 456) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v1 + 439) < 0)
    operator delete(*v3);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::split_nd_kernel::split_nd_kernel(uint64_t a1, _QWORD *a2, int a3, const void *a4)
{
  uint64_t v8;
  char v9;

  v8 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(a1 + 280) = 0x200000000;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  v9 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_BYTE *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_BYTE *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 968) = 1065353216;
  *(_WORD *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 978) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 980) = _D1;
  *(_BYTE *)(a1 + 988) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_BYTE *)(a1 + 1008) = v9;
  *(_QWORD *)a1 = &off_1E2D76480;
  *(_QWORD *)(a1 + 800) = &unk_1E2D765E0;
  *(_DWORD *)(a1 + 1012) = a3;
  memcpy((void *)(v8 + 280), a4, 0x208uLL);
  return a1;
}

uint64_t e5rt_async_event_create(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC62D8;
  v6[1] = a1;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190EE2924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_async_event_create_from_iosurface_shared_event(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC6358;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = v5;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }

  return v7;
}

void sub_190EE2A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_get_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC63D8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE2B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_async_event_get_last_signaled_value(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC6458;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE2BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_async_event_get_active_future_value(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC64D8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE2CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_async_event_set_active_future_value(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC6558;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE2D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_async_event_sync_wait(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC65D8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190EE2E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_async_event_async_notify(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = MEMORY[0x19401D648](a4);
  v9 = operator new(0x28uLL);
  *v9 = &off_1E2DC6658;
  v9[1] = a1;
  v9[2] = a2;
  v9[3] = v7;
  v9[4] = v8;
  v15 = v9;
  v10 = E5RT::ExceptionSafeExecute((uint64_t)v14);
  v11 = v15;
  if (v15 == v14)
  {
    v12 = 4;
    v11 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v12 = 5;
LABEL_5:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

  return v10;
}

void sub_190EE2F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_signal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC66D8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE308C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_async_event_get_iosurface_shared_event(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC6758;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE3160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_async_event_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC67D8;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190EE3234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x19401CD90);
}

void sub_190EE32DC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE32F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC62D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE3330(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC62D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE3358(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  uint64_t result;
  void *__p[2];
  char v18;
  void *__dst;
  __int128 v20;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      v3 = *(const char **)(a1 + 16);
      v4 = strlen(v3);
      if (v4 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v5 = v4;
      if (v4 >= 0x17)
      {
        v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v7 = v4 | 7;
        v8 = v7 + 1;
        p_dst = (void **)operator new(v7 + 1);
        *(_QWORD *)&v20 = v5;
        *((_QWORD *)&v20 + 1) = v8 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v20) = v4;
        p_dst = &__dst;
        if (!v4)
        {
LABEL_11:
          *((_BYTE *)p_dst + v5) = 0;
          E5RT::AsyncEvent::CreateEvent((__int128 *)&__dst, *(_DWORD *)(a1 + 24), __p);
          v9 = __p[0];
          if (__p[0])
          {
            v10 = (_QWORD *)operator new();
            v11 = __p[0];
            *v10 = &unk_1E2DC3158;
            v10[1] = 0;
            v10[2] = 0;
            v10[3] = v11;
            __p[0] = 0;
            v12 = (std::__shared_weak_count *)v2[1];
            *v2 = v9;
            v2[1] = v10;
            if (!v12)
              goto LABEL_19;
          }
          else
          {
            __p[0] = 0;
            v12 = (std::__shared_weak_count *)v2[1];
            *v2 = 0;
            v2[1] = 0;
            if (!v12)
            {
LABEL_19:
              v15 = __p[0];
              __p[0] = 0;
              if (v15)
                (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
              if (SHIBYTE(v20) < 0)
                operator delete(__dst);
              result = 0;
              **(_QWORD **)(a1 + 8) = v2;
              return result;
            }
          }
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          goto LABEL_19;
        }
      }
      memmove(p_dst, v3, v5);
      goto LABEL_11;
    }
    __dst = operator new(0x30uLL);
    v20 = xmmword_191A6F790;
    strcpy((char *)__dst, "Invalid Function Argument: eventName is NULL.");
    v18 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    __dst = operator new(0x30uLL);
    v20 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    v18 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190EE361C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE3704(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_async_event_createE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z23e5rt_async_event_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_async_event_createE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_async_event_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE3770()
{
  return &unk_1E2DC6338;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2D35308, MEMORY[0x1E0DE42D0]);
}

void sub_190EE37CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__shared_ptr_pointer<E5RT::AsyncEvent  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::AsyncEvent  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::AsyncEvent  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A6F8FBLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A6F8FBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A6F8FBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A6F8FBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t sub_190EE38C4(uint64_t a1)
{

  return a1;
}

void sub_190EE38EC(uint64_t a1)
{

  JUMPOUT(0x19401CD90);
}

char *sub_190EE3924(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC6358;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(id *)(a1 + 24);
  return v2;
}

id sub_190EE3970(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)a2 = &off_1E2DC6358;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(id *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

void sub_190EE39AC(uint64_t a1)
{

}

void sub_190EE39B4(id *a1)
{

  operator delete(a1);
}

uint64_t sub_190EE39DC(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  uint64_t result;
  void *__p[2];
  char v18;
  void *__dst;
  __int128 v20;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        v2 = (_QWORD *)operator new();
        *v2 = 0;
        v2[1] = 0;
        v3 = *(const char **)(a1 + 16);
        v4 = strlen(v3);
        if (v4 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v5 = v4;
        if (v4 >= 0x17)
        {
          v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v4 | 7) != 0x17)
            v7 = v4 | 7;
          v8 = v7 + 1;
          p_dst = (void **)operator new(v7 + 1);
          *(_QWORD *)&v20 = v5;
          *((_QWORD *)&v20 + 1) = v8 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v20) = v4;
          p_dst = &__dst;
          if (!v4)
          {
LABEL_12:
            *((_BYTE *)p_dst + v5) = 0;
            E5RT::AsyncEvent::CreateEvent<IOSurfaceSharedEvent * {__strong}>((__int128 *)&__dst, *(void **)(a1 + 24), __p);
            v9 = __p[0];
            if (__p[0])
            {
              v10 = (_QWORD *)operator new();
              v11 = __p[0];
              *v10 = &unk_1E2DC3158;
              v10[1] = 0;
              v10[2] = 0;
              v10[3] = v11;
              __p[0] = 0;
              v12 = (std::__shared_weak_count *)v2[1];
              *v2 = v9;
              v2[1] = v10;
              if (!v12)
                goto LABEL_20;
            }
            else
            {
              __p[0] = 0;
              v12 = (std::__shared_weak_count *)v2[1];
              *v2 = 0;
              v2[1] = 0;
              if (!v12)
              {
LABEL_20:
                v15 = __p[0];
                __p[0] = 0;
                if (v15)
                  (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
                if (SHIBYTE(v20) < 0)
                  operator delete(__dst);
                result = 0;
                **(_QWORD **)(a1 + 8) = v2;
                return result;
              }
            }
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
            goto LABEL_20;
          }
        }
        memmove(p_dst, v3, v5);
        goto LABEL_12;
      }
      __dst = operator new(0x30uLL);
      v20 = xmmword_191A6F7B0;
      strcpy((char *)__dst, "Invalid Function Argument: eventHandle is NULL.");
      v18 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
    else
    {
      __dst = operator new(0x30uLL);
      v20 = xmmword_191A6F790;
      strcpy((char *)__dst, "Invalid Function Argument: eventName is NULL.");
      v18 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
  }
  else
  {
    __dst = operator new(0x30uLL);
    v20 = xmmword_191A6F7A0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    v18 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190EE3D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE3DFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_async_event_create_from_iosurface_shared_eventE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z51e5rt_async_event_create_from_iosurface_shared_eventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_async_event_create_from_iosurface_shared_eventE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_async_event_create_from_iosurface_shared_eventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE3E68()
{
  return &unk_1E2DC63B8;
}

void sub_190EE3E78()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE3E8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC63D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE3EC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC63D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE3EE4(uint64_t a1)
{
  E5RT::AsyncEvent **v1;
  uint64_t EventName;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      EventName = E5RT::AsyncEvent::GetEventName(*v1);
      result = 0;
      if (*(char *)(EventName + 23) < 0)
        EventName = *(_QWORD *)EventName;
      **(_QWORD **)(a1 + 16) = EventName;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7C0;
      strcpy((char *)v7, "Invalid Function Argument: event_name is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EE4070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE40B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_async_event_get_nameE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z25e5rt_async_event_get_nameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_async_event_get_nameE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_async_event_get_nameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE411C()
{
  return &unk_1E2DC6438;
}

void sub_190EE412C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE4140(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC6458;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE4178(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6458;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE4198(uint64_t a1)
{
  E5RT::AsyncEvent **v1;
  uint64_t LastSignaledValue;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      LastSignaledValue = E5RT::AsyncEvent::GetLastSignaledValue(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = LastSignaledValue;
    }
    else
    {
      v7 = operator new(0x38uLL);
      v8 = xmmword_191A6F7D0;
      strcpy((char *)v7, "Invalid Function Argument: signaled_value is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EE431C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE435C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_async_event_get_last_signaled_valueE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_async_event_get_last_signaled_valueE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_async_event_get_last_signaled_valueE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_async_event_get_last_signaled_valueE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE43C8()
{
  return &unk_1E2DC64B8;
}

void sub_190EE43D8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE43EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC64D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE4424(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC64D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE4444(uint64_t a1)
{
  E5RT::AsyncEvent **v1;
  uint64_t ActiveFutureValue;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      ActiveFutureValue = E5RT::AsyncEvent::GetActiveFutureValue(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = ActiveFutureValue;
    }
    else
    {
      v7 = operator new(0x38uLL);
      v8 = xmmword_191A6F7E0;
      strcpy((char *)v7, "Invalid Function Argument: active_future_value is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EE45C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE4608(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_async_event_get_active_future_valueE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_async_event_get_active_future_valueE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_async_event_get_active_future_valueE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_async_event_get_active_future_valueE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE4674()
{
  return &unk_1E2DC6538;
}

void sub_190EE4684()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE4698(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC6558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE46D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE46F0(uint64_t a1)
{
  E5RT::AsyncEvent **v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    E5RT::AsyncEvent::SetActiveFutureValue(*v1);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190EE47C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE47FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_async_event_set_active_future_valueE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z40e5rt_async_event_set_active_future_valueE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_async_event_set_active_future_valueE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_async_event_set_active_future_valueE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE4868()
{
  return &unk_1E2DC65B8;
}

void sub_190EE4878()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE488C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC65D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE48CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC65D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE48F4(uint64_t a1)
{
  E5RT::AsyncEvent **v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    E5RT::AsyncEvent::SyncWait(*v1);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190EE49C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE4A04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z26e5rt_async_event_sync_waitE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z26e5rt_async_event_sync_waitE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z26e5rt_async_event_sync_waitE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z26e5rt_async_event_sync_waitE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE4A70()
{
  return &unk_1E2DC6638;
}

uint64_t sub_190EE4A7C(uint64_t a1)
{

  return a1;
}

void sub_190EE4AAC(uint64_t a1)
{

  JUMPOUT(0x19401CD90);
}

char *sub_190EE4AEC(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DC6658;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(id *)(a1 + 24);
  *((_QWORD *)v2 + 4) = MEMORY[0x19401D648](*(_QWORD *)(a1 + 32));
  return v2;
}

uint64_t sub_190EE4B44(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = &off_1E2DC6658;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(id *)(a1 + 24);
  result = MEMORY[0x19401D648](*(_QWORD *)(a1 + 32));
  *(_QWORD *)(a2 + 32) = result;
  return result;
}

void sub_190EE4B90(uint64_t a1)
{

}

void sub_190EE4BB8(id *a1)
{

  operator delete(a1);
}

uint64_t sub_190EE4BE8(uint64_t a1)
{
  uint64_t *v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::AsyncEvent::AsyncNotify(*v1);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190EE4CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE4CFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_async_event_async_notifyE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z29e5rt_async_event_async_notifyE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_async_event_async_notifyE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_async_event_async_notifyE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE4D68()
{
  return &unk_1E2DC66B8;
}

void sub_190EE4D78()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE4D8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC66D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE4DC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC66D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE4DE4(uint64_t a1)
{
  E5RT::AsyncEvent **v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    E5RT::AsyncEvent::Signal(*v1);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190EE4EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE4EF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_async_event_signalE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z23e5rt_async_event_signalE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_async_event_signalE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_async_event_signalE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE4F5C()
{
  return &unk_1E2DC6738;
}

void sub_190EE4F6C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE4F80(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC6758;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE4FB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6758;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE4FD8(uint64_t a1)
{
  uint64_t *v1;
  id v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(*v1);
      v3 = (id)objc_claimAutoreleasedReturnValue();
      result = 0;
      **(_QWORD **)(a1 + 16) = v3;
    }
    else
    {
      v7 = operator new(0x40uLL);
      v8 = xmmword_191A6F7F0;
      strcpy((char *)v7, "Invalid Function Argument: iosurface_shared_event is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EE5164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE51A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_async_event_get_iosurface_shared_eventE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z43e5rt_async_event_get_iosurface_shared_eventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_async_event_get_iosurface_shared_eventE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_async_event_get_iosurface_shared_eventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE5210()
{
  return &unk_1E2DC67B8;
}

void sub_190EE5220()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EE5234(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC67D8;
  result[1] = v3;
  return result;
}

uint64_t sub_190EE5268(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC67D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EE5284(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
      v1 = *(uint64_t **)(a1 + 8);
    }
    result = 0;
    *v1 = 0;
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190EE53B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE53F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_async_event_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z24e5rt_async_event_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_async_event_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_async_event_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE5460()
{
  return &unk_1E2DC6838;
}

uint64_t e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operations_with_multiple_options(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC6958;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190EE5528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_get_num_inouts(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC6CD8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE55FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_get_inout_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC6D58;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190EE56F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_retain_inout_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC6DD8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190EE57E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_release(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E2DC6E58;
  v5[1] = a1;
  v6 = v5;
  v1 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_190EE58B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_get_opname(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC6ED8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE598C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_bind_dependent_events(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DC6F58;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  v12 = v6;
  v7 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_190EE5A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_bind_completion_event(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC6FD8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE5B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_get_dependent_event_count(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7058;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE5C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_retain_dependent_events(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC70D8;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE5CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_retain_completion_event(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DC7158;
  v6[1] = a1;
  v6[2] = a2;
  v7 = v6;
  v2 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_190EE5DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_reshape_operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DC7258;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190EE5ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_serialize_inference_frame_data(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DC72D8;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  *((_BYTE *)v8 + 32) = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190EE5FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_execution_stream_operation_serialize_inference_frame_data_per_segment(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x28uLL);
  *v8 = &off_1E2DC7358;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  *((_BYTE *)v8 + 32) = a4;
  v14 = v8;
  v9 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_190EE60C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void sub_190EE6128()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE613C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DC6858;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_190EE6184(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DC6858;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE61B4(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  size_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  void *__p[2];
  unint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  unint64_t v33;
  std::string __dst;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 24))
      {
        if (*(_QWORD *)(a1 + 32))
        {
          v2 = (_QWORD *)operator new();
          *v2 = 0;
          v2[1] = 0;
          v3 = *(const char **)(a1 + 16);
          v4 = strlen(v3);
          if (v4 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v5 = v4;
          if (v4 >= 0x17)
          {
            v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v4 | 7) != 0x17)
              v7 = v4 | 7;
            v8 = v7 + 1;
            p_dst = (std::string *)operator new(v7 + 1);
            __dst.__r_.__value_.__l.__size_ = v5;
            __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
            p_dst = &__dst;
            if (!v4)
            {
LABEL_13:
              p_dst->__r_.__value_.__s.__data_[v5] = 0;
              v9 = *(const char **)(a1 + 24);
              v10 = strlen(v9);
              if (v10 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v11 = v10;
              if (v10 >= 0x17)
              {
                v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v10 | 7) != 0x17)
                  v13 = v10 | 7;
                v14 = v13 + 1;
                v12 = (uint64_t *)operator new(v13 + 1);
                v32[1] = v11;
                v33 = v14 | 0x8000000000000000;
                v32[0] = (uint64_t)v12;
              }
              else
              {
                HIBYTE(v33) = v10;
                v12 = v32;
                if (!v10)
                {
LABEL_21:
                  *((_BYTE *)v12 + v11) = 0;
                  v15 = *(const char **)(a1 + 32);
                  v16 = strlen(v15);
                  if (v16 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  v17 = (void *)v16;
                  if (v16 >= 0x17)
                  {
                    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v16 | 7) != 0x17)
                      v19 = v16 | 7;
                    v20 = v19 + 1;
                    v18 = operator new(v19 + 1);
                    __p[1] = v17;
                    v30 = v20 | 0x8000000000000000;
                    __p[0] = v18;
                  }
                  else
                  {
                    HIBYTE(v30) = v16;
                    v18 = __p;
                    if (!v16)
                    {
LABEL_29:
                      *((_BYTE *)v17 + (_QWORD)v18) = 0;
                      E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp(&__dst, (E5RT::SharedResourceManager *)v32, (uint64_t)__p, *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48), &v31);
                      v21 = v31;
                      if (v31)
                      {
                        v22 = (_QWORD *)operator new();
                        v23 = v31;
                        *v22 = &unk_1E2DC32E0;
                        v22[1] = 0;
                        v22[2] = 0;
                        v22[3] = v23;
                        v31 = 0;
                        v24 = (std::__shared_weak_count *)v2[1];
                        *v2 = v21;
                        v2[1] = v22;
                        if (!v24)
                          goto LABEL_37;
                      }
                      else
                      {
                        v31 = 0;
                        v24 = (std::__shared_weak_count *)v2[1];
                        *v2 = 0;
                        v2[1] = 0;
                        if (!v24)
                          goto LABEL_37;
                      }
                      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
                      do
                        v26 = __ldaxr(p_shared_owners);
                      while (__stlxr(v26 - 1, p_shared_owners));
                      if (!v26)
                      {
                        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                        std::__shared_weak_count::__release_weak(v24);
                      }
LABEL_37:
                      v27 = v31;
                      v31 = 0;
                      if (v27)
                        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
                      if (SHIBYTE(v30) < 0)
                      {
                        operator delete(__p[0]);
                        if ((SHIBYTE(v33) & 0x80000000) == 0)
                        {
LABEL_41:
                          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          {
LABEL_42:
                            result = 0;
                            **(_QWORD **)(a1 + 8) = v2;
                            return result;
                          }
LABEL_45:
                          operator delete(__dst.__r_.__value_.__l.__data_);
                          goto LABEL_42;
                        }
                      }
                      else if ((SHIBYTE(v33) & 0x80000000) == 0)
                      {
                        goto LABEL_41;
                      }
                      operator delete((void *)v32[0]);
                      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_42;
                      goto LABEL_45;
                    }
                  }
                  memmove(v18, v15, (size_t)v17);
                  goto LABEL_29;
                }
              }
              memmove(v12, v9, v11);
              goto LABEL_21;
            }
          }
          memmove(p_dst, v3, v5);
          goto LABEL_13;
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A6FF70;
        strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: e5_function_name is NULL.");
        HIBYTE(v33) = 10;
        strcpy((char *)v32, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, v32);
      }
      else
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A6FF80;
        strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: e5_library_path is NULL.");
        HIBYTE(v33) = 10;
        strcpy((char *)v32, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, v32);
      }
    }
    else
    {
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
      *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A6F7D0;
      strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: operation_name is NULL.");
      HIBYTE(v33) = 10;
      strcpy((char *)v32, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, v32);
    }
  }
  else
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A6F7A0;
    strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v33) = 10;
    strcpy((char *)v32, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, v32);
  }
  if (SHIBYTE(v33) < 0)
    operator delete((void *)v32[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return 1;
}

void sub_190EE66B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE67F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z68e5rt_execution_stream_operation_create_precompiled_compute_operationE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z68e5rt_execution_stream_operation_create_precompiled_compute_operationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z68e5rt_execution_stream_operation_create_precompiled_compute_operationE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z68e5rt_execution_stream_operation_create_precompiled_compute_operationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE685C()
{
  return &unk_1E2DC68B8;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A85D58)
    return a1 + 24;
  if (((v3 & 0x8000000191A85D58 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A85D58))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A85D58 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_190EE69DC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE69F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC68D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE6A28(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC68D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE6A48(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  void *v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp(**(E5RT::ExecutionStreamOperation ***)(a1 + 16), &v13);
      v3 = v13;
      if (v13)
      {
        v4 = (_QWORD *)operator new();
        v5 = v13;
        *v4 = &unk_1E2DC32E0;
        v4[1] = 0;
        v4[2] = 0;
        v4[3] = v5;
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = v3;
        v2[1] = v4;
        if (!v6)
          goto LABEL_11;
      }
      else
      {
        v13 = 0;
        v6 = (std::__shared_weak_count *)v2[1];
        *v2 = 0;
        v2[1] = 0;
        if (!v6)
        {
LABEL_11:
          v9 = v13;
          v13 = 0;
          if (v9)
            (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
          result = 0;
          **(_QWORD **)(a1 + 8) = v2;
          return result;
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      goto LABEL_11;
    }
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A6FF90;
    strcpy((char *)v13, "Invalid Function Argument: options is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
  else
  {
    v13 = operator new(0x30uLL);
    v14 = xmmword_191A6F7A0;
    strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13);
    return 1;
  }
}

void sub_190EE6CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE6D4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z81e5rt_execution_stream_operation_create_precompiled_compute_operation_with_optionsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z81e5rt_execution_stream_operation_create_precompiled_compute_operation_with_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z81e5rt_execution_stream_operation_create_precompiled_compute_operation_with_optionsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z81e5rt_execution_stream_operation_create_precompiled_compute_operation_with_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE6DB8()
{
  return &unk_1E2DC6938;
}

void sub_190EE6DC8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE6DDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC6958;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE6E1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6958;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE6E44(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t i;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[2];
  char v30;
  void *v31;
  __int128 v32;

  if (!a1[1])
  {
    v31 = operator new(0x30uLL);
    v32 = xmmword_191A6FF90;
    strcpy((char *)v31, "Invalid Function Argument: handles is NULL.");
    v30 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v31, (uint64_t *)__p);
LABEL_45:
    if (v30 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v32) < 0)
      operator delete(v31);
    return 1;
  }
  if (!a1[2])
  {
    v31 = operator new(0x40uLL);
    v32 = xmmword_191A6FFB0;
    strcpy((char *)v31, "Invalid Function Argument: multiple_create_options is NULL.");
    v30 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v31, (uint64_t *)__p);
    goto LABEL_45;
  }
  if (!a1[3])
  {
    v31 = operator new(0x38uLL);
    v32 = xmmword_191A6FFA0;
    strcpy((char *)v31, "Invalid Function Argument: num_compute_operation is 0");
    v30 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v31, (uint64_t *)__p);
    goto LABEL_45;
  }
  v2 = 0;
  v3 = 0;
  v31 = 0;
  v32 = 0uLL;
  do
  {
    while (1)
    {
      v4 = *(_QWORD *)(a1[2] + 8 * v3);
      if ((unint64_t)v2 < *((_QWORD *)&v32 + 1))
        break;
      v2 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v31, (__int128 *)v4);
      *(_QWORD *)&v32 = v2;
      if (++v3 >= a1[3])
        goto LABEL_11;
    }
    *v2 = *(_QWORD *)v4;
    v5 = *(_QWORD *)(v4 + 8);
    v2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v2 += 2;
    *(_QWORD *)&v32 = v2;
    ++v3;
  }
  while (v3 < a1[3]);
LABEL_11:
  E5RT::ExecutionStreamOperation::CreateResourceSharingPreCompiledComputeOps(__p, &v31);
  if (a1[3])
  {
    for (i = 0; i < a1[3]; ++i)
    {
      v9 = (_QWORD *)operator new();
      *v9 = 0;
      v9[1] = 0;
      v10 = __p[0];
      v11 = *((_QWORD *)__p[0] + i);
      if (v11)
      {
        v12 = (_QWORD *)operator new();
        v13 = v10[i];
        *v12 = &unk_1E2DC32E0;
        v12[1] = 0;
        v12[2] = 0;
        v12[3] = v13;
        v10[i] = 0;
        v14 = (std::__shared_weak_count *)v9[1];
        *v9 = v11;
        v9[1] = v12;
        if (v14)
          goto LABEL_18;
      }
      else
      {
        *((_QWORD *)__p[0] + i) = 0;
        v14 = (std::__shared_weak_count *)v9[1];
        *v9 = 0;
        v9[1] = 0;
        if (v14)
        {
LABEL_18:
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      *(_QWORD *)(a1[1] + 8 * i) = v9;
    }
  }
  v17 = __p[0];
  if (__p[0])
  {
    v18 = __p[1];
    v19 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v21 = *--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      while (v18 != v17);
      v19 = __p[0];
    }
    __p[1] = v17;
    operator delete(v19);
  }
  v22 = (char *)v31;
  if (v31)
  {
    v23 = (char *)v32;
    v24 = v31;
    if ((void *)v32 != v31)
    {
      do
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v23 - 1);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 16;
      }
      while (v23 != v22);
      v24 = v31;
    }
    *(_QWORD *)&v32 = v22;
    operator delete(v24);
  }
  return 0;
}

void sub_190EE7240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE7370(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z108e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operations_with_mul"
                     "tiple_optionsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z108e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operatio"
                                "ns_with_multiple_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z108e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operations_with_multiple_optionsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z108e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operations_with_multiple_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE73DC()
{
  return &unk_1E2DC69B8;
}

_OWORD *std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

void std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void sub_190EE7560()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE7574(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC69D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE75AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC69D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE75CC(uint64_t a1)
{
  E5RT::ExecutionStreamOperationInternal ***v1;
  uint64_t InputPorts;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(InputPorts + 24);
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F790;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EE774C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE778C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_execution_stream_operation_get_num_inputsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z46e5rt_execution_stream_operation_get_num_inputsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_execution_stream_operation_get_num_inputsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_execution_stream_operation_get_num_inputsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE77F8()
{
  return &unk_1E2DC6A38;
}

void sub_190EE7808()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE781C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC6A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE785C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6A58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE7884(uint64_t a1)
{
  return sub_190EE7910(*(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8), 0, *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 24));
}

uint64_t sub_190EE7898(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_execution_stream_operation_get_input_namesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z47e5rt_execution_stream_operation_get_input_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_execution_stream_operation_get_input_namesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_execution_stream_operation_get_input_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE7904()
{
  return &unk_1E2DC6AB8;
}

uint64_t sub_190EE7910(E5RT::ExecutionStreamOperationInternal ***a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t OutputPorts;
  uint64_t *i;
  _QWORD *v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  if (a1)
  {
    v4 = a4;
    if (a4)
    {
      if (a2 == 2)
      {
        OutputPorts = E5RT::ExecutionStreamOperation::GetInOutPorts(*a1);
      }
      else if (a2 == 1)
      {
        OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*a1);
      }
      else
      {
        OutputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
      }
      if (*(_QWORD *)(OutputPorts + 24) == a3)
      {
        for (i = *(uint64_t **)(OutputPorts + 16); i; i = (uint64_t *)*i)
        {
          v9 = i + 2;
          if (*((char *)i + 39) < 0)
            v9 = (_QWORD *)*v9;
          *v4++ = v9;
        }
        return 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v12, "Invalid Function Argument: num_ports does not match number of ports in Execution Stream operation.");
        std::string::basic_string[abi:ne180100]<0>(__p, "PopulatePortNames");
        E5RT::LogErrorMessage((uint64_t *)v12, (uint64_t *)__p);
        if (v11 < 0)
          operator delete(__p[0]);
        if (v13 < 0)
          operator delete(v12[0]);
        return 1;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "Invalid Function Argument: names is NULL.");
      std::string::basic_string[abi:ne180100]<0>(__p, "PopulatePortNames");
      E5RT::LogErrorMessage((uint64_t *)v12, (uint64_t *)__p);
      if (v11 < 0)
        operator delete(__p[0]);
      if (v13 < 0)
        operator delete(v12[0]);
      return 1;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "Invalid Function Argument: handle is NULL.");
    std::string::basic_string[abi:ne180100]<0>(__p, "PopulatePortNames");
    E5RT::LogErrorMessage((uint64_t *)v12, (uint64_t *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
    return 1;
  }
}

void sub_190EE7AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_190EE7B40()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE7B54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC6AD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE7B94(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6AD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE7BBC(uint64_t a1)
{
  return sub_190EE7C48(*(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8), 0, *(const char **)(a1 + 16), *(void ***)(a1 + 24));
}

uint64_t sub_190EE7BD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_execution_stream_operation_retain_input_portE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z49e5rt_execution_stream_operation_retain_input_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_execution_stream_operation_retain_input_portE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_execution_stream_operation_retain_input_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE7C3C()
{
  return &unk_1E2DC6B38;
}

uint64_t sub_190EE7C48(E5RT::ExecutionStreamOperationInternal ***a1, int a2, const char *a3, void **a4)
{
  _QWORD *v8;
  _QWORD *InputPorts;
  size_t v10;
  size_t v11;
  void **p_dst;
  _QWORD *OutputPorts;
  size_t v14;
  size_t v15;
  void **v16;
  _QWORD *v17;
  size_t v18;
  size_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *p_shared_owners;
  uint64_t result;
  void *__p[2];
  char v52;
  void **__dst;
  size_t v54;
  unint64_t v55;

  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        v8 = (_QWORD *)operator new();
        *v8 = 0;
        v8[1] = 0;
        __p[0] = v8;
        if (a2 != 2)
        {
          if (a2 != 1)
          {
            if (a2)
              goto LABEL_57;
            InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
            v10 = strlen(a3);
            if (v10 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v11 = v10;
            if (v10 >= 0x17)
            {
              v41 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v10 | 7) != 0x17)
                v41 = v10 | 7;
              v42 = v41 + 1;
              p_dst = (void **)operator new(v41 + 1);
              v54 = v11;
              v55 = v42 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v55) = v10;
              p_dst = (void **)&__dst;
              if (!v10)
              {
LABEL_47:
                *((_BYTE *)p_dst + v11) = 0;
                v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)&__dst);
                if (!v43)
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                v44 = __p[0];
                v46 = v43[5];
                v45 = v43[6];
                if (v45)
                {
                  v47 = (unint64_t *)(v45 + 8);
                  do
                    v48 = __ldxr(v47);
                  while (__stxr(v48 + 1, v47));
                }
                v29 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 1);
                *(_QWORD *)__p[0] = v46;
                v44[1] = v45;
                if (v29)
                {
                  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
                  do
                    v31 = __ldaxr(p_shared_owners);
                  while (__stlxr(v31 - 1, p_shared_owners));
                  goto LABEL_54;
                }
LABEL_55:
                if (SHIBYTE(v55) < 0)
LABEL_56:
                  operator delete(__dst);
LABEL_57:
                result = 0;
                *a4 = __p[0];
                return result;
              }
            }
            memcpy(p_dst, a3, v11);
            goto LABEL_47;
          }
          OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*a1);
          v14 = strlen(a3);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v15 = v14;
          if (v14 >= 0x17)
          {
            v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v21 = v14 | 7;
            v22 = v21 + 1;
            v16 = (void **)operator new(v21 + 1);
            v54 = v15;
            v55 = v22 | 0x8000000000000000;
            __dst = v16;
          }
          else
          {
            HIBYTE(v55) = v14;
            v16 = (void **)&__dst;
            if (!v14)
              goto LABEL_23;
          }
          memcpy(v16, a3, v15);
LABEL_23:
          *((_BYTE *)v16 + v15) = 0;
          v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (uint64_t)&__dst);
          if (!v23)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v24 = __p[0];
          v26 = v23[5];
          v25 = v23[6];
          if (v25)
          {
            v27 = (unint64_t *)(v25 + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 1);
          *(_QWORD *)__p[0] = v26;
          v24[1] = v25;
          if (!v29)
            goto LABEL_55;
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          goto LABEL_54;
        }
        v17 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInOutPorts(*a1);
        v18 = strlen(a3);
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v19 = v18;
        if (v18 >= 0x17)
        {
          v32 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v32 = v18 | 7;
          v33 = v32 + 1;
          v20 = (void **)operator new(v32 + 1);
          v54 = v19;
          v55 = v33 | 0x8000000000000000;
          __dst = v20;
        }
        else
        {
          HIBYTE(v55) = v18;
          v20 = (void **)&__dst;
          if (!v18)
            goto LABEL_35;
        }
        memcpy(v20, a3, v19);
LABEL_35:
        *((_BYTE *)v20 + v19) = 0;
        v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v17, (uint64_t)&__dst);
        if (!v34)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v35 = __p[0];
        v37 = v34[5];
        v36 = v34[6];
        if (v36)
        {
          v38 = (unint64_t *)(v36 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v29 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 1);
        *(_QWORD *)__p[0] = v37;
        v35[1] = v36;
        if (!v29)
          goto LABEL_55;
        v40 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v40);
        while (__stlxr(v31 - 1, v40));
LABEL_54:
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          if ((SHIBYTE(v55) & 0x80000000) == 0)
            goto LABEL_57;
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid Function Argument: port_handle is NULL.");
      std::string::basic_string[abi:ne180100]<0>(__p, "GetPort");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid Function Argument: port_name is NULL.");
      std::string::basic_string[abi:ne180100]<0>(__p, "GetPort");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid Function Argument: handle is NULL.");
    std::string::basic_string[abi:ne180100]<0>(__p, "GetPort");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v52 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v55) < 0)
    operator delete(__dst);
  return 1;
}

void sub_190EE80AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<e5rt_io_port>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
}

void sub_190EE81F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void sub_190EE8678()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE868C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC6B58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE86C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6B58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE86E4(uint64_t a1)
{
  E5RT::ExecutionStreamOperationInternal ***v1;
  uint64_t OutputPorts;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(OutputPorts + 24);
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F790;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EE8864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE88A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_execution_stream_operation_get_num_outputsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z47e5rt_execution_stream_operation_get_num_outputsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_execution_stream_operation_get_num_outputsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_execution_stream_operation_get_num_outputsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE8910()
{
  return &unk_1E2DC6BB8;
}

void sub_190EE8920()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE8934(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC6BD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE8974(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6BD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE899C(uint64_t a1)
{
  return sub_190EE7910(*(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8), 1, *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 24));
}

uint64_t sub_190EE89B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_execution_stream_operation_get_output_namesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z48e5rt_execution_stream_operation_get_output_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_execution_stream_operation_get_output_namesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_execution_stream_operation_get_output_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE8A1C()
{
  return &unk_1E2DC6C38;
}

void sub_190EE8A2C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE8A40(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC6C58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE8A80(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6C58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE8AA8(uint64_t a1)
{
  return sub_190EE7C48(*(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8), 1, *(const char **)(a1 + 16), *(void ***)(a1 + 24));
}

uint64_t sub_190EE8ABC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z50e5rt_execution_stream_operation_retain_output_portE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z50e5rt_execution_stream_operation_retain_output_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z50e5rt_execution_stream_operation_retain_output_portE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50e5rt_execution_stream_operation_retain_output_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE8B28()
{
  return &unk_1E2DC6CB8;
}

void sub_190EE8B38()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE8B4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC6CD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE8B84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6CD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE8BA4(uint64_t a1)
{
  E5RT::ExecutionStreamOperationInternal ***v1;
  uint64_t v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = E5RT::ExecutionStreamOperation::GetInOutPorts(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(v3 + 24);
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F790;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EE8D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE8D64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_execution_stream_operation_get_num_inoutsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z46e5rt_execution_stream_operation_get_num_inoutsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_execution_stream_operation_get_num_inoutsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_execution_stream_operation_get_num_inoutsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE8DD0()
{
  return &unk_1E2DC6D38;
}

void sub_190EE8DE0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE8DF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC6D58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE8E34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6D58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE8E5C(uint64_t a1)
{
  return sub_190EE7910(*(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8), 2, *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 24));
}

uint64_t sub_190EE8E70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_execution_stream_operation_get_inout_namesE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z47e5rt_execution_stream_operation_get_inout_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_execution_stream_operation_get_inout_namesE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_execution_stream_operation_get_inout_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE8EDC()
{
  return &unk_1E2DC6DB8;
}

void sub_190EE8EEC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE8F00(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC6DD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE8F40(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6DD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE8F68(uint64_t a1)
{
  return sub_190EE7C48(*(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8), 2, *(const char **)(a1 + 16), *(void ***)(a1 + 24));
}

uint64_t sub_190EE8F7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_execution_stream_operation_retain_inout_portE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z49e5rt_execution_stream_operation_retain_inout_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_execution_stream_operation_retain_inout_portE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_execution_stream_operation_retain_inout_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE8FE8()
{
  return &unk_1E2DC6E38;
}

void sub_190EE8FF8()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EE900C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC6E58;
  result[1] = v3;
  return result;
}

uint64_t sub_190EE9040(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC6E58;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EE905C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10;
  __int128 v11;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x19401CD90](v2, 0x20C40A4A59CD2);
      result = 0;
      **(_QWORD **)(a1 + 8) = 0;
    }
    else
    {
      v10 = operator new(0x30uLL);
      v11 = xmmword_191A6FF90;
      strcpy((char *)v10, "Invalid Function Argument: *handle is NULL.");
      v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(v10);
      return 1;
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v11 = xmmword_191A6F7A0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10);
    return 1;
  }
  return result;
}

void sub_190EE922C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE926C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_execution_stream_operation_releaseE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z39e5rt_execution_stream_operation_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_execution_stream_operation_releaseE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_execution_stream_operation_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE92D8()
{
  return &unk_1E2DC6EB8;
}

void sub_190EE92E8()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE92FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC6ED8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE9334(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6ED8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE9354(uint64_t a1)
{
  E5RT::ExecutionStreamOperationInternal ***v1;
  uint64_t OpName;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      OpName = E5RT::ExecutionStreamOperation::GetOpName(*v1);
      result = 0;
      if (*(char *)(OpName + 23) < 0)
        OpName = *(_QWORD *)OpName;
      **(_QWORD **)(a1 + 16) = OpName;
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6F7A0;
      strcpy((char *)v7, "Invalid Function Argument: opname is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EE94E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE9520(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_execution_stream_operation_get_opnameE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z42e5rt_execution_stream_operation_get_opnameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_execution_stream_operation_get_opnameE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_execution_stream_operation_get_opnameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE958C()
{
  return &unk_1E2DC6F38;
}

void sub_190EE959C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE95B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DC6F58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_190EE95F0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6F58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE9618(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20[2];
  char v21;
  void *__p[4];
  int v23;
  _BYTE v24[24];

  v1 = (uint64_t *)a1[1];
  if (v1)
  {
    if (!a1[2])
    {
      memset(__p, 0, sizeof(__p));
      v23 = 1065353216;
LABEL_16:
      E5RT::ExecutionStreamOperation::BindDependentAsyncEvents(*v1);
      v12 = 0;
      v13 = __p[2];
      if (!__p[2])
        goto LABEL_17;
      do
      {
LABEL_27:
        v16 = v13;
        v13 = (_QWORD *)*v13;
        v17 = (std::__shared_weak_count *)v16[3];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v16);
      }
      while (v13);
LABEL_17:
      v14 = __p[0];
      __p[0] = 0;
      if (v14)
        operator delete(v14);
      return v12;
    }
    if (a1[3])
    {
      v3 = 0;
      memset(__p, 0, sizeof(__p));
      v23 = 1065353216;
      while (1)
      {
        v4 = *(uint64_t **)(a1[3] + 8 * v3);
        if (!v4)
          break;
        v6 = *v4;
        v5 = v4[1];
        *(_QWORD *)v24 = v6;
        *(_QWORD *)&v24[8] = v5;
        if (v5)
        {
          v7 = (unint64_t *)(v5 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const>>((uint64_t)__p, (uint64_t *)v24, (uint64_t)v24);
        v9 = *(std::__shared_weak_count **)&v24[8];
        if (*(_QWORD *)&v24[8])
        {
          v10 = (unint64_t *)(*(_QWORD *)&v24[8] + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if ((unint64_t)++v3 >= a1[2])
        {
          v1 = (uint64_t *)a1[1];
          goto LABEL_16;
        }
      }
      *(_QWORD *)v24 = operator new(0x38uLL);
      *(_OWORD *)&v24[8] = xmmword_191A6F7E0;
      strcpy(*(char **)v24, "Invalid Function Argument: dependent_events[i] is NULL.");
      v21 = 10;
      strcpy((char *)v20, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v24, v20);
      if (v21 < 0)
        operator delete((void *)v20[0]);
      if ((v24[23] & 0x80000000) != 0)
        operator delete(*(void **)v24);
      v12 = 1;
      v13 = __p[2];
      if (!__p[2])
        goto LABEL_17;
      goto LABEL_27;
    }
    __p[0] = operator new(0x38uLL);
    *(_OWORD *)&__p[1] = xmmword_191A6FF70;
    strcpy((char *)__p[0], "Invalid Function Argument: dependent_events is NULL.");
    v24[23] = 10;
    strcpy(v24, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, (uint64_t *)v24);
  }
  else
  {
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_191A6F7A0;
    strcpy((char *)__p[0], "Invalid Function Argument: handle is NULL.");
    v24[23] = 10;
    strcpy(v24, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, (uint64_t *)v24);
  }
  if ((v24[23] & 0x80000000) != 0)
    operator delete(*(void **)v24);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_190EE9940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EE9A1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_execution_stream_operation_bind_dependent_eventsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z53e5rt_execution_stream_operation_bind_dependent_eventsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_execution_stream_operation_bind_dependent_eventsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_execution_stream_operation_bind_dependent_eventsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EE9A88()
{
  return &unk_1E2DC6FB8;
}

_QWORD *std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v10 && (float)(v18 * (float)v10) >= v17)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      *v13 = *v20;
LABEL_61:
      *v20 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v25)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v25)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v25 < 3uLL || (v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < *(_QWORD *)&v25)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v20)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v20)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v20)
        goto LABEL_26;
    }
  }
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v19 + 8 * v3) = v16;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_190EE9DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_190EE9E78()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EE9E8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC6FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EE9EC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC6FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EE9EE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v12;
  void *__p[2];
  char v14;
  void *v15;
  __int128 v16;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *v1;
    if (v2)
    {
      v5 = *(void **)v2;
      v4 = *(_QWORD *)(v2 + 8);
      v15 = v5;
      *(_QWORD *)&v16 = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      E5RT::ExecutionStreamOperation::BindCompletionAsyncEvent(v3, (__int128 *)&v15);
      v8 = (std::__shared_weak_count *)v16;
      if (!(_QWORD)v16)
        return 0;
      v9 = (unint64_t *)(v16 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
    }
    else
    {
      v15 = 0;
      *(_QWORD *)&v16 = 0;
      E5RT::ExecutionStreamOperation::BindCompletionAsyncEvent(v3, (__int128 *)&v15);
      v8 = (std::__shared_weak_count *)v16;
      if (!(_QWORD)v16)
        return 0;
      v12 = (unint64_t *)(v16 + 8);
      do
        v10 = __ldaxr(v12);
      while (__stlxr(v10 - 1, v12));
    }
    if (v10)
      return 0;
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    return 0;
  }
  else
  {
    v15 = operator new(0x30uLL);
    v16 = xmmword_191A6F7A0;
    strcpy((char *)v15, "Invalid Function Argument: handle is NULL.");
    v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
    if (v14 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15);
    return 1;
  }
}

void sub_190EEA054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEA0E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_execution_stream_operation_bind_completion_eventE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z53e5rt_execution_stream_operation_bind_completion_eventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_execution_stream_operation_bind_completion_eventE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_execution_stream_operation_bind_completion_eventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEA154()
{
  return &unk_1E2DC7038;
}

void sub_190EEA164()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEA178(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EEA1B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEA1D0(uint64_t a1)
{
  E5RT::ExecutionStreamOperationInternal ***v1;
  uint64_t DependentAsyncEvents;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7;
  __int128 v8;

  v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      DependentAsyncEvents = E5RT::ExecutionStreamOperation::GetDependentAsyncEvents(*v1);
      result = 0;
      **(_QWORD **)(a1 + 16) = *(_QWORD *)(DependentAsyncEvents + 24);
    }
    else
    {
      v7 = operator new(0x30uLL);
      v8 = xmmword_191A6FFC0;
      strcpy((char *)v7, "Invalid Function Argument: count is NULL.");
      v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7);
      return 1;
    }
  }
  else
  {
    v7 = operator new(0x30uLL);
    v8 = xmmword_191A6F7A0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v8) < 0)
      operator delete(v7);
    return 1;
  }
  return result;
}

void sub_190EEA350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEA390(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z57e5rt_execution_stream_operation_get_dependent_event_countE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z57e5rt_execution_stream_operation_get_dependent_event_countE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z57e5rt_execution_stream_operation_get_dependent_event_countE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z57e5rt_execution_stream_operation_get_dependent_event_countE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEA3FC()
{
  return &unk_1E2DC70B8;
}

void sub_190EEA40C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEA420(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC70D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EEA458(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC70D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEA478(uint64_t a1)
{
  E5RT::ExecutionStreamOperationInternal ***v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  char v16;
  void *v17;
  __int128 v18;

  v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = *(_QWORD **)(E5RT::ExecutionStreamOperation::GetDependentAsyncEvents(*v1) + 16);
      if (v3)
      {
        v4 = 0;
        do
        {
          v5 = (_QWORD *)operator new();
          v6 = v5;
          *v5 = 0;
          v5[1] = 0;
          v7 = v3[2];
          v8 = v3[3];
          if (v8)
          {
            v9 = (unint64_t *)(v8 + 8);
            do
              v10 = __ldxr(v9);
            while (__stxr(v10 + 1, v9));
            v11 = (std::__shared_weak_count *)v5[1];
            *v5 = v7;
            v5[1] = v8;
            if (v11)
            {
              p_shared_owners = (unint64_t *)&v11->__shared_owners_;
              do
                v13 = __ldaxr(p_shared_owners);
              while (__stlxr(v13 - 1, p_shared_owners));
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
          }
          else
          {
            *v5 = v7;
            v5[1] = 0;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4++) = v6;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      return 0;
    }
    v17 = operator new(0x38uLL);
    v18 = xmmword_191A6FF70;
    strcpy((char *)v17, "Invalid Function Argument: dependent_events is NULL.");
    v16 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v17, (uint64_t *)__p);
  }
  else
  {
    v17 = operator new(0x30uLL);
    v18 = xmmword_191A6F7A0;
    strcpy((char *)v17, "Invalid Function Argument: handle is NULL.");
    v16 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v17, (uint64_t *)__p);
  }
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17);
  return 1;
}

void sub_190EEA680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_190EEA6C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z55e5rt_execution_stream_operation_retain_dependent_eventsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z55e5rt_execution_stream_operation_retain_dependent_eventsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z55e5rt_execution_stream_operation_retain_dependent_eventsE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z55e5rt_execution_stream_operation_retain_dependent_eventsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEA72C()
{
  return &unk_1E2DC7138;
}

void sub_190EEA73C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEA750(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DC7158;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_190EEA788(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7158;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEA7A8(uint64_t a1)
{
  _QWORD *v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t result;
  void *__p[2];
  char v12;
  _BYTE v13[24];

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = (_QWORD *)operator new();
      *v2 = 0;
      v2[1] = 0;
      E5RT::ExecutionStreamOperation::GetCompletionAsyncEvent(**(E5RT::ExecutionStreamOperation ***)(a1 + 8), v13);
      v3 = *(_OWORD *)v13;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)&v13[8] = 0;
      v4 = (std::__shared_weak_count *)v2[1];
      *(_OWORD *)v2 = v3;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = *(std::__shared_weak_count **)&v13[8];
      if (*(_QWORD *)&v13[8])
      {
        v8 = (unint64_t *)(*(_QWORD *)&v13[8] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      result = 0;
      **(_QWORD **)(a1 + 16) = v2;
    }
    else
    {
      *(_QWORD *)v13 = operator new(0x38uLL);
      *(_OWORD *)&v13[8] = xmmword_191A6FF70;
      strcpy(*(char **)v13, "Invalid Function Argument: completion_event is NULL.");
      v12 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v13, (uint64_t *)__p);
      if (v12 < 0)
        operator delete(__p[0]);
      if ((v13[23] & 0x80000000) != 0)
        operator delete(*(void **)v13);
      return 1;
    }
  }
  else
  {
    *(_QWORD *)v13 = operator new(0x30uLL);
    *(_OWORD *)&v13[8] = xmmword_191A6F7A0;
    strcpy(*(char **)v13, "Invalid Function Argument: handle is NULL.");
    v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v13, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if ((v13[23] & 0x80000000) != 0)
      operator delete(*(void **)v13);
    return 1;
  }
  return result;
}

void sub_190EEA9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEAA40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z55e5rt_execution_stream_operation_retain_completion_eventE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z55e5rt_execution_stream_operation_retain_completion_eventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z55e5rt_execution_stream_operation_retain_completion_eventE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z55e5rt_execution_stream_operation_retain_completion_eventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEAAAC()
{
  return &unk_1E2DC71B8;
}

void sub_190EEAABC()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_190EEAAD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DC71D8;
  result[1] = v3;
  return result;
}

uint64_t sub_190EEAB04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DC71D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_190EEAB20(uint64_t a1)
{
  E5RT::ExecutionStreamOperation **v1;
  void *__p[2];
  char v4;
  void *v5;
  __int128 v6;

  v1 = *(E5RT::ExecutionStreamOperation ***)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamOperation::PrepareOpForEncode(*v1);
    return 0;
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = xmmword_191A6F7A0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6) < 0)
      operator delete(v5);
    return 1;
  }
}

void sub_190EEABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_190EEAC28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_execution_stream_operation_prepare_op_for_encodeE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z53e5rt_execution_stream_operation_prepare_op_for_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_execution_stream_operation_prepare_op_for_encodeE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_execution_stream_operation_prepare_op_for_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_190EEAC94()
{
  return &unk_1E2DC7238;
}

void sub_190EEACA4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_190EEACB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DC7258;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190EEACF8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DC7258;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190EEAD20(_QWORD *a1)
{
  const void **v1;
  unint64_t v3;
  uint64_t *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  void **v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v27[4];
  int v28;
  __int128 __dst;
  unint64_t v30;
  __int128 *v31;

  v1 = (const void **)a1[1];
  if (!v1)
  {
    v27[0] = operator new(0x30uLL);
    *(_OWORD *)&v27[1] = xmmword_191A6F7A0;
    strcpy((char *)v27[0], "Invalid Function Argument: handle is NULL.");
    HIBYTE(v30) = 10;
    strcpy((char *)&__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v27, (uint64_t *)&__dst);
LABEL_42:
    if (SHIBYTE(v30) < 0)
      operator delete((void *)__dst);
    if (SHIBYTE(v27[2]) < 0)
      operator delete(v27[0]);
    return 1;
  }
  if (!a1[2])
  {
    v27[0] = operator new(0x38uLL);
    *(_OWORD *)&v27[1] = xmmword_191A6FFA0;
    strcpy((char *)v27[0], "Invalid Function Argument: input_inout_names is NULL.");
    HIBYTE(v30) = 10;
    strcpy((char *)&__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v27, (uint64_t *)&__dst);
    goto LABEL_42;
  }
  if (!a1[3])
  {
    v27[0] = operator new(0x40uLL);
    *(_OWORD *)&v27[1] = xmmword_191A6FFB0;
    strcpy((char *)v27[0], "Invalid Function Argument: input_inout_descriptors is NULL.");
    HIBYTE(v30) = 10;
    strcpy((char *)&__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v27, (uint64_t *)&__dst);
    goto LABEL_42;
  }
  memset(v27, 0, sizeof(v27));
  v28 = 1065353216;
  if (!a1[4])
    goto LABEL_26;
  v3 = 0;
  do
  {
    while (1)
    {
      v4 = *(uint64_t **)(a1[3] + 8 * v3);
      v5 = *(const char **)(a1[2] + 8 * v3);
      v6 = strlen(v5);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v7 = v6;
      if (v6 >= 0x17)
      {
        v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v9 = v6 | 7;
        v10 = v9 + 1;
        p_dst = (__int128 *)operator new(v9 + 1);
        *((_QWORD *)&__dst + 1) = v7;
        v30 = v10 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
LABEL_15:
        memmove(p_dst, v5, v7);
        goto LABEL_16;
      }
      HIBYTE(v30) = v6;
      p_dst = &__dst;
      if (v6)
        goto LABEL_15;
LABEL_16:
      *((_BYTE *)p_dst + v7) = 0;
      v31 = &__dst;
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v27, (uint64_t)&__dst, (uint64_t)&std::piecewise_construct, &v31);
      v13 = *v4;
      v12 = v4[1];
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
      *((_QWORD *)v11 + 5) = v13;
      *((_QWORD *)v11 + 6) = v12;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (SHIBYTE(v30) < 0)
        break;
      if (++v3 >= a1[4])
        goto LABEL_25;
    }
    operator delete((void *)__dst);
    ++v3;
  }
  while (v3 < a1[4]);
LABEL_25:
  v1 = (const void **)a1[1];
LABEL_26:
  (*(void (**)(void *, void **))(*(_QWORD *)v19 + 120))(v19, v27);
  v20 = (void **)v27[2];
  if (v27[2])
  {
    do
    {
      while (1)
      {
        v21 = (void **)*v20;
        v22 = (std::__shared_weak_count *)v20[6];
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (*((char *)v20 + 39) < 0)
          break;
        operator delete(v20);
        v20 = v21;
        if (!v21)
          goto LABEL_36;
      }
      operator delete(v20[2]);
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
LABEL_36:
  v25 = v27[0];
  v27[0] = 0;
  if (v25)
    operator delete(v25);
  return 0;
}

