_QWORD *sub_1910384B0(_QWORD *a1)
{
  void **v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void **v7;
  void **v8;
  void *v9;
  void *v10;
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  E5RT_FB::ProgramT *v17;

  *a1 = &off_1E2DD03E0;
  v2 = (void **)a1[13];
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[11];
  a1[11] = 0;
  if (v3)
    operator delete(v3);
  sub_1910383EC(a1 + 8);
  v4 = (_QWORD *)a1[5];
  if (v4)
  {
    v5 = (_QWORD *)a1[6];
    v6 = (void *)a1[5];
    if (v5 != v4)
    {
      do
      {
        v8 = (void **)*(v5 - 3);
        if (v8)
        {
          do
          {
            v11 = (void **)*v8;
            if (*((char *)v8 + 39) < 0)
              operator delete(v8[2]);
            operator delete(v8);
            v8 = v11;
          }
          while (v11);
        }
        v10 = (void *)*(v5 - 5);
        v5 -= 5;
        v9 = v10;
        *v5 = 0;
        if (v10)
          operator delete(v9);
      }
      while (v5 != v4);
      v6 = (void *)a1[5];
    }
    a1[6] = v4;
    operator delete(v6);
  }
  v12 = (_QWORD *)a1[2];
  if (v12)
  {
    v13 = (_QWORD *)a1[3];
    v14 = (void *)a1[2];
    if (v13 != v12)
    {
      do
      {
        v16 = *--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
        {
          if (*(char *)(v15 + 23) < 0)
            operator delete(*(void **)v15);
          MEMORY[0x19401CD90](v15, 0x1012C4004DB1A28);
        }
      }
      while (v13 != v12);
      v14 = (void *)a1[2];
    }
    a1[3] = v12;
    operator delete(v14);
  }
  v17 = (E5RT_FB::ProgramT *)a1[1];
  a1[1] = 0;
  if (v17)
  {
    E5RT_FB::ProgramT::~ProgramT(v17);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void sub_191038634(_QWORD *a1)
{
  sub_1910384B0(a1);
  JUMPOUT(0x19401CD90);
}

void sub_191038658(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  const void *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string::size_type v18;
  void *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 **v45;
  uint64_t ProgramHeader;
  unsigned int v47;
  unsigned __int16 *v48;
  int Symtab;
  uint64_t v50;
  int v51;
  uint64_t Program;
  uint64_t v53;
  std::string *v54;
  std::__fs::filesystem::path::__string_view v55;
  std::__fs::filesystem::path *v56;
  std::basic_string_view<_CharT, _Traits>::size_type v57;
  std::basic_string_view<_CharT, _Traits>::size_type v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *exception;
  void *v63;
  void *v64;
  const char *v65;
  int v66;
  const char *v67;
  const char *v68;
  char v69[8];
  _QWORD v70[3];
  std::__fs::filesystem::path v71;
  std::__fs::filesystem::path v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  std::__fs::filesystem::path __dst[5];
  uint64_t v84;
  _QWORD v85[20];

  v85[19] = *MEMORY[0x1E0C80C00];
  v2 = a1[16];
  if (v2 == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "Serialize");
    std::string::basic_string[abi:ne180100]<0>(&v73, "SymDesc section not yet added.");
    E5RT::Status::Status(&v72, 2, &v73);
    E5RT::E5RTError::E5RTError(exception, __dst, &v72);
  }
  v5 = (uint64_t **)a1[8];
  v6 = (uint64_t **)a1[9];
  if (v5 != v6)
  {
    while (1)
    {
      v9 = *v5;
      v10 = **v5;
      if (*(_BYTE *)(v10 + 52))
      {
        v11 = *((unsigned int *)v9 + 12);
        *(_QWORD *)(v10 + 40) = v11;
        if ((_DWORD)v11)
        {
          v12 = (char *)operator new(v11);
          v13 = &v12[v11];
          bzero(v12, v11);
          if (*(_QWORD *)(v10 + 40))
          {
            v14 = (const void *)v9[8];
            if (!v14)
              __assert_rtn("data", "vector_downward.h", 167, "cur_");
            memcpy(v12, v14, v11);
          }
        }
        else
        {
          v12 = 0;
          v13 = 0;
        }
        v15 = (_QWORD *)operator new();
        __dst[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        *v15 = v12;
        v15[1] = v13;
        v15[2] = v13;
        v16 = (_QWORD *)a1[1];
        v17 = (_QWORD *)v16[6];
        *(_DWORD *)(*v9 + 48) = ((unint64_t)v17 - v16[5]) >> 3;
        if ((unint64_t)v17 >= v16[7])
        {
          v16[6] = std::vector<std::unique_ptr<E5RT_FB::SectionDataT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SectionDataT>>(v16 + 5, (uint64_t *)__dst);
          v18 = __dst[0].__pn_.__r_.__value_.__r.__words[0];
          __dst[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          if (v18)
          {
LABEL_16:
            v19 = *(void **)v18;
            if (*(_QWORD *)v18)
            {
              *(_QWORD *)(v18 + 8) = v19;
              operator delete(v19);
            }
            MEMORY[0x19401CD90](v18, 0x10C402FEFCB83);
          }
        }
        else
        {
          __dst[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          *v17 = v15;
          v16[6] = v17 + 1;
          v18 = __dst[0].__pn_.__r_.__value_.__r.__words[0];
          __dst[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          if (v18)
            goto LABEL_16;
        }
      }
      v20 = (_QWORD *)a1[1];
      v21 = (uint64_t *)v20[2];
      if ((unint64_t)v21 < v20[3])
      {
        v7 = *v9;
        *v9 = 0;
        *v21 = v7;
        v8 = v21 + 1;
      }
      else
      {
        v8 = std::vector<std::unique_ptr<E5RT_FB::SectionT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SectionT>>(v20 + 1, v9);
      }
      v20[2] = v8;
      if (++v5 == v6)
      {
        LODWORD(v2) = *((_DWORD *)a1 + 32);
        break;
      }
    }
  }
  v22 = *(_QWORD *)(a1[1] + 8);
  if (*(_DWORD *)(*(_QWORD *)(v22 + 8 * v2) + 24) != 5)
  {
    v63 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "Serialize");
    std::string::basic_string[abi:ne180100]<0>(&v73, "Sym desc section does not have expected type information.");
    E5RT::Status::Status(&v72, 2, &v73);
    E5RT::E5RTError::E5RTError(v63, __dst, &v72);
  }
  v23 = (_QWORD *)operator new();
  *v23 = 0;
  v23[1] = 0;
  v23[2] = 0;
  v24 = (uint64_t *)a1[2];
  v25 = (uint64_t *)a1[3];
  if (v24 != v25)
  {
    v26 = 0;
    do
    {
      v27 = *v24;
      v28 = *(_QWORD *)(*(_QWORD *)(v22 + 8 * v2) + 40);
      v29 = *(_QWORD *)(*v24 + 48);
      v30 = v28 >= v29;
      v31 = v28 - v29;
      if (!v30)
      {
        v60 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__dst, "Serialize");
        std::string::basic_string[abi:ne180100]<0>(&v73, "Sym desc section size is insufficient for the given symbol's addr offset.");
        E5RT::Status::Status(&v72, 2, &v73);
        E5RT::E5RTError::E5RTError(v60, __dst, &v72);
      }
      v32 = *(_QWORD *)(a1[1] + 8);
      v33 = *(unsigned int *)(v27 + 28);
      *(_QWORD *)(v27 + 48) = v31;
      v34 = *(_QWORD *)(v32 + 8 * v33);
      v35 = *(_QWORD *)(v34 + 40);
      v36 = *(_QWORD *)(v27 + 40);
      v30 = v35 >= v36;
      v37 = v35 - v36;
      if (!v30)
      {
        v61 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__dst, "Serialize");
        std::string::basic_string[abi:ne180100]<0>(&v73, "Data section size is insufficient for the given symbol's addr offset.");
        E5RT::Status::Status(&v72, 2, &v73);
        E5RT::E5RTError::E5RTError(v61, __dst, &v72);
      }
      if (*(_BYTE *)(v34 + 52))
        *(_QWORD *)(v27 + 40) = v37;
      if ((unint64_t)v26 < v23[2])
      {
        *v24 = 0;
        *v26++ = v27;
      }
      else
      {
        v26 = std::vector<std::unique_ptr<E5RT_FB::SymbolT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SymbolT>>(v23, v24);
      }
      v23[1] = v26;
      ++v24;
    }
    while (v24 != v25);
  }
  v38 = a1[1];
  v39 = *(_QWORD **)(v38 + 32);
  *(_QWORD *)(v38 + 32) = v23;
  if (v39)
  {
    v40 = (_QWORD *)*v39;
    if (*v39)
    {
      v41 = (_QWORD *)v39[1];
      v42 = (_QWORD *)*v39;
      if (v41 != v40)
      {
        do
        {
          v44 = *--v41;
          v43 = v44;
          *v41 = 0;
          if (v44)
          {
            if (*(char *)(v43 + 23) < 0)
              operator delete(*(void **)v43);
            MEMORY[0x19401CD90](v43, 0x1012C4004DB1A28);
          }
        }
        while (v41 != v40);
        v42 = (_QWORD *)*v39;
      }
      v39[1] = v40;
      operator delete(v42);
    }
    MEMORY[0x19401CD90](v39, 0x20C40960023A9);
  }
  v73 = 0;
  v74 = 0;
  v75 = xmmword_191A849C0;
  v76 = 0;
  v77 = 0;
  v78 = 0u;
  v79 = 0u;
  v80 = 1;
  v81 = 256;
  v45 = (unsigned __int16 **)a1[1];
  v82 = 0;
  __dst[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  *(_OWORD *)&__dst[0].__pn_.__r_.__value_.__r.__words[1] = (unint64_t)v45;
  if (*v45)
    ProgramHeader = E5RT_FB::CreateProgramHeader((flatbuffers::FlatBufferBuilder *)&v73, **v45, (*v45)[1], (*v45)[2], *((_QWORD *)*v45 + 1));
  else
    ProgramHeader = 0;
  v47 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::Section>,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>((flatbuffers::FlatBufferBuilder *)&v73, ((char *)v45[2] - (char *)v45[1]) >> 3, (uint64_t)__dst);
  v48 = v45[4];
  if (v48)
  {
    Symtab = E5RT_FB::CreateSymtab((flatbuffers::FlatBufferBuilder *)&v73, v48, 0);
    v50 = (char *)v45[6] - (char *)v45[5];
    if (v50)
    {
LABEL_52:
      v51 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::SectionData>,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#2},E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>((flatbuffers::FlatBufferBuilder *)&v73, v50 >> 3, (uint64_t)__dst);
      goto LABEL_55;
    }
  }
  else
  {
    Symtab = 0;
    v50 = (char *)v45[6] - (char *)v45[5];
    if (v50)
      goto LABEL_52;
  }
  v51 = 0;
LABEL_55:
  Program = E5RT_FB::CreateProgram((flatbuffers::FlatBufferBuilder *)&v73, ProgramHeader, v47, Symtab, v51);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v73, Program, 0, 0);
  memset(&v71, 0, sizeof(v71));
  v53 = *(unsigned __int8 *)(a2 + 23);
  if ((v53 & 0x80u) == 0)
    v54 = (std::string *)a2;
  else
    v54 = *(std::string **)a2;
  if ((v53 & 0x80u) != 0)
    v53 = *(_QWORD *)(a2 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&v71.__pn_, v54, (std::string *)((char *)v54 + v53));
  v55 = std::__fs::filesystem::path::__parent_path(&v71);
  if (v55.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v55.__size_ >= 0x17)
  {
    v57 = (v55.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55.__size_ | 7) != 0x17)
      v57 = v55.__size_ | 7;
    v58 = v57 + 1;
    v56 = (std::__fs::filesystem::path *)operator new(v57 + 1);
    __dst[0].__pn_.__r_.__value_.__l.__size_ = v55.__size_;
    __dst[0].__pn_.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
    __dst[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    goto LABEL_67;
  }
  *((_BYTE *)&__dst[0].__pn_.__r_.__value_.__s + 23) = v55.__size_;
  v56 = __dst;
  if (v55.__size_)
LABEL_67:
    memmove(v56, v55.__data_, v55.__size_);
  v56->__pn_.__r_.__value_.__s.__data_[v55.__size_] = 0;
  v72 = __dst[0];
  if (SHIBYTE(v71.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__pn_.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__create_directories(&v72, 0);
  std::ofstream::basic_ofstream(__dst);
  if (!v84)
  {
    std::operator+<char>();
    v64 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v70, "Serialize");
    E5RT::Status::Status(v69, 2, &v71);
    E5RT::E5RTError::E5RTError(v64, v70, v69);
  }
  if (!HIBYTE(v79))
  {
    v65 = "finished";
    v66 = 231;
    v67 = "flatbuffer_builder.h";
    v68 = "Finished";
    goto LABEL_94;
  }
  if (!*((_QWORD *)&v78 + 1))
  {
    v65 = "cur_";
    v66 = 167;
    v67 = "vector_downward.h";
    v68 = "data";
LABEL_94:
    __assert_rtn(v68, v67, v66, v65);
  }
  std::ostream::write();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__dst + *(_QWORD *)(__dst[0].__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__dst[1].__pn_.__r_.__value_.__r.__words[1]+ *(_QWORD *)(__dst[0].__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
  __dst[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
  *(std::string::size_type *)((char *)__dst[0].__pn_.__r_.__value_.__r.__words
                            + *(_QWORD *)(__dst[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x19401C8BC](&__dst[0].__pn_.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v85);
  if (SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__pn_.__r_.__value_.__l.__data_);
  v59 = v82;
  if (v82)
  {
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v82, *(_QWORD **)(v82 + 8));
    MEMORY[0x19401CD90](v59, 0x1060C40C2B13FB5);
  }
  if ((_QWORD)v78)
  {
    if (!v73)
    {
      MEMORY[0x19401CD78](v78, 0x1000C8077774924);
      *(_QWORD *)&v78 = 0;
      if (!v74)
        return;
      goto LABEL_83;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
  }
  *(_QWORD *)&v78 = 0;
  if (!v74)
    return;
LABEL_83:
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
}

void sub_191038F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1910390B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;

  if (a38 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v38);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v38);
  _Unwind_Resume(a1);
}

void sub_1910390E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191039134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  _QWORD *v41;
  void *v42;
  int v43;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a25 < 0)
    operator delete(__p);
  if (a41 < 0)
  {
    operator delete(a36);
    if ((v43 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v43)
  {
LABEL_8:
    v45 = (_QWORD *)*v41;
    if (*v41)
    {
      v46 = (_QWORD *)v41[1];
      v47 = (_QWORD *)*v41;
      if (v46 != v45)
      {
        do
        {
          v49 = *--v46;
          v48 = v49;
          *v46 = 0;
          if (v49)
          {
            if (*(char *)(v48 + 23) < 0)
              operator delete(*(void **)v48);
            MEMORY[0x19401CD90](v48, 0x1012C4004DB1A28);
          }
        }
        while (v46 != v45);
        v47 = (_QWORD *)*v41;
      }
      v41[1] = v45;
      operator delete(v47);
    }
    MEMORY[0x19401CD90](v41, 0x20C40960023A9);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v42);
  goto LABEL_8;
}

void sub_1910391AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;

  if (a38 < 0)
    operator delete(__p);
  __cxa_free_exception(v38);
  JUMPOUT(0x1910391ECLL);
}

void sub_1910391DC()
{
  JUMPOUT(0x1910391E4);
}

uint64_t sub_191039274(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;

  v10 = operator new();
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = a5;
  *(_WORD *)v10 = a2;
  *(_WORD *)(v10 + 2) = a3;
  *(_WORD *)(v10 + 4) = a4;
  v11 = *(uint64_t **)(a1 + 8);
  result = *v11;
  *v11 = v10;
  if (result)
    JUMPOUT(0x19401CD90);
  return result;
}

uint64_t sub_191039310(uint64_t a1, const std::string *a2, int a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  void **v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void **v49;
  void *exception;
  void *v51;
  void *v52;
  void *__p[2];
  void *v54[2];
  int v55;
  _QWORD v56[3];
  uint64_t *v57;

  v10 = a1 + 88;
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((_QWORD *)(a1 + 88), (uint64_t)a2))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "AddSection");
    std::string::basic_string[abi:ne180100]<0>(v56, "Duplicate section names not allowed.");
    E5RT::Status::Status(&v57, 1, v56);
    E5RT::E5RTError::E5RTError(exception, __p, &v57);
  }
  if (a3 == 5)
  {
    if (*(_QWORD *)(a1 + 128) != -1)
    {
      v51 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "AddSection");
      std::string::basic_string[abi:ne180100]<0>(v56, "Cannot add a second SymDesc section.");
      E5RT::Status::Status(&v57, 1, v56);
      E5RT::E5RTError::E5RTError(v51, __p, &v57);
    }
    if ((a5 & 1) == 0)
    {
      v52 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "AddSection");
      std::string::basic_string[abi:ne180100]<0>(v56, "SymDesc section must have file data.");
      E5RT::Status::Status(&v57, 1, v56);
      E5RT::E5RTError::E5RTError(v52, __p, &v57);
    }
  }
  v11 = operator new();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_QWORD *)(v11 + 48) = 0;
  std::string::operator=((std::string *)v11, a2);
  *(_DWORD *)(v11 + 24) = a3;
  *(_QWORD *)(v11 + 32) = a4;
  *(_BYTE *)(v11 + 52) = a5;
  v12 = operator new();
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(int64x2_t *)(v12 + 24) = vdupq_n_s64(8uLL);
  *(_QWORD *)(v12 + 88) = 1;
  *(_BYTE *)(v12 + 97) = 1;
  *(_QWORD *)(v12 + 104) = 0;
  v57 = (uint64_t *)v12;
  v56[0] = 0;
  *(_QWORD *)v12 = v11;
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  __p[0] = (void *)a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (uint64_t)a2, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 10) = (unint64_t)(v14 - v13) >> 3;
  if (a3 == 5)
  {
    __p[0] = (void *)a2;
    *(_QWORD *)(a1 + 128) = *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (uint64_t)a2, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 10);
  }
  v16 = *(char **)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v16 >= v15)
  {
    v18 = *(char **)(a1 + 64);
    v19 = (v16 - v18) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v21 = v15 - (_QWORD)v18;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = (char *)operator new(8 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = &v23[8 * v22];
    v57 = 0;
    *v24 = v12;
    v17 = v24 + 1;
    if (v16 == v18)
    {
      *(_QWORD *)(a1 + 64) = v24;
      *(_QWORD *)(a1 + 72) = v17;
      *(_QWORD *)(a1 + 80) = v25;
    }
    else
    {
      v26 = v16 - v18 - 8;
      if (v26 < 0x78
        || &v16[-(v26 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v24
        && &v23[v16 - v18 - (v26 & 0xFFFFFFFFFFFFFFF8) - 8] < v16)
      {
        goto LABEL_64;
      }
      v27 = (v26 >> 3) + 1;
      v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      v24 = (uint64_t *)((char *)v24 - v28);
      v29 = &v16[-v28];
      v30 = v16 - 16;
      v31 = &v23[8 * v19 - 16];
      v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v34 = *((_OWORD *)v30 - 1);
        v33 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v31 - 1) = v34;
        *(_OWORD *)v31 = v33;
        v30 -= 32;
        v31 -= 32;
        v32 -= 4;
      }
      while (v32);
      v16 = v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_64:
        do
        {
          v35 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *(_QWORD *)v16 = 0;
          *--v24 = v35;
        }
        while (v16 != v18);
      }
      v16 = *(char **)(a1 + 64);
      v36 = *(char **)(a1 + 72);
      *(_QWORD *)(a1 + 64) = v24;
      *(_QWORD *)(a1 + 72) = v17;
      *(_QWORD *)(a1 + 80) = v25;
      while (v36 != v16)
      {
        v38 = (uint64_t *)*((_QWORD *)v36 - 1);
        v36 -= 8;
        v37 = v38;
        *(_QWORD *)v36 = 0;
        if (v38)
        {
          flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(v37 + 1));
          v39 = *v37;
          *v37 = 0;
          if (v39)
          {
            if (*(char *)(v39 + 23) < 0)
              operator delete(*(void **)v39);
            MEMORY[0x19401CD90](v39, 0x1012C4016A3B764);
          }
          MEMORY[0x19401CD90](v37, 0x1030C40EF383451);
        }
      }
    }
    if (v16)
      operator delete(v16);
  }
  else
  {
    v57 = 0;
    *(_QWORD *)v16 = v12;
    v17 = v16 + 8;
  }
  *(_QWORD *)(a1 + 72) = v17;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v54 = 0u;
  v55 = 1065353216;
  v40 = *(_QWORD *)(a1 + 48);
  if (v40 >= *(_QWORD *)(a1 + 56))
  {
    v41 = std::vector<std::unordered_map<std::string,unsigned int>>::__push_back_slow_path<std::unordered_map<std::string,unsigned int>>((char **)(a1 + 40), (uint64_t *)__p);
    v42 = (void **)v54[0];
    *(_QWORD *)(a1 + 48) = v41;
    if (v42)
    {
      do
      {
        v49 = (void **)*v42;
        if (*((char *)v42 + 39) < 0)
          operator delete(v42[2]);
        operator delete(v42);
        v42 = v49;
      }
      while (v49);
    }
  }
  else
  {
    *(_QWORD *)v40 = 0;
    *(_QWORD *)(v40 + 8) = 0;
    __p[1] = 0;
    *(_QWORD *)(v40 + 16) = 0;
    *(_QWORD *)(v40 + 24) = 0;
    *(_DWORD *)(v40 + 32) = 1065353216;
    *(_QWORD *)(a1 + 48) = v40 + 40;
  }
  v43 = __p[0];
  __p[0] = 0;
  if (v43)
    operator delete(v43);
  __p[0] = (void *)a2;
  v44 = *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (uint64_t)a2, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 10);
  v45 = v57;
  if (v57)
  {
    flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(v57 + 1));
    v46 = *v45;
    *v45 = 0;
    if (v46)
    {
      if (*(char *)(v46 + 23) < 0)
        operator delete(*(void **)v46);
      MEMORY[0x19401CD90](v46, 0x1012C4016A3B764);
    }
    MEMORY[0x19401CD90](v45, 0x1030C40EF383451);
  }
  v47 = v56[0];
  if (v56[0])
  {
    if (*(char *)(v56[0] + 23) < 0)
      operator delete(*(void **)v56[0]);
    MEMORY[0x19401CD90](v47, 0x1012C4016A3B764);
  }
  return v44;
}

void sub_1910398E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  sub_19103A980(&a17);
  std::unique_ptr<E5RT_FB::SectionT>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_191039908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT_FB::SectionT>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19103991C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<E5RT_FB::SectionT>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191039930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_19103A980((uint64_t **)va1);
  std::unique_ptr<E5RT_FB::SectionT>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19103994C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  int v24;

  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a22 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v24 & 1) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_191039A28(_QWORD *a1, const std::string *a2, __int128 *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *exception;
  void *v24;
  uint64_t v25[3];
  _BYTE v26[8];
  __int128 *v27[3];

  v10 = (uint64_t)(a1 + 11);
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a1 + 11, (uint64_t)a3))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v27, "AddSymbol");
    std::string::basic_string[abi:ne180100]<0>(v25, "Unknown section name.");
    E5RT::Status::Status(v26, 1, v25);
    E5RT::E5RTError::E5RTError(exception, v27, v26);
  }
  v27[0] = a3;
  v11 = (_QWORD *)(a1[5]
                 + 40
                 * *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (uint64_t)a3, (uint64_t)&std::piecewise_construct, v27)+ 10));
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v11, (uint64_t)a2))
  {
    v24 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v27, "AddSymbol");
    std::string::basic_string[abi:ne180100]<0>(v25, "Duplicate symbol names within section not allowed.");
    E5RT::Status::Status(v26, 1, v25);
    E5RT::E5RTError::E5RTError(v24, v27, v26);
  }
  v12 = operator new();
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_QWORD *)(v12 + 48) = 0;
  v25[0] = v12;
  std::string::operator=((std::string *)v12, a2);
  *(_DWORD *)(v25[0] + 24) = a4;
  v27[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (uint64_t)a3, (uint64_t)&std::piecewise_construct, v27);
  v14 = v25[0];
  *(_DWORD *)(v25[0] + 28) = *((_DWORD *)v13 + 10);
  *(_QWORD *)(v14 + 32) = a5;
  v15 = a1[2];
  v16 = a1[3];
  v27[0] = (__int128 *)a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (uint64_t)a2, (uint64_t)&std::piecewise_construct, v27)+ 10) = (unint64_t)(v16 - v15) >> 3;
  v17 = (uint64_t *)a1[3];
  if ((unint64_t)v17 >= a1[4])
  {
    v19 = std::vector<std::unique_ptr<E5RT_FB::SymbolT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SymbolT>>(a1 + 2, v25);
  }
  else
  {
    v18 = v25[0];
    v25[0] = 0;
    *v17 = v18;
    v19 = v17 + 1;
  }
  a1[3] = v19;
  v27[0] = (__int128 *)a2;
  v20 = *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (uint64_t)a2, (uint64_t)&std::piecewise_construct, v27)+ 10);
  v21 = v25[0];
  v25[0] = 0;
  if (v21)
  {
    if (*(char *)(v21 + 23) < 0)
      operator delete(*(void **)v21);
    MEMORY[0x19401CD90](v21, 0x1012C4004DB1A28);
  }
  return v20;
}

void sub_191039CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<E5RT_FB::SymbolT>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191039CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) != 0)
      goto LABEL_8;
  }
  else if (v23)
  {
LABEL_8:
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_191039DB0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *exception;
  void *v14;
  void *v15;
  _QWORD v16[3];
  _BYTE v17[8];
  _QWORD v18[3];

  if (a1[16] == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "SetDescriptionForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v16, "SymDesc section not yet added.");
    E5RT::Status::Status(v17, 2, v16);
    E5RT::E5RTError::E5RTError(exception, v18, v17);
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v7 = a1[2];
  if (*(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) + 48))
  {
    v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "SetDescriptionForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v16, "Symbol description already added.");
    E5RT::Status::Status(v17, 2, v16);
    E5RT::E5RTError::E5RTError(v14, v18, v17);
  }
  v8 = v6;
  v9 = *(_QWORD *)(a4 + 24);
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  v10 = *(_QWORD *)(a1[8] + 8 * *((unsigned int *)a1 + 32));
  v11 = *(unsigned int *)(v10 + 48);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, v10 + 8);
  if (result + v11 != *(_DWORD *)(v10 + 48))
  {
    v15 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "SetDescriptionForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v16, "FlatBufferBuilder size mismatch while serializing sym desc information.");
    E5RT::Status::Status(v17, 2, v16);
    E5RT::E5RTError::E5RTError(v15, v18, v17);
  }
  *(_QWORD *)(*(_QWORD *)(v7 + 8 * v8) + 48) = result + v11;
  return result;
}

void sub_191039FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19103A070(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *exception;
  void *v14;
  _QWORD v15[3];
  _BYTE v16[8];
  _QWORD v17[3];

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v7 = a1[2];
  v8 = *(unsigned int **)(a1[8] + 8 * *(unsigned int *)(*(_QWORD *)(v7 + 8 * v6) + 28));
  if (!*(_BYTE *)(*(_QWORD *)v8 + 52))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "SetProgramDataForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v15, "Section does not have file data enabled.");
    E5RT::Status::Status(v16, 2, v15);
    E5RT::E5RTError::E5RTError(exception, v17, v16);
  }
  v9 = v6;
  v10 = *(_QWORD *)(a4 + 24);
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  v11 = v8[12];
  result = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v10 + 48))(v10, v8 + 2);
  if (result + v11 != v8[12])
  {
    v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "SetProgramDataForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v15, "FlatBufferBuilder size mismatch while serializing symbol data information.");
    E5RT::Status::Status(v16, 2, v15);
    E5RT::E5RTError::E5RTError(v14, v17, v16);
  }
  *(_QWORD *)(*(_QWORD *)(v7 + 8 * v9) + 40) = result + v11;
  return result;
}

void sub_19103A1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19103A29C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *exception;
  _QWORD v11[3];
  _BYTE v12[8];
  _QWORD v13[3];

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v7 = *(_QWORD *)(a1[2] + 8 * result);
  v8 = **(_QWORD **)(a1[8] + 8 * *(unsigned int *)(v7 + 28));
  if (*(_BYTE *)(v8 + 52))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "SetDataInfoForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v11, "Section has file data enabled.");
    E5RT::Status::Status(v12, 2, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  v9 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 40) = v9;
  *(_QWORD *)(v8 + 40) = v9 + a4;
  return result;
}

void sub_19103A378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19103A3EC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void *exception;
  _QWORD v12[3];
  _BYTE v13[8];
  _QWORD v14[3];

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v9 = *(_QWORD *)(a1[2] + 8 * result);
  v10 = **(_QWORD **)(a1[8] + 8 * *(unsigned int *)(v9 + 28));
  if (*(_BYTE *)(v10 + 52))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "SetDataInfoForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v12, "Section has file data enabled.");
    E5RT::Status::Status(v13, 2, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v10 + 40) += (a5 + a4 - *(_QWORD *)(v10 + 40)) & ~((a5 + a4 - *(_QWORD *)(v10 + 40)) >> 63);
  return result;
}

void sub_19103A4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19103A54C(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *v7;
  void *exception;
  void *v10;
  _QWORD v11[3];
  _BYTE v12[8];
  __int128 *v13[3];

  v6 = a1 + 88;
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((_QWORD *)(a1 + 88), (uint64_t)a3))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "GetSymbolIndex");
    std::string::basic_string[abi:ne180100]<0>(v11, "Unknown section name.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  v13[0] = a3;
  v7 = (_QWORD *)(*(_QWORD *)(a1 + 40)
                + 40
                * *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (uint64_t)a3, (uint64_t)&std::piecewise_construct, v13)+ 10));
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v7, (uint64_t)a2))
  {
    v10 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "GetSymbolIndex");
    std::string::basic_string[abi:ne180100]<0>(v11, "Unknown symbol name.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(v10, v13, v12);
  }
  v13[0] = a2;
  return *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (uint64_t)a2, (uint64_t)&std::piecewise_construct, v13)+ 10);
}

void sub_19103A6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19103A788(_QWORD *a1)
{
  uint64_t v2;
  void *exception;
  _QWORD v5[3];
  _BYTE v6[8];
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1[2] + 8 * (*(unsigned int (**)(_QWORD *))(*a1 + 80))(a1));
  if (*(_BYTE *)(**(_QWORD **)(a1[8] + 8 * *(unsigned int *)(v2 + 28)) + 52))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetSymbolDataOffset");
    std::string::basic_string[abi:ne180100]<0>(v5, "Section has file data enabled.");
    E5RT::Status::Status(v6, 2, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return *(_QWORD *)(v2 + 40);
}

void sub_19103A854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19103A8C8(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
}

uint64_t *std::unique_ptr<E5RT_FB::SectionDataT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x19401CD90](v2, 0x10C402FEFCB83);
  }
  return a1;
}

uint64_t *std::unique_ptr<E5RT_FB::SectionT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x19401CD90](v2, 0x1012C4016A3B764);
  }
  return a1;
}

uint64_t **sub_19103A980(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(v2 + 1));
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      MEMORY[0x19401CD90](v3, 0x1012C4016A3B764);
    }
    MEMORY[0x19401CD90](v2, 0x1030C40EF383451);
  }
  return a1;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(*((_QWORD *)this + 12), *(_QWORD **)(v2 + 8));
    MEMORY[0x19401CD90](v2, 0x1060C40C2B13FB5);
  }
  if (!*((_QWORD *)this + 6))
  {
LABEL_6:
    *((_QWORD *)this + 6) = 0;
    if (!*((_BYTE *)this + 8))
      goto LABEL_9;
    goto LABEL_7;
  }
  if (*(_QWORD *)this)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
    goto LABEL_6;
  }
  MEMORY[0x19401CD78](*((_QWORD *)this + 6), 0x1000C8077774924);
  *((_QWORD *)this + 6) = 0;
  if (!*((_BYTE *)this + 8))
    goto LABEL_9;
LABEL_7:
  if (*(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
LABEL_9:
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

uint64_t *std::unique_ptr<E5RT_FB::SymbolT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x19401CD90](v2, 0x1012C4004DB1A28);
  }
  return a1;
}

_QWORD *std::vector<std::unique_ptr<E5RT_FB::SectionDataT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SectionDataT>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_28;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_36;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_36:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
      {
        v29 = *(void **)v27;
        if (*(_QWORD *)v27)
        {
          *(_QWORD *)(v27 + 8) = v29;
          operator delete(v29);
        }
        MEMORY[0x19401CD90](v27, 0x10C402FEFCB83);
      }
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_28:
    operator delete(v15);
  return v13;
}

_QWORD *std::vector<std::unique_ptr<E5RT_FB::SectionT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SectionT>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_28;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_36;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_36:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
      {
        if (*(char *)(v27 + 23) < 0)
          operator delete(*(void **)v27);
        MEMORY[0x19401CD90](v27, 0x1012C4016A3B764);
      }
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_28:
    operator delete(v15);
  return v13;
}

_QWORD *std::vector<std::unique_ptr<E5RT_FB::SymbolT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SymbolT>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_28;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_36;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_36:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
      {
        if (*(char *)(v27 + 23) < 0)
          operator delete(*(void **)v27);
        MEMORY[0x19401CD90](v27, 0x1012C4004DB1A28);
      }
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_28:
    operator delete(v15);
  return v13;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::Section>,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  flatbuffers::FlatBufferBuilder *v12;
  const char *v13;
  unint64_t v14;
  uint64_t String;
  void *v16;
  uint64_t v17;

  if (a2)
  {
    if (a2 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = 4 * a2;
    v7 = (char *)operator new(4 * a2);
    bzero(v7, 4 * a2);
    v8 = 0;
    v9 = &v7[v6];
    while (1)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8 * v8);
      v11 = *(_BYTE *)(v10 + 23);
      if (v11 < 0)
      {
        v12 = *(flatbuffers::FlatBufferBuilder **)a3;
        if (*(_QWORD *)(v10 + 8))
        {
LABEL_6:
          if (v11 >= 0)
            v13 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8 * v8);
          else
            v13 = *(const char **)v10;
          if (v11 >= 0)
            v14 = *(unsigned __int8 *)(v10 + 23);
          else
            v14 = *(_QWORD *)(v10 + 8);
          String = flatbuffers::FlatBufferBuilder::CreateString(v12, v13, v14);
          goto LABEL_15;
        }
      }
      else
      {
        v12 = *(flatbuffers::FlatBufferBuilder **)a3;
        if (*(_BYTE *)(v10 + 23))
          goto LABEL_6;
      }
      String = 0;
LABEL_15:
      *(_DWORD *)&v7[4 * v8++] = E5RT_FB::CreateSection(v12, String, *(unsigned int *)(v10 + 24), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), *(unsigned int *)(v10 + 48), *(unsigned __int8 *)(v10 + 52));
      if (a2 == v8)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v9 = 0;
LABEL_18:
  if (v9 == v7)
    v16 = &flatbuffers::data<flatbuffers::Offset<E5RT_FB::Section>,std::allocator<flatbuffers::Offset<E5RT_FB::Section>>>(std::vector<flatbuffers::Offset<E5RT_FB::Section>> const&)::t;
  else
    v16 = v7;
  v17 = flatbuffers::FlatBufferBuilder::CreateVector<Block>(a1, (uint64_t)v16, (v9 - v7) >> 2);
  if (v7)
    operator delete(v7);
  return v17;
}

void sub_19103B1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder *a1, _QWORD *a2, uint64_t a3)
{
  flatbuffers::FlatBufferBuilder *v3;
  uint64_t v4;
  int v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD v12[3];

  v3 = a1;
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  v4 = a2[1] - *a2;
  if (v4)
  {
    a1 = (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::Symbol>,E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(a1, v4 >> 3, (uint64_t)v12);
    v5 = (int)a1;
    if (!*((_BYTE *)v3 + 78))
      goto LABEL_3;
LABEL_9:
    sub_191034224((uint64_t)a1, (uint64_t)a2, a3);
  }
  v5 = 0;
  if (*((_BYTE *)a1 + 78))
    goto LABEL_9;
LABEL_3:
  if (*((_DWORD *)v3 + 18))
    sub_191034200((uint64_t)a1, (uint64_t)a2, a3);
  *((_BYTE *)v3 + 78) = 1;
  v6 = *((_DWORD *)v3 + 10);
  if (v5)
  {
    v7 = flatbuffers::FlatBufferBuilder::Align((char *)v3, 4uLL, a3);
    v10 = *((_DWORD *)v3 + 10);
    if (v5 - 1 >= v10)
      sub_1910342B8((uint64_t)v7, v8, v9);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v3, 4, v10 - v5 + 4, 0);
  }
  return flatbuffers::FlatBufferBuilder::EndTable(v3, v6, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::SectionData>,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#2},E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;

  if (a2)
  {
    if (a2 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = 4 * a2;
    v7 = (char *)operator new(4 * a2);
    bzero(v7, 4 * a2);
    v8 = 0;
    v9 = &v7[v6];
    do
    {
      *(_DWORD *)&v7[4 * v8] = E5RT_FB::CreateSectionData(*(flatbuffers::FlatBufferBuilder **)a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 8 * v8));
      ++v8;
    }
    while (a2 != v8);
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  if (v9 == v7)
    v10 = &flatbuffers::data<flatbuffers::Offset<E5RT_FB::SectionData>,std::allocator<flatbuffers::Offset<E5RT_FB::SectionData>>>(std::vector<flatbuffers::Offset<E5RT_FB::SectionData>> const&)::t;
  else
    v10 = v7;
  v11 = flatbuffers::FlatBufferBuilder::CreateVector<Block>(a1, (uint64_t)v10, (v9 - v7) >> 2);
  if (v7)
    operator delete(v7);
  return v11;
}

void sub_19103B3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder *this, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t result;
  int *v28;
  unsigned __int16 *v29;
  unsigned int v30;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, a2, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, a2, a3);
  v8 = a3;
  v9 = a2;
  *((_BYTE *)this + 78) = 1;
  v10 = *((_DWORD *)this + 10);
  if (a5)
  {
    v11 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, a3);
    v14 = *((_DWORD *)this + 10);
    if (a5 - 1 >= v14)
      sub_1910342B8((uint64_t)v11, v12, v13);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 10, v14 - a5 + 4, 0);
  }
  if (a4)
  {
    v15 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, a3);
    v18 = *((_DWORD *)this + 10);
    if (a4 - 1 >= v18)
      sub_1910342B8((uint64_t)v15, v16, v17);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, v18 - a4 + 4, 0);
  }
  if (v8)
  {
    v19 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, a3);
    v22 = *((_DWORD *)this + 10);
    if (v8 - 1 >= v22)
      sub_1910342B8((uint64_t)v19, v20, v21);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v22 - v8 + 4, 0);
  }
  if (v9)
  {
    v23 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, a3);
    v26 = *((_DWORD *)this + 10);
    if (v9 - 1 >= v26)
      sub_1910342B8((uint64_t)v23, v24, v25);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v26 - v9 + 4, 0);
  }
  result = flatbuffers::FlatBufferBuilder::EndTable(this, v10, a3);
  v28 = (int *)(*((_QWORD *)this + 6) + *((_QWORD *)this + 4) - result);
  v29 = (unsigned __int16 *)((char *)v28 - *v28);
  v30 = *v29;
  if (v30 < 5 || !v29[2])
    sub_19103C590();
  if (v30 < 7 || !v29[3])
    sub_19103C590();
  return result;
}

uint64_t E5RT_FB::CreateProgramHeader(flatbuffers::FlatBufferBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, a2, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, a2, a3);
  *((_BYTE *)this + 78) = 1;
  v9 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 10, a5, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)this, 8, a4, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)this, 6, a3, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)this, 4, a2, 0);
  return flatbuffers::FlatBufferBuilder::EndTable(this, v9, v10);
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(char *this, uint64_t a2, uint64_t a3, int a4)
{
  __int16 v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;

  v4 = a3;
  v6 = this;
  if ((_DWORD)a3 != a4 || this[88])
  {
    this = flatbuffers::FlatBufferBuilder::Align(this, 2uLL, a3);
    v9 = *((_QWORD *)v6 + 7);
    v10 = *((_QWORD *)v6 + 8);
    v11 = v9 >= v10;
    v12 = v9 - v10;
    if (!v11 || v10 < *((_QWORD *)v6 + 6))
      sub_191034248((uint64_t)this, v7, v8);
    if (v12 <= 1)
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 2uLL);
    v13 = *((unsigned int *)v6 + 10);
    if (v13 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)this, v7, v8);
    v15 = *((_QWORD *)v6 + 7);
    v14 = *((_QWORD *)v6 + 8);
    *(_WORD *)(v15 - 2) = v4;
    v15 -= 2;
    *((_QWORD *)v6 + 7) = v15;
    v16 = v13 + 2;
    *((_DWORD *)v6 + 10) = v13 + 2;
    v17 = v15 - v14;
    if (v15 < v14 || v14 < *((_QWORD *)v6 + 6))
      sub_191034248((uint64_t)this, v7, v8);
    v18 = v16;
    if (v17 <= 7)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
      v18 = *((_DWORD *)v6 + 10);
    }
    if (v18 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)this, v7, v8);
    **((_QWORD **)v6 + 8) = v16 | (a2 << 32);
    *((_QWORD *)v6 + 8) += 8;
    ++*((_DWORD *)v6 + 18);
    if (*((unsigned __int16 *)v6 + 38) < a2)
      *((_WORD *)v6 + 38) = a2;
  }
  return this;
}

uint64_t E5RT_FB::CreateSection(flatbuffers::FlatBufferBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, a2, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, a2, a3);
  v12 = a2;
  *((_BYTE *)this + 78) = 1;
  v13 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 10, a5, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 8, a4, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 12, a6, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, a3, 0);
  if (v12)
  {
    v15 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v14);
    v18 = *((_DWORD *)this + 10);
    if (v12 - 1 >= v18)
      sub_1910342B8((uint64_t)v15, v16, v17);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v18 - v12 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 14, a7, 0);
  return flatbuffers::FlatBufferBuilder::EndTable(this, v13, v19);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::Symbol>,E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  flatbuffers::FlatBufferBuilder *v12;
  const char *v13;
  unint64_t v14;
  uint64_t String;
  void *v16;
  uint64_t v17;

  if (a2)
  {
    if (a2 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = 4 * a2;
    v7 = (char *)operator new(4 * a2);
    bzero(v7, 4 * a2);
    v8 = 0;
    v9 = &v7[v6];
    while (1)
    {
      v10 = *(_QWORD *)(**(_QWORD **)(a3 + 8) + 8 * v8);
      v11 = *(_BYTE *)(v10 + 23);
      if (v11 < 0)
      {
        v12 = *(flatbuffers::FlatBufferBuilder **)a3;
        if (*(_QWORD *)(v10 + 8))
        {
LABEL_6:
          if (v11 >= 0)
            v13 = *(const char **)(**(_QWORD **)(a3 + 8) + 8 * v8);
          else
            v13 = *(const char **)v10;
          if (v11 >= 0)
            v14 = *(unsigned __int8 *)(v10 + 23);
          else
            v14 = *(_QWORD *)(v10 + 8);
          String = flatbuffers::FlatBufferBuilder::CreateString(v12, v13, v14);
          goto LABEL_15;
        }
      }
      else
      {
        v12 = *(flatbuffers::FlatBufferBuilder **)a3;
        if (*(_BYTE *)(v10 + 23))
          goto LABEL_6;
      }
      String = 0;
LABEL_15:
      *(_DWORD *)&v7[4 * v8++] = E5RT_FB::CreateSymbol(v12, String, *(unsigned int *)(v10 + 24), *(unsigned int *)(v10 + 28), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), *(_QWORD *)(v10 + 48));
      if (a2 == v8)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v9 = 0;
LABEL_18:
  if (v9 == v7)
    v16 = &flatbuffers::data<flatbuffers::Offset<E5RT_FB::Symbol>,std::allocator<flatbuffers::Offset<E5RT_FB::Symbol>>>(std::vector<flatbuffers::Offset<E5RT_FB::Symbol>> const&)::t;
  else
    v16 = v7;
  v17 = flatbuffers::FlatBufferBuilder::CreateVector<Block>(a1, (uint64_t)v16, (v9 - v7) >> 2);
  if (v7)
    operator delete(v7);
  return v17;
}

void sub_19103B998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT_FB::CreateSymbol(flatbuffers::FlatBufferBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, a2, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, a2, a3);
  v12 = a2;
  *((_BYTE *)this + 78) = 1;
  v13 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 14, a7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 12, a6, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 10, a5, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, a4, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, a3, 0);
  if (v12)
  {
    v15 = flatbuffers::FlatBufferBuilder::Align((char *)this, 4uLL, v14);
    v18 = *((_DWORD *)this + 10);
    if (v12 - 1 >= v18)
      sub_1910342B8((uint64_t)v15, v16, v17);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v18 - v12 + 4, 0);
  }
  return flatbuffers::FlatBufferBuilder::EndTable(this, v13, v14);
}

uint64_t E5RT_FB::CreateSectionData(flatbuffers::FlatBufferBuilder *this, uint64_t a2)
{
  flatbuffers::FlatBufferBuilder *v2;
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v6;
  int v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v2 = this;
  v3 = *(_BYTE **)a2;
  v4 = *(_BYTE **)(a2 + 8);
  v6 = v4 - v3;
  if (v4 != v3)
  {
    this = (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(this, v3, v6);
    v7 = (int)this;
    if (!*((_BYTE *)v2 + 78))
      goto LABEL_3;
LABEL_9:
    sub_191034224((uint64_t)this, (uint64_t)v3, v6);
  }
  v7 = 0;
  if (*((_BYTE *)this + 78))
    goto LABEL_9;
LABEL_3:
  if (*((_DWORD *)v2 + 18))
    sub_191034200((uint64_t)this, (uint64_t)v3, v6);
  *((_BYTE *)v2 + 78) = 1;
  v8 = *((_DWORD *)v2 + 10);
  if (v7)
  {
    v9 = flatbuffers::FlatBufferBuilder::Align((char *)v2, 4uLL, v6);
    v12 = *((_DWORD *)v2 + 10);
    if (v7 - 1 >= v12)
      sub_1910342B8((uint64_t)v9, v10, v11);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v2, 4, v12 - v7 + 4, 0);
  }
  return flatbuffers::FlatBufferBuilder::EndTable(v2, v8, v6);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(flatbuffers::FlatBufferBuilder *this, const void *a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned int v13;
  void *v14;

  if (*((_BYTE *)this + 78))
    sub_191034224((uint64_t)this, (uint64_t)a2, a3);
  if (*((_DWORD *)this + 18))
    sub_191034200((uint64_t)this, (uint64_t)a2, a3);
  *((_BYTE *)this + 78) = 1;
  v6 = flatbuffers::FlatBufferBuilder::PreAlign((char *)this, a3, 4uLL);
  if (a3)
  {
    if (!*((_QWORD *)this + 10))
      *((_QWORD *)this + 10) = 1;
    v9 = *((_QWORD *)this + 7);
    v10 = *((_QWORD *)this + 8);
    v11 = v9 >= v10;
    v12 = v9 - v10;
    if (!v11 || v10 < *((_QWORD *)this + 6))
      sub_191034248((uint64_t)v6, v7, v8);
    if (v12 < a3)
      v6 = flatbuffers::vector_downward::reallocate(this, a3);
    v13 = *((_DWORD *)this + 10);
    if (v13 >= 0x7FFFFFFF)
      sub_19103426C((uint64_t)v6, v7, v8);
    v14 = (void *)(*((_QWORD *)this + 7) - a3);
    *((_QWORD *)this + 7) = v14;
    *((_DWORD *)this + 10) = v13 + a3;
    memcpy(v14, a2, a3);
  }
  return flatbuffers::FlatBufferBuilder::EndVector(this, a3, v8);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = (std::string *)(v26 + 16);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_DWORD *)v26 + 10) = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19103C2DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19103C2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::unordered_map<std::string,unsigned int>>::__push_back_slow_path<std::unordered_map<std::string,unsigned int>>(char **a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void **v29;
  void *v30;
  void *v31;
  void **v32;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v3];
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)v8 = v9;
  *((_QWORD *)v8 + 1) = v10;
  v11 = a2[2];
  *((_QWORD *)v8 + 2) = v11;
  v12 = a2[3];
  *((_QWORD *)v8 + 3) = v12;
  *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      v15 = v13 >= v10;
      v14 = v13 % v10;
      if (!v15)
        v14 = v13;
    }
    else
    {
      v14 = v13 & (v10 - 1);
    }
    *(_QWORD *)(v9 + 8 * v14) = v8 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  v16 = &v7[40 * v6];
  v17 = v8 + 40;
  v18 = *a1;
  v19 = a1[1];
  if (v19 == *a1)
  {
    *a1 = v8;
    a1[1] = v17;
    a1[2] = v16;
    if (!v19)
      return v17;
    goto LABEL_37;
  }
  v20 = 0;
  do
  {
    v22 = &v8[v20];
    v23 = &v19[v20];
    v24 = *(_QWORD *)&v19[v20 - 40];
    *((_QWORD *)v23 - 5) = 0;
    *((_QWORD *)v22 - 5) = v24;
    *((_QWORD *)v22 - 4) = *(_QWORD *)&v19[v20 - 32];
    *((_QWORD *)v23 - 4) = 0;
    v25 = *(_QWORD *)&v19[v20 - 24];
    *(_QWORD *)&v8[v20 - 24] = v25;
    v26 = *(_QWORD *)&v19[v20 - 16];
    *((_QWORD *)v22 - 2) = v26;
    *((_DWORD *)v22 - 2) = *(_DWORD *)&v19[v20 - 8];
    if (v26)
    {
      v21 = *(_QWORD *)(v25 + 8);
      v27 = *((_QWORD *)v22 - 4);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v21 >= v27)
          v21 %= v27;
      }
      else
      {
        v21 &= v27 - 1;
      }
      *(_QWORD *)(v24 + 8 * v21) = &v8[v20 - 24];
      *(_QWORD *)&v19[v20 - 24] = 0;
      *(_QWORD *)&v19[v20 - 16] = 0;
    }
    v20 -= 40;
  }
  while (&v19[v20] != v18);
  v28 = *a1;
  v19 = a1[1];
  *a1 = &v8[v20];
  a1[1] = v17;
  a1[2] = v16;
  if (v19 != v28)
  {
    do
    {
      v29 = (void **)*((_QWORD *)v19 - 3);
      if (v29)
      {
        do
        {
          v32 = (void **)*v29;
          if (*((char *)v29 + 39) < 0)
            operator delete(v29[2]);
          operator delete(v29);
          v29 = v32;
        }
        while (v32);
      }
      v31 = (void *)*((_QWORD *)v19 - 5);
      v19 -= 40;
      v30 = v31;
      *(_QWORD *)v19 = 0;
      if (v31)
        operator delete(v30);
    }
    while (v19 != v28);
    v19 = v28;
  }
  if (v19)
LABEL_37:
    operator delete(v19);
  return v17;
}

void sub_19103C590()
{
  __assert_rtn("Required", "flatbuffer_builder.h", 1219, "ok");
}

void sub_19103C5B8(uint64_t a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  uint64_t **v4;
  _BYTE __p[12];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 4;
  strcpy(__p, "e5rt");
  E5RT::GetE5RTLog((uint64_t)__p);
  v2 = objc_claimAutoreleasedReturnValue();
  if (v6 < 0)
  {
    operator delete(*(void **)__p);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_9;
  }
  if (os_signpost_enabled(v2))
  {
    v4 = *(uint64_t ***)(a1 + 40);
    if (*((char *)v4 + 23) < 0)
      v4 = (uint64_t **)*v4;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v4;
    _os_signpost_emit_with_name_impl(&dword_190DAF000, v2, OS_SIGNPOST_INTERVAL_END, v3, "ComputeProgamLoad", "BundlePath=%{signpost.description:attribute}s", __p, 0xCu);
  }
LABEL_9:

}

void sub_19103C6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19103C6EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

E5RT_FB::ProgramT **std::unique_ptr<E5RT_FB::ProgramT>::~unique_ptr[abi:ne180100](E5RT_FB::ProgramT **a1)
{
  E5RT_FB::ProgramT *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT_FB::ProgramT::~ProgramT(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void sub_19103C7C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x19401CD90);
}

uint64_t sub_19103C870(uint64_t a1)
{
  return a1 + 8;
}

void sub_19103C878(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DD04B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19103C888(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DD04B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void sub_19103C8B8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_19103C914(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_19103C97C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x19401CD90);
}

uint64_t sub_19103C9E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19103C9EC(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 24);
}

uint64_t sub_19103C9F8(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 28);
}

uint64_t sub_19103CA04(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
}

uint64_t sub_19103CA10(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t sub_19103CA1C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

void std::__shared_ptr_pointer<E5RT_FB::SymbolT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT_FB::SymbolT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7E5RT_FB7SymbolTEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN7E5RT_FB7SymbolTEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN7E5RT_FB7SymbolTEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7E5RT_FB7SymbolTEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_19103CABC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DD0568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19103CACC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DD0568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t sub_19103CAFC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t sub_19103CB54(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x19401CD90](v2, 0x1012C4016A3B764);
  }
  return a1;
}

void sub_19103CBA8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x19401CD90](v1, 0x1012C4016A3B764);
  }
  JUMPOUT(0x19401CD90);
}

uint64_t sub_19103CC0C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19103CC14(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 24);
}

uint64_t sub_19103CC20(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
}

uint64_t sub_19103CC2C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_19103CC34(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

_QWORD *sub_19103CC40(_QWORD *a1)
{
  uint64_t v2;
  E5RT_FB::ProgramT *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = a1[11];
  a1[11] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (E5RT_FB::ProgramT *)a1[10];
  a1[10] = 0;
  if (v3)
  {
    E5RT_FB::ProgramT::~ProgramT(v3);
    MEMORY[0x19401CD90]();
  }
  v4 = a1[7];
  if (v4)
  {
    v5 = a1[8];
    v6 = (void *)a1[7];
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)a1[7];
    }
    a1[8] = v4;
    operator delete(v6);
  }
  v10 = a1[3];
  if (v10)
  {
    v11 = a1[4];
    v12 = (void *)a1[3];
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = (void *)a1[3];
    }
    a1[4] = v10;
    operator delete(v12);
  }
  E5RT::ComputeProgramHeaderPriv::~ComputeProgramHeaderPriv((E5RT::ComputeProgramHeaderPriv *)(a1 + 1));
  return a1;
}

void sub_19103CD8C(_QWORD *a1)
{
  sub_19103CC40(a1);
  JUMPOUT(0x19401CD90);
}

BOOL sub_19103CDB0(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  return !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 24))(a1 + 8)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1) < 2;
}

uint64_t sub_19103CE08(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_19103CE10(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_19103CE18(uint64_t a1)
{
  return a1 + 48;
}

_OWORD *sub_19103CE20@<X0>(_OWORD *result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 *v4;
  __int128 *i;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = (__int128 *)*((_QWORD *)result + 3);
  for (i = (__int128 *)*((_QWORD *)result + 4); v4 != i; ++v4)
  {
    result = (_OWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 24))(*(_QWORD *)v4);
    if ((_DWORD)result == a2)
    {
      result = (_OWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 32))(*(_QWORD *)v4);
      if (result == a3)
      {
        v9 = (_QWORD *)a4[1];
        if ((unint64_t)v9 >= a4[2])
        {
          result = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)a4, v4);
        }
        else
        {
          v10 = *((_QWORD *)v4 + 1);
          *v9 = *(_QWORD *)v4;
          v9[1] = v10;
          if (v10)
          {
            v11 = (unint64_t *)(v10 + 8);
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
          }
          result = v9 + 2;
        }
        a4[1] = result;
      }
    }
  }
  return result;
}

void sub_19103CEEC(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19103CF00(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  void **v43;
  void *size;
  void **v45;
  void *v46;
  void *v47;
  void **v48;
  void **v49;
  uint64_t v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *exception;
  std::__shared_weak_count *v64;
  void *v65;
  _QWORD *v66;
  unint64_t v67;
  std::string __p;
  void *v69[2];
  __int128 v70;
  int v71;
  std::string v72;
  void *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v3 = (__int128 *)a1[3];
  v4 = (__int128 *)a1[4];
  if (v3 == v4)
    goto LABEL_107;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v3 + 24))(*(_QWORD *)v3) == 5
      && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3 + 32))(*(_QWORD *)v3) == 1)
    {
      v7 = v66;
      if ((unint64_t)v66 >= v67)
      {
        v6 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v65, v3);
      }
      else
      {
        *v66 = *(_QWORD *)v3;
        v8 = *((_QWORD *)v3 + 1);
        v7[1] = v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v6 = v7 + 2;
      }
      v66 = v6;
    }
    ++v3;
  }
  while (v3 != v4);
  if (v66 == v65)
  {
LABEL_107:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v72, "GetAliasSymbols");
    std::string::basic_string[abi:ne180100]<0>(v69, "Invalid compute program. No symbol desc section.");
    E5RT::Status::Status(&__p, 8, v69);
    E5RT::E5RTError::E5RTError(exception, &v72, &__p);
  }
  v11 = *(_QWORD *)v65;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v65 + 1);
  v64 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v16 = (_QWORD *)a1[7];
  v17 = (_QWORD *)a1[8];
  if (v16 != v17)
  {
    v18 = v15;
    v19 = a1 + 1;
    while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v16 + 24))(*v16) != 5)
    {
LABEL_21:
      v16 += 2;
      if (v16 == v17)
      {
        v12 = v64;
        goto LABEL_87;
      }
    }
    v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v16 + 16))(*v16);
    v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v16 + 56))(*v16);
    v22 = (unsigned int *)(v18 + v21);
    if (!(*(unsigned int (**)(_QWORD *))(*v19 + 24))(a1 + 1)
      && (*(unsigned int (**)(_QWORD *))(*v19 + 32))(a1 + 1) <= 1)
    {
      v23 = *v22;
      v24 = (unsigned int *)operator new();
      v25 = v24;
      v26 = (unsigned __int16 *)((char *)v22 + v23 - *(int *)((char *)v22 + v23));
      if (*v26 < 5u)
      {
        v28 = 0;
        *v24 = 0;
      }
      else
      {
        v27 = v26[2];
        if (v27)
        {
          v28 = *(unsigned int *)((char *)v22 + v23 + v27);
          *v24 = v28;
        }
        else
        {
          v28 = 0;
          *v24 = 0;
        }
      }
      goto LABEL_39;
    }
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DAD1A0;
    v72.__r_.__value_.__l.__size_ = (std::string::size_type)E5RT_FB::VerifySizePrefixedAliasDescBuffer;
    v73 = &v72;
    v69[0] = &off_1E2DACE88;
    v69[1] = E5RT_FB::UnPackSizePrefixedAliasDesc;
    *((_QWORD *)&v70 + 1) = v69;
    E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::AliasDescT>((unsigned int *)(v18 + v21), (uint64_t)&v72, (uint64_t)v69);
    v25 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    v29 = (void **)*((_QWORD *)&v70 + 1);
    if (*((void ***)&v70 + 1) == v69)
    {
      v29 = v69;
      v30 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v70 + 1))
        goto LABEL_33;
      v30 = 5;
    }
    (*((void (**)(void))*v29 + v30))();
LABEL_33:
    v31 = v73;
    if (v73 == &v72)
    {
      v31 = &v72;
      v32 = 4;
    }
    else
    {
      if (!v73)
      {
LABEL_38:
        v28 = *v25;
LABEL_39:
        v33 = a1[7];
        if (v28 >= (a1[8] - v33) >> 4)
        {
          v60 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v72, "GetAliasSymbols");
          std::string::basic_string[abi:ne180100]<0>(v69, "Alias is referring to a symbol index that is out of range.");
          E5RT::Status::Status(&__p, 8, v69);
          E5RT::E5RTError::E5RTError(v60, &v72, &__p);
        }
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v33 + 16 * v28) + 24))(*(_QWORD *)(v33 + 16 * v28)) != 1)
        {
          v61 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v72, "GetAliasSymbols");
          std::string::basic_string[abi:ne180100]<0>(v69, "Aliases are only supported for Operand symbols.");
          E5RT::Status::Status(&__p, 8, v69);
          E5RT::E5RTError::E5RTError(v61, &v72, &__p);
        }
        v34 = *(int8x8_t *)(a2 + 8);
        if (v34)
        {
          v35 = (uint8x8_t)vcnt_s8(v34);
          v35.i16[0] = vaddlv_u8(v35);
          if (v35.u32[0] > 1uLL)
          {
            v36 = v28;
            if (*(_QWORD *)&v34 <= v28)
              v36 = v28 % *(_QWORD *)&v34;
          }
          else
          {
            v36 = (v34.i32[0] - 1) & v28;
          }
          v37 = *(uint64_t ***)(*(_QWORD *)a2 + 8 * v36);
          if (v37)
          {
            v38 = *v37;
            if (v38)
            {
              if (v35.u32[0] < 2uLL)
              {
                v39 = *(_QWORD *)&v34 - 1;
                while (1)
                {
                  v41 = v38[1];
                  if (v41 == v28)
                  {
                    if (*((_DWORD *)v38 + 4) == v28)
                      goto LABEL_79;
                  }
                  else if ((v41 & v39) != v36)
                  {
                    goto LABEL_61;
                  }
                  v38 = (uint64_t *)*v38;
                  if (!v38)
                    goto LABEL_61;
                }
              }
              do
              {
                v40 = v38[1];
                if (v40 == v28)
                {
                  if (*((_DWORD *)v38 + 4) == v28)
                  {
LABEL_79:
                    v50 = (uint64_t)(v38 + 3);
                    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v38 + 3, v20))
                    {
                      v62 = __cxa_allocate_exception(0x18uLL);
                      std::string::basic_string[abi:ne180100]<0>(&v72, "GetAliasSymbols");
                      std::string::basic_string[abi:ne180100]<0>(v69, "Found aliases with the same name.");
                      E5RT::Status::Status(&__p, 8, v69);
                      E5RT::E5RTError::E5RTError(v62, &v72, &__p);
                    }
                    if (*(char *)(v20 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
                    }
                    else
                    {
                      v51 = *(_OWORD *)v20;
                      v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
                      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v51;
                    }
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v50, (uint64_t)&v72, (uint64_t)&v72);
                    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v47 = (void *)v72.__r_.__value_.__r.__words[0];
LABEL_19:
                      operator delete(v47);
                    }
                    goto LABEL_20;
                  }
                }
                else
                {
                  if (v40 >= *(_QWORD *)&v34)
                    v40 %= *(_QWORD *)&v34;
                  if (v40 != v36)
                    break;
                }
                v38 = (uint64_t *)*v38;
              }
              while (v38);
            }
          }
        }
LABEL_61:
        if (*(char *)(v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
        }
        else
        {
          v42 = *(_OWORD *)v20;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v42;
        }
        *(_OWORD *)v69 = 0u;
        v70 = 0u;
        v71 = 1065353216;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v69, (uint64_t)&__p, (uint64_t)&__p);
        LODWORD(v72.__r_.__value_.__l.__data_) = v28;
        std::unordered_set<std::string>::unordered_set((uint64_t)&v72.__r_.__value_.__l.__size_, (uint64_t)v69);
        std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::unordered_set<std::string>>>(a2, (unsigned int *)&v72, (uint64_t)&v72);
        v43 = (void **)v73;
        if (v73)
        {
          do
          {
            v48 = (void **)*v43;
            if (*((char *)v43 + 39) < 0)
              operator delete(v43[2]);
            operator delete(v43);
            v43 = v48;
          }
          while (v48);
        }
        size = (void *)v72.__r_.__value_.__l.__size_;
        v72.__r_.__value_.__l.__size_ = 0;
        if (size)
          operator delete(size);
        v45 = (void **)v70;
        if ((_QWORD)v70)
        {
          do
          {
            v49 = (void **)*v45;
            if (*((char *)v45 + 39) < 0)
              operator delete(v45[2]);
            operator delete(v45);
            v45 = v49;
          }
          while (v49);
        }
        v46 = v69[0];
        v69[0] = 0;
        if (v46)
          operator delete(v46);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v47 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
LABEL_20:
        MEMORY[0x19401CD90](v25, 0x1000C4052888210);
        goto LABEL_21;
      }
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
    goto LABEL_38;
  }
LABEL_87:
  if (v12)
  {
    v52 = (unint64_t *)&v12->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v54 = v65;
  if (v65)
  {
    v55 = v66;
    v56 = v65;
    if (v66 != v65)
    {
      do
      {
        v57 = (std::__shared_weak_count *)*(v55 - 1);
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v55 -= 2;
      }
      while (v55 != v54);
      v56 = v65;
    }
    v66 = v54;
    operator delete(v56);
  }
}

void sub_19103D6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37)
{
  uint64_t v37;
  void *v38;
  int v39;

  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a27 < 0)
    operator delete(__p);
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a12);
      std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::~__hash_table(v37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a12);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::~__hash_table(v37);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned int const,std::unordered_set<std::string>>::~pair(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACE88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACE88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrIN7E5RT_FB10AliasDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB10AliasDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrIN7E5RT_FB10AliasDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB10AliasDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  void *v4;
  void **v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void **)v2[5];
      if (v3)
      {
        do
        {
          v6 = (void **)*v3;
          if (*((char *)v3 + 39) < 0)
            operator delete(v3[2]);
          operator delete(v3);
          v3 = v6;
        }
        while (v6);
      }
      v4 = (void *)v2[3];
      v2[3] = 0;
      if (v4)
        operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_19103DB34(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 134218240;
  v4 = a1;
  v5 = 2048;
  v6 = a2;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "Cannot load E5 compiled for platform = 0x%llx on platform = 0x%llx.", (uint8_t *)&v3, 0x16u);
}

void sub_19103DBB8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = a2;
  if (v4 != a2)
  {
    do
    {
      v7 = *--v4;
      v6 = v7;
      *v4 = 0;
      if (v7)
      {
        if (*(char *)(v6 + 23) < 0)
          operator delete(*(void **)v6);
        MEMORY[0x19401CD90](v6, 0x1012C4004DB1A28);
      }
    }
    while (v4 != a2);
    v5 = *(void **)a1;
  }
  *(_QWORD *)(a1 + 8) = a2;
  operator delete(v5);
}

void std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector(void **a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v5 = (char *)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 -= 16;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

uint64_t e5rt_get_last_error_message()
{
  return _ZTWN4E5RT19thread_error_bufferE();
}

size_t E5RT::LogErrorMessage(uint64_t *a1, uint64_t *a2)
{
  NSObject *E5RTLog;
  char *v5;
  const char *v6;
  void *__p[2];
  char v9;

  v9 = 4;
  strcpy((char *)__p, "e5rt");
  E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR))
    sub_19103E084(a1, a2, E5RTLog);
  v5 = (char *)off_1EE213DF8();
  return strlcpy(v5, v6, 0x400uLL);
}

void sub_19103DD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::HandleE5RTException(E5RT *this, const E5RT::E5RTError *a2)
{
  E5RT::Status *Status;
  uint64_t *ErrorMessage;
  uint64_t *Location;

  Status = (E5RT::Status *)E5RT::E5RTError::GetStatus(this);
  ErrorMessage = (uint64_t *)E5RT::Status::GetErrorMessage(Status);
  Location = (uint64_t *)E5RT::E5RTError::GetLocation(this);
  E5RT::LogErrorMessage(ErrorMessage, Location);
  return E5RT::Status::GetErrorCode(Status);
}

uint64_t E5RT::HandleMemoryAllocationException(E5RT *this, const std::bad_alloc *a2)
{
  NSObject *E5RTLog;
  char *v4;
  const char *v5;
  void *__p[2];
  char v8;

  v8 = 4;
  strcpy((char *)__p, "e5rt");
  E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR))
    sub_19103E128((uint64_t)this);
  (*(void (**)(E5RT *))(*(_QWORD *)this + 16))(this);
  v4 = (char *)off_1EE213DF8();
  strlcpy(v4, v5, 0x400uLL);
  return 3;
}

void sub_19103DE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::HandleSTLException(E5RT *this, const std::exception *a2)
{
  NSObject *E5RTLog;
  char *v4;
  const char *v5;
  void *__p[2];
  char v8;

  v8 = 4;
  strcpy((char *)__p, "e5rt");
  E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR))
    sub_19103E194((uint64_t)this);
  (*(void (**)(E5RT *))(*(_QWORD *)this + 16))(this);
  v4 = (char *)off_1EE213DF8();
  strlcpy(v4, v5, 0x400uLL);
  return 11;
}

void sub_19103DF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::HandleUnknownException(E5RT *this)
{
  NSObject *E5RTLog;
  void *__p[2];
  char v4;

  v4 = 4;
  strcpy((char *)__p, "e5rt");
  E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR))
    sub_19103E200(E5RTLog);
  strcpy((char *)off_1EE213DF8(), "E5RT encountered an unknown exception.");
  return 11;
}

void sub_19103E018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZTWN4E5RT19thread_error_bufferE()
{
  return off_1EE213DF8();
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2_0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void sub_19103E084(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  __int16 v7;
  uint64_t *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  v5 = 136315394;
  v6 = v3;
  v7 = 2080;
  v8 = v4;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "%s @ %s", (uint8_t *)&v5, 0x16u);
}

void sub_19103E128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_2_0(a1);
  OUTLINED_FUNCTION_0_0(&dword_190DAF000, v1, v2, "E5RT encountered a memory allocation exception. msg = %s.", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_4();
}

void sub_19103E194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_2_0(a1);
  OUTLINED_FUNCTION_0_0(&dword_190DAF000, v1, v2, "E5RT encountered an STL exception. msg = %s.", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_4();
}

void sub_19103E200(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "E5RT encountered unknown exception.", v1, 2u);
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v13;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    v13 = v5;
    v6 = a1[4];
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v13);
  }
  v8 = (uint64_t **)(a1 + 4);
  v7 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v7 == a1 + 1)
  {
    v9 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_9;
    v9 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v9))();
LABEL_9:
  v10 = a2 + 4;
  v11 = (uint64_t *)a2[4];
  if (!v11)
  {
    v10 = a1 + 4;
    goto LABEL_13;
  }
  if (v11 != a2 + 1)
  {
    *v8 = v11;
LABEL_13:
    *v10 = 0;
    return a1;
  }
  *v8 = a1 + 1;
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v10 + 24))(*v10, a1 + 1);
  return a1;
}

unint64_t E5Common::AutoMmapPtr::GetSpan(E5Common::AutoMmapPtr *this, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  std::runtime_error *exception;

  if (!a3 || ((v3 = *((_QWORD *)this + 7), v3 > a2) ? (v4 = a3 + a2 > v3) : (v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
  }
  return *((_QWORD *)this + 6) + a2;
}

void sub_19103E4D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19103E4EC()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_19103E500(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DD0680;
  result[1] = v3;
  return result;
}

uint64_t sub_19103E534(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DD0680;
  a2[1] = v2;
  return result;
}

uint64_t sub_19103E550(uint64_t a1, void **a2)
{
  return munmap(*a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_19103E560(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8E5Common11AutoMmapPtrC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_11"
                     "ProtectionsENS0_7MapTypeExE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8E5Common11AutoMmapPtrC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorI"
                                "cEEEENS0_11ProtectionsENS0_7MapTypeExE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8E5Common11AutoMmapPtrC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_11ProtectionsENS0_7MapTypeExE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8E5Common11AutoMmapPtrC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_11ProtectionsENS0_7MapTypeExE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19103E5CC()
{
  return &unk_1E2DD06E0;
}

void E5RT::E5RTError::Impl::~Impl(void **this)
{
  E5RT::Status::~Status((E5RT::Status *)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

{
  E5RT::Status::~Status((E5RT::Status *)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *E5RT::E5RTError::Impl::Impl(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  E5RT::Status::Status(&this[1], a3);
  return this;
}

{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  E5RT::Status::Status(&this[1], a3);
  return this;
}

void sub_19103E6C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_19103E73C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5RTError::Impl::GetStatus(E5RT::E5RTError::Impl *this)
{
  return (uint64_t)this + 24;
}

void E5RT::E5RTError::~E5RTError(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)off_1E2D5C010;
  v2 = this[1].__vftable;
  this[1].__vftable = 0;
  if (v2)
  {
    E5RT::Status::~Status((E5RT::Status *)&v2[1]);
    if (SHIBYTE(v2->what) < 0)
      operator delete(v2->~runtime_error);
    MEMORY[0x19401CD90](v2, 0x1032C402ED93987);
  }
  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)off_1E2D5C010;
  v2 = this[1].__vftable;
  this[1].__vftable = 0;
  if (v2)
  {
    E5RT::Status::~Status((E5RT::Status *)&v2[1]);
    if (SHIBYTE(v2->what) < 0)
      operator delete(v2->~runtime_error);
    MEMORY[0x19401CD90](v2, 0x1032C402ED93987);
  }
  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)off_1E2D5C010;
  v2 = this[1].__vftable;
  this[1].__vftable = 0;
  if (v2)
  {
    E5RT::Status::~Status((E5RT::Status *)&v2[1]);
    if (SHIBYTE(v2->what) < 0)
      operator delete(v2->~runtime_error);
    MEMORY[0x19401CD90](v2, 0x1032C402ED93987);
  }
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401CD90);
}

uint64_t *std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::E5RTError::Impl>>::~propagate_const(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Status::~Status((E5RT::Status *)(v2 + 24));
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x19401CD90](v2, 0x1032C402ED93987);
  }
  return a1;
}

std::runtime_error *E5RT::E5RTError::E5RTError(std::runtime_error *a1, uint64_t a2, E5RT::Status *this)
{
  const std::string *ErrorMessage;
  uint64_t *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;

  ErrorMessage = (const std::string *)E5RT::Status::GetErrorMessage(this);
  std::runtime_error::runtime_error(a1, ErrorMessage);
  a1->__vftable = (std::runtime_error_vtbl *)off_1E2D5C010;
  a1[1].__vftable = 0;
  v7 = (uint64_t *)&a1[1];
  v8 = (std::string *)operator new();
  v9 = v8;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  E5RT::Status::Status(&v9[1], this);
  v10 = *v7;
  *v7 = (uint64_t)v9;
  if (v10)
  {
    E5RT::Status::~Status((E5RT::Status *)(v10 + 24));
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x19401CD90](v10, 0x1032C402ED93987);
  }
  return a1;
}

void sub_19103E9F8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t *v2;
  uint64_t v3;

  MEMORY[0x19401CD90](v3, 0x1032C402ED93987);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::E5RTError::Impl>>::~propagate_const(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_19103EA44(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t *v2;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::E5RTError::Impl>>::~propagate_const(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5RTError::GetStatus(E5RT::E5RTError *this)
{
  return *((_QWORD *)this + 2) + 24;
}

uint64_t E5RT::E5RTError::GetLocation(E5RT::E5RTError *this)
{
  return *((_QWORD *)this + 2);
}

const char *E5RT::GetErrorCodeString(int a1)
{
  if ((a1 - 1) > 0xC)
    return "OK";
  else
    return off_1E2DD06F0[a1 - 1];
}

os_log_t sub_19103EAA0(uint64_t a1)
{
  const char *v1;
  os_log_t result;

  v1 = *(const char **)(a1 + 32);
  if (v1[23] < 0)
    v1 = *(const char **)v1;
  result = os_log_create("com.apple.e5rt", v1);
  qword_1EE216640 = (uint64_t)result;
  return result;
}

void E5RT::MarkAllFilesAsAPFSPurgeable(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::__shared_weak_count *v3;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  const std::__fs::filesystem::directory_entry *v11;
  std::string *p_p;
  int v13;
  int v14;
  void *v15;
  std::__shared_weak_count *cntrl;
  uint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  void *exception;
  uint64_t v32;
  std::__fs::filesystem::recursive_directory_iterator v33;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v34;
  std::__shared_weak_count *v35;
  BOOL v36;
  _BYTE v37[8];
  std::string v38;
  std::string v39;
  __int128 v40;
  std::string::size_type v41;
  uint64_t v42;
  std::string p;

  std::__fs::filesystem::__status(this, 0);
  if (p.__r_.__value_.__s.__data_[0] != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&p, "MarkAllFilesAsAPFSPurgeable");
    std::string::basic_string[abi:ne180100]<0>(&v40, "Expect directory path as input.");
    E5RT::Status::Status(&v39, 1, &v40);
    E5RT::E5RTError::E5RTError(exception, &p, &v39);
  }
  MEMORY[0x19401CB80](&v34, this, 0, 0);
  v4 = v34;
  v3 = v35;
  if (!v35)
  {
    v33.__imp_.__ptr_ = v34;
    v33.__imp_.__cntrl_ = 0;
    v33.__rec_ = v36;
LABEL_13:
    v32 = 0;
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v35->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = v35;
  v33.__imp_.__ptr_ = v4;
  v33.__imp_.__cntrl_ = v3;
  v33.__rec_ = v36;
  if (!v35)
    goto LABEL_13;
  v8 = (unint64_t *)&v35->__shared_owners_;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v32 = 0;
  do
    v10 = __ldaxr(v8);
  while (__stlxr(v10 - 1, v8));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  while (v33.__imp_.__ptr_)
  {
    v11 = std::__fs::filesystem::recursive_directory_iterator::__dereference(&v33);
    std::__fs::filesystem::__status(&v11->__p_, 0);
    if (p.__r_.__value_.__s.__data_[0] != 2)
    {
      if (SHIBYTE(v11->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&p, v11->__p_.__pn_.__r_.__value_.__l.__data_, v11->__p_.__pn_.__r_.__value_.__l.__size_);
      else
        p = (std::string)v11->__p_;
      if ((p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &p;
      else
        p_p = (std::string *)p.__r_.__value_.__r.__words[0];
      v13 = open((const char *)p_p, 0, v32);
      if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(p.__r_.__value_.__l.__data_);
      if (v13 < 0)
      {
        v22 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&p, "operator()");
        if (SHIBYTE(v11->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v38, v11->__p_.__pn_.__r_.__value_.__l.__data_, v11->__p_.__pn_.__r_.__value_.__l.__size_);
        else
          v38 = (std::string)v11->__p_;
        v23 = std::string::insert(&v38, 0, "Unable to open file at ");
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v39, " before marking as APFS purgeable.");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v41 = v25->__r_.__value_.__r.__words[2];
        v40 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v42, 2, &v40);
        E5RT::E5RTError::E5RTError(v22, &p, &v42);
      }
      v42 = 67589;
      v14 = ffsctl(v13, 0xC0084A44uLL, &v42, 0);
      close(v13);
      if (v14)
      {
        v15 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&p, "operator()");
        if (SHIBYTE(v11->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v38, v11->__p_.__pn_.__r_.__value_.__l.__data_, v11->__p_.__pn_.__r_.__value_.__l.__size_);
        else
          v38 = (std::string)v11->__p_;
        v27 = std::string::insert(&v38, 0, "Failed to mark file at ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v39, " as APFS purgeable.");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v41 = v29->__r_.__value_.__r.__words[2];
        v40 = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(v37, 2, &v40);
        E5RT::E5RTError::E5RTError(v15, &p, v37);
      }
    }
    std::__fs::filesystem::recursive_directory_iterator::__increment(&v33, 0);
  }
  cntrl = v33.__imp_.__cntrl_;
  if (v33.__imp_.__cntrl_)
  {
    v17 = &v33.__imp_.__cntrl_->__shared_owners_;
    do
      v18 = __ldaxr((unint64_t *)v17);
    while (__stlxr(v18 - 1, (unint64_t *)v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v19 = v35;
  if (v35)
  {
    v20 = (unint64_t *)&v35->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19103EF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 73) < 0)
    operator delete(*(void **)(v31 - 96));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ReadAneCacheUrlIdentifier@<X0>(const std::__fs::filesystem::path *this@<X0>, _QWORD *a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v4;
  std::string *v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::__fs::filesystem::path::__string_view v8;
  int v9;
  void *exception;
  _BYTE v12[8];
  std::__fs::filesystem::path v13;
  std::string __dst[17];
  _QWORD v15[20];

  v15[19] = *MEMORY[0x1E0C80C00];
  v4 = std::__fs::filesystem::path::__extension(this);
  if (v4.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4.__size_ >= 0x17)
  {
    v6 = (v4.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4.__size_ | 7) != 0x17)
      v6 = v4.__size_ | 7;
    v7 = v6 + 1;
    v5 = (std::string *)operator new(v6 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v4.__size_;
    __dst[0].__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v4.__size_;
  v5 = __dst;
  if (v4.__size_)
LABEL_8:
    memmove(v5, v4.__data_, v4.__size_);
  v5->__r_.__value_.__s.__data_[v4.__size_] = 0;
  v13 = (std::__fs::filesystem::path)__dst[0];
  memset(__dst, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__dst, (std::string *)".anehash", (std::string *)"");
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8.__data_ = (const std::string_view::value_type *)__dst;
  else
    v8.__data_ = (const std::string_view::value_type *)__dst[0].__r_.__value_.__r.__words[0];
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8.__size_ = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
  else
    v8.__size_ = __dst[0].__r_.__value_.__l.__size_;
  v9 = std::__fs::filesystem::path::__compare(&v13, v8);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if (!v9)
        goto LABEL_18;
LABEL_23:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__dst, "ReadAneCacheUrlIdentifier");
      std::string::basic_string[abi:ne180100]<0>(&v13, "Invalid file type passed to ReadAneCacheUrlIdentifier");
      E5RT::Status::Status(v12, 1, &v13);
      E5RT::E5RTError::E5RTError(exception, __dst, v12);
    }
  }
  else if ((SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v13.__pn_.__r_.__value_.__l.__data_);
  if (v9)
    goto LABEL_23;
LABEL_18:
  std::ifstream::basic_ifstream(__dst);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)__dst, (uint64_t)a2);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__dst + *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__dst[1].__r_.__value_.__r.__words[1]+ *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) | 4);
  __dst[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)__dst[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401C8BC](&__dst[0].__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  return MEMORY[0x19401CCD0](v15);
}

void sub_19103F3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19103F478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x19401C8EC](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_16;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_19103F668(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19103F634);
  }
  __cxa_rethrow();
}

void sub_19103F6CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x19401C8BC](a1 + 2);
  std::istream::~istream();
  MEMORY[0x19401CCD0](a1 + 53);
  return a1;
}

uint64_t E5RT::IsFileEIR(std::string *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;
  std::string v6;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    v6 = *this;
  v5 = 13;
  strcpy((char *)__p, ".espresso.net");
  v2 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)&v6, (unsigned __int8 *)__p);
  if (v5 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v2;
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return v2;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return v2;
}

void sub_19103F7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::IsFileMILHash(std::string *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;
  std::string v6;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    v6 = *this;
  v5 = 8;
  strcpy((char *)__p, ".milhash");
  v2 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)&v6, (unsigned __int8 *)__p);
  if (v5 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v2;
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return v2;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return v2;
}

void sub_19103F8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void E5RT::RemoveAll(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  NSObject *E5RTLog;
  void *__p[2];
  char v5;
  std::error_code __ec;

  std::__fs::filesystem::__status(this, 0);
  if (LOBYTE(__p[0]))
  {
    if (LOBYTE(__p[0]) != 255)
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      std::__fs::filesystem::__remove_all(this, &__ec);
      if (__ec.__val_)
      {
        v5 = 4;
        strcpy((char *)__p, "e5rt");
        E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
        if (v5 < 0)
          operator delete(__p[0]);
        if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR))
          sub_1910408E4((uint64_t *)this, &__ec.__val_, E5RTLog);
      }
    }
  }
}

void sub_19103F9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19103FA08()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_19103FA1C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DD0788;
  result[1] = v3;
  return result;
}

uint64_t sub_19103FA50(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DD0788;
  a2[1] = v2;
  return result;
}

uint64_t sub_19103FA6C(uint64_t a1, MIL::IRObject *a2)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  MIL::IRArgument **v12;
  MIL::IRArgument **v13;
  uint64_t Value;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t prime;
  void *v20;
  BOOL v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD **v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *v32;
  size_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  uint64_t v39;
  void **v40;
  void **v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  BOOL v49;
  _QWORD *v51;
  void *v52[2];
  char v53;
  void *__p[2];
  __int128 v55;
  float v56;
  void *v57[2];
  char v58;

  v4 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 64))(a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4))
  {
    for (i = *(uint64_t ***)(MIL::IRObject::GetAttributes(a2) + 16); i; i = (uint64_t **)*i)
    {
      v6 = (*(uint64_t (**)(uint64_t *))(*i[5] + 40))(i[5]);
      if (!v6)
        continue;
      v7 = v6;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6))
        continue;
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
      v9 = *(_QWORD *)(a1 + 8);
      v58 = 4;
      strcpy((char *)v57, "path");
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v8, (uint64_t)v57))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      MIL::IRValue::GetScalar<std::string>();
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v9, (uint64_t)__p, (uint64_t)__p);
      if (SBYTE7(v55) < 0)
      {
        operator delete(__p[0]);
        if (v58 < 0)
          goto LABEL_11;
      }
      else if (v58 < 0)
      {
LABEL_11:
        operator delete(v57[0]);
      }
    }
  }
  v10 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 160))(a2);
  v11 = (_QWORD *)*v10;
  v51 = v10 + 1;
  if ((_QWORD *)*v10 != v10 + 1)
  {
    do
    {
      v13 = (MIL::IRArgument **)v11[7];
      v12 = (MIL::IRArgument **)v11[8];
      while (v13 != v12)
      {
        if (!(*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)*v13 + 24))(*v13))
          goto LABEL_16;
        Value = MIL::IRArgument::GetValue(*v13);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Value + 40))(Value);
        if (!v15)
          goto LABEL_16;
        v16 = v15;
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15))
          goto LABEL_16;
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16);
        v18 = v17;
        *(_OWORD *)__p = 0u;
        v55 = 0u;
        v56 = *(float *)(v17 + 32);
        prime = *(_QWORD *)(v17 + 8);
        if (prime == 1)
        {
          prime = 2;
          goto LABEL_39;
        }
        if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(*(_QWORD *)(v17 + 8));
          v20 = __p[1];
          v21 = (void *)prime >= __p[1];
          if ((void *)prime > __p[1])
            goto LABEL_38;
        }
        else
        {
          v20 = 0;
          v21 = 1;
          if (prime)
            goto LABEL_38;
        }
        if (v21)
          goto LABEL_63;
        v22 = vcvtps_u32_f32((float)*((unint64_t *)&v55 + 1) / v56);
        if ((unint64_t)v20 < 3
          || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
        {
          v22 = std::__next_prime(v22);
        }
        else
        {
          v24 = 1 << -(char)__clz(v22 - 1);
          if (v22 >= 2)
            v22 = v24;
        }
        if (prime <= v22)
          prime = v22;
        if (prime >= (unint64_t)v20)
          goto LABEL_63;
        if (prime)
        {
LABEL_38:
          if (prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
LABEL_39:
          v25 = operator new(8 * prime);
          v26 = __p[0];
          __p[0] = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v27++) = 0;
          while (prime != v27);
          v28 = (_QWORD **)v55;
          if (!(_QWORD)v55)
            goto LABEL_63;
          v29 = *(_QWORD *)(v55 + 8);
          v30 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v31 = v29 & v30;
            *((_QWORD *)__p[0] + v31) = &v55;
            while (1)
            {
              v32 = *v28;
              if (!*v28)
                break;
              v33 = v32[1] & v30;
              if (v33 == v31)
              {
                v28 = (_QWORD **)*v28;
              }
              else if (*((_QWORD *)__p[0] + v33))
              {
                *v28 = (_QWORD *)*v32;
                v34 = 8 * v33;
                *v32 = **(_QWORD **)((char *)__p[0] + v34);
                **(_QWORD **)((char *)__p[0] + v34) = v32;
              }
              else
              {
                *((_QWORD *)__p[0] + v33) = v28;
                v28 = (_QWORD **)v32;
                v31 = v33;
              }
            }
            goto LABEL_63;
          }
          if (v29 >= prime)
            v29 %= prime;
          *((_QWORD *)__p[0] + v29) = &v55;
          v35 = *v28;
          if (!*v28)
          {
LABEL_63:
            v38 = *(_QWORD **)(v18 + 16);
            if (!v38)
              goto LABEL_65;
            do
            {
LABEL_64:
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>((uint64_t)__p, (uint64_t)(v38 + 2), (uint64_t)(v38 + 2));
              v38 = (_QWORD *)*v38;
            }
            while (v38);
            goto LABEL_65;
          }
          while (1)
          {
LABEL_58:
            v37 = v35[1];
            if (v37 >= prime)
              v37 %= prime;
            if (v37 == v29)
              goto LABEL_57;
            if (*((_QWORD *)__p[0] + v37))
              break;
            *((_QWORD *)__p[0] + v37) = v28;
            v28 = (_QWORD **)v35;
            v35 = (_QWORD *)*v35;
            v29 = v37;
            if (!v35)
              goto LABEL_63;
          }
          *v28 = (_QWORD *)*v35;
          v36 = 8 * v37;
          *v35 = **(_QWORD **)((char *)__p[0] + v36);
          **(_QWORD **)((char *)__p[0] + v36) = v35;
          v35 = v28;
LABEL_57:
          v28 = (_QWORD **)v35;
          v35 = (_QWORD *)*v35;
          if (!v35)
            goto LABEL_63;
          goto LABEL_58;
        }
        v46 = __p[0];
        __p[0] = 0;
        if (v46)
          operator delete(v46);
        __p[1] = 0;
        v38 = *(_QWORD **)(v18 + 16);
        if (v38)
          goto LABEL_64;
LABEL_65:
        v39 = *(_QWORD *)(a1 + 8);
        v53 = 4;
        strcpy((char *)v52, "path");
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(__p, (uint64_t)v52))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        MIL::IRValue::GetScalar<std::string>();
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v39, (uint64_t)v57, (uint64_t)v57);
        if (v58 < 0)
        {
          operator delete(v57[0]);
          if ((v53 & 0x80000000) == 0)
          {
LABEL_68:
            v40 = (void **)v55;
            if ((_QWORD)v55)
            {
              do
              {
                while (1)
                {
LABEL_75:
                  v41 = (void **)*v40;
                  v42 = (std::__shared_weak_count *)v40[6];
                  if (v42)
                  {
                    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
                    do
                      v44 = __ldaxr(p_shared_owners);
                    while (__stlxr(v44 - 1, p_shared_owners));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                  }
                  if (*((char *)v40 + 39) < 0)
                    break;
                  operator delete(v40);
                  v40 = v41;
                  if (!v41)
                    goto LABEL_81;
                }
                operator delete(v40[2]);
                operator delete(v40);
                v40 = v41;
              }
              while (v41);
            }
            goto LABEL_81;
          }
        }
        else if ((v53 & 0x80000000) == 0)
        {
          goto LABEL_68;
        }
        operator delete(v52[0]);
        v40 = (void **)v55;
        if ((_QWORD)v55)
          goto LABEL_75;
LABEL_81:
        v45 = __p[0];
        __p[0] = 0;
        if (v45)
          operator delete(v45);
LABEL_16:
        v13 += 2;
      }
      v47 = (_QWORD *)v11[1];
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = (_QWORD *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (_QWORD *)v11[2];
          v49 = *v48 == (_QWORD)v11;
          v11 = v48;
        }
        while (!v49);
      }
      v11 = v48;
    }
    while (v48 != v51);
  }
  return 1;
}

void sub_191040010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1910401B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT20GetPathsToMILWeightsIN3MIL9IRProgramEEENSt3__113unordered_setINS3_12basic_stringIcNS3_11ch"
                     "ar_traitsIcEENS3_9allocatorIcEEEENS3_4hashISA_EENS3_8equal_toISA_EENS8_ISA_EEEERKT_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT20GetPathsToMILWeightsIN3MIL9IRProgramEEENSt3__113unordered_setINS3_12basic_strin"
                                "gIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_4hashISA_EENS3_8equal_toISA_EENS8_ISA_EEEERKT_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT20GetPathsToMILWeightsIN3MIL9IRProgramEEENSt3__113unordered_setINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_4hashISA_EENS3_8equal_toISA_EENS8_ISA_EEEERKT_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT20GetPathsToMILWeightsIN3MIL9IRProgramEEENSt3__113unordered_setINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_4hashISA_EENS3_8equal_toISA_EENS8_ISA_EEEERKT_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191040224()
{
  return &unk_1E2DD07E8;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::string *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x38uLL);
  v45[0] = v25;
  v45[1] = a1 + 16;
  v46 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v27 = *(_QWORD *)(a3 + 32);
  v25[5] = *(_QWORD *)(a3 + 24);
  v25[6] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v34 = 1;
    if (v11 >= 3)
      v34 = (v11 & (v11 - 1)) != 0;
    v35 = v34 | (2 * v11);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_71:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v42 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
      else
      {
        v3 = v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
    }
    else
    {
      v3 = v42 & v10;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v10));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_60;
    }
LABEL_84:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v43 >= v11)
          v43 %= v11;
      }
      else
      {
        v43 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_95;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_84;
LABEL_60:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_95:
  v14 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19104068C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910406A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910408E4(uint64_t *a1, int *a2, os_log_t log)
{
  uint64_t *v3;
  int v4;
  int v5;
  uint64_t *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = *a2;
  v5 = 136315394;
  v6 = v3;
  v7 = 1024;
  v8 = v4;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "remove_all() of path = %s failed with error code = %d\n", (uint8_t *)&v5, 0x12u);
}

uint64_t E5RT::Status::Impl::Impl(uint64_t this)
{
  *(_BYTE *)(this + 23) = 0;
  *(_BYTE *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_BYTE *)(this + 23) = 0;
  *(_BYTE *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

std::string *E5RT::Status::Impl::Impl(std::string *this, int a2, __int128 *a3)
{
  std::string *v4;
  __int128 v5;

  v4 = this;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    LODWORD(v4[1].__r_.__value_.__l.__data_) = a2;
    return v4;
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
    LODWORD(this[1].__r_.__value_.__l.__data_) = a2;
  }
  return this;
}

{
  std::string *v4;
  __int128 v5;

  v4 = this;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    LODWORD(v4[1].__r_.__value_.__l.__data_) = a2;
    return v4;
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
    LODWORD(this[1].__r_.__value_.__l.__data_) = a2;
  }
  return this;
}

void E5RT::Status::Impl::~Impl(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *E5RT::Status::Impl::Impl(std::string *this, const E5RT::Status::Impl *a2)
{
  std::string *v3;
  __int128 v4;

  v3 = this;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    LODWORD(v3[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
    return v3;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  }
  return this;
}

{
  std::string *v3;
  __int128 v4;

  v3 = this;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    LODWORD(v3[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
    return v3;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  }
  return this;
}

__n128 E5RT::Status::Impl::Impl(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = a2[1].n128_u32[2];
  return result;
}

{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = a2[1].n128_u32[2];
  return result;
}

uint64_t E5RT::Status::Impl::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t E5RT::Status::Impl::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  return a1;
}

uint64_t E5RT::Status::Impl::GetErrorCode(E5RT::Status::Impl *this)
{
  return *((unsigned int *)this + 6);
}

BOOL E5RT::Status::Impl::Success(E5RT::Status::Impl *this)
{
  return *((_DWORD *)this + 6) == 0;
}

void sub_191040D10(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x19401CD90](v2, 0x1012C405C87E9CELL);
  }
  return a1;
}

std::string **E5RT::Status::Status(std::string **a1, int a2, uint64_t a3)
{
  std::string *v6;
  std::string *v7;
  std::string *v8;

  *a1 = 0;
  v6 = (std::string *)operator new();
  v7 = v6;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  LODWORD(v7[1].__r_.__value_.__l.__data_) = a2;
  v8 = *a1;
  *a1 = v7;
  if (v8)
  {
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8->__r_.__value_.__l.__data_);
    MEMORY[0x19401CD90](v8, 0x1012C405C87E9CELL);
  }
  return a1;
}

void sub_191040E28(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x19401CD90](v2, 0x1012C405C87E9CELL);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

void sub_191040E54(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

E5RT::Status *E5RT::Status::Status(E5RT::Status *this, const E5RT::Status *a2)
{
  __int128 *v3;
  int v4;
  std::string *v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = 0;
  v3 = *(__int128 **)a2;
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 24);
  v5 = (std::string *)operator new();
  v6 = v5;
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v7 = *v3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v6[1].__r_.__value_.__l.__data_) = v4;
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = v6;
  if (v8)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x19401CD90](v8, 0x1012C405C87E9CELL);
  }
  return this;
}

void sub_191040F1C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x19401CD90](v2, 0x1012C405C87E9CELL);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

void sub_191040F48(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Status::GetErrorCode(E5RT::Status *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 24);
}

uint64_t E5RT::Status::GetErrorMessage(E5RT::Status *this)
{
  return *(_QWORD *)this;
}

std::string **E5RT::Status::Status(std::string **a1, __int128 **a2)
{
  __int128 *v3;
  int v4;
  std::string *v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;

  *a1 = 0;
  v3 = *a2;
  v4 = *((_DWORD *)*a2 + 6);
  v5 = (std::string *)operator new();
  v6 = v5;
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v7 = *v3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v6[1].__r_.__value_.__l.__data_) = v4;
  v8 = *a1;
  *a1 = v6;
  if (v8)
  {
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8->__r_.__value_.__l.__data_);
    MEMORY[0x19401CD90](v8, 0x1012C405C87E9CELL);
  }
  return a1;
}

void sub_191041024(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x19401CD90](v2, 0x1012C405C87E9CELL);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

void sub_191041050(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

std::string **E5RT::Status::operator=(std::string **a1, __int128 **a2)
{
  __int128 *v3;
  int v4;
  std::string *v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;

  v3 = *a2;
  v4 = *((_DWORD *)*a2 + 6);
  v5 = (std::string *)operator new();
  v6 = v5;
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v7 = *v3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v6[1].__r_.__value_.__l.__data_) = v4;
  v8 = *a1;
  *a1 = v6;
  if (v8)
  {
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8->__r_.__value_.__l.__data_);
    MEMORY[0x19401CD90](v8, 0x1012C405C87E9CELL);
  }
  return a1;
}

{
  __int128 *v3;
  int v4;
  std::string *v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;

  v3 = *a2;
  v4 = *((_DWORD *)*a2 + 6);
  v5 = (std::string *)operator new();
  v6 = v5;
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v7 = *v3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(v6[1].__r_.__value_.__l.__data_) = v4;
  v8 = *a1;
  *a1 = v6;
  if (v8)
  {
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8->__r_.__value_.__l.__data_);
    MEMORY[0x19401CD90](v8, 0x1012C405C87E9CELL);
  }
  return a1;
}

void sub_191041168(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void sub_191041238(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void sub_19104125C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x19401CD90);
}

void *E5DB::CopySurface(E5DB *this, const E5RT::SurfaceDescriptor *a2, const E5RT::SurfaceObject *a3, const E5RT::SurfaceDescriptor *a4, E5RT::SurfaceObject *a5)
{
  void *v7;
  void (**v8)(E5RT::IOSurfaceObject *__hidden);
  void *v9;
  __IOSurface *v10;
  void *BaseAddress;
  void *v12;
  void *v13;
  size_t AllocSize;
  std::runtime_error *exception;

  if (E5RT::SurfaceDescriptor::operator!=((uint64_t)this, (uint64_t)a3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found surface ports with different descriptors.");
    goto LABEL_9;
  }
  v7 = E5RT::MemoryObject::Surface(a2);
  v8 = E5RT::SurfaceObject::GetHandle<__IOSurface *>((uint64_t)v7);
  v9 = E5RT::MemoryObject::Surface(a4);
  v10 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v9);
  BaseAddress = IOSurfaceGetBaseAddress((IOSurfaceRef)v8);
  v12 = IOSurfaceGetBaseAddress(v10);
  if (!BaseAddress || (v13 = v12) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a null pointer to IOSurface base address.");
    goto LABEL_9;
  }
  AllocSize = IOSurfaceGetAllocSize((IOSurfaceRef)v8);
  if (AllocSize != IOSurfaceGetAllocSize(v10))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found mismatching sizes of two surface buffers.");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return memcpy(v13, BaseAddress, AllocSize);
}

void sub_1910413A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910413B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910413C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5DB::CopyTensor(E5DB *this, const E5RT::TensorDescriptor *a2, const E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, E5RT::BufferObject *a5)
{
  E5RT::BufferObject *v9;
  std::runtime_error *exception;
  E5RT::TensorDataType::Impl *v11[2];
  E5RT::TensorDataType::Impl *v12[2];

  E5RT::TensorDescriptor::GetTensorDataType(this, (E5RT::TensorDataType *)v12);
  E5RT::TensorDescriptor::GetTensorDataType(a3, (E5RT::TensorDataType *)v11);
  if ((E5RT::TensorDataType::GetNumComponents(v12) > 1
     || E5RT::TensorDataType::GetNumComponents(v11) >= 2)
    && E5RT::operator!=((uint64_t)v12, (uint64_t)v11))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Copying tensors with more than one components is only supported between equivalent tensor types.");
    goto LABEL_64;
  }
  if (E5RT::operator==((uint64_t)v12, (uint64_t)v11))
  {
    E5RT::CopyTensorFromSrcToDest(this, a2, a3, a4, v9);
    goto LABEL_6;
  }
  if (E5RT::TensorDataType::IsType<float>((uint64_t)v11))
  {
    if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIfDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v12))
    {
      E5RT::TensorCast<float,unsigned int>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<int>((uint64_t)v12))
    {
      E5RT::TensorCast<float,int>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v12))
    {
      E5RT::TensorCast<float,unsigned short>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<short>((uint64_t)v12))
    {
      E5RT::TensorCast<float,short>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v12))
    {
      E5RT::TensorCast<float,unsigned char>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v12))
    {
      E5RT::TensorCast<float,signed char>(a3, a4, this, a2);
    }
    goto LABEL_6;
  }
  if (E5RT::TensorDataType::IsType<float>((uint64_t)v12))
  {
    if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v11))
    {
      _ZN4E5RT10TensorCastIDF16_fEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v11))
    {
      E5RT::TensorCast<unsigned int,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<int>((uint64_t)v11))
    {
      E5RT::TensorCast<int,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v11))
    {
      E5RT::TensorCast<unsigned short,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<short>((uint64_t)v11))
    {
      E5RT::TensorCast<short,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v11))
    {
      E5RT::TensorCast<unsigned char,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v11))
    {
      E5RT::TensorCast<signed char,float>(a3, a4, this, a2);
    }
    goto LABEL_6;
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v11))
  {
    if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_jEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<int>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_iEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_tEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<short>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_sEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_hEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_aEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    goto LABEL_6;
  }
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v12))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found unsupported tensor cast.");
LABEL_64:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIjDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<int>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIiDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastItDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<short>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIsDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIhDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIaDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
LABEL_6:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v11);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v12);
}

void sub_1910418B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a11);
  _Unwind_Resume(a1);
}

void sub_1910418DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_1910418F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a11);
  _Unwind_Resume(a1);
}

void E5DB::CopyPort(E5DB *this, const E5RT::IOPort *a2, E5RT::IOPort *a3)
{
  E5DB *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const E5RT::BufferObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  E5DB *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const E5RT::SurfaceObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const E5RT::TensorDescriptor *v21;
  const E5RT::TensorDescriptor *v22;
  E5RT::BufferObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const E5RT::SurfaceDescriptor *v30;
  const E5RT::SurfaceDescriptor *v31;
  E5RT::SurfaceObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  std::runtime_error *exception;
  E5RT::MemoryObject *v38;
  std::__shared_weak_count *v39;
  E5RT::OperandDescriptor *v40;
  std::__shared_weak_count *v41;

  E5RT::IOPort::GetPortDescriptor(this, &v40);
  v5 = (E5DB *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v40);
  v6 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  E5RT::IOPort::GetPortDescriptor(a2, &v40);
  v9 = (const E5RT::BufferObject *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v40);
  v10 = v41;
  if (v41)
  {
    v11 = (unint64_t *)&v41->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  E5RT::IOPort::GetPortDescriptor(this, &v40);
  v13 = (E5DB *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v40);
  v14 = v41;
  if (v41)
  {
    v15 = (unint64_t *)&v41->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  E5RT::IOPort::GetPortDescriptor(a2, &v40);
  v17 = (const E5RT::SurfaceObject *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v40);
  v18 = v41;
  if (!v41)
    goto LABEL_20;
  v19 = (unint64_t *)&v41->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v5)
      goto LABEL_32;
  }
  else
  {
LABEL_20:
    if (!v5)
      goto LABEL_32;
  }
  if (v9)
  {
    E5RT::IOPort::GetMemoryObject(this, &v40);
    v21 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v40);
    E5RT::IOPort::GetMemoryObject(a2, &v38);
    v22 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v38);
    E5DB::CopyTensor(v5, v21, v9, v22, v23);
    v24 = v39;
    if (v39)
    {
      v25 = (unint64_t *)&v39->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v41;
    if (v41)
    {
      v28 = (unint64_t *)&v41->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
LABEL_43:
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      return;
    }
    return;
  }
LABEL_32:
  if ((unint64_t)v5 | (unint64_t)v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a tensor port and a non-tensor port.");
    goto LABEL_48;
  }
  if (!v13 || !v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found unsupported type of ports.");
LABEL_48:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::IOPort::GetMemoryObject(this, &v40);
  v30 = (const E5RT::SurfaceDescriptor *)E5RT::MemoryObject::Surface(v40);
  E5RT::IOPort::GetMemoryObject(a2, &v38);
  v31 = (const E5RT::SurfaceDescriptor *)E5RT::MemoryObject::Surface(v38);
  E5DB::CopySurface(v13, v30, v17, v31, v32);
  v33 = v39;
  if (v39)
  {
    v34 = (unint64_t *)&v39->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v27 = v41;
  if (v41)
  {
    v36 = (unint64_t *)&v41->__shared_owners_;
    do
      v29 = __ldaxr(v36);
    while (__stlxr(v29 - 1, v36));
    goto LABEL_43;
  }
}

void sub_191041C38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191041C4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191041C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191041C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191041C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191041C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191041CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_191041CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191041CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191041CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191041D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5DB::MakeCandidateSurfacePort(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  E5RT::SurfaceDescriptor *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int SurfaceFormat;
  uint64_t SurfaceWidth;
  uint64_t SurfaceHeight;
  std::runtime_error *exception;
  std::runtime_error *v15;

  v6 = (E5RT::SurfaceDescriptor *)sub_191041EAC(a1, (_QWORD *)*a2);
  v7 = (_QWORD *)*a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) >= 2)
  {
    v8 = 1;
    v9 = 5;
    do
    {
      v10 = sub_191041EAC(a1, &v7[v9]);
      if (E5RT::SurfaceDescriptor::operator!=((uint64_t)v10, (uint64_t)v6))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Found unequal Surface descriptors. It is expected to have identical Surface descriptors for all platforms.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v8;
      v7 = (_QWORD *)*a2;
      v9 += 5;
    }
    while (v8 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  }
  SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v6);
  SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(v6);
  SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(v6);
  E5RT::CreateBoundPortForSurface(SurfaceFormat, SurfaceWidth, SurfaceHeight, a3);
  if (!*(_QWORD *)a3)
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Failed in creating a bound surface port.");
    __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_191041E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191041E7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191041E98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_191041EAC(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  void *result;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error *v10;
  E5RT::OperandDescriptor *v11;
  std::__shared_weak_count *v12;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, a1);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Port not found.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v2[5], &v11);
  if (!v11)
  {
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Found a null pointer to a port descriptor.");
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v11);
  v4 = result;
  if (!result)
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Found a non-surface port while expecting a surface port.");
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v4;
    }
  }
  return result;
}

void sub_191041FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19104201C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191042030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void E5DB::MakeCandidateTensorPort(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  E5RT::TensorDescriptor *v6;
  unsigned int ComponentPack;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  E5RT::TensorDescriptor *v11;
  int ComponentDataType;
  int v13;
  unsigned int ComponentSize;
  void **p_p;
  uint64_t *TensorShape;
  int v17;
  std::runtime_error *v18;
  std::runtime_error *exception;
  std::runtime_error *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  E5RT::TensorDataType::Impl *v24[2];
  E5RT::TensorDataType::Impl *v25[2];

  v6 = (E5RT::TensorDescriptor *)sub_191042410(a1, (_QWORD *)*a2);
  E5RT::TensorDescriptor::GetTensorDataType(v6, (E5RT::TensorDataType *)v25);
  if (E5RT::TensorDataType::GetNumComponents(v25) >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found more than one component in a tensor data type, which is not supported.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  ComponentPack = E5RT::TensorDataType::GetComponentPack((E5RT::TensorDataType *)v25);
  v8 = (_QWORD *)*a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) >= 2)
  {
    v9 = 1;
    v10 = 5;
    while (1)
    {
      v11 = (E5RT::TensorDescriptor *)sub_191042410(a1, &v8[v10]);
      E5RT::TensorDescriptor::GetTensorDataType(v11, (E5RT::TensorDataType *)&__p);
      if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)&__p) >= 2)
        break;
      ComponentDataType = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&__p);
      if (ComponentDataType != E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v25))
      {
        v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v18, "Found mismatching component data types.");
LABEL_16:
        __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v13 = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v25);
      E5RT::TensorDataType::TensorDataType(v24, v13, ComponentPack);
      ComponentSize = E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType::Impl **)&__p);
      if (ComponentSize >= E5RT::TensorDataType::GetComponentSize(v24))
        p_p = (void **)v24;
      else
        p_p = &__p;
      ComponentPack = E5RT::TensorDataType::GetComponentPack((E5RT::TensorDataType *)p_p);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v24);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&__p);
      ++v9;
      v8 = (_QWORD *)*a2;
      v10 += 5;
      if (v9 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3))
        goto LABEL_10;
    }
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "Found more than one component in a tensor data type, which is not supported.");
    goto LABEL_16;
  }
LABEL_10:
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v6);
  v17 = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v25);
  E5RT::TensorDataType::TensorDataType(v24, v17, ComponentPack);
  __p = 0;
  v22 = 0;
  v23 = 0;
  E5RT::CreateBoundPortForTensor(v24, TensorShape, &__p, 0, a3);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v24);
  if (!*(_QWORD *)a3)
  {
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Failed in creating a bound tensor port.");
    __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v25);
}

void sub_1910422C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a2);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_1910422E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a9);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  _Unwind_Resume(a1);
}

void sub_191042308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  _Unwind_Resume(a1);
}

void sub_191042324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a13);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  _Unwind_Resume(a1);
}

void sub_191042350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_191042364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_191042378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_19104238C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  _Unwind_Resume(a1);
}

void sub_1910423B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va1);
  _Unwind_Resume(a1);
}

void *sub_191042410(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  void *result;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error *v10;
  E5RT::OperandDescriptor *v11;
  std::__shared_weak_count *v12;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, a1);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Port not found.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v2[5], &v11);
  if (!v11)
  {
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Found a null pointer to a port descriptor.");
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = E5RT::OperandDescriptor::TryAsTensorDescriptor(v11);
  v4 = result;
  if (!result)
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Found a non-tensor port while expecting a tensor port.");
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v4;
    }
  }
  return result;
}

void sub_19104254C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191042580(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191042594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void E5DB::MakeCandidateBoundPorts(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *v29;
  std::runtime_error *v30;
  std::runtime_error *exception;
  std::string __p;
  __int128 v33;
  E5RT::OperandDescriptor *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v3 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3) <= 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found less than two platforms.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4 = *(uint64_t **)(v3 + 16);
  if (v4)
  {
    while (1)
    {
      v36 = 0uLL;
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v4[5], &v34);
      if (!v34)
      {
        v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v30, "Found a null pointer to a port descriptor.");
        goto LABEL_60;
      }
      if (E5RT::OperandDescriptor::TryAsTensorDescriptor(v34))
      {
        E5DB::MakeCandidateTensorPort((uint64_t)(v4 + 2), a1, &__p);
        v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
        v36 = v6;
        if (!v7)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_25;
        }
        else
        {
LABEL_11:
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_25;
        }
        v11 = (unint64_t *)&size->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
      }
      else
      {
        if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v34))
        {
          v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v30, "Found a descriptor type that is not tensor or surface.");
LABEL_60:
          __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        E5DB::MakeCandidateSurfacePort((uint64_t)(v4 + 2), a1, &__p);
        v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
        v36 = v13;
        if (!v14)
          goto LABEL_20;
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_25;
        }
        else
        {
LABEL_20:
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_25;
        }
        v17 = (unint64_t *)&size->__shared_owners_;
        do
          v12 = __ldaxr(v17);
        while (__stlxr(v12 - 1, v17));
      }
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
LABEL_25:
      if (*((char *)v4 + 39) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v4[2], v4[3]);
      else
        __p = *(std::string *)(v4 + 2);
      v33 = v36;
      if (*((_QWORD *)&v36 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>(a2, (uint64_t)&__p, (uint64_t)&__p);
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (!*((_QWORD *)&v33 + 1))
        goto LABEL_35;
      v21 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_36:
          v23 = v35;
          if (!v35)
            goto LABEL_43;
          goto LABEL_40;
        }
      }
      else
      {
LABEL_35:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_36;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v23 = v35;
      if (!v35)
        goto LABEL_43;
LABEL_40:
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (v25)
      {
LABEL_43:
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
        if (*((_QWORD *)&v36 + 1))
          goto LABEL_44;
        goto LABEL_4;
      }
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
LABEL_44:
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
LABEL_4:
      v4 = (uint64_t *)*v4;
      if (!v4)
      {
        if (*(_QWORD *)(a2 + 24) == *(_QWORD *)(*a1 + 24))
          return;
LABEL_57:
        v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v29, "Failed in creating all the necessary candidate ports.");
        __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
  }
  if (*(_QWORD *)(v3 + 24))
    goto LABEL_57;
}

void sub_191042978(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19104298C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1910429A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910429BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v18;

  __cxa_free_exception(v18);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void E5DB::MakeFloatPort(E5DB *this@<X0>, _OWORD *a2@<X8>)
{
  E5RT::TensorDescriptor *v5;
  E5RT::TensorDescriptor *v6;
  uint64_t *TensorShape;
  E5RT::IOPort *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  std::runtime_error *v14;
  std::runtime_error *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  E5RT::TensorDataType::Impl *v19[2];
  E5RT::TensorDataType::Impl *v20[2];
  void *v21;
  std::__shared_weak_count *v22;

  E5RT::IOPort::GetPortDescriptor(this, &v21);
  if (!v21)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a null pointer to a port descriptor.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v21);
  v6 = v5;
  if (!v5)
  {
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Found a non-tensor port.");
    __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::TensorDescriptor::GetTensorDataType(v5, (E5RT::TensorDataType *)v20);
  if (E5RT::TensorDataType::IsType<float>((uint64_t)v20))
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Port is of type float.");
    goto LABEL_18;
  }
  if (E5RT::TensorDataType::GetNumComponents(v20) >= 2)
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Found more than one components in a tensor data type, which is not supported.");
LABEL_18:
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v6);
  E5RT::TensorDataType::TensorDataType(v19, 4, 6u);
  __p = 0;
  v17 = 0;
  v18 = 0;
  E5RT::CreateBoundPortForTensor(v19, TensorShape, &__p, 0, a2);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v19);
  if (!*(_QWORD *)a2)
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Failed in creating a bound tensor port with float data type.");
    __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5DB::CopyPort(this, *(const E5RT::IOPort **)a2, v8);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v20);
  v9 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_191042C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v16;
  uint64_t v17;

  __cxa_free_exception(v16);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v15);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v17 - 48);
  _Unwind_Resume(a1);
}

void sub_191042D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void E5DB::InitializePortRandomlyForPsnr(E5DB *this, E5RT::IOPort *a2)
{
  E5RT::TensorDescriptor *v3;
  E5RT::TensorDescriptor *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::runtime_error *exception;
  E5RT::OperandDescriptor *v10;
  std::__shared_weak_count *v11;

  E5RT::IOPort::GetPortDescriptor(this, &v10);
  v3 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v10);
  v4 = v3;
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v4)
        goto LABEL_6;
LABEL_13:
      v8 = 255;
      goto LABEL_14;
    }
  }
  if (!v3)
    goto LABEL_13;
LABEL_6:
  E5RT::TensorDescriptor::GetTensorDataType(v4, (E5RT::TensorDataType *)&v10);
  if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&v10) == 4)
  {
    v8 = 1;
  }
  else
  {
    if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&v10) != 1
      && E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&v10))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found unsupported tensor data type.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v8 = 127;
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v10);
LABEL_14:
  E5RT::InitializePortRandomly(this, 0, v8);
}

void sub_191042E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  _Unwind_Resume(a1);
}

void sub_191042E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191042EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  _Unwind_Resume(a1);
}

void E5DB::MakeRefPortsFromParser(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *i;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  E5RT::SurfaceDescriptor *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  E5RT::MemoryObject *v31;
  _QWORD *v32;
  E5RT::MemoryObject *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  E5RT::MemoryObject *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  E5RT::IOPort *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::runtime_error *exception;
  std::string __p;
  E5RT::IOPort *v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  E5RT::MemoryObject *v71;
  __int128 v72;
  __int128 v73;
  E5RT::IOPort *v74;
  std::__shared_weak_count *v75;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  for (i = *(uint64_t **)(a3 + 16); i; i = (uint64_t *)*i)
  {
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], &__p);
    v8 = (unint64_t)E5RT::OperandDescriptor::TryAsTensorDescriptor(__p.__r_.__value_.__l.__data_);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], &__p);
    v12 = (unint64_t)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(__p.__r_.__value_.__l.__data_);
    v13 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (!(v8 | v12))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found a non-tensor or non-surface descriptor type, which is not supported.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v74 = 0;
    v75 = 0;
    v73 = 0uLL;
    if (v8)
    {
      E5DB::RegressionTestConfigParser::GetInputDescriptor(a1, (uint64_t)(i + 2), &__p);
      E5DB::RegressionTestConfigParser::GetData((uint64_t)a1, (uint64_t)(i + 2), a2, &v72);
      v16 = v72;
      v72 = 0uLL;
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      v73 = v16;
      if (!v17)
        goto LABEL_20;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1))
        {
LABEL_21:
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      else
      {
LABEL_20:
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1))
          goto LABEL_21;
      }
      v35 = (std::__shared_weak_count *)operator new(0x28uLL);
      v35->__shared_owners_ = 0;
      v35->__shared_weak_owners_ = 0;
      v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5C10;
      std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::OperandDescriptor> const&>((uint64_t)&v72, (uint64_t)&v35[1], (uint64_t *)&__p);
      v36 = v75;
      v74 = (E5RT::IOPort *)&v35[1];
      v75 = v35;
      if (!v36)
        goto LABEL_43;
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        v39 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_64;
      }
      else
      {
LABEL_43:
        v39 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_64;
      }
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      goto LABEL_62;
    }
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], &__p);
    v23 = (std::__shared_weak_count *)operator new(0x28uLL);
    v23->__shared_owners_ = 0;
    v23->__shared_weak_owners_ = 0;
    v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5C10;
    std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::OperandDescriptor const>>((uint64_t)&v72, (uint64_t)&v23[1], (__int128 *)&__p);
    v74 = (E5RT::IOPort *)&v23[1];
    v75 = v23;
    v24 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    E5RT::IOPort::GetPortDescriptor(v74, &__p);
    v27 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor((E5RT::OperandDescriptor *)__p.__r_.__value_.__l.__data_);
    v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    E5DB::RegressionTestConfigParser::GetInputDescriptor(a1, (uint64_t)(i + 2), &__p);
    E5DB::RegressionTestConfigParser::GetData((uint64_t)a1, (uint64_t)(i + 2), a2, &v72);
    E5DB::RegressionTestConfigParser::GetTransformedPixelData((void **)&__p.__r_.__value_.__l.__data_, (void **)&v72, v27, &v71);
    v31 = v71;
    if (v71)
    {
      v32 = (_QWORD *)operator new();
      v33 = v71;
      *v32 = &unk_1E2DC31C8;
      v32[1] = 0;
      v32[2] = 0;
      v32[3] = v33;
      v71 = 0;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      *(_QWORD *)&v73 = v31;
      *((_QWORD *)&v73 + 1) = v32;
      if (!v34)
        goto LABEL_55;
    }
    else
    {
      v71 = 0;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      v73 = 0uLL;
      if (!v34)
        goto LABEL_55;
    }
    v42 = (unint64_t *)&v34->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (v43)
    {
      v44 = v71;
      v71 = 0;
      if (!v44)
        goto LABEL_55;
LABEL_54:
      (*(void (**)(E5RT::MemoryObject *))(*(_QWORD *)v44 + 8))(v44);
      goto LABEL_55;
    }
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v44 = v71;
    v71 = 0;
    if (v44)
      goto LABEL_54;
LABEL_55:
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    if (!*((_QWORD *)&v72 + 1))
      goto LABEL_59;
    v46 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      v39 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_64;
    }
    else
    {
LABEL_59:
      v39 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_64;
    }
    v48 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v48);
    while (__stlxr(v41 - 1, v48));
LABEL_62:
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
LABEL_64:
    v49 = v74;
    v70 = v73;
    if (*((_QWORD *)&v73 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    E5RT::IOPort::BindMemoryObject((uint64_t)v49, (uint64_t)&v70);
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (!*((_QWORD *)&v70 + 1))
      goto LABEL_71;
    v53 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      if ((*((char *)i + 39) & 0x80000000) == 0)
      {
LABEL_72:
        __p = *(std::string *)(i + 2);
        goto LABEL_75;
      }
    }
    else
    {
LABEL_71:
      if ((*((char *)i + 39) & 0x80000000) == 0)
        goto LABEL_72;
    }
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
LABEL_75:
    v68 = v74;
    v69 = v75;
    if (v75)
    {
      v55 = (unint64_t *)&v75->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>(a4, (uint64_t)&__p, (uint64_t)&__p);
    v57 = v69;
    if (!v69)
      goto LABEL_82;
    v58 = (unint64_t *)&v69->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_83:
        v60 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
        if (!*((_QWORD *)&v73 + 1))
          goto LABEL_90;
        goto LABEL_87;
      }
    }
    else
    {
LABEL_82:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_83;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (!*((_QWORD *)&v73 + 1))
      goto LABEL_90;
LABEL_87:
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (v62)
    {
LABEL_90:
      v63 = v75;
      if (v75)
        goto LABEL_91;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    v63 = v75;
    if (v75)
    {
LABEL_91:
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
}

void sub_191043524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v23;

  v23 = a16;
  a16 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void sub_19104363C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191043650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void E5DB::ReshapeIfNeeded(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  _QWORD *InputPorts;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  char v8;
  char v9;
  uint64_t *v10;
  E5RT::IOPort *v11;
  E5RT::TensorDescriptor *v12;
  E5RT::TensorDescriptor *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  E5RT::TensorDescriptor *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t TensorShape;
  uint64_t v22;
  size_t v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  uint64_t v36;
  uint64_t v37;
  E5RT::OperandDescriptor *v38;
  std::__shared_weak_count *v39;
  void *__p[2];
  void *v41[2];
  int v42;
  __int128 *v43;

  *(_OWORD *)__p = 0u;
  *(_OWORD *)v41 = 0u;
  v42 = 1065353216;
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(a1);
  v36 = (uint64_t)a1;
  v5 = E5RT::ExecutionStreamOperation::GetInOutPorts(a1);
  v6 = *(uint64_t **)(a2 + 16);
  if (!v6)
    goto LABEL_33;
  v7 = (_QWORD *)v5;
  v8 = 0;
  v9 = 0;
  do
  {
    while (1)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v6 + 2)))
      {
        v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v6 + 2));
      }
      else
      {
        v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v7, (uint64_t)(v6 + 2));
      }
      if (!v10)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (!v6[5] || (v11 = (E5RT::IOPort *)v10[5]) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Found null pointer to input/inout ports.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      E5RT::IOPort::GetPortDescriptor(v11, &v38);
      v12 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v38);
      v13 = v12;
      v14 = v39;
      if (!v39)
        break;
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (v16)
        break;
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v13)
        goto LABEL_15;
LABEL_3:
      v9 = 1;
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_30;
    }
    if (!v12)
      goto LABEL_3;
LABEL_15:
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v6[5], &v38);
    v17 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v38);
    v18 = v39;
    if (v39)
    {
      v19 = (unint64_t *)&v39->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    TensorShape = E5RT::TensorDescriptor::GetTensorShape(v17);
    v22 = E5RT::TensorDescriptor::GetTensorShape(v13);
    v23 = *(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape;
    v24 = v23 != *(_QWORD *)(v22 + 8) - *(_QWORD *)v22
       || memcmp(*(const void **)TensorShape, *(const void **)v22, v23) != 0;
    v25 = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v17);
    E5RT::TensorDescriptor::GetTensorDataType(v13, (E5RT::TensorDataType *)&v38);
    E5RT::TensorDescriptor::CreateTensorDesc(&v38, v25, &v37);
    v43 = (__int128 *)(v6 + 2);
    v26 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)(v6 + 2), (uint64_t)&std::piecewise_construct, &v43);
    v27 = v37;
    v37 = 0;
    v28 = v26[5];
    v26[5] = v27;
    if (v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      v29 = v37;
      v37 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    v8 |= v24;
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v38);
    v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_30:
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Reshape for non-tensor input/inout type is currently not supported in E5DB.");
      __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    E5RT::ExecutionStreamOperation::ReshapeOperation(v36, (uint64_t)__p);
  }
LABEL_33:
  v30 = (char *)v41[0];
  if (v41[0])
  {
    do
    {
      v32 = *(char **)v30;
      v33 = *((_QWORD *)v30 + 5);
      *((_QWORD *)v30 + 5) = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      if (v30[39] < 0)
        operator delete(*((void **)v30 + 2));
      operator delete(v30);
      v30 = v32;
    }
    while (v32);
  }
  v31 = __p[0];
  __p[0] = 0;
  if (v31)
    operator delete(v31);
}

void sub_1910439C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_191043AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191043AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191043AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191043B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  uint64_t v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = *((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void E5DB::PrepareEsOpInputAndInOutPorts(E5RT::ExecutionStreamOperationInternal **a1, _QWORD *a2, unsigned int a3)
{
  _QWORD *i;
  _QWORD *j;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  E5RT::IOPort *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  E5RT::IOPort *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  std::runtime_error *v25;
  E5RT::IOPort *v26;
  std::__shared_weak_count *v27;
  E5RT::IOPort *v28;
  std::__shared_weak_count *v29;

  for (i = *(_QWORD **)(E5RT::ExecutionStreamOperation::GetInputPorts(a1) + 16); i; i = (_QWORD *)*i)
  {
    v8 = (std::__shared_weak_count *)i[6];
    v28 = (E5RT::IOPort *)i[5];
    v29 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, (uint64_t)(i + 2));
    v12 = v11;
    if (!v11)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (!v11[5] || !v28)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found null pointer to input/inout ports.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    E5RT::AllocateAndBindMemory(v28, a3);
    E5DB::CopyPort((E5DB *)v12[5], v28, v13);
    if (v29)
    {
      v14 = (unint64_t *)&v29->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  for (j = *(_QWORD **)(E5RT::ExecutionStreamOperation::GetInOutPorts(a1) + 16); j; j = (_QWORD *)*j)
  {
    v16 = (std::__shared_weak_count *)j[6];
    v26 = (E5RT::IOPort *)j[5];
    v27 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, (uint64_t)(j + 2));
    v20 = v19;
    if (!v19)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (!v19[5] || !v26)
    {
      v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v25, "Found null pointer to input/inout ports.");
      __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    E5RT::AllocateAndBindMemory(v26, a3);
    E5DB::CopyPort((E5DB *)v20[5], v26, v21);
    if (v27)
    {
      v22 = (unint64_t *)&v27->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_191043DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191043E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5DB::GetOperandDescriptorsFromShapesArray(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  const char *v8;
  size_t v9;
  std::string::size_type v10;
  std::string *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  size_t v16;
  std::string::size_type v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  E5RT::TensorDescriptor *v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  id v39;
  void *v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  std::string::size_type v47;
  std::string *v48;
  id v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  id v56;
  size_t v57;
  std::string::size_type v58;
  std::string *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 *v71;
  std::runtime_error *exception;
  std::string *v73;
  __int128 v74;
  std::runtime_error *v75;
  std::runtime_error *v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  E5RT::TensorDescriptor *v83;
  uint64_t v84;
  void *v85;
  id obj;
  void *v87;
  char *__s;
  id v89;
  uint64_t v90;
  void *__p;
  char *v92;
  char *v93;
  void *v94;
  char *v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[32];
  __int128 v102;
  __int128 v103;
  std::string *v104;
  _BYTE v105[128];
  std::string __dst[5];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v79 = a3;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v105, 16);
  if (v5)
  {
    v80 = *(_QWORD *)v98;
    do
    {
      v6 = 0;
      v82 = v5;
      do
      {
        if (*(_QWORD *)v98 != v80)
          objc_enumerationMutation(obj);
        v84 = v6;
        v7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v97 + 1) + 8 * v6));
        __s = (char *)objc_msgSend(v7, "UTF8String");
        v89 = objc_retainAutorelease(v7);
        v8 = (const char *)objc_msgSend(v89, "UTF8String");
        v9 = strlen(v8);
        if (v9 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v10 = v9;
        if (v9 >= 0x17)
        {
          v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v13 = v9 | 7;
          v14 = v13 + 1;
          v11 = (std::string *)operator new(v13 + 1);
          __dst[0].__r_.__value_.__l.__size_ = v10;
          __dst[0].__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v12 = a1;
LABEL_13:
          memmove(v11, v8, v10);
          goto LABEL_14;
        }
        *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v9;
        v11 = __dst;
        v12 = a1;
        if (v9)
          goto LABEL_13;
LABEL_14:
        v11->__r_.__value_.__s.__data_[v10] = 0;
        v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v12, (uint64_t)__dst);
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst[0].__r_.__value_.__l.__data_);
        if (!v15)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(v101, (char *)objc_msgSend(objc_retainAutorelease(v89), "UTF8String"));
          v73 = std::string::append((std::string *)v101, " does not exist in esOP.");
          v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          __dst[0].__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, __dst);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v16 = strlen(__s);
        if (v16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = v16;
        if (v16 >= 0x17)
        {
          v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v19 = v16 | 7;
          v20 = v19 + 1;
          v18 = (std::string *)operator new(v19 + 1);
          __dst[0].__r_.__value_.__l.__size_ = v17;
          __dst[0].__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
LABEL_24:
          memmove(v18, __s, v17);
          goto LABEL_25;
        }
        *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v16;
        v18 = __dst;
        if (v16)
          goto LABEL_24;
LABEL_25:
        v18->__r_.__value_.__s.__data_[v17] = 0;
        v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v12, (uint64_t)__dst);
        if (!v21)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst[0].__r_.__value_.__l.__data_);
        E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v21[5], __dst);
        v22 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(__dst[0].__r_.__value_.__l.__data_);
        size = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
        if (__dst[0].__r_.__value_.__l.__size_)
        {
          v24 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (!v22)
        {
          v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v75, "Reshape operation is only supported on Tensor Descriptors.");
          __cxa_throw(v75, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        objc_msgSend(obj, "objectForKeyedSubscript:", v89);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("shape"));
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        v83 = v22;

        if (!v85)
        {
          v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(v101, (char *)objc_msgSend(objc_retainAutorelease(v89), "UTF8String"));
          v77 = std::string::append((std::string *)v101, " does not have a shape key");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          __dst[0].__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v76, __dst);
          __cxa_throw(v76, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v27 = v85;
        v28 = objc_msgSend(v27, "count");
        v29 = v28;
        v94 = 0;
        v95 = 0;
        v96 = 0;
        if (v28)
        {
          if (v28 >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v30 = 8 * v28;
          v31 = (char *)operator new(8 * v28);
          v94 = v31;
          v96 = &v31[8 * v29];
          bzero(v31, 8 * v29);
          v95 = &v31[v30];
        }
        else
        {
          v31 = 0;
        }
        v102 = 0u;
        v103 = 0u;
        memset(v101, 0, sizeof(v101));
        v32 = v27;
        v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", v101, __dst, 16);
        if (v33)
        {
          v34 = 0;
          v35 = **(_QWORD **)&v101[16];
          do
          {
            v36 = 0;
            v37 = v34;
            v38 = &v31[8 * v34];
            do
            {
              if (**(_QWORD **)&v101[16] != v35)
                objc_enumerationMutation(v32);
              v39 = *(id *)(*(_QWORD *)&v101[8] + 8 * v36);
              *(_QWORD *)&v38[8 * v36] = objc_msgSend(v39, "unsignedIntValue");

              ++v36;
            }
            while (v33 != v36);
            v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", v101, __dst, 16);
            v34 = v37 + v36;
          }
          while (v33);
        }

        objc_msgSend(obj, "objectForKeyedSubscript:", v89);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "objectForKeyedSubscript:", CFSTR("stride"));
        v87 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v87)
        {
          E5RT::TensorDescriptor::GetTensorDataType(v22, (E5RT::TensorDataType *)v101);
          E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)v101, (uint64_t *)&v94, &v104);
          v46 = strlen(__s);
          if (v46 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v47 = v46;
          if (v46 >= 0x17)
          {
            v66 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v46 | 7) != 0x17)
              v66 = v46 | 7;
            v67 = v66 + 1;
            v48 = (std::string *)operator new(v66 + 1);
            __dst[0].__r_.__value_.__l.__size_ = v47;
            __dst[0].__r_.__value_.__r.__words[2] = v67 | 0x8000000000000000;
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
          }
          else
          {
            *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v46;
            v48 = __dst;
            if (!v46)
            {
LABEL_83:
              v48->__r_.__value_.__s.__data_[v47] = 0;
              __p = __dst;
              v68 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v79, (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
              v69 = (__int128 *)v104;
              v104 = 0;
              v70 = *((_QWORD *)v68 + 5);
              *((_QWORD *)v68 + 5) = v69;
              if (v70)
                (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
              if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__dst[0].__r_.__value_.__l.__data_);
                v71 = (__int128 *)v104;
                v104 = 0;
                if (v71)
LABEL_87:
                  (*(void (**)(__int128 *))(*(_QWORD *)v71 + 8))(v71);
              }
              else
              {
                v71 = (__int128 *)v104;
                v104 = 0;
                if (v71)
                  goto LABEL_87;
              }
              E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v101);
              goto LABEL_89;
            }
          }
          memmove(v48, __s, v47);
          goto LABEL_83;
        }
        v41 = v87;
        v42 = objc_msgSend(v41, "count");
        v43 = v42;
        __p = 0;
        v92 = 0;
        v93 = 0;
        if (v42)
        {
          if (v42 >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v44 = 8 * v42;
          v45 = (char *)operator new(8 * v42);
          __p = v45;
          v93 = &v45[8 * v43];
          bzero(v45, 8 * v43);
          v92 = &v45[v44];
        }
        else
        {
          v45 = 0;
        }
        v102 = 0u;
        v103 = 0u;
        memset(v101, 0, sizeof(v101));
        v49 = v41;
        v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", v101, __dst, 16);
        if (v50)
        {
          v51 = 0;
          v52 = **(_QWORD **)&v101[16];
          do
          {
            v53 = 0;
            v54 = v51;
            v55 = &v45[8 * v51];
            do
            {
              if (**(_QWORD **)&v101[16] != v52)
                objc_enumerationMutation(v49);
              v56 = *(id *)(*(_QWORD *)&v101[8] + 8 * v53);
              *(_QWORD *)&v55[8 * v53] = objc_msgSend(v56, "unsignedIntValue");

              ++v53;
            }
            while (v50 != v53);
            v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", v101, __dst, 16);
            v51 = v54 + v53;
          }
          while (v50);
        }

        E5RT::TensorDescriptor::GetTensorDataType(v83, (E5RT::TensorDataType *)v101);
        E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides((E5RT::TensorDataType::Impl **)v101, (uint64_t *)&v94, &__p, &v90);
        v57 = strlen(__s);
        if (v57 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v58 = v57;
        if (v57 >= 0x17)
        {
          v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v57 | 7) != 0x17)
            v60 = v57 | 7;
          v61 = v60 + 1;
          v59 = (std::string *)operator new(v60 + 1);
          __dst[0].__r_.__value_.__l.__size_ = v58;
          __dst[0].__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
LABEL_69:
          memmove(v59, __s, v58);
          goto LABEL_70;
        }
        *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v57;
        v59 = __dst;
        if (v57)
          goto LABEL_69;
LABEL_70:
        v59->__r_.__value_.__s.__data_[v58] = 0;
        v104 = __dst;
        v62 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v79, (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&v104);
        v63 = v90;
        v90 = 0;
        v64 = *((_QWORD *)v62 + 5);
        *((_QWORD *)v62 + 5) = v63;
        if (v64)
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
        if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v65 = v90;
          v90 = 0;
          if (!v65)
            goto LABEL_75;
LABEL_74:
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
          goto LABEL_75;
        }
        operator delete(__dst[0].__r_.__value_.__l.__data_);
        v65 = v90;
        v90 = 0;
        if (v65)
          goto LABEL_74;
LABEL_75:
        E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v101);
        if (__p)
        {
          v92 = (char *)__p;
          operator delete(__p);
        }
LABEL_89:

        if (v94)
        {
          v95 = (char *)v94;
          operator delete(v94);
        }

        v6 = v84 + 1;
      }
      while (v84 + 1 != v82);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v105, 16);
    }
    while (v5);
  }

}

void sub_1910447B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{

  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void E5DB::NSDictionaryToMap(E5DB *this@<X0>, uint64_t a2@<X8>)
{
  E5DB *v4;
  E5DB *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  const char *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = this;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = v4;
  v6 = -[E5DB countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v8);
        -[E5DB objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_retainAutorelease(v9);
        v14 = (const char *)objc_msgSend(v11, "UTF8String");
        v12 = objc_retainAutorelease(v10);
        v13 = (const char *)objc_msgSend(v12, "UTF8String");
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const*,char const*>((_QWORD *)a2, &v14, &v13);

        ++v8;
      }
      while (v6 != v8);
      v6 = -[E5DB countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

}

void sub_191044C5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

id E5DB::GetValueFromDictionary(void *a1, uint64_t *a2)
{
  id v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  std::logic_error *exception;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;

  v3 = a1;
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v9 = std::string::append(&v11, " in dictionary");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v12);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }

  return v6;
}

void sub_191044DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);

  _Unwind_Resume(a1);
}

id E5DB::GetJSONFromFile(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::path::__string_view v4;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::__fs::filesystem::path::__string_view v8;
  std::__fs::filesystem::path::__string_view v9;
  std::string *v10;
  _BOOL4 v11;
  std::logic_error *v12;
  std::basic_string_view<_CharT, _Traits>::size_type v13;
  std::basic_string_view<_CharT, _Traits>::size_type v14;
  std::__fs::filesystem::path::__string_view v15;
  std::__fs::filesystem::path *v16;
  void *v17;
  void *v18;
  void *v19;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  id v32;
  std::__fs::filesystem::path v33;
  std::string __p;
  std::__fs::filesystem::path v35;
  std::string __dst;

  std::__fs::filesystem::__status(this, 0);
  if (__dst.__r_.__value_.__s.__data_[0] == 255 || __dst.__r_.__value_.__s.__data_[0] == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v35.__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    else
      v35 = *this;
    v22 = std::string::insert(&v35.__pn_, 0, "Expected JSON file does not exist:");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__dst);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = std::__fs::filesystem::path::__extension(this);
  if (v4.__size_ > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4.__size_ >= 0x17)
  {
    v6 = (v4.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4.__size_ | 7) != 0x17)
      v6 = v4.__size_ | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4.__size_;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4.__size_;
  p_dst = &__dst;
  if (v4.__size_)
LABEL_12:
    memmove(p_dst, v4.__data_, v4.__size_);
  p_dst->__r_.__value_.__s.__data_[v4.__size_] = 0;
  v35.__pn_ = __dst;
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)".json", (std::string *)"");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8.__data_ = (const std::string_view::value_type *)&__p;
  else
    v8.__data_ = (const std::string_view::value_type *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8.__size_ = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v8.__size_ = __p.__r_.__value_.__l.__size_;
  if (!std::__fs::filesystem::path::__compare(&v35, v8))
  {
    v11 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_25;
  }
  v9 = std::__fs::filesystem::path::__extension(this);
  if (v9.__size_ > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9.__size_ >= 0x17)
  {
    v13 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9.__size_ | 7) != 0x17)
      v13 = v9.__size_ | 7;
    v14 = v13 + 1;
    v10 = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v9.__size_;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    goto LABEL_32;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9.__size_;
  v10 = &__dst;
  if (v9.__size_)
LABEL_32:
    memmove(v10, v9.__data_, v9.__size_);
  v10->__r_.__value_.__s.__data_[v9.__size_] = 0;
  v33.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)".JSON", (std::string *)"");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v15.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v15.__size_ = __dst.__r_.__value_.__l.__size_;
  v11 = std::__fs::filesystem::path::__compare(&v33, v15) != 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_42;
LABEL_25:
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_43;
LABEL_26:
      operator delete(v35.__pn_.__r_.__value_.__l.__data_);
      if (!v11)
        goto LABEL_44;
LABEL_27:
      v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::__fs::filesystem::path::extension[abi:ne180100](this, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v35.__pn_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v35.__pn_ = __p;
      v30 = std::string::insert(&v35.__pn_, 0, "Invalid extension for a json file:");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(v12, &__dst);
      v12->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v12, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
  }
  else if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(v33.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
LABEL_42:
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_26;
LABEL_43:
  if (v11)
    goto LABEL_27;
LABEL_44:
  if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = this;
  else
    v16 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v35.__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    else
      v35 = *this;
    v26 = std::string::insert(&v35.__pn_, 0, "Unable to load file to NSData: ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v24, &__dst);
    __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v32 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v18, 0, &v32);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v32 || !v19)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v35.__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    else
      v35 = *this;
    v28 = std::string::insert(&v35.__pn_, 0, "Unable to load file data as valid json: ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v25, &__dst);
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }

  return v19;
}

void sub_191045388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a22 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v28);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void sub_1910455C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if ((a19 & 0x80000000) == 0)
    JUMPOUT(0x1910455D0);
  JUMPOUT(0x19104551CLL);
}

double std::__fs::filesystem::path::extension[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

void std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::OperandDescriptor> const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  E5RT::IOPortPriv::IOPortPriv(a2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191045798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v9 - 32);
  _Unwind_Resume(a1);
}

void std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::OperandDescriptor const>>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  E5RT::IOPortPriv::IOPortPriv(a2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_191045888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v9 - 32);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::MemoryObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<E5RT::MemoryObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::MemoryObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8524BLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A8524BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8524BLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8524BLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = (std::string *)(v26 + 2);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_191045DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191045DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_191046248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const*,char const*>(_QWORD *a1, const char **a2, const char **a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *inserted;
  char v12;
  char v14;

  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>((uint64_t)(v6 + 16), a2, a3);
  v8 = v6[39];
  if (v8 >= 0)
    v9 = (uint64_t *)v7;
  else
    v9 = (uint64_t *)*((_QWORD *)v6 + 2);
  if (v8 >= 0)
    v10 = v6[39];
  else
    v10 = *((_QWORD *)v6 + 3);
  *((_QWORD *)v6 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v14, v9, v10);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_unique(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    if (v6[63] < 0)
    {
      operator delete(*((void **)v6 + 5));
      if ((v6[39] & 0x80000000) == 0)
        goto LABEL_11;
    }
    else if ((v6[39] & 0x80000000) == 0)
    {
LABEL_11:
      operator delete(v6);
      return inserted;
    }
    operator delete(*((void **)v6 + 2));
    goto LABEL_11;
  }
  return inserted;
}

void sub_19104635C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191046374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *result;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;

  v4 = (unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    v11 = (int8x8_t)a1[1];
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v11)
        v12 %= *(_QWORD *)&v11;
    }
    else
    {
      v12 &= *(_QWORD *)&v11 - 1;
    }
    v14 = *(_QWORD **)(*a1 + 8 * v12);
    if (v14)
    {
      *(_QWORD *)a2 = *v14;
    }
    else
    {
      *(_QWORD *)a2 = a1[2];
      a1[2] = a2;
      *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(_QWORD *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v11)
          v15 %= *(_QWORD *)&v11;
      }
      else
      {
        v15 &= *(_QWORD *)&v11 - 1;
      }
      v14 = (_QWORD *)(*a1 + 8 * v15);
    }
    *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(uint64_t a1, const char **a2, const char **a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = *a3;
  v13 = strlen(*a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v13;
    if (!v13)
      goto LABEL_17;
  }
  memmove(v11, v12, v14);
LABEL_17:
  *((_BYTE *)v11 + v14) = 0;
  return a1;
}

void sub_191046610(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

E5DB::CommandFactory *E5DB::CommandFactory::CommandFactory(E5DB::CommandFactory *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  E5DB::CommandFactory::PopulateCommandRegistry(this);
  return this;
}

{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  E5DB::CommandFactory::PopulateCommandRegistry(this);
  return this;
}

void sub_191046660(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string_view,std::shared_ptr<E5DB::Command>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5DB::CommandFactory::PopulateCommandRegistry(E5DB::CommandFactory *this)
{
  char **v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v10;
  int v11;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char **v17;

  v2 = &off_1E2DD07F8;
  do
  {
    v3 = *v2;
    v4 = v2[1];
    if (v4 == (char *)3)
    {
      v7 = *(unsigned __int16 *)v3;
      v8 = v3[2];
      if (v7 == 30066 && v8 == 110)
      {
        v5 = operator new(0x20uLL);
        v5[1] = 0;
        v5[2] = 0;
        *v5 = &off_1E2DB5AC0;
        v6 = v5 + 3;
        E5DB::RunCommand::RunCommand(v5 + 3);
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v4 == (char *)10)
    {
      v10 = *(_QWORD *)v3;
      v11 = *((unsigned __int16 *)v3 + 4);
      if (v10 != 0x6568635F726E7370 || v11 != 27491)
        goto LABEL_20;
      v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_1E2DB5BD8;
      v6 = v5 + 3;
      E5DB::PsnrCheckCommand::PsnrCheckCommand(v5 + 3);
    }
    else
    {
      if (v4 != (char *)4)
        goto LABEL_20;
      switch(*(_DWORD *)v3)
      {
        case 0x706D7564:
          v5 = operator new(0x20uLL);
          v5[1] = 0;
          v5[2] = 0;
          *v5 = &off_1E2DB5AF8;
          v6 = v5 + 3;
          E5DB::DumpCommand::DumpCommand(v5 + 3);
          break;
        case 0x74697865:
          v5 = operator new(0x20uLL);
          v5[1] = 0;
          v5[2] = 0;
          *v5 = &off_1E2DB5B30;
          v6 = v5 + 3;
          E5DB::ExitCommand::ExitCommand(v5 + 3);
          break;
        case 0x64616F6C:
          v5 = operator new(0x20uLL);
          v5[1] = 0;
          v5[2] = 0;
          *v5 = &off_1E2DB5BA0;
          v6 = v5 + 3;
          E5DB::LoadCommand::LoadCommand(v5 + 3);
          break;
        default:
LABEL_20:
          v5 = operator new(0x20uLL);
          v5[1] = 0;
          v5[2] = 0;
          *v5 = &off_1E2DB5B68;
          v6 = v5 + 3;
          E5DB::HelpCommand::HelpCommand(v5 + 3);
          break;
      }
    }
LABEL_21:
    v17 = v2;
    v13 = std::__hash_table<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)this, (uint64_t)v2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v17);
    v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 5);
    *((_QWORD *)v13 + 4) = v6;
    *((_QWORD *)v13 + 5) = v5;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v2 += 2;
  }
  while (v2 != (char **)&unk_1E2DD0858);
}

void sub_191046928(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_191046940(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_191046958(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_191046970(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_191046988(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1910469A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1910469B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string_view,std::shared_ptr<E5DB::Command>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[5];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_191046A90(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;

  v3 = *(void ***)(v1 + 16);
  if (v3)
    sub_191047610(v3);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

void E5DB::CommandFactory::~CommandFactory(E5DB::CommandFactory *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[5];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[5];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v3)
    operator delete(v3);
}

uint64_t **E5DB::CommandFactory::GetCommand@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t **result;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  if ((E5DB::CommandFactory::IsValidCommandName((uint64_t)a1, a2, a3) & 1) != 0)
  {
    result = std::__hash_table<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>>>::find<std::string_view>(a1, (uint64_t)v14);
    if (result)
    {
      v7 = result[5];
      *a4 = result[4];
      a4[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 1);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      return result;
    }
LABEL_12:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  v13[0] = "help";
  v13[1] = 4;
  result = std::__hash_table<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>>>::find<std::string_view>(a1, (uint64_t)v13);
  if (!result)
    goto LABEL_12;
  v10 = result[5];
  *a4 = result[4];
  a4[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

uint64_t E5DB::CommandFactory::IsValidCommandName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 3)
  {
    if (*(_WORD *)a2 == 30066 && *(_BYTE *)(a2 + 2) == 110)
      return (char *)&off_1E2DD0848 - (char *)&off_1E2DD07F8 != 96;
    return &unk_1E2DD0858 - (_UNKNOWN *)&off_1E2DD07F8 != 96;
  }
  if (a3 == 10)
  {
    if (*(_QWORD *)a2 == 0x6568635F726E7370 && *(_WORD *)(a2 + 8) == 27491)
      return (char *)&off_1E2DD0838 - (char *)&off_1E2DD07F8 != 96;
    return &unk_1E2DD0858 - (_UNKNOWN *)&off_1E2DD07F8 != 96;
  }
  if (a3 != 4)
    return &unk_1E2DD0858 - (_UNKNOWN *)&off_1E2DD07F8 != 96;
  if (*(_DWORD *)a2 == 1886221668)
    return 1;
  if (*(_DWORD *)a2 == 1953069157)
    return (char *)&off_1E2DD0808 - (char *)&off_1E2DD07F8 != 96;
  if (*(_DWORD *)a2 != 1886152040)
  {
    if (*(_DWORD *)a2 == 1684107116)
      return (char *)&off_1E2DD0828 - (char *)&off_1E2DD07F8 != 96;
    return &unk_1E2DD0858 - (_UNKNOWN *)&off_1E2DD07F8 != 96;
  }
  return (char *)&off_1E2DD0818 - (char *)&off_1E2DD07F8 != 96;
}

char **E5DB::CommandFactory::GetCommandNames(E5DB::CommandFactory *this)
{
  return &off_1E2DD07F8;
}

uint64_t E5DB::CommandFactory::GetCommandFactory(E5DB::CommandFactory *this)
{
  if (qword_1EE216658 != -1)
    dispatch_once(&qword_1EE216658, &unk_1E2DD0878);
  return qword_1EE216650;
}

void sub_191046E3C()
{
  uint64_t v0;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  E5DB::CommandFactory::PopulateCommandRegistry((E5DB::CommandFactory *)v0);
  qword_1EE216650 = v0;
}

void sub_191046E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;

  v3 = *(void ***)(v1 + 16);
  if (v3)
    sub_191047610(v3);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  MEMORY[0x19401CD90](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<E5DB::DumpCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::DumpCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5DB::DumpCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5DB::ExitCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::ExitCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5B30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5DB::ExitCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5DB::LoadCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5BA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::LoadCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5BA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5DB::LoadCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5DB::RunCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::RunCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5DB::RunCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5DB::PsnrCheckCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::PsnrCheckCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5DB::PsnrCheckCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<E5DB::HelpCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5B68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::HelpCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB5B68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<E5DB::HelpCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *std::__hash_table<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  void *v13;
  size_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  char v35;

  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v34, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v16 = a2;
        v15 = *(uint64_t **)a2;
        v14 = *(_QWORD *)(v16 + 8);
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = *((_QWORD *)v13 + 1);
            if (v18 == v9)
            {
              if (*((_QWORD *)v13 + 3) == v14 && !memcmp(*((const void **)v13 + 2), v15, v14))
                return v13;
            }
            else if ((v18 & (v10 - 1)) != v4)
            {
              goto LABEL_25;
            }
            v13 = *(void **)v13;
            if (!v13)
              goto LABEL_25;
          }
        }
        do
        {
          v17 = *((_QWORD *)v13 + 1);
          if (v17 == v9)
          {
            if (*((_QWORD *)v13 + 3) == v14 && !memcmp(*((const void **)v13 + 2), v15, v14))
              return v13;
          }
          else
          {
            if (v17 >= v10)
              v17 %= v10;
            if (v17 != v4)
              break;
          }
          v13 = *(void **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_25:
  v19 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x30uLL);
  v34[0] = v13;
  v34[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = **a4;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 5) = 0;
  v35 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      *(_QWORD *)v13 = *v23;
LABEL_63:
      *v23 = v13;
      goto LABEL_64;
    }
  }
  else
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_39;
    if (prime < v10)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < v10)
LABEL_39:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v23)
          goto LABEL_28;
      }
      else
      {
        v4 = v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v23)
          goto LABEL_28;
      }
    }
    else
    {
      v4 = v31 & v9;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v9));
      if (v23)
        goto LABEL_28;
    }
  }
  *(_QWORD *)v13 = *v19;
  *v19 = v13;
  *(_QWORD *)(v22 + 8 * v4) = v19;
  if (*(_QWORD *)v13)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10)
        v32 %= v10;
    }
    else
    {
      v32 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_191047408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>>>::find<std::string_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  size_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char v18;

  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v18, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v9 = *(uint64_t ****)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = *v9;
  if (*v9)
  {
    v13 = a2;
    v12 = *(uint64_t **)a2;
    v11 = *(_QWORD *)(v13 + 8);
    if (v7.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v16 = v10[1];
        if (v16 == (uint64_t *)v6)
        {
          if (v10[3] == (uint64_t *)v11 && !memcmp(v10[2], v12, v11))
            return v10;
        }
        else if (((unint64_t)v16 & v14) != v8)
        {
          return 0;
        }
        v10 = (uint64_t **)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v15 = (unint64_t)v10[1];
      if (v15 == v6)
      {
        if (v10[3] == (uint64_t *)v11 && !memcmp(v10[2], v12, v11))
          return v10;
      }
      else
      {
        if (v15 >= *(_QWORD *)&v5)
          v15 %= *(_QWORD *)&v5;
        if (v15 != v8)
          return 0;
      }
      v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  return v10;
}

uint64_t sub_1910475F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_191047610(void **__p)
{
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  do
  {
    v2 = __p;
    __p = (void **)*__p;
    v3 = (std::__shared_weak_count *)v2[5];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        sub_1910475F4();
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete(v2);
  }
  while (__p);
  OUTLINED_FUNCTION_10();
}

void E5DB::DumpCommand::GetName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "dump");
}

double E5DB::DumpCommand::GetDescription@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_191A6FFA0;
  strcpy(v3, "Dump the loaded E5 bundle in a human-readable format.");
  return *(double *)"uman-readable format.";
}

_QWORD *E5DB::DumpCommand::DumpCommand(_QWORD *this)
{
  *this = &off_1E2D598C0;
  return this;
}

void E5DB::DumpCommand::~DumpCommand(E5DB::DumpCommand *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t E5DB::DumpCommand::GetHelp(E5DB::DumpCommand *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  void *__p[2];
  unsigned __int8 v30;
  _QWORD v31[2];
  _QWORD v32[11];
  char v33;
  uint64_t v34;
  std::locale v35;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  (*(void (**)(void **__return_ptr, E5DB::DumpCommand *))(*(_QWORD *)this + 24))(__p, this);
  if ((v30 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v3 = v30;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v35, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v6 = std::locale::use_facet(&v35, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v30 < 0)
    operator delete(__p[0]);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"dump [options]", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Without any additional options, dump command will dump information about all functions from all platforms compiled within the E5 bundle.", 136);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Options:", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-l | --list-platforms         : Only list the platforms compiled within the E5 bundle.", 86);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-p | --platform [platform]    : Dump information only for given platform.", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
  v16 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Use -l to retrieve available platforms within E5 bundle.", 56);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-f | --function [function]    : Dump information only for given function. ", 74);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-o | --outfile  [file]        : Dump output to file. Default = stdout", 69);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-t | --format   [format type] : Output format among [json, dot]. Default = json", 79);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-i | --intermediates          : Include information about intermediate tensors in function.", 91);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
  v26 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E0DE4F50];
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v32[0] = v27;
  v32[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v33 < 0)
    operator delete((void *)v32[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v34);
}

void sub_191047CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t E5DB::DumpCommand::GetHelpCSV(E5DB::DumpCommand *this)
{
  void *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  size_t v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *__p[2];
  unsigned __int8 v30;
  _QWORD v31[2];
  _QWORD v32[11];
  char v33;
  uint64_t v34;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  v2 = operator new(0xE0uLL);
  *((_OWORD *)v2 + 10) = xmmword_1E2DD0938;
  *((_OWORD *)v2 + 11) = unk_1E2DD0948;
  *((_OWORD *)v2 + 12) = xmmword_1E2DD0958;
  *((_OWORD *)v2 + 13) = unk_1E2DD0968;
  *((_OWORD *)v2 + 6) = xmmword_1E2DD08F8;
  *((_OWORD *)v2 + 7) = unk_1E2DD0908;
  *((_OWORD *)v2 + 8) = xmmword_1E2DD0918;
  *((_OWORD *)v2 + 9) = unk_1E2DD0928;
  *((_OWORD *)v2 + 2) = xmmword_1E2DD08B8;
  *((_OWORD *)v2 + 3) = unk_1E2DD08C8;
  *((_OWORD *)v2 + 4) = xmmword_1E2DD08D8;
  *((_OWORD *)v2 + 5) = unk_1E2DD08E8;
  *(_OWORD *)v2 = xmmword_1E2DD0898;
  *((_OWORD *)v2 + 1) = *(_OWORD *)algn_1E2DD08A8;
  (*(void (**)(void **__return_ptr, E5DB::DumpCommand *))(*(_QWORD *)this + 16))(__p, this);
  if ((v30 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v4 = v30;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=[", 2);
  if ((char)v30 < 0)
  {
    operator delete(__p[0]);
    v6 = *(const char **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_12;
    goto LABEL_11;
  }
  v6 = *(const char **)v2;
  if (*(_QWORD *)v2)
  {
LABEL_11:
    v7 = strlen(v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  }
LABEL_12:
  v9 = *((_QWORD *)v2 + 4);
  if (v9)
  {
    v10 = strlen(*((const char **)v2 + 4));
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  }
  v12 = *((_QWORD *)v2 + 8);
  if (v12)
  {
    v13 = strlen(*((const char **)v2 + 8));
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
  }
  v15 = *((_QWORD *)v2 + 12);
  if (v15)
  {
    v16 = strlen(*((const char **)v2 + 12));
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
  }
  v18 = *((_QWORD *)v2 + 16);
  if (v18)
  {
    v19 = strlen(*((const char **)v2 + 16));
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
  }
  v21 = *((_QWORD *)v2 + 20);
  if (v21)
  {
    v22 = strlen(*((const char **)v2 + 20));
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",", 1);
  }
  v24 = *((_QWORD *)v2 + 24);
  if (v24)
  {
    v25 = strlen(*((const char **)v2 + 24));
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  std::stringbuf::str();
  operator delete(v2);
  v31[0] = *MEMORY[0x1E0DE4F50];
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v32[0] = v27;
  v32[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v33 < 0)
    operator delete((void *)v32[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v34);
}

void sub_191048050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5DB::DumpCommand::Execute(E5Common::E5PlatformManager *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  void *locale;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  std::locale::__imp *v30;
  std::locale::__imp *v31;
  std::ios_base *v32;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  _QWORD *v39;
  void *p_p;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  void **v51;
  _QWORD **v52;
  void *v53;
  uint64_t **v54;
  void *v55;
  void *v56;
  void **v57;
  uint64_t v58;
  id v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  id v69;
  const char *v70;
  size_t v71;
  _QWORD *v72;
  const std::locale::facet *v73;
  id v74;
  _QWORD *v75;
  void **v76;
  uint64_t v77;
  _QWORD *v78;
  void **v79;
  void *v80;
  std::runtime_error *exception;
  std::string *v83;
  __int128 v84;
  void *v85;
  std::string v86;
  std::string v87;
  _BYTE v88[16];
  uint64_t **v89;
  std::locale v90;
  void **v91;
  _QWORD **v92;
  uint64_t v93;
  char v94;
  E5DB *v95;
  _QWORD *v96;
  void *v97;
  void **v98;
  void *v99[2];
  char v100;
  void *v101[2];
  unsigned __int8 v102;
  char v103;
  char v104;
  void *v105[2];
  char v106;
  char v107;
  _BYTE v108[16];
  char v109;
  char v110;
  void *__p;
  uint64_t v112;
  char v113;
  _BYTE v114[384];
  uint64_t v115;
  _BYTE v116[24];
  _BYTE *v117;
  _BYTE v118[24];
  _BYTE *v119;
  std::locale v120;
  uint64_t v121;
  unsigned __int8 v122;
  uint64_t v123[19];
  _BYTE v124[24];
  _BYTE *v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 39) < 0)
  {
    if (a2[3])
    {
LABEL_3:
      v110 = 0;
      v108[0] = 0;
      v109 = 0;
      LOBYTE(v105[0]) = 0;
      v107 = 0;
      v104 = 0;
      LOBYTE(v101[0]) = 0;
      v103 = 0;
      v100 = 4;
      strcpy((char *)v99, "json");
      v6 = E5Common::E5PlatformManager::Instance(a1);
      v7 = operator new(0x40uLL);
      *v7 = &off_1E2DD0988;
      v7[1] = a3;
      v7[2] = &v110;
      v7[3] = v108;
      v7[4] = v105;
      v7[5] = &v104;
      v7[6] = v101;
      v7[7] = v99;
      v125 = v7;
      (*(void (**)(std::locale *__return_ptr, E5Common::E5PlatformManager *))(*(_QWORD *)a1 + 16))(&v120, a1);
      v8 = E5DB::SafeExecute((uint64_t)v124);
      if ((char)v122 < 0)
      {
        operator delete(v120.__locale_);
        v9 = v125;
        if (v125 != v124)
          goto LABEL_5;
      }
      else
      {
        v9 = v125;
        if (v125 != v124)
        {
LABEL_5:
          if (!v9)
            goto LABEL_20;
          v10 = 5;
LABEL_19:
          (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
          if (v8)
          {
            v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2[1], (uint64_t)"Dump Command: Error in parsing arguments.", 41);
            std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
            v18 = std::locale::use_facet(&v120, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
            std::locale::~locale(&v120);
            std::ostream::put();
            std::ostream::flush();
            v19 = *a2;
            (*(void (**)(std::locale *__return_ptr, E5Common::E5PlatformManager *))(*(_QWORD *)a1 + 32))(&v120, a1);
            if ((v122 & 0x80u) == 0)
              locale = &v120;
            else
              locale = v120.__locale_;
            if ((v122 & 0x80u) == 0)
              v21 = v122;
            else
              v21 = v121;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)locale, v21);
            if ((char)v122 < 0)
              operator delete(v120.__locale_);
            v16 = 0x100000000;
            goto LABEL_133;
          }
          E5RT::GetPlatformsInCompositeBundle((uint64_t)(a2 + 2), (uint64_t)&v97);
          if (v110)
          {
            v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"Compiled platforms in bundle: ", 30);
            v113 = 2;
            strcpy((char *)&__p, ", ");
            E5Common::StringUtils::Join((uint64_t)&__p, (uint64_t *)&v97);
            if ((v122 & 0x80u) == 0)
              v23 = &v120;
            else
              v23 = v120.__locale_;
            if ((v122 & 0x80u) == 0)
              v24 = v122;
            else
              v24 = v121;
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
            std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
            v26 = std::locale::use_facet(&v90, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
            std::locale::~locale(&v90);
            std::ostream::put();
            std::ostream::flush();
            if ((char)v122 < 0)
            {
              operator delete(v120.__locale_);
              if ((v113 & 0x80000000) == 0)
              {
LABEL_39:
                v16 = 0;
                v27 = (void **)v97;
                if (!v97)
                  goto LABEL_133;
                goto LABEL_126;
              }
            }
            else if ((v113 & 0x80000000) == 0)
            {
              goto LABEL_39;
            }
            operator delete(__p);
            v16 = 0;
            v27 = (void **)v97;
            if (!v97)
              goto LABEL_133;
            goto LABEL_126;
          }
          v96 = *a2;
          v28 = MEMORY[0x1E0DE4FB0];
          v29 = MEMORY[0x1E0DE4FB0] + 64;
          v30 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F48] + 8);
          v31 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F48] + 16);
          v123[0] = MEMORY[0x1E0DE4FB0] + 64;
          v120.__locale_ = v30;
          *(std::locale::__imp **)((char *)&v120.__locale_ + *((_QWORD *)v30 - 3)) = v31;
          v32 = (std::ios_base *)((char *)&v120 + *((_QWORD *)v120.__locale_ - 3));
          std::ios_base::init(v32, &v121);
          v32[1].__vftable = 0;
          v32[1].__fmtflags_ = -1;
          v120.__locale_ = (std::locale::__imp *)(v28 + 24);
          v123[0] = v29;
          MEMORY[0x19401C8B0](&v121);
          v119 = 0;
          v33 = operator new(0x50uLL);
          *v33 = &off_1E2DD0A88;
          v33[1] = &v96;
          v33[2] = &v120;
          v33[3] = a2;
          v33[4] = v99;
          v33[5] = v101;
          v33[6] = v105;
          v33[7] = v108;
          v33[8] = &v97;
          v33[9] = v6;
          v119 = v33;
          (*(void (**)(void **__return_ptr, E5Common::E5PlatformManager *))(*(_QWORD *)a1 + 16))(&__p, a1);
          v34 = E5DB::SafeExecute((uint64_t)v118);
          if (v113 < 0)
            operator delete(__p);
          v35 = v119;
          if (v119 == v118)
          {
            v36 = 4;
            v35 = v118;
          }
          else
          {
            if (!v119)
              goto LABEL_51;
            v36 = 5;
          }
          (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_51:
          if (v34)
          {
            v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2[1], (uint64_t)"Dump Command: Error in processing arguments.", 44);
            std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*v37 - 24)));
            v38 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put();
            std::ostream::flush();
            v39 = *a2;
            (*(void (**)(void **__return_ptr, E5Common::E5PlatformManager *))(*(_QWORD *)a1 + 32))(&__p, a1);
            if (v113 >= 0)
              p_p = &__p;
            else
              p_p = __p;
            if (v113 >= 0)
              v41 = v113;
            else
              v41 = v112;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)p_p, v41);
            if (v113 < 0)
              operator delete(__p);
            v16 = 0x100000000;
LABEL_125:
            v120.__locale_ = (std::locale::__imp *)*MEMORY[0x1E0DE4F48];
            *(std::locale *)((char *)&v120 + *((_QWORD *)v120.__locale_ - 3)) = *(std::locale *)(MEMORY[0x1E0DE4F48]
                                                                                               + 24);
            MEMORY[0x19401C8BC](&v121);
            std::ostream::~ostream();
            MEMORY[0x19401CCD0](v123);
            v27 = (void **)v97;
            if (!v97)
            {
LABEL_133:
              if (v100 < 0)
                operator delete(v99[0]);
              if (v103 && (char)v102 < 0)
                operator delete(v101[0]);
              if (v107 && v106 < 0)
                operator delete(v105[0]);
              if (v109)
                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v108);
              return v16 & 0x100000000;
            }
LABEL_126:
            v79 = v98;
            v80 = v27;
            if (v98 != v27)
            {
              do
              {
                if (*((char *)v79 - 1) < 0)
                  operator delete(*(v79 - 3));
                v79 -= 3;
              }
              while (v79 != v27);
              v80 = v97;
            }
            v98 = v27;
            operator delete(v80);
            goto LABEL_133;
          }
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v95 = (E5DB *)objc_claimAutoreleasedReturnValue();
          v90.__locale_ = (std::locale::__imp *)&v95;
          v91 = v105;
          v92 = a2;
          v93 = v6;
          v94 = v104;
          v117 = 0;
          v42 = operator new(0x28uLL);
          *v42 = &off_1E2DD0B08;
          v42[1] = v108;
          v42[2] = &v97;
          v42[3] = &v90;
          v42[4] = v6;
          v117 = v42;
          (*(void (**)(void **__return_ptr, E5Common::E5PlatformManager *))(*(_QWORD *)a1 + 16))(&__p, a1);
          v43 = E5DB::SafeExecute((uint64_t)v116);
          if (v113 < 0)
            operator delete(__p);
          v44 = v117;
          if (v117 == v116)
          {
            v45 = 4;
            v44 = v116;
          }
          else
          {
            if (!v117)
              goto LABEL_68;
            v45 = 5;
          }
          (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_68:
          if (v43)
          {
            v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2[1], (uint64_t)"Dump Command: Error in getting E5 dump information.", 51);
            std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
            v47 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put();
            std::ostream::flush();
            v48 = *a2;
            (*(void (**)(void **__return_ptr, E5Common::E5PlatformManager *))(*(_QWORD *)a1 + 32))(&__p, a1);
            if (v113 >= 0)
              v49 = &__p;
            else
              v49 = __p;
            if (v113 >= 0)
              v50 = v113;
            else
              v50 = v112;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
            if (v113 < 0)
              operator delete(__p);
            v16 = 0x100000000;
LABEL_124:

            goto LABEL_125;
          }
          if (v100 < 0)
          {
            if (v99[1] != (void *)4)
              goto LABEL_84;
            v51 = (void **)v99[0];
          }
          else
          {
            if (v100 != 4)
              goto LABEL_84;
            v51 = v99;
          }
          if (*(_DWORD *)v51 == 1852797802)
          {
            objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v95, 3, 0);
            v74 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            objc_msgSend(v74, "bytes");
            objc_msgSend(v74, "length");
            std::ostream::write();

LABEL_114:
            if (v96 != *a2)
            {
              v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"Wrote E5 dump information to ", 29);
              if (!v103)
                std::__throw_bad_optional_access[abi:ne180100]();
              if ((v102 & 0x80u) == 0)
                v76 = v101;
              else
                v76 = (void **)v101[0];
              if ((v102 & 0x80u) == 0)
                v77 = v102;
              else
                v77 = (uint64_t)v101[1];
              v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v78);
            }
            v16 = 0;
            goto LABEL_124;
          }
LABEL_84:
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v99, "dot"))
          {
            E5DB::GenerateDigraphs(v95, (uint64_t)v88);
            if (*((char *)a2 + 39) >= 0)
              v52 = a2 + 2;
            else
              v52 = (_QWORD **)a2[2];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v52);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "lastPathComponent");
            v85 = (void *)objc_claimAutoreleasedReturnValue();

            v54 = v89;
            if (v89)
            {
              v55 = (void *)*MEMORY[0x1E0DE4F48];
              v56 = *(void **)(MEMORY[0x1E0DE4F48] + 24);
              do
              {
                if (!v103)
                  std::__throw_bad_optional_access[abi:ne180100]();
                v57 = v101;
                if ((v102 & 0x80u) != 0)
                  v57 = (void **)v101[0];
                if (*((char *)v54 + 39) < 0)
                  v58 = (uint64_t)v54[2];
                else
                  v58 = (uint64_t)(v54 + 2);
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s/%@-%s.dot"), v57, v85, v58);
                v59 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                objc_msgSend(v59, "UTF8String");
                std::ofstream::basic_ofstream(&__p);
                if (*(_DWORD *)&v114[*((_QWORD *)__p - 3)])
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::string::basic_string[abi:ne180100]<0>(&v86, (char *)objc_msgSend(objc_retainAutorelease(v59), "UTF8String"));
                  v83 = std::string::insert(&v86, 0, "Unable to open file for writing at ");
                  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
                  v87.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v84;
                  v83->__r_.__value_.__l.__size_ = 0;
                  v83->__r_.__value_.__r.__words[2] = 0;
                  v83->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, &v87);
                  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                v60 = *((char *)v54 + 63);
                if (v60 >= 0)
                  v61 = (uint64_t)(v54 + 5);
                else
                  v61 = (uint64_t)v54[5];
                if (v60 >= 0)
                  v62 = *((unsigned __int8 *)v54 + 63);
                else
                  v62 = (uint64_t)v54[6];
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v61, v62);
                if (!std::filebuf::close())
                  std::ios_base::clear((std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3)), *(_DWORD *)&v114[*((_QWORD *)__p - 3)] | 4);
                v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"Wrote dot file for ", 19);
                v64 = *((char *)v54 + 39);
                if (v64 >= 0)
                  v65 = (uint64_t)(v54 + 2);
                else
                  v65 = (uint64_t)v54[2];
                if (v64 >= 0)
                  v66 = *((unsigned __int8 *)v54 + 39);
                else
                  v66 = (uint64_t)v54[3];
                v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
                v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" at ", 4);
                v69 = objc_retainAutorelease(v59);
                v70 = (const char *)objc_msgSend(v69, "UTF8String");
                v71 = strlen(v70);
                v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v70, v71);
                std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(_QWORD *)(*v72 - 24)));
                v73 = std::locale::use_facet((const std::locale *)&v87, MEMORY[0x1E0DE4A90]);
                ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
                std::locale::~locale((std::locale *)&v87);
                std::ostream::put();
                std::ostream::flush();
                __p = v55;
                *(void **)((char *)&__p + *((_QWORD *)v55 - 3)) = v56;
                MEMORY[0x19401C8BC](&v112);
                std::ostream::~ostream();
                MEMORY[0x19401CCD0](&v115);

                v54 = (uint64_t **)*v54;
              }
              while (v54);
            }

            std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)v88);
          }
          goto LABEL_114;
        }
      }
      v10 = 4;
      v9 = v124;
      goto LABEL_19;
    }
  }
  else if (*((_BYTE *)a2 + 39))
  {
    goto LABEL_3;
  }
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2[1], (uint64_t)"E5 bundle path not specified.", 29);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet(&v120, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v120);
  std::ostream::put();
  std::ostream::flush();
  v13 = *a2;
  (*(void (**)(std::locale *__return_ptr, E5Common::E5PlatformManager *))(*(_QWORD *)a1 + 32))(&v120, a1);
  if ((v122 & 0x80u) == 0)
    v14 = &v120;
  else
    v14 = v120.__locale_;
  if ((v122 & 0x80u) == 0)
    v15 = v122;
  else
    v15 = v121;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  if ((char)v122 < 0)
    operator delete(v120.__locale_);
  v16 = 0x100000000;
  return v16 & 0x100000000;
}

void sub_191048D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,int a58,__int16 a59,uint64_t a60,char a61)
{

  std::ofstream::~ofstream(&STACK[0x3D8]);
  std::vector<std::string>::~vector[abi:ne180100](&a34);
  if (a42 < 0)
    operator delete(__p);
  if (a49 && a48 < 0)
    operator delete(a43);
  if (a57 && a56 < 0)
    operator delete(a51);
  if (a61)
  {
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a59);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_191049148()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_19104915C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E2DD0988;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_1910491AC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E2DD0988;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1910491E4(uint64_t a1)
{
  char **v1;
  _OWORD *v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *__p[2];
  char v11;
  void *v12;
  void *v13;
  _OWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *(char ***)(a1 + 8);
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v2 = operator new(0xE0uLL);
  v14 = v2 + 14;
  v2[10] = xmmword_1E2DD0938;
  v2[11] = unk_1E2DD0948;
  v2[12] = xmmword_1E2DD0958;
  v2[13] = unk_1E2DD0968;
  v2[6] = xmmword_1E2DD08F8;
  v2[7] = unk_1E2DD0908;
  v2[8] = xmmword_1E2DD0918;
  v2[9] = unk_1E2DD0928;
  v2[2] = xmmword_1E2DD08B8;
  v2[3] = unk_1E2DD08C8;
  v2[4] = xmmword_1E2DD08D8;
  v2[5] = unk_1E2DD08E8;
  *v2 = xmmword_1E2DD0898;
  v2[1] = *(_OWORD *)algn_1E2DD08A8;
  v12 = v2;
  v13 = v2 + 14;
  v3 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v2);
  v11 = 10;
  strcpy((char *)__p, "lp:f:io:t:");
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_1E2DD09F8;
  *(_OWORD *)(v4 + 8) = v8;
  *((_QWORD *)v4 + 3) = v3;
  *((_OWORD *)v4 + 2) = v7;
  *((_OWORD *)v4 + 3) = v9;
  v16 = v4;
  E5DB::ParseOptions(v1, (uint64_t)__p, (const option **)&v12, (uint64_t)v15);
  v5 = v16;
  if (v16 == v15)
  {
    v6 = 4;
    v5 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (v11 < 0)
    operator delete(__p[0]);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_191049364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  void *v28;

  v26 = *(_QWORD **)(v24 - 48);
  if (v26 == v23)
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 72);
  }
  else
  {
    if (!v26)
    {
      if (a21 < 0)
        goto LABEL_9;
      goto LABEL_5;
    }
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
  if (a21 < 0)
  {
LABEL_9:
    operator delete(__p);
    v28 = a22;
    if (a22)
    {
LABEL_10:
      operator delete(v28);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v28 = a22;
  if (a22)
    goto LABEL_10;
  goto LABEL_6;
}

uint64_t sub_1910493F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_trait"
                     "sIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_1"
                                "1char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19104945C()
{
  return &unk_1E2DD0A68;
}

void sub_19104946C()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191049480(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E2DD09F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_1910494D0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E2DD09F8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_191049508(_QWORD *a1, _DWORD *a2)
{
  _BYTE *v3;
  const char *v4;
  _BYTE *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__dst[2];
  unint64_t v21;
  __int128 v22;

  switch(*a2)
  {
    case 'f':
      v3 = (_BYTE *)a1[6];
      v4 = (const char *)*MEMORY[0x1E0C844D0];
      if (v3[24])
        goto LABEL_33;
      goto LABEL_9;
    case 'i':
      v5 = (_BYTE *)a1[7];
      goto LABEL_6;
    case 'l':
      v5 = (_BYTE *)a1[1];
LABEL_6:
      *v5 = 1;
      return;
    case 'o':
      v3 = (_BYTE *)a1[4];
      v4 = (const char *)*MEMORY[0x1E0C844D0];
      if (v3[24])
        goto LABEL_33;
LABEL_9:
      v6 = strlen(v4);
      if (v6 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v7 = v6;
      if (v6 >= 0x17)
      {
        v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v18 = v6 | 7;
        v19 = v18 + 1;
        v8 = operator new(v18 + 1);
        *((_QWORD *)v3 + 1) = v7;
        *((_QWORD *)v3 + 2) = v19 | 0x8000000000000000;
        *(_QWORD *)v3 = v8;
      }
      else
      {
        v3[23] = v6;
        v8 = v3;
        if (!v6)
          goto LABEL_28;
      }
      memmove(v8, v4, v7);
LABEL_28:
      *((_BYTE *)v8 + v7) = 0;
      v3[24] = 1;
      return;
    case 'p':
      v9 = a1[3];
      v10 = (const void *)*MEMORY[0x1E0C844D0];
      v11 = strlen((const char *)*MEMORY[0x1E0C844D0]);
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __dst[1] = v12;
        v21 = v15 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v21) = v11;
        v13 = __dst;
        if (!v11)
          goto LABEL_21;
      }
      memmove(v13, v10, (size_t)v12);
LABEL_21:
      *((_BYTE *)v12 + (_QWORD)v13) = 0;
      (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v9 + 40))(&v22, v9, __dst);
      v16 = a1[2];
      if (*(_BYTE *)(v16 + 16))
      {
        v17 = v22;
        *(_DWORD *)(v16 + 8) = DWORD2(v22);
        *(_QWORD *)v16 = v17;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v22);
        if ((SHIBYTE(v21) & 0x80000000) == 0)
          return;
      }
      else
      {
        *(_OWORD *)v16 = v22;
        *(_BYTE *)(v16 + 16) = 1;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v22);
        if ((SHIBYTE(v21) & 0x80000000) == 0)
          return;
      }
      operator delete(__dst[0]);
      return;
    case 't':
LABEL_33:
      JUMPOUT(0x19401C808);
    default:
      return;
  }
}

void sub_1910497A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1910497C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9all"
                     "ocatorIcEEEENS5_IS7_EEEERbRNS0_8optionalIN8E5Common18PlatformIdentifierEEERNSD_IS7_EESC_SJ_RS7_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsI"
                                "cEENS0_9allocatorIcEEEENS5_IS7_EEEERbRNS0_8optionalIN8E5Common18PlatformIdentifierEEERNS"
                                "D_IS7_EESC_SJ_RS7_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEERbRNS0_8optionalIN8E5Common18PlatformIdentifierEEERNSD_IS7_EESC_SJ_RS7_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEERbRNS0_8optionalIN8E5Common18PlatformIdentifierEEERNSD_IS7_EESC_SJ_RS7_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191049830()
{
  return &unk_1E2DD0A58;
}

void sub_191049840()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191049854(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E2DD0A88;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1910498AC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E2DD0A88;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_1910498EC(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  int v6;
  int v7;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  std::string *v23;
  uint64_t v24;
  std::runtime_error *v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  std::string __p;

  v2 = *(_DWORD **)(a1 + 32);
  if (*((char *)v2 + 23) < 0)
  {
    v4 = *((_QWORD *)v2 + 1);
    if (v4 != 3)
    {
      if (v4 != 4 || **(_DWORD **)v2 != 1852797802)
        goto LABEL_59;
      goto LABEL_20;
    }
    v2 = *(_DWORD **)v2;
  }
  else
  {
    v3 = *((unsigned __int8 *)v2 + 23);
    if (v3 != 3)
    {
      if (v3 != 4 || *v2 != 1852797802)
        goto LABEL_59;
      goto LABEL_20;
    }
  }
  if (*(_WORD *)v2 != 28516 || *((_BYTE *)v2 + 2) != 116)
  {
LABEL_59:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(unsigned __int16 *)v2;
  v7 = *((unsigned __int8 *)v2 + 2);
  if (v6 != 28516 || v7 != 116)
  {
LABEL_20:
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 24))
      goto LABEL_23;
    std::ofstream::open();
    v9 = *(_QWORD **)(a1 + 16);
    if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) == 0)
    {
      **(_QWORD **)(a1 + 8) = v9;
      goto LABEL_23;
    }
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Unable to open output file.");
LABEL_62:
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v21 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v21 + 24))
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "For dot format output, an output directory must be specified.");
    goto LABEL_62;
  }
  memset(&__p, 0, sizeof(__p));
  v22 = *(_BYTE *)(v21 + 23);
  if (v22 >= 0)
    v23 = (std::string *)v21;
  else
    v23 = *(std::string **)v21;
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(v21 + 23);
  else
    v24 = *(_QWORD *)(v21 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&__p, v23, (std::string *)((char *)v23 + v24));
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 56) + 16))
    return;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  if ((*(char *)(v10 + 23) & 0x80000000) == 0)
  {
    v11 = *(_OWORD *)v10;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    v12 = *(uint64_t **)(a1 + 64);
    v13 = *v12;
    v14 = v12[1];
    if (*v12 == v14)
      goto LABEL_45;
LABEL_28:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    while (1)
    {
      v18 = *(unsigned __int8 *)(v13 + 23);
      if ((v18 & 0x80u) == 0)
        v19 = *(unsigned __int8 *)(v13 + 23);
      else
        v19 = *(_QWORD *)(v13 + 8);
      if (v19 == size)
      {
        if ((v18 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v13, p_p, *(_QWORD *)(v13 + 8)))
            goto LABEL_45;
        }
        else
        {
          if (!*(_BYTE *)(v13 + 23))
            goto LABEL_45;
          v20 = 0;
          while (*(unsigned __int8 *)(v13 + v20) == p_p->__r_.__value_.__s.__data_[v20])
          {
            if (v18 == ++v20)
              goto LABEL_45;
          }
        }
      }
      v13 += 24;
      if (v13 == v14)
        goto LABEL_58;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
  v15 = *(uint64_t **)(a1 + 64);
  v13 = *v15;
  v14 = v15[1];
  if (*v15 != v14)
    goto LABEL_28;
LABEL_45:
  if (v13 == v14)
  {
LABEL_58:
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Given platform override is not found in E5 bundle.");
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191049C40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191049C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_191049CD8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_trait"
                     "sIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_1"
                                "1char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191049D44()
{
  return &unk_1E2DD0AE8;
}

void sub_191049D54()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191049D68(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DD0B08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_191049DA8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DD0B08;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_191049DD0(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 *v11;
  __int128 v12;
  void *v13;
  void *v14;
  __int128 *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  std::string v24;
  char v25;
  __int128 v26;
  char v27;

  v22 = 0;
  v23 = 0;
  v21 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 16))
  {
    std::vector<E5Common::PlatformIdentifier>::push_back[abi:ne180100](&v21, (_OWORD *)v2);
  }
  else
  {
    v17 = *(uint64_t **)(a1 + 16);
    v18 = *v17;
    v19 = v17[1];
    if (*v17 != v19)
    {
      do
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(&v24, *(_QWORD *)(a1 + 32), v18);
        std::vector<E5Common::PlatformIdentifier>::push_back[abi:ne180100](&v21, &v24);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v24);
        v18 += 24;
      }
      while (v18 != v19);
    }
  }
  v3 = (__int128 *)v21;
  v4 = (__int128 *)v22;
  if (v21 != v22)
  {
    do
    {
      v5 = *(_QWORD *)(a1 + 24);
      v20 = *v3;
      v6 = *(_QWORD *)(v5 + 16) + 16;
      v26 = v20;
      v27 = 1;
      E5RT::E5Program::LoadProgram(v6, (uint64_t)&v26, (E5RT::E5ProgramImpl **)&v24);
      v7 = v24.__r_.__value_.__r.__words[0];
      v24.__r_.__value_.__r.__words[0] = 0;
      if (v27)
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v26);
      v8 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), &v20);
      if (*(char *)(v8 + 23) >= 0)
        v9 = v8;
      else
        v9 = *(_QWORD *)v8;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(__int128 **)(v5 + 8);
      v24.__r_.__value_.__s.__data_[0] = 0;
      v25 = 0;
      if (*((_BYTE *)v11 + 24))
      {
        if (*((char *)v11 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v12 = *v11;
          v24.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
        }
        v25 = 1;
      }
      E5DB::GetE5ProgramInformation(v7, (uint64_t)&v24, *(unsigned __int8 *)(v5 + 32));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(**(id **)v5, "setObject:forKeyedSubscript:", v13, v10);

      if (v25 && SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      E5DB::GetAOTSegmentationAnalytics(*(_QWORD *)(v5 + 16) + 16, &v20);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(**(id **)v5, "setObject:forKeyedSubscript:", v14, CFSTR("SegmentationAnalytics"));

      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v20);
      ++v3;
    }
    while (v3 != v4);
    v3 = (__int128 *)v21;
  }
  if (v3)
  {
    v15 = (__int128 *)v22;
    v16 = (char *)v3;
    if (v22 != (char *)v3)
    {
      do
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v15 - 1));
      while (v15 != v3);
      v16 = v21;
    }
    v22 = (char *)v3;
    operator delete(v16);
  }
}

void sub_19104A028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, char *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  char *v22;
  char *v23;

  if (__p)
  {
    v22 = a13;
    v23 = __p;
    if (a13 != __p)
    {
      do
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v22 - 16));
      while (v22 != __p);
      v23 = __p;
    }
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_19104A0E4()
{
  JUMPOUT(0x19104A088);
}

void sub_19104A0EC()
{
  JUMPOUT(0x19104A088);
}

void sub_19104A0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  if (a21)
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a19);
  JUMPOUT(0x19104A09CLL);
}

uint64_t sub_19104A10C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_trait"
                     "sIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_1"
                                "1char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19104A178()
{
  return &unk_1E2DD0B68;
}

void std::vector<E5Common::PlatformIdentifier>::push_back[abi:ne180100](char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
LABEL_3:
    a1[1] = v6;
    return;
  }
  v7 = *a1;
  v8 = (v5 - *a1) >> 4;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 60)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 3 > v9)
    v9 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(16 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[16 * v8];
  v14 = &v12[16 * v11];
  *(_OWORD *)v13 = *a2;
  v6 = v13 + 16;
  if (v5 == v7)
  {
    *a1 = v13;
    a1[1] = v6;
    a1[2] = v14;
    if (!v5)
      goto LABEL_3;
  }
  else
  {
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
      v13 -= 16;
      v5 -= 16;
    }
    while (v5 != v7);
    v5 = *a1;
    v15 = a1[1];
    *a1 = v13;
    a1[1] = v6;
    a1[2] = v14;
    while (v15 != v5)
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v15 - 16));
    if (!v5)
      goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v6;
}

id E5DB::GetPortInformation(E5DB *this, const E5RT::E5Operand *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  id v6;
  uint64_t *i;
  _QWORD *v8;
  void *v9;
  id v10;
  void *v11;
  const __CFString *v12;
  E5RT *v14;
  std::__shared_weak_count *v15;
  id v16;
  char v17;

  (*(void (**)(E5RT **__return_ptr))(*(_QWORD *)this + 16))(&v14);
  E5RT::GetOperandDescriptorInformation(v14, (uint64_t)&v16);
  v3 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  for (i = *(uint64_t **)((*(uint64_t (**)(E5DB *))(*(_QWORD *)this + 56))(this) + 16); i; i = (uint64_t *)*i)
  {
    v8 = i + 2;
    if (*((char *)i + 39) < 0)
      v8 = (_QWORD *)*v8;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v9);

  }
  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v11 = v10;
  if (v17)
    v12 = CFSTR("Tensor");
  else
    v12 = CFSTR("Surface");
  objc_msgSend(v10, "setObject:forKey:", v12, CFSTR("PortType"));
  objc_msgSend(v11, "setObject:forKey:", v16, CFSTR("Description"));
  if (objc_msgSend(v6, "count"))
    objc_msgSend(v11, "setObject:forKey:", v6, CFSTR("Aliases"));

  return v11;
}

void sub_19104A420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19104A438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19104A450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_19104A464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19104A478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19104A498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

id E5DB::GetE5FunctionInformation(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const E5RT::E5Operand *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  const E5RT::E5Operand *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  const E5RT::E5Operand *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  void *v44;
  _QWORD **v45;
  uint64_t v46;
  const void **v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  void *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  const E5RT::E5Operand *v64;
  void *v65;
  uint64_t *v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  void *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  const E5RT::E5Operand *v80;
  void *v81;
  uint64_t *v82;
  void *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  void *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  const E5RT::E5Operand *v96;
  void *v97;
  uint64_t *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  std::string *v104;
  char v105;
  std::string *v106;
  uint64_t v107;
  std::__fs::filesystem::path::__string_view v108;
  void *p_dst;
  std::string::size_type v110;
  int v111;
  uint64_t *v112;
  uint64_t v113;
  void *v114;
  std::string::size_type v115;
  void *v116;
  std::__shared_weak_count *size;
  unint64_t *v118;
  unint64_t v119;
  std::string::size_type v120;
  void *v121;
  unint64_t *v122;
  void *v123;
  std::string *v124;
  void *v125;
  std::string::size_type v126;
  void *v127;
  std::string *v128;
  void *v129;
  std::string *v130;
  void *v131;
  void *v132;
  std::string::size_type v133;
  void *v134;
  unint64_t *v135;
  std::basic_string_view<_CharT, _Traits>::size_type v136;
  std::basic_string_view<_CharT, _Traits>::size_type v137;
  unint64_t *v138;
  std::string *v139;
  void *v140;
  unint64_t *v141;
  unint64_t *p_shared_owners;
  uint64_t *v143;
  uint64_t v144;
  std::string::size_type v145;
  std::string::size_type v146;
  std::string::size_type v147;
  std::string::size_type v148;
  void *v149;
  unint64_t *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  id v158;
  id v159;
  id v160;
  id v161;
  void *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  std::logic_error *v172;
  std::logic_error *v173;
  std::logic_error *v174;
  std::logic_error *exception;
  std::logic_error *v176;
  std::logic_error *v177;
  uint64_t v180;
  const void **v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  const void **v186;
  const void *v187;
  void *v188;
  _QWORD *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  std::__fs::filesystem::path __p;
  std::string v199;
  std::__fs::filesystem::path v200;
  std::__fs::filesystem::path v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  std::string __dst;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v185 = (void *)objc_claimAutoreleasedReturnValue();
  v180 = a1;
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = v4[1] - *v4;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = v5 / 24;
    do
    {
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v4 + 8, *v4 + v6);
      E5DB::GetPortInformation((E5DB *)v9[5], v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v9[2];
      v13 = v9 + 2;
      v12 = v14;
      if (*((char *)v13 + 23) >= 0)
        v15 = v13;
      else
        v15 = (uint64_t *)v12;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v185, "setValue:forKey:", v11, v16);

      ++v7;
      v6 += 24;
    }
    while (v8 != v7);
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v18 = v17[1] - *v17;
  v194 = v17;
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = v18 / 24;
    v22 = v17 + 8;
    do
    {
      if (v20 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17[1] - *v17) >> 3))
      {
        v176 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v176, "iterator out of range");
        v176->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v176, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v22, *v17 + v19);
      E5DB::GetPortInformation((E5DB *)v23[5], v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = v23[2];
      v27 = v23 + 2;
      v26 = v28;
      if (*((char *)v27 + 23) >= 0)
        v29 = v27;
      else
        v29 = (uint64_t *)v26;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v184, "setValue:forKey:", v25, v30);

      ++v20;
      v19 += 24;
      v17 = v194;
    }
    while (v21 != v20);
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v183 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 56))(v180);
  v32 = v31[1] - *v31;
  v189 = v31;
  if (v32)
  {
    v33 = 0;
    v34 = 0;
    v35 = v32 / 24;
    v36 = v31 + 8;
    do
    {
      if (v34 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31[1] - *v31) >> 3))
      {
        v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v177, "iterator out of range");
        v177->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v177, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v36, *v31 + v33);
      E5DB::GetPortInformation((E5DB *)v37[5], v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = v37[2];
      v41 = v37 + 2;
      v40 = v42;
      if (*((char *)v41 + 23) >= 0)
        v43 = v41;
      else
        v43 = (uint64_t *)v40;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v183, "setValue:forKey:", v39, v44);

      ++v34;
      v33 += 24;
      v31 = v189;
    }
    while (v35 != v34);
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v190 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v182 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 32))(v180);
  v46 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v45 + 16))(**v45);
  v47 = *(const void ***)v46;
  v181 = *(const void ***)(v46 + 8);
  if (*(const void ***)v46 != v181)
  {
    v196 = v194 + 3;
    v197 = v4 + 3;
    v195 = v189 + 3;
    while (2)
    {
      v186 = v47;
      v48 = *v47;
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v188 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = (*(uint64_t (**)(const void *))(*(_QWORD *)v48 + 24))(v48);
      if (*(char *)(v49 + 23) >= 0)
        v50 = v49;
      else
        v50 = *(_QWORD *)v49;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v188, "setValue:forKey:", v51, CFSTR("Op Name"));

      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v193 = (void *)objc_claimAutoreleasedReturnValue();
      v187 = v48;
      v52 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)v48 + 32))(v48);
      v53 = v52[1] - *v52;
      if (v53)
      {
        v54 = 0;
        v55 = 0;
        v56 = v53 / 24;
        do
        {
          if (v55 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52[1] - *v52) >> 3))
          {
            v172 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v172, "iterator out of range");
            v172->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v172, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v52 + 8, *v52 + v54);
          v58 = (uint64_t)(v57 + 2);
          if (*((char *)v57 + 39) >= 0)
            v59 = v57 + 2;
          else
            v59 = (uint64_t *)v57[2];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v59);
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v193, "addObject:", v60);

          v61 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v197, v58);
          if (!v61 || v61[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
          {
            v62 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v196, v58);
            if (!v62 || v62[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v194[1] - *v194) >> 3))
            {
              v63 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v195, v58);
              if (!v63 || v63[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v189[1] - *v189) >> 3))
              {
                E5DB::GetPortInformation((E5DB *)v57[5], v64);
                v65 = (void *)objc_claimAutoreleasedReturnValue();
                if (*((char *)v57 + 39) >= 0)
                  v66 = v57 + 2;
                else
                  v66 = (uint64_t *)v57[2];
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v66);
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v190, "setValue:forKey:", v65, v67);

              }
            }
          }
          ++v55;
          v54 += 24;
        }
        while (v56 != v55);
      }
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v192 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)v187 + 40))(v187);
      v69 = v68[1] - *v68;
      if (v69)
      {
        v70 = 0;
        v71 = 0;
        v72 = v69 / 24;
        do
        {
          if (v71 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68[1] - *v68) >> 3))
          {
            v173 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v173, "iterator out of range");
            v173->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v173, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v68 + 8, *v68 + v70);
          v74 = (uint64_t)(v73 + 2);
          if (*((char *)v73 + 39) >= 0)
            v75 = v73 + 2;
          else
            v75 = (uint64_t *)v73[2];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v75);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v192, "addObject:", v76);

          v77 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v197, v74);
          if (!v77 || v77[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
          {
            v78 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v196, v74);
            if (!v78 || v78[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v194[1] - *v194) >> 3))
            {
              v79 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v195, v74);
              if (!v79 || v79[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v189[1] - *v189) >> 3))
              {
                E5DB::GetPortInformation((E5DB *)v73[5], v80);
                v81 = (void *)objc_claimAutoreleasedReturnValue();
                if (*((char *)v73 + 39) >= 0)
                  v82 = v73 + 2;
                else
                  v82 = (uint64_t *)v73[2];
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v82);
                v83 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v190, "setValue:forKey:", v81, v83);

              }
            }
          }
          ++v71;
          v70 += 24;
        }
        while (v72 != v71);
      }
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v191 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = (_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)v187 + 48))(v187);
      v85 = v84[1] - *v84;
      if (v85)
      {
        v86 = 0;
        v87 = 0;
        v88 = v85 / 24;
        do
        {
          if (v87 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84[1] - *v84) >> 3))
          {
            v174 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v174, "iterator out of range");
            v174->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v174, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v84 + 8, *v84 + v86);
          v90 = (uint64_t)(v89 + 2);
          if (*((char *)v89 + 39) >= 0)
            v91 = v89 + 2;
          else
            v91 = (uint64_t *)v89[2];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v91);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v191, "addObject:", v92);

          v93 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v197, v90);
          if (!v93 || v93[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
          {
            v94 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v196, v90);
            if (!v94 || v94[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v194[1] - *v194) >> 3))
            {
              v95 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v195, v90);
              if (!v95 || v95[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v189[1] - *v189) >> 3))
              {
                E5DB::GetPortInformation((E5DB *)v89[5], v96);
                v97 = (void *)objc_claimAutoreleasedReturnValue();
                if (*((char *)v89 + 39) >= 0)
                  v98 = v89 + 2;
                else
                  v98 = (uint64_t *)v89[2];
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v98);
                v99 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v190, "setValue:forKey:", v97, v99);

              }
            }
          }
          ++v87;
          v86 += 24;
        }
        while (v88 != v87);
      }
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      switch((*(unsigned int (**)(const void *))(*(_QWORD *)v187 + 16))(v187))
      {
        case 1u:
          E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(v187, &v202);
          objc_msgSend(v100, "setValue:forKey:", CFSTR("ANE"), CFSTR("Type"));
          if (*(char *)(v202 + 47) >= 0)
            v101 = v202 + 24;
          else
            v101 = *(_QWORD *)(v202 + 24);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v101);
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v102, CFSTR("Procedure Name"));

          memset(&v201, 0, sizeof(v201));
          v103 = *(unsigned __int8 *)(a2 + 23);
          if ((v103 & 0x80u) == 0)
            v104 = (std::string *)a2;
          else
            v104 = *(std::string **)a2;
          if ((v103 & 0x80u) != 0)
            v103 = *(_QWORD *)(a2 + 8);
          std::string::append[abi:ne180100]<char const*,0>(&v201.__pn_, v104, (std::string *)((char *)v104 + v103));
          memset(&v199, 0, sizeof(v199));
          v105 = *(_BYTE *)(v202 + 23);
          if (v105 >= 0)
            v106 = (std::string *)v202;
          else
            v106 = *(std::string **)v202;
          if (v105 >= 0)
            v107 = *(unsigned __int8 *)(v202 + 23);
          else
            v107 = *(_QWORD *)(v202 + 8);
          std::string::append[abi:ne180100]<char const*,0>(&v199, v106, (std::string *)((char *)v106 + v107));
          v108 = std::__fs::filesystem::path::__parent_path(&v201);
          if (v108.__size_ >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          if (v108.__size_ >= 0x17)
          {
            v136 = (v108.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v108.__size_ | 7) != 0x17)
              v136 = v108.__size_ | 7;
            v137 = v136 + 1;
            p_dst = operator new(v136 + 1);
            __dst.__r_.__value_.__l.__size_ = v108.__size_;
            __dst.__r_.__value_.__r.__words[2] = v137 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v108.__size_;
            p_dst = &__dst;
            if (!v108.__size_)
              goto LABEL_148;
          }
          memmove(p_dst, v108.__data_, v108.__size_);
LABEL_148:
          *((_BYTE *)p_dst + v108.__size_) = 0;
          __p.__pn_ = __dst;
          std::__fs::filesystem::relative[abi:ne180100]((const std::__fs::filesystem::path *)&v199, &__p, &v200);
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v199.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_150:
              if ((SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_151;
              goto LABEL_158;
            }
          }
          else if ((SHIBYTE(v199.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_150;
          }
          operator delete(v199.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_151:
            __dst = v200.__pn_;
            goto LABEL_159;
          }
LABEL_158:
          std::string::__init_copy_ctor_external(&__dst, v200.__pn_.__r_.__value_.__l.__data_, v200.__pn_.__r_.__value_.__l.__size_);
LABEL_159:
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v139 = &__dst;
          else
            v139 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v139);
          v140 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v140, CFSTR("Program URL"));

          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_164:
              if ((SHIBYTE(v201.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_165;
              goto LABEL_173;
            }
          }
          else if ((SHIBYTE(v200.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_164;
          }
          operator delete(v200.__pn_.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v201.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_165:
            size = v203;
            if (v203)
              goto LABEL_174;
            goto LABEL_190;
          }
LABEL_173:
          operator delete(v201.__pn_.__r_.__value_.__l.__data_);
          size = v203;
          if (v203)
          {
LABEL_174:
            p_shared_owners = (unint64_t *)&size->__shared_owners_;
            do
              v119 = __ldaxr(p_shared_owners);
            while (__stlxr(v119 - 1, p_shared_owners));
            goto LABEL_188;
          }
LABEL_190:
          objc_msgSend(v193, "sortedArrayUsingSelector:", sel_localizedCaseInsensitiveCompare_);
          v151 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v188, "setValue:forKey:", v151, CFSTR("Op Inputs"));

          objc_msgSend(v192, "sortedArrayUsingSelector:", sel_localizedCaseInsensitiveCompare_);
          v152 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v188, "setValue:forKey:", v152, CFSTR("Op Outputs"));

          objc_msgSend(v191, "sortedArrayUsingSelector:", sel_localizedCaseInsensitiveCompare_);
          v153 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v188, "setValue:forKey:", v153, CFSTR("Op InOuts"));

          objc_msgSend(v188, "setValue:forKey:", v100, CFSTR("Op Details"));
          objc_msgSend(v182, "addObject:", v188);

          v47 = v186 + 2;
          if (v186 + 2 == v181)
            break;
          continue;
        case 2u:
          objc_msgSend(v100, "setValue:forKey:", CFSTR("ClassicCPU"), CFSTR("Type"));
          E5RT::E5Operation::GetOperationAttributes<CpuInferenceOpT>(v187, &__dst);
          if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 47) >= 0)
            v115 = __dst.__r_.__value_.__r.__words[0] + 24;
          else
            v115 = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 24);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v115);
          v116 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v116, CFSTR("configuration"));

          size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          if (!__dst.__r_.__value_.__l.__size_)
            goto LABEL_190;
          v118 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          goto LABEL_188;
        case 3u:
          objc_msgSend(v100, "setValue:forKey:", CFSTR("E5Cast"), CFSTR("Type"));
          E5RT::E5Operation::GetOperationAttributes<CastOpT>(v187, &v201);
          sub_191051280(*(_DWORD *)v201.__pn_.__r_.__value_.__l.__data_);
          v123 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v123, CFSTR("Execution Device"));

          E5Common::StringUtils::IntsVectorToString<unsigned long long>((std::string *)(v201.__pn_.__r_.__value_.__r.__words[0] + 8), &__dst);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v124 = &__dst;
          else
            v124 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v124);
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v125, CFSTR("Output Alignments"));

          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            size = (std::__shared_weak_count *)v201.__pn_.__r_.__value_.__l.__size_;
            if (!v201.__pn_.__r_.__value_.__l.__size_)
              goto LABEL_190;
          }
          else
          {
            size = (std::__shared_weak_count *)v201.__pn_.__r_.__value_.__l.__size_;
            if (!v201.__pn_.__r_.__value_.__l.__size_)
              goto LABEL_190;
          }
          v138 = (unint64_t *)&size->__shared_owners_;
          do
            v119 = __ldaxr(v138);
          while (__stlxr(v119 - 1, v138));
          goto LABEL_188;
        case 8u:
          objc_msgSend(v100, "setValue:forKey:", CFSTR("MPSGraph"), CFSTR("Type"));
          E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>(v187, &v201);
          if (*(char *)(v201.__pn_.__r_.__value_.__r.__words[0] + 47) >= 0)
            v126 = v201.__pn_.__r_.__value_.__r.__words[0] + 24;
          else
            v126 = *(_QWORD *)(v201.__pn_.__r_.__value_.__r.__words[0] + 24);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v126);
          v127 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v127, CFSTR("Function Name"));

          std::to_string(&__dst, *(_QWORD *)(v201.__pn_.__r_.__value_.__r.__words[0] + 48));
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v128 = &__dst;
          else
            v128 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v128);
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v129, CFSTR("Registry ID"));

          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          std::to_string(&__dst, *(unsigned __int8 *)(v201.__pn_.__r_.__value_.__r.__words[0] + 56));
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v130 = &__dst;
          else
            v130 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v130);
          v131 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v131, CFSTR("Enable Shader Profiling"));

          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            size = (std::__shared_weak_count *)v201.__pn_.__r_.__value_.__l.__size_;
            if (!v201.__pn_.__r_.__value_.__l.__size_)
              goto LABEL_190;
          }
          else
          {
            size = (std::__shared_weak_count *)v201.__pn_.__r_.__value_.__l.__size_;
            if (!v201.__pn_.__r_.__value_.__l.__size_)
              goto LABEL_190;
          }
          v141 = (unint64_t *)&size->__shared_owners_;
          do
            v119 = __ldaxr(v141);
          while (__stlxr(v119 - 1, v141));
          goto LABEL_188;
        case 0xBu:
          E5RT::E5Operation::GetOperationAttributes<EirInferenceOpT>(v187, &__dst);
          sub_191051280(*(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 24));
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v132, CFSTR("Backend Requested"));

          if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 55) >= 0)
            v133 = __dst.__r_.__value_.__r.__words[0] + 32;
          else
            v133 = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 32);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v133);
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v134, CFSTR("configuration"));

          size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          if (!__dst.__r_.__value_.__l.__size_)
            goto LABEL_190;
          v135 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v119 = __ldaxr(v135);
          while (__stlxr(v119 - 1, v135));
          goto LABEL_188;
        case 0xCu:
          objc_msgSend(v100, "setValue:forKey:", CFSTR("BNNS"), CFSTR("Type"));
          E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>(v187, &__dst);
          v110 = __dst.__r_.__value_.__r.__words[0];
          v111 = *__dst.__r_.__value_.__l.__data_;
          if (v111 == 1)
          {
            v143 = *(uint64_t **)(__dst.__r_.__value_.__r.__words[0] + 8);
            if (*((char *)v143 + 23) >= 0)
              v144 = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8);
            else
              v144 = *v143;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v144);
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "setValue:forKey:", v114, CFSTR("MIL Program URL"));
          }
          else
          {
            if (v111 != 2)
              goto LABEL_182;
            v112 = *(uint64_t **)(__dst.__r_.__value_.__r.__words[0] + 8);
            if (*((char *)v112 + 23) >= 0)
              v113 = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8);
            else
              v113 = *v112;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v113);
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "setValue:forKey:", v114, CFSTR("BNNSIR URL"));
          }

          v110 = __dst.__r_.__value_.__r.__words[0];
LABEL_182:
          v147 = *(_QWORD *)(v110 + 16);
          v145 = v110 + 16;
          v146 = v147;
          if (*(char *)(v145 + 23) >= 0)
            v148 = v145;
          else
            v148 = v146;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v148);
          v149 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v149, CFSTR("Function Name"));

          size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__l.__size_)
          {
            v150 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
            do
              v119 = __ldaxr(v150);
            while (__stlxr(v119 - 1, v150));
LABEL_188:
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          goto LABEL_190;
        case 0xEu:
          objc_msgSend(v100, "setValue:forKey:", CFSTR("E5MinimalCPU"), CFSTR("Type"));
          E5RT::E5Operation::GetOperationAttributes<E5MinimalCpuOpT>(v187, &__dst);
          if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 23) >= 0)
            v120 = __dst.__r_.__value_.__r.__words[0];
          else
            v120 = *(_QWORD *)__dst.__r_.__value_.__l.__data_;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v120);
          v121 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "setValue:forKey:", v121, CFSTR("Model Assets URL"));

          size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          if (!__dst.__r_.__value_.__l.__size_)
            goto LABEL_190;
          v122 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v119 = __ldaxr(v122);
          while (__stlxr(v119 - 1, v122));
          goto LABEL_188;
        default:
          goto LABEL_190;
      }
      break;
    }
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v154 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 16))(v180);
  if (*(char *)(v155 + 23) >= 0)
    v156 = v155;
  else
    v156 = *(_QWORD *)v155;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v156);
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v154, "setValue:forKey:", v157, CFSTR("Function Name"));

  objc_msgSend(v154, "setValue:forKey:", v185, CFSTR("Function Inputs"));
  objc_msgSend(v154, "setValue:forKey:", v184, CFSTR("Function Outputs"));
  objc_msgSend(v154, "setValue:forKey:", v183, CFSTR("Function InOuts"));
  if (a3)
    objc_msgSend(v154, "setValue:forKey:", v190, CFSTR("Function Intermediates"));
  objc_msgSend(v154, "setValue:forKey:", v182, CFSTR("Function Operations"));
  v158 = v185;
  v159 = v184;
  v160 = v183;
  v161 = v190;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  v163 = sub_1910514A0(v158);
  v164 = sub_1910514A0(v159);
  v165 = sub_1910514A0(v160);
  v166 = sub_1910514A0(v161);
  sub_19104D738(v163);
  v167 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v162, "setValue:forKey:", v167, CFSTR("Inputs"));

  sub_19104D738(v164);
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v162, "setValue:forKey:", v168, CFSTR("Outputs"));

  sub_19104D738(v165);
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v162, "setValue:forKey:", v169, CFSTR("InOuts"));

  sub_19104D738(v166);
  v170 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v162, "setValue:forKey:", v170, CFSTR("Intermediates"));

  objc_msgSend(v154, "setValue:forKey:", v162, CFSTR("Memory Usage"));
  return v154;
}

void sub_19104B9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;
  uint64_t v44;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 112);
  _Unwind_Resume(a1);
}

id E5DB::GetE5ProgramInformation(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  char *v7;
  void **v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t **i;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  __int128 v42;
  void *__p;
  char *v44;
  unint64_t v45;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  __p = 0;
  v44 = 0;
  v45 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v42, a1, a2);
    v7 = v44;
    if ((unint64_t)v44 >= v45)
    {
      v9 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)&__p, (uint64_t)&v42);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      v44 = v9;
      if (*((_QWORD *)&v42 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    else
    {
      *(_OWORD *)v44 = v42;
      v44 = v7 + 16;
    }
  }
  else
  {
    v8 = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (&__p != v8)
      std::vector<std::shared_ptr<E5RT::E5Function const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<E5RT::E5Function const>*,std::shared_ptr<E5RT::E5Function const>*>((uint64_t)&__p, *v8, v8[1], ((_BYTE *)v8[1] - (_BYTE *)*v8) >> 4);
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (uint64_t *)__p;
  v15 = v44;
  if (__p != v44)
  {
    do
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v14 + 16))(*v14);
      if (*(char *)(v16 + 23) >= 0)
        v17 = v16;
      else
        v17 = *(_QWORD *)v16;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addObject:", v18);

      v19 = *v14;
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      E5DB::GetE5FunctionInformation(v19, v20, a3);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (*(char *)(v16 + 23) >= 0)
        v22 = v16;
      else
        v22 = *(_QWORD *)v16;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v21, v23);

      v14 += 2;
    }
    while (v14 != (uint64_t *)v15);
  }
  objc_msgSend(v13, "sortedArrayUsingSelector:", sel_localizedCaseInsensitiveCompare_);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setValue:forKey:", v24, CFSTR("Public Functions"));

  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&v42, a1);
  if ((_QWORD)v42)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = *(uint64_t ***)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v42 + 16))(v42) + 16); i; i = (uint64_t **)*i)
    {
      if (*((char *)i + 63) >= 0)
        v27 = (uint64_t)(i + 5);
      else
        v27 = (uint64_t)i[5];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((char *)i + 39) >= 0)
        v29 = (uint64_t)(i + 2);
      else
        v29 = (uint64_t)i[2];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "setObject:forKeyedSubscript:", v28, v30);

    }
    objc_msgSend(v6, "setValue:forKey:", v25, CFSTR("Build Information"));

  }
  v31 = v6;
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  v35 = (char *)__p;
  if (__p)
  {
    v36 = v44;
    v37 = __p;
    if (v44 != __p)
    {
      do
      {
        v38 = (std::__shared_weak_count *)*((_QWORD *)v36 - 1);
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v36 -= 16;
      }
      while (v36 != v35);
      v37 = __p;
    }
    v44 = v35;
    operator delete(v37);
  }

  return v31;
}

void sub_19104C2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_19104C2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_19104C3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a4);

  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

__CFDictionary *E5DB::GetAOTSegmentationAnalytics(uint64_t a1, __int128 *a2)
{
  E5RT::ProgramLibraryImpl **v2;
  E5RT::E5ProgramImpl *v3;
  E5RT::E5ProgramImpl *v4;
  __CFDictionary *SegmentationAnalytics;
  E5RT::E5ProgramImpl *v6;
  __int128 v8;
  char v9;
  E5RT::E5ProgramImpl *v10;
  E5RT::E5ProgramImpl *v11;

  v8 = *a2;
  v9 = 1;
  E5RT::E5Program::LoadProgram(a1, (uint64_t)&v8, &v10);
  if (v9)
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v8);
  v2 = (E5RT::ProgramLibraryImpl **)operator new();
  v3 = v10;
  v10 = 0;
  v11 = v3;
  E5RT::ProgramLibraryPriv::ProgramLibraryPriv(v2, &v11);
  v4 = v11;
  v11 = 0;
  if (v4)
    (*(void (**)(E5RT::E5ProgramImpl *))(*(_QWORD *)v4 + 8))(v4);
  SegmentationAnalytics = E5RT::ProgramLibrary::GetSegmentationAnalytics(v2);
  E5RT::ProgramLibraryPriv::~ProgramLibraryPriv((E5RT::ProgramLibraryPriv *)v2);
  MEMORY[0x19401CD90]();
  v6 = v10;
  v10 = 0;
  if (v6)
    (*(void (**)(E5RT::E5ProgramImpl *))(*(_QWORD *)v6 + 8))(v6);
  return SegmentationAnalytics;
}

void sub_19104C4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<E5RT::ProgramLibraryPriv>::~unique_ptr[abi:ne180100]((E5RT::ProgramLibraryPriv **)va);
  v4 = *(_QWORD *)(v2 - 32);
  *(_QWORD *)(v2 - 32) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

E5RT::ProgramLibraryPriv **std::unique_ptr<E5RT::ProgramLibraryPriv>::~unique_ptr[abi:ne180100](E5RT::ProgramLibraryPriv **a1)
{
  E5RT::ProgramLibraryPriv *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::ProgramLibraryPriv::~ProgramLibraryPriv(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

uint64_t DG::Tab(DG *this)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  for (; this; this = (DG *)((char *)this - 1))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"    ", 4);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5[0] = v2;
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v7);
}

void sub_19104C68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19104C6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DG::NL(DG *this)
{
  std::locale::id *v2;
  const std::locale::facet *v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;
  std::locale v10;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  if (this)
  {
    v2 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(v7[0] - 24)));
      v3 = std::locale::use_facet(&v10, v2);
      ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
      std::locale::~locale(&v10);
      std::ostream::put();
      std::ostream::flush();
      this = (DG *)((char *)this - 1);
    }
    while (this);
  }
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v9);
}

void sub_19104C7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19104C7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 72));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19104C804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void DG::Qt(DG *this@<X0>, std::string *a2@<X8>)
{
  DG *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::value_type __s[8];
  char v17;
  void **__dst;
  size_t v19;
  int64_t v20;
  std::string v21;
  std::string v22;

  *((_BYTE *)&v21.__r_.__value_.__s + 23) = 1;
  LOWORD(v21.__r_.__value_.__l.__data_) = 34;
  v4 = objc_retainAutorelease(this);
  v5 = (const char *)-[DG UTF8String](v4, "UTF8String");
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v19 = v7;
    v20 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_8:
    memmove(p_dst, v5, v7);
  *((_BYTE *)p_dst + v7) = 0;
  if (v20 >= 0)
    v11 = (const std::string::value_type *)&__dst;
  else
    v11 = (const std::string::value_type *)__dst;
  if (v20 >= 0)
    v12 = HIBYTE(v20);
  else
    v12 = v19;
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v17 = 1;
  strcpy(__s, "\"");
  v15 = std::string::append(&v22, __s, 1uLL);
  *a2 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v17 < 0)
  {
    operator delete(*(void **)__s);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_18;
LABEL_22:
      operator delete(__dst);
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
LABEL_23:
      operator delete(v21.__r_.__value_.__l.__data_);
      goto LABEL_19;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20) < 0)
    goto LABEL_22;
LABEL_18:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
LABEL_19:

}

void sub_19104C9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:

    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a22);

  _Unwind_Resume(a1);
}

void DG::AddOpNodeLabel(uint64_t a1, DG *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  id v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  void *__p[2];
  unsigned __int8 v21;
  void *v22[2];
  unsigned __int8 v23;

  v7 = a3;
  objc_msgSend(a4, "objectForKey:", CFSTR("Type"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\"%@\ntype=%@\""), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  DG::Tab(a2);
  if ((v23 & 0x80u) == 0)
    v10 = v22;
  else
    v10 = (void **)v22[0];
  if ((v23 & 0x80u) == 0)
    v11 = v23;
  else
    v11 = (uint64_t)v22[1];
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"label=", 6);
  v14 = objc_retainAutorelease(v9);
  v15 = (const char *)objc_msgSend(v14, "UTF8String");
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
  DG::NL((DG *)1);
  if ((v21 & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v19 = v21;
  else
    v19 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  if ((char)v21 < 0)
  {
    operator delete(__p[0]);
    if (((char)v23 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_17:
    operator delete(v22[0]);
    goto LABEL_15;
  }
  if ((char)v23 < 0)
    goto LABEL_17;
LABEL_15:

}

void sub_19104CBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void DG::AddOpNode(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  DG *v7;
  id v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  std::string::size_type v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  std::string *v40;
  std::string::size_type v41;
  void *__p[2];
  unsigned __int8 v43;
  std::string v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 v47;

  v7 = a3;
  v8 = a4;
  DG::Tab((DG *)a2);
  if ((v47 & 0x80u) == 0)
    v9 = &v45;
  else
    v9 = v45;
  if ((v47 & 0x80u) == 0)
    v10 = v47;
  else
    v10 = v46;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v9, v10);
  DG::Qt(v7, &v44);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v44;
  else
    v12 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    size = v44.__r_.__value_.__l.__size_;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, size);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" [", 2);
  DG::NL((DG *)1);
  if ((v43 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v43 & 0x80u) == 0)
    v17 = v43;
  else
    v17 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  if (((char)v43 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
LABEL_80:
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_81;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_80;
LABEL_21:
  if (((char)v47 & 0x80000000) == 0)
    goto LABEL_22;
LABEL_81:
  operator delete(v45);
LABEL_22:
  DG::Tab((DG *)(a2 + 1));
  if ((v47 & 0x80u) == 0)
    v18 = &v45;
  else
    v18 = v45;
  if ((v47 & 0x80u) == 0)
    v19 = v47;
  else
    v19 = v46;
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v18, v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"shape=box", 9);
  DG::NL((DG *)1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v44;
  else
    v22 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    v23 = v44.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0)
      goto LABEL_36;
  }
  else if (((char)v47 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v45);
LABEL_36:
  DG::Tab((DG *)(a2 + 1));
  if ((v47 & 0x80u) == 0)
    v24 = &v45;
  else
    v24 = v45;
  if ((v47 & 0x80u) == 0)
    v25 = v47;
  else
    v25 = v46;
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v24, v25);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"color=\"lightblue3\"", 18);
  DG::NL((DG *)1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v44;
  else
    v28 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    v29 = v44.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0)
      goto LABEL_50;
  }
  else if (((char)v47 & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(v45);
LABEL_50:
  DG::Tab((DG *)(a2 + 1));
  if ((v47 & 0x80u) == 0)
    v30 = &v45;
  else
    v30 = v45;
  if ((v47 & 0x80u) == 0)
    v31 = v47;
  else
    v31 = v46;
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v30, v31);
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"style=filled", 12);
  DG::NL((DG *)1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v44;
  else
    v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    v35 = v44.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0)
      goto LABEL_64;
  }
  else if (((char)v47 & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(v45);
LABEL_64:
  DG::AddOpNodeLabel(a1, (DG *)(a2 + 1), v7, v8);
  DG::Tab((DG *)a2);
  if ((v47 & 0x80u) == 0)
    v36 = &v45;
  else
    v36 = v45;
  if ((v47 & 0x80u) == 0)
    v37 = v47;
  else
    v37 = v46;
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v36, v37);
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"]", 1);
  DG::NL((DG *)1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v44;
  else
    v40 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    v41 = v44.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0)
      goto LABEL_78;
LABEL_89:
    operator delete(v45);
    goto LABEL_78;
  }
  if ((char)v47 < 0)
    goto LABEL_89;
LABEL_78:

}

void sub_19104D00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if (a27 < 0)
    {
LABEL_6:
      operator delete(a22);

      _Unwind_Resume(a1);
    }
  }
  else if (a27 < 0)
  {
    goto LABEL_6;
  }

  _Unwind_Resume(a1);
}

id DG::ArrAsStr(DG *this, NSArray *a2)
{
  char v2;
  DG *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (char)a2;
  v3 = this;
  v4 = -[DG count](v3, "count");
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v6 = v4 - 1;
    v7 = 0;
    if ((v2 & 1) != 0)
    {
      do
      {
        -[DG objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v8, "isEqual:", &unk_1E2DED9D0))
        {

          v8 = &unk_1E2DEDA00;
        }
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "appendString:", v9);

        if (v7 < v6)
          objc_msgSend(v5, "appendString:", CFSTR(","));

        ++v7;
      }
      while (v4 != v7);
    }
    else
    {
      do
      {
        -[DG objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", v7);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v10, "isEqual:", &unk_1E2DED9E8))
        {

          v10 = &unk_1E2DEDA00;
        }
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "appendString:", v11);

        if (v7 < v6)
          objc_msgSend(v5, "appendString:", CFSTR(","));

        ++v7;
      }
      while (v4 != v7);
    }
  }

  return v5;
}

void sub_19104D35C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19104D36C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19104D37C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19104D3B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19104D3C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19104D3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void DG::AddTensorLabel(uint64_t a1, DG *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  id v22;
  const char *v23;
  size_t v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  DG *v28;
  id v29;
  DG *v30;
  void *__p[2];
  unsigned __int8 v32;
  void *v33[2];
  unsigned __int8 v34;

  v29 = a3;
  v7 = a4;
  objc_msgSend(v7, "objectForKey:", CFSTR("Shape"));
  v30 = (DG *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("Strides"));
  v28 = (DG *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("DataType"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", CFSTR("ComponentDataType"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", CFSTR("Interleave"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("Size"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntValue");

  sub_19104D738(v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)MEMORY[0x1E0CB3940];
  DG::ArrAsStr(v30, (NSArray *)1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  DG::ArrAsStr(v28, 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "stringWithFormat:", CFSTR("\"%@\ndtype=%@\nshape={%@}\nstrides={%@}\ninterleave=%@\nsize=%@\""), v29, v9, v15, v16, v10, v13);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  DG::Tab(a2);
  if ((v34 & 0x80u) == 0)
    v18 = v33;
  else
    v18 = (void **)v33[0];
  if ((v34 & 0x80u) == 0)
    v19 = v34;
  else
    v19 = (uint64_t)v33[1];
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v18, v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"label=", 6);
  v22 = objc_retainAutorelease(v17);
  v23 = (const char *)objc_msgSend(v22, "UTF8String");
  v24 = strlen(v23);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
  DG::NL((DG *)1);
  if ((v32 & 0x80u) == 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  if ((v32 & 0x80u) == 0)
    v27 = v32;
  else
    v27 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
  if ((char)v32 < 0)
  {
    operator delete(__p[0]);
    if (((char)v34 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_17:
    operator delete(v33[0]);
    goto LABEL_15;
  }
  if ((char)v34 < 0)
    goto LABEL_17;
LABEL_15:

}

void sub_19104D650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);

  _Unwind_Resume(a1);
}

id sub_19104D738(unint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringValue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByAppendingString:", CFSTR("B"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (a1 <= 0x100000)
  {
    if (a1 < 0x401)
    {
LABEL_7:
      v9 = v4;
      goto LABEL_8;
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a1 >> 10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringValue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByAppendingString:", CFSTR("KB"));
    v7 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a1 >> 20);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringValue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByAppendingString:", CFSTR("MB"));
    v7 = objc_claimAutoreleasedReturnValue();
  }
  v8 = (void *)v7;

  if (!v8)
    goto LABEL_7;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (%@)"), v4, v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();

LABEL_8:
  return v9;
}

void sub_19104D868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19104D880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19104D894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19104D8AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19104D8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19104D8D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19104D8E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_19104D904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void DG::AddImageLabel(uint64_t a1, DG *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  id v24;
  void *__p[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;

  v24 = a3;
  v7 = a4;
  objc_msgSend(v7, "objectForKey:", CFSTR("Height"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("Width"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@x%@"), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("Slices"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("Format"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\"%@\nshape={%@}\nformat=%@\nslices=%@\""), v24, v10, v12, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  DG::Tab(a2);
  if ((v28 & 0x80u) == 0)
    v14 = v27;
  else
    v14 = (void **)v27[0];
  if ((v28 & 0x80u) == 0)
    v15 = v28;
  else
    v15 = (uint64_t)v27[1];
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v14, v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label=", 6);
  v18 = objc_retainAutorelease(v13);
  v19 = (const char *)objc_msgSend(v18, "UTF8String");
  v20 = strlen(v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
  DG::NL((DG *)1);
  if ((v26 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v23 = v26;
  else
    v23 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    if (((char)v28 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_17:
    operator delete(v27[0]);
    goto LABEL_15;
  }
  if ((char)v28 < 0)
    goto LABEL_17;
LABEL_15:

}

void sub_19104DB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);

  _Unwind_Resume(a1);
}

void DG::AddPortLabel(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  int v10;
  DG *v11;
  id v12;

  v12 = a3;
  v7 = a4;
  objc_msgSend(v7, "objectForKey:", CFSTR("PortType"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("Description"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "isEqual:", CFSTR("Tensor"));
  v11 = (DG *)(a2 + 1);
  if (v10)
    DG::AddTensorLabel(a1, v11, v12, v9);
  else
    DG::AddImageLabel(a1, v11, v12, v9);

}

void sub_19104DC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19104DC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19104DCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void DG::AddIONode(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  DG *v13;
  id v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type size;
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string *v35;
  std::string::size_type v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  std::string *v48;
  std::string::size_type v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  std::string *v54;
  std::string::size_type v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  std::string *v60;
  std::string::size_type v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  std::string *v66;
  std::string::size_type v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  std::string *v72;
  std::string::size_type v73;
  void *v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  std::string *v79;
  std::string::size_type v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  std::string *v85;
  std::string::size_type v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  id v91;
  void *__p[2];
  unsigned __int8 v93;
  std::string v94;
  void *v95;
  uint64_t v96;
  unsigned __int8 v97;

  v13 = a3;
  v14 = a4;
  v91 = a5;
  v90 = a6;
  v89 = a7;
  DG::Tab((DG *)a2);
  if ((v97 & 0x80u) == 0)
    v15 = &v95;
  else
    v15 = v95;
  if ((v97 & 0x80u) == 0)
    v16 = v97;
  else
    v16 = v96;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v15, v16);
  DG::Qt(v13, &v94);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v94;
  else
    v18 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    size = v94.__r_.__value_.__l.__size_;
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, size);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" [", 2);
  DG::NL((DG *)1);
  if ((v93 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v93 & 0x80u) == 0)
    v23 = v93;
  else
    v23 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (((char)v93 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
LABEL_67:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_67;
LABEL_21:
  if (((char)v97 & 0x80000000) == 0)
    goto LABEL_22;
LABEL_68:
  operator delete(v95);
LABEL_22:
  DG::Tab((DG *)(a2 + 1));
  if ((v97 & 0x80u) == 0)
    v24 = &v95;
  else
    v24 = v95;
  if ((v97 & 0x80u) == 0)
    v25 = v97;
  else
    v25 = v96;
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v24, v25);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"shape=oval", 10);
  DG::NL((DG *)1);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v94;
  else
    v28 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    v29 = v94.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0)
      goto LABEL_36;
  }
  else if (((char)v97 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v95);
LABEL_36:
  objc_msgSend(v14, "objectForKeyedSubscript:", v13);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if (v30)
  {
    DG::Tab((DG *)(a2 + 1));
    if ((v97 & 0x80u) == 0)
      v31 = &v95;
    else
      v31 = v95;
    if ((v97 & 0x80u) == 0)
      v32 = v97;
    else
      v32 = v96;
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v31, v32);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"color=\"chocolate1\"", 18);
    DG::NL((DG *)1);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v94;
    else
      v35 = (std::string *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    else
      v36 = v94.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v94.__r_.__value_.__l.__data_);
      if (((char)v97 & 0x80000000) == 0)
        goto LABEL_51;
    }
    else if (((char)v97 & 0x80000000) == 0)
    {
      goto LABEL_51;
    }
    operator delete(v95);
LABEL_51:
    DG::Tab((DG *)(a2 + 1));
    if ((v97 & 0x80u) == 0)
      v37 = &v95;
    else
      v37 = v95;
    if ((v97 & 0x80u) == 0)
      v38 = v97;
    else
      v38 = v96;
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v37, v38);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"style=filled", 12);
    DG::NL((DG *)1);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v94;
    else
      v41 = (std::string *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    else
      v42 = v94.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v94.__r_.__value_.__l.__data_);
      if (((char)v97 & 0x80000000) == 0)
        goto LABEL_65;
    }
    else if (((char)v97 & 0x80000000) == 0)
    {
LABEL_65:
      DG::AddPortLabel(a1, a2 + 1, v13, v30);
      goto LABEL_141;
    }
    operator delete(v95);
    goto LABEL_65;
  }
  objc_msgSend(v91, "objectForKeyedSubscript:", v13);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v43)
  {
    objc_msgSend(v90, "objectForKeyedSubscript:", v13);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    if (v88)
    {
      DG::Tab((DG *)(a2 + 1));
      if ((v97 & 0x80u) == 0)
        v56 = &v95;
      else
        v56 = v95;
      if ((v97 & 0x80u) == 0)
        v57 = v97;
      else
        v57 = v96;
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v56, v57);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"color=\"gold\"", 12);
      DG::NL((DG *)1);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v94;
      else
        v60 = (std::string *)v94.__r_.__value_.__r.__words[0];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      else
        v61 = v94.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if ((char)v97 < 0)
        operator delete(v95);
      DG::Tab((DG *)(a2 + 1));
      if ((v97 & 0x80u) == 0)
        v62 = &v95;
      else
        v62 = v95;
      if ((v97 & 0x80u) == 0)
        v63 = v97;
      else
        v63 = v96;
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v62, v63);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"style=filled", 12);
      DG::NL((DG *)1);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = &v94;
      else
        v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      else
        v67 = v94.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if ((char)v97 < 0)
        operator delete(v95);
      DG::AddPortLabel(a1, a2 + 1, v13, v88);
    }
    else if (v89)
    {
      objc_msgSend(v89, "objectForKeyedSubscript:", v13);
      v74 = (void *)objc_claimAutoreleasedReturnValue();

      if (v74)
      {
        DG::Tab((DG *)(a2 + 1));
        if ((v97 & 0x80u) == 0)
          v75 = &v95;
        else
          v75 = v95;
        if ((v97 & 0x80u) == 0)
          v76 = v97;
        else
          v76 = v96;
        v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v75, v76);
        v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"color=\"cyan2\"", 13);
        DG::NL((DG *)1);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v94;
        else
          v79 = (std::string *)v94.__r_.__value_.__r.__words[0];
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        else
          v80 = v94.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if ((char)v97 < 0)
          operator delete(v95);
        DG::Tab((DG *)(a2 + 1));
        if ((v97 & 0x80u) == 0)
          v81 = &v95;
        else
          v81 = v95;
        if ((v97 & 0x80u) == 0)
          v82 = v97;
        else
          v82 = v96;
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v81, v82);
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"style=filled", 12);
        DG::NL((DG *)1);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v85 = &v94;
        else
          v85 = (std::string *)v94.__r_.__value_.__r.__words[0];
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        else
          v86 = v94.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if ((char)v97 < 0)
          operator delete(v95);
        objc_msgSend(v89, "objectForKeyedSubscript:", v13);
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        DG::AddPortLabel(a1, a2 + 1, v13, v87);

      }
    }

    goto LABEL_140;
  }
  DG::Tab((DG *)(a2 + 1));
  if ((v97 & 0x80u) == 0)
    v44 = &v95;
  else
    v44 = v95;
  if ((v97 & 0x80u) == 0)
    v45 = v97;
  else
    v45 = v96;
  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v44, v45);
  v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"color=\"darkolivegreen1\"", 23);
  DG::NL((DG *)1);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v94;
  else
    v48 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    v49 = v94.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0)
      goto LABEL_86;
  }
  else if (((char)v97 & 0x80000000) == 0)
  {
    goto LABEL_86;
  }
  operator delete(v95);
LABEL_86:
  DG::Tab((DG *)(a2 + 1));
  if ((v97 & 0x80u) == 0)
    v50 = &v95;
  else
    v50 = v95;
  if ((v97 & 0x80u) == 0)
    v51 = v97;
  else
    v51 = v96;
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v50, v51);
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"style=filled", 12);
  DG::NL((DG *)1);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &v94;
  else
    v54 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    v55 = v94.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0)
      goto LABEL_100;
LABEL_161:
    operator delete(v95);
    goto LABEL_100;
  }
  if ((char)v97 < 0)
    goto LABEL_161;
LABEL_100:
  DG::AddPortLabel(a1, a2 + 1, v13, v43);
LABEL_140:

LABEL_141:
  DG::Tab((DG *)a2);
  if ((v97 & 0x80u) == 0)
    v68 = &v95;
  else
    v68 = v95;
  if ((v97 & 0x80u) == 0)
    v69 = v97;
  else
    v69 = v96;
  v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)v68, v69);
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"]", 1);
  DG::NL((DG *)1);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v72 = &v94;
  else
    v72 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    v73 = v94.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0)
      goto LABEL_155;
LABEL_157:
    operator delete(v95);
    goto LABEL_155;
  }
  if ((char)v97 < 0)
    goto LABEL_157;
LABEL_155:

}

void sub_19104E568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void DG::AddOpsOrdering(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  _QWORD *v6;
  std::string *p_p;
  std::string::size_type size;
  unint64_t i;
  DG *v10;
  std::string *v11;
  std::string::size_type v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned __int8 v30;
  std::string __p;

  v5 = a3;
  if (objc_msgSend(v5, "count") != 1)
  {
    DG::Tab((DG *)a2);
    v6 = (_QWORD *)(a1 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    for (i = 0; i < objc_msgSend(v5, "count"); ++i)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", i);
      v10 = (DG *)objc_claimAutoreleasedReturnValue();
      DG::Qt(v10, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &__p;
      else
        v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v12 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v11, v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (i < objc_msgSend(v5, "count") - 1)
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&__p, " -> ");
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 4);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

    }
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
    DG::NL((DG *)1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &__p;
    else
      v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v15 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    DG::Tab((DG *)(a2 + 1));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &__p;
    else
      v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v17 = __p.__r_.__value_.__l.__size_;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v16, v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"style=\"dotted\"", 14);
    DG::NL((DG *)1);
    if ((v30 & 0x80u) == 0)
      v20 = &v28;
    else
      v20 = v28;
    if ((v30 & 0x80u) == 0)
      v21 = v30;
    else
      v21 = v29;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    if ((char)v30 < 0)
    {
      operator delete(v28);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_46:
    DG::Tab((DG *)a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &__p;
    else
      v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v23 = __p.__r_.__value_.__l.__size_;
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v22, v23);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"]", 1);
    DG::NL((DG *)1);
    if ((v30 & 0x80u) == 0)
      v26 = &v28;
    else
      v26 = v28;
    if ((v30 & 0x80u) == 0)
      v27 = v30;
    else
      v27 = v29;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    if ((char)v30 < 0)
    {
      operator delete(v28);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_60;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_60:

}

void sub_19104EAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_19104EB90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19104EBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  if (a17 < 0)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_19104EBE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19104EBF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void DG::AddLegend(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *p_p;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  id v32;
  const char *v33;
  size_t v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  id v43;
  const char *v44;
  size_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  uint64_t v97;
  void *__p;
  uint64_t v99;
  unsigned __int8 v100;
  void *v101;
  uint64_t v102;
  unsigned __int8 v103;

  v7 = a3;
  v8 = a4;
  DG::Tab((DG *)a2);
  v9 = (_QWORD *)(a1 + 16);
  if ((v103 & 0x80u) == 0)
    v10 = &v101;
  else
    v10 = v101;
  if ((v103 & 0x80u) == 0)
    v11 = v103;
  else
    v11 = v102;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Legend [shape=none, margin=0, label=<", 37);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v100 & 0x80u) == 0)
    v15 = v100;
  else
    v15 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v15);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v101);
LABEL_15:
  DG::Tab((DG *)(a2 + 1));
  if ((v103 & 0x80u) == 0)
    v16 = &v101;
  else
    v16 = v101;
  if ((v103 & 0x80u) == 0)
    v17 = v103;
  else
    v17 = v102;
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"<TABLE BORDER=\"0\" CELLBORDER=\"1\" CELLSPACING=\"0\" CELLPADDING=\"8\">", 65);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v20 = &__p;
  else
    v20 = __p;
  if ((v100 & 0x80u) == 0)
    v21 = v100;
  else
    v21 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_29;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v101);
LABEL_29:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0)
    v22 = &v101;
  else
    v22 = v101;
  if ((v103 & 0x80u) == 0)
    v23 = v103;
  else
    v23 = v102;
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v22, v23);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"<TR> <TD COLSPAN=\"2\"><B>Legend</B></TD> </TR>", 45);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v26 = &__p;
  else
    v26 = __p;
  if ((v100 & 0x80u) == 0)
    v27 = v100;
  else
    v27 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_43;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(v101);
LABEL_43:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0)
    v28 = &v101;
  else
    v28 = v101;
  if ((v103 & 0x80u) == 0)
    v29 = v103;
  else
    v29 = v102;
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v28, v29);
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"<TR> <TD>Platform</TD> <TD>", 27);
  v32 = objc_retainAutorelease(v8);
  v33 = (const char *)objc_msgSend(v32, "UTF8String");
  v34 = strlen(v33);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"</TD> </TR>", 11);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v37 = &__p;
  else
    v37 = __p;
  if ((v100 & 0x80u) == 0)
    v38 = v100;
  else
    v38 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_57;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(v101);
LABEL_57:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0)
    v39 = &v101;
  else
    v39 = v101;
  if ((v103 & 0x80u) == 0)
    v40 = v103;
  else
    v40 = v102;
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v39, v40);
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"<TR> <TD>Function Name</TD> <TD>", 32);
  v43 = objc_retainAutorelease(v7);
  v44 = (const char *)objc_msgSend(v43, "UTF8String");
  v45 = strlen(v44);
  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v44, v45);
  v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"</TD> </TR>", 11);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v48 = &__p;
  else
    v48 = __p;
  if ((v100 & 0x80u) == 0)
    v49 = v100;
  else
    v49 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_71;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v101);
LABEL_71:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0)
    v50 = &v101;
  else
    v50 = v101;
  if ((v103 & 0x80u) == 0)
    v51 = v103;
  else
    v51 = v102;
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v50, v51);
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"<TR> <TD>Inputs</TD> <TD BGCOLOR=\"chocolate1\"></TD> </TR>", 57);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v54 = &__p;
  else
    v54 = __p;
  if ((v100 & 0x80u) == 0)
    v55 = v100;
  else
    v55 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_85;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_85;
  }
  operator delete(v101);
LABEL_85:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0)
    v56 = &v101;
  else
    v56 = v101;
  if ((v103 & 0x80u) == 0)
    v57 = v103;
  else
    v57 = v102;
  v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v56, v57);
  v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"<TR> <TD>InOuts</TD> <TD BGCOLOR=\"gold\"></TD> </TR>", 51);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v60 = &__p;
  else
    v60 = __p;
  if ((v100 & 0x80u) == 0)
    v61 = v100;
  else
    v61 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_99;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_99;
  }
  operator delete(v101);
LABEL_99:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0)
    v62 = &v101;
  else
    v62 = v101;
  if ((v103 & 0x80u) == 0)
    v63 = v103;
  else
    v63 = v102;
  v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v62, v63);
  v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"<TR> <TD>Outputs</TD> <TD BGCOLOR=\"darkolivegreen1\"></TD> </TR>", 63);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v66 = &__p;
  else
    v66 = __p;
  if ((v100 & 0x80u) == 0)
    v67 = v100;
  else
    v67 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_113;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_113;
  }
  operator delete(v101);
LABEL_113:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0)
    v68 = &v101;
  else
    v68 = v101;
  if ((v103 & 0x80u) == 0)
    v69 = v103;
  else
    v69 = v102;
  v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v68, v69);
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"<TR> <TD>Operations</TD> <TD BGCOLOR=\"lightblue3\"></TD> </TR>", 61);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v72 = &__p;
  else
    v72 = __p;
  if ((v100 & 0x80u) == 0)
    v73 = v100;
  else
    v73 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_127;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_127;
  }
  operator delete(v101);
LABEL_127:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0)
    v74 = &v101;
  else
    v74 = v101;
  if ((v103 & 0x80u) == 0)
    v75 = v103;
  else
    v75 = v102;
  v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v74, v75);
  v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"<TR> <TD>Intermediates</TD> <TD BGCOLOR=\"cyan2\"></TD> </TR>", 59);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v78 = &__p;
  else
    v78 = __p;
  if ((v100 & 0x80u) == 0)
    v79 = v100;
  else
    v79 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_141;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_141;
  }
  operator delete(v101);
LABEL_141:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0)
    v80 = &v101;
  else
    v80 = v101;
  if ((v103 & 0x80u) == 0)
    v81 = v103;
  else
    v81 = v102;
  v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v80, v81);
  v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"<TR> <TD>Dotted Lines</TD> <TD>Order of Execution</TD> </TR>", 60);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v84 = &__p;
  else
    v84 = __p;
  if ((v100 & 0x80u) == 0)
    v85 = v100;
  else
    v85 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_155;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_155;
  }
  operator delete(v101);
LABEL_155:
  DG::Tab((DG *)(a2 + 1));
  if ((v103 & 0x80u) == 0)
    v86 = &v101;
  else
    v86 = v101;
  if ((v103 & 0x80u) == 0)
    v87 = v103;
  else
    v87 = v102;
  v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v86, v87);
  v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"</TABLE>", 8);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v90 = &__p;
  else
    v90 = __p;
  if ((v100 & 0x80u) == 0)
    v91 = v100;
  else
    v91 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_169;
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_169;
  }
  operator delete(v101);
LABEL_169:
  DG::Tab((DG *)a2);
  if ((v103 & 0x80u) == 0)
    v92 = &v101;
  else
    v92 = v101;
  if ((v103 & 0x80u) == 0)
    v93 = v103;
  else
    v93 = v102;
  v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v92, v93);
  v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)">]", 2);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0)
    v96 = &__p;
  else
    v96 = __p;
  if ((v100 & 0x80u) == 0)
    v97 = v100;
  else
    v97 = v99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v96, v97);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0)
      goto LABEL_183;
LABEL_209:
    operator delete(v101);
    goto LABEL_183;
  }
  if ((char)v103 < 0)
    goto LABEL_209;
LABEL_183:

}

void sub_19104F508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void DG::GenerateFunctionDigraph(DG *this@<X0>, NSDictionary *a2@<X1>, NSString *a3@<X2>, uint64_t a4@<X8>)
{
  DG *v7;
  _QWORD *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  std::string::size_type v27;
  uint64_t v28;
  std::ios_base *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  std::string *v33;
  std::string::size_type v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t j;
  void *v44;
  uint64_t v45;
  std::string::size_type v46;
  uint64_t v47;
  std::ios_base *v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  _QWORD *v54;
  _QWORD *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  std::string::size_type v65;
  uint64_t v66;
  std::ios_base *v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  std::string *v71;
  std::string::size_type v72;
  _QWORD *v73;
  _QWORD *v74;
  std::string *v75;
  std::string::size_type v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  std::string *v82;
  std::string::size_type v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  NSDictionary *v87;
  NSString *v88;
  id obj;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::string::size_type v105;
  std::string::size_type v106;
  std::string::size_type v107;
  std::string::size_type v108;
  std::string::size_type v109;
  std::string::size_type v110;
  std::string::size_type v111;
  std::string::size_type v112;
  DG *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  DG *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  void *v127;
  uint64_t v128;
  unsigned __int8 v129;
  std::string v130;
  void *v131[2];
  char v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  void *v141;
  uint64_t v142;
  unsigned __int8 v143;
  _QWORD v144[2];
  _QWORD v145[11];
  char v146;
  uint64_t v147;
  std::string __p;
  _QWORD v149[8];
  __int128 v150;
  __int128 v151;
  int v152;
  _QWORD v153[19];
  _BYTE v154[128];
  _BYTE v155[128];
  _BYTE v156[128];
  _BYTE v157[128];
  uint64_t v158;

  v85 = a4;
  v158 = *MEMORY[0x1E0C80C00];
  v7 = this;
  v87 = a2;
  v88 = a3;
  v113 = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v144);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)"digraph G {", 11);
  DG::NL((DG *)1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  DG::Tab((DG *)1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &__p;
  else
    v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v12 = __p.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"graph []", 8);
  DG::NL((DG *)1);
  if ((v143 & 0x80u) == 0)
    v15 = &v141;
  else
    v15 = v141;
  if ((v143 & 0x80u) == 0)
    v16 = v143;
  else
    v16 = v142;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v143 < 0)
  {
    operator delete(v141);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_174:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_23;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_174;
LABEL_23:
  DG::AddLegend((uint64_t)v144, 2, v87, v88);
  -[DG objectForKey:](v7, "objectForKey:", CFSTR("Function Inputs"));
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  -[DG objectForKey:](v7, "objectForKey:", CFSTR("Function Outputs"));
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  -[DG objectForKey:](v7, "objectForKey:", CFSTR("Function InOuts"));
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  -[DG objectForKey:](v7, "objectForKey:", CFSTR("Function Intermediates"));
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  -[DG objectForKey:](v7, "objectForKey:", CFSTR("Function Operations"));
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v139 = 0u;
  v140 = 0u;
  v137 = 0u;
  v138 = 0u;
  obj = v86;
  v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v137, v157, 16);
  if (!v17)
    goto LABEL_162;
  v90 = *(_QWORD *)v138;
  v18 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 8);
  v111 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v112 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v109 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 40);
  v110 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 32);
  v108 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 48);
  v107 = *MEMORY[0x1E0DE4F50];
  v101 = MEMORY[0x1E0DE4FB8] + 16;
  v105 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v106 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  do
  {
    v19 = 0;
    v91 = v17;
    do
    {
      if (*(_QWORD *)v138 != v90)
        objc_enumerationMutation(obj);
      v20 = *(void **)(*((_QWORD *)&v137 + 1) + 8 * v19);
      objc_msgSend(v20, "objectForKey:", CFSTR("Op Name"), v85);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "objectForKey:", CFSTR("Op Details"));
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      DG::AddOpNode((uint64_t)v144, 1, v21, v94);
      objc_msgSend(v92, "addObject:", v21);
      objc_msgSend(v20, "objectForKey:", CFSTR("Op Inputs"));
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "objectForKey:", CFSTR("Op Outputs"));
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "objectForKey:", CFSTR("Op InOuts"));
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      v93 = v19;
      v135 = 0u;
      v136 = 0u;
      v133 = 0u;
      v134 = 0u;
      v100 = v97;
      v22 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v133, v156, 16);
      v118 = (DG *)v21;
      v23 = MEMORY[0x1E0DE4FD0];
      if (v22)
      {
        v102 = *(_QWORD *)v134;
        do
        {
          for (i = 0; i != v22; ++i)
          {
            if (*(_QWORD *)v134 != v102)
              objc_enumerationMutation(v100);
            v25 = *(void **)(*((_QWORD *)&v133 + 1) + 8 * i);
            DG::AddIONode((uint64_t)v144, 1, v25, v117, v116, v115, v114);
            v26 = v23 + 104;
            v153[0] = v23 + 104;
            v27 = v23 + 64;
            __p.__r_.__value_.__r.__words[2] = v23 + 64;
            __p.__r_.__value_.__r.__words[0] = v112;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v112 - 24)) = v111;
            __p.__r_.__value_.__l.__size_ = 0;
            v28 = v23;
            v29 = (std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24));
            std::ios_base::init(v29, v149);
            v29[1].__vftable = 0;
            v29[1].__fmtflags_ = -1;
            __p.__r_.__value_.__r.__words[2] = v110;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[2] + *(_QWORD *)(v110 - 24)) = v109;
            __p.__r_.__value_.__r.__words[0] = v18;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v18 - 24)) = v108;
            v153[0] = v26;
            __p.__r_.__value_.__r.__words[0] = v28 + 24;
            __p.__r_.__value_.__r.__words[2] = v27;
            std::streambuf::basic_streambuf();
            v149[0] = MEMORY[0x1E0DE4FB8] + 16;
            v150 = 0u;
            v151 = 0u;
            v152 = 24;
            v7 = v113;
            v21 = v118;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"    ", 4);
            std::stringbuf::str();
            __p.__r_.__value_.__r.__words[0] = v107;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v107 - 24)) = v105;
            __p.__r_.__value_.__r.__words[2] = v106;
            v149[0] = MEMORY[0x1E0DE4FB8] + 16;
            if (SBYTE7(v151) < 0)
              operator delete((void *)v150);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x19401CCD0](v153);
            if ((v143 & 0x80u) == 0)
              v30 = &v141;
            else
              v30 = v141;
            if ((v143 & 0x80u) == 0)
              v31 = v143;
            else
              v31 = v142;
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)v30, v31);
            DG::Qt((DG *)v25, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v33 = &__p;
            else
              v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v34 = __p.__r_.__value_.__l.__size_;
            v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
            v132 = 4;
            strcpy((char *)v131, " -> ");
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v131, 4);
            DG::Qt(v118, &v130);
            if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v37 = &v130;
            else
              v37 = (std::string *)v130.__r_.__value_.__r.__words[0];
            if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v38 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
            else
              v38 = v130.__r_.__value_.__l.__size_;
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
            DG::NL((DG *)1);
            if ((v129 & 0x80u) == 0)
              v40 = &v127;
            else
              v40 = v127;
            if ((v129 & 0x80u) == 0)
              v41 = v129;
            else
              v41 = v128;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
            if ((char)v129 < 0)
            {
              operator delete(v127);
              v23 = MEMORY[0x1E0DE4FD0];
              if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_62:
                if ((v132 & 0x80000000) == 0)
                  goto LABEL_63;
                goto LABEL_68;
              }
            }
            else
            {
              v23 = MEMORY[0x1E0DE4FD0];
              if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_62;
            }
            operator delete(v130.__r_.__value_.__l.__data_);
            if ((v132 & 0x80000000) == 0)
            {
LABEL_63:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_69;
              goto LABEL_64;
            }
LABEL_68:
            operator delete(v131[0]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_69:
              operator delete(__p.__r_.__value_.__l.__data_);
              if (((char)v143 & 0x80000000) == 0)
                continue;
              goto LABEL_70;
            }
LABEL_64:
            if (((char)v143 & 0x80000000) == 0)
              continue;
LABEL_70:
            operator delete(v141);
          }
          v22 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v133, v156, 16);
        }
        while (v22);
      }

      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v99 = v96;
      v42 = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v123, v155, 16);
      if (!v42)
        goto LABEL_116;
      v103 = *(_QWORD *)v124;
      do
      {
        for (j = 0; j != v42; ++j)
        {
          if (*(_QWORD *)v124 != v103)
            objc_enumerationMutation(v99);
          v44 = *(void **)(*((_QWORD *)&v123 + 1) + 8 * j);
          DG::AddIONode((uint64_t)v144, 1, v44, v117, v116, v115, v114);
          v45 = v23 + 104;
          v153[0] = v23 + 104;
          v46 = v23 + 64;
          __p.__r_.__value_.__r.__words[2] = v23 + 64;
          __p.__r_.__value_.__r.__words[0] = v112;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v112 - 24)) = v111;
          __p.__r_.__value_.__l.__size_ = 0;
          v47 = v23;
          v48 = (std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24));
          std::ios_base::init(v48, v149);
          v48[1].__vftable = 0;
          v48[1].__fmtflags_ = -1;
          __p.__r_.__value_.__r.__words[2] = v110;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[2] + *(_QWORD *)(v110 - 24)) = v109;
          __p.__r_.__value_.__r.__words[0] = v18;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v18 - 24)) = v108;
          v153[0] = v45;
          __p.__r_.__value_.__r.__words[0] = v47 + 24;
          __p.__r_.__value_.__r.__words[2] = v46;
          std::streambuf::basic_streambuf();
          v149[0] = MEMORY[0x1E0DE4FB8] + 16;
          v150 = 0u;
          v151 = 0u;
          v152 = 24;
          v7 = v113;
          v21 = v118;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"    ", 4);
          std::stringbuf::str();
          __p.__r_.__value_.__r.__words[0] = v107;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v107 - 24)) = v105;
          __p.__r_.__value_.__r.__words[2] = v106;
          v149[0] = MEMORY[0x1E0DE4FB8] + 16;
          if (SBYTE7(v151) < 0)
            operator delete((void *)v150);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x19401CCD0](v153);
          if ((v143 & 0x80u) == 0)
            v49 = &v141;
          else
            v49 = v141;
          if ((v143 & 0x80u) == 0)
            v50 = v143;
          else
            v50 = v142;
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)v49, v50);
          DG::Qt(v118, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &__p;
          else
            v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v53 = __p.__r_.__value_.__l.__size_;
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
          v132 = 4;
          strcpy((char *)v131, " -> ");
          v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v131, 4);
          DG::Qt((DG *)v44, &v130);
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &v130;
          else
            v56 = (std::string *)v130.__r_.__value_.__r.__words[0];
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
          else
            v57 = v130.__r_.__value_.__l.__size_;
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
          DG::NL((DG *)1);
          if ((v129 & 0x80u) == 0)
            v59 = &v127;
          else
            v59 = v127;
          if ((v129 & 0x80u) == 0)
            v60 = v129;
          else
            v60 = v128;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
          if ((char)v129 < 0)
          {
            operator delete(v127);
            v23 = MEMORY[0x1E0DE4FD0];
            if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_106:
              if ((v132 & 0x80000000) == 0)
                goto LABEL_107;
              goto LABEL_112;
            }
          }
          else
          {
            v23 = MEMORY[0x1E0DE4FD0];
            if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_106;
          }
          operator delete(v130.__r_.__value_.__l.__data_);
          if ((v132 & 0x80000000) == 0)
          {
LABEL_107:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_113;
            goto LABEL_108;
          }
LABEL_112:
          operator delete(v131[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_113:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (((char)v143 & 0x80000000) == 0)
              continue;
            goto LABEL_114;
          }
LABEL_108:
          if (((char)v143 & 0x80000000) == 0)
            continue;
LABEL_114:
          operator delete(v141);
        }
        v42 = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v123, v155, 16);
      }
      while (v42);
LABEL_116:

      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v98 = v95;
      v61 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v119, v154, 16);
      if (!v61)
        goto LABEL_160;
      v104 = *(_QWORD *)v120;
      while (2)
      {
        v62 = 0;
        while (2)
        {
          if (*(_QWORD *)v120 != v104)
            objc_enumerationMutation(v98);
          v63 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * v62);
          DG::AddIONode((uint64_t)v144, 1, v63, v117, v116, v115, v114);
          v64 = v23 + 104;
          v153[0] = v23 + 104;
          v65 = v23 + 64;
          __p.__r_.__value_.__r.__words[2] = v23 + 64;
          __p.__r_.__value_.__r.__words[0] = v112;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v112 - 24)) = v111;
          __p.__r_.__value_.__l.__size_ = 0;
          v66 = v23;
          v67 = (std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24));
          std::ios_base::init(v67, v149);
          v67[1].__vftable = 0;
          v67[1].__fmtflags_ = -1;
          __p.__r_.__value_.__r.__words[2] = v110;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[2] + *(_QWORD *)(v110 - 24)) = v109;
          __p.__r_.__value_.__r.__words[0] = v18;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v18 - 24)) = v108;
          v153[0] = v64;
          __p.__r_.__value_.__r.__words[0] = v66 + 24;
          __p.__r_.__value_.__r.__words[2] = v65;
          std::streambuf::basic_streambuf();
          v149[0] = v101;
          v150 = 0u;
          v151 = 0u;
          v152 = 24;
          v7 = v113;
          v21 = v118;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"    ", 4);
          std::stringbuf::str();
          __p.__r_.__value_.__r.__words[0] = v107;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v107 - 24)) = v105;
          __p.__r_.__value_.__r.__words[2] = v106;
          v149[0] = MEMORY[0x1E0DE4FB8] + 16;
          if (SBYTE7(v151) < 0)
            operator delete((void *)v150);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x19401CCD0](v153);
          if ((v143 & 0x80u) == 0)
            v68 = &v141;
          else
            v68 = v141;
          if ((v143 & 0x80u) == 0)
            v69 = v143;
          else
            v69 = v142;
          v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)v68, v69);
          DG::Qt((DG *)v63, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &__p;
          else
            v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v72 = __p.__r_.__value_.__l.__size_;
          v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
          v132 = 4;
          strcpy((char *)v131, " -> ");
          v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v131, 4);
          DG::Qt(v118, &v130);
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v130;
          else
            v75 = (std::string *)v130.__r_.__value_.__r.__words[0];
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
          else
            v76 = v130.__r_.__value_.__l.__size_;
          v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"[dir=both]", 10);
          DG::NL((DG *)1);
          if ((v129 & 0x80u) == 0)
            v79 = &v127;
          else
            v79 = v127;
          if ((v129 & 0x80u) == 0)
            v80 = v129;
          else
            v80 = v128;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
          if ((char)v129 < 0)
          {
            operator delete(v127);
            v23 = MEMORY[0x1E0DE4FD0];
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_155;
LABEL_150:
            if ((v132 & 0x80000000) == 0)
              goto LABEL_151;
LABEL_156:
            operator delete(v131[0]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_157;
LABEL_152:
            if ((char)v143 < 0)
LABEL_158:
              operator delete(v141);
          }
          else
          {
            v23 = MEMORY[0x1E0DE4FD0];
            if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_150;
LABEL_155:
            operator delete(v130.__r_.__value_.__l.__data_);
            if (v132 < 0)
              goto LABEL_156;
LABEL_151:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_152;
LABEL_157:
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((char)v143 < 0)
              goto LABEL_158;
          }
          if (v61 != ++v62)
            continue;
          break;
        }
        v61 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v119, v154, 16);
        if (v61)
          continue;
        break;
      }
LABEL_160:

      v19 = v93 + 1;
    }
    while (v93 + 1 != v91);
    v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v137, v157, 16);
  }
  while (v17);
LABEL_162:

  DG::AddOpsOrdering((uint64_t)v144, 1, v92);
  v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)"}", 1);
  DG::NL((DG *)1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = &__p;
  else
    v82 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v83 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();

  v144[0] = *MEMORY[0x1E0DE4F50];
  v84 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v144 + *(_QWORD *)(v144[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v145[0] = v84;
  v145[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v146 < 0)
    operator delete((void *)v145[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v147);

}

void sub_191050760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,void *a40,void *a41,void *a42)
{
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete((void *)STACK[0x3A8]);

  v43 = MEMORY[0x1E0DE4F50];
  v44 = *MEMORY[0x1E0DE4F50];
  STACK[0x290] = *MEMORY[0x1E0DE4F50];
  v45 = *(_QWORD *)(v43 + 72);
  *(unint64_t *)((char *)&STACK[0x290] + *(_QWORD *)(v44 - 24)) = *(_QWORD *)(v43 + 64);
  v46 = MEMORY[0x1E0DE4FB8] + 16;
  STACK[0x2A0] = v45;
  STACK[0x2A8] = v46;
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&STACK[0x310]);

  _Unwind_Resume(a1);
}

void E5DB::GenerateDigraphs(E5DB *this@<X0>, uint64_t a2@<X8>)
{
  E5DB *v4;
  E5DB *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSDictionary *v13;
  DG *v14;
  id v15;
  void *v16;
  uint64_t v17;
  E5DB *v18;
  const char *v19;
  size_t v20;
  void *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  E5DB *obj;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *__dst[2];
  unint64_t v37;
  void *__p[2];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void **v48;
  _BYTE v49[128];
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = this;
  v5 = v4;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v31 = a2;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (v4)
  {
    v46 = 0uLL;
    v47 = 0uLL;
    v44 = 0uLL;
    v45 = 0uLL;
    obj = v4;
    v6 = -[E5DB countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
    if (!v6)
      goto LABEL_34;
    v27 = *(_QWORD *)v45;
    while (1)
    {
      v29 = 0;
      while (2)
      {
        if (*(_QWORD *)v45 != v27)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * v29);
        if ((objc_msgSend(v7, "isEqual:", CFSTR("SegmentationAnalytics")) & 1) != 0)
          goto LABEL_6;
        -[E5DB objectForKey:](obj, "objectForKey:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v8;
        if (!v8)
          goto LABEL_5;
        objc_msgSend(v8, "objectForKey:", CFSTR("Public Functions"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v30 = v10;
        v11 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
        if (!v11)
          goto LABEL_32;
        v32 = v9;
        v33 = *(_QWORD *)v41;
        do
        {
          v12 = 0;
          v34 = v11;
          do
          {
            if (*(_QWORD *)v41 != v33)
              objc_enumerationMutation(v30);
            v13 = *(NSDictionary **)(*((_QWORD *)&v40 + 1) + 8 * v12);
            objc_msgSend(v9, "objectForKey:", v13);
            v14 = (DG *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v7, v13);
            v35 = (id)objc_claimAutoreleasedReturnValue();
            DG::GenerateFunctionDigraph(v14, v13, (NSString *)v7, (uint64_t)__p);
            v15 = objc_retainAutorelease(v35);
            v16 = v7;
            v17 = v6;
            v18 = v5;
            v19 = (const char *)objc_msgSend(v15, "UTF8String");
            v20 = strlen(v19);
            if (v20 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            v21 = (void *)v20;
            if (v20 >= 0x17)
            {
              v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v20 | 7) != 0x17)
                v23 = v20 | 7;
              v24 = v23 + 1;
              v22 = (void **)operator new(v23 + 1);
              __dst[1] = v21;
              v37 = v24 | 0x8000000000000000;
              __dst[0] = v22;
LABEL_23:
              memmove(v22, v19, (size_t)v21);
              goto LABEL_24;
            }
            HIBYTE(v37) = v20;
            v22 = __dst;
            if (v20)
              goto LABEL_23;
LABEL_24:
            *((_BYTE *)v21 + (_QWORD)v22) = 0;
            v48 = __dst;
            v25 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31, (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&v48);
            v26 = v25 + 40;
            if ((char)v25[63] < 0)
              operator delete(*(void **)v26);
            *(_OWORD *)v26 = *(_OWORD *)__p;
            *((_QWORD *)v26 + 2) = v39;
            HIBYTE(v39) = 0;
            LOBYTE(__p[0]) = 0;
            v5 = v18;
            v6 = v17;
            v7 = v16;
            if (SHIBYTE(v37) < 0)
            {
              operator delete(__dst[0]);
              v9 = v32;
              if (SHIBYTE(v39) < 0)
                operator delete(__p[0]);
            }
            else
            {
              v9 = v32;
            }

            ++v12;
          }
          while (v34 != v12);
          v11 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
        }
        while (v11);
LABEL_32:

LABEL_5:
LABEL_6:
        if (++v29 != v6)
          continue;
        break;
      }
      v6 = -[E5DB countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
      if (!v6)
      {
LABEL_34:

        break;
      }
    }
  }

}

void sub_1910511AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a16);
  _Unwind_Resume(a1);
}

id sub_191051280(int a1)
{
  void *v1;
  void *v2;
  void *__p[2];
  char v5;

  if (a1 == 1)
  {
    v5 = 3;
    LODWORD(__p[0]) = 5591107;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", __p);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else if (a1 == 2)
  {
    v5 = 3;
    LODWORD(__p[0]) = 5591111;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", __p);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a1 == 3)
    {
      v5 = 3;
      LODWORD(__p[0]) = 4542017;
    }
    else
    {
      v5 = 7;
      strcpy((char *)__p, "Invalid");
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", __p);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v2 = v1;
  if ((v5 & 0x80000000) == 0)
    return v1;
  operator delete(__p[0]);
  return v2;
}

void sub_1910513A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__fs::filesystem::relative[abi:ne180100](const std::__fs::filesystem::path *a1@<X0>, const std::__fs::filesystem::path *a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v6;

  std::__fs::filesystem::__weakly_canonical(&v6, a1, 0);
  std::__fs::filesystem::__weakly_canonical(&__p, a2, 0);
  std::__fs::filesystem::path::lexically_relative(a3, &v6, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_191051454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1910514A0(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v1 = a1;
  v2 = 0;
  v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v12;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(v1, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v5), (_QWORD)v11);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "objectForKey:", CFSTR("Description"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "objectForKey:", CFSTR("Size"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v8;
        if (v8)
          v2 += objc_msgSend(v8, "unsignedLongLongValue");

        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v3);
  }

  return v2;
}

void sub_1910515FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<E5RT::E5Function const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<E5RT::E5Function const>*,std::shared_ptr<E5RT::E5Function const>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
LABEL_68:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_58:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_58;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_58;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void E5DB::ExitCommand::GetName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "exit");
}

void E5DB::ExitCommand::GetDescription(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "Exit E5 debugger.");
}

_QWORD *E5DB::ExitCommand::ExitCommand(_QWORD *this)
{
  *this = &off_1E2D59908;
  return this;
}

void E5DB::ExitCommand::~ExitCommand(E5DB::ExitCommand *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t E5DB::ExitCommand::GetHelp(E5DB::ExitCommand *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  std::locale v14;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void **__return_ptr, E5DB::ExitCommand *))(*(_QWORD *)this + 24))(__p, this);
  if ((v9 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v3 = v9;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v9 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[0] = v6;
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v13);
}

void sub_191051B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191051B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::locale::~locale((std::locale *)(v16 - 56));
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t E5DB::ExitCommand::GetHelpCSV(E5DB::ExitCommand *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  (*(void (**)(void **__return_ptr, E5DB::ExitCommand *))(*(_QWORD *)this + 16))(__p, this);
  if ((v8 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v3 = v8;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"=[", 2);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v12);
}

void sub_191051CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191051CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5DB::ExitCommand::Execute()
{
  return 1;
}

void E5DB::HelpCommand::GetName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "help");
}

char *E5DB::HelpCommand::GetDescription@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_191A7A8C0;
  strcpy(result, "Show a list of debugger commands.");
  return result;
}

_QWORD *E5DB::HelpCommand::HelpCommand(_QWORD *this)
{
  *this = &off_1E2D59950;
  return this;
}

void E5DB::HelpCommand::~HelpCommand(E5DB::HelpCommand *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t E5DB::HelpCommand::GetHelp(E5DB::HelpCommand *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;
  _QWORD v19[2];
  _QWORD v20[11];
  char v21;
  uint64_t v22;
  std::locale v23;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  (*(void (**)(void **__return_ptr, E5DB::HelpCommand *))(*(_QWORD *)this + 24))(__p, this);
  if ((v18 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v3 = v18;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v6 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v18 < 0)
    operator delete(__p[0]);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"help [<cmd-name> / --all] [options]", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Options:", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"--all  : Print help for all commands", 36);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"--csv  : Print options as a comma separated list", 48);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v20[0] = v15;
  v20[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v22);
}

void sub_1910520E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t E5DB::HelpCommand::GetHelpCSV(E5DB::HelpCommand *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  (*(void (**)(void **__return_ptr, E5DB::HelpCommand *))(*(_QWORD *)this + 16))(__p, this);
  if ((v8 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v3 = v8;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"=[", 2);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v12);
}

void sub_191052284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19105229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5DB::HelpCommand::Execute(E5DB::CommandFactory *a1, _QWORD **a2, _QWORD *a3)
{
  E5DB::CommandFactory *CommandFactory;
  char **CommandNames;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  void *p_p;
  uint64_t v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t *v27;
  std::locale::id *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *locale;
  uint64_t v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  int v45;
  int v46;
  int IsValidCommandName;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  std::locale::id *v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  const std::locale::facet *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  unint64_t *v76;
  std::locale::id *v78;
  _QWORD *v79;
  void *v80;
  uint64_t v81;
  _QWORD *v82;
  const std::locale::facet *v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  const std::locale::facet *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::locale v92;
  std::__shared_weak_count *v93;
  unsigned __int8 v94;
  std::locale v95;
  std::__shared_weak_count *v96;
  void *__p;
  uint64_t v98;
  unsigned __int8 v99;
  std::locale v100;

  CommandFactory = (E5DB::CommandFactory *)E5DB::CommandFactory::GetCommandFactory(a1);
  CommandNames = E5DB::CommandFactory::GetCommandNames(CommandFactory);
  v8 = (uint64_t *)CommandNames;
  v10 = v9;
  v11 = *a3;
  v12 = a3[1] - *a3;
  if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) < 3)
  {
    if (v12 == 48)
    {
      v15 = 0;
      v16 = *(char *)(v11 + 47);
      if (v16 < 0)
        goto LABEL_67;
      goto LABEL_7;
    }
    v20 = *a2;
    (*(void (**)(void **__return_ptr, E5DB::CommandFactory *))(*(_QWORD *)a1 + 32))(&__p, a1);
    if ((v99 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v99 & 0x80u) == 0)
      v22 = v99;
    else
      v22 = v98;
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, v22);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
    v24 = std::locale::use_facet(&v92, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale(&v92);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v99 < 0)
      operator delete(__p);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"Debugger commands:", 18);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
    v26 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    if (!v10)
      return 0;
    v27 = &v8[2 * v10];
    v28 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      E5DB::CommandFactory::GetCommand(CommandFactory, *v8, v8[1], &v95);
      v29 = *a2;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v95.__locale_ + 16))(&__p);
      if ((v99 & 0x80u) == 0)
        v30 = &__p;
      else
        v30 = __p;
      if ((v99 & 0x80u) == 0)
        v31 = v99;
      else
        v31 = v98;
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" -- ", 4);
      (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)v95.__locale_ + 24))(&v92);
      if ((v94 & 0x80u) == 0)
        locale = &v92;
      else
        locale = v92.__locale_;
      if ((v94 & 0x80u) == 0)
        v35 = v94;
      else
        v35 = (uint64_t)v93;
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)locale, v35);
      std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
      v37 = std::locale::use_facet(&v100, v28);
      ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
      std::locale::~locale(&v100);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v94 < 0)
      {
        operator delete(v92.__locale_);
        if (((char)v99 & 0x80000000) == 0)
        {
LABEL_39:
          v38 = v96;
          if (v96)
            goto LABEL_43;
          goto LABEL_24;
        }
      }
      else if (((char)v99 & 0x80000000) == 0)
      {
        goto LABEL_39;
      }
      operator delete(__p);
      v38 = v96;
      if (v96)
      {
LABEL_43:
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
LABEL_24:
      v8 += 2;
      if (v8 == v27)
        return 0;
    }
  }
  v13 = (uint64_t *)(v11 + 48);
  v14 = *(char *)(v11 + 71);
  if (v14 < 0)
  {
    if (*(_QWORD *)(v11 + 56) != 5)
    {
LABEL_53:
      v42 = *a2;
      (*(void (**)(void **__return_ptr, E5DB::CommandFactory *))(*(_QWORD *)a1 + 32))(&__p, a1);
      if ((v99 & 0x80u) == 0)
        v43 = &__p;
      else
        v43 = __p;
      if ((v99 & 0x80u) == 0)
        v44 = v99;
      else
        v44 = v98;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
LABEL_84:
      if ((char)v99 < 0)
        operator delete(__p);
      return 0;
    }
    v13 = (uint64_t *)*v13;
  }
  else if (v14 != 5)
  {
    goto LABEL_53;
  }
  if (*(_DWORD *)v13 != 1935879469 || *((_BYTE *)v13 + 4) != 118)
    goto LABEL_53;
  v45 = *(_DWORD *)v13;
  v46 = *((unsigned __int8 *)v13 + 4);
  v15 = v45 == 1935879469 && v46 == 118;
  v16 = *(char *)(v11 + 47);
  if (v16 < 0)
  {
LABEL_67:
    v17 = *(_QWORD *)(v11 + 24);
    v18 = *(_QWORD *)(v11 + 32);
    if (v18 != 5)
      goto LABEL_73;
    if (*(_DWORD *)v17 != 1818307885 || *(_BYTE *)(v17 + 4) != 108)
    {
      v18 = 5;
      goto LABEL_73;
    }
LABEL_88:
    if (v10)
    {
      v59 = (uint64_t *)&CommandNames[2 * v10];
      if (v15)
      {
        v60 = (std::locale::id *)MEMORY[0x1E0DE4A90];
        do
        {
          E5DB::CommandFactory::GetCommand(CommandFactory, *v8, v8[1], &v92);
          v61 = *a2;
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v92.__locale_ + 40))(&__p);
          if ((v99 & 0x80u) == 0)
            v62 = &__p;
          else
            v62 = __p;
          if ((v99 & 0x80u) == 0)
            v63 = v99;
          else
            v63 = v98;
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
          std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
          v65 = std::locale::use_facet(&v95, v60);
          ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
          std::locale::~locale(&v95);
          std::ostream::put();
          std::ostream::flush();
          if ((char)v99 < 0)
            operator delete(__p);
          v66 = v93;
          if (v93)
          {
            v67 = (unint64_t *)&v93->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v8 += 2;
        }
        while (v8 != v59);
      }
      else
      {
        v78 = (std::locale::id *)MEMORY[0x1E0DE4A90];
        do
        {
          E5DB::CommandFactory::GetCommand(CommandFactory, *v8, v8[1], &v92);
          v79 = *a2;
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v92.__locale_ + 16))(&__p);
          if ((v99 & 0x80u) == 0)
            v80 = &__p;
          else
            v80 = __p;
          if ((v99 & 0x80u) == 0)
            v81 = v99;
          else
            v81 = v98;
          v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
          std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*v82 - 24)));
          v83 = std::locale::use_facet(&v95, v78);
          ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
          std::locale::~locale(&v95);
          std::ostream::put();
          std::ostream::flush();
          if ((char)v99 < 0)
            operator delete(__p);
          v84 = *a2;
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v92.__locale_ + 32))(&__p);
          if ((v99 & 0x80u) == 0)
            v85 = &__p;
          else
            v85 = __p;
          if ((v99 & 0x80u) == 0)
            v86 = v99;
          else
            v86 = v98;
          v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
          std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(_QWORD *)(*v87 - 24)));
          v88 = std::locale::use_facet(&v95, v78);
          ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
          std::locale::~locale(&v95);
          std::ostream::put();
          std::ostream::flush();
          if ((char)v99 < 0)
            operator delete(__p);
          v89 = v93;
          if (v93)
          {
            v90 = (unint64_t *)&v93->__shared_owners_;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          v8 += 2;
        }
        while (v8 != v59);
      }
    }
    return 0;
  }
LABEL_7:
  v17 = v11 + 24;
  v18 = v16;
  if (v16 == 5 && *(_DWORD *)v17 == 1818307885 && *(_BYTE *)(v11 + 28) == 108)
    goto LABEL_88;
LABEL_73:
  IsValidCommandName = E5DB::CommandFactory::IsValidCommandName((uint64_t)CommandFactory, v17, v18);
  v50 = *a2;
  if (!IsValidCommandName)
  {
    (*(void (**)(void **__return_ptr, E5DB::CommandFactory *))(*(_QWORD *)a1 + 32))(&__p, a1);
    if ((v99 & 0x80u) == 0)
      v54 = &__p;
    else
      v54 = __p;
    if ((v99 & 0x80u) == 0)
      v55 = v99;
    else
      v55 = v98;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v54, v55);
    goto LABEL_84;
  }
  if (v15)
  {
    v51 = *a3;
    if (*(char *)(*a3 + 47) < 0)
    {
      v52 = *(_QWORD *)(v51 + 24);
      v53 = *(_QWORD *)(v51 + 32);
    }
    else
    {
      v52 = v51 + 24;
      v53 = *(unsigned __int8 *)(*a3 + 47);
    }
    E5DB::CommandFactory::GetCommand(CommandFactory, v52, v53, &v92);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v92.__locale_ + 40))(&__p);
    if ((v99 & 0x80u) == 0)
      v69 = &__p;
    else
      v69 = __p;
    if ((v99 & 0x80u) == 0)
      v70 = v99;
    else
      v70 = v98;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v69, v70);
    if ((char)v99 < 0)
      operator delete(__p);
    v71 = v93;
    if (v93)
    {
      v72 = (unint64_t *)&v93->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      goto LABEL_130;
    }
  }
  else
  {
    v56 = *a3;
    if (*(char *)(*a3 + 47) < 0)
    {
      v57 = *(_QWORD *)(v56 + 24);
      v58 = *(_QWORD *)(v56 + 32);
    }
    else
    {
      v57 = v56 + 24;
      v58 = *(unsigned __int8 *)(*a3 + 47);
    }
    E5DB::CommandFactory::GetCommand(CommandFactory, v57, v58, &v92);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v92.__locale_ + 32))(&__p);
    if ((v99 & 0x80u) == 0)
      v74 = &__p;
    else
      v74 = __p;
    if ((v99 & 0x80u) == 0)
      v75 = v99;
    else
      v75 = v98;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v74, v75);
    if ((char)v99 < 0)
      operator delete(__p);
    v71 = v93;
    if (v93)
    {
      v76 = (unint64_t *)&v93->__shared_owners_;
      do
        v73 = __ldaxr(v76);
      while (__stlxr(v73 - 1, v76));
LABEL_130:
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  return 0;
}

void sub_191052B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_191052C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::locale a24)
{
  if ((a23 & 0x80000000) == 0)
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void E5DB::LoadCommand::GetName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "load");
}

double E5DB::LoadCommand::GetDescription@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_191A6F7A0;
  strcpy(v3, "Load the provided E5 bundle for debugging.");
  return *(double *)"e for debugging.";
}

_QWORD *E5DB::LoadCommand::LoadCommand(_QWORD *this)
{
  *this = &off_1E2D59998;
  return this;
}

void E5DB::LoadCommand::~LoadCommand(E5DB::LoadCommand *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t E5DB::LoadCommand::GetHelp(E5DB::LoadCommand *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  _QWORD v15[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  std::locale v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  (*(void (**)(void **__return_ptr, E5DB::LoadCommand *))(*(_QWORD *)this + 24))(__p, this);
  if ((v14 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v3 = v14;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v19);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v6 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v19);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v14 < 0)
    operator delete(__p[0]);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"load <path-to-e5>", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Return non-zero code if E5 cannot be loaded on current platform.", 64);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v16[0] = v11;
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v18);
}

void sub_191052FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t E5DB::LoadCommand::GetHelpCSV(E5DB::LoadCommand *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  (*(void (**)(void **__return_ptr, E5DB::LoadCommand *))(*(_QWORD *)this + 16))(__p, this);
  if ((v8 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v3 = v8;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"=[", 2);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"path-to-e5", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v12);
}

void sub_19105318C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5DB::LoadCommand::Execute(uint64_t a1, double *a2, uint64_t *a3)
{
  pid_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  rusage_info_t *v12;
  uint64_t v13;
  std::chrono::steady_clock::time_point v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  std::chrono::steady_clock::time_point v19;
  pid_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  double v27;
  double v28;
  double v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  _QWORD *v44;
  void *__p[2];
  char v46;
  std::string __str;
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  rusage_info_t buffer[2];
  unsigned __int8 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (a3[1] - *a3 == 48)
  {
    getpid();
    proc_reset_footprint_interval();
    v6 = getpid();
    proc_pid_rusage(v6, 6, buffer);
    v7 = v53;
    v48 = 0;
    v8 = *a3;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= 1)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    if (*(char *)(v8 + 47) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v8 + 24), *(_QWORD *)(v8 + 32));
    else
      __str = *(std::string *)(v8 + 24);
    std::string::operator=((std::string *)(a2 + 2), &__str);
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v49[0] = &off_1E2DD0B88;
    v49[1] = &__str;
    v49[2] = &v48;
    v50 = v49;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v16 = E5DB::SafeExecute((uint64_t)v49);
    if (v46 < 0)
    {
      operator delete(__p[0]);
      v17 = v50;
      if (v50 != v49)
        goto LABEL_17;
    }
    else
    {
      v17 = v50;
      if (v50 != v49)
      {
LABEL_17:
        if (!v17)
        {
LABEL_22:
          v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v20 = getpid();
          proc_pid_rusage(v20, 6, buffer);
          if ((v16 & 1) != 0)
          {
            v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)a2, (uint64_t)"Failed to load E5 bundle @ ", 27);
            v22 = *((char *)a2 + 39);
            if (v22 >= 0)
              v23 = (uint64_t)(a2 + 2);
            else
              v23 = *((_QWORD *)a2 + 2);
            if (v22 >= 0)
              v24 = *((unsigned __int8 *)a2 + 39);
            else
              v24 = *((_QWORD *)a2 + 3);
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
            std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
            v26 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
          }
          else
          {
            v27 = (double)v7;
            v28 = (double)v54;
            v29 = (double)v53;
            v30 = v48;
            v48 = 0;
            v31 = (_QWORD *)*((_QWORD *)a2 + 5);
            *((_QWORD *)a2 + 5) = v30;
            if (v31)
              (*(void (**)(_QWORD *))(*v31 + 8))(v31);
            a2[6] = v28 - v27;
            a2[7] = v29 - v27;
            a2[8] = (double)((v19.__d_.__rep_ - v15.__d_.__rep_) / 1000);
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)a2, (uint64_t)"Loaded E5 bundle @ ", 19);
            v33 = *((char *)a2 + 39);
            if (v33 >= 0)
              v34 = (uint64_t)(a2 + 2);
            else
              v34 = *((_QWORD *)a2 + 2);
            if (v33 >= 0)
              v35 = *((unsigned __int8 *)a2 + 39);
            else
              v35 = *((_QWORD *)a2 + 3);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" in ", 4);
            v37 = (_QWORD *)std::ostream::operator<<();
            v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"ms.", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" Incremental peak memory usage during Load: ", 44);
            v39 = (_QWORD *)std::ostream::operator<<();
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"KB.", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" Incremental memory usage post Load: ", 37);
            v41 = (_QWORD *)std::ostream::operator<<();
            v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"KB.", 3);
            std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
            v43 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
          }
          std::ostream::flush();
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v44 = v48;
          v48 = 0;
          if (v44)
            (*(void (**)(_QWORD *))(*v44 + 8))(v44);
          if (v16)
            return 0x100000000;
          else
            return 0;
        }
        v18 = 5;
LABEL_21:
        (*(void (**)(void))(*v17 + 8 * v18))();
        goto LABEL_22;
      }
    }
    v18 = 4;
    v17 = v49;
    goto LABEL_21;
  }
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"LoadCommand: Invalid number of arguments specified.", 51);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet((const std::locale *)buffer, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)buffer);
  std::ostream::put();
  std::ostream::flush();
  v11 = *(_QWORD **)a2;
  (*(void (**)(rusage_info_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(buffer, a1);
  if ((v52 & 0x80u) == 0)
    v12 = buffer;
  else
    v12 = (rusage_info_t *)buffer[0];
  if ((v52 & 0x80u) == 0)
    v13 = v52;
  else
    v13 = (uint64_t)buffer[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  if ((char)v52 < 0)
    operator delete(buffer[0]);
  return 0x100000000;
}

void sub_191053688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,std::locale a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v34;

  std::locale::~locale(&a10);
  if (a21 < 0)
  {
    operator delete(__p);
    v34 = a23;
    a23 = 0;
    if (v34)
      goto LABEL_6;
  }
  else
  {
    v34 = a23;
    a23 = 0;
    if (v34)
    {
LABEL_6:
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1910537A0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_1910537B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DD0B88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1910537EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DD0B88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19105380C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  E5RT::ProgramLibrary::OpenLibrary(*(E5RT::SharedResourceManager **)(a1 + 8), &v6);
  v2 = *(uint64_t **)(a1 + 16);
  v3 = v6;
  v6 = 0;
  v4 = *v2;
  *v2 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_191053878(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB11LoadCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_trait"
                     "sIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB11LoadCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_1"
                                "1char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB11LoadCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB11LoadCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_1910538E4()
{
  return &unk_1E2DD0BE8;
}

E5DB::E5PortTraceParser *E5DB::E5PortTraceParser::E5PortTraceParser(E5DB::E5PortTraceParser *a1, std::string *a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  std::string __p;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  memset(&__p, 0, sizeof(__p));
  v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v3 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, a2, (std::string *)((char *)a2 + v3));
  E5DB::E5PortTraceParser::Parse(a1, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_19105397C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
    operator delete(__p);
  std::vector<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>::~vector[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void E5DB::E5PortTraceParser::Parse(E5DB::E5PortTraceParser *this, std::__fs::filesystem::path *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  std::__fs::filesystem::path::__string_view v9;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  id v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id obj;
  void *v22[2];
  unint64_t v23;
  void *__p[2];
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 __dst;
  unint64_t v32;
  id v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  E5DB::GetJSONFromFile(a2, a2);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  BYTE7(v25) = 6;
  strcpy((char *)__p, "frames");
  E5DB::GetValueFromDictionary(v20, (uint64_t *)__p);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        while (1)
        {
          if (*(_QWORD *)v28 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
          v9 = std::__fs::filesystem::path::__parent_path(a2);
          if (v9.__size_ >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          if (v9.__size_ >= 0x17)
          {
            v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v9.__size_ | 7) != 0x17)
              v11 = v9.__size_ | 7;
            v12 = v11 + 1;
            p_dst = (__int128 *)operator new(v11 + 1);
            *((_QWORD *)&__dst + 1) = v9.__size_;
            v32 = v12 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
LABEL_16:
            memmove(p_dst, v9.__data_, v9.__size_);
            goto LABEL_17;
          }
          HIBYTE(v32) = v9.__size_;
          p_dst = &__dst;
          if (v9.__size_)
            goto LABEL_16;
LABEL_17:
          *((_BYTE *)p_dst + v9.__size_) = 0;
          *(_OWORD *)v22 = __dst;
          v23 = v32;
          v13 = v8;
          *(_OWORD *)__p = 0u;
          v25 = 0u;
          v26 = 1065353216;
          *(_QWORD *)&__dst = &v33;
          *((_QWORD *)&__dst + 1) = __p;
          v32 = (unint64_t)v22;
          v33 = v13;
          sub_191053E70((uint64_t)&__dst, "inputPorts");
          sub_191053E70((uint64_t)&__dst, "inOutPorts");
          sub_191053E70((uint64_t)&__dst, "outputPorts");

          if ((SHIBYTE(v23) & 0x80000000) == 0)
            break;
          operator delete(v22[0]);
          v14 = *((_QWORD *)this + 1);
          if (v14 < *((_QWORD *)this + 2))
            goto LABEL_21;
LABEL_6:
          *((_QWORD *)this + 1) = std::vector<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>::__push_back_slow_path<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>((void **)this, (uint64_t *)__p);
          std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table((uint64_t)__p);
          if (v5 == ++i)
            goto LABEL_28;
        }
        v14 = *((_QWORD *)this + 1);
        if (v14 >= *((_QWORD *)this + 2))
          goto LABEL_6;
LABEL_21:
        v15 = __p[0];
        __p[0] = 0;
        *(_QWORD *)v14 = v15;
        *(void **)(v14 + 8) = __p[1];
        __p[1] = 0;
        v16 = v25;
        *(_QWORD *)(v14 + 16) = v25;
        v17 = *((_QWORD *)&v25 + 1);
        *(_QWORD *)(v14 + 24) = *((_QWORD *)&v25 + 1);
        *(_DWORD *)(v14 + 32) = v26;
        if (v17)
        {
          v18 = *(_QWORD *)(v16 + 8);
          v19 = *(_QWORD *)(v14 + 8);
          if ((v19 & (v19 - 1)) != 0)
          {
            if (v18 >= v19)
              v18 %= v19;
          }
          else
          {
            v18 &= v19 - 1;
          }
          v15[v18] = v14 + 16;
          v25 = 0uLL;
        }
        *((_QWORD *)this + 1) = v14 + 40;
        std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table((uint64_t)__p);
      }
LABEL_28:
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
    }
    while (v5);
  }

}

void sub_191053CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{

  _Unwind_Resume(a1);
}

void **std::vector<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table(v3 - 40);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *E5DB::E5PortTraceParser::GetPortData@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a3)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  result = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::find<std::string>((_QWORD *)(*a1 + 40 * a3), a2);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = result[6];
  *a4 = result[5];
  a4[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[8];
  a4[2] = result[7];
  a4[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_191053E70(uint64_t a1, char *__s)
{
  void *v3;
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  std::string *v18;
  std::string *v19;
  int v20;
  void *v21;
  unint64_t Size;
  uint64_t v23;
  E5RT::SurfaceDescriptor *v24;
  __IOSurface *v25;
  size_t BytesPerRow;
  uint64_t SurfaceHeight;
  void *BaseAddress;
  uint64_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  void *DataSpan;
  std::string::size_type v34;
  _QWORD *v35;
  std::string::size_type v36;
  _QWORD *v37;
  E5RT::TensorDescriptor *v38;
  const void *v39;
  size_t v40;
  E5RT::TensorDescriptor *v41;
  _QWORD *v42;
  E5RT::TensorDescriptor *v43;
  E5RT::TensorDescriptor *v44;
  _QWORD *v45;
  E5RT::SurfaceDescriptor *v46;
  uint64_t v47;
  const char *v48;
  size_t v49;
  std::string::size_type v50;
  std::string *p_p;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  id obj;
  id v77;
  E5RT *v79;
  __int128 __dst;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  std::string v86;
  E5RT::SurfaceDescriptor *v87;
  std::__fs::filesystem::path v88;
  E5RT::TensorDescriptor *v89;
  std::string __p;
  _BYTE v91[128];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v3 = **(void ***)a1;
  v4 = strlen(__s);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    *(_QWORD *)&v81 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v81) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  E5DB::GetValueFromDictionary(v3, (uint64_t *)&__dst);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v81) < 0)
    operator delete((void *)__dst);
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  obj = v9;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, v91, 16);
  if (v10)
  {
    v74 = *(_QWORD *)v83;
    do
    {
      v75 = v10;
      for (i = 0; i != v75; ++i)
      {
        if (*(_QWORD *)v83 != v74)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * i);
        v13 = *(_QWORD *)(a1 + 16);
        objc_msgSend(obj, "valueForKey:", v12);
        v14 = (id)objc_claimAutoreleasedReturnValue();
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&__p, "File");
        E5DB::GetValueFromDictionary(v14, (uint64_t *)&__p);
        v77 = (id)objc_claimAutoreleasedReturnValue();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
        strcpy((char *)&__p, "Offset");
        E5DB::GetValueFromDictionary(v14, (uint64_t *)&__p);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "unsignedIntegerValue");

        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v17 = objc_retainAutorelease(v77);
        v18 = (std::string *)objc_msgSend(v17, "UTF8String");
        memset(&__p, 0, sizeof(__p));
        v19 = (std::string *)((char *)v18 - 1);
        do
        {
          v20 = v19->__r_.__value_.__s.__data_[1];
          v19 = (std::string *)((char *)v19 + 1);
        }
        while (v20);
        std::string::append[abi:ne180100]<char const*,0>(&__p, v18, v19);
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, v13, &v88);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&__p, "PortType");
        E5DB::GetValueFromDictionary(v14, (uint64_t *)&__p);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&__p, "Description");
        E5DB::GetValueFromDictionary(v14, (uint64_t *)&__p);
        v79 = (E5RT *)objc_claimAutoreleasedReturnValue();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (objc_msgSend(v21, "isEqual:", CFSTR("Tensor")))
        {
          E5RT::GetTensorDescriptor(v79, &v89);
          Size = E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)v89);
          v23 = operator new();
          if (SHIBYTE(v88.__pn_.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v88.__pn_.__r_.__value_.__l.__data_, v88.__pn_.__r_.__value_.__l.__size_);
          else
            __p = v88.__pn_;
          E5Common::AutoMmapPtr::AutoMmapPtr(v23, &__p, 1, 1, 0);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v30 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 32))(v23, v16, Size);
          v32 = v31;
          E5RT::BufferObject::AllocMemory(Size, 0, &__p);
          DataSpan = (void *)E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)__p.__r_.__value_.__l.__data_);
          if (v32)
            memmove(DataSpan, v30, v32);
          v34 = __p.__r_.__value_.__r.__words[0];
          v86.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0])
          {
            v35 = (_QWORD *)operator new();
            v36 = __p.__r_.__value_.__r.__words[0];
            *v35 = &unk_1E2DC3190;
            v35[1] = 0;
            v35[2] = 0;
            v35[3] = v36;
          }
          else
          {
            v35 = 0;
          }
          v86.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          *(_QWORD *)&__dst = v89;
          if (v89)
          {
            v37 = (_QWORD *)operator new();
            v38 = v89;
            *v37 = &unk_1E2DC3270;
            v37[1] = 0;
            v37[2] = 0;
            v37[3] = v38;
          }
          else
          {
            v37 = 0;
          }
          *((_QWORD *)&__dst + 1) = v37;
          *(_QWORD *)&v81 = v34;
          *((_QWORD *)&v81 + 1) = v35;
        }
        else
        {
          if (!objc_msgSend(v21, "isEqual:", CFSTR("Surface")))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v86, (char *)objc_msgSend(objc_retainAutorelease(v21), "UTF8String"));
            v72 = std::string::insert(&v86, 0, "Invalid PortType in port info dict: ");
            v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          E5RT::GetSurfaceDescriptor(v79, &v87);
          v24 = v87;
          E5RT::SurfaceObject::AllocSurface(v87, 0, &v89);
          v25 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v89);
          BytesPerRow = IOSurfaceGetBytesPerRow(v25);
          SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(v24);
          BaseAddress = IOSurfaceGetBaseAddress(v25);
          v29 = operator new();
          if (SHIBYTE(v88.__pn_.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v88.__pn_.__r_.__value_.__l.__data_, v88.__pn_.__r_.__value_.__l.__size_);
          else
            __p = v88.__pn_;
          E5Common::AutoMmapPtr::AutoMmapPtr(v29, &__p, 1, 1, 0);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v39 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)v29 + 32))(v29, v16, SurfaceHeight * BytesPerRow);
          if (v40)
            memmove(BaseAddress, v39, v40);
          v41 = v89;
          v86.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
          if (v89)
          {
            v42 = (_QWORD *)operator new();
            v43 = v89;
            *v42 = &unk_1E2DC3200;
            v42[1] = 0;
            v42[2] = 0;
            v42[3] = v43;
          }
          else
          {
            v42 = 0;
          }
          v86.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
          v89 = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v44 = v89;
          v89 = 0;
          if (v44)
            (*(void (**)(E5RT::TensorDescriptor *))(*(_QWORD *)v44 + 8))(v44);
          *(_QWORD *)&__dst = v87;
          if (v87)
          {
            v45 = (_QWORD *)operator new();
            v46 = v87;
            *v45 = &unk_1E2DC32A8;
            v45[1] = 0;
            v45[2] = 0;
            v45[3] = v46;
          }
          else
          {
            v45 = 0;
          }
          *((_QWORD *)&__dst + 1) = v45;
          *(_QWORD *)&v81 = v41;
          *((_QWORD *)&v81 + 1) = v42;
        }

        if (SHIBYTE(v88.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__pn_.__r_.__value_.__l.__data_);

        v47 = *(_QWORD *)(a1 + 8);
        v48 = (const char *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String");
        v49 = strlen(v48);
        if (v49 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v50 = v49;
        if (v49 >= 0x17)
        {
          v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v49 | 7) != 0x17)
            v52 = v49 | 7;
          v53 = v52 + 1;
          p_p = (std::string *)operator new(v52 + 1);
          __p.__r_.__value_.__l.__size_ = v50;
          __p.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v49;
          p_p = &__p;
          if (!v49)
            goto LABEL_70;
        }
        memmove(p_p, v48, v50);
LABEL_70:
        p_p->__r_.__value_.__s.__data_[v50] = 0;
        v88.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v54 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v47, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v88);
        v55 = v54;
        v56 = __dst;
        __dst = 0uLL;
        v57 = (std::__shared_weak_count *)*((_QWORD *)v54 + 6);
        *(_OWORD *)(v54 + 40) = v56;
        if (!v57)
          goto LABEL_74;
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(p_shared_owners);
        while (__stlxr(v59 - 1, p_shared_owners));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
          v64 = v81;
          v81 = 0uLL;
          v61 = (std::__shared_weak_count *)*((_QWORD *)v55 + 8);
          *(_OWORD *)(v55 + 56) = v64;
          if (!v61)
            goto LABEL_80;
        }
        else
        {
LABEL_74:
          v60 = v81;
          v81 = 0uLL;
          v61 = (std::__shared_weak_count *)*((_QWORD *)v54 + 8);
          *(_OWORD *)(v54 + 56) = v60;
          if (!v61)
            goto LABEL_80;
        }
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
LABEL_80:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          v65 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
          if (!*((_QWORD *)&v81 + 1))
            goto LABEL_87;
        }
        else
        {
          v65 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
          if (!*((_QWORD *)&v81 + 1))
            goto LABEL_87;
        }
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          v68 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
          if (!*((_QWORD *)&__dst + 1))
            goto LABEL_93;
          goto LABEL_88;
        }
LABEL_87:
        v68 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
        if (!*((_QWORD *)&__dst + 1))
          goto LABEL_93;
LABEL_88:
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
LABEL_93:

      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, v91, 16);
    }
    while (v10);
  }

}

void sub_1910547D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x48uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_191054F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_13:
      operator delete((void *)v2);
      return;
    }
    v3 = *(std::__shared_weak_count **)(v2 + 64);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 48);
    if (!v6)
      goto LABEL_12;
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((*(char *)(v2 + 39) & 0x80000000) == 0)
        goto LABEL_13;
    }
    else
    {
LABEL_12:
      if ((*(char *)(v2 + 39) & 0x80000000) == 0)
        goto LABEL_13;
    }
    operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(char **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 8);
      if (!v6)
        goto LABEL_11;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
        if (v9)
        {
LABEL_12:
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else
      {
LABEL_11:
        v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
        if (v9)
          goto LABEL_12;
      }
      if (v2[39] < 0)
      {
        operator delete(*((void **)v2 + 2));
        operator delete(v2);
        v2 = v5;
        if (!v5)
          break;
      }
      else
      {
        operator delete(v2);
        v2 = v5;
        if (!v5)
          break;
      }
    }
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

char *std::vector<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>::__push_back_slow_path<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>(void **a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v3];
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)v8 = v9;
  *((_QWORD *)v8 + 1) = v10;
  v11 = a2[2];
  *((_QWORD *)v8 + 2) = v11;
  v12 = a2[3];
  *((_QWORD *)v8 + 3) = v12;
  *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      v15 = v13 >= v10;
      v14 = v13 % v10;
      if (!v15)
        v14 = v13;
    }
    else
    {
      v14 = v13 & (v10 - 1);
    }
    *(_QWORD *)(v9 + 8 * v14) = v8 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  v16 = &v7[40 * v6];
  v17 = v8 + 40;
  v19 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 == *a1)
  {
    *a1 = v8;
    a1[1] = v17;
    a1[2] = v16;
    if (!v18)
      return v17;
    goto LABEL_30;
  }
  v20 = 0;
  do
  {
    v22 = &v8[v20];
    v23 = &v18[v20];
    v24 = *(_QWORD *)&v18[v20 - 40];
    *((_QWORD *)v23 - 5) = 0;
    *((_QWORD *)v22 - 5) = v24;
    *((_QWORD *)v22 - 4) = *(_QWORD *)&v18[v20 - 32];
    *((_QWORD *)v23 - 4) = 0;
    v25 = *(_QWORD *)&v18[v20 - 24];
    *(_QWORD *)&v8[v20 - 24] = v25;
    v26 = *(_QWORD *)&v18[v20 - 16];
    *((_QWORD *)v22 - 2) = v26;
    *((_DWORD *)v22 - 2) = *(_DWORD *)&v18[v20 - 8];
    if (v26)
    {
      v21 = *(_QWORD *)(v25 + 8);
      v27 = *((_QWORD *)v22 - 4);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v21 >= v27)
          v21 %= v27;
      }
      else
      {
        v21 &= v27 - 1;
      }
      *(_QWORD *)(v24 + 8 * v21) = &v8[v20 - 24];
      *(_QWORD *)&v18[v20 - 24] = 0;
      *(_QWORD *)&v18[v20 - 16] = 0;
    }
    v20 -= 40;
  }
  while (&v18[v20] != v19);
  v28 = (char *)*a1;
  v18 = (char *)a1[1];
  *a1 = &v8[v20];
  a1[1] = v17;
  a1[2] = v16;
  if (v18 != v28)
  {
    do
      v18 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table((uint64_t)(v18 - 40));
    while (v18 != v28);
    v18 = v28;
  }
  if (v18)
LABEL_30:
    operator delete(v18);
  return v17;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void E5DB::ParseOptions(char **a1, uint64_t a2, const option **a3, uint64_t a4)
{
  uint64_t v4;
  const option **v5;
  char *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  char **v29;
  int v30;
  const char *v31;
  int v32;
  uint64_t v33;
  char *__p;
  char *v38;
  int v39;

  v4 = a4;
  v5 = a3;
  __p = 0;
  v38 = 0;
  v7 = *a1;
  v8 = (uint64_t *)a1[1];
  if (*a1 == (char *)v8)
  {
    v29 = 0;
    v28 = *a1;
    goto LABEL_35;
  }
  v9 = 0;
  do
  {
    v11 = v7;
    if (v7[23] < 0)
    {
      v11 = *(char **)v7;
      v12 = v38;
      if (v9 < v38)
      {
LABEL_3:
        *(_QWORD *)v9 = v11;
        v10 = (uint64_t)(v9 + 8);
        goto LABEL_4;
      }
    }
    else
    {
      v12 = v38;
      if (v9 < v38)
        goto LABEL_3;
    }
    v13 = (v9 - __p) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = v12 - __p;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      *(_QWORD *)v18 = v11;
      v10 = (uint64_t)(v18 + 8);
      if (v9 == __p)
      {
LABEL_24:
        __p = v18;
        v38 = &v17[8 * v16];
        if (!v9)
          goto LABEL_4;
LABEL_25:
        operator delete(v9);
        goto LABEL_4;
      }
    }
    else
    {
      v17 = 0;
      v18 = (char *)(8 * v13);
      *(_QWORD *)(8 * v13) = v11;
      v10 = 8 * v13 + 8;
      if (v9 == __p)
        goto LABEL_24;
    }
    v19 = v9 - 8 - __p;
    if (v19 < 0x168
      || &v17[v9 - __p - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v17[v9 - __p - 8]
      || &v9[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8
      || (unint64_t)(__p - v17) < 0x20)
    {
      v20 = v9;
      do
      {
LABEL_20:
        v21 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v21;
        v18 -= 8;
      }
      while (v20 != __p);
      goto LABEL_21;
    }
    v22 = (v19 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = &v9[-v23];
    v18 -= v23;
    v24 = &v17[8 * v13 - 16];
    v25 = v9 - 16;
    v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_20;
LABEL_21:
    v9 = __p;
    __p = v18;
    v38 = &v17[8 * v16];
    if (v9)
      goto LABEL_25;
LABEL_4:
    v7 += 24;
    v9 = (char *)v10;
  }
  while (v7 != (char *)v8);
  v4 = a4;
  v7 = *a1;
  v28 = a1[1];
  v29 = (char **)__p;
  v5 = a3;
LABEL_35:
  v30 = -1431655765 * ((unint64_t)(v28 - v7) >> 3);
  while (1)
  {
    v31 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    v32 = getopt_long(v30, v29, v31, *v5, 0);
    if (v32 == -1)
      break;
    v39 = v32;
    v33 = *(_QWORD *)(v4 + 24);
    if (!v33)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v33 + 48))(v33, &v39);
  }
  *MEMORY[0x1E0C844E0] = 0;
  if (v29)
    operator delete(v29);
}

void sub_191055850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

void E5DB::PsnrCheckCommand::GetName(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "psnr_check");
}

char *E5DB::PsnrCheckCommand::GetDescription@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x58uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_191A85BA0;
  strcpy(result, "Compute the PSNR of output tensors for the loaded E5 bundle on current platform.");
  return result;
}

_QWORD *E5DB::PsnrCheckCommand::PsnrCheckCommand(_QWORD *this)
{
  *this = &off_1E2D599E0;
  return this;
}

void E5DB::PsnrCheckCommand::~PsnrCheckCommand(E5DB::PsnrCheckCommand *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t E5DB::PsnrCheckCommand::GetHelp(E5DB::PsnrCheckCommand *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  void *__p[2];
  unsigned __int8 v28;
  _QWORD v29[2];
  _QWORD v30[11];
  char v31;
  uint64_t v32;
  std::locale v33;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v29);
  (*(void (**)(void **__return_ptr, E5DB::PsnrCheckCommand *))(*(_QWORD *)this + 24))(__p, this);
  if ((v28 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v28 & 0x80u) == 0)
    v3 = v28;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v33, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v6 = std::locale::use_facet(&v33, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v28 < 0)
    operator delete(__p[0]);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"psnr_check [options]", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"This command will run PSNR check for a function (if specified).\nBy default, it runs the PSNR check for all public functions on the current platform.", 148);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Options:", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-f | --function [function]   : PSNR check for function. Default = * (all)", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-o | --outfile [output file] : Dump PSNR output to file. Default = stdout", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
  v16 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-t | --format [format type]  : Output format among [json]. Default = json", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-i | --intermediate          : PSNR check for intermediate values. Default = false", 82);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-m | --model [mil model]     : Path to mil model. Used to compute reference values. Required if -i is set.", 106);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-r | --reference-vectors-config [reference vectors config file] : Config file for regression test vectors. If omitted, then random inputs are used.", 147);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v29[0] = *MEMORY[0x1E0DE4F50];
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v30[0] = v25;
  v30[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v31 < 0)
    operator delete((void *)v30[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v32);
}

void sub_191055EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t E5DB::PsnrCheckCommand::GetHelpCSV(E5DB::PsnrCheckCommand *this)
{
  void *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  size_t v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *__p[2];
  unsigned __int8 v30;
  _QWORD v31[2];
  _QWORD v32[11];
  char v33;
  uint64_t v34;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  v2 = operator new(0xE0uLL);
  *((_OWORD *)v2 + 10) = xmmword_1E2DD0C98;
  *((_OWORD *)v2 + 11) = unk_1E2DD0CA8;
  *((_OWORD *)v2 + 12) = xmmword_1E2DD0CB8;
  *((_OWORD *)v2 + 13) = unk_1E2DD0CC8;
  *((_OWORD *)v2 + 6) = xmmword_1E2DD0C58;
  *((_OWORD *)v2 + 7) = unk_1E2DD0C68;
  *((_OWORD *)v2 + 8) = xmmword_1E2DD0C78;
  *((_OWORD *)v2 + 9) = unk_1E2DD0C88;
  *((_OWORD *)v2 + 2) = xmmword_1E2DD0C18;
  *((_OWORD *)v2 + 3) = unk_1E2DD0C28;
  *((_OWORD *)v2 + 4) = xmmword_1E2DD0C38;
  *((_OWORD *)v2 + 5) = unk_1E2DD0C48;
  *(_OWORD *)v2 = xmmword_1E2DD0BF8;
  *((_OWORD *)v2 + 1) = *(_OWORD *)algn_1E2DD0C08;
  (*(void (**)(void **__return_ptr, E5DB::PsnrCheckCommand *))(*(_QWORD *)this + 16))(__p, this);
  if ((v30 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v4 = v30;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=[", 2);
  if ((char)v30 < 0)
  {
    operator delete(__p[0]);
    v6 = *(const char **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_12;
    goto LABEL_11;
  }
  v6 = *(const char **)v2;
  if (*(_QWORD *)v2)
  {
LABEL_11:
    v7 = strlen(v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  }
LABEL_12:
  v9 = *((_QWORD *)v2 + 4);
  if (v9)
  {
    v10 = strlen(*((const char **)v2 + 4));
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  }
  v12 = *((_QWORD *)v2 + 8);
  if (v12)
  {
    v13 = strlen(*((const char **)v2 + 8));
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
  }
  v15 = *((_QWORD *)v2 + 12);
  if (v15)
  {
    v16 = strlen(*((const char **)v2 + 12));
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
  }
  v18 = *((_QWORD *)v2 + 16);
  if (v18)
  {
    v19 = strlen(*((const char **)v2 + 16));
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
  }
  v21 = *((_QWORD *)v2 + 20);
  if (v21)
  {
    v22 = strlen(*((const char **)v2 + 20));
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",", 1);
  }
  v24 = *((_QWORD *)v2 + 24);
  if (v24)
  {
    v25 = strlen(*((const char **)v2 + 24));
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  std::stringbuf::str();
  operator delete(v2);
  v31[0] = *MEMORY[0x1E0DE4F50];
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v32[0] = v27;
  v32[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v33 < 0)
    operator delete((void *)v32[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v34);
}

void sub_191056200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void E5DB::PsnrCheckCommand::ExecutePriv(uint64_t a1, uint64_t a2, char **a3)
{
  _OWORD *v5;
  void **v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  void *p_p;
  uint64_t v11;
  std::logic_error *exception;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  std::ios_base *v17;
  E5Common::E5PlatformManager *v18;
  uint64_t v19;
  uint64_t v20;
  E5RT *v21;
  char *v22;
  uint64_t v23;
  const void **v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  std::string *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *i;
  void *v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  size_t v56;
  char *v57;
  char *v58;
  void *v59;
  id v60;
  char *v61;
  char *v62;
  void **v63;
  void **v64;
  void *v65;
  std::runtime_error *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  std::logic_error *v70;
  std::runtime_error *v71;
  std::runtime_error *v72;
  std::runtime_error *v73;
  std::runtime_error *v74;
  std::runtime_error *v75;
  void *v76;
  char *v77;
  char *v78;
  void *v79;
  char *v80;
  char *v81;
  std::string v82;
  void *v83;
  char *v84;
  _OWORD *v85;
  E5RT *CurrentPlatform;
  int v87;
  unsigned __int8 v88;
  void *v89[2];
  char v90;
  char v91;
  void *v92[2];
  unsigned __int8 v93;
  unsigned __int8 v94;
  void *v95[2];
  char v96;
  void *v97;
  char v98;
  char v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  _BYTE v104[32];
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *__p;
  uint64_t v110;
  unsigned __int8 v111;
  void **v112;
  _BYTE v113[384];
  _QWORD v114[21];

  v114[19] = *MEMORY[0x1E0C80C00];
  if ((*(char *)(a2 + 39) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 39))
      goto LABEL_3;
LABEL_8:
    v9 = *(_QWORD **)a2;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 32))(&__p);
    if ((v111 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v111 & 0x80u) == 0)
      v11 = v111;
    else
      v11 = v110;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v11);
    if ((char)v111 < 0)
      operator delete(__p);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "E5 bundle path not specified.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (!*(_QWORD *)(a2 + 24))
    goto LABEL_8;
LABEL_3:
  if (!*(_QWORD *)(a2 + 40))
  {
    v67 = *(_QWORD **)a2;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 32))(&__p);
    if ((v111 & 0x80u) == 0)
      v68 = &__p;
    else
      v68 = __p;
    if ((v111 & 0x80u) == 0)
      v69 = v111;
    else
      v69 = v110;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
    if ((char)v111 < 0)
      operator delete(__p);
    v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v70, "E5 bundle not loaded. Cannot check PSNR.");
    __cxa_throw(v70, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v101 = 1;
  LOWORD(v100[0]) = 42;
  LOBYTE(v97) = 0;
  v99 = 0;
  v96 = 4;
  strcpy((char *)v95, "json");
  LOBYTE(v92[0]) = 0;
  v94 = 0;
  LOBYTE(v89[0]) = 0;
  v91 = 0;
  v88 = 0;
  v5 = operator new(0xE0uLL);
  *(_QWORD *)&v104[16] = v5 + 14;
  v5[10] = xmmword_1E2DD0C98;
  v5[11] = unk_1E2DD0CA8;
  v5[12] = xmmword_1E2DD0CB8;
  v5[13] = unk_1E2DD0CC8;
  v5[6] = xmmword_1E2DD0C58;
  v5[7] = unk_1E2DD0C68;
  v5[8] = xmmword_1E2DD0C78;
  v5[9] = unk_1E2DD0C88;
  v5[2] = xmmword_1E2DD0C18;
  v5[3] = unk_1E2DD0C28;
  v5[4] = xmmword_1E2DD0C38;
  v5[5] = unk_1E2DD0C48;
  *v5 = xmmword_1E2DD0BF8;
  v5[1] = *(_OWORD *)algn_1E2DD0C08;
  *(_QWORD *)v104 = v5;
  *(_QWORD *)&v104[8] = v5 + 14;
  v103 = 11;
  strcpy((char *)v102, "f:o:t:r:im:");
  v6 = (void **)operator new(0x38uLL);
  *v6 = &off_1E2DD0CE8;
  v6[1] = v100;
  v6[2] = &v97;
  v6[3] = v95;
  v6[4] = v92;
  v6[5] = v89;
  v6[6] = &v88;
  v112 = v6;
  E5DB::ParseOptions(a3, (uint64_t)v102, (const option **)v104, (uint64_t)&__p);
  v7 = v112;
  if (v112 == &__p)
  {
    v8 = 4;
    v7 = &__p;
  }
  else
  {
    if (!v112)
      goto LABEL_19;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_19:
  if (v103 < 0)
  {
    operator delete(v102[0]);
    if (!v88)
      goto LABEL_24;
  }
  else if (!v88)
  {
    goto LABEL_24;
  }
  if (!v91)
  {
    v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v71, "-m is required when -i is set");
    __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_24:
  if (*(_QWORD *)v104)
  {
    *(_QWORD *)&v104[8] = *(_QWORD *)v104;
    operator delete(*(void **)v104);
  }
  v13 = MEMORY[0x1E0DE4FB0];
  v14 = MEMORY[0x1E0DE4FB0] + 64;
  v15 = *(void **)(MEMORY[0x1E0DE4F48] + 8);
  v16 = *(void **)(MEMORY[0x1E0DE4F48] + 16);
  v114[0] = MEMORY[0x1E0DE4FB0] + 64;
  __p = v15;
  *(void **)((char *)&__p + *((_QWORD *)v15 - 3)) = v16;
  v17 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
  std::ios_base::init(v17, &v110);
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  __p = (void *)(v13 + 24);
  v114[0] = v14;
  v18 = (E5Common::E5PlatformManager *)MEMORY[0x19401C8B0](&v110);
  if (v99)
  {
    v18 = (E5Common::E5PlatformManager *)std::ofstream::open();
    if ((v113[*((_QWORD *)__p - 3)] & 5) != 0)
    {
      v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v74, "Unable to open output file.");
      __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v19 = E5Common::E5PlatformManager::Instance(v18);
  v20 = a2 + 16;
  E5RT::GetPlatformsInCompositeBundle(a2 + 16, (uint64_t)v102);
  CurrentPlatform = E5RT::GetCurrentPlatform(v21);
  v87 = 0;
  *(_QWORD *)v104 = CurrentPlatform;
  *(_DWORD *)&v104[8] = 0;
  v22 = (char *)operator new(0x10uLL);
  v84 = v22 + 16;
  v85 = v22 + 16;
  *(_OWORD *)v22 = *(_OWORD *)v104;
  v83 = v22;
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v104);
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = *(_OWORD *)v22;
  v23 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 24))(v19, &v82);
  v24 = (const void **)v23;
  v25 = v102[0];
  v26 = v102[1];
  if (v102[0] != v102[1])
  {
    v27 = *(_BYTE *)(v23 + 23);
    if (v27 >= 0)
      v28 = *(unsigned __int8 *)(v23 + 23);
    else
      v28 = *(_QWORD *)(v23 + 8);
    if (v27 >= 0)
      v29 = (unsigned __int8 *)v23;
    else
      v29 = *(unsigned __int8 **)v23;
    do
    {
      v30 = *((unsigned __int8 *)v25 + 23);
      if ((v30 & 0x80u) == 0)
        v31 = *((unsigned __int8 *)v25 + 23);
      else
        v31 = v25[1];
      if (v31 == v28)
      {
        if ((v30 & 0x80) != 0)
        {
          if (!memcmp((const void *)*v25, v29, v25[1]))
            goto LABEL_46;
        }
        else
        {
          if (!*((_BYTE *)v25 + 23))
            goto LABEL_46;
          v32 = 0;
          while (*((unsigned __int8 *)v25 + v32) == v29[v32])
          {
            if (v30 == ++v32)
              goto LABEL_46;
          }
        }
      }
      v25 += 3;
    }
    while (v25 != v26);
    v25 = v26;
  }
LABEL_46:
  if (v25 == v26)
  {
    v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not found in E5 bundle.", v24, v104);
    std::runtime_error::runtime_error(v72, (const std::string *)v104);
    __cxa_throw(v72, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v82);
  memset(v104, 0, sizeof(v104));
  v105 = 1065353216;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v33 = v94;
  if (v94)
  {
    memset(&v82, 0, sizeof(v82));
    v34 = v93;
    if ((v93 & 0x80u) == 0)
      v35 = (std::string *)v92;
    else
      v35 = (std::string *)v92[0];
    if ((v93 & 0x80u) != 0)
      v34 = (unint64_t)v92[1];
    std::string::append[abi:ne180100]<char const*,0>(&v82, v35, (std::string *)((char *)v35 + v34));
    E5DB::RegressionTestConfigParser::Parse((E5DB::RegressionTestConfigParser *)v104, (std::__fs::filesystem::path *)&v82);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
  }
  else if (!v91)
  {
    v82.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v82.__r_.__value_.__r.__words[1]) = 0;
    v36 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 24))(v19, &v82);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v82);
    v37 = v102[0];
    v38 = v102[1];
    if (v102[0] != v102[1])
    {
      v39 = *(_BYTE *)(v36 + 23);
      if (v39 >= 0)
        v40 = *(unsigned __int8 *)(v36 + 23);
      else
        v40 = *(_QWORD *)(v36 + 8);
      if (v39 >= 0)
        v41 = (unsigned __int8 *)v36;
      else
        v41 = *(unsigned __int8 **)v36;
      do
      {
        v42 = *((unsigned __int8 *)v37 + 23);
        if ((v42 & 0x80u) == 0)
          v43 = *((unsigned __int8 *)v37 + 23);
        else
          v43 = v37[1];
        if (v43 == v40)
        {
          if ((v42 & 0x80) != 0)
          {
            if (!memcmp((const void *)*v37, v41, v37[1]))
              goto LABEL_74;
          }
          else
          {
            if (!*((_BYTE *)v37 + 23))
              goto LABEL_74;
            v44 = 0;
            while (*((unsigned __int8 *)v37 + v44) == v41[v44])
            {
              if (v42 == ++v44)
                goto LABEL_74;
            }
          }
        }
        v37 += 3;
      }
      while (v37 != v38);
      v37 = v38;
    }
LABEL_74:
    if (v37 == v38)
    {
      v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not found in E5 bundle.", (const void **)v36, &v82);
      std::runtime_error::runtime_error(v75, &v82);
      __cxa_throw(v75, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  if (v101 < 0)
  {
    if (v100[1] != (void *)1 || *(_BYTE *)v100[0] != 42)
      goto LABEL_92;
  }
  else if (v101 != 1 || LOBYTE(v100[0]) != 42)
  {
LABEL_92:
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v54 = v83;
    v55 = v84 - (_BYTE *)v83;
    if (v84 != v83)
    {
      if (v55 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v79 = operator new(v84 - (_BYTE *)v83);
      v81 = (char *)v79 + 16 * (v55 >> 4);
      v56 = v55 & 0xFFFFFFFFFFFFFFF0;
      memcpy(v79, v54, v56);
      v80 = (char *)v79 + v56;
    }
    sub_191057138((uint64_t)v100, v20, (__int128 **)&v79, v33 == 0, (E5DB::RegressionTestConfigParser *)v104, (uint64_t)v89, v88, v45);
    v57 = (char *)v79;
    if (v79)
    {
      v58 = v80;
      v59 = v79;
      if (v80 != v79)
      {
        do
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v58 - 16));
        while (v58 != v57);
        v59 = v79;
      }
      v80 = v57;
      operator delete(v59);
    }
    goto LABEL_100;
  }
  for (i = *(_QWORD **)(E5RT::ProgramLibrary::GetExportedFunctions(*(E5RT::ProgramLibrary **)(a2 + 40)) + 16);
        i;
        i = (_QWORD *)*i)
  {
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v47 = v83;
    v48 = v84 - (_BYTE *)v83;
    if (v84 != v83)
    {
      if (v48 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v49 = (char *)operator new(v84 - (_BYTE *)v83);
      v76 = v49;
      v77 = v49;
      v78 = &v49[16 * (v48 >> 4)];
      v50 = v48 & 0xFFFFFFFFFFFFFFF0;
      memcpy(v49, v47, v50);
      v77 = &v49[v50];
    }
    sub_191057138((uint64_t)(i + 2), v20, (__int128 **)&v76, v33 == 0, (E5DB::RegressionTestConfigParser *)v104, (uint64_t)v89, v88, v45);
    v51 = (char *)v76;
    if (v76)
    {
      v52 = v77;
      v53 = v76;
      if (v77 != v76)
      {
        do
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v52 - 16));
        while (v52 != v51);
        v53 = v76;
      }
      v77 = v51;
      operator delete(v53);
    }
  }
LABEL_100:
  if (v96 < 0)
  {
    if (v95[1] != (void *)4 || *(_DWORD *)v95[0] != 1852797802)
    {
LABEL_137:
      v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v66, "Unsupported output format type.");
      __cxa_throw(v66, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else if (v96 != 4 || LODWORD(v95[0]) != 1852797802)
  {
    goto LABEL_137;
  }
  if (!objc_msgSend(MEMORY[0x1E0CB36D8], "isValidJSONObject:", v45))
  {
    v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Unable to serialize results to JSON: unexpected invalid object");
    __cxa_throw(v73, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v45, 3, 0);
  v60 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend(v60, "bytes");
  objc_msgSend(v60, "length");
  std::ostream::write();

  E5DB::RegressionTestConfigParser::~RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)v104);
  v61 = (char *)v83;
  if (v83)
  {
    v62 = v84;
    if (v84 != v83)
    {
      do
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v62 - 16));
      while (v62 != v61);
      v61 = (char *)v83;
    }
    operator delete(v61);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&CurrentPlatform);
  v63 = (void **)v102[0];
  if (v102[0])
  {
    v64 = (void **)v102[1];
    v65 = v102[0];
    if (v102[1] != v102[0])
    {
      do
      {
        if (*((char *)v64 - 1) < 0)
          operator delete(*(v64 - 3));
        v64 -= 3;
      }
      while (v64 != v63);
      v65 = v102[0];
    }
    v102[1] = v63;
    operator delete(v65);
  }
  __p = (void *)*MEMORY[0x1E0DE4F48];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x19401C8BC](&v110);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v114);
  if (v91 && v90 < 0)
    operator delete(v89[0]);
  if (v94 && (char)v93 < 0)
    operator delete(v92[0]);
  if (v96 < 0)
    operator delete(v95[0]);
  if (v99 && v98 < 0)
    operator delete(v97);
  if (v101 < 0)
    operator delete(v100[0]);
}

void sub_191056DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  void *a65;
  void *a72;
  void *v72;
  int v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v73 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v73)
  {
LABEL_6:
    E5DB::RegressionTestConfigParser::~RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)&a65);
    std::vector<E5Common::PlatformIdentifier>::~vector[abi:ne180100](&a23);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a26);
    std::vector<std::string>::~vector[abi:ne180100](&a62);
    std::ofstream::~ofstream(&a72);
    if (a35 && a34 < 0)
      operator delete(a29);
    if (a42 && a41 < 0)
      operator delete(a36);
    if (a48 < 0)
      operator delete(a43);
    if (a55 && a54 < 0)
      operator delete(a49);
    if (a61 < 0)
    {
      operator delete(a56);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void sub_191057138(uint64_t a1, uint64_t a2, __int128 **a3, char a4, E5DB::RegressionTestConfigParser *a5, uint64_t a6, int a7, void *a8)
{
  void **v11;
  void **v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  _OWORD *v17;
  _OWORD *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  _OWORD *v21;
  E5RT::ExecutionStreamOperationInternal **v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  uint64_t InputPorts;
  uint64_t v26;
  std::string::size_type size;
  size_t prime;
  _QWORD *i;
  unint64_t *v30;
  unint64_t v31;
  int8x8_t v32;
  BOOL v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  E5RT::ProgramLibrary *v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string::size_type v44;
  size_t v45;
  int8x8_t v46;
  BOOL v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD **v54;
  size_t v55;
  size_t v56;
  size_t v57;
  _QWORD *v58;
  size_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  size_t v63;
  _QWORD *j;
  void **v65;
  void **v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  void *v71;
  E5RT::IOPort *v72;
  std::string::size_type v73;
  _QWORD *v74;
  E5DB *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  void *v82;
  void **v83;
  void **v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void **v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  void **v99;
  void **v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  id v105;
  __int128 *v106;
  E5RT::ExecutionStreamOperationInternal *v107;
  E5RT::ExecutionStreamOperationInternal *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *OutputPorts;
  std::string *v113;
  E5RT::ExecutionStreamOperationInternal **v114;
  E5RT::ExecutionStreamOperationInternal **v115;
  unsigned int v116;
  _QWORD *k;
  const std::string *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  std::string *v122;
  __int128 v123;
  __int128 *v124;
  MIL::ParserOptions *MILContext;
  uint64_t v126;
  MIL::ParserOptions *v127;
  uint64_t v128;
  id v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t Function;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  void **v140;
  void **v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t Compiler;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  std::string *v159;
  std::string *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  E5RT::ProgramLibrary *v165;
  E5RT::ProgramLibrary *v166;
  std::__shared_weak_count_vtbl *v167;
  uint64_t v168;
  id v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  E5RT::ExecutionStreamOperationInternal **v174;
  unint64_t *v175;
  unint64_t v176;
  _QWORD *m;
  E5RT::IOPort *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  char *v203;
  __int128 v204;
  std::string *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  E5Common::E5PlatformManager *v210;
  uint64_t v211;
  uint64_t *v212;
  _QWORD *v213;
  id v214;
  id v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  void **v219;
  void **v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  void **v228;
  void **v229;
  void **v230;
  char *v231;
  char *v232;
  void *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void **v239;
  void **v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void *v244;
  void **v245;
  void **v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  void *v250;
  E5RT::AsyncEventImpl *v251;
  E5RT::AsyncEventImpl *v252;
  void *v253;
  E5Common::E5PlatformManager *v254;
  uint64_t v255;
  _OWORD *v256;
  E5RT::AsyncEventImpl *v257;
  uint64_t v258;
  __int128 v259;
  unint64_t *v260;
  unint64_t v261;
  void *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  void *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  size_t v273;
  int8x8_t v274;
  BOOL v275;
  unint64_t v276;
  uint8x8_t v277;
  uint64_t v278;
  void *v279;
  void *v280;
  uint64_t v281;
  _QWORD **v282;
  size_t v283;
  size_t v284;
  size_t v285;
  _QWORD *v286;
  size_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  size_t v291;
  _QWORD *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t *v296;
  id v297;
  id v298;
  void **v299;
  void **v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  void *v304;
  void *v305;
  void **v306;
  void **v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  void *v311;
  void **v312;
  void **v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  void *v317;
  E5RT::AsyncEventImpl *v318;
  E5RT::AsyncEventImpl *v319;
  void **v320;
  void **v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  void *v325;
  void **v326;
  void **v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  void *v331;
  std::runtime_error *v332;
  std::runtime_error *v333;
  std::runtime_error *v334;
  std::runtime_error *v335;
  std::runtime_error *v336;
  std::string *v337;
  __int128 v338;
  std::runtime_error *v339;
  std::runtime_error *exception;
  std::runtime_error *v341;
  std::runtime_error *v342;
  unint64_t FrameCount;
  char v345;
  id v346;
  E5DB::RegressionTestConfigParser *v347;
  unint64_t v349;
  uint64_t v350;
  E5RT::AsyncEventImpl *v351;
  id v352;
  id v353;
  void *v356[2];
  void *v357;
  void *v358[2];
  void *v359;
  void *v360;
  E5RT::AsyncEventImpl *v361;
  void *v362[2];
  void *v363;
  void *v364;
  void *v365;
  E5RT::AsyncEventImpl *v366;
  E5RT::AsyncEventImpl *v367;
  __int128 v368;
  std::string v369;
  char v370;
  __int128 v371;
  void *v372[2];
  void *v373[2];
  int v374;
  void *v375[2];
  void *v376[2];
  int v377;
  std::string __p;
  __int128 v379;
  __int128 v380;
  _QWORD v381[2];
  id v382;
  id v383;
  __int128 v384;
  __int128 v385;
  void *v386[2];
  unint64_t v387;
  _BYTE v388[32];
  int v389;
  __int128 v390;
  void *lpsrc;
  std::__shared_weak_count *v392;
  E5RT::ProgramLibrary *v393;
  std::__shared_weak_count_vtbl *v394;
  __int128 v395;
  __int128 v396;
  _BYTE v397[32];
  float v398;
  std::string v399;
  std::string *v400;
  _BYTE __str[32];
  std::__shared_weak_count *v402;
  uint64_t v403;

  v403 = *MEMORY[0x1E0C80C00];
  v346 = a8;
  v347 = a5;
  v345 = a4;
  if ((a4 & 1) != 0)
  {
    FrameCount = 1;
  }
  else
  {
    FrameCount = E5DB::RegressionTestConfigParser::GetFrameCount(a5);
    if (!FrameCount)
      goto LABEL_610;
  }
  v349 = 0;
  v350 = a6;
  do
  {
    *(_OWORD *)v375 = 0u;
    *(_OWORD *)v376 = 0u;
    v377 = 1065353216;
    *(_OWORD *)v372 = 0u;
    *(_OWORD *)v373 = 0u;
    v374 = 1065353216;
    if ((v345 & 1) == 0)
    {
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v371 = **a3;
      sub_19105A77C((uint64_t)v397, v347, v349, a2, &v371, a1, 1);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__move_assign((uint64_t)v375, (uint64_t *)v397);
      v11 = *(void ***)&v397[16];
      if (*(_QWORD *)&v397[16])
      {
        do
        {
          while (1)
          {
            v12 = (void **)*v11;
            v13 = (std::__shared_weak_count *)v11[6];
            if (v13)
            {
              p_shared_owners = (unint64_t *)&v13->__shared_owners_;
              do
                v15 = __ldaxr(p_shared_owners);
              while (__stlxr(v15 - 1, p_shared_owners));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
            if (*((char *)v11 + 39) < 0)
              break;
            operator delete(v11);
            v11 = v12;
            if (!v12)
              goto LABEL_21;
          }
          operator delete(v11[2]);
          operator delete(v11);
          v11 = v12;
        }
        while (v12);
      }
LABEL_21:
      v16 = *(void **)v397;
      *(_QWORD *)v397 = 0;
      if (v16)
        operator delete(v16);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v371);
      goto LABEL_200;
    }
    v369.__r_.__value_.__s.__data_[0] = 0;
    v370 = 0;
    if (*(_BYTE *)(a6 + 24))
    {
      if (*(char *)(a6 + 23) < 0)
        std::string::__init_copy_ctor_external(&v369, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
      else
        v369 = *(std::string *)a6;
      v370 = 1;
    }
    if (*a3 == a3[1])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found no platform ids in the input.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::vector<E5Common::PlatformIdentifier>::vector(v388, (uint64_t)a3);
    if (v370)
    {
      memset(&v399, 0, sizeof(v399));
      v17 = *(_OWORD **)&v388[8];
      v18 = *(_OWORD **)v388;
      if (*(_QWORD *)v388 != *(_QWORD *)&v388[8])
        goto LABEL_34;
LABEL_31:
      v19 = 0;
      v20 = 0;
      v21 = v18;
      goto LABEL_72;
    }
    *(_QWORD *)v397 = 0;
    *(_DWORD *)&v397[8] = 0;
    std::vector<E5Common::PlatformIdentifier>::insert((E5RT::AsyncEventImpl **)v388, *(uint64_t *)v388, (__n128 *)v397);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v397);
    memset(&v399, 0, sizeof(v399));
    v17 = *(_OWORD **)&v388[8];
    v18 = *(_OWORD **)v388;
    if (*(_QWORD *)v388 == *(_QWORD *)&v388[8])
      goto LABEL_31;
    do
    {
      while (1)
      {
LABEL_34:
        v396 = *v18;
        *(_OWORD *)v386 = v396;
        LOBYTE(v387) = 1;
        E5RT::GetE5PathFromCompositeBundle(a2, (__int128 *)v386, (std::string *)v397);
        if ((_BYTE)v387)
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v386);
        strcpy((char *)&__p, "Precompiled Compute op");
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 22;
        E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp(&__p, (E5RT::SharedResourceManager *)v397, a1, 1, 1, &lpsrc);
        v22 = (E5RT::ExecutionStreamOperationInternal **)lpsrc;
        *(_QWORD *)&v395 = lpsrc;
        if (lpsrc)
        {
          v23 = (std::__shared_weak_count *)operator new();
          v24 = (std::__shared_weak_count_vtbl *)lpsrc;
          v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC32E0;
          v23->__shared_owners_ = 0;
          v23->__shared_weak_owners_ = 0;
          v23[1].__vftable = v24;
          *((_QWORD *)&v395 + 1) = v23;
          lpsrc = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_39;
LABEL_38:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_39;
        }
        v395 = 0uLL;
        v23 = 0;
        lpsrc = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_38;
LABEL_39:
        InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(v22);
        v26 = InputPorts;
        size = v399.__r_.__value_.__l.__size_;
        if (v399.__r_.__value_.__l.__size_ >= v399.__r_.__value_.__r.__words[2])
        {
          v399.__r_.__value_.__l.__size_ = std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__push_back_slow_path<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>> const&>((void **)&v399.__r_.__value_.__l.__data_, InputPorts);
          if (!v23)
            goto LABEL_32;
LABEL_48:
          v30 = (unint64_t *)&v23->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
          goto LABEL_32;
        }
        *(_OWORD *)v399.__r_.__value_.__l.__size_ = 0u;
        *(_OWORD *)(size + 16) = 0u;
        *(_DWORD *)(size + 32) = *(_DWORD *)(InputPorts + 32);
        prime = *(_QWORD *)(InputPorts + 8);
        if (prime == 1)
        {
          prime = 2;
LABEL_42:
          std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(size, prime);
          goto LABEL_43;
        }
        if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(*(_QWORD *)(InputPorts + 8));
          v32 = *(int8x8_t *)(size + 8);
          v33 = prime >= *(_QWORD *)&v32;
          if (prime > *(_QWORD *)&v32)
            goto LABEL_42;
        }
        else
        {
          v32 = 0;
          v33 = 1;
          if (prime)
            goto LABEL_42;
        }
        if (!v33)
        {
          v34 = vcvtps_u32_f32((float)*(unint64_t *)(size + 24) / *(float *)(size + 32));
          if (*(_QWORD *)&v32 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v32), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
          {
            v34 = std::__next_prime(v34);
          }
          else
          {
            v36 = 1 << -(char)__clz(v34 - 1);
            if (v34 >= 2)
              v34 = v36;
          }
          if (prime <= v34)
            prime = v34;
          if (prime < *(_QWORD *)&v32)
            goto LABEL_42;
        }
LABEL_43:
        for (i = *(_QWORD **)(v26 + 16); i; i = (_QWORD *)*i)
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(size, (uint64_t)(i + 2), (uint64_t)(i + 2));
        v399.__r_.__value_.__l.__size_ = size + 40;
        if (v23)
          goto LABEL_48;
LABEL_32:
        if ((v397[23] & 0x80000000) != 0)
          break;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v396);
        if (++v18 == v17)
          goto LABEL_71;
      }
      operator delete(*(void **)v397);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v396);
      ++v18;
    }
    while (v18 != v17);
LABEL_71:
    v21 = *(_OWORD **)&v388[8];
    v18 = *(_OWORD **)v388;
    v20 = v399.__r_.__value_.__l.__size_;
    v19 = v399.__r_.__value_.__r.__words[0];
LABEL_72:
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v19) >> 3) != v21 - v18)
    {
      v341 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v341, "Failed in populating the ports of all the platforms.");
      __cxa_throw(v341, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v370)
    {
      sub_19105A9C8((E5RT::E5Compiler *)&__p, (std::string::size_type)&v369, a1);
      v37 = (E5RT::ProgramLibrary *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      sub_19105AC70(v397, v37, a1);
      if (v37)
        (*(void (**)(E5RT::ProgramLibrary *))(*(_QWORD *)v37 + 8))(v37);
      v38 = E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal ***)v397);
      v39 = v399.__r_.__value_.__l.__size_;
      if (v399.__r_.__value_.__l.__size_ >= v399.__r_.__value_.__r.__words[2])
      {
        v40 = std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__push_back_slow_path<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>> const&>((void **)&v399.__r_.__value_.__l.__data_, v38);
      }
      else
      {
        std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(v399.__r_.__value_.__l.__size_, v38);
        v40 = v39 + 40;
      }
      v399.__r_.__value_.__l.__size_ = v40;
      v41 = *(std::__shared_weak_count **)&v397[8];
      if (!*(_QWORD *)&v397[8])
        goto LABEL_83;
      v42 = (unint64_t *)(*(_QWORD *)&v397[8] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        v44 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v44)
LABEL_84:
          (*(void (**)(std::string::size_type))(*(_QWORD *)v44 + 8))(v44);
      }
      else
      {
LABEL_83:
        v44 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v44)
          goto LABEL_84;
      }
      v20 = v399.__r_.__value_.__l.__size_;
      v19 = v399.__r_.__value_.__r.__words[0];
    }
    while (2)
    {
      if (v19 != v20)
      {
        memset(v397, 0, sizeof(v397));
        v398 = *(float *)(v19 + 32);
        v45 = *(_QWORD *)(v19 + 8);
        if (v45 == 1)
        {
          v45 = 2;
          goto LABEL_106;
        }
        if ((v45 & (v45 - 1)) != 0)
        {
          v45 = std::__next_prime(*(_QWORD *)(v19 + 8));
          v46 = *(int8x8_t *)&v397[8];
          v47 = v45 >= *(_QWORD *)&v397[8];
          if (v45 > *(_QWORD *)&v397[8])
            goto LABEL_105;
        }
        else
        {
          v46 = 0;
          v47 = 1;
          if (v45)
          {
LABEL_105:
            if (v45 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
LABEL_106:
            v51 = operator new(8 * v45);
            v52 = *(void **)v397;
            *(_QWORD *)v397 = v51;
            if (v52)
              operator delete(v52);
            v53 = 0;
            *(_QWORD *)&v397[8] = v45;
            do
              *(_QWORD *)(*(_QWORD *)v397 + 8 * v53++) = 0;
            while (v45 != v53);
            v54 = *(_QWORD ***)&v397[16];
            if (!*(_QWORD *)&v397[16])
              goto LABEL_130;
            v55 = *(_QWORD *)(*(_QWORD *)&v397[16] + 8);
            v56 = v45 - 1;
            if ((v45 & (v45 - 1)) == 0)
            {
              v57 = v55 & v56;
              *(_QWORD *)(*(_QWORD *)v397 + 8 * v57) = &v397[16];
              while (1)
              {
                v58 = *v54;
                if (!*v54)
                  break;
                v59 = v58[1] & v56;
                if (v59 == v57)
                {
                  v54 = (_QWORD **)*v54;
                }
                else if (*(_QWORD *)(*(_QWORD *)v397 + 8 * v59))
                {
                  *v54 = (_QWORD *)*v58;
                  v60 = 8 * v59;
                  *v58 = **(_QWORD **)(*(_QWORD *)v397 + v60);
                  **(_QWORD **)(*(_QWORD *)v397 + v60) = v58;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)v397 + 8 * v59) = v54;
                  v54 = (_QWORD **)v58;
                  v57 = v59;
                }
              }
              goto LABEL_130;
            }
            if (v55 >= v45)
              v55 %= v45;
            *(_QWORD *)(*(_QWORD *)v397 + 8 * v55) = &v397[16];
            v61 = *v54;
            if (!*v54)
            {
LABEL_130:
              j = *(_QWORD **)(v19 + 16);
              if (j)
                goto LABEL_131;
              goto LABEL_132;
            }
            while (1)
            {
LABEL_125:
              v63 = v61[1];
              if (v63 >= v45)
                v63 %= v45;
              if (v63 == v55)
                goto LABEL_124;
              if (*(_QWORD *)(*(_QWORD *)v397 + 8 * v63))
                break;
              *(_QWORD *)(*(_QWORD *)v397 + 8 * v63) = v54;
              v54 = (_QWORD **)v61;
              v61 = (_QWORD *)*v61;
              v55 = v63;
              if (!v61)
                goto LABEL_130;
            }
            *v54 = (_QWORD *)*v61;
            v62 = 8 * v63;
            *v61 = **(_QWORD **)(*(_QWORD *)v397 + v62);
            **(_QWORD **)(*(_QWORD *)v397 + v62) = v61;
            v61 = v54;
LABEL_124:
            v54 = (_QWORD **)v61;
            v61 = (_QWORD *)*v61;
            if (!v61)
              goto LABEL_130;
            goto LABEL_125;
          }
        }
        if (v47)
          goto LABEL_130;
        v48 = vcvtps_u32_f32((float)*(unint64_t *)&v397[24] / v398);
        if (*(_QWORD *)&v46 < 3uLL || (v49 = (uint8x8_t)vcnt_s8(v46), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
        {
          v48 = std::__next_prime(v48);
        }
        else
        {
          v50 = 1 << -(char)__clz(v48 - 1);
          if (v48 >= 2)
            v48 = v50;
        }
        if (v45 <= v48)
          v45 = v48;
        if (v45 >= *(_QWORD *)&v46)
          goto LABEL_130;
        if (v45)
          goto LABEL_105;
        v71 = *(void **)v397;
        *(_QWORD *)v397 = 0;
        if (v71)
          operator delete(v71);
        *(_QWORD *)&v397[8] = 0;
        for (j = *(_QWORD **)(v19 + 16); j; j = (_QWORD *)*j)
LABEL_131:
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>((uint64_t)v397, (uint64_t)(j + 2), (uint64_t)(j + 2));
LABEL_132:
        if (*(_QWORD *)&v397[24] != *(_QWORD *)(v399.__r_.__value_.__r.__words[0] + 24))
        {
          v335 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v335, "Failed in populating the ports of all the platforms.");
          __cxa_throw(v335, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v65 = *(void ***)&v397[16];
        if (*(_QWORD *)&v397[16])
        {
          do
          {
            while (1)
            {
              v66 = (void **)*v65;
              v67 = (std::__shared_weak_count *)v65[6];
              if (v67)
              {
                v68 = (unint64_t *)&v67->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              if (*((char *)v65 + 39) < 0)
                break;
              operator delete(v65);
              v65 = v66;
              if (!v66)
                goto LABEL_143;
            }
            operator delete(v65[2]);
            operator delete(v65);
            v65 = v66;
          }
          while (v66);
        }
LABEL_143:
        v70 = *(void **)v397;
        *(_QWORD *)v397 = 0;
        if (v70)
          operator delete(v70);
        v19 += 40;
        continue;
      }
      break;
    }
    E5DB::MakeCandidateBoundPorts((uint64_t *)&v399, (uint64_t)__str);
    v73 = v399.__r_.__value_.__r.__words[0];
    if (*(_QWORD *)&__str[24] != *(_QWORD *)(v399.__r_.__value_.__r.__words[0] + 24))
    {
      v342 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v342, "Failed in getting all the necessary candidate ports for reference inputs.");
      __cxa_throw(v342, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v74 = *(_QWORD **)&__str[16];
    if (!*(_QWORD *)&__str[16])
      goto LABEL_163;
    do
    {
      v75 = (E5DB *)v74[5];
      v76 = (std::__shared_weak_count *)v74[6];
      *(_QWORD *)v397 = v75;
      *(_QWORD *)&v397[8] = v76;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      if (!v75)
      {
        v334 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v334, "Found null pointer to a reference input.");
        __cxa_throw(v334, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      E5DB::InitializePortRandomlyForPsnr(v75, v72);
      if (v76)
      {
        v79 = (unint64_t *)&v76->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v74 = (_QWORD *)*v74;
    }
    while (v74);
    v73 = v399.__r_.__value_.__r.__words[0];
    if (v399.__r_.__value_.__r.__words[0])
    {
LABEL_163:
      v81 = (_QWORD *)v399.__r_.__value_.__l.__size_;
      v82 = (void *)v73;
      if (v399.__r_.__value_.__l.__size_ != v73)
      {
        do
        {
          v83 = (void **)*(v81 - 3);
          if (v83)
          {
            do
            {
              while (1)
              {
                v84 = (void **)*v83;
                v85 = (std::__shared_weak_count *)v83[6];
                if (v85)
                {
                  v86 = (unint64_t *)&v85->__shared_owners_;
                  do
                    v87 = __ldaxr(v86);
                  while (__stlxr(v87 - 1, v86));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                }
                if (*((char *)v83 + 39) < 0)
                  break;
                operator delete(v83);
                v83 = v84;
                if (!v84)
                  goto LABEL_176;
              }
              operator delete(v83[2]);
              operator delete(v83);
              v83 = v84;
            }
            while (v84);
          }
LABEL_176:
          v89 = (void *)*(v81 - 5);
          v81 -= 5;
          v88 = v89;
          *v81 = 0;
          if (v89)
            operator delete(v88);
        }
        while (v81 != (_QWORD *)v73);
        v82 = (void *)v399.__r_.__value_.__r.__words[0];
      }
      v399.__r_.__value_.__l.__size_ = v73;
      operator delete(v82);
    }
    v90 = *(_QWORD *)v388;
    if (*(_QWORD *)v388)
    {
      v91 = *(_QWORD *)&v388[8];
      v92 = *(void **)v388;
      if (*(_QWORD *)&v388[8] != *(_QWORD *)v388)
      {
        do
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v91 - 16));
        while (v91 != v90);
        v92 = *(void **)v388;
      }
      *(_QWORD *)&v388[8] = v90;
      operator delete(v92);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__move_assign((uint64_t)v375, (uint64_t *)__str);
    v93 = *(void ***)&__str[16];
    if (*(_QWORD *)&__str[16])
    {
      do
      {
        while (1)
        {
          v94 = (void **)*v93;
          v95 = (std::__shared_weak_count *)v93[6];
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          if (*((char *)v93 + 39) < 0)
            break;
          operator delete(v93);
          v93 = v94;
          if (!v94)
            goto LABEL_195;
        }
        operator delete(v93[2]);
        operator delete(v93);
        v93 = v94;
      }
      while (v94);
    }
LABEL_195:
    v98 = *(void **)__str;
    *(_QWORD *)__str = 0;
    if (v98)
      operator delete(v98);
    if (v370 && SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v369.__r_.__value_.__l.__data_);
LABEL_200:
    if (a3[1] == *a3)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v368 = **a3;
    sub_19105A77C((uint64_t)v397, v347, v349, a2, &v368, a1, 0);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__move_assign((uint64_t)v372, (uint64_t *)v397);
    v99 = *(void ***)&v397[16];
    if (*(_QWORD *)&v397[16])
    {
      do
      {
        while (1)
        {
          v100 = (void **)*v99;
          v101 = (std::__shared_weak_count *)v99[6];
          if (v101)
          {
            v102 = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          if (*((char *)v99 + 39) < 0)
            break;
          operator delete(v99);
          v99 = v100;
          if (!v100)
            goto LABEL_211;
        }
        operator delete(v99[2]);
        operator delete(v99);
        v99 = v100;
      }
      while (v100);
    }
LABEL_211:
    v104 = *(void **)v397;
    *(_QWORD *)v397 = 0;
    if (v104)
      operator delete(v104);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v368);
    if (!v376[1])
    {
      v339 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v339, "Found missing reference inputs.");
      goto LABEL_620;
    }
    if (!v373[1])
    {
      v339 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v339, "Found missing reference outputs.");
LABEL_620:
      __cxa_throw(v339, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (a7)
    {
      std::vector<E5Common::PlatformIdentifier>::vector(&v366, (uint64_t)a3);
      std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)&v364, (uint64_t)v375);
      std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v362, (uint64_t)v372);
      v105 = v346;
      v106 = (__int128 *)v366;
      v351 = v367;
      v352 = v105;
      if (v366 == v367)
        goto LABEL_437;
      while (1)
      {
        v380 = *v106;
        v379 = *v106;
        v353 = v352;
        v390 = v379;
        sub_19105C130((E5RT::ExecutionStreamOperationInternal ***)&lpsrc, &v364, a2, &v390, a1);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v390);
        v108 = v107;
        v109 = v392;
        if (v392)
        {
          v110 = (unint64_t *)&v392->__shared_owners_;
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        OutputPorts = (std::string *)(*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)v107 + 24))(v107);
        v113 = OutputPorts;
        v114 = (E5RT::ExecutionStreamOperationInternal **)OutputPorts->__r_.__value_.__r.__words[0];
        v115 = (E5RT::ExecutionStreamOperationInternal **)OutputPorts->__r_.__value_.__l.__size_;
        memset(v388, 0, sizeof(v388));
        v389 = 1065353216;
        if (v114 == v115)
        {
          v386[1] = 0;
          v386[0] = 0;
          v387 = 0;
        }
        else
        {
          do
          {
            OutputPorts = (std::string *)(*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)*v114 + 32))(*v114);
            if (((_DWORD)OutputPorts - 6) <= 0xFFFFFFFC)
            {
              v397[23] = 1;
              strcpy(v397, "_");
              v116 = (*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)*v114 + 32))(*v114)
                   - 1;
              if (v116 >= 0xB || ((0x4C3u >> v116) & 1) == 0)
              {
                v333 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v333, "Unsupported es op");
                __cxa_throw(v333, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              std::string::append((std::string *)v397, off_1E2DD0ED8[v116], qword_191A86228[v116]);
              OutputPorts = (std::string *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*v114);
              for (k = (_QWORD *)OutputPorts->__r_.__value_.__r.__words[2]; k; k = (_QWORD *)*k)
              {
                v118 = (const std::string *)(k + 2);
                E5Common::StringUtils::GetSubstringBeforeSuffix((uint64_t)(k + 2), (uint64_t)v397, __str);
                v119 = __str[23];
                if (__str[23] < 0)
                  v119 = *(_QWORD *)&__str[8];
                v399.__r_.__value_.__r.__words[0] = (std::string::size_type)(k + 2);
                if (v119)
                {
                  v120 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v388, (uint64_t)(k + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v399);
                  v118 = (const std::string *)__str;
                }
                else
                {
                  v120 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v388, (uint64_t)(k + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v399);
                }
                OutputPorts = std::string::operator=((std::string *)(v120 + 5), v118);
                if ((__str[23] & 0x80000000) != 0)
                  operator delete(*(void **)__str);
              }
              if ((v397[23] & 0x80000000) != 0)
                operator delete(*(void **)v397);
            }
            v114 += 2;
          }
          while (v114 != v115);
          v121 = *(uint64_t **)&v388[16];
          v386[1] = 0;
          v386[0] = 0;
          v387 = 0;
          if (*(_QWORD *)&v388[16])
          {
            v122 = 0;
            do
            {
              v124 = (__int128 *)(v121 + 5);
              if ((unint64_t)v122 < v387)
              {
                if (*((char *)v121 + 63) < 0)
                {
                  std::string::__init_copy_ctor_external(v122, (const std::string::value_type *)v121[5], v121[6]);
                }
                else
                {
                  v123 = *v124;
                  v122->__r_.__value_.__r.__words[2] = v121[7];
                  *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
                }
                ++v122;
              }
              else
              {
                OutputPorts = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v386, (uint64_t)v124);
                v122 = OutputPorts;
              }
              v386[1] = v122;
              v121 = (uint64_t *)*v121;
            }
            while (v121);
          }
        }
        MILContext = (MIL::ParserOptions *)MIL::Opsets::Common::CreateMILContext((MIL::Opsets::Common *)OutputPorts);
        v126 = *(_QWORD *)v397;
        *(_QWORD *)&v396 = *(_QWORD *)v397;
        if (*(_QWORD *)v397)
        {
          MILContext = (MIL::ParserOptions *)operator new();
          v127 = MILContext;
          v128 = *(_QWORD *)v397;
          *(_QWORD *)MILContext = &unk_1E2DC2E80;
          *((_QWORD *)MILContext + 1) = 0;
          *((_QWORD *)MILContext + 2) = 0;
          *((_QWORD *)MILContext + 3) = v128;
        }
        else
        {
          v127 = 0;
        }
        *((_QWORD *)&v396 + 1) = v127;
        MIL::ParserOptions::Make(MILContext);
        v129 = v382;
        if (*(char *)(a6 + 23) < 0)
          std::string::__init_copy_ctor_external(&v399, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
        else
          v399 = *(std::string *)a6;
        (*(void (**)(id, std::string *, uint64_t))(*(_QWORD *)v129 + 32))(v129, &v399, 1);
        if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v399.__r_.__value_.__l.__data_);
        (*(void (**)(id, uint64_t))(*(_QWORD *)v382 + 64))(v382, 1);
        *(_QWORD *)&v395 = v126;
        *((_QWORD *)&v395 + 1) = v127;
        if (v127)
        {
          v130 = (unint64_t *)((char *)v127 + 8);
          do
            v131 = __ldxr(v130);
          while (__stxr(v131 + 1, v130));
        }
        MIL::Text::ParseProgramFromFile();
        v132 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
        if (*((_QWORD *)&v395 + 1))
        {
          v133 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        Function = MIL::IRProgram::GetFunction();
        (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr))(*(_QWORD *)Function + 232))(&v394);
        v136 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v394->~__shared_weak_count + 6))(v394);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v136 + 96))(v136, v386);
        v137 = v381[0];
        if (*(char *)(a1 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        }
        else
        {
          *(_OWORD *)__str = *(_OWORD *)a1;
          *(_QWORD *)&__str[16] = *(_QWORD *)(a1 + 16);
        }
        *(_QWORD *)&__str[24] = v394;
        if (v394)
        {
          v138 = (std::__shared_weak_count *)operator new();
          v139 = v394;
          v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E10;
          v138->__shared_owners_ = 0;
          v138->__shared_weak_owners_ = 0;
          v138[1].__vftable = v139;
        }
        else
        {
          v138 = 0;
        }
        v402 = v138;
        v394 = 0;
        memset(v397, 0, sizeof(v397));
        v398 = 1.0;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>((uint64_t)v397, (uint64_t)__str, (uint64_t)__str);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v137 + 80))(v137, v397);
        v140 = *(void ***)&v397[16];
        if (*(_QWORD *)&v397[16])
        {
          do
          {
            while (1)
            {
              v141 = (void **)*v140;
              v142 = (std::__shared_weak_count *)v140[6];
              if (v142)
              {
                v143 = (unint64_t *)&v142->__shared_owners_;
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              if (*((char *)v140 + 39) < 0)
                break;
              operator delete(v140);
              v140 = v141;
              if (!v141)
                goto LABEL_278;
            }
            operator delete(v140[2]);
            operator delete(v140);
            v140 = v141;
          }
          while (v141);
        }
LABEL_278:
        v145 = *(void **)v397;
        *(_QWORD *)v397 = 0;
        if (v145)
          operator delete(v145);
        v146 = v402;
        if (!v402)
          break;
        v147 = (unint64_t *)&v402->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (v148)
          break;
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
        if ((__str[23] & 0x80000000) != 0)
          goto LABEL_285;
LABEL_286:
        v149 = v381[0];
        Compiler = E5RT::E5Compiler::GetCompiler((E5RT::E5Compiler *)v145);
        E5RT::E5CompilerOptions::Create((E5RT::E5CompilerOptions **)&v384);
        v151 = v384;
        v152 = operator new(8uLL);
        *(_QWORD *)v397 = v152;
        *v152 = 1;
        *(_QWORD *)&v397[8] = v152 + 1;
        *(_QWORD *)&v397[16] = v152 + 1;
        E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed(v151, (uint64_t)v397);
        if (*(_QWORD *)v397)
        {
          *(_QWORD *)&v397[8] = *(_QWORD *)v397;
          operator delete(*(void **)v397);
        }
        v153 = v384;
        memset(v397, 0, 24);
        *(_QWORD *)__str = v397;
        __str[8] = 0;
        v154 = operator new(0x18uLL);
        *(_QWORD *)&v397[8] = v154 + 3;
        *(_QWORD *)&v397[16] = v154 + 3;
        *v154 = 0x5F63697373616C63;
        v154[1] = 7696483;
        *((_BYTE *)v154 + 23) = 11;
        *(_QWORD *)v397 = v154;
        E5RT::E5CompilerOptions::SetPreferredCpuBackends(v153, (uint64_t *)v397);
        v155 = *(_QWORD *)v397;
        if (*(_QWORD *)v397)
        {
          v156 = *(_QWORD *)&v397[8];
          v157 = *(void **)v397;
          if (*(_QWORD *)&v397[8] != *(_QWORD *)v397)
          {
            do
            {
              if (*(char *)(v156 - 1) < 0)
                operator delete(*(void **)(v156 - 24));
              v156 -= 24;
            }
            while (v156 != v155);
            v157 = *(void **)v397;
          }
          *(_QWORD *)&v397[8] = v155;
          operator delete(v157);
        }
        v158 = v384;
        if (*(char *)(a1 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        }
        else
        {
          *(_OWORD *)__str = *(_OWORD *)a1;
          *(_QWORD *)&__str[16] = *(_QWORD *)(a1 + 16);
        }
        memset(v397, 0, 24);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v397;
        __p.__r_.__value_.__s.__data_[8] = 0;
        v159 = (std::string *)operator new(0x18uLL);
        *(_QWORD *)v397 = v159;
        *(_QWORD *)&v397[8] = v159;
        v160 = v159 + 1;
        *(_QWORD *)&v397[16] = v159 + 1;
        if ((__str[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v159, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
        }
        else
        {
          *(_OWORD *)&v159->__r_.__value_.__l.__data_ = *(_OWORD *)__str;
          v159->__r_.__value_.__r.__words[2] = *(_QWORD *)&__str[16];
        }
        *(_QWORD *)&v397[8] = v160;
        E5RT::E5CompilerOptions::SetMilEntryPoints(v158, (uint64_t *)v397);
        v161 = *(_QWORD *)v397;
        a6 = v350;
        if (*(_QWORD *)v397)
        {
          v162 = *(_QWORD *)&v397[8];
          v163 = *(void **)v397;
          if (*(_QWORD *)&v397[8] != *(_QWORD *)v397)
          {
            do
            {
              if (*(char *)(v162 - 1) < 0)
                operator delete(*(void **)(v162 - 24));
              v162 -= 24;
            }
            while (v162 != v161);
            v163 = *(void **)v397;
          }
          *(_QWORD *)&v397[8] = v161;
          operator delete(v163);
        }
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        E5RT::E5Compiler::Compile(Compiler, v149, (const void **)v384, (uint64_t *)&v393);
        v164 = v384;
        *(_QWORD *)&v384 = 0;
        if (v164)
          (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
        v165 = v393;
        v393 = 0;
        sub_19105AC70(&v385, v165, a1);
        if (v165)
          (*(void (**)(E5RT::ProgramLibrary *))(*(_QWORD *)v165 + 8))(v165);
        v166 = v393;
        v393 = 0;
        if (v166)
          (*(void (**)(E5RT::ProgramLibrary *))(*(_QWORD *)v166 + 8))(v166);
        v167 = v394;
        v394 = 0;
        if (v167)
          (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
        v168 = v381[0];
        v381[0] = 0;
        if (v168)
          (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
        v169 = v382;
        v382 = 0;
        if (v169)
          (*(void (**)(id))(*(_QWORD *)v169 + 8))(v169);
        v170 = (std::__shared_weak_count *)*((_QWORD *)&v396 + 1);
        if (!*((_QWORD *)&v396 + 1))
          goto LABEL_328;
        v171 = (unint64_t *)(*((_QWORD *)&v396 + 1) + 8);
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
          v173 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
          v174 = (E5RT::ExecutionStreamOperationInternal **)v385;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v385;
          if (!*((_QWORD *)&v385 + 1))
            goto LABEL_331;
        }
        else
        {
LABEL_328:
          v173 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
          v174 = (E5RT::ExecutionStreamOperationInternal **)v385;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v385;
          if (!*((_QWORD *)&v385 + 1))
            goto LABEL_331;
        }
        v175 = (unint64_t *)&v173->__shared_owners_;
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
LABEL_331:
        E5DB::ReshapeIfNeeded(v174, (uint64_t)&v364);
        E5DB::PrepareEsOpInputAndInOutPorts(v174, &v364, 0);
        for (m = *(_QWORD **)(E5RT::ExecutionStreamOperation::GetOutputPorts(v174) + 16); m; m = (_QWORD *)*m)
        {
          v178 = (E5RT::IOPort *)m[5];
          if (!v178)
          {
            v332 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v332, "Found null pointer to an output port.");
            __cxa_throw(v332, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          E5RT::AllocateAndBindMemory(v178, 0);
        }
        v399.__r_.__value_.__r.__words[0] = (std::string::size_type)v174;
        v399.__r_.__value_.__l.__size_ = (std::string::size_type)v173;
        if (v173)
        {
          v179 = (unint64_t *)&v173->__shared_owners_;
          do
            v180 = __ldxr(v179);
          while (__stxr(v180 + 1, v179));
        }
        E5RT::ExecutionStream::CreateExecutionStream(&v396);
        v181 = v396;
        *(_QWORD *)__str = v174;
        *(_QWORD *)&__str[8] = v173;
        if (v173)
        {
          v182 = (unint64_t *)&v173->__shared_owners_;
          do
            v183 = __ldxr(v182);
          while (__stxr(v183 + 1, v182));
        }
        E5RT::ExecutionStream::EncodeOperation(v181, (__int128 *)__str);
        v184 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v185 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v186 = __ldaxr(v185);
          while (__stlxr(v186 - 1, v185));
          if (!v186)
          {
            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
            std::__shared_weak_count::__release_weak(v184);
          }
        }
        E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStreamImpl **)v396);
        E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStreamImpl **)v396);
        v187 = v396;
        *(_QWORD *)&v396 = 0;
        if (v187)
          (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
        if (v173)
        {
          v188 = (unint64_t *)&v173->__shared_owners_;
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        v190 = E5RT::ExecutionStreamOperation::GetOutputPorts((E5RT::ExecutionStreamOperationInternal **)__p.__r_.__value_.__l.__data_);
        std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v397, v190);
        if (v173)
        {
          v191 = (unint64_t *)&v173->__shared_owners_;
          do
            v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
          if (!v192)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        E5RT::ExecutionStream::CreateExecutionStream(__str);
        v193 = *(_QWORD *)__str;
        *(_QWORD *)&v396 = *(_QWORD *)__str;
        if (*(_QWORD *)__str)
        {
          v194 = (_QWORD *)operator new();
          v195 = *(_QWORD *)__str;
          *v194 = &unk_1E2DC3238;
          v194[1] = 0;
          v194[2] = 0;
          v194[3] = v195;
          *((_QWORD *)&v396 + 1) = v194;
          *(_QWORD *)&v395 = v108;
          *((_QWORD *)&v395 + 1) = v109;
          if (!v109)
            goto LABEL_363;
        }
        else
        {
          v396 = 0uLL;
          *(_QWORD *)&v395 = v108;
          *((_QWORD *)&v395 + 1) = v109;
          if (!v109)
            goto LABEL_363;
        }
        v196 = (unint64_t *)&v109->__shared_owners_;
        do
          v197 = __ldxr(v196);
        while (__stxr(v197 + 1, v196));
LABEL_363:
        E5RT::ExecutionStream::EncodeOperation(v193, &v395);
        v198 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
        if (*((_QWORD *)&v395 + 1))
        {
          v199 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
          do
            v200 = __ldaxr(v199);
          while (__stlxr(v200 - 1, v199));
          if (!v200)
          {
            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
            std::__shared_weak_count::__release_weak(v198);
          }
        }
        v394 = (std::__shared_weak_count_vtbl *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v393 = 0;
        *(_QWORD *)__str = &v393;
        *(_QWORD *)&__str[8] = v113;
        *(_QWORD *)&__str[16] = v388;
        *(_QWORD *)&__str[24] = &v394;
        v402 = (std::__shared_weak_count *)v397;
        v384 = v396;
        if (*((_QWORD *)&v396 + 1))
        {
          v201 = (unint64_t *)(*((_QWORD *)&v396 + 1) + 8);
          do
            v202 = __ldxr(v201);
          while (__stxr(v202 + 1, v201));
        }
        v400 = 0;
        v203 = (char *)operator new(0x30uLL);
        *(_QWORD *)v203 = &off_1E2DD0D68;
        v204 = *(_OWORD *)&__str[16];
        *(_OWORD *)(v203 + 8) = *(_OWORD *)__str;
        *(_OWORD *)(v203 + 24) = v204;
        *((_QWORD *)v203 + 5) = v402;
        v400 = (std::string *)v203;
        E5RT_Private::StepStreamSync((uint64_t *)&v384, &v399);
        v205 = v400;
        if (v400 == &v399)
        {
          v205 = &v399;
          v206 = 4;
          goto LABEL_375;
        }
        if (v400)
        {
          v206 = 5;
LABEL_375:
          (*(void (**)(void))(v205->__r_.__value_.__r.__words[0] + 8 * v206))();
        }
        v207 = (std::__shared_weak_count *)*((_QWORD *)&v384 + 1);
        if (*((_QWORD *)&v384 + 1))
        {
          v208 = (unint64_t *)(*((_QWORD *)&v384 + 1) + 8);
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        sub_19105C310((_QWORD **)__str);
        E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStreamImpl **)v396);
        v211 = E5Common::E5PlatformManager::Instance(v210);
        v212 = (uint64_t *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v211 + 24))(v211, &v379);
        v213 = (_QWORD *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(v108);
        E5DB::ComputePsnr((uint64_t)v362, v213, (uint64_t *)&v382);
        v214 = v382;
        v381[0] = v214;
        v215 = v383;
        v381[1] = v215;
        sub_19105C890(v381, v353, v212, (uint64_t *)a1, v394);

        v216 = (std::__shared_weak_count *)*((_QWORD *)&v396 + 1);
        if (!*((_QWORD *)&v396 + 1))
          goto LABEL_385;
        v217 = (unint64_t *)(*((_QWORD *)&v396 + 1) + 8);
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
          std::__shared_weak_count::__release_weak(v216);
          v219 = *(void ***)&v397[16];
          if (*(_QWORD *)&v397[16])
            goto LABEL_395;
        }
        else
        {
LABEL_385:
          v219 = *(void ***)&v397[16];
          if (*(_QWORD *)&v397[16])
          {
            do
            {
              while (1)
              {
LABEL_395:
                v220 = (void **)*v219;
                v221 = (std::__shared_weak_count *)v219[6];
                if (v221)
                {
                  v222 = (unint64_t *)&v221->__shared_owners_;
                  do
                    v223 = __ldaxr(v222);
                  while (__stlxr(v223 - 1, v222));
                  if (!v223)
                  {
                    ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                    std::__shared_weak_count::__release_weak(v221);
                  }
                }
                if (*((char *)v219 + 39) < 0)
                  break;
                operator delete(v219);
                v219 = v220;
                if (!v220)
                  goto LABEL_401;
              }
              operator delete(v219[2]);
              operator delete(v219);
              v219 = v220;
            }
            while (v220);
          }
        }
LABEL_401:
        v224 = *(void **)v397;
        *(_QWORD *)v397 = 0;
        if (v224)
          operator delete(v224);
        v225 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
        if (!*((_QWORD *)&v385 + 1))
          goto LABEL_407;
        v226 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
          v228 = (void **)v386[0];
          if (!v386[0])
            goto LABEL_415;
        }
        else
        {
LABEL_407:
          v228 = (void **)v386[0];
          if (!v386[0])
            goto LABEL_415;
        }
        v229 = (void **)v386[1];
        v230 = v228;
        if (v386[1] != v228)
        {
          do
          {
            if (*((char *)v229 - 1) < 0)
              operator delete(*(v229 - 3));
            v229 -= 3;
          }
          while (v229 != v228);
          v230 = (void **)v386[0];
        }
        v386[1] = v228;
        operator delete(v230);
LABEL_415:
        v231 = *(char **)&v388[16];
        if (*(_QWORD *)&v388[16])
        {
          while (1)
          {
            v232 = *(char **)v231;
            if (v231[63] < 0)
            {
              operator delete(*((void **)v231 + 5));
              if ((v231[39] & 0x80000000) == 0)
                goto LABEL_418;
LABEL_421:
              operator delete(*((void **)v231 + 2));
              operator delete(v231);
              v231 = v232;
              if (!v232)
                break;
            }
            else
            {
              if (v231[39] < 0)
                goto LABEL_421;
LABEL_418:
              operator delete(v231);
              v231 = v232;
              if (!v232)
                break;
            }
          }
        }
        v233 = *(void **)v388;
        *(_QWORD *)v388 = 0;
        if (v233)
          operator delete(v233);
        if (!v109)
          goto LABEL_428;
        v234 = (unint64_t *)&v109->__shared_owners_;
        do
          v235 = __ldaxr(v234);
        while (__stlxr(v235 - 1, v234));
        if (!v235)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
          v236 = v392;
          if (v392)
            goto LABEL_429;
        }
        else
        {
LABEL_428:
          v236 = v392;
          if (v392)
          {
LABEL_429:
            v237 = (unint64_t *)&v236->__shared_owners_;
            do
              v238 = __ldaxr(v237);
            while (__stlxr(v238 - 1, v237));
            if (!v238)
            {
              ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
              std::__shared_weak_count::__release_weak(v236);
            }
          }
        }

        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v379);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v380);
        if (++v106 == (__int128 *)v351)
        {
LABEL_437:

          v239 = (void **)v363;
          if (v363)
          {
            do
            {
              while (1)
              {
                v240 = (void **)*v239;
                v241 = (std::__shared_weak_count *)v239[6];
                if (v241)
                {
                  v242 = (unint64_t *)&v241->__shared_owners_;
                  do
                    v243 = __ldaxr(v242);
                  while (__stlxr(v243 - 1, v242));
                  if (!v243)
                  {
                    ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                    std::__shared_weak_count::__release_weak(v241);
                  }
                }
                if (*((char *)v239 + 39) < 0)
                  break;
                operator delete(v239);
                v239 = v240;
                if (!v240)
                  goto LABEL_447;
              }
              operator delete(v239[2]);
              operator delete(v239);
              v239 = v240;
            }
            while (v240);
          }
LABEL_447:
          v244 = v362[0];
          v362[0] = 0;
          if (v244)
            operator delete(v244);
          v245 = (void **)v365;
          if (v365)
          {
            do
            {
              while (1)
              {
                v246 = (void **)*v245;
                v247 = (std::__shared_weak_count *)v245[6];
                if (v247)
                {
                  v248 = (unint64_t *)&v247->__shared_owners_;
                  do
                    v249 = __ldaxr(v248);
                  while (__stlxr(v249 - 1, v248));
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                    std::__shared_weak_count::__release_weak(v247);
                  }
                }
                if (*((char *)v245 + 39) < 0)
                  break;
                operator delete(v245);
                v245 = v246;
                if (!v246)
                  goto LABEL_459;
              }
              operator delete(v245[2]);
              operator delete(v245);
              v245 = v246;
            }
            while (v246);
          }
LABEL_459:
          v250 = v364;
          v364 = 0;
          if (v250)
            operator delete(v250);
          v251 = v366;
          if (v366)
          {
            v252 = v367;
            v253 = v366;
            if (v367 != v366)
            {
              do
              {
                v252 = (E5RT::AsyncEventImpl *)((char *)v252 - 16);
                E5RT::AsyncEventImpl::~AsyncEventImpl(v252);
              }
              while (v252 != v251);
              v253 = v366;
            }
            v367 = v251;
LABEL_582:
            operator delete(v253);
            goto LABEL_583;
          }
          goto LABEL_583;
        }
      }
      if ((__str[23] & 0x80000000) == 0)
        goto LABEL_286;
LABEL_285:
      operator delete(*(void **)__str);
      goto LABEL_286;
    }
    std::vector<E5Common::PlatformIdentifier>::vector(&v360, (uint64_t)a3);
    std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v358, (uint64_t)v375);
    std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v356, (uint64_t)v372);
    v254 = (E5Common::E5PlatformManager *)v346;
    v255 = E5Common::E5PlatformManager::Instance(v254);
    v256 = v360;
    v257 = v361;
    if (v360 != v361)
    {
      v258 = v255;
      while (1)
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v256;
        v396 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_OWORD *)&v399.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        sub_19105C130((E5RT::ExecutionStreamOperationInternal ***)v388, v358, a2, (__int128 *)&v399, a1);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v399);
        v259 = *(_OWORD *)v388;
        *(_OWORD *)v386 = *(_OWORD *)v388;
        if (*(_QWORD *)&v388[8])
        {
          v260 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
          do
            v261 = __ldxr(v260);
          while (__stxr(v261 + 1, v260));
        }
        E5RT::ExecutionStream::CreateExecutionStream(&lpsrc);
        v262 = lpsrc;
        *(_OWORD *)__str = v259;
        if (*((_QWORD *)&v259 + 1))
        {
          v263 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
          do
            v264 = __ldxr(v263);
          while (__stxr(v264 + 1, v263));
        }
        E5RT::ExecutionStream::EncodeOperation((uint64_t)v262, (__int128 *)__str);
        v265 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v266 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v267 = __ldaxr(v266);
          while (__stlxr(v267 - 1, v266));
          if (!v267)
          {
            ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
            std::__shared_weak_count::__release_weak(v265);
          }
        }
        E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStreamImpl **)lpsrc);
        E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStreamImpl **)lpsrc);
        v268 = lpsrc;
        lpsrc = 0;
        if (v268)
          (*(void (**)(void *))(*(_QWORD *)v268 + 8))(v268);
        if (*((_QWORD *)&v259 + 1))
        {
          v269 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
          do
            v270 = __ldaxr(v269);
          while (__stlxr(v270 - 1, v269));
          if (!v270)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v259 + 1) + 16))(*((_QWORD *)&v259 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v259 + 1));
          }
        }
        v271 = E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal ***)v388);
        v272 = v271;
        memset(v397, 0, sizeof(v397));
        v398 = *(float *)(v271 + 32);
        v273 = *(_QWORD *)(v271 + 8);
        if (v273 != 1)
          break;
        v273 = 2;
LABEL_505:
        v279 = operator new(8 * v273);
        v280 = *(void **)v397;
        *(_QWORD *)v397 = v279;
        if (v280)
          operator delete(v280);
        v281 = 0;
        *(_QWORD *)&v397[8] = v273;
        do
          *(_QWORD *)(*(_QWORD *)v397 + 8 * v281++) = 0;
        while (v273 != v281);
        v282 = *(_QWORD ***)&v397[16];
        if (*(_QWORD *)&v397[16])
        {
          v283 = *(_QWORD *)(*(_QWORD *)&v397[16] + 8);
          v284 = v273 - 1;
          if ((v273 & (v273 - 1)) == 0)
          {
            v285 = v283 & v284;
            *(_QWORD *)(*(_QWORD *)v397 + 8 * v285) = &v397[16];
            while (1)
            {
              v286 = *v282;
              if (!*v282)
                break;
              v287 = v286[1] & v284;
              if (v287 == v285)
              {
                v282 = (_QWORD **)*v282;
              }
              else if (*(_QWORD *)(*(_QWORD *)v397 + 8 * v287))
              {
                *v282 = (_QWORD *)*v286;
                v288 = 8 * v287;
                *v286 = **(_QWORD **)(*(_QWORD *)v397 + v288);
                **(_QWORD **)(*(_QWORD *)v397 + v288) = v286;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)v397 + 8 * v287) = v282;
                v282 = (_QWORD **)v286;
                v285 = v287;
              }
            }
            goto LABEL_529;
          }
          if (v283 >= v273)
            v283 %= v273;
          *(_QWORD *)(*(_QWORD *)v397 + 8 * v283) = &v397[16];
          v289 = *v282;
          if (*v282)
          {
            while (1)
            {
              v291 = v289[1];
              if (v291 >= v273)
                v291 %= v273;
              if (v291 == v283)
                goto LABEL_523;
              if (*(_QWORD *)(*(_QWORD *)v397 + 8 * v291))
              {
                *v282 = (_QWORD *)*v289;
                v290 = 8 * v291;
                *v289 = **(_QWORD **)(*(_QWORD *)v397 + v290);
                **(_QWORD **)(*(_QWORD *)v397 + v290) = v289;
                v289 = v282;
LABEL_523:
                v282 = (_QWORD **)v289;
                v289 = (_QWORD *)*v289;
                if (!v289)
                  break;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)v397 + 8 * v291) = v282;
                v282 = (_QWORD **)v289;
                v289 = (_QWORD *)*v289;
                v283 = v291;
                if (!v289)
                  break;
              }
            }
          }
        }
LABEL_529:
        v292 = *(_QWORD **)(v272 + 16);
        if (v292)
          goto LABEL_530;
LABEL_531:
        v293 = *(std::__shared_weak_count **)&v388[8];
        if (*(_QWORD *)&v388[8])
        {
          v294 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
          do
            v295 = __ldaxr(v294);
          while (__stlxr(v295 - 1, v294));
          if (!v295)
          {
            ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
            std::__shared_weak_count::__release_weak(v293);
          }
        }
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v396);
        v296 = (uint64_t *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v258 + 24))(v258, &__p);
        if (!*(_QWORD *)&v397[24])
        {
          v336 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v337 = std::string::append((std::string *)v388, ".");
          v338 = *(_OWORD *)&v337->__r_.__value_.__l.__data_;
          *(_QWORD *)&__str[16] = *((_QWORD *)&v337->__r_.__value_.__l + 2);
          *(_OWORD *)__str = v338;
          v337->__r_.__value_.__l.__size_ = 0;
          v337->__r_.__value_.__r.__words[2] = 0;
          v337->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v336, (const std::string *)__str);
          __cxa_throw(v336, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        E5DB::ComputePsnr((uint64_t)v356, v397, (uint64_t *)__str);
        v297 = *(id *)__str;
        *(_QWORD *)&v395 = v297;
        v298 = *(id *)&__str[8];
        *((_QWORD *)&v395 + 1) = v298;
        sub_19105C890(&v395, v254, v296, (uint64_t *)a1, 0);

        v299 = *(void ***)&v397[16];
        if (*(_QWORD *)&v397[16])
        {
          do
          {
            while (1)
            {
              v300 = (void **)*v299;
              v301 = (std::__shared_weak_count *)v299[6];
              if (v301)
              {
                v302 = (unint64_t *)&v301->__shared_owners_;
                do
                  v303 = __ldaxr(v302);
                while (__stlxr(v303 - 1, v302));
                if (!v303)
                {
                  ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                  std::__shared_weak_count::__release_weak(v301);
                }
              }
              if (*((char *)v299 + 39) < 0)
                break;
              operator delete(v299);
              v299 = v300;
              if (!v300)
                goto LABEL_547;
            }
            operator delete(v299[2]);
            operator delete(v299);
            v299 = v300;
          }
          while (v300);
        }
LABEL_547:
        v304 = *(void **)v397;
        *(_QWORD *)v397 = 0;
        if (v304)
          operator delete(v304);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&__p);
        if (++v256 == (_OWORD *)v257)
          goto LABEL_553;
      }
      if ((v273 & (v273 - 1)) != 0)
      {
        v273 = std::__next_prime(*(_QWORD *)(v271 + 8));
        v274 = *(int8x8_t *)&v397[8];
        v275 = v273 >= *(_QWORD *)&v397[8];
        if (v273 > *(_QWORD *)&v397[8])
          goto LABEL_504;
      }
      else
      {
        v274 = 0;
        v275 = 1;
        if (v273)
        {
LABEL_504:
          if (v273 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          goto LABEL_505;
        }
      }
      if (v275)
        goto LABEL_529;
      v276 = vcvtps_u32_f32((float)*(unint64_t *)&v397[24] / v398);
      if (*(_QWORD *)&v274 < 3uLL
        || (v277 = (uint8x8_t)vcnt_s8(v274), v277.i16[0] = vaddlv_u8(v277), v277.u32[0] > 1uLL))
      {
        v276 = std::__next_prime(v276);
      }
      else
      {
        v278 = 1 << -(char)__clz(v276 - 1);
        if (v276 >= 2)
          v276 = v278;
      }
      if (v273 <= v276)
        v273 = v276;
      if (v273 >= *(_QWORD *)&v274)
        goto LABEL_529;
      if (!v273)
      {
        v305 = *(void **)v397;
        *(_QWORD *)v397 = 0;
        if (v305)
          operator delete(v305);
        *(_QWORD *)&v397[8] = 0;
        v292 = *(_QWORD **)(v272 + 16);
        if (!v292)
          goto LABEL_531;
        do
        {
LABEL_530:
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>((uint64_t)v397, (uint64_t)(v292 + 2), (uint64_t)(v292 + 2));
          v292 = (_QWORD *)*v292;
        }
        while (v292);
        goto LABEL_531;
      }
      goto LABEL_504;
    }
LABEL_553:

    v306 = (void **)v357;
    if (v357)
    {
      do
      {
        while (1)
        {
          v307 = (void **)*v306;
          v308 = (std::__shared_weak_count *)v306[6];
          if (v308)
          {
            v309 = (unint64_t *)&v308->__shared_owners_;
            do
              v310 = __ldaxr(v309);
            while (__stlxr(v310 - 1, v309));
            if (!v310)
            {
              ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
              std::__shared_weak_count::__release_weak(v308);
            }
          }
          if (*((char *)v306 + 39) < 0)
            break;
          operator delete(v306);
          v306 = v307;
          if (!v307)
            goto LABEL_563;
        }
        operator delete(v306[2]);
        operator delete(v306);
        v306 = v307;
      }
      while (v307);
    }
LABEL_563:
    v311 = v356[0];
    v356[0] = 0;
    if (v311)
      operator delete(v311);
    v312 = (void **)v359;
    if (v359)
    {
      do
      {
        while (1)
        {
          v313 = (void **)*v312;
          v314 = (std::__shared_weak_count *)v312[6];
          if (v314)
          {
            v315 = (unint64_t *)&v314->__shared_owners_;
            do
              v316 = __ldaxr(v315);
            while (__stlxr(v316 - 1, v315));
            if (!v316)
            {
              ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
              std::__shared_weak_count::__release_weak(v314);
            }
          }
          if (*((char *)v312 + 39) < 0)
            break;
          operator delete(v312);
          v312 = v313;
          if (!v313)
            goto LABEL_575;
        }
        operator delete(v312[2]);
        operator delete(v312);
        v312 = v313;
      }
      while (v313);
    }
LABEL_575:
    v317 = v358[0];
    v358[0] = 0;
    if (v317)
      operator delete(v317);
    v318 = (E5RT::AsyncEventImpl *)v360;
    if (v360)
    {
      v319 = v361;
      v253 = v360;
      if (v361 != v360)
      {
        do
        {
          v319 = (E5RT::AsyncEventImpl *)((char *)v319 - 16);
          E5RT::AsyncEventImpl::~AsyncEventImpl(v319);
        }
        while (v319 != v318);
        v253 = v360;
      }
      v361 = v318;
      goto LABEL_582;
    }
LABEL_583:
    v320 = (void **)v373[0];
    if (v373[0])
    {
      do
      {
        while (1)
        {
          v321 = (void **)*v320;
          v322 = (std::__shared_weak_count *)v320[6];
          if (v322)
          {
            v323 = (unint64_t *)&v322->__shared_owners_;
            do
              v324 = __ldaxr(v323);
            while (__stlxr(v324 - 1, v323));
            if (!v324)
            {
              ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
              std::__shared_weak_count::__release_weak(v322);
            }
          }
          if (*((char *)v320 + 39) < 0)
            break;
          operator delete(v320);
          v320 = v321;
          if (!v321)
            goto LABEL_593;
        }
        operator delete(v320[2]);
        operator delete(v320);
        v320 = v321;
      }
      while (v321);
    }
LABEL_593:
    v325 = v372[0];
    v372[0] = 0;
    if (v325)
      operator delete(v325);
    v326 = (void **)v376[0];
    if (v376[0])
    {
      do
      {
        while (1)
        {
          v327 = (void **)*v326;
          v328 = (std::__shared_weak_count *)v326[6];
          if (v328)
          {
            v329 = (unint64_t *)&v328->__shared_owners_;
            do
              v330 = __ldaxr(v329);
            while (__stlxr(v330 - 1, v329));
            if (!v330)
            {
              ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
              std::__shared_weak_count::__release_weak(v328);
            }
          }
          if (*((char *)v326 + 39) < 0)
            break;
          operator delete(v326);
          v326 = v327;
          if (!v327)
            goto LABEL_605;
        }
        operator delete(v326[2]);
        operator delete(v326);
        v326 = v327;
      }
      while (v327);
    }
LABEL_605:
    v331 = v375[0];
    v375[0] = 0;
    if (v331)
      operator delete(v331);
    ++v349;
  }
  while (v349 != FrameCount);
LABEL_610:

}

void sub_191059954(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](&v3);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](&v4);

  _Unwind_Resume(a1);
}

void sub_19105995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;
  void *v55;
  uint64_t v56;
  uint64_t v57;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v53 - 224);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a53);
  __cxa_end_catch();
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&v56);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&v57);

  _Unwind_Resume(a1);
}

void sub_1910599E4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x19105A28CLL);
}

void sub_1910599F4()
{
  JUMPOUT(0x19105A284);
}

void sub_1910599FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;
  void *v66;
  uint64_t v67;
  uint64_t v68;

  if (a65)
  {
    if (a64 < 0)
      operator delete(__p);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&v67);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&v68);

  _Unwind_Resume(a1);
}

void sub_19105A138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  std::__shared_weak_count *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;

  if (*(char *)(v51 - 121) < 0)
  {
    operator delete(*(void **)(v51 - 144));
    if (*(char *)(v51 - 201) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v51 - 224));
      v52 = (char *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_12:
        v54 = (void *)STACK[0x2C0];
        STACK[0x2C0] = 0;
        if (v54)
          operator delete(v54);
        if (v50)
        {
          p_shared_owners = (unint64_t *)&v50->__shared_owners_;
          do
            v56 = __ldaxr(p_shared_owners);
          while (__stlxr(v56 - 1, p_shared_owners));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v57 = (std::__shared_weak_count *)STACK[0x308];
        if (STACK[0x308])
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }

        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x240]);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x250]);

        std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a40);
        std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a45);
        std::vector<E5Common::PlatformIdentifier>::~vector[abi:ne180100](&a50);
        JUMPOUT(0x19105A274);
      }
      while (1)
      {
        v53 = *(char **)v52;
        if (v52[63] < 0)
        {
          operator delete(*((void **)v52 + 5));
          if ((v52[39] & 0x80000000) == 0)
            goto LABEL_8;
LABEL_11:
          operator delete(*((void **)v52 + 2));
          operator delete(v52);
          v52 = v53;
          if (!v53)
            goto LABEL_12;
        }
        else
        {
          if (v52[39] < 0)
            goto LABEL_11;
LABEL_8:
          operator delete(v52);
          v52 = v53;
          if (!v53)
            goto LABEL_12;
        }
      }
    }
  }
  else if (*(char *)(v51 - 201) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x19105A12CLL);
}

void **std::vector<E5Common::PlatformIdentifier>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v3 - 16));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t E5DB::PsnrCheckCommand::Execute(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = operator new(0x20uLL);
  *v6 = &off_1E2DD0E68;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v17 = v6;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
  v7 = E5DB::SafeExecute((uint64_t)v16);
  if ((char)v15 < 0)
  {
    operator delete(__p[0]);
    v8 = v17;
    if (v17 != v16)
      goto LABEL_3;
LABEL_6:
    v9 = 4;
    v8 = v16;
    goto LABEL_7;
  }
  v8 = v17;
  if (v17 == v16)
    goto LABEL_6;
LABEL_3:
  if (!v8)
    goto LABEL_8;
  v9 = 5;
LABEL_7:
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  if (!v7)
    return 0;
  v10 = *a2;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
  if ((v15 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v12 = v15;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  return 0x100000000;
}

void sub_19105A440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19105A4D0()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_19105A4E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DD0CE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_19105A52C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DD0CE8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

size_t sub_19105A55C(size_t result, _DWORD *a2)
{
  _BYTE *v2;
  const char *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  switch(*a2)
  {
    case 'f':
    case 't':
      goto LABEL_18;
    case 'i':
      **(_BYTE **)(result + 48) = 1;
      return result;
    case 'm':
      v2 = *(_BYTE **)(result + 40);
      v3 = (const char *)*MEMORY[0x1E0C844D0];
      if (!v2[24])
        goto LABEL_8;
      goto LABEL_18;
    case 'o':
      v2 = *(_BYTE **)(result + 16);
      v3 = (const char *)*MEMORY[0x1E0C844D0];
      if (v2[24])
        goto LABEL_18;
      goto LABEL_8;
    case 'r':
      v2 = *(_BYTE **)(result + 32);
      v3 = (const char *)*MEMORY[0x1E0C844D0];
      if (v2[24])
LABEL_18:
        JUMPOUT(0x19401C808);
LABEL_8:
      result = strlen(v3);
      if (result > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v4 = result;
      if (result >= 0x17)
      {
        v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17)
          v6 = result | 7;
        v7 = v6 + 1;
        v5 = operator new(v6 + 1);
        *((_QWORD *)v2 + 1) = v4;
        *((_QWORD *)v2 + 2) = v7 | 0x8000000000000000;
        *(_QWORD *)v2 = v5;
      }
      else
      {
        v2[23] = result;
        v5 = v2;
        if (!result)
          goto LABEL_16;
      }
      result = (size_t)memmove(v5, v3, v4);
LABEL_16:
      *((_BYTE *)v5 + v4) = 0;
      v2[24] = 1;
      return result;
    default:
      return result;
  }
}

uint64_t sub_19105A704(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1"
                     "_9allocatorIcEEEENS6_IS8_EEEERS8_RNS1_8optionalIS8_EESD_SG_SG_RbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_tr"
                                "aitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERS8_RNS1_8optionalIS8_EESD_SG_SG_RbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERS8_RNS1_8optionalIS8_EESD_SG_SG_RbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERS8_RNS1_8optionalIS8_EESD_SG_SG_RbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19105A770()
{
  return &unk_1E2DD0D48;
}

void sub_19105A77C(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, int a7)
{
  E5RT::ExecutionStreamOperationInternal **v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t OutputPorts;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string __p;
  _QWORD v19[2];
  std::__shared_weak_count *v20;
  __int128 v21;
  char v22;
  std::string v23;

  v21 = *a5;
  v22 = 1;
  E5RT::GetE5PathFromCompositeBundle(a4, &v21, &v23);
  if (v22)
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v21);
  strcpy((char *)&__p, "Precompiled Compute op");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 22;
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp(&__p, (E5RT::SharedResourceManager *)&v23, a6, 1, 1, v19);
  v12 = (E5RT::ExecutionStreamOperationInternal **)v19[0];
  v19[1] = v19[0];
  if (v19[0])
  {
    v13 = (std::__shared_weak_count *)operator new();
    v14 = (std::__shared_weak_count_vtbl *)v19[0];
    v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC32E0;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v14;
    v20 = v13;
    v19[0] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a7)
      goto LABEL_6;
LABEL_9:
    OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(v12);
    goto LABEL_10;
  }
  v13 = 0;
  v20 = 0;
  v19[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
LABEL_5:
  if (!a7)
    goto LABEL_9;
LABEL_6:
  OutputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(v12);
LABEL_10:
  E5DB::MakeRefPortsFromParser(a2, a3, OutputPorts, a1);
  if (!v13)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
  {
LABEL_14:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v23.__r_.__value_.__l.__data_);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
}

void sub_19105A92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a21);
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a26 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

const void **sub_19105A9C8(E5RT::E5Compiler *a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t Compiler;
  E5RT::E5CompilerOptions *v7;
  void **v8;
  E5RT::E5CompilerOptions *v9;
  void **v10;
  void **v11;
  void *v12;
  E5RT::E5CompilerOptions *v13;
  void **v14;
  void **v15;
  void *v16;
  const void **result;
  void *__p;
  void **v19;
  _QWORD *v20;
  const void **v21;
  std::string v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  Compiler = E5RT::E5Compiler::GetCompiler(a1);
  E5RT::E5CompilerOptions::Create((E5RT::E5CompilerOptions **)&v21);
  v7 = (E5RT::E5CompilerOptions *)v21;
  v8 = (void **)operator new(8uLL);
  __p = v8;
  *v8 = (void *)1;
  v19 = v8 + 1;
  v20 = v8 + 1;
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed((uint64_t)v7, (uint64_t)&__p);
  if (__p)
  {
    v19 = (void **)__p;
    operator delete(__p);
  }
  v9 = (E5RT::E5CompilerOptions *)v21;
  *((_BYTE *)&v22.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v22, "classic_cpu");
  std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v22, 1uLL);
  E5RT::E5CompilerOptions::SetPreferredCpuBackends((uint64_t)v9, (uint64_t *)&__p);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v19;
    v12 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v19 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    v13 = (E5RT::E5CompilerOptions *)v21;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else
  {
    v13 = (E5RT::E5CompilerOptions *)v21;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_13:
      v22 = *(std::string *)a3;
      goto LABEL_16;
    }
  }
  std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_16:
  std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v22, 1uLL);
  E5RT::E5CompilerOptions::SetMilEntryPoints((uint64_t)v13, (uint64_t *)&__p);
  v14 = (void **)__p;
  if (__p)
  {
    v15 = v19;
    v16 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v14);
      v16 = __p;
    }
    v19 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  E5RT::E5Compiler::Compile(Compiler, a2, v21, (uint64_t *)a1);
  result = v21;
  v21 = 0;
  if (result)
    return (const void **)(*((uint64_t (**)(const void **))*result + 1))(result);
  return result;
}

void sub_19105ABF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_19105AC70(_QWORD *a1, E5RT::ProgramLibrary *this, uint64_t a3)
{
  _QWORD *ExportedFunctions;
  uint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::string::size_type result;
  std::runtime_error *exception;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string v22;
  std::string v23;

  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(this);
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, a3);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v18 = std::string::append(&v22, " is not generated. Is function name changed during compile?");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v6[6];
  v20 = v6[5];
  v21 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create(&v20, &v23);
  v10 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp((E5RT::ExecutionStreamOperation *)v23.__r_.__value_.__l.__data_, &v22);
  v13 = v22.__r_.__value_.__r.__words[0];
  *a1 = v22.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v22.__r_.__value_.__r.__words[0];
    *v14 = &unk_1E2DC32E0;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
    a1[1] = v14;
    result = v23.__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)result + 8))(result);
  }
  a1[1] = 0;
  result = v23.__r_.__value_.__r.__words[0];
  v23.__r_.__value_.__r.__words[0] = 0;
  if (result)
    return (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19105AE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void sub_19105AEBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19105AED0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t OutputPorts;
  _QWORD v12[2];

  sub_19105BB70(*(E5RT::ExecutionStreamOperationInternal ***)a3, a2);
  v5 = *(std::__shared_weak_count **)(a3 + 8);
  v12[0] = *(_QWORD *)a3;
  v12[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_19105BC10(v12);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal ***)a3);
  return std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(a1, OutputPorts);
}

void sub_19105AF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19105AF88(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t OutputPorts;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  __int128 v16;
  E5RT::ExecutionStreamOperation *v17;
  std::__shared_weak_count *v18;

  v16 = *a4;
  sub_19105C130((E5RT::ExecutionStreamOperationInternal ***)&v17, a2, a3, &v16, a5);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v16);
  v6 = v18;
  v15[0] = v17;
  v15[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_19105BC10(v15);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts((E5RT::ExecutionStreamOperationInternal **)v17);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(a1, OutputPorts);
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_19105B080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19105B09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)va);
  _Unwind_Resume(a1);
}

void sub_19105B0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(void ***)(a1 + 16);
    if (v4)
    {
      do
      {
        while (1)
        {
          v5 = (void **)*v4;
          v6 = (std::__shared_weak_count *)v4[6];
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          if (*((char *)v4 + 39) < 0)
            break;
          operator delete(v4);
          v4 = v5;
          if (!v5)
            goto LABEL_12;
        }
        operator delete(v4[2]);
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
LABEL_12:
    *(_QWORD *)(a1 + 16) = 0;
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v11 = *a2;
  *a2 = 0;
  v12 = *(void **)a1;
  *(_QWORD *)a1 = v11;
  if (v12)
    operator delete(v12);
  v15 = a2[2];
  v14 = a2 + 2;
  v13 = v15;
  v16 = *(v14 - 1);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 8) = v16;
  *(v14 - 1) = 0;
  v17 = v14[1];
  *(_QWORD *)(a1 + 24) = v17;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v14 + 4);
  if (v17)
  {
    v18 = *(_QWORD *)(v13 + 8);
    v19 = *(_QWORD *)(a1 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19)
        v18 %= v19;
    }
    else
    {
      v18 &= v19 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = a1 + 16;
    *v14 = 0;
    v14[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          return;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

E5RT::AsyncEventImpl *std::vector<E5Common::PlatformIdentifier>::insert(E5RT::AsyncEventImpl **a1, uint64_t a2, __n128 *a3)
{
  E5RT::AsyncEventImpl *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  E5RT::AsyncEventImpl *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  __int128 *v13;
  E5RT::AsyncEventImpl *v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  E5RT::AsyncEventImpl *v19;
  E5RT::AsyncEventImpl *v20;
  E5RT::AsyncEventImpl *v21;
  E5RT::AsyncEventImpl *v22;
  E5RT::AsyncEventImpl *v23;
  E5RT::AsyncEventImpl *v24;
  E5RT::AsyncEventImpl *v25;
  E5RT::AsyncEventImpl *v26;
  __int128 v27;
  E5RT::AsyncEventImpl *v28;
  E5RT::AsyncEventImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  E5RT::AsyncEventImpl *v35;
  E5RT::AsyncEventImpl *v36;
  E5RT::AsyncEventImpl *v37;
  E5RT::AsyncEventImpl *v38;
  _QWORD *v39;

  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 4;
  v9 = (E5RT::AsyncEventImpl *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    v16 = ((uint64_t)(v6 - (_QWORD)v5) >> 4) + 1;
    if (v16 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v10 - (_QWORD)v5;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v39 = a1 + 2;
    if (v18)
    {
      if (v18 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (E5RT::AsyncEventImpl *)operator new(16 * v18);
    }
    else
    {
      v19 = 0;
    }
    v35 = v19;
    v36 = (E5RT::AsyncEventImpl *)((char *)v19 + 16 * v8);
    v37 = v36;
    v38 = (E5RT::AsyncEventImpl *)((char *)v19 + 16 * v18);
    std::__split_buffer<E5Common::PlatformIdentifier>::push_back(&v35, a3);
    v20 = v36;
    v21 = *a1;
    v22 = v36;
    if (*a1 != v9)
    {
      v23 = v9;
      v24 = v36;
      do
      {
        v22 = (E5RT::AsyncEventImpl *)((char *)v24 - 16);
        *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
        v23 = (E5RT::AsyncEventImpl *)((char *)v23 - 16);
        v24 = (E5RT::AsyncEventImpl *)((char *)v24 - 16);
      }
      while (v23 != v21);
    }
    v36 = v22;
    v25 = a1[1];
    v26 = v37;
    if (v25 != v9)
    {
      do
      {
        v27 = *(_OWORD *)v9;
        v9 = (E5RT::AsyncEventImpl *)((char *)v9 + 16);
        *(_OWORD *)v26 = v27;
        v26 = (E5RT::AsyncEventImpl *)((char *)v26 + 16);
      }
      while (v9 != v25);
      v22 = v36;
      v9 = a1[1];
    }
    v28 = *a1;
    *a1 = v22;
    a1[1] = v26;
    v29 = a1[2];
    a1[2] = v38;
    v37 = v9;
    v38 = v29;
    v35 = v28;
    v36 = v28;
    if (v9 != v28)
    {
      do
      {
        v37 = (E5RT::AsyncEventImpl *)((char *)v9 - 16);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)((char *)v9 - 16));
        v9 = v37;
      }
      while (v37 != v28);
      v9 = v35;
    }
    if (v9)
      operator delete(v9);
    return v20;
  }
  else
  {
    if (v9 != (E5RT::AsyncEventImpl *)v6)
    {
      v11 = (char *)v9 + 16;
      v12 = v6 - 16;
      if (v6 < 0x10)
      {
        a1[1] = (E5RT::AsyncEventImpl *)v6;
        if ((char *)v6 == v11)
        {
LABEL_34:
          v33 = a3->n128_u64[0];
          *((_DWORD *)v9 + 2) = a3->n128_u32[2];
          *(_QWORD *)v9 = v33;
          return v9;
        }
      }
      else
      {
        v13 = (__int128 *)(v6 - 16);
        v14 = a1[1];
        do
        {
          v15 = *v13++;
          *(_OWORD *)v14 = v15;
          v14 = (E5RT::AsyncEventImpl *)((char *)v14 + 16);
        }
        while ((unint64_t)v13 < v6);
        a1[1] = v14;
        if ((char *)v6 == v11)
          goto LABEL_34;
      }
      v30 = 16 * ((uint64_t)(v6 - (_QWORD)v11) >> 4);
      v31 = (uint64_t)v5 + 16 * v8 - 16;
      do
      {
        v32 = *(_QWORD *)(v31 + v30);
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(v31 + v30 + 8);
        *(_QWORD *)v12 = v32;
        v12 -= 16;
        v30 -= 16;
      }
      while (v30);
      goto LABEL_34;
    }
    *(__n128 *)v9 = *a3;
    a1[1] = (E5RT::AsyncEventImpl *)((char *)v9 + 16);
  }
  return v9;
}

void sub_19105B4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<E5Common::PlatformIdentifier>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::~vector[abi:ne180100](void **a1)
{
  if (*a1)
  {
    std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

__n128 std::__split_buffer<E5Common::PlatformIdentifier>::push_back(E5RT::AsyncEventImpl **a1, __n128 *a2)
{
  E5RT::AsyncEventImpl *v4;
  E5RT::AsyncEventImpl *v5;
  E5RT::AsyncEventImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  E5RT::AsyncEventImpl *v13;
  unint64_t v14;
  E5RT::AsyncEventImpl *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 result;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_23;
  v5 = *a1;
  v6 = a1[1];
  if (v6 <= *a1)
  {
    if (v4 == v5)
      v14 = 1;
    else
      v14 = (v4 - v5) >> 3;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (E5RT::AsyncEventImpl *)operator new(16 * v14);
    v16 = (char *)v15 + 16 * (v14 >> 2);
    v17 = (char *)v15 + 16 * v14;
    v18 = v4 - v6;
    if (v4 == v6)
    {
      *a1 = v15;
      a1[1] = (E5RT::AsyncEventImpl *)v16;
      a1[2] = (E5RT::AsyncEventImpl *)v16;
      a1[3] = (E5RT::AsyncEventImpl *)v17;
      if (!v5)
        goto LABEL_20;
    }
    else
    {
      v19 = 0;
      v20 = v18 >> 4;
      v21 = &v16[v18 & 0xFFFFFFFFFFFFFFF0];
      v22 = 16 * v20;
      do
      {
        *(_OWORD *)&v16[v19] = *(_OWORD *)((char *)v6 + v19);
        v19 += 16;
      }
      while (v22 != v19);
      *a1 = v15;
      a1[1] = (E5RT::AsyncEventImpl *)v16;
      a1[2] = (E5RT::AsyncEventImpl *)v21;
      a1[3] = (E5RT::AsyncEventImpl *)v17;
      while (v4 != v6)
      {
        v4 = (E5RT::AsyncEventImpl *)((char *)v4 - 16);
        E5RT::AsyncEventImpl::~AsyncEventImpl(v4);
      }
      if (!v5)
        goto LABEL_20;
    }
    operator delete(v5);
LABEL_20:
    v4 = a1[2];
    goto LABEL_23;
  }
  v7 = (v6 - *a1) >> 4;
  if (v7 >= -1)
    v8 = v7 + 1;
  else
    v8 = v7 + 2;
  v9 = v8 >> 1;
  v10 = -(v8 >> 1);
  if (v6 == v4)
  {
    v13 = (E5RT::AsyncEventImpl *)((char *)v6 - 16 * v9);
  }
  else
  {
    do
    {
      v11 = (_DWORD *)((char *)v6 + 16 * v10);
      v12 = *(_QWORD *)v6;
      v11[2] = *((_DWORD *)v6 + 2);
      *(_QWORD *)v11 = v12;
      v6 = (E5RT::AsyncEventImpl *)((char *)v6 + 16);
    }
    while (v6 != v4);
    v4 = a1[1];
    v13 = (E5RT::AsyncEventImpl *)((char *)v6 + 16 * v10);
  }
  a1[1] = (E5RT::AsyncEventImpl *)((char *)v4 + 16 * v10);
  a1[2] = v13;
  v4 = v13;
LABEL_23:
  result = *a2;
  *(__n128 *)v4 = *a2;
  a1[2] = (E5RT::AsyncEventImpl *)((char *)a1[2] + 16);
  return result;
}

uint64_t std::__split_buffer<E5Common::PlatformIdentifier>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__push_back_slow_path<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>> const&>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void **v21;
  void **v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v28 = (uint64_t)&v7[40 * v3];
  v30 = &v7[40 * v6];
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(v28, a2);
  v8 = v28;
  v10 = (char *)*a1;
  v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    v19 = (char *)a1[1];
  }
  else
  {
    v11 = 0;
    do
    {
      v13 = v28 + v11;
      v14 = &v9[v11];
      v15 = *(_QWORD *)&v9[v11 - 40];
      *((_QWORD *)v14 - 5) = 0;
      *(_QWORD *)(v13 - 40) = v15;
      *(_QWORD *)(v13 - 32) = *(_QWORD *)&v9[v11 - 32];
      *((_QWORD *)v14 - 4) = 0;
      v16 = *(_QWORD *)&v9[v11 - 24];
      *(_QWORD *)(v28 + v11 - 24) = v16;
      v17 = *(_QWORD *)&v9[v11 - 16];
      *(_QWORD *)(v13 - 16) = v17;
      *(_DWORD *)(v13 - 8) = *(_DWORD *)&v9[v11 - 8];
      if (v17)
      {
        v12 = *(_QWORD *)(v16 + 8);
        v18 = *(_QWORD *)(v13 - 32);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v12 >= v18)
            v12 %= v18;
        }
        else
        {
          v12 &= v18 - 1;
        }
        *(_QWORD *)(v15 + 8 * v12) = v28 + v11 - 24;
        *(_QWORD *)&v9[v11 - 24] = 0;
        *(_QWORD *)&v9[v11 - 16] = 0;
      }
      v11 -= 40;
    }
    while (&v9[v11] != v10);
    v19 = (char *)*a1;
    v9 = (char *)a1[1];
    v8 = v28 + v11;
  }
  *a1 = (void *)v8;
  a1[1] = (void *)(v28 + 40);
  a1[2] = v30;
  if (v9 == v19)
  {
    if (v9)
LABEL_24:
      operator delete(v9);
  }
  else
  {
    do
    {
      v21 = (void **)(v9 - 40);
      v29 = v9 - 40;
      v22 = (void **)*((_QWORD *)v9 - 3);
      if (v22)
      {
        do
        {
          while (1)
          {
            v23 = (void **)*v22;
            v24 = (std::__shared_weak_count *)v22[6];
            if (v24)
            {
              p_shared_owners = (unint64_t *)&v24->__shared_owners_;
              do
                v26 = __ldaxr(p_shared_owners);
              while (__stlxr(v26 - 1, p_shared_owners));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
            if (*((char *)v22 + 39) < 0)
              break;
            operator delete(v22);
            v22 = v23;
            if (!v23)
              goto LABEL_37;
          }
          operator delete(v22[2]);
          operator delete(v22);
          v22 = v23;
        }
        while (v23);
      }
LABEL_37:
      v27 = *v21;
      *v21 = 0;
      if (v27)
        operator delete(v27);
      v9 = v29;
    }
    while (v29 != v19);
    v9 = v19;
    if (v19)
      goto LABEL_24;
  }
  return v28 + 40;
}

void sub_19105B96C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  void **v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    v6 = *(void ***)(i - 24);
    if (v6)
    {
      do
      {
        while (1)
        {
          v7 = (void **)*v6;
          v8 = (std::__shared_weak_count *)v6[6];
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          if (*((char *)v6 + 39) < 0)
            break;
          operator delete(v6);
          v6 = v7;
          if (!v7)
            goto LABEL_14;
        }
        operator delete(v6[2]);
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
LABEL_14:
    v11 = *v5;
    *v5 = 0;
    if (v11)
      operator delete(v11);
  }
}

void std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;

  v4 = *(_QWORD **)(a1 + 8);
  while (v4 != a2)
  {
    v5 = (void **)*(v4 - 3);
    if (v5)
    {
      do
      {
        while (1)
        {
          v6 = (void **)*v5;
          v7 = (std::__shared_weak_count *)v5[6];
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          if (*((char *)v5 + 39) < 0)
            break;
          operator delete(v5);
          v5 = v6;
          if (!v6)
            goto LABEL_14;
        }
        operator delete(v5[2]);
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
LABEL_14:
    v11 = (void *)*(v4 - 5);
    v4 -= 5;
    v10 = v11;
    *v4 = 0;
    if (v11)
      operator delete(v10);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_19105BB70(E5RT::ExecutionStreamOperationInternal **a1, _QWORD *a2)
{
  _QWORD *i;
  E5RT::IOPort *v5;
  std::runtime_error *exception;

  E5DB::ReshapeIfNeeded(a1, (uint64_t)a2);
  E5DB::PrepareEsOpInputAndInOutPorts(a1, a2, 0);
  for (i = *(_QWORD **)(E5RT::ExecutionStreamOperation::GetOutputPorts(a1) + 16); i; i = (_QWORD *)*i)
  {
    v5 = (E5RT::IOPort *)i[5];
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found null pointer to an output port.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    E5RT::AllocateAndBindMemory(v5, 0);
  }
}

void sub_19105BBFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

E5RT::ExecutionStream *sub_19105BC10(_QWORD *a1)
{
  E5RT::ExecutionStream *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  E5RT::ExecutionStream *result;
  __int128 v10;
  E5RT::ExecutionStream *v11;

  E5RT::ExecutionStream::CreateExecutionStream(&v11);
  v2 = v11;
  v3 = a1[1];
  *(_QWORD *)&v10 = *a1;
  *((_QWORD *)&v10 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  E5RT::ExecutionStream::EncodeOperation((uint64_t)v2, &v10);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStreamImpl **)v11);
  E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStreamImpl **)v11);
  result = v11;
  v11 = 0;
  if (result)
    return (E5RT::ExecutionStream *)(*(uint64_t (**)(E5RT::ExecutionStream *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19105BCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  void **v8;
  unint64_t *v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void **v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v6 = a1[1];
  if (!v6)
    goto LABEL_17;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (void **)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 2), (const std::string *)(a2 + 2));
      v10 = (void *)a2[5];
      v9 = (unint64_t *)a2[6];
      if (v9)
      {
        v11 = v9 + 1;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = (std::__shared_weak_count *)v8[6];
      v8[5] = v10;
      v8[6] = v9;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (void **)*v8;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
      v8 = v16;
      if (!v16)
        goto LABEL_17;
    }
    do
    {
      while (1)
      {
        v17 = (void **)*v8;
        v18 = (std::__shared_weak_count *)v8[6];
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (*((char *)v8 + 39) < 0)
          break;
        operator delete(v8);
        v8 = v17;
        if (!v17)
          return;
      }
      operator delete(v8[2]);
      operator delete(v8);
      v8 = v17;
    }
    while (v17);
  }
  else
  {
LABEL_17:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19105BE74(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_19105BE90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *inserted;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  char v16;

  v4 = (_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  v11 = (int8x8_t)a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v11)
      v12 %= *(_QWORD *)&v11;
  }
  else
  {
    v12 &= *(_QWORD *)&v11 - 1;
  }
  if (!inserted)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_25;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
LABEL_24:
    *(_QWORD *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(_QWORD *)a2 = *inserted;
  *inserted = a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
    if (v14 != v12)
      goto LABEL_24;
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>((uint64_t)a1, a2, (uint64_t)v4);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__node_insert_multi(a1, v4[0]);
}

void sub_19105C034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p)
{
  char *v11;

  v11 = __p;
  __p = 0;
  if (v11)
    sub_19105D158((uint64_t)&__p, v11);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t result;
  char v16;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x38uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = (uint64_t *)(v6 + 16);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 4) = *(_QWORD *)(a2 + 16);
  }
  v9 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v7 + 6) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_BYTE *)(a3 + 16) = 1;
  v12 = v7[39];
  if (v12 >= 0)
    v13 = v8;
  else
    v13 = (uint64_t *)*((_QWORD *)v7 + 2);
  if (v12 >= 0)
    v14 = v7[39];
  else
    v14 = *((_QWORD *)v7 + 3);
  result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v13, v14);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_19105C118(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19105C130(E5RT::ExecutionStreamOperationInternal ***a1, _QWORD *a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  E5RT::ExecutionStreamOperationInternal **v8;
  E5RT::ExecutionStreamOperationInternal **v9;
  E5RT::ExecutionStreamOperationInternal **v10;
  std::string __p;
  E5RT::ExecutionStreamOperationInternal **v12;
  __int128 v13;
  char v14;
  std::string v15;

  v13 = *a4;
  v14 = 1;
  E5RT::GetE5PathFromCompositeBundle(a3, &v13, &v15);
  if (v14)
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v13);
  strcpy((char *)&__p, "Precompiled Compute op");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 22;
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp(&__p, (E5RT::SharedResourceManager *)&v15, a5, 1, 1, &v12);
  v8 = v12;
  *a1 = v12;
  if (v8)
  {
    v9 = (E5RT::ExecutionStreamOperationInternal **)operator new();
    v10 = v12;
    *v9 = (E5RT::ExecutionStreamOperationInternal *)&unk_1E2DC32E0;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = (E5RT::ExecutionStreamOperationInternal *)v10;
    a1[1] = v9;
    v12 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  a1[1] = 0;
  v12 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_6:
  sub_19105BB70(v8, a2);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_19105C26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a24 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a19);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_19105C310(_QWORD **a1)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  E5RT::ExecutionStreamOperationInternal *v6;
  unsigned int v7;
  _QWORD *i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const char *v29;
  void *v30;
  void *v31;
  uint64_t OpName;
  uint64_t v33;
  void *v34;
  void *v35;
  void **v36;
  void **v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  void **v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error *exception;
  std::string v51;
  void *v52[2];
  void *__p[2];
  int v54;
  void *v55[2];
  void *v56[2];
  int v57;
  E5RT::ExecutionStreamOperationInternal *v58[2];
  _QWORD v59[4];
  _QWORD v60[2];
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(*a1[1] + 16 * **a1);
  *(_OWORD *)v58 = v2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v2 + 1);
  if (*((_QWORD *)&v2 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (E5RT::ExecutionStreamOperationInternal *)v2;
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 32))(v2);
  if ((*(unsigned int (**)(E5RT::ExecutionStreamOperationInternal *))(*(_QWORD *)v6 + 32))(v6) - 6 <= 0xFFFFFFFC)
  {
    *(_OWORD *)v55 = 0u;
    *(_OWORD *)v56 = 0u;
    v57 = 1065353216;
    *(_OWORD *)v52 = 0u;
    *(_OWORD *)__p = 0u;
    v54 = 1065353216;
    for (i = *(_QWORD **)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(v6) + 16); i; i = (_QWORD *)*i)
    {
      v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1[2], (uint64_t)(i + 2));
      if (v9)
      {
        v10 = (uint64_t)(v9 + 5);
        v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a1[4], (uint64_t)(v9 + 5));
        if (!v11)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &v51);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v51.__r_.__value_.__r.__words[0] = v10;
        v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v55, v10, (uint64_t)&std::piecewise_construct, (__int128 **)&v51);
        v14 = i[5];
        v13 = i[6];
        if (v13)
        {
          v15 = (unint64_t *)(v13 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v17 = (std::__shared_weak_count *)v12[6];
        v12[5] = v14;
        v12[6] = v13;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v51.__r_.__value_.__r.__words[0] = v10;
        v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v52, v10, (uint64_t)&std::piecewise_construct, (__int128 **)&v51);
        v22 = v11[5];
        v21 = v11[6];
        if (v21)
        {
          v23 = (unint64_t *)(v21 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = (std::__shared_weak_count *)v20[6];
        v20[5] = v22;
        v20[6] = v21;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
    }
    E5DB::ComputePsnr((uint64_t)v52, v55, (uint64_t *)&v51);
    v28 = (void *)*a1[3];
    v59[0] = CFSTR("op type");
    if (v7 <= 0xE)
      v29 = EnumNamesOpCode(void)::names[v7];
    else
      v29 = "";
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v60[0] = v30;
    v59[1] = CFSTR("op name");
    v31 = (void *)MEMORY[0x1E0CB3940];
    OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(v58[0]);
    if (*(char *)(OpName + 23) >= 0)
      v33 = OpName;
    else
      v33 = *(_QWORD *)OpName;
    objc_msgSend(v31, "stringWithUTF8String:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v60[1] = v34;
    v61 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    v59[2] = CFSTR("average");
    v59[3] = CFSTR("all outputs");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, v59, 4);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "addObject:", v35);

    v36 = (void **)__p[0];
    if (__p[0])
    {
      do
      {
        while (1)
        {
          v37 = (void **)*v36;
          v38 = (std::__shared_weak_count *)v36[6];
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          if (*((char *)v36 + 39) < 0)
            break;
          operator delete(v36);
          v36 = v37;
          if (!v37)
            goto LABEL_42;
        }
        operator delete(v36[2]);
        operator delete(v36);
        v36 = v37;
      }
      while (v37);
    }
LABEL_42:
    v41 = v52[0];
    v52[0] = 0;
    if (v41)
      operator delete(v41);
    v42 = (void **)v56[0];
    if (v56[0])
    {
      do
      {
        while (1)
        {
          v43 = (void **)*v42;
          v44 = (std::__shared_weak_count *)v42[6];
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          if (*((char *)v42 + 39) < 0)
            break;
          operator delete(v42);
          v42 = v43;
          if (!v43)
            goto LABEL_54;
        }
        operator delete(v42[2]);
        operator delete(v42);
        v42 = v43;
      }
      while (v43);
    }
LABEL_54:
    v47 = v55[0];
    v55[0] = 0;
    if (v47)
      operator delete(v47);
    v3 = (std::__shared_weak_count *)v58[1];
  }
  ++**a1;
  if (v3)
  {
    v48 = (unint64_t *)&v3->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19105C7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_19105C890(_QWORD *a1, void *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t *v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  uint64_t *v29;
  void *v30;
  void *v31;
  uint64_t *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[3];
  _QWORD v42[4];

  v42[3] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a5;
  v11 = v10;
  if (v10)
  {
    v41[0] = CFSTR("average");
    v41[1] = CFSTR("all outputs");
    v12 = a1[1];
    v42[0] = *a1;
    v42[1] = v12;
    v41[2] = CFSTR("segments");
    v42[2] = v10;
    v13 = v41;
    v14 = v42;
    v15 = 3;
  }
  else
  {
    v39[0] = CFSTR("average");
    v39[1] = CFSTR("all outputs");
    v16 = a1[1];
    v40[0] = *a1;
    v40[1] = v16;
    v13 = v39;
    v14 = v40;
    v15 = 2;
  }
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, v15);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a3 + 23) >= 0)
    v17 = a3;
  else
    v17 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKey:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19
    && (*((char *)a4 + 23) >= 0 ? (v20 = a4) : (v20 = (uint64_t *)*a4),
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v20),
        v21 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v19, "objectForKey:", v21),
        v22 = (void *)objc_claimAutoreleasedReturnValue(),
        v21,
        v22))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "addObject:", v33);
    if (*((char *)a4 + 23) >= 0)
      v24 = a4;
    else
      v24 = (uint64_t *)*a4;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v25;
    v38 = v23;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (*((char *)a3 + 23) >= 0)
      v27 = a3;
    else
      v27 = (uint64_t *)*a3;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setObject:forKey:", v26, v28);

  }
  else
  {
    if (*((char *)a4 + 23) >= 0)
      v29 = a4;
    else
      v29 = (uint64_t *)*a4;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v33;
    v35 = v30;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v34, 1);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = v31;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (*((char *)a3 + 23) >= 0)
      v32 = a3;
    else
      v32 = (uint64_t *)*a3;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v32);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setObject:forKey:", v22, v23);
  }

}

void sub_19105CB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::IRFunction  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A86FB6)
    return a1 + 24;
  if (((v3 & 0x8000000191A86FB6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A86FB6))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A86FB6 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_19105CCF4()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_19105CD08(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DD0D68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_19105CD50(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DD0D68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19105CD80(uint64_t a1)
{
  sub_19105C310((_QWORD **)(a1 + 8));
}

uint64_t sub_19105CD88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB12_GLOBAL__N_130ComputeOutputsAndIntermediatesERKNSt3__113unordered_mapINS1_12basic_stringIc"
                     "NS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrIN4E5RT6IOPortEEENS1_4hashIS8_EENS1_8equal"
                     "_toIS8_EENS6_INS1_4pairIKS8_SC_EEEEEESN_RSI_SO_N8E5Common18PlatformIdentifierESO_P19NSMutableDictionaryE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB12_GLOBAL__N_130ComputeOutputsAndIntermediatesERKNSt3__113unordered_mapINS1_12bas"
                                "ic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrIN4E5RT6IOPortEEENS1"
                                "_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SC_EEEEEESN_RSI_SO_N8E5Common18Platfor"
                                "mIdentifierESO_P19NSMutableDictionaryE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB12_GLOBAL__N_130ComputeOutputsAndIntermediatesERKNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrIN4E5RT6IOPortEEENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SC_EEEEEESN_RSI_SO_N8E5Common18PlatformIdentifierESO_P19NSMutableDictionaryE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB12_GLOBAL__N_130ComputeOutputsAndIntermediatesERKNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrIN4E5RT6IOPortEEENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SC_EEEEEESN_RSI_SO_N8E5Common18PlatformIdentifierESO_P19NSMutableDictionaryE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19105CDF4()
{
  return &unk_1E2DD0DC8;
}

void E5DB::RegressionTestConfigParser::~RegressionTestConfigParser(E5DB::RegressionTestConfigParser *this)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v3 = (void **)((char *)this + 40);
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 40, v2);
    operator delete(*v3);
  }
  v4 = (void **)*((_QWORD *)this + 2);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (void **)*v4;
        v6 = (std::__shared_weak_count *)v4[6];
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        if (*((char *)v4 + 39) < 0)
          break;
        operator delete(v4);
        v4 = v5;
        if (!v5)
          goto LABEL_13;
      }
      operator delete(v4[2]);
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
LABEL_13:
  v9 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v9)
    operator delete(v9);
}

_QWORD *std::vector<E5Common::PlatformIdentifier>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  char *v6;
  size_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[16 * (v5 >> 4)];
    v7 = v5 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v6, v4, v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_19105CF50(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    sub_19105D1C0((uint64_t)(v1 + 1));
  _Unwind_Resume(exception_object);
}

void sub_19105CF74()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_19105CF88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DD0E68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19105CFC8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DD0E68;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19105CFF0(uint64_t a1)
{
  E5DB::PsnrCheckCommand::ExecutePriv(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(char ***)(a1 + 24));
}

uint64_t sub_19105D000(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB16PsnrCheckCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_"
                     "traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB16PsnrCheckCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIc"
                                "NS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB16PsnrCheckCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB16PsnrCheckCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19105D06C()
{
  return &unk_1E2DD0EC8;
}

uint64_t OUTLINED_FUNCTION_29(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_26()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_19105D0A0(uint64_t a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a1 - 16));
}

void sub_19105D0A8(void *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  operator delete(a1);
}

void sub_19105D0B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v4;
  char v5;
  void **v6;

  v2 = OUTLINED_FUNCTION_29(a1);
  if (!v5)
  {
    v6 = v3;
    do
      sub_19105D0A0(v2);
    while (v2 != v1);
    v4 = *v6;
  }
  sub_19105D0A8(v4);
  OUTLINED_FUNCTION_10();
}

void sub_19105D0EC(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  do
  {
    v2 = *(char **)__p;
    v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        OUTLINED_FUNCTION_26();
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (__p[39] < 0)
      operator delete(*((void **)__p + 2));
    operator delete(__p);
    __p = v2;
  }
  while (v2);
  OUTLINED_FUNCTION_10();
}

void sub_19105D158(uint64_t a1, char *__p)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        OUTLINED_FUNCTION_26();
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (__p[39] < 0)
      operator delete(*((void **)__p + 2));
  }
  operator delete(__p);
}

void sub_19105D1C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  char v6;
  void **v7;

  v3 = OUTLINED_FUNCTION_29(a1);
  if (!v6)
  {
    v7 = v4;
    do
      sub_19105D0A0(v3);
    while (v3 != v1);
    v5 = *v7;
  }
  *v2 = v1;
  operator delete(v5);
}

double _ZN4E5DB18ComputePsnrSurfaceIDF16_EEdRKN4E5RT6IOPortES4_(E5RT::IOPort *a1, E5RT::IOPort *a2)
{
  void *v4;
  void (**v5)(E5RT::IOSurfaceObject *__hidden);
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  E5RT::MemoryObject *BaseAddress;
  size_t Width;
  size_t Height;
  E5RT *PixelFormat;
  unsigned int v13;
  unsigned int v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void (**v22)(E5RT::IOSurfaceObject *__hidden);
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  size_t v27;
  size_t v28;
  E5RT *v29;
  unsigned int v30;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  E5RT::MemoryObject *v38;
  size_t v39;
  void *v40;
  double v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  std::runtime_error *exception;
  std::runtime_error *v47;
  std::runtime_error *v48;
  _QWORD v49[2];
  void *v50[2];
  void *__p[2];
  int v52;
  E5RT::MemoryObject *v53;
  size_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v53 = (E5RT::MemoryObject *)0xB0000000ALL;
  *(_OWORD *)v50 = 0u;
  *(_OWORD *)__p = 0u;
  v52 = 1065353216;
  std::__hash_table<E5RT::SurfaceFormat,std::hash<E5RT::SurfaceFormat>,std::equal_to<E5RT::SurfaceFormat>,std::allocator<E5RT::SurfaceFormat>>::__emplace_unique_key_args<E5RT::SurfaceFormat,E5RT::SurfaceFormat const&>((uint64_t)v50, (unsigned int *)&v53, &v53);
  std::__hash_table<E5RT::SurfaceFormat,std::hash<E5RT::SurfaceFormat>,std::equal_to<E5RT::SurfaceFormat>,std::allocator<E5RT::SurfaceFormat>>::__emplace_unique_key_args<E5RT::SurfaceFormat,E5RT::SurfaceFormat const&>((uint64_t)v50, (unsigned int *)&v53 + 1, (_DWORD *)&v53 + 1);
  E5RT::IOPort::GetMemoryObject(a1, &v53);
  v4 = E5RT::MemoryObject::Surface(v53);
  v5 = E5RT::SurfaceObject::GetHandle<__IOSurface *>((uint64_t)v4);
  v6 = (std::__shared_weak_count *)v54;
  if (v54)
  {
    v7 = (unint64_t *)(v54 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  BaseAddress = (E5RT::MemoryObject *)IOSurfaceGetBaseAddress((IOSurfaceRef)v5);
  Width = IOSurfaceGetWidth((IOSurfaceRef)v5);
  Height = IOSurfaceGetHeight((IOSurfaceRef)v5);
  PixelFormat = (E5RT *)IOSurfaceGetPixelFormat((IOSurfaceRef)v5);
  v13 = E5RT::CVPB4ccToSurfaceFormat(PixelFormat);
  if (!v50[1])
    goto LABEL_67;
  v14 = v13;
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)v50[1]);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = v13;
    if (v50[1] <= (void *)v13)
      v16 = v13 % (unint64_t)v50[1];
  }
  else
  {
    v16 = (LODWORD(v50[1]) - 1) & v13;
  }
  v17 = (uint64_t **)*((_QWORD *)v50[0] + v16);
  if (!v17 || (v18 = *v17) == 0)
  {
LABEL_67:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Port surface format not supported yet.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      v20 = v18[1];
      if (v20 == v13)
      {
        if (*((_DWORD *)v18 + 4) == v13)
          goto LABEL_26;
      }
      else if ((v20 & ((uint64_t)v50[1] - 1)) != v16)
      {
        goto LABEL_67;
      }
      v18 = (uint64_t *)*v18;
      if (!v18)
        goto LABEL_67;
    }
  }
  while (1)
  {
    v19 = v18[1];
    if (v19 == v13)
      break;
    if ((void *)v19 >= v50[1])
      v19 %= (unint64_t)v50[1];
    if (v19 != v16)
      goto LABEL_67;
LABEL_16:
    v18 = (uint64_t *)*v18;
    if (!v18)
      goto LABEL_67;
  }
  if (*((_DWORD *)v18 + 4) != v13)
    goto LABEL_16;
LABEL_26:
  E5RT::IOPort::GetMemoryObject(a2, &v53);
  v21 = E5RT::MemoryObject::Surface(v53);
  v22 = E5RT::SurfaceObject::GetHandle<__IOSurface *>((uint64_t)v21);
  v23 = (std::__shared_weak_count *)v54;
  if (v54)
  {
    v24 = (unint64_t *)(v54 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = IOSurfaceGetBaseAddress((IOSurfaceRef)v22);
  v27 = IOSurfaceGetWidth((IOSurfaceRef)v22);
  v28 = IOSurfaceGetHeight((IOSurfaceRef)v22);
  v29 = (E5RT *)IOSurfaceGetPixelFormat((IOSurfaceRef)v22);
  v30 = E5RT::CVPB4ccToSurfaceFormat(v29);
  if (!v50[1])
    goto LABEL_68;
  v31 = (uint8x8_t)vcnt_s8((int8x8_t)v50[1]);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    v32 = v30;
    if (v50[1] <= (void *)v30)
      v32 = v30 % (unint64_t)v50[1];
  }
  else
  {
    v32 = (LODWORD(v50[1]) - 1) & v30;
  }
  v33 = (uint64_t **)*((_QWORD *)v50[0] + v32);
  if (!v33 || (v34 = *v33) == 0)
  {
LABEL_68:
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "NoisyPort surface format not supported yet.");
    goto LABEL_69;
  }
  if (v31.u32[0] < 2uLL)
  {
    while (1)
    {
      v36 = v34[1];
      if (v36 == v30)
      {
        if (*((_DWORD *)v34 + 4) == v30)
          goto LABEL_51;
      }
      else if ((v36 & ((uint64_t)v50[1] - 1)) != v32)
      {
        goto LABEL_68;
      }
      v34 = (uint64_t *)*v34;
      if (!v34)
        goto LABEL_68;
    }
  }
  while (2)
  {
    v35 = v34[1];
    if (v35 != v30)
    {
      if ((void *)v35 >= v50[1])
        v35 %= (unint64_t)v50[1];
      if (v35 != v32)
        goto LABEL_68;
      goto LABEL_41;
    }
    if (*((_DWORD *)v34 + 4) != v30)
    {
LABEL_41:
      v34 = (uint64_t *)*v34;
      if (!v34)
        goto LABEL_68;
      continue;
    }
    break;
  }
LABEL_51:
  if (v14 != v30)
  {
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Port and NoisyPort surface formats are different.");
LABEL_69:
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v14 == 10)
  {
    v37 = 1;
  }
  else
  {
    if (v14 != 11)
    {
      v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v48, "Port surface format not supported yet.");
      __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v37 = 4;
  }
  if (Height * Width * v37)
    v38 = BaseAddress;
  else
    v38 = 0;
  v53 = v38;
  v54 = Height * Width * v37;
  v39 = v28 * v27 * v37;
  if (v39)
    v40 = v26;
  else
    v40 = 0;
  v49[0] = v40;
  v49[1] = v39;
  v41 = _ZN4E5DB11ComputePsnrIDF16_DF16_EEdRKN4E5RT4SpanIKT_Lm18446744073709551615EEERKNS2_IKT0_Lm18446744073709551615EEE(&v53, v49);
  v42 = __p[0];
  if (__p[0])
  {
    do
    {
      v43 = (_QWORD *)*v42;
      operator delete(v42);
      v42 = v43;
    }
    while (v43);
  }
  v44 = v50[0];
  v50[0] = 0;
  if (v44)
    operator delete(v44);
  return v41;
}

void sub_19105D6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19105D6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_19105D7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19105D804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

long double _ZN4E5DB11ComputePsnrIDF16_DF16_EEdRKN4E5RT4SpanIKT_Lm18446744073709551615EEERKNS2_IKT0_Lm18446744073709551615EEE(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float v6;
  double v7;
  char *v21;
  std::runtime_error *exception;
  std::runtime_error *v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;

  v2 = a1[1];
  if (!v2)
  {
    v21 = "Data buffer ";
    goto LABEL_11;
  }
  v4 = a2[1];
  if (!v4)
  {
    v21 = "NoisyData buffer ";
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v37, v21);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("is empty.", (const void **)&v37.__r_.__value_.__l.__data_, &v36);
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v2 != v4)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v34, a1[1]);
    v25 = std::string::insert(&v34, 0, "Found spans with unequal sizes data.Size(), noisyData.Size() = ");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v35, ", ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v33, a2[1]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v33;
    else
      v29 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      size = v33.__r_.__value_.__l.__size_;
    v31 = std::string::append(&v36, (const std::string::value_type *)v29, size);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v24, &v37);
    __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = 0;
  v6 = 0.0;
  v7 = 0.0;
  do
  {
    _H2 = *(_WORD *)(*a1 + 2 * v5);
    _H3 = *(_WORD *)(*a2 + 2 * v5);
    __asm
    {
      FCVT            S3, H3
      FCVT            S2, H2
    }
    _S3 = _S2 - _S3;
    __asm
    {
      FCVT            H3, S3
      FCVT            S3, H3
    }
    v7 = v7 + (float)(_S3 * _S3);
    _S2 = fabsf(_S2);
    __asm
    {
      FCVT            H2, S2
      FCVT            S2, H2
    }
    if (v6 < _S2)
      v6 = _S2;
    ++v5;
  }
  while (v2 != v5);
  return log10((v6 + 0.00001) / (sqrt(v7 / (double)v2) + 1.0e-10)) * 20.0;
}

void sub_19105DA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if (a14 < 0)
    {
LABEL_5:
      operator delete(__p);
      if (a33 < 0)
      {
LABEL_8:
        operator delete(a28);
        if (a26 < 0)
        {
LABEL_11:
          operator delete(a21);
          if ((a20 & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_15;
        }
LABEL_14:
        if ((a20 & 0x80000000) == 0)
        {
LABEL_12:
          if (!v34)
LABEL_17:
            _Unwind_Resume(a1);
LABEL_16:
          __cxa_free_exception(v33);
          _Unwind_Resume(a1);
        }
LABEL_15:
        operator delete(a15);
        if ((v34 & 1) == 0)
          goto LABEL_17;
        goto LABEL_16;
      }
LABEL_10:
      if (a26 < 0)
        goto LABEL_11;
      goto LABEL_14;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if (a33 < 0)
    goto LABEL_8;
  goto LABEL_10;
}

long double E5DB::ComputePsnr<float,float>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float v6;
  double v7;
  float v8;
  float v9;
  char *v11;
  std::runtime_error *exception;
  std::runtime_error *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;

  v2 = a1[1];
  if (!v2)
  {
    v11 = "Data buffer ";
    goto LABEL_11;
  }
  v4 = a2[1];
  if (!v4)
  {
    v11 = "NoisyData buffer ";
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v27, v11);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("is empty.", (const void **)&v27.__r_.__value_.__l.__data_, &v26);
    std::runtime_error::runtime_error(exception, &v26);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v2 != v4)
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v24, a1[1]);
    v15 = std::string::insert(&v24, 0, "Found spans with unequal sizes data.Size(), noisyData.Size() = ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v25, ", ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v23, a2[1]);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v23;
    else
      v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v26, (const std::string::value_type *)v19, size);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v14, &v27);
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = 0;
  v6 = 0.0;
  v7 = 0.0;
  do
  {
    v8 = *(float *)(*a1 + 4 * v5);
    v7 = v7 + (float)((float)(v8 - *(float *)(*a2 + 4 * v5)) * (float)(v8 - *(float *)(*a2 + 4 * v5)));
    v9 = fabsf(v8);
    if (v9 > v6)
      v6 = v9;
    ++v5;
  }
  while (v2 != v5);
  return log10((v6 + 0.00001) / (sqrt(v7 / (double)v2) + 1.0e-10)) * 20.0;
}

void sub_19105DD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if (a14 < 0)
    {
LABEL_5:
      operator delete(__p);
      if (a33 < 0)
      {
LABEL_8:
        operator delete(a28);
        if (a26 < 0)
        {
LABEL_11:
          operator delete(a21);
          if ((a20 & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_15;
        }
LABEL_14:
        if ((a20 & 0x80000000) == 0)
        {
LABEL_12:
          if (!v34)
LABEL_17:
            _Unwind_Resume(a1);
LABEL_16:
          __cxa_free_exception(v33);
          _Unwind_Resume(a1);
        }
LABEL_15:
        operator delete(a15);
        if ((v34 & 1) == 0)
          goto LABEL_17;
        goto LABEL_16;
      }
LABEL_10:
      if (a26 < 0)
        goto LABEL_11;
      goto LABEL_14;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if (a33 < 0)
    goto LABEL_8;
  goto LABEL_10;
}

double E5DB::ComputePsnr(E5DB *this, const E5RT::IOPort *a2, const E5RT::IOPort *a3)
{
  E5RT::TensorDescriptor *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  E5RT::TensorDescriptor *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  E5RT::BufferObject *v13;
  uint64_t DataSpan;
  unint64_t v15;
  E5RT::OperandDescriptor *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  E5RT::BufferObject *v20;
  uint64_t v21;
  unint64_t v22;
  E5RT::MemoryObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  double v27;
  std::runtime_error *exception;
  E5RT::MemoryObject *v30;
  std::__shared_weak_count *v31;
  E5RT::MemoryObject *v32;
  std::__shared_weak_count *v33;
  E5RT::OperandDescriptor *v34;
  std::__shared_weak_count *v35;
  E5RT::OperandDescriptor *v36;
  std::__shared_weak_count *v37;
  _BYTE v38[16];

  E5RT::IOPort::GetPortDescriptor(this, &v36);
  v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v36);
  E5RT::TensorDescriptor::GetTensorDataType(v5, (E5RT::TensorDataType *)v38);
  v6 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  E5RT::IOPort::GetPortDescriptor(a2, &v34);
  v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v34);
  E5RT::TensorDescriptor::GetTensorDataType(v9, (E5RT::TensorDataType *)&v36);
  v10 = v35;
  if (v35)
  {
    v11 = (unint64_t *)&v35->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)v38) || !E5RT::TensorDataType::IsType<float>((uint64_t)&v36))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found non-float tensors, which is not supported.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::IOPort::GetMemoryObject(this, &v32);
  v13 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v32);
  DataSpan = E5RT::BufferObject::GetDataSpan(v13);
  if (v15 >= 4)
    v16 = (E5RT::OperandDescriptor *)DataSpan;
  else
    v16 = 0;
  v34 = v16;
  v35 = (std::__shared_weak_count *)(v15 >> 2);
  v17 = v33;
  if (v33)
  {
    v18 = (unint64_t *)&v33->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  E5RT::IOPort::GetMemoryObject(a2, &v30);
  v20 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v30);
  v21 = E5RT::BufferObject::GetDataSpan(v20);
  if (v22 >= 4)
    v23 = (E5RT::MemoryObject *)v21;
  else
    v23 = 0;
  v32 = v23;
  v33 = (std::__shared_weak_count *)(v22 >> 2);
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = E5DB::ComputePsnr<float,float>(&v34, &v32);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v36);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v38);
  return v27;
}

void sub_19105E0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va1);
  _Unwind_Resume(a1);
}

uint64_t E5DB::ComputePsnr@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  BOOL v4;
  void *v7;
  uint64_t *v8;
  double v9;
  double v10;
  _QWORD *v11;
  uint64_t *v12;
  E5RT::IOPort *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  E5RT::SurfaceDescriptor *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  E5RT::SurfaceDescriptor *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  E5RT::TensorDescriptor *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  E5RT::TensorDescriptor *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  const E5RT::IOPort *v38;
  double v39;
  const E5RT::IOPort *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int SurfaceFormat;
  const E5RT::IOPort *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  const E5RT::IOPort *v50;
  unint64_t *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t result;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *exception;
  __int128 v62;
  __int128 v63;
  E5RT::OperandDescriptor *v64;
  std::__shared_weak_count *v65;
  E5RT::OperandDescriptor *v66;
  std::__shared_weak_count *v67;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    v4 = v3 == a2[3];
  else
    v4 = 0;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found empty ports or with unequal sizes.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(uint64_t **)(a1 + 16);
  if (v8)
  {
    v9 = (float)(1.0 / (float)v3);
    v10 = 0.0;
    while (1)
    {
      v11 = v8 + 2;
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, (uint64_t)(v8 + 2));
      if (!v12)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v13 = (E5RT::IOPort *)v8[5];
      if (!v13 || !v12[5])
      {
        v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Found a null pointers to ports.");
        __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      E5RT::IOPort::GetPortDescriptor(v13, &v66);
      v14 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v66);
      v15 = v67;
      if (v67)
      {
        p_shared_owners = (unint64_t *)&v67->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v12[5], &v66);
      v18 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v66);
      v19 = v67;
      if (v67)
      {
        v20 = (unint64_t *)&v67->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v8[5], &v66);
      v22 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v66);
      v23 = v67;
      if (v67)
      {
        v24 = (unint64_t *)&v67->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v12[5], &v66);
      v26 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v66);
      v27 = v67;
      if (!v67)
        goto LABEL_30;
      v28 = (unint64_t *)&v67->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if (!v14)
          goto LABEL_54;
      }
      else
      {
LABEL_30:
        if (!v14)
          goto LABEL_54;
      }
      if (v18)
      {
        E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v8[5], &v64);
        v30 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v64);
        E5RT::TensorDescriptor::GetTensorDataType(v30, (E5RT::TensorDataType *)&v66);
        v31 = v65;
        if (v65)
        {
          v32 = (unint64_t *)&v65->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v12[5], &v63);
        v34 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v63);
        E5RT::TensorDescriptor::GetTensorDataType(v34, (E5RT::TensorDataType *)&v64);
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
        if (*((_QWORD *)&v63 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if (E5RT::TensorDataType::IsType<float>((uint64_t)&v66) && E5RT::TensorDataType::IsType<float>((uint64_t)&v64))
        {
          v39 = E5DB::ComputePsnr((E5DB *)v8[5], (const E5RT::IOPort *)v12[5], v38);
LABEL_72:
          E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v64);
          E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v66);
          goto LABEL_73;
        }
        if (E5RT::TensorDataType::IsType<float>((uint64_t)&v66) && !E5RT::TensorDataType::IsType<float>((uint64_t)&v64))
        {
          E5DB::MakeFloatPort((E5DB *)v12[5], &v63);
          v39 = E5DB::ComputePsnr((E5DB *)v8[5], (const E5RT::IOPort *)v63, v50);
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
          if (!*((_QWORD *)&v63 + 1))
            goto LABEL_72;
          v51 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
          do
            v43 = __ldaxr(v51);
          while (__stlxr(v43 - 1, v51));
        }
        else if (E5RT::TensorDataType::IsType<float>((uint64_t)&v66)
               || !E5RT::TensorDataType::IsType<float>((uint64_t)&v64))
        {
          E5DB::MakeFloatPort((E5DB *)v8[5], &v63);
          E5DB::MakeFloatPort((E5DB *)v12[5], &v62);
          v39 = E5DB::ComputePsnr((E5DB *)v63, (const E5RT::IOPort *)v62, v45);
          v46 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
          if (!*((_QWORD *)&v62 + 1))
            goto LABEL_63;
          v47 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
            v41 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
            if (!*((_QWORD *)&v63 + 1))
              goto LABEL_72;
          }
          else
          {
LABEL_63:
            v41 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
            if (!*((_QWORD *)&v63 + 1))
              goto LABEL_72;
          }
          v49 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v49);
          while (__stlxr(v43 - 1, v49));
        }
        else
        {
          E5DB::MakeFloatPort((E5DB *)v8[5], &v63);
          v39 = E5DB::ComputePsnr((E5DB *)v63, (const E5RT::IOPort *)v12[5], v40);
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
          if (!*((_QWORD *)&v63 + 1))
            goto LABEL_72;
          v42 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
        }
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        goto LABEL_72;
      }
LABEL_54:
      if (!v22 || !v26)
      {
        v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v59, "Port and NoisyPort are not the same type.");
        __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v22);
      if (SurfaceFormat != E5RT::SurfaceDescriptor::GetSurfaceFormat(v26))
      {
        v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v58, "Port and NoisyPort surface format are not the same.");
        goto LABEL_91;
      }
      if ((SurfaceFormat & 0xFFFFFFFE) != 0xA)
      {
        v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v58, "PixelFormat not supported yet.");
LABEL_91:
        __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v39 = _ZN4E5DB18ComputePsnrSurfaceIDF16_EEdRKN4E5RT6IOPortES4_((E5RT::IOPort *)v8[5], (E5RT::IOPort *)v12[5]);
LABEL_73:
      if (fabs(v39) == INFINITY)
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        if (*((char *)v8 + 39) < 0)
          v11 = (_QWORD *)*v11;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setObject:forKeyedSubscript:", v52, v53);

        v8 = (uint64_t *)*v8;
        if (!v8)
          goto LABEL_85;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v39);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        if (*((char *)v8 + 39) < 0)
          v11 = (_QWORD *)*v11;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setObject:forKeyedSubscript:", v54, v55);

        v10 = v10 + v39 * v9;
        v8 = (uint64_t *)*v8;
        if (!v8)
          goto LABEL_85;
      }
    }
  }
  v10 = 0.0;
LABEL_85:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v10);
  result = objc_claimAutoreleasedReturnValue();
  *a3 = result;
  a3[1] = (uint64_t)v7;
  return result;
}

void sub_19105E80C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19105E820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19105E830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va1);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va2);

  _Unwind_Resume(a1);
}

void sub_19105EA9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<E5RT::SurfaceFormat,std::hash<E5RT::SurfaceFormat>,std::equal_to<E5RT::SurfaceFormat>,std::allocator<E5RT::SurfaceFormat>>::__emplace_unique_key_args<E5RT::SurfaceFormat,E5RT::SurfaceFormat const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19105ED98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void E5DB::RegressionTestConfigParser::Parse(E5DB::RegressionTestConfigParser *this, std::__fs::filesystem::path *a2)
{
  char **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  const std::__fs::filesystem::path *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t j;
  NSDictionary *v17;
  std::__fs::filesystem::path::__string_view v18;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v20;
  std::basic_string_view<_CharT, _Traits>::size_type v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  E5RT::TensorDescriptor *v30;
  uint64_t *TensorShape;
  E5RT::TensorDescriptor *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void **v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  char **v48;
  uint64_t v49;
  void *v50;
  std::string v52;
  __int128 v53;
  uint64_t v54;
  __int128 __dst;
  __int128 v56;
  int v57;
  void *__p[2];
  uint64_t *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  std::__fs::filesystem::path v64;
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v3 = (char **)((char *)this + 40);
  std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 40, *((_QWORD **)this + 5));
  v48 = v3;
  if (*(v3 - 2))
  {
    v4 = (void **)*((_QWORD *)this + 2);
    if (v4)
    {
      do
      {
        while (1)
        {
          v5 = (void **)*v4;
          v6 = (std::__shared_weak_count *)v4[6];
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          if (*((char *)v4 + 39) < 0)
            break;
          operator delete(v4);
          v4 = v5;
          if (!v5)
            goto LABEL_12;
        }
        operator delete(v4[2]);
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
LABEL_12:
    *((_QWORD *)this + 2) = 0;
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(*(_QWORD *)this + 8 * i) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  E5DB::RegressionTestConfigParser::GetTestDataFilePath(a2, &v64);
  E5DB::GetJSONFromFile(&v64, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  HIBYTE(v59) = 6;
  strcpy((char *)__p, "frames");
  v50 = v12;
  E5DB::GetValueFromDictionary(v12, (uint64_t *)__p);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v14 = v13;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v60, v65, 16);
  if (v15)
  {
    v49 = *(_QWORD *)v61;
    do
    {
      for (j = 0; j != v15; ++j)
      {
        if (*(_QWORD *)v61 != v49)
          objc_enumerationMutation(v14);
        v17 = *(NSDictionary **)(*((_QWORD *)&v60 + 1) + 8 * j);
        v18 = std::__fs::filesystem::path::__parent_path(a2);
        if (v18.__size_ >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        if (v18.__size_ >= 0x17)
        {
          v20 = (v18.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18.__size_ | 7) != 0x17)
            v20 = v18.__size_ | 7;
          v21 = v20 + 1;
          p_dst = (__int128 *)operator new(v20 + 1);
          *((_QWORD *)&__dst + 1) = v18.__size_;
          *(_QWORD *)&v56 = v21 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
LABEL_31:
          memmove(p_dst, v18.__data_, v18.__size_);
          goto LABEL_32;
        }
        BYTE7(v56) = v18.__size_;
        p_dst = &__dst;
        if (v18.__size_)
          goto LABEL_31;
LABEL_32:
        *((_BYTE *)p_dst + v18.__size_) = 0;
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = __dst;
        v52.__r_.__value_.__r.__words[2] = v56;
        E5DB::RegressionTestConfigParser::GetFrameData((const std::__fs::filesystem::path *)&v52, v17, (uint64_t)__p);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        __dst = 0u;
        v56 = 0u;
        v57 = 1065353216;
        v22 = v59;
        v12 = v50;
        if (v59)
        {
          while (1)
          {
            v29 = v22 + 2;
            if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(this, (uint64_t)(v22 + 2)))
            {
              v30 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v22[5]);
              TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v30);
              v32 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v22[5]);
              E5RT::TensorDescriptor::GetTensorDataType(v32, (E5RT::TensorDataType *)&v52);
              E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v52, TensorShape, &v54);
              E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v52);
              if (*((char *)v22 + 39) < 0)
              {
                std::string::__init_copy_ctor_external(&v52, (const std::string::value_type *)v22[2], v22[3]);
              }
              else
              {
                *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *v29;
                v52.__r_.__value_.__r.__words[2] = v22[4];
              }
              *(_QWORD *)&v53 = v54;
              if (v54)
              {
                v33 = (_QWORD *)operator new();
                v34 = v54;
                *v33 = &unk_1E2DC3270;
                v33[1] = 0;
                v33[2] = 0;
                v33[3] = v34;
              }
              else
              {
                v33 = 0;
              }
              *((_QWORD *)&v53 + 1) = v33;
              v54 = 0;
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::OperandDescriptor>>>((uint64_t)this, (uint64_t)&v52, (uint64_t)&v52);
              v35 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
              if (!*((_QWORD *)&v53 + 1))
                goto LABEL_54;
              v36 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
                if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_66:
                  operator delete(v52.__r_.__value_.__l.__data_);
                  v38 = v54;
                  v54 = 0;
                  if (!v38)
                    goto LABEL_57;
LABEL_56:
                  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
                  goto LABEL_57;
                }
              }
              else
              {
LABEL_54:
                if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_66;
              }
              v38 = v54;
              v54 = 0;
              if (v38)
                goto LABEL_56;
            }
LABEL_57:
            if (*((char *)v22 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(&v52, (const std::string::value_type *)v22[2], v22[3]);
            }
            else
            {
              *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *v29;
              v52.__r_.__value_.__r.__words[2] = v22[4];
            }
            v53 = *(_OWORD *)(v22 + 7);
            v22[7] = 0;
            v22[8] = 0;
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>((uint64_t)&__dst, (uint64_t)&v52, (uint64_t)&v52);
            v39 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
            if (*((_QWORD *)&v53 + 1))
            {
              v40 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v52.__r_.__value_.__l.__data_);
              v22 = (uint64_t *)*v22;
              if (!v22)
                break;
            }
            else
            {
              v22 = (uint64_t *)*v22;
              if (!v22)
                break;
            }
          }
        }
        v23 = *((_QWORD *)this + 6);
        if (v23 >= *((_QWORD *)this + 7))
        {
          *((_QWORD *)this + 6) = std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>>::__push_back_slow_path<std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>>(v48, (uint64_t *)&__dst);
          v42 = (void **)v56;
          if ((_QWORD)v56)
            goto LABEL_77;
        }
        else
        {
          v24 = __dst;
          *(_QWORD *)&__dst = 0;
          *(_OWORD *)v23 = __PAIR128__(*((unint64_t *)&__dst + 1), v24);
          *((_QWORD *)&__dst + 1) = 0;
          v25 = v56;
          *(_QWORD *)(v23 + 16) = v56;
          v26 = *((_QWORD *)&v56 + 1);
          *(_QWORD *)(v23 + 24) = *((_QWORD *)&v56 + 1);
          *(_DWORD *)(v23 + 32) = v57;
          if (v26)
          {
            v27 = *(_QWORD *)(v25 + 8);
            v28 = *(_QWORD *)(v23 + 8);
            if ((v28 & (v28 - 1)) != 0)
            {
              if (v27 >= v28)
                v27 %= v28;
            }
            else
            {
              v27 &= v28 - 1;
            }
            *(_QWORD *)(v24 + 8 * v27) = v23 + 16;
            v56 = 0uLL;
          }
          *((_QWORD *)this + 6) = v23 + 40;
          v42 = (void **)v56;
          if ((_QWORD)v56)
          {
            do
            {
              while (1)
              {
LABEL_77:
                v43 = (void **)*v42;
                v44 = (std::__shared_weak_count *)v42[6];
                if (v44)
                {
                  v45 = (unint64_t *)&v44->__shared_owners_;
                  do
                    v46 = __ldaxr(v45);
                  while (__stlxr(v46 - 1, v45));
                  if (!v46)
                  {
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                  }
                }
                if (*((char *)v42 + 39) < 0)
                  break;
                operator delete(v42);
                v42 = v43;
                if (!v43)
                  goto LABEL_83;
              }
              operator delete(v42[2]);
              operator delete(v42);
              v42 = v43;
            }
            while (v43);
          }
        }
LABEL_83:
        v47 = (void *)__dst;
        *(_QWORD *)&__dst = 0;
        if (v47)
          operator delete(v47);
        std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table((uint64_t)__p);
      }
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v60, v65, 16);
    }
    while (v15);
  }

  if (SHIBYTE(v64.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__pn_.__r_.__value_.__l.__data_);
}

void sub_19105F3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  void *v52;

  if (a51 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

E5DB::RegressionTestConfigParser *E5DB::RegressionTestConfigParser::RegressionTestConfigParser(E5DB::RegressionTestConfigParser *this, std::__fs::filesystem::path *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  E5DB::RegressionTestConfigParser::Parse(this, a2);
  return this;
}

void sub_19105F560(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*v2)
  {
    std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_191062678(v1);
  _Unwind_Resume(a1);
}

void E5DB::RegressionTestConfigParser::GetTestDataFilePath(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  const std::__fs::filesystem::path *v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  std::__fs::filesystem::path::__string_view v11;
  std::__fs::filesystem::path *p_p;
  std::basic_string_view<_CharT, _Traits>::size_type v13;
  std::basic_string_view<_CharT, _Traits>::size_type v14;
  id v15;
  const char *v16;
  size_t v17;
  std::string::size_type v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::string *v24;
  __int128 v25;
  std::string __dst;
  std::string pn;
  std::__fs::filesystem::path __p;

  std::__fs::filesystem::__status(a1, 0);
  if (__p.__pn_.__r_.__value_.__s.__data_[0] == 255 || __p.__pn_.__r_.__value_.__s.__data_[0] == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::__fs::filesystem::path::extension[abi:ne180100](a1, (uint64_t)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      pn = __dst;
    v24 = std::string::insert(&pn, 0, "Test configuration file does not exist:");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __p.__pn_.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p.__pn_);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5DB::GetJSONFromFile(a1, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "tests");
  E5DB::GetValueFromDictionary(v7, (uint64_t *)&__p);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (objc_msgSend(v8, "count") != 1)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Test config can have only one network's config.");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v8, "objectAtIndex:", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__p, "data_frames_file");
  E5DB::GetValueFromDictionary(v9, (uint64_t *)&__p);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);

  v11 = std::__fs::filesystem::path::__parent_path(a1);
  if (v11.__size_ > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11.__size_ >= 0x17)
  {
    v13 = (v11.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11.__size_ | 7) != 0x17)
      v13 = v11.__size_ | 7;
    v14 = v13 + 1;
    p_p = (std::__fs::filesystem::path *)operator new(v13 + 1);
    __p.__pn_.__r_.__value_.__l.__size_ = v11.__size_;
    __p.__pn_.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_17;
  }
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v11.__size_;
  p_p = &__p;
  if (v11.__size_)
LABEL_17:
    memmove(p_p, v11.__data_, v11.__size_);
  p_p->__pn_.__r_.__value_.__s.__data_[v11.__size_] = 0;
  pn = __p.__pn_;
  v15 = objc_retainAutorelease(v10);
  v16 = (const char *)objc_msgSend(v15, "UTF8String");
  v17 = strlen(v16);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_dst = (std::string *)operator new(v20 + 1);
    __dst.__r_.__value_.__l.__size_ = v18;
    __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_25;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17;
  p_dst = &__dst;
  if (v17)
LABEL_25:
    memmove(p_dst, v16, v18);
  p_dst->__r_.__value_.__s.__data_[v18] = 0;
  __p = (std::__fs::filesystem::path)__dst;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&pn, a2);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_30:
    operator delete(pn.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_30;
LABEL_28:

}

void sub_19105F8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v28);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void sub_19105F9F4()
{
  JUMPOUT(0x19105FA1CLL);
}

void E5DB::RegressionTestConfigParser::GetFrameData(const std::__fs::filesystem::path *a1@<X1>, NSDictionary *a2@<X2>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  NSDictionary *v8;
  id v9;
  const char *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t j;
  id v36;
  NSDictionary *v37;
  id v38;
  const char *v39;
  size_t v40;
  size_t v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  NSDictionary *v62;
  uint64_t v63;
  id v64;
  id v65;
  id obj;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  void **__dst;
  size_t v74;
  unint64_t v75;
  void *__p[2];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void **v82;
  _BYTE v83[128];
  _BYTE v84[128];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  BYTE7(v77) = 6;
  strcpy((char *)__p, "inputs");
  v62 = a2;
  E5DB::GetValueFromDictionary(v62, (uint64_t *)__p);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v77) < 0)
    operator delete(__p[0]);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v84, 16);
  if (v5)
  {
    v64 = *(id *)v79;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(id *)v79 != v64)
          objc_enumerationMutation(obj);
        v7 = *(id *)(*((_QWORD *)&v78 + 1) + 8 * i);
        objc_msgSend(obj, "valueForKey:", v7, v62);
        v8 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        E5DB::RegressionTestConfigParser::GetTensorData(a1, v8, (uint64_t)__p);
        v9 = objc_retainAutorelease(v7);
        v10 = (const char *)objc_msgSend(v9, "UTF8String");
        v11 = strlen(v10);
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v12 = v11;
        if (v11 >= 0x17)
        {
          v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v14 = v11 | 7;
          v15 = v14 + 1;
          p_dst = (void **)operator new(v14 + 1);
          v74 = v12;
          v75 = v15 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v75) = v11;
          p_dst = (void **)&__dst;
          if (!v11)
            goto LABEL_16;
        }
        memmove(p_dst, v10, v12);
LABEL_16:
        *((_BYTE *)p_dst + v12) = 0;
        v82 = (void **)&__dst;
        v16 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (uint64_t)&__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&v82);
        v17 = v16;
        v18 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v19 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
        *(_OWORD *)(v16 + 40) = v18;
        if (!v19)
          goto LABEL_20;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
          v26 = v77;
          v77 = 0uLL;
          v23 = (std::__shared_weak_count *)*((_QWORD *)v17 + 8);
          *(_OWORD *)(v17 + 56) = v26;
          if (!v23)
            goto LABEL_26;
        }
        else
        {
LABEL_20:
          v22 = v77;
          v77 = 0uLL;
          v23 = (std::__shared_weak_count *)*((_QWORD *)v16 + 8);
          *(_OWORD *)(v16 + 56) = v22;
          if (!v23)
            goto LABEL_26;
        }
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
LABEL_26:
        if (SHIBYTE(v75) < 0)
        {
          operator delete(__dst);
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
          if (!*((_QWORD *)&v77 + 1))
            goto LABEL_33;
        }
        else
        {
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
          if (!*((_QWORD *)&v77 + 1))
            goto LABEL_33;
        }
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
          v30 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_39;
          goto LABEL_34;
        }
LABEL_33:
        v30 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_39;
LABEL_34:
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
LABEL_39:

      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v84, 16);
    }
    while (v5);
  }

  BYTE7(v77) = 7;
  strcpy((char *)__p, "outputs");
  E5DB::GetValueFromDictionary(v62, (uint64_t *)__p);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (SBYTE7(v77) < 0)
    operator delete(__p[0]);
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v65 = v33;
  v34 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v69, v83, 16);
  if (v34)
  {
    v63 = *(_QWORD *)v70;
    do
    {
      for (j = 0; j != v34; ++j)
      {
        if (*(_QWORD *)v70 != v63)
          objc_enumerationMutation(v65);
        v36 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
        objc_msgSend(v65, "valueForKey:", v36);
        v37 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        E5DB::RegressionTestConfigParser::GetTensorData(a1, v37, (uint64_t)__p);
        v38 = objc_retainAutorelease(v36);
        v39 = (const char *)objc_msgSend(v38, "UTF8String");
        v40 = strlen(v39);
        if (v40 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v41 = v40;
        if (v40 >= 0x17)
        {
          v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v43 = v40 | 7;
          v44 = v43 + 1;
          v42 = (void **)operator new(v43 + 1);
          v74 = v41;
          v75 = v44 | 0x8000000000000000;
          __dst = v42;
        }
        else
        {
          HIBYTE(v75) = v40;
          v42 = (void **)&__dst;
          if (!v40)
            goto LABEL_56;
        }
        memmove(v42, v39, v41);
LABEL_56:
        *((_BYTE *)v42 + v41) = 0;
        v82 = (void **)&__dst;
        v45 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (uint64_t)&__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&v82);
        v46 = v45;
        v47 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v48 = (std::__shared_weak_count *)*((_QWORD *)v45 + 6);
        *(_OWORD *)(v45 + 40) = v47;
        if (!v48)
          goto LABEL_60;
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
          v55 = v77;
          v77 = 0uLL;
          v52 = (std::__shared_weak_count *)*((_QWORD *)v46 + 8);
          *(_OWORD *)(v46 + 56) = v55;
          if (!v52)
            goto LABEL_66;
        }
        else
        {
LABEL_60:
          v51 = v77;
          v77 = 0uLL;
          v52 = (std::__shared_weak_count *)*((_QWORD *)v45 + 8);
          *(_OWORD *)(v45 + 56) = v51;
          if (!v52)
            goto LABEL_66;
        }
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
LABEL_66:
        if (SHIBYTE(v75) < 0)
        {
          operator delete(__dst);
          v56 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
          if (!*((_QWORD *)&v77 + 1))
            goto LABEL_73;
        }
        else
        {
          v56 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
          if (!*((_QWORD *)&v77 + 1))
            goto LABEL_73;
        }
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
          v59 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_79;
          goto LABEL_74;
        }
LABEL_73:
        v59 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_79;
LABEL_74:
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
LABEL_79:

      }
      v34 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v69, v83, 16);
    }
    while (v34);
  }

}

void sub_1910600D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{

  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table(a14);
  _Unwind_Resume(a1);
}

unint64_t E5DB::RegressionTestConfigParser::GetFrameCount(E5DB::RegressionTestConfigParser *this)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3);
}

void E5DB::RegressionTestConfigParser::GetInputDescriptor(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  size_t v11;
  unint64_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void **__dst;
  size_t v22;
  unint64_t v23;

  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(a1, a2))
  {
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(a1, a2);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v7 = v6[6];
    *a3 = v6[5];
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    return;
  }
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = v11 + 12;
  if (v11 + 12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v22 = v11 + 12;
    v23 = v15 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_17;
  }
  v22 = 0;
  v23 = 0;
  __dst = 0;
  p_dst = (void **)&__dst;
  HIBYTE(v23) = v11 + 12;
  if (v11)
  {
LABEL_17:
    if (v10 >= 0)
      v16 = (const void *)a2;
    else
      v16 = *(const void **)a2;
    memmove(p_dst, v16, v11);
  }
  strcpy((char *)p_dst + v11, "_classic_cpu");
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(a1, (uint64_t)&__dst);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v18 = v17[6];
  *a3 = v17[5];
  a3[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__dst);
}

void sub_1910603A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void E5DB::RegressionTestConfigParser::GetData(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  size_t v17;
  unint64_t v18;
  _QWORD *v19;
  void **p_dst;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void **__dst;
  size_t v29;
  unint64_t v30;

  v5 = *(_QWORD *)(a1 + 40);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 48) - v5) >> 3) <= a3)
    goto LABEL_31;
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>((_QWORD *)(v5 + 40 * a3), a2);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 48) - v10) >> 3);
  if (v9)
  {
    if (v11 > a3)
    {
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>((_QWORD *)(v10 + 40 * a3), a2);
      if (!v12)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v13 = v12[6];
      *a4 = v12[5];
      a4[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      return;
    }
LABEL_31:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 <= a3)
    goto LABEL_31;
  v16 = *(char *)(a2 + 23);
  if (v16 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = v17 + 12;
  if (v17 + 12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = (_QWORD *)(v10 + 40 * a3);
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    p_dst = (void **)operator new(v21 + 1);
    v29 = v17 + 12;
    v30 = v22 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_20;
  }
  v29 = 0;
  v30 = 0;
  __dst = 0;
  p_dst = (void **)&__dst;
  HIBYTE(v30) = v17 + 12;
  if (v17)
  {
LABEL_20:
    if (v16 >= 0)
      v23 = (const void *)a2;
    else
      v23 = *(const void **)a2;
    memmove(p_dst, v23, v17);
  }
  strcpy((char *)p_dst + v17, "_classic_cpu");
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>(v19, (uint64_t)&__dst);
  if (!v24)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v25 = v24[6];
  *a4 = v24[5];
  a4[1] = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__dst);
}

void sub_1910605B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void E5DB::RegressionTestConfigParser::GetTransformedPixelData(void **a1@<X1>, void **a2@<X2>, E5RT::SurfaceDescriptor *a3@<X3>, E5RT::MemoryObject **a4@<X8>)
{
  E5RT::BufferObject *v7;
  uint64_t DataSpan;
  E5RT::TensorDescriptor *v9;
  char **TensorShape;
  E5RT::TensorDescriptorImpl **v11;
  unint64_t NumElements;
  void *v13;
  __IOSurface *v14;
  void *BaseAddress;
  size_t AllocSize;
  size_t v17;
  unsigned int SurfaceFormat;
  unint64_t v19;
  std::runtime_error *v20;
  std::runtime_error *exception;
  E5RT::MemoryObject *v22;

  v7 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*a2);
  DataSpan = E5RT::BufferObject::GetDataSpan(v7);
  v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(*a1);
  TensorShape = (char **)E5RT::TensorDescriptor::GetTensorShape(v9);
  v11 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TryAsTensorDescriptor(*a1);
  NumElements = E5RT::TensorDescriptor::GetNumElements(v11);
  E5RT::SurfaceObject::AllocSurface(a3, 0, &v22);
  v13 = E5RT::MemoryObject::Surface(v22);
  v14 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v13);
  BaseAddress = IOSurfaceGetBaseAddress(v14);
  AllocSize = IOSurfaceGetAllocSize(v14);
  if (!BaseAddress)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a null pointer to IOSurface base address.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = AllocSize;
  SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(a3);
  if (SurfaceFormat <= 0x21)
  {
    if (SurfaceFormat == 10)
    {
      v19 = 1;
    }
    else
    {
      if (SurfaceFormat != 11)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "E5DB RegressionTestConfigParser::GetTransformedPixelData - unsupported pixel format.");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v19 = 4;
    }
    sub_19106077C(DataSpan, (uint64_t)BaseAddress, TensorShape, NumElements, v17 >> 1, v19);
  }
  *a4 = v22;
}

void sub_191060738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

void sub_19106077C(uint64_t a1, uint64_t a2, char **a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  char *v9;
  char *v10;
  int64_t v11;
  int32x4_t *v12;
  int32x4_t *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int32x4_t *v17;
  uint64_t v18;
  int32x4_t *v19;
  int32x4_t v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  __int32 v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  std::logic_error *v51;
  std::runtime_error *exception;
  uint64_t v53;
  uint64_t v54;
  char *v57;
  unint64_t v58;
  unint64_t v59;

  v10 = *a3;
  v9 = a3[1];
  v53 = (v9 - *a3) >> 3;
  v11 = v9 - *a3;
  if (v9 == *a3)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v11 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = (int32x4_t *)operator new(v9 - v10);
    v13 = (int32x4_t *)((char *)v12 + 8 * v53);
    memcpy(v12, v10, v9 - v10);
  }
  v14 = 8 * (v53 - 3);
  v12->i64[(unint64_t)v14 / 8] = vcvtps_u32_f32((float)*(unint64_t *)&v10[v14] / (float)a6);
  v13[-1].i64[1] *= a6;
  if (v12 == v13)
  {
    v16 = 1;
    goto LABEL_13;
  }
  v15 = (char *)v13 - (char *)v12 - 8;
  if (v15 < 0x38)
  {
    v16 = 1;
    v17 = v12;
    do
    {
LABEL_12:
      v28 = v17->i32[0];
      v17 = (int32x4_t *)((char *)v17 + 8);
      v16 *= v28;
    }
    while (v17 != v13);
    goto LABEL_13;
  }
  v18 = (v15 >> 3) + 1;
  v17 = (int32x4_t *)((char *)v12 + 8 * (v18 & 0x3FFFFFFFFFFFFFF8));
  v19 = v12 + 2;
  v20.i64[0] = 0x100000001;
  v20.i64[1] = 0x100000001;
  v21 = v18 & 0x3FFFFFFFFFFFFFF8;
  v22.i64[0] = 0x100000001;
  v22.i64[1] = 0x100000001;
  do
  {
    v24 = v19[-2];
    v23 = v19[-1];
    v26 = *v19;
    v25 = v19[1];
    v19 += 4;
    v20 = vmulq_s32(v20, vuzp1q_s32(v24, v23));
    v22 = vmulq_s32(v22, vuzp1q_s32(v26, v25));
    v21 -= 8;
  }
  while (v21);
  v27 = (int8x16_t)vmulq_s32(v22, v20);
  *(int32x2_t *)v27.i8 = vmul_s32(*(int32x2_t *)v27.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  v16 = v27.i32[0] * v27.i32[1];
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFF8))
    goto LABEL_12;
LABEL_13:
  v59 = v16;
  if (v16 > a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Interleaved dst shape is larger than the buf size.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v9 == v10)
  {
    v31 = 0;
    v29 = 0;
    v30 = 0;
    v57 = 0;
    v58 = a4;
    if (!a4)
      goto LABEL_36;
    goto LABEL_19;
  }
  if (v11 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v29 = (char *)operator new(v9 - v10);
  bzero(v29, v9 - v10);
  v30 = (char *)operator new(v9 - v10);
  v31 = &v29[v11];
  bzero(v30, v11);
  v57 = &v30[v11];
  v58 = a4;
  if (a4)
  {
LABEL_19:
    v32 = 0;
    v33 = (char *)v13 - (char *)v12;
    v54 = v53 - 1;
    do
    {
      v34 = v54;
      v35 = v32;
      if (v11 >= 1)
      {
        do
        {
          *(_QWORD *)&v29[8 * v34] = v35 % *(_QWORD *)&v10[8 * v34];
          v35 /= *(_QWORD *)&v10[8 * v34];
          v36 = v34-- + 1;
        }
        while (v36 > 1);
      }
      if (v31 != v29)
        memmove(v30, v29, v31 - v29);
      *(_QWORD *)&v30[v14] = *(_QWORD *)&v29[v14] / a6;
      *((_QWORD *)v57 - 1) = *(_QWORD *)&v29[v14] % a6 + *((_QWORD *)v31 - 1) * a6;
      if (v33 < 1)
      {
        v37 = 0;
        if (v11 >= 1)
          goto LABEL_28;
      }
      else
      {
        v37 = 0;
        v38 = ((unint64_t)v33 >> 3) - 1;
        v39 = 1;
        do
        {
          v37 += *(_QWORD *)&v30[8 * v38] * v39;
          v39 *= v12->i64[v38];
          v40 = v38-- + 1;
        }
        while (v40 > 1);
        if (v11 >= 1)
        {
LABEL_28:
          v41 = 0;
          v42 = ((unint64_t)v11 >> 3) - 1;
          v43 = 1;
          do
          {
            v41 += *(_QWORD *)&v29[8 * v42] * v43;
            v43 *= *(_QWORD *)&v10[8 * v42];
            v44 = v42-- + 1;
          }
          while (v44 > 1);
          v45 = v58;
          if (v37 >= v59)
          {
LABEL_43:
            v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v51, "srcOffset or dstOffset is out of range.");
            v51->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v51, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          goto LABEL_34;
        }
      }
      v41 = 0;
      v45 = v58;
      if (v37 >= v59)
        goto LABEL_43;
LABEL_34:
      if (v41 >= v45)
        goto LABEL_43;
      _S0 = *(_DWORD *)(a1 + 4 * v41);
      __asm { FCVT            H0, S0 }
      *(_WORD *)(a2 + 2 * v37) = _S0;
      ++v32;
    }
    while (v32 != v45);
  }
LABEL_36:
  if (v30)
    operator delete(v30);
  if (v29)
    operator delete(v29);
  if (v12)
    operator delete(v12);
}

void sub_191060BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t E5DB::RegressionTestConfigParser::GetMemoryObject@<X0>(const std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void *DataSpan;
  std::string::size_type v14;
  _QWORD *v15;
  std::string::size_type v16;
  std::logic_error *exception;
  std::string __p;

  if ((a3 & 3) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Size must be a multiple of sizeof(float).");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v9 = operator new();
  if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
  else
    __p = a1->__pn_;
  E5Common::AutoMmapPtr::AutoMmapPtr(v9, &__p, 1, 1, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 32))(v9, a2, a3);
  v12 = v11;
  E5RT::BufferObject::AllocMemory(a3, 0, &__p);
  DataSpan = (void *)E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)__p.__r_.__value_.__l.__data_);
  if (v12)
    memmove(DataSpan, v10, v12);
  v14 = __p.__r_.__value_.__r.__words[0];
  *a4 = __p.__r_.__value_.__r.__words[0];
  if (v14)
  {
    v15 = (_QWORD *)operator new();
    v16 = __p.__r_.__value_.__r.__words[0];
    *v15 = &unk_1E2DC3190;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v16;
  }
  else
  {
    v15 = 0;
  }
  a4[1] = v15;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_191060DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x19401CD90](v14, 0x10F1C40C2655342);
  _Unwind_Resume(a1);
}

void sub_191060E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

void E5DB::RegressionTestConfigParser::GetTensorData(const std::__fs::filesystem::path *a1@<X1>, NSDictionary *a2@<X2>, uint64_t a3@<X8>)
{
  NSDictionary *v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  id v31;
  std::string *v32;
  std::string *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  const std::__fs::filesystem::path *v39;
  NSDictionary *v40;
  id v41;
  void *v42;
  void *v44;
  id obj;
  uint64_t v46;
  std::__fs::filesystem::path v47;
  std::__fs::filesystem::path v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *__p;
  char *v55;
  char *v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  HIBYTE(v56) = 5;
  strcpy((char *)&__p, "shape");
  v40 = v5;
  E5DB::GetValueFromDictionary(v5, (uint64_t *)&__p);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  HIBYTE(v56) = 4;
  strcpy((char *)&__p, "file");
  E5DB::GetValueFromDictionary(v5, (uint64_t *)&__p);
  v41 = (id)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  HIBYTE(v56) = 6;
  strcpy((char *)&__p, "offset");
  E5DB::GetValueFromDictionary(v5, (uint64_t *)&__p);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  HIBYTE(v56) = 4;
  strcpy((char *)&__p, "size");
  E5DB::GetValueFromDictionary(v5, (uint64_t *)&__p);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = a1;
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  __p = 0;
  v55 = 0;
  v56 = 0;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
  if (v7)
  {
    v46 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v51 != v46)
          objc_enumerationMutation(obj);
        v9 = *(id *)(*((_QWORD *)&v50 + 1) + 8 * i);
        v10 = objc_msgSend(v9, "unsignedIntegerValue");
        v11 = v10;
        v12 = v55;
        if (v55 < v56)
        {
          *(_QWORD *)v55 = v10;
          v13 = (uint64_t)(v12 + 8);
          goto LABEL_35;
        }
        v14 = (char *)__p;
        v15 = v55 - (_BYTE *)__p;
        v16 = (v55 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v18 = v56 - (_BYTE *)__p;
        if ((v56 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = (char *)operator new(8 * v19);
          v21 = (uint64_t *)&v20[8 * v16];
          *v21 = v11;
          v13 = (uint64_t)(v21 + 1);
          if (v12 == v14)
            goto LABEL_33;
LABEL_27:
          v22 = v12 - 8 - v14;
          if (v22 < 0x58)
            goto LABEL_54;
          if ((unint64_t)(v12 - &v20[v15]) < 0x20)
            goto LABEL_54;
          v23 = (v22 >> 3) + 1;
          v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          v25 = &v12[-v24];
          v21 = (uint64_t *)((char *)v21 - v24);
          v26 = &v20[8 * v16 - 16];
          v27 = v12 - 16;
          v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v29 = *(_OWORD *)v27;
            *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
            *(_OWORD *)v26 = v29;
            v26 -= 32;
            v27 -= 32;
            v28 -= 4;
          }
          while (v28);
          v12 = v25;
          if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_54:
            do
            {
              v30 = *((_QWORD *)v12 - 1);
              v12 -= 8;
              *--v21 = v30;
            }
            while (v12 != v14);
          }
          goto LABEL_33;
        }
        v20 = 0;
        v21 = (uint64_t *)(8 * v16);
        *(_QWORD *)(8 * v16) = v11;
        v13 = 8 * v16 + 8;
        if (v12 != v14)
          goto LABEL_27;
LABEL_33:
        __p = v21;
        v55 = (char *)v13;
        v56 = &v20[8 * v19];
        if (v14)
          operator delete(v14);
LABEL_35:
        v55 = (char *)v13;

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
    }
    while (v7);
  }

  E5RT::TensorDataType::TensorDataType(&v48, 4, 6u);
  E5RT::TensorDescriptor::CreateTensorDesc((E5RT::TensorDataType::Impl **)&v48, (uint64_t *)&__p, &v49);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v48);
  v31 = objc_retainAutorelease(v41);
  v32 = (std::string *)objc_msgSend(v31, "UTF8String");
  memset(&v47, 0, sizeof(v47));
  v33 = (std::string *)((char *)v32 - 1);
  do
  {
    v34 = v33->__r_.__value_.__s.__data_[1];
    v33 = (std::string *)((char *)v33 + 1);
  }
  while (v34);
  std::string::append[abi:ne180100]<char const*,0>(&v47.__pn_, v32, v33);
  std::__fs::filesystem::operator/[abi:ne180100](&v47, (uint64_t)v39, &v48);
  if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);
  E5DB::RegressionTestConfigParser::GetMemoryObject(&v48, objc_msgSend(v44, "unsignedIntegerValue"), objc_msgSend(v42, "unsignedIntegerValue"), &v47);
  v35 = v49;
  *(_QWORD *)a3 = v49;
  if (v35)
  {
    v36 = (_QWORD *)operator new();
    v37 = v49;
    *v36 = &unk_1E2DC3270;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v37;
  }
  else
  {
    v36 = 0;
  }
  *(_QWORD *)(a3 + 8) = v36;
  v49 = 0;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)&v47.__pn_.__r_.__value_.__l.__data_;
  if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__pn_.__r_.__value_.__l.__data_);
    v38 = v49;
    v49 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if (__p)
  {
    v55 = (char *)__p;
    operator delete(__p);
  }

}

void sub_19106132C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v48;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a31 < 0)
    operator delete(__p);
  v48 = a32;
  a32 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }

  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::OperandDescriptor>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_191061AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191061B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_191061F60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191061F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>>::__push_back_slow_path<std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>>(char **a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void **v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  void *v35;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v3];
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)v8 = v9;
  *((_QWORD *)v8 + 1) = v10;
  v11 = a2[2];
  *((_QWORD *)v8 + 2) = v11;
  v12 = a2[3];
  *((_QWORD *)v8 + 3) = v12;
  *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      v15 = v13 >= v10;
      v14 = v13 % v10;
      if (!v15)
        v14 = v13;
    }
    else
    {
      v14 = v13 & (v10 - 1);
    }
    *(_QWORD *)(v9 + 8 * v14) = v8 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  v16 = &v7[40 * v6];
  v17 = v8 + 40;
  v18 = *a1;
  v19 = a1[1];
  if (v19 == *a1)
  {
    *a1 = v8;
    a1[1] = v17;
    a1[2] = v16;
    if (!v19)
      return v17;
    goto LABEL_43;
  }
  v20 = 0;
  do
  {
    v22 = &v8[v20];
    v23 = &v19[v20];
    v24 = *(_QWORD *)&v19[v20 - 40];
    *((_QWORD *)v23 - 5) = 0;
    *((_QWORD *)v22 - 5) = v24;
    *((_QWORD *)v22 - 4) = *(_QWORD *)&v19[v20 - 32];
    *((_QWORD *)v23 - 4) = 0;
    v25 = *(_QWORD *)&v19[v20 - 24];
    *(_QWORD *)&v8[v20 - 24] = v25;
    v26 = *(_QWORD *)&v19[v20 - 16];
    *((_QWORD *)v22 - 2) = v26;
    *((_DWORD *)v22 - 2) = *(_DWORD *)&v19[v20 - 8];
    if (v26)
    {
      v21 = *(_QWORD *)(v25 + 8);
      v27 = *((_QWORD *)v22 - 4);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v21 >= v27)
          v21 %= v27;
      }
      else
      {
        v21 &= v27 - 1;
      }
      *(_QWORD *)(v24 + 8 * v21) = &v8[v20 - 24];
      *(_QWORD *)&v19[v20 - 24] = 0;
      *(_QWORD *)&v19[v20 - 16] = 0;
    }
    v20 -= 40;
  }
  while (&v19[v20] != v18);
  v28 = *a1;
  v19 = a1[1];
  *a1 = &v8[v20];
  a1[1] = v17;
  a1[2] = v16;
  if (v19 != v28)
  {
    do
    {
      v29 = (void **)*((_QWORD *)v19 - 3);
      if (v29)
      {
        do
        {
          while (1)
          {
            v30 = (void **)*v29;
            v31 = (std::__shared_weak_count *)v29[6];
            if (v31)
            {
              p_shared_owners = (unint64_t *)&v31->__shared_owners_;
              do
                v33 = __ldaxr(p_shared_owners);
              while (__stlxr(v33 - 1, p_shared_owners));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            if (*((char *)v29 + 39) < 0)
              break;
            operator delete(v29);
            v29 = v30;
            if (!v30)
              goto LABEL_39;
          }
          operator delete(v29[2]);
          operator delete(v29);
          v29 = v30;
        }
        while (v30);
      }
LABEL_39:
      v35 = (void *)*((_QWORD *)v19 - 5);
      v19 -= 40;
      v34 = v35;
      *(_QWORD *)v19 = 0;
      if (v35)
        operator delete(v34);
    }
    while (v19 != v28);
    v19 = v28;
  }
  if (v19)
LABEL_43:
    operator delete(v19);
  return v17;
}

void sub_191062678(uint64_t a1)
{
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
}

void E5DB::RunCommand::GetName(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 7239026;
}

double E5DB::RunCommand::GetDescription@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_191A6F790;
  strcpy(v3, "Run the loaded E5 bundle on current platform.");
  return *(double *)"urrent platform.";
}

_QWORD *E5DB::RunCommand::RunCommand(_QWORD *this)
{
  *this = &off_1E2D59878;
  return this;
}

void E5DB::RunCommand::~RunCommand(E5DB::RunCommand *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t E5DB::RunCommand::GetHelp(E5DB::RunCommand *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  _QWORD *v39;
  const std::locale::facet *v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  _QWORD *v45;
  const std::locale::facet *v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  _QWORD *v61;
  const std::locale::facet *v62;
  _QWORD *v63;
  const std::locale::facet *v64;
  _QWORD *v65;
  const std::locale::facet *v66;
  _QWORD *v67;
  const std::locale::facet *v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  _QWORD *v71;
  const std::locale::facet *v72;
  _QWORD *v73;
  const std::locale::facet *v74;
  _QWORD *v75;
  const std::locale::facet *v76;
  _QWORD *v77;
  const std::locale::facet *v78;
  _QWORD *v79;
  const std::locale::facet *v80;
  _QWORD *v81;
  const std::locale::facet *v82;
  _QWORD *v83;
  const std::locale::facet *v84;
  _QWORD *v85;
  const std::locale::facet *v86;
  _QWORD *v87;
  const std::locale::facet *v88;
  _QWORD *v89;
  const std::locale::facet *v90;
  _QWORD *v91;
  const std::locale::facet *v92;
  _QWORD *v93;
  const std::locale::facet *v94;
  const std::locale::facet *v95;
  _QWORD *v96;
  const std::locale::facet *v97;
  uint64_t v98;
  void *__p[2];
  unsigned __int8 v101;
  _QWORD v102[2];
  _QWORD v103[11];
  char v104;
  uint64_t v105;
  std::locale v106;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v102);
  (*(void (**)(void **__return_ptr, E5DB::RunCommand *))(*(_QWORD *)this + 24))(__p, this);
  if ((v101 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v101 & 0x80u) == 0)
    v3 = v101;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v106, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v106);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v6 = std::locale::use_facet(&v106, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v106);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v101 < 0)
    operator delete(__p[0]);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"run [options]", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Options:", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-f | --function [function]     : Run function in E5. Use * for all functions. Default = main", 92);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-i | --input_data [file path]  : Config file for regression test vectors. Same format as", 88);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 file used for psnr check.", 58);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
  v16 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 If omitted, then random inputs are used.", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--input_index [index]          : Index to vector in the file specified by input_data above.", 91);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 This option requires input file to be specified.", 81);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-r | --repeat   [repetitions]  : Number of repetitions (per stream). Default = 1", 80);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-c | --cadence  [cadence]      : Cadence value to run inference. Default = 0", 76);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
  v26 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 If cadence is specified, then the test will run", 80);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
  v28 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 [repetitions] evaluations over [repetitions/cadence] secs", 90);
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
  v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Cadence is not compatible with -t, -b, -s, or -a modes", 87);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
  v32 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-s | --execution_streams [S]   : Run on [S] concurrent streams for higher throughput", 84);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
  v34 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-b | --batch_size [B]          : Submit [B] inferences in a batch on each stream", 80);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
  v36 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Once a batch has finished the next one can start", 81);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*v37 - 24)));
  v38 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-t | --time_to_run_seconds [T] : Target time the benchmark will attempt to run for in seconds", 93);
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(*v39 - 24)));
  v40 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Workload will stop after [T] seconds", 69);
  std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
  v42 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Will wait to finish operations already in progress (submitted)", 95);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
  v44 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Option is not compatible with a fixed number of repetitions (-r)", 97);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(_QWORD *)(*v45 - 24)));
  v46 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-a | --asynchronous            : Run operations with the asynchronous API", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(_QWORD *)(*v47 - 24)));
  v48 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-w | --prewire                 : Enable buffer pre-wiring", 57);
  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
  v50 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-o | --output   [output path]  : Output perfdata file path", 58);
  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
  v52 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--input_shapes_file            : Config file (json) for new input shapes and strides to reshpe", 94);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
  v54 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 the model with new shapes and strides in this format:", 86);
  std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(_QWORD *)(*v55 - 24)));
  v56 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 {\"[function_name\"]: {\"[input_name]\": {\"shape\": [10, 10], \"stride\": [200, 2]}}", 110);
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
  v58 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 where stride is optional. If not provided, the shape would be packed.", 102);
  std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
  v60 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--adapter_file                 : Config file (json) for adapters in this format:", 80);
  std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(*v61 - 24)));
  v62 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 DynamicCallables:", 50);
  std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(_QWORD *)(*v63 - 24)));
  v64 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 {\"[function_name\": {\"type\": \"DynamicCallables\", \"adapter\": {\"callable\": \"MIL path relative to this config file.\"}}", 147);
  std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(_QWORD *)(*v65 - 24)));
  v66 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 MutableMILWeightPaths:", 55);
  std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(_QWORD *)(*v67 - 24)));
  v68 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 \"[function_name\": {\"type\": \"MutableMILWeightPaths\", \"adapter\": {\"weight\": \"Weight path relative to this config file.\"}}}", 153);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(*v69 - 24)));
  v70 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--write_rusage                 : Write proc_pid_rusage output to stdout", 71);
  std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(_QWORD *)(*v71 - 24)));
  v72 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--io_port_trace_dir [path]     : Output E5 IOPort descriptors and data to the given output directory", 100);
  std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(_QWORD *)(*v73 - 24)));
  v74 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--segment_io_trace_dir [path]  : Output E5 IOPort descriptors and data for each segment in the E5 program", 105);
  std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(_QWORD *)(*v75 - 24)));
  v76 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 to the given output directory", 62);
  std::ios_base::getloc((const std::ios_base *)((char *)v77 + *(_QWORD *)(*v77 - 24)));
  v78 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-e | --e5_trace_format         : Indicate that the input file provided is in E5 IOPort trace format", 99);
  std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(_QWORD *)(*v79 - 24)));
  v80 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--buffer_type [IO type]        : Buffer type used for I\\O. Default = IOSurface. Available types:", 96);
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(_QWORD *)(*v81 - 24)));
  v82 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 IOSurface (Darwin OS only), HeapAllocated (Darwin OS and Exclave OS), ", 103);
  std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(_QWORD *)(*v83 - 24)));
  v84 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 EXSurface (Exclave OS with full ANE residence), and ", 85);
  std::ios_base::getloc((const std::ios_base *)((char *)v85 + *(_QWORD *)(*v85 - 24)));
  v86 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v86->__vftable[2].~facet_0)(v86, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 MTLBuffer (Darwin OS with full GPU residence).", 79);
  std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(_QWORD *)(*v87 - 24)));
  v88 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--enable_all_telemetry         : Enable telmetry from e5rt. Enables os_signposts per inference", 94);
  std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(_QWORD *)(*v89 - 24)));
  v90 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 with additional performance information", 72);
  std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(_QWORD *)(*v91 - 24)));
  v92 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--skip_warmup_runs             : Skip warmup runs as part of benchmarking.", 74);
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(_QWORD *)(*v93 - 24)));
  v94 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(_QWORD *)(v103[0] - 24)));
  v95 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Must have loaded an E5 bundle before attempting to run it.", 58);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)));
  v97 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v102[0] = *MEMORY[0x1E0DE4F50];
  v98 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v102 + *(_QWORD *)(v102[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v103[0] = v98;
  v103[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v104 < 0)
    operator delete((void *)v103[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v105);
}

void sub_191063CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t E5DB::RunCommand::GetHelpCSV(E5DB::RunCommand *this)
{
  char *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *__p[2];
  unsigned __int8 v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  v2 = (char *)operator new(0x2A0uLL);
  memcpy(v2, &off_1E2DD0F30, 0x2A0uLL);
  (*(void (**)(void **__return_ptr, E5DB::RunCommand *))(*(_QWORD *)this + 16))(__p, this);
  if ((v13 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=[", 2);
  if ((char)v13 < 0)
    operator delete(__p[0]);
  for (i = 0; i != 672; i += 32)
  {
    v7 = *(_QWORD *)&v2[i];
    if (v7)
    {
      v8 = strlen(*(const char **)&v2[i]);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::stringbuf::str();
  operator delete(v2);
  v14[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v10;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v17);
}

void sub_191063F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5DB::RunCommand::Execute(uint64_t a1, uint64_t a2, char **a3)
{
  void *v6;
  std::string::size_type v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  std::string *p_p;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  std::string *v19;
  std::__fs::filesystem::path::__string_view v20;
  std::string::size_type v21;
  uint64_t v22;
  char v23;
  _BOOL4 v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *words;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  std::string::size_type size;
  std::__fs::filesystem::path *v39;
  const std::__fs::filesystem::path *v40;
  void *v41;
  std::string::size_type v42;
  std::__fs::filesystem::path *v43;
  const std::__fs::filesystem::path *v44;
  void *v45;
  char v46;
  uint64_t *v47;
  char v48;
  std::string __p;
  uint64_t v50;
  char v51;
  double v52;
  unsigned __int8 v53;
  int64x2_t v54;
  char v55;
  uint64_t v56;
  unsigned __int8 v57;
  std::string *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  __int16 v63;
  std::string v64;
  __int16 v65;
  __int16 v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  std::string v73;
  char v74[23];
  char v75[9];
  char *v76;
  __int128 v77;
  std::__fs::filesystem::path v78;
  _BYTE v79[32];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 40))
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&__p, "main");
    v50 = 1;
    v51 = 0;
    v52 = 0.0;
    v53 = 0;
    v54 = vdupq_n_s64(1uLL);
    v55 = 1;
    v56 = 0x4008000000000000;
    v57 = 0;
    v63 = 0;
    v59 = 0;
    v60 = 0;
    v58 = 0;
    v61 = 0;
    memset(&v64, 0, sizeof(v64));
    v65 = 0;
    v66 = 1;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    memset(&v73, 0, sizeof(v73));
    strcpy(v75, "\t");
    strcpy(v74, "IOSurface");
    v75[2] = 0;
    v6 = operator new(0x2A0uLL);
    v7 = (std::string::size_type)v6 + 672;
    v78.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v78.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v6 + 672;
    memcpy(v6, &off_1E2DD0F30, 0x2A0uLL);
    v78.__pn_.__r_.__value_.__l.__size_ = v7;
    v76 = (char *)operator new(0x20uLL);
    v77 = xmmword_191A72610;
    strcpy(v76, "f:r:c:o:t:b:s:i:y:v:d:p:wakegz");
    *(_QWORD *)v79 = &off_1E2DD11E0;
    *(_QWORD *)&v79[8] = &__p;
    *(_QWORD *)&v79[24] = v79;
    E5DB::ParseOptions(a3, (uint64_t)&v76, (const option **)&v78, (uint64_t)v79);
    v8 = *(_QWORD **)&v79[24];
    if (*(_BYTE **)&v79[24] == v79)
    {
      v9 = 4;
      v8 = v79;
    }
    else
    {
      if (!*(_QWORD *)&v79[24])
        goto LABEL_16;
      v9 = 5;
    }
    (*(void (**)(_QWORD *))(*v8 + 8 * v9))(v8);
LABEL_16:
    if (SHIBYTE(v77) < 0)
      operator delete(v76);
    if (v78.__pn_.__r_.__value_.__r.__words[0])
    {
      v78.__pn_.__r_.__value_.__l.__size_ = v78.__pn_.__r_.__value_.__r.__words[0];
      operator delete(v78.__pn_.__r_.__value_.__l.__data_);
    }
    v16 = HIBYTE(v60);
    if (v60 < 0)
      v16 = v59;
    HIBYTE(v65) = v16 != 0;
    v17 = v63;
    if ((v63 & 0x80u) != 0)
      v17 = v62;
    v18 = v17 == 0;
    LOBYTE(v66) = v18;
    if (!v16)
    {
LABEL_46:
      if (v68 && v18)
      {
        v26 = "Error: Input file not specified when using Input vector index (--input_index) \n";
LABEL_54:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v26, 79);
        goto LABEL_55;
      }
      v27 = v63;
      if ((v63 & 0x80u) != 0)
        v27 = v62;
      if (!v27 && HIBYTE(v63))
      {
        v26 = "Error: Input file not specified when using E5 trace format (--e5_trace_format)\n";
        goto LABEL_54;
      }
      if (HIBYTE(v65))
      {
        v29 = pdwriter_open();
        if (!v29)
        {
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)" Perf data file at ", 19);
          if (v60 >= 0)
            words = &v58;
          else
            words = v58->__r_.__value_.__r.__words;
          if (v60 >= 0)
            v32 = HIBYTE(v60);
          else
            v32 = v59;
          v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)words, v32);
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" could not be created.", 22);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v34);
          goto LABEL_55;
        }
      }
      else
      {
        v29 = 0;
      }
      if (v52 <= 0.0)
      {
        if (!v51 || !v57)
          goto LABEL_80;
        v36 = "Error: Requesting a number of repetitions (-r) is not compatible with requesting a fixed runtime (-t). Ple"
              "ase use only one of them. \n";
        v37 = 133;
      }
      else
      {
        if (!(v53 | v57))
        {
          v36 = "Error: Cadence (-c) is not compatible with -t, -a, -s or -b modes\n";
          v37 = 66;
          if (!v55 || v54.i64[1] != 1)
            goto LABEL_87;
LABEL_80:
          size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v64.__r_.__value_.__l.__size_;
          if (size)
          {
            v80 = 1065353216;
            v81 = 0;
            memset(v79, 0, sizeof(v79));
            v82 = 0;
            v83 = 0;
            v39 = (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v78.__pn_, &v64);
            E5DB::GetJSONFromFile(v39, v40);
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            if (SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v78.__pn_.__r_.__value_.__l.__data_);
            E5DB::RegressionTestConfigParser::~RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)v79);
          }
          else
          {
            v41 = 0;
          }
          v42 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v42 = v73.__r_.__value_.__l.__size_;
          if (v42)
          {
            v80 = 1065353216;
            v81 = 0;
            memset(v79, 0, sizeof(v79));
            v82 = 0;
            v83 = 0;
            v43 = (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v78.__pn_, &v73);
            E5DB::GetJSONFromFile(v43, v44);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            if (SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v78.__pn_.__r_.__value_.__l.__data_);
            E5DB::RegressionTestConfigParser::~RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)v79);
          }
          else
          {
            v45 = 0;
          }
          if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "*"))
          {
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v79, a1);
            v46 = sub_1910649B4((_QWORD **)a2, (uint64_t)&__p, v29, (uint64_t)v79, v41, v45, (uint64_t)&v73);
            if ((v79[23] & 0x80000000) != 0)
              operator delete(*(void **)v79);
          }
          else
          {
            v47 = *(uint64_t **)(E5RT::ProgramLibrary::GetExportedFunctions(*(E5RT::ProgramLibrary **)(a2 + 40)) + 16);
            if (v47)
            {
              v46 = 0;
              do
              {
                std::string::operator=(&__p, (const std::string *)(v47 + 2));
                (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v79, a1);
                v48 = sub_1910649B4((_QWORD **)a2, (uint64_t)&__p, v29, (uint64_t)v79, v41, v45, (uint64_t)&v73);
                if ((v79[23] & 0x80000000) != 0)
                  operator delete(*(void **)v79);
                v46 |= v48;
                v47 = (uint64_t *)*v47;
              }
              while (v47);
            }
            else
            {
              v46 = 0;
            }
          }
          if (v29)
            pdwriter_close();

          v15 = v46 & 1;
          goto LABEL_56;
        }
        v36 = "Error: Cadence (-c) is not compatible with -t, -a, -s or -b modes\n";
        v37 = 66;
      }
LABEL_87:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v36, v37);
      v15 = 0;
      goto LABEL_56;
    }
    memset(&v78, 0, sizeof(v78));
    if (v60 >= 0)
      v19 = (std::string *)&v58;
    else
      v19 = v58;
    std::string::append[abi:ne180100]<char const*,0>(&v78.__pn_, v19, (std::string *)((char *)v19 + v16));
    v20 = std::__fs::filesystem::path::__filename(&v78);
    if (v20.__size_)
    {
      v21 = (std::string::size_type)&v78;
      if ((v78.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = v78.__pn_.__r_.__value_.__r.__words[0];
      std::string::erase(&v78.__pn_, (std::string::size_type)&v20.__data_[-v21], 0xFFFFFFFFFFFFFFFFLL);
    }
    if ((SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(std::__fs::filesystem::path *)v79 = v78;
      v22 = HIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]);
      v23 = HIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]);
      if ((v78.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = *(_QWORD *)&v79[8];
      if (!v22)
        goto LABEL_36;
LABEL_43:
      LODWORD(v78.__pn_.__r_.__value_.__l.__data_) = 0;
      v78.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
      std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)v79, (std::error_code *)&v78);
      v24 = LODWORD(v78.__pn_.__r_.__value_.__l.__data_) == 0;
      if ((v79[23] & 0x80) != 0)
      {
LABEL_37:
        operator delete(*(void **)v79);
        if (!v24)
          goto LABEL_55;
LABEL_45:
        v18 = v66;
        goto LABEL_46;
      }
LABEL_44:
      if (!v24)
      {
LABEL_55:
        v15 = 1;
LABEL_56:
        sub_191065110((uint64_t)&__p);
        return v15 << 32;
      }
      goto LABEL_45;
    }
    std::string::__init_copy_ctor_external((std::string *)v79, v78.__pn_.__r_.__value_.__l.__data_, v78.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v78.__pn_.__r_.__value_.__l.__data_);
      v35 = v79[23];
      v23 = v79[23];
      if (v79[23] < 0)
        v35 = *(_QWORD *)&v79[8];
      if (v35)
        goto LABEL_43;
    }
    else
    {
      v25 = v79[23];
      v23 = v79[23];
      if (v79[23] < 0)
        v25 = *(_QWORD *)&v79[8];
      if (v25)
        goto LABEL_43;
    }
LABEL_36:
    v24 = 1;
    if (v23 < 0)
      goto LABEL_37;
    goto LABEL_44;
  }
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"E5 bundle not loaded. Cannot execute run command.", 49);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  v12 = *(_QWORD **)a2;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v14 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = 1;
  return v15 << 32;
}

void sub_191064718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  uint64_t v16;

  if (*(char *)(v16 - 137) < 0)
    operator delete(*(void **)(v16 - 160));

  sub_191065110((uint64_t)&__p);
  _Unwind_Resume(a1);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) != 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

uint64_t sub_1910649B4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  const std::locale::facet *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  BOOL v35;
  uint64_t v37;
  uint64_t v41;
  int v42;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  const std::locale::facet *v75;
  uint64_t v77;
  std::locale *v78;
  _OWORD *v79;
  _QWORD **v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  std::locale *v88;
  _OWORD *v89;
  _QWORD **v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  std::locale *v97;
  _OWORD *v98;
  _QWORD **v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  _QWORD v107[6];
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD v112[3];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  uint64_t v118;
  std::locale v119;
  _BYTE v120[24];
  _BYTE *v121;
  std::locale v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v118 = a3;
  v117 = a5;
  v116 = a6;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"Running ", 8);
  v12 = *((char *)a1 + 39);
  if (v12 >= 0)
    v13 = (uint64_t)(a1 + 2);
  else
    v13 = (uint64_t)a1[2];
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)a1 + 39);
  else
    v14 = (uint64_t)a1[3];
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" function = ", 12);
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = a2;
  else
    v18 = *(_QWORD *)a2;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a2 + 23);
  else
    v19 = *(_QWORD *)(a2 + 8);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for ", 5);
  if (*(_BYTE *)(a2 + 88))
  {
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = " seconds";
    v23 = 8;
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    v24 = (_QWORD *)std::ostream::operator<<();
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" repetitions", 12);
    v22 = " per stream";
    v23 = 11;
  }
  else
  {
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = " repetitions";
    v23 = 12;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (*(double *)(a2 + 40) > 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)" at cadence = ", 14);
    std::ostream::operator<<();
  }
  if (*(_BYTE *)(a2 + 177))
  {
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)" Output at = ", 13);
    v26 = *(char *)(a2 + 119);
    if (v26 >= 0)
      v27 = a2 + 96;
    else
      v27 = *(_QWORD *)(a2 + 96);
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(a2 + 119);
    else
      v28 = *(_QWORD *)(a2 + 104);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)*a1 + *(_QWORD *)(**a1 - 24)));
  v29 = std::locale::use_facet(&v122, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  v114 = 0;
  v115 = 0;
  v113 = 0;
  memset(v112, 0, sizeof(v112));
  v30 = *(_QWORD *)(a2 + 24);
  v110 = 0;
  v111 = v30;
  v109 = 0;
  v108 = 0;
  v31 = a2 + 288;
  v32 = *(unsigned __int8 *)(a2 + 311);
  if ((v32 & 0x80) != 0)
  {
    v34 = *(_QWORD *)(a2 + 296);
    if (v34 != 9
      || (**(_QWORD **)v31 == 0x6361667275534F49 ? (v35 = *(_BYTE *)(*(_QWORD *)v31 + 8) == 101) : (v35 = 0), !v35))
    {
      if (v34 == 13)
      {
        if (**(_QWORD **)v31 == 0x6F6C6C4170616548 && *(_QWORD *)(*(_QWORD *)v31 + 5) == 0x64657461636F6C6CLL)
        {
LABEL_74:
          v50 = 1;
LABEL_77:
          v108 = v50;
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"Set I/O buffer of type: ", 24);
          v52 = *(char *)(a2 + 311);
          if (v52 >= 0)
            v53 = a2 + 288;
          else
            v53 = *(_QWORD *)(a2 + 288);
          if (v52 >= 0)
            v54 = *(unsigned __int8 *)(a2 + 311);
          else
            v54 = *(_QWORD *)(a2 + 296);
          v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
          goto LABEL_84;
        }
        v34 = *(_QWORD *)(a2 + 296);
      }
      if (v34 == 9)
      {
        v37 = *(_QWORD *)v31;
        if (**(_QWORD **)v31 == 0x65666675424C544DLL && *(_BYTE *)(*(_QWORD *)v31 + 8) == 114)
          goto LABEL_75;
        if (*(_QWORD *)(a2 + 296) == 9)
        {
LABEL_63:
          v41 = *(_QWORD *)v37;
          v42 = *(unsigned __int8 *)(v37 + 8);
          if (v41 != 0x6361667275535845 || v42 != 101)
            goto LABEL_67;
          v50 = 3;
          goto LABEL_77;
        }
      }
LABEL_67:
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[1], (uint64_t)"Error: Unrecognized buffer type: ", 33);
      v45 = *(char *)(a2 + 311);
      if (v45 >= 0)
        v46 = a2 + 288;
      else
        v46 = *(_QWORD *)(a2 + 288);
      if (v45 >= 0)
        v47 = *(unsigned __int8 *)(a2 + 311);
      else
        v47 = *(_QWORD *)(a2 + 296);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)". Please check the help message for all acceptable buffer types.\n", 65);
      v49 = 1;
      goto LABEL_91;
    }
  }
  else
  {
    if (v32 != 9)
    {
      if (v32 != 13)
        goto LABEL_67;
      if (*(_QWORD *)v31 != 0x6F6C6C4170616548 || *(_QWORD *)(a2 + 293) != 0x64657461636F6C6CLL)
        goto LABEL_67;
      goto LABEL_74;
    }
    if (*(_QWORD *)v31 != 0x6361667275534F49 || *(_BYTE *)(a2 + 296) != 101)
    {
      if (*(_QWORD *)v31 != 0x65666675424C544DLL || *(_BYTE *)(a2 + 296) != 114)
      {
        v37 = a2 + 288;
        goto LABEL_63;
      }
LABEL_75:
      v50 = 2;
      goto LABEL_77;
    }
  }
LABEL_84:
  v107[0] = a1;
  v107[1] = a2;
  v107[2] = &v116;
  v107[3] = a7;
  v107[4] = &v117;
  v107[5] = &v108;
  v97 = &v122;
  v98 = v112;
  v99 = a1;
  v100 = a2;
  v101 = v107;
  v102 = &v115;
  v103 = &v111;
  v104 = &v114;
  v105 = &v110;
  v106 = &v118;
  v87 = a2;
  v88 = &v122;
  v89 = v112;
  v90 = a1;
  v91 = v107;
  v92 = &v115;
  v93 = &v114;
  v94 = &v110;
  v95 = &v109;
  v96 = &v118;
  v77 = a2;
  v78 = &v122;
  v79 = v112;
  v80 = a1;
  v81 = v107;
  v82 = &v115;
  v83 = &v114;
  v84 = &v110;
  v85 = &v109;
  v86 = &v118;
  v121 = 0;
  v56 = operator new(0x38uLL);
  *v56 = &off_1E2DD1260;
  v56[1] = a2;
  v56[2] = &v97;
  v56[3] = &v87;
  v56[4] = &v77;
  v56[5] = &v111;
  v56[6] = &v109;
  v121 = v56;
  v49 = E5DB::SafeExecute((uint64_t)v120);
  v64 = v121;
  if (v121 == v120)
  {
    v65 = 4;
    v64 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_89;
    v65 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::locale *, _OWORD *, _QWORD **, _QWORD *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t, std::locale *, _OWORD *, _QWORD **, _QWORD *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, std::locale *, _OWORD *))(*v64 + 8 * v65))(v64, v57, v58, v59, v60, v61, v62, v63, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97,
    v98);
LABEL_89:
  if ((v49 & 1) == 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"Executed ", 9);
    v66 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" repetitions in ", 16);
    v67 = (_QWORD *)std::ostream::operator<<();
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" ms. ", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Median runtime: ", 16);
    v69 = (_QWORD *)std::ostream::operator<<();
    v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" ms. ", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"ExecuteStream peak memory: ", 27);
    v71 = (_QWORD *)std::ostream::operator<<();
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" KB. ", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Throughput: ", 12);
    v73 = (_QWORD *)std::ostream::operator<<();
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" inf/sec.", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(_QWORD *)(*v74 - 24)));
    v75 = std::locale::use_facet(&v119, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
    std::locale::~locale(&v119);
    std::ostream::put();
    std::ostream::flush();
  }
LABEL_91:

  return v49;
}

void sub_191065090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,void *a59,uint64_t a60,std::locale a61)
{
  std::locale::~locale(&a61);

  _Unwind_Resume(a1);
}

uint64_t sub_191065110(uint64_t a1)
{
  if (*(char *)(a1 + 311) < 0)
  {
    operator delete(*(void **)(a1 + 288));
    if ((*(char *)(a1 + 287) & 0x80000000) == 0)
    {
LABEL_3:
      if (!*(_BYTE *)(a1 + 256))
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 264));
  if (!*(_BYTE *)(a1 + 256))
    goto LABEL_8;
LABEL_7:
  if (*(char *)(a1 + 255) < 0)
  {
    operator delete(*(void **)(a1 + 232));
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_12;
    goto LABEL_9;
  }
LABEL_8:
  if (!*(_BYTE *)(a1 + 224))
    goto LABEL_12;
LABEL_9:
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
LABEL_12:
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_14:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_15;
LABEL_19:
      operator delete(*(void **)(a1 + 96));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_20;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    goto LABEL_19;
LABEL_15:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)a1);
  return a1;
}

void sub_19106520C()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *sub_191065220(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DD11E0;
  result[1] = v3;
  return result;
}

uint64_t sub_191065254(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DD11E0;
  a2[1] = v2;
  return result;
}

void sub_191065270(uint64_t a1, _DWORD *a2)
{
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  const void *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  const void *v16;
  size_t v17;
  std::string::size_type v18;
  std::string *v19;
  const void *v20;
  size_t v21;
  std::string::size_type v22;
  std::string *v23;
  const void *v24;
  size_t v25;
  std::string::size_type v26;
  std::string *v27;
  const void *v28;
  size_t v29;
  std::string::size_type v30;
  std::string *v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string __dst;

  switch(*a2)
  {
    case 'a':
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 72) = 0;
      return;
    case 'b':
      v3 = (const void *)*MEMORY[0x1E0C844D0];
      v4 = strlen((const char *)*MEMORY[0x1E0C844D0]);
      if (v4 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_94;
      v5 = v4;
      if (v4 >= 0x17)
      {
        v35 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v35 = v4 | 7;
        v36 = v35 + 1;
        p_dst = (std::string *)operator new(v35 + 1);
        __dst.__r_.__value_.__l.__size_ = v5;
        __dst.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
        p_dst = &__dst;
        if (!v4)
          goto LABEL_45;
      }
      memmove(p_dst, v3, v5);
LABEL_45:
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) = std::stoi(&__dst, 0, 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_83;
      return;
    case 'c':
      v7 = (const void *)*MEMORY[0x1E0C844D0];
      v8 = strlen((const char *)*MEMORY[0x1E0C844D0]);
      if (v8 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_94;
      v9 = v8;
      if (v8 >= 0x17)
      {
        v37 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v37 = v8 | 7;
        v38 = v37 + 1;
        v10 = (std::string *)operator new(v37 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
        v10 = &__dst;
        if (!v8)
          goto LABEL_51;
      }
      memmove(v10, v7, v9);
LABEL_51:
      v10->__r_.__value_.__s.__data_[v9] = 0;
      *(double *)(*(_QWORD *)(a1 + 8) + 40) = std::stod(&__dst, 0);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_83;
      return;
    case 'd':
    case 'f':
    case 'i':
    case 'o':
    case 'u':
    case 'y':
      goto LABEL_96;
    case 'e':
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 144) = 1;
      return;
    case 'g':
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 312) = 1;
      return;
    case 'k':
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 179) = 1;
      return;
    case 'p':
      v11 = *(_QWORD *)(a1 + 8);
      v12 = (void *)(v11 + 200);
      v13 = (const void *)*MEMORY[0x1E0C844D0];
      if (*(_BYTE *)(v11 + 224))
        goto LABEL_96;
      v14 = strlen((const char *)*MEMORY[0x1E0C844D0]);
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_95;
      v15 = v14;
      if (v14 >= 0x17)
      {
        v53 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v53 = v14 | 7;
        v54 = v53 + 1;
        v12 = operator new(v53 + 1);
        *(_QWORD *)(v11 + 208) = v15;
        *(_QWORD *)(v11 + 216) = v54 | 0x8000000000000000;
        *(_QWORD *)(v11 + 200) = v12;
      }
      else
      {
        *(_BYTE *)(v11 + 223) = v14;
        if (!v14)
          goto LABEL_88;
      }
      memmove(v12, v13, v15);
LABEL_88:
      *((_BYTE *)v12 + v15) = 0;
      *(_BYTE *)(v11 + 224) = 1;
      return;
    case 'r':
      v16 = (const void *)*MEMORY[0x1E0C844D0];
      v17 = strlen((const char *)*MEMORY[0x1E0C844D0]);
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_94;
      v18 = v17;
      if (v17 >= 0x17)
      {
        v39 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v39 = v17 | 7;
        v40 = v39 + 1;
        v19 = (std::string *)operator new(v39 + 1);
        __dst.__r_.__value_.__l.__size_ = v18;
        __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17;
        v19 = &__dst;
        if (!v17)
          goto LABEL_57;
      }
      memmove(v19, v16, v18);
LABEL_57:
      v19->__r_.__value_.__s.__data_[v18] = 0;
      v41 = std::stoi(&__dst, 0, 10);
      v42 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v42 + 24) = v41;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v42 = *(_QWORD *)(a1 + 8);
      }
      *(_BYTE *)(v42 + 32) = 1;
      return;
    case 's':
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 48) = 1;
      v20 = (const void *)*MEMORY[0x1E0C844D0];
      if (!*(_BYTE *)*MEMORY[0x1E0C844D0])
        return;
      v21 = strlen((const char *)*MEMORY[0x1E0C844D0]);
      if (v21 > 0x7FFFFFFFFFFFFFF7)
LABEL_94:
        std::string::__throw_length_error[abi:ne180100]();
      v22 = v21;
      if (v21 >= 0x17)
      {
        v51 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v51 = v21 | 7;
        v52 = v51 + 1;
        v23 = (std::string *)operator new(v51 + 1);
        __dst.__r_.__value_.__l.__size_ = v22;
        __dst.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21;
        v23 = &__dst;
        if (!v21)
          goto LABEL_82;
      }
      memmove(v23, v20, v22);
LABEL_82:
      v23->__r_.__value_.__s.__data_[v22] = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) = std::stoi(&__dst, 0, 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_83;
      return;
    case 't':
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 88) = 1;
      v24 = (const void *)*MEMORY[0x1E0C844D0];
      v25 = strlen((const char *)*MEMORY[0x1E0C844D0]);
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_94;
      v26 = v25;
      if (v25 >= 0x17)
      {
        v43 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v43 = v25 | 7;
        v44 = v43 + 1;
        v27 = (std::string *)operator new(v43 + 1);
        __dst.__r_.__value_.__l.__size_ = v26;
        __dst.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v25;
        v27 = &__dst;
        if (!v25)
          goto LABEL_64;
      }
      memmove(v27, v24, v26);
LABEL_64:
      v27->__r_.__value_.__s.__data_[v26] = 0;
      *(double *)(*(_QWORD *)(a1 + 8) + 80) = (double)std::stoi(&__dst, 0, 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_83;
      return;
    case 'v':
      v28 = (const void *)*MEMORY[0x1E0C844D0];
      v29 = strlen((const char *)*MEMORY[0x1E0C844D0]);
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_94;
      v30 = v29;
      if (v29 >= 0x17)
      {
        v45 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v45 = v29 | 7;
        v46 = v45 + 1;
        v31 = (std::string *)operator new(v45 + 1);
        __dst.__r_.__value_.__l.__size_ = v30;
        __dst.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29;
        v31 = &__dst;
        if (!v29)
          goto LABEL_70;
      }
      memmove(v31, v28, v30);
LABEL_70:
      v31->__r_.__value_.__s.__data_[v30] = 0;
      v47 = std::stoi(&__dst, 0, 10);
      v48 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v48 + 192))
        *(_BYTE *)(v48 + 192) = 1;
      *(_QWORD *)(v48 + 184) = v47;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_83:
        operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    case 'w':
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 176) = 1;
      return;
    case 'x':
      v32 = *(_QWORD *)(a1 + 8);
      v33 = (void *)(v32 + 232);
      v34 = (const void *)*MEMORY[0x1E0C844D0];
      if (*(_BYTE *)(v32 + 256))
LABEL_96:
        JUMPOUT(0x19401C808);
      v49 = strlen((const char *)*MEMORY[0x1E0C844D0]);
      if (v49 > 0x7FFFFFFFFFFFFFF7)
LABEL_95:
        std::string::__throw_length_error[abi:ne180100]();
      v50 = v49;
      if (v49 >= 0x17)
      {
        v55 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v49 | 7) != 0x17)
          v55 = v49 | 7;
        v56 = v55 + 1;
        v33 = operator new(v55 + 1);
        *(_QWORD *)(v32 + 240) = v50;
        *(_QWORD *)(v32 + 248) = v56 | 0x8000000000000000;
        *(_QWORD *)(v32 + 232) = v33;
      }
      else
      {
        *(_BYTE *)(v32 + 255) = v49;
        if (!v49)
          goto LABEL_93;
      }
      memmove(v33, v34, v50);
LABEL_93:
      *((_BYTE *)v33 + v50) = 0;
      *(_BYTE *)(v32 + 256) = 1;
      return;
    case 'z':
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 313) = 1;
      return;
    default:
      return;
  }
}

void sub_191065A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_191065A40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1"
                     "_9allocatorIcEEEENS6_IS8_EEEERNS0_14RunCommandArgsEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_tr"
                                "aitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERNS0_14RunCommandArgsEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERNS0_14RunCommandArgsEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERNS0_14RunCommandArgsEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191065AAC()
{
  return &unk_1E2DD1240;
}

void sub_191065ABC()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_191065AD0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DD1260;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_191065B18(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DD1260;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_191065B48(uint64_t a1)
{
  sub_191065BC8(a1 + 8);
}

uint64_t sub_191065B50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112bas"
                     "ic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_E3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKN"
                                "St3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_E3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_E3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_E3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_191065BBC()
{
  return &unk_1E2DD1340;
}

void sub_191065BC8(uint64_t a1)
{
  uint64_t v1;
  pid_t v2;
  _QWORD **v3;
  uint64_t v4;
  E5RT::ExecutionStreamImpl **v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  pid_t v12;
  _QWORD **v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *p_shared_weak_owners;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  int64_t v38;
  char *v39;
  char *v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  char *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  pid_t v64;
  double *v65;
  rusage_info_t *v66;
  double v67;
  _QWORD **v68;
  uint64_t v69;
  double v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  char v77;
  pid_t v78;
  double *v79;
  uint64_t v80;
  double v81;
  _QWORD **v82;
  uint64_t v83;
  double v84;
  char *v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _BYTE *v89;
  char *v90;
  char **v91;
  _BYTE *v92;
  _BYTE *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  __int128 *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  pid_t v108;
  _QWORD **v109;
  _BYTE *v110;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  double v116;
  double v117;
  _QWORD *v118;
  _QWORD *v119;
  const std::locale::facet *v120;
  unint64_t v121;
  pid_t v122;
  _QWORD **v123;
  uint64_t v124;
  std::chrono::steady_clock::time_point v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v130;
  std::chrono::steady_clock::time_point v131;
  double v132;
  _BYTE *v133;
  double v134;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  double *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  pid_t v156;
  double *v157;
  rusage_info_t *v158;
  _QWORD **v159;
  uint64_t v160;
  double v161;
  uint64_t v162;
  unint64_t v163;
  double *v164;
  double v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  pid_t v171;
  _QWORD **v172;
  uint64_t v173;
  E5RT::ExecutionStreamImpl **v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  pthread_t *p_t;
  int64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  std::thread *v183;
  char *v184;
  std::thread *v185;
  std::thread *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  std::thread *v192;
  char *v193;
  __int128 *v194;
  uint64_t v195;
  __int128 v196;
  _opaque_pthread_t *v197;
  std::thread *v198;
  std::thread *v199;
  pid_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  void *v215;
  _QWORD *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _OWORD *v222;
  char *v223;
  uint64_t v224;
  __int128 v225;
  double *v226;
  unint64_t *v227;
  _QWORD **v228;
  uint64_t v229;
  double v230;
  double v231;
  uint64_t v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  E5RT::ExecutionStreamImpl **v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  E5RT::ExecutionStreamImpl **v241;
  unint64_t *v242;
  unint64_t v243;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  std::thread *v249;
  std::thread *v250;
  std::thread *v251;
  char *v252;
  char *v253;
  void *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::thread *v258;
  std::thread *v259;
  std::thread *v260;
  std::__shared_weak_count *t;
  unint64_t *v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  char *v266;
  char *v267;
  void *v268;
  void *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  double v276;
  unint64_t *v277;
  unint64_t v278;
  char v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v284;
  unint64_t *v285;
  unint64_t v286;
  char *v287;
  unint64_t v288;
  char *v289;
  unint64_t v290;
  _BYTE *v291;
  char *v292;
  char **v293;
  _BYTE *v294;
  _BYTE *v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  pid_t v300;
  _QWORD **v301;
  uint64_t v302;
  std::chrono::steady_clock::time_point v303;
  pthread_t *v304;
  int64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  char *v309;
  pthread_t *v310;
  char *v311;
  std::thread *v312;
  std::thread *v313;
  int64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  std::thread *v319;
  char *v320;
  uint64_t *v321;
  uint64_t v322;
  __int128 v323;
  _opaque_pthread_t *v324;
  std::thread *v325;
  std::thread *j;
  double *v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  double v334;
  double *v335;
  int64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  _BYTE *v341;
  double *v342;
  unint64_t v343;
  double *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _OWORD *v348;
  double *v349;
  uint64_t v350;
  __int128 v351;
  unint64_t v352;
  pid_t v353;
  double *v354;
  unint64_t *v355;
  _QWORD **v356;
  uint64_t v357;
  double v358;
  double v359;
  uint64_t v360;
  unint64_t v361;
  double v362;
  uint64_t v363;
  std::thread *v364;
  std::thread *v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  char *v372;
  void *v373;
  void *v374;
  std::runtime_error *exception;
  std::chrono::steady_clock::time_point v376;
  std::chrono::steady_clock::time_point v377;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v378;
  std::chrono::steady_clock::time_point v379;
  uint64_t *v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  uint64_t *v383;
  std::__shared_weak_count *v384;
  unint64_t v385;
  unint64_t v386;
  E5RT::ExecutionStreamImpl **v387;
  _BYTE v388[24];
  __int128 v389;
  char *v390;
  void *__p;
  __int128 v392;
  void **v393;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v394;
  unint64_t *v395;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v396;
  __int128 v397;
  unint64_t v398;
  std::thread *v399;
  __int128 v400;
  void *v401;
  __int128 v402;
  std::thread *v403;
  std::__shared_weak_count *v404;
  unint64_t v405;
  char *v406;
  __int128 v407;

  if (*(double *)(*(_QWORD *)a1 + 40) > 0.0)
  {
    v1 = *(_QWORD *)(a1 + 8);
    getpid();
    proc_reset_footprint_interval();
    v2 = getpid();
    proc_pid_rusage(v2, 6, *(rusage_info_t **)v1);
    *(double *)(*(_QWORD *)(v1 + 8) + 40) = (double)*(unint64_t *)(*(_QWORD *)v1 + 72);
    v3 = *(_QWORD ***)(v1 + 16);
    v4 = *(_QWORD *)(v1 + 24);
    __p = operator new(0x28uLL);
    v392 = xmmword_191A7A8C0;
    strcpy((char *)__p, "RunStreamAtCadence::PreAllocation");
    sub_191068AFC(*v3, *(_BYTE *)(v4 + 179), (uint64_t)&__p);
    if (SHIBYTE(v392) < 0)
      operator delete(__p);
    sub_191068D20((uint64_t *)&v403, *(uint64_t **)(v1 + 32));
    E5RT::ExecutionStream::CreateExecutionStream(&__p);
    v5 = (E5RT::ExecutionStreamImpl **)__p;
    if (__p)
    {
      v6 = (std::__shared_weak_count *)operator new();
      v7 = (std::__shared_weak_count_vtbl *)__p;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3238;
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6[1].__vftable = v7;
      v8 = v404;
      v401 = v403;
      *(_QWORD *)&v402 = v404;
      if (!v404)
        goto LABEL_85;
    }
    else
    {
      v6 = 0;
      v8 = v404;
      v401 = v403;
      *(_QWORD *)&v402 = v404;
      if (!v404)
        goto LABEL_85;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v60 = __ldxr(p_shared_owners);
    while (__stxr(v60 + 1, p_shared_owners));
LABEL_85:
    v382 = v6;
    E5RT::ExecutionStream::EncodeOperation((uint64_t)v5, (__int128 *)&v401);
    v61 = (std::__shared_weak_count *)v402;
    if (!(_QWORD)v402)
      goto LABEL_89;
    v62 = (unint64_t *)(v402 + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      if (!*(_BYTE *)(*(_QWORD *)(v1 + 24) + 176))
      {
LABEL_91:
        v64 = getpid();
        proc_pid_rusage(v64, 6, *(rusage_info_t **)v1);
        v66 = *(rusage_info_t **)v1;
        v65 = *(double **)(v1 + 8);
        v67 = v65[5];
        v65[1] = (double)*(unint64_t *)(*(_QWORD *)v1 + 280) - v67;
        v65[3] = (double)(unint64_t)v66[9] - v67;
        v68 = *(_QWORD ***)(v1 + 16);
        v69 = *(_QWORD *)(v1 + 24);
        __p = operator new(0x28uLL);
        v392 = xmmword_191A72430;
        strcpy((char *)__p, "RunStreamAtCadence::PostAllocation");
        sub_191068AFC(*v68, *(_BYTE *)(v69 + 179), (uint64_t)&__p);
        if (SHIBYTE(v392) < 0)
        {
          operator delete(__p);
          v70 = 0.0;
          if (*(_BYTE *)(*(_QWORD *)(v1 + 24) + 313))
            goto LABEL_103;
        }
        else
        {
          v70 = 0.0;
          if (*(_BYTE *)(*(_QWORD *)(v1 + 24) + 313))
            goto LABEL_103;
        }
        if (v6)
        {
          v71 = (unint64_t *)&v6->__shared_owners_;
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        std::chrono::steady_clock::now();
        E5RT::ExecutionStream::ExecuteStreamSync(v5);
        std::chrono::steady_clock::now();
        if (!v6)
        {
          if (!*(_BYTE *)(*(_QWORD *)(v1 + 24) + 313))
            goto LABEL_136;
          goto LABEL_142;
        }
        v73 = (unint64_t *)&v6->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
LABEL_103:
        if (!*(_BYTE *)(*(_QWORD *)(v1 + 24) + 313))
        {
          if (v6)
          {
            v75 = (unint64_t *)&v6->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
            v77 = 0;
LABEL_137:
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            E5RT::ExecutionStream::ExecuteStreamSync(v5);
            v70 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000);
            if ((v77 & 1) == 0)
            {
              v112 = (unint64_t *)&v6->__shared_owners_;
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            goto LABEL_142;
          }
LABEL_136:
          v77 = 1;
          goto LABEL_137;
        }
LABEL_142:
        v114 = *(_QWORD *)(v1 + 24);
        v115 = *(_QWORD *)(v114 + 24);
        v116 = *(double *)(v114 + 40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(**(_QWORD ***)(v1 + 16), (uint64_t)"Expected runtime: ", 18);
        v117 = (double)v115 * 1000000.0 / v116;
        v118 = (_QWORD *)std::ostream::operator<<();
        v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)" seconds", 8);
        std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(*v119 - 24)));
        v120 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v120->__vftable[2].~facet_0)(v120, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        __p = 0;
        v392 = 0uLL;
        v121 = vcvtpd_u64_f64(v117 / v70);
        if (v121)
        {
          if (v121 >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          __p = operator new(8 * v121);
          *(_QWORD *)&v392 = __p;
          *((_QWORD *)&v392 + 1) = (char *)__p + 8 * v121;
        }
        getpid();
        proc_reset_footprint_interval();
        v122 = getpid();
        proc_pid_rusage(v122, 6, *(rusage_info_t **)v1);
        *(double *)(*(_QWORD *)(v1 + 8) + 32) = (double)*(unint64_t *)(*(_QWORD *)v1 + 72);
        v123 = *(_QWORD ***)(v1 + 16);
        v124 = *(_QWORD *)(v1 + 24);
        v406 = (char *)operator new(0x20uLL);
        v407 = xmmword_191A72610;
        strcpy(v406, "RunStreamAtCadence::PostWarmup");
        sub_191068AFC(*v123, *(_BYTE *)(v124 + 179), (uint64_t)&v406);
        if (SHIBYTE(v407) < 0)
          operator delete(v406);
        v125.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v126 = 0;
        v127 = 0.0;
        if (v117 <= (double)((std::chrono::steady_clock::now().__d_.__rep_ - v125.__d_.__rep_) / 1000))
        {
LABEL_179:
          std::chrono::steady_clock::now();
          v156 = getpid();
          proc_pid_rusage(v156, 6, *(rusage_info_t **)v1);
          v158 = *(rusage_info_t **)v1;
          v157 = *(double **)(v1 + 8);
          *v157 = (double)*(unint64_t *)(*(_QWORD *)v1 + 280) - v157[4] + v157[3];
          v157[2] = (double)(unint64_t)v158[48];
          v157[6] = (double)(unint64_t)v158[47];
          v159 = *(_QWORD ***)(v1 + 16);
          v160 = *(_QWORD *)(v1 + 24);
          v406 = (char *)operator new(0x20uLL);
          v407 = xmmword_191A78340;
          strcpy(v406, "RunStreamAtCadence::PostRun");
          sub_191068AFC(*v159, *(_BYTE *)(v160 + 179), (uint64_t)&v406);
          if (SHIBYTE(v407) < 0)
            operator delete(v406);
          v161 = 0.0;
          **(_QWORD **)(v1 + 48) = v126;
          v162 = v392 - (_QWORD)__p;
          if ((void *)v392 != __p)
          {
            std::__sort<std::__less<double,double> &,double *>();
            v163 = (unint64_t)(v162 >> 3) >> 1;
            if ((v162 & 8) != 0)
            {
              if (v163 >= (uint64_t)(v392 - (_QWORD)__p) >> 3)
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              v161 = *((double *)__p + v163);
            }
            else
            {
              v161 = (*((double *)__p + v163 - 1) + *((double *)__p + v163)) * 0.5;
            }
          }
          **(double **)(v1 + 56) = v161;
          v164 = *(double **)(v1 + 40);
          v165 = 0.0;
          if (*v164 != 0.0)
            v165 = (double)(unint64_t)(1000000 * *(_QWORD *)(*(_QWORD *)(v1 + 24) + 24)) / *v164;
          **(double **)(v1 + 64) = v165;
          sub_19106A96C(**(_QWORD **)(v1 + 72), *(_QWORD *)(v1 + 8), *(_QWORD *)(*(_QWORD *)(v1 + 24) + 24), *(unsigned __int8 *)(*(_QWORD *)(v1 + 24) + 72), 1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(*(_QWORD *)(v1 + 24) + 313));
          if (__p)
          {
            *(_QWORD *)&v392 = __p;
            operator delete(__p);
          }
          if (v382)
          {
            v166 = (unint64_t *)&v382->__shared_owners_;
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
              std::__shared_weak_count::__release_weak(v382);
            }
          }
          v168 = v404;
          if (v404)
          {
            v169 = (unint64_t *)&v404->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          return;
        }
        v128 = 0.0;
        v129 = 1000000.0 / v116;
        v387 = v5;
        while (1)
        {
          v131.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          E5RT::ExecutionStream::ExecuteStreamSync(v5);
          v132 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v131.__d_.__rep_) / 1000);
          **(double **)(v1 + 40) = **(double **)(v1 + 40) + v132;
          v133 = (_BYTE *)v392;
          if ((unint64_t)v392 < *((_QWORD *)&v392 + 1))
          {
            *(double *)v392 = v132;
            *(_QWORD *)&v392 = v133 + 8;
            v134 = v129 - v132 - v128;
            if (v134 <= 0.0)
              goto LABEL_150;
            goto LABEL_149;
          }
          v135 = v125.__d_.__rep_;
          v136 = v1;
          v137 = __p;
          v138 = v392 - (_QWORD)__p;
          v139 = (uint64_t)(v392 - (_QWORD)__p) >> 3;
          v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v141 = *((_QWORD *)&v392 + 1) - (_QWORD)__p;
          if ((uint64_t)(*((_QWORD *)&v392 + 1) - (_QWORD)__p) >> 2 > v140)
            v140 = v141 >> 2;
          v142 = (unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v140;
          if (v142)
          {
            if (v142 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v143 = (char *)operator new(8 * v142);
            v144 = (double *)&v143[8 * v139];
            *v144 = v132;
            v145 = (uint64_t)(v144 + 1);
            if (v133 == v137)
            {
LABEL_169:
              v1 = v136;
              v125.__d_.__rep_ = v135;
              goto LABEL_175;
            }
          }
          else
          {
            v143 = 0;
            v144 = (double *)(8 * v139);
            *(double *)(8 * v139) = v132;
            v145 = 8 * v139 + 8;
            if (v133 == v137)
              goto LABEL_169;
          }
          v146 = v133 - 8 - v137;
          if (v146 < 0x58)
            break;
          v147 = v133 - &v143[v138];
          v1 = v136;
          v125.__d_.__rep_ = v135;
          if (v147 < 0x20)
            goto LABEL_174;
          v148 = (v146 >> 3) + 1;
          v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
          v150 = &v133[-v149];
          v144 = (double *)((char *)v144 - v149);
          v151 = &v143[8 * v139 - 16];
          v152 = (__int128 *)(v133 - 16);
          v153 = v148 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v154 = *v152;
            *((_OWORD *)v151 - 1) = *(v152 - 1);
            *(_OWORD *)v151 = v154;
            v151 -= 32;
            v152 -= 2;
            v153 -= 4;
          }
          while (v153);
          v133 = v150;
          if (v148 != (v148 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_174;
LABEL_175:
          __p = v144;
          *(_QWORD *)&v392 = v145;
          *((_QWORD *)&v392 + 1) = &v143[8 * v142];
          if (v137)
            operator delete(v137);
          v5 = v387;
          *(_QWORD *)&v392 = v145;
          v134 = v129 - v132 - v128;
          if (v134 <= 0.0)
            goto LABEL_150;
LABEL_149:
          usleep(v134);
LABEL_150:
          v127 = v127 + v132 * v132;
          v130 = (std::chrono::steady_clock::now().__d_.__rep_ - v131.__d_.__rep_) / 1000;
          if (v126)
            v128 = (v128 + (double)v130 - v129) * 0.3 + v128 * 0.7;
          else
            v128 = (double)v130 - v129;
          ++v126;
          if (v117 <= (double)((std::chrono::steady_clock::now().__d_.__rep_ - v125.__d_.__rep_) / 1000))
            goto LABEL_179;
        }
        v1 = v136;
        v125.__d_.__rep_ = v135;
        do
        {
LABEL_174:
          v155 = *((_QWORD *)v133 - 1);
          v133 -= 8;
          *((_QWORD *)v144-- - 1) = v155;
        }
        while (v133 != v137);
        goto LABEL_175;
      }
    }
    else
    {
LABEL_89:
      if (!*(_BYTE *)(*(_QWORD *)(v1 + 24) + 176))
        goto LABEL_91;
    }
    E5RT::ExecutionStream::PreWireInUseAllocations(v5);
    goto LABEL_91;
  }
  if (*(_BYTE *)(*(_QWORD *)a1 + 72))
  {
    i = *(uint64_t **)(a1 + 16);
    v10 = *i;
    v11 = *(_QWORD *)(*i + 56);
    v398 = 0;
    if (!v11 || !*(_QWORD *)(v10 + 64) || !*(_QWORD *)(v10 + 24))
      goto LABEL_473;
    if (!*(_BYTE *)(v10 + 88) || !*(_BYTE *)(v10 + 313))
    {
      v381 = a1;
      v406 = 0;
      v407 = 0uLL;
      v403 = 0;
      v404 = 0;
      v405 = 0;
      v401 = 0;
      v402 = 0uLL;
      getpid();
      proc_reset_footprint_interval();
      v12 = getpid();
      proc_pid_rusage(v12, 6, (rusage_info_t *)i[1]);
      *(double *)(i[2] + 40) = (double)*(unint64_t *)(i[1] + 72);
      v13 = (_QWORD **)i[3];
      v14 = *i;
      __p = operator new(0x30uLL);
      v392 = xmmword_191A72DA0;
      strcpy((char *)__p, "RunStreamAtThroughputSync::PreAllocation");
      sub_191068AFC(*v13, *(_BYTE *)(v14 + 179), (uint64_t)&__p);
      if (SHIBYTE(v392) < 0)
        operator delete(__p);
      v15 = 0;
      while (1)
      {
        sub_191068D20((uint64_t *)&v399, (uint64_t *)i[4]);
        v16 = v404;
        if ((unint64_t)v404 >= v405)
        {
          p_shared_weak_owners = (std::__shared_weak_count *)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v403, (__int128 *)&v399);
        }
        else
        {
          v404->__vftable = (std::__shared_weak_count_vtbl *)v399;
          v17 = v400;
          v16->__shared_owners_ = v400;
          if (v17)
          {
            v18 = (unint64_t *)(v17 + 8);
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          p_shared_weak_owners = (std::__shared_weak_count *)&v16->__shared_weak_owners_;
        }
        v404 = p_shared_weak_owners;
        E5RT::ExecutionStream::CreateExecutionStream(&__p);
        *(_QWORD *)&v389 = __p;
        if (__p)
        {
          v21 = (_QWORD *)operator new();
          v22 = __p;
          *v21 = &unk_1E2DC3238;
          v21[1] = 0;
          v21[2] = 0;
          v21[3] = v22;
          *((_QWORD *)&v389 + 1) = v21;
          v23 = (_QWORD *)v402;
          if ((unint64_t)v402 >= *((_QWORD *)&v402 + 1))
            goto LABEL_30;
        }
        else
        {
          v389 = 0uLL;
          v21 = 0;
          v23 = (_QWORD *)v402;
          if ((unint64_t)v402 >= *((_QWORD *)&v402 + 1))
          {
LABEL_30:
            v26 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v401, &v389);
            goto LABEL_31;
          }
        }
        *v23 = v389;
        v23[1] = v21;
        if (v21)
        {
          v24 = v21 + 1;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = v23 + 2;
LABEL_31:
        *(_QWORD *)&v402 = v26;
        v27 = *((_QWORD *)v401 + 2 * v15);
        v28 = *(_OWORD *)&v403[2 * v15].__t_;
        v397 = v28;
        if (*((_QWORD *)&v28 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        E5RT::ExecutionStream::EncodeOperation(v27, &v397);
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
        if (!*((_QWORD *)&v397 + 1))
          goto LABEL_38;
        v32 = (unint64_t *)(*((_QWORD *)&v397 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (v33)
        {
LABEL_38:
          v34 = *i;
          if (!*(_BYTE *)(*i + 176))
            goto LABEL_40;
LABEL_39:
          E5RT::ExecutionStream::PreWireInUseAllocations(*((E5RT::ExecutionStreamImpl ***)v401 + 2 * v15));
          v34 = *i;
          goto LABEL_40;
        }
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        v34 = *i;
        if (*(_BYTE *)(*i + 176))
          goto LABEL_39;
LABEL_40:
        __p = 0;
        v392 = 0uLL;
        v35 = *(_QWORD *)(v34 + 24);
        if (v35)
        {
          if (v35 >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          __p = operator new(8 * v35);
          *(_QWORD *)&v392 = __p;
          *((_QWORD *)&v392 + 1) = (char *)__p + 8 * v35;
        }
        v36 = (_QWORD *)v407;
        if ((unint64_t)v407 >= *((_QWORD *)&v407 + 1))
        {
          v41 = std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(&v406, (uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)v407 = 0;
          v36[1] = 0;
          v36[2] = 0;
          v37 = __p;
          v38 = v392 - (_QWORD)__p;
          if ((void *)v392 != __p)
          {
            if (v38 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v39 = (char *)operator new(v392 - (_QWORD)__p);
            *v36 = v39;
            v36[1] = v39;
            v40 = &v39[8 * (v38 >> 3)];
            v36[2] = v40;
            memcpy(v39, v37, v38);
            v36[1] = v40;
          }
          v41 = (char *)(v36 + 3);
        }
        *(_QWORD *)&v407 = v41;
        if (__p)
        {
          *(_QWORD *)&v392 = __p;
          operator delete(__p);
        }
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v389 + 1);
        if (!*((_QWORD *)&v389 + 1))
          goto LABEL_55;
        v43 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
          v45 = (std::__shared_weak_count *)v400;
          if ((_QWORD)v400)
          {
LABEL_56:
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
        }
        else
        {
LABEL_55:
          v45 = (std::__shared_weak_count *)v400;
          if ((_QWORD)v400)
            goto LABEL_56;
        }
        if (++v15 == v11)
        {
          v78 = getpid();
          proc_pid_rusage(v78, 6, (rusage_info_t *)i[1]);
          v80 = i[1];
          v79 = (double *)i[2];
          v81 = v79[5];
          v79[1] = (double)*(unint64_t *)(v80 + 280) - v81;
          v79[3] = (double)*(unint64_t *)(v80 + 72) - v81;
          v82 = (_QWORD **)i[3];
          v83 = *i;
          __p = operator new(0x30uLL);
          v392 = xmmword_191A6FFC0;
          strcpy((char *)__p, "RunStreamAtThroughputSync::PostAllocation");
          sub_191068AFC(*v82, *(_BYTE *)(v83 + 179), (uint64_t)&__p);
          if (SHIBYTE(v392) < 0)
            operator delete(__p);
          v84 = 0.0;
          if (!*(_BYTE *)(*i + 313))
          {
            v235 = *(E5RT::ExecutionStreamImpl ***)v401;
            v234 = (std::__shared_weak_count *)*((_QWORD *)v401 + 1);
            if (v234)
            {
              v236 = (unint64_t *)&v234->__shared_owners_;
              do
                v237 = __ldxr(v236);
              while (__stxr(v237 + 1, v236));
            }
            std::chrono::steady_clock::now();
            E5RT::ExecutionStream::ExecuteStreamSync(v235);
            std::chrono::steady_clock::now();
            if (v234)
            {
              v238 = (unint64_t *)&v234->__shared_owners_;
              do
                v239 = __ldaxr(v238);
              while (__stlxr(v239 - 1, v238));
              if (!v239)
              {
                ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                std::__shared_weak_count::__release_weak(v234);
              }
            }
          }
          if (!*(_BYTE *)(*i + 313))
          {
            v241 = *(E5RT::ExecutionStreamImpl ***)v401;
            v240 = (std::__shared_weak_count *)*((_QWORD *)v401 + 1);
            if (v240)
            {
              v242 = (unint64_t *)&v240->__shared_owners_;
              do
                v243 = __ldxr(v242);
              while (__stxr(v243 + 1, v242));
            }
            v244 = std::chrono::steady_clock::now().__d_.__rep_;
            E5RT::ExecutionStream::ExecuteStreamSync(v241);
            v84 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v244) / 1000);
            if (v240)
            {
              v245 = (unint64_t *)&v240->__shared_owners_;
              do
                v246 = __ldaxr(v245);
              while (__stlxr(v246 - 1, v245));
              if (!v246)
              {
                ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                std::__shared_weak_count::__release_weak(v240);
              }
            }
          }
          v383 = i;
          v386 = v11;
          if (*(_BYTE *)(*i + 88))
          {
            *(_QWORD *)(*i + 24) = (uint64_t)(*(double *)(*i + 80) / (v84 / 1000000.0));
            v85 = v406;
            if ((char *)v407 != v406)
            {
              v86 = 0;
              while (1)
              {
                v87 = &v85[24 * v86];
                v88 = *(_QWORD *)(*i + 24);
                v89 = *(_BYTE **)v87;
                if (v88 > (uint64_t)(*((_QWORD *)v87 + 2) - *(_QWORD *)v87) >> 3)
                  break;
LABEL_117:
                ++v86;
                v85 = v406;
                if (v86 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v407 - (_QWORD)v406) >> 3))
                  goto LABEL_130;
              }
              if (v88 >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v90 = &v85[24 * v86];
              v93 = (_BYTE *)*((_QWORD *)v90 + 1);
              v91 = (char **)(v90 + 8);
              v92 = v93;
              v94 = (char *)operator new(8 * v88);
              v95 = v93 - v89;
              v96 = &v94[(v93 - v89) & 0xFFFFFFFFFFFFFFF8];
              v97 = v96;
              if (v93 != v89)
              {
                v98 = v92 - 8 - v89;
                if (v98 < 0x58)
                {
                  v97 = &v94[(v92 - v89) & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_127;
                }
                v97 = &v94[(v92 - v89) & 0xFFFFFFFFFFFFFFF8];
                if (v92 - v94 - (v95 & 0xFFFFFFFFFFFFFFF8) < 0x20)
                  goto LABEL_499;
                v99 = v95 >> 3;
                v100 = (v98 >> 3) + 1;
                v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                v102 = &v92[-v101];
                v97 = &v96[-v101];
                v103 = &v94[8 * v99 - 16];
                v104 = (__int128 *)(v92 - 16);
                v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v106 = *v104;
                  *((_OWORD *)v103 - 1) = *(v104 - 1);
                  *(_OWORD *)v103 = v106;
                  v103 -= 32;
                  v104 -= 2;
                  v105 -= 4;
                }
                while (v105);
                v92 = v102;
                if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_499:
                  do
                  {
LABEL_127:
                    v107 = *((_QWORD *)v92 - 1);
                    v92 -= 8;
                    *((_QWORD *)v97 - 1) = v107;
                    v97 -= 8;
                  }
                  while (v92 != v89);
                }
              }
              *(_QWORD *)v87 = v97;
              *v91 = v96;
              *((_QWORD *)v87 + 2) = &v94[8 * v88];
              i = v383;
              v11 = v386;
              if (v89)
                operator delete(v89);
              goto LABEL_117;
            }
          }
LABEL_130:
          v396 = std::chrono::steady_clock::now().__d_.__rep_;
          __p = (void *)*i;
          *(_QWORD *)&v392 = &v401;
          *((_QWORD *)&v392 + 1) = &v406;
          v393 = (void **)&v403;
          v394 = &v396;
          v395 = &v398;
          v399 = 0;
          v400 = 0uLL;
          std::vector<std::thread>::reserve((uint64_t)&v399, v11);
          v389 = 0uLL;
          v390 = 0;
          if (v11 >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          *(_QWORD *)&v389 = operator new(8 * v11);
          *((_QWORD *)&v389 + 1) = v389;
          v390 = (char *)(v389 + 8 * v11);
          getpid();
          proc_reset_footprint_interval();
          v108 = getpid();
          proc_pid_rusage(v108, 6, (rusage_info_t *)i[1]);
          *(double *)(i[2] + 32) = (double)*(unint64_t *)(i[1] + 72);
          v109 = (_QWORD **)i[3];
          v110 = (_BYTE *)*i;
          *(_QWORD *)v388 = operator new(0x28uLL);
          *(_OWORD *)&v388[8] = xmmword_191A72440;
          strcpy(*(char **)v388, "RunStreamAtThroughputSync::PostWarmup");
          sub_191068AFC(*v109, v110[179], (uint64_t)v388);
          if ((v388[23] & 0x80000000) != 0)
            operator delete(*(void **)v388);
          v379.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (v11 == 1)
          {
            sub_19106B484(&__p, 0);
LABEL_234:
            v377.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v200 = getpid();
            proc_pid_rusage(v200, 6, (rusage_info_t *)i[1]);
            v201 = 0;
            v202 = v406;
            while (1)
            {
              v203 = &v202[24 * v201];
              v204 = *(_QWORD *)v203;
              if (*((_QWORD *)v203 + 1) != *(_QWORD *)v203)
                break;
LABEL_235:
              if (++v201 == v386)
              {
                *(double *)v383[5] = (double)((v377.__d_.__rep_ - v379.__d_.__rep_) / 1000);
                v227 = (unint64_t *)v383[1];
                v226 = (double *)v383[2];
                *v226 = (double)v227[35] - v226[4] + v226[3];
                v226[2] = (double)v227[48];
                v226[6] = (double)v227[47];
                v228 = (_QWORD **)v383[3];
                v229 = *v383;
                *(_QWORD *)v388 = operator new(0x28uLL);
                *(_OWORD *)&v388[8] = xmmword_191A72430;
                strcpy(*(char **)v388, "RunStreamAtThroughputSync::PostRun");
                sub_191068AFC(*v228, *(_BYTE *)(v229 + 179), (uint64_t)v388);
                if ((v388[23] & 0x80000000) != 0)
                  operator delete(*(void **)v388);
                v230 = 0.0;
                v231 = 0.0;
                v232 = *((_QWORD *)&v389 + 1) - v389;
                if (*((_QWORD *)&v389 + 1) != (_QWORD)v389)
                {
                  std::__sort<std::__less<double,double> &,double *>();
                  v233 = (unint64_t)(v232 >> 3) >> 1;
                  if ((v232 & 8) != 0)
                  {
                    if (v233 >= (uint64_t)(*((_QWORD *)&v389 + 1) - v389) >> 3)
                      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                    v231 = *(double *)(v389 + 8 * v233);
                  }
                  else
                  {
                    v231 = (*(double *)(v389 + 8 * v233 - 8) + *(double *)(v389 + 8 * v233)) * 0.5;
                  }
                }
                *(double *)v383[6] = v231;
                if (*(double *)v383[5] != 0.0)
                {
                  v247 = atomic_load(&v398);
                  v230 = (double)(1000000 * v247) / *(double *)v383[5];
                }
                *(double *)v383[7] = v230;
                v248 = atomic_load(&v398);
                *(_QWORD *)v383[8] = v248;
                sub_19106A96C(*(_QWORD *)v383[9], v383[2], v248, *(unsigned __int8 *)(*v383 + 72), 0, v383[3], *v383, *(_BYTE *)(*v383 + 313));
                if ((_QWORD)v389)
                {
                  *((_QWORD *)&v389 + 1) = v389;
                  operator delete((void *)v389);
                }
                v249 = v399;
                if (v399)
                {
                  v250 = (std::thread *)v400;
                  v251 = v399;
                  if ((std::thread *)v400 != v399)
                  {
                    do
                      std::thread::~thread(v250 - 1);
                    while (v250 != v249);
                    v251 = v399;
                  }
                  *(_QWORD *)&v400 = v249;
                  operator delete(v251);
                }
                v252 = (char *)v401;
                if (v401)
                {
                  v253 = (char *)v402;
                  v254 = v401;
                  if ((void *)v402 != v401)
                  {
                    do
                    {
                      v255 = (std::__shared_weak_count *)*((_QWORD *)v253 - 1);
                      if (v255)
                      {
                        v256 = (unint64_t *)&v255->__shared_owners_;
                        do
                          v257 = __ldaxr(v256);
                        while (__stlxr(v257 - 1, v256));
                        if (!v257)
                        {
                          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                          std::__shared_weak_count::__release_weak(v255);
                        }
                      }
                      v253 -= 16;
                    }
                    while (v253 != v252);
                    v254 = v401;
                  }
                  *(_QWORD *)&v402 = v252;
                  operator delete(v254);
                }
                v258 = v403;
                if (v403)
                {
                  v259 = (std::thread *)v404;
                  v260 = v403;
                  if (v404 != (std::__shared_weak_count *)v403)
                  {
                    do
                    {
                      t = (std::__shared_weak_count *)v259[-1].__t_;
                      if (t)
                      {
                        v262 = (unint64_t *)&t->__shared_owners_;
                        do
                          v263 = __ldaxr(v262);
                        while (__stlxr(v263 - 1, v262));
                        if (!v263)
                        {
                          ((void (*)(std::__shared_weak_count *))t->__on_zero_shared)(t);
                          std::__shared_weak_count::__release_weak(t);
                        }
                      }
                      v259 -= 2;
                    }
                    while (v259 != v258);
                    v260 = v403;
                  }
                  v404 = (std::__shared_weak_count *)v258;
                  operator delete(v260);
                }
                v264 = v406;
                if (v406)
                {
                  v265 = v407;
                  v266 = v406;
                  if ((char *)v407 != v406)
                  {
                    v267 = (char *)v407;
                    do
                    {
                      v269 = (void *)*((_QWORD *)v267 - 3);
                      v267 -= 24;
                      v268 = v269;
                      if (v269)
                      {
                        *(_QWORD *)(v265 - 16) = v268;
                        operator delete(v268);
                      }
                      v265 = (uint64_t)v267;
                    }
                    while (v267 != v264);
                    goto LABEL_470;
                  }
                  goto LABEL_471;
                }
                goto LABEL_472;
              }
            }
            v205 = 0;
            v206 = (char *)*((_QWORD *)&v389 + 1);
            while (2)
            {
              if (v206 < v390)
              {
                *(_QWORD *)v206 = *(_QWORD *)(v204 + 8 * v205);
                v207 = (uint64_t)(v206 + 8);
              }
              else
              {
                v209 = (char *)v389;
                v210 = &v206[-v389];
                v211 = (uint64_t)&v206[-v389] >> 3;
                v212 = v211 + 1;
                if ((unint64_t)(v211 + 1) >> 61)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v213 = (uint64_t)&v390[-v389];
                if ((uint64_t)&v390[-v389] >> 2 > v212)
                  v212 = v213 >> 2;
                if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8)
                  v214 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v214 = v212;
                if (v214)
                {
                  if (v214 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v215 = operator new(8 * v214);
                  v216 = (char *)v215 + 8 * v211;
                  *v216 = *(_QWORD *)(v204 + 8 * v205);
                  v207 = (uint64_t)(v216 + 1);
                  if (v206 == v209)
                    goto LABEL_255;
                }
                else
                {
                  v215 = 0;
                  v216 = (_QWORD *)(8 * v211);
                  *(_QWORD *)(8 * v211) = *(_QWORD *)(v204 + 8 * v205);
                  v207 = 8 * v211 + 8;
                  if (v206 == v209)
                    goto LABEL_255;
                }
                v217 = v206 - 8 - v209;
                if (v217 >= 0x168)
                {
                  if (&v210[(_QWORD)v215 - 8 - (v217 & 0xFFFFFFFFFFFFFFF8)] > &v210[(_QWORD)v215 - 8])
                  {
                    v218 = v206;
                  }
                  else if (&v206[-(v217 & 0xFFFFFFFFFFFFFFF8) - 8] > v206 - 8)
                  {
                    v218 = v206;
                  }
                  else if ((unint64_t)(v206 - &v210[(_QWORD)v215]) >= 0x20)
                  {
                    v220 = (v217 >> 3) + 1;
                    v221 = 8 * (v220 & 0x3FFFFFFFFFFFFFFCLL);
                    v218 = &v206[-v221];
                    v216 = (_QWORD *)((char *)v216 - v221);
                    v222 = (char *)v215 + 8 * v211 - 16;
                    v223 = v206 - 16;
                    v224 = v220 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v225 = *(_OWORD *)v223;
                      *(v222 - 1) = *((_OWORD *)v223 - 1);
                      *v222 = v225;
                      v222 -= 2;
                      v223 -= 32;
                      v224 -= 4;
                    }
                    while (v224);
                    if (v220 == (v220 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_255;
                  }
                  else
                  {
                    v218 = v206;
                  }
                }
                else
                {
                  v218 = v206;
                }
                do
                {
                  v219 = *((_QWORD *)v218 - 1);
                  v218 -= 8;
                  *--v216 = v219;
                }
                while (v218 != v209);
LABEL_255:
                *(_QWORD *)&v389 = v216;
                *((_QWORD *)&v389 + 1) = v207;
                v390 = (char *)v215 + 8 * v214;
                if (v209)
                {
                  operator delete(v209);
                  v202 = v406;
                }
              }
              *((_QWORD *)&v389 + 1) = v207;
              ++v205;
              v208 = &v202[24 * v201];
              v204 = *(_QWORD *)v208;
              v206 = (char *)v207;
              if (v205 >= (uint64_t)(*((_QWORD *)v208 + 1) - *(_QWORD *)v208) >> 3)
                goto LABEL_235;
              continue;
            }
          }
          v388[0] = 0;
          p_t = (pthread_t *)v400;
          while (2)
          {
            if ((unint64_t)p_t < *((_QWORD *)&v400 + 1))
            {
              sub_19106BF4C(p_t++, &__p, v388);
              goto LABEL_205;
            }
            v178 = (char *)p_t - (char *)v399;
            v179 = ((char *)p_t - (char *)v399) >> 3;
            if ((unint64_t)(v179 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v180 = (uint64_t)(*((_QWORD *)&v400 + 1) - (_QWORD)v399) >> 2;
            if (v180 <= v179 + 1)
              v180 = v179 + 1;
            if (*((_QWORD *)&v400 + 1) - (_QWORD)v399 >= 0x7FFFFFFFFFFFFFF8uLL)
              v181 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v181 = v180;
            if (v181)
            {
              if (v181 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v182 = (char *)operator new(8 * v181);
            }
            else
            {
              v182 = 0;
            }
            v183 = (std::thread *)&v182[8 * v179];
            sub_19106BF4C(&v183->__t_, &__p, v388);
            v184 = &v182[8 * v181];
            p_t = &v183[1].__t_;
            v185 = v399;
            v186 = (std::thread *)v400;
            v187 = v400 - (_QWORD)v399;
            if ((std::thread *)v400 == v399)
            {
              v399 = (std::thread *)&v182[8 * v179];
              *(_QWORD *)&v400 = v183 + 1;
              *((_QWORD *)&v400 + 1) = v184;
              if (!v186)
                goto LABEL_205;
            }
            else
            {
              v188 = v187 - 8;
              if ((unint64_t)(v187 - 8) < 0x78)
                goto LABEL_500;
              v189 = v188 >> 3;
              if ((unint64_t)&v182[v178 - (v188 & 0xFFFFFFFFFFFFFFF8) - 8] < (unint64_t)v400
                && (unint64_t)v400 - 8 * v189 - 8 < (unint64_t)v183)
              {
                goto LABEL_500;
              }
              v190 = v189 + 1;
              v191 = 8 * (v190 & 0x3FFFFFFFFFFFFFFCLL);
              v192 = (std::thread *)(v400 - v191);
              v183 = (std::thread *)((char *)v183 - v191);
              v193 = &v182[8 * v179 - 16];
              v194 = (__int128 *)(v400 - 16);
              v195 = v190 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v196 = *v194;
                *((_OWORD *)v193 - 1) = *(v194 - 1);
                *(_OWORD *)v193 = v196;
                *(v194 - 1) = 0uLL;
                *v194 = 0uLL;
                v193 -= 32;
                v194 -= 2;
                v195 -= 4;
              }
              while (v195);
              v186 = v192;
              if (v190 != (v190 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_500:
                do
                {
                  v197 = v186[-1].__t_;
                  --v186;
                  v183[-1].__t_ = v197;
                  --v183;
                  v186->__t_ = 0;
                }
                while (v186 != v185);
              }
              v186 = v399;
              v198 = (std::thread *)v400;
              v399 = v183;
              *(_QWORD *)&v400 = p_t;
              *((_QWORD *)&v400 + 1) = v184;
              while (v198 != v186)
                std::thread::~thread(v198 - 1);
              if (!v186)
              {
LABEL_205:
                *(_QWORD *)&v400 = p_t;
                if (v386 <= ++v388[0])
                {
                  v199 = v399;
                  for (i = v383; v199 != (std::thread *)p_t; ++v199)
                    std::thread::join(v199);
                  goto LABEL_234;
                }
                continue;
              }
            }
            break;
          }
          operator delete(v186);
          goto LABEL_205;
        }
      }
    }
LABEL_494:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot run for a duration if we skip warmup runs.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v48 = *(uint64_t **)(a1 + 24);
  v49 = *v48;
  v50 = *(_QWORD *)(*v48 + 56);
  *(_QWORD *)&v397 = 0;
  v385 = v50;
  if (!v50 || !*(_QWORD *)(v49 + 64) || !*(_QWORD *)(v49 + 24))
    goto LABEL_473;
  v381 = a1;
  if (*(_BYTE *)(v49 + 313) && *(_BYTE *)(v49 + 88))
    goto LABEL_494;
  v406 = 0;
  v407 = 0uLL;
  v51 = v50;
  do
  {
    __p = 0;
    v392 = 0uLL;
    v52 = *(_QWORD *)(*v48 + 24);
    if (v52)
    {
      if (v52 >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      __p = operator new(16 * v52);
      *(_QWORD *)&v392 = __p;
      *((_QWORD *)&v392 + 1) = (char *)__p + 16 * v52;
    }
    v53 = (_QWORD *)v407;
    if ((unint64_t)v407 >= *((_QWORD *)&v407 + 1))
    {
      v58 = std::vector<std::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__push_back_slow_path<std::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>> const&>(&v406, (uint64_t)&__p);
    }
    else
    {
      *(_QWORD *)v407 = 0;
      v53[1] = 0;
      v53[2] = 0;
      v54 = __p;
      v55 = v392 - (_QWORD)__p;
      if ((void *)v392 != __p)
      {
        if (v55 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v56 = (char *)operator new(v392 - (_QWORD)__p);
        *v53 = v56;
        v53[1] = v56;
        v53[2] = &v56[16 * (v55 >> 4)];
        v57 = v55 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v56, v54, v57);
        v53[1] = &v56[v57];
      }
      v58 = (char *)(v53 + 3);
    }
    *(_QWORD *)&v407 = v58;
    if (__p)
    {
      *(_QWORD *)&v392 = __p;
      operator delete(__p);
    }
    --v51;
  }
  while (v51);
  getpid();
  proc_reset_footprint_interval();
  v171 = getpid();
  proc_pid_rusage(v171, 6, (rusage_info_t *)v48[1]);
  *(double *)(v48[2] + 40) = (double)*(unint64_t *)(v48[1] + 72);
  v172 = (_QWORD **)v48[3];
  v173 = *v48;
  __p = operator new(0x30uLL);
  v392 = xmmword_191A6FFC0;
  strcpy((char *)__p, "RunStreamAtThroughputAsync::PreAllocation");
  sub_191068AFC(*v172, *(_BYTE *)(v173 + 179), (uint64_t)&__p);
  if (SHIBYTE(v392) < 0)
    operator delete(__p);
  __p = (void *)v48[4];
  *(_QWORD *)&v392 = *v48;
  *((_QWORD *)&v392 + 1) = &v406;
  v393 = (void **)&v397;
  E5RT::ExecutionStream::CreateExecutionStream(&v403);
  v174 = (E5RT::ExecutionStreamImpl **)v403;
  if (v403)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)v403;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3238;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v384 = v175;
  sub_191068D20((uint64_t *)&v389, (uint64_t *)v48[4]);
  *(_OWORD *)v388 = v389;
  if (*((_QWORD *)&v389 + 1))
  {
    v270 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
    do
      v271 = __ldxr(v270);
    while (__stxr(v271 + 1, v270));
  }
  E5RT::ExecutionStream::EncodeOperation((uint64_t)v174, (__int128 *)v388);
  v272 = *(std::__shared_weak_count **)&v388[8];
  if (*(_QWORD *)&v388[8])
  {
    v273 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  v275 = *v48;
  if (*(_BYTE *)(*v48 + 176))
  {
    E5RT::ExecutionStream::PreWireInUseAllocations(v174);
    v275 = *v48;
  }
  v276 = 0.0;
  if (!*(_BYTE *)(v275 + 313))
  {
    if (v175)
    {
      v280 = (unint64_t *)&v175->__shared_owners_;
      do
        v281 = __ldxr(v280);
      while (__stxr(v281 + 1, v280));
    }
    std::chrono::steady_clock::now();
    E5RT::ExecutionStream::ExecuteStreamSync(v174);
    std::chrono::steady_clock::now();
    if (!v175)
    {
      if (!*(_BYTE *)(*v48 + 313))
        goto LABEL_354;
      goto LABEL_360;
    }
    v282 = (unint64_t *)&v175->__shared_owners_;
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  if (!*(_BYTE *)(*v48 + 313))
  {
    if (v175)
    {
      v277 = (unint64_t *)&v175->__shared_owners_;
      do
        v278 = __ldxr(v277);
      while (__stxr(v278 + 1, v277));
      v279 = 0;
LABEL_355:
      v284 = std::chrono::steady_clock::now().__d_.__rep_;
      E5RT::ExecutionStream::ExecuteStreamSync(v174);
      v276 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v284) / 1000);
      if ((v279 & 1) == 0)
      {
        v285 = (unint64_t *)&v175->__shared_owners_;
        do
          v286 = __ldaxr(v285);
        while (__stlxr(v286 - 1, v285));
        if (!v286)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      goto LABEL_360;
    }
LABEL_354:
    v279 = 1;
    goto LABEL_355;
  }
LABEL_360:
  if (*(_BYTE *)(*v48 + 88))
  {
    *(_QWORD *)(*v48 + 24) = (uint64_t)(*(double *)(*v48 + 80) / (v276 / 1000000.0));
    v287 = v406;
    if ((char *)v407 != v406)
    {
      v288 = 0;
      do
      {
        v289 = &v287[24 * v288];
        v290 = *(_QWORD *)(*v48 + 24);
        v291 = *(_BYTE **)v289;
        if (v290 > (uint64_t)(*((_QWORD *)v289 + 2) - *(_QWORD *)v289) >> 4)
        {
          if (v290 >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v292 = &v287[24 * v288];
          v295 = (_BYTE *)*((_QWORD *)v292 + 1);
          v293 = (char **)(v292 + 8);
          v294 = v295;
          v296 = (char *)operator new(16 * v290);
          v297 = &v296[(v295 - v291) & 0xFFFFFFFFFFFFFFF0];
          v298 = v297;
          if (v295 != v291)
          {
            v299 = &v296[(v294 - v291) & 0xFFFFFFFFFFFFFFF0];
            do
            {
              v298 = v299 - 16;
              *((_OWORD *)v299 - 1) = *((_OWORD *)v294 - 1);
              v294 -= 16;
              v299 -= 16;
            }
            while (v294 != v291);
          }
          *(_QWORD *)v289 = v298;
          *v293 = v297;
          *((_QWORD *)v289 + 2) = &v296[16 * v290];
          if (v291)
            operator delete(v291);
        }
        ++v288;
        v287 = v406;
      }
      while (v288 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v407 - (_QWORD)v406) >> 3));
    }
  }
  v403 = 0;
  v404 = 0;
  v405 = 0;
  getpid();
  proc_reset_footprint_interval();
  v300 = getpid();
  proc_pid_rusage(v300, 6, (rusage_info_t *)v48[1]);
  *(double *)(v48[2] + 32) = (double)*(unint64_t *)(v48[1] + 72);
  v301 = (_QWORD **)v48[3];
  v302 = *v48;
  v401 = operator new(0x28uLL);
  v402 = xmmword_191A862A0;
  strcpy((char *)v401, "RunStreamAtThroughputAsync::PostWarmup");
  sub_191068AFC(*v301, *(_BYTE *)(v302 + 179), (uint64_t)&v401);
  if (SHIBYTE(v402) < 0)
    operator delete(v401);
  v303.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v304 = 0;
  LOBYTE(v401) = 0;
  do
  {
    if ((unint64_t)v304 < v405)
    {
      sub_19106C38C(v304++, &__p, (char *)&v401);
      goto LABEL_375;
    }
    v305 = (char *)v304 - (char *)v403;
    v306 = ((char *)v304 - (char *)v403) >> 3;
    if ((unint64_t)(v306 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v307 = (uint64_t)(v405 - (_QWORD)v403) >> 2;
    if (v307 <= v306 + 1)
      v307 = v306 + 1;
    if (v405 - (unint64_t)v403 >= 0x7FFFFFFFFFFFFFF8)
      v308 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v308 = v307;
    if (v308)
    {
      if (v308 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v309 = (char *)operator new(8 * v308);
    }
    else
    {
      v309 = 0;
    }
    v310 = (pthread_t *)&v309[8 * v306];
    sub_19106C38C(v310, &__p, (char *)&v401);
    v311 = &v309[8 * v308];
    v304 = v310 + 1;
    v312 = v403;
    v313 = (std::thread *)v404;
    v314 = (char *)v404 - (char *)v403;
    if (v404 == (std::__shared_weak_count *)v403)
    {
      v403 = (std::thread *)&v309[8 * v306];
      v405 = (unint64_t)v311;
      if (!v404)
        goto LABEL_375;
LABEL_400:
      operator delete(v313);
      goto LABEL_375;
    }
    v315 = v314 - 8;
    if ((unint64_t)(v314 - 8) < 0x78)
      goto LABEL_501;
    v316 = v315 >> 3;
    if (&v309[v305 - (v315 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v404 && (char *)v404 - 8 * v316 - 8 < (char *)v310)
      goto LABEL_501;
    v317 = v316 + 1;
    v318 = 8 * (v317 & 0x3FFFFFFFFFFFFFFCLL);
    v319 = (std::thread *)((char *)v404 - v318);
    v310 = (pthread_t *)((char *)v310 - v318);
    v320 = &v309[8 * v306 - 16];
    v321 = &v404[-1].__shared_owners_;
    v322 = v317 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v323 = *(_OWORD *)v321;
      *((_OWORD *)v320 - 1) = *((_OWORD *)v321 - 1);
      *(_OWORD *)v320 = v323;
      *((_OWORD *)v321 - 1) = 0uLL;
      *(_OWORD *)v321 = 0uLL;
      v320 -= 32;
      v321 -= 4;
      v322 -= 4;
    }
    while (v322);
    v313 = v319;
    if (v317 != (v317 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_501:
      do
      {
        v324 = v313[-1].__t_;
        --v313;
        *--v310 = v324;
        v313->__t_ = 0;
      }
      while (v313 != v312);
    }
    v313 = v403;
    v325 = (std::thread *)v404;
    v403 = (std::thread *)v310;
    v404 = (std::__shared_weak_count *)v304;
    v405 = (unint64_t)v311;
    while (v325 != v313)
      std::thread::~thread(v325 - 1);
    if (v313)
      goto LABEL_400;
LABEL_375:
    v404 = (std::__shared_weak_count *)v304;
    LOBYTE(v401) = (_BYTE)v401 + 1;
  }
  while (v385 > v401);
  v380 = v48;
  for (j = v403; j != (std::thread *)v304; ++j)
    std::thread::join(j);
  v378 = v303.__d_.__rep_;
  v376.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v327 = 0;
  v328 = 0;
  v401 = 0;
  v402 = 0uLL;
  v329 = v406;
  do
  {
    v331 = *(_QWORD *)&v329[24 * v328];
    if (*(_QWORD *)&v329[24 * v328 + 8] != v331)
    {
      v332 = 0;
      while (1)
      {
        v333 = (unsigned __int128)((uint64_t)(*(_QWORD *)(v331 + 16 * v332 + 8) - *(_QWORD *)(v331 + 16 * v332))
                                 * (__int128)0x20C49BA5E353F7CFLL) >> 64;
        v334 = (double)(uint64_t)((v333 >> 7) + ((unint64_t)v333 >> 63));
        if ((unint64_t)v327 >= *((_QWORD *)&v402 + 1))
          break;
        *v327 = v334;
        v330 = (uint64_t)(v327 + 1);
LABEL_409:
        *(_QWORD *)&v402 = v330;
        ++v332;
        v331 = *(_QWORD *)&v329[24 * v328];
        v327 = (double *)v330;
        if (v332 >= (*(_QWORD *)&v329[24 * v328 + 8] - v331) >> 4)
          goto LABEL_405;
      }
      v335 = (double *)v401;
      v336 = (char *)v327 - (_BYTE *)v401;
      v337 = ((char *)v327 - (_BYTE *)v401) >> 3;
      v338 = v337 + 1;
      if ((unint64_t)(v337 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v339 = *((_QWORD *)&v402 + 1) - (_QWORD)v401;
      if ((uint64_t)(*((_QWORD *)&v402 + 1) - (_QWORD)v401) >> 2 > v338)
        v338 = v339 >> 2;
      if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8)
        v340 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v340 = v338;
      if (v340)
      {
        if (v340 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v341 = operator new(8 * v340);
        v342 = (double *)&v341[8 * v337];
        *v342 = v334;
        v330 = (uint64_t)(v342 + 1);
        if (v327 == v335)
          goto LABEL_425;
      }
      else
      {
        v341 = 0;
        v342 = (double *)(8 * v337);
        *(double *)(8 * v337) = v334;
        v330 = 8 * v337 + 8;
        if (v327 == v335)
          goto LABEL_425;
      }
      v343 = (char *)(v327 - 1) - (char *)v335;
      if (v343 >= 0x168)
      {
        if (&v341[v336 - 8 - (v343 & 0xFFFFFFFFFFFFFFF8)] > &v341[v336 - 8])
        {
          v344 = v327;
        }
        else if ((double *)((char *)v327 - (v343 & 0xFFFFFFFFFFFFFFF8) - 8) > v327 - 1)
        {
          v344 = v327;
        }
        else if ((unint64_t)((char *)v327 - v341 - v336) >= 0x20)
        {
          v346 = (v343 >> 3) + 1;
          v347 = 8 * (v346 & 0x3FFFFFFFFFFFFFFCLL);
          v344 = &v327[v347 / 0xFFFFFFFFFFFFFFF8];
          v342 = (double *)((char *)v342 - v347);
          v348 = &v341[8 * v337 - 16];
          v349 = v327 - 2;
          v350 = v346 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v351 = *(_OWORD *)v349;
            *(v348 - 1) = *((_OWORD *)v349 - 1);
            *v348 = v351;
            v348 -= 2;
            v349 -= 4;
            v350 -= 4;
          }
          while (v350);
          if (v346 == (v346 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_425:
            v401 = v342;
            *(_QWORD *)&v402 = v330;
            *((_QWORD *)&v402 + 1) = &v341[8 * v340];
            if (v335)
            {
              operator delete(v335);
              v329 = v406;
            }
            goto LABEL_409;
          }
        }
        else
        {
          v344 = v327;
        }
      }
      else
      {
        v344 = v327;
      }
      do
      {
        v345 = *((_QWORD *)v344-- - 1);
        *((_QWORD *)v342-- - 1) = v345;
      }
      while (v344 != v335);
      goto LABEL_425;
    }
    v330 = (uint64_t)v327;
LABEL_405:
    ++v328;
    v327 = (double *)v330;
  }
  while (v328 != v385);
  v352 = atomic_load((unint64_t *)&v397);
  *(double *)v380[5] = (double)((v376.__d_.__rep_ - v378) / 1000);
  v353 = getpid();
  proc_pid_rusage(v353, 6, (rusage_info_t *)v380[1]);
  v355 = (unint64_t *)v380[1];
  v354 = (double *)v380[2];
  *v354 = (double)v355[35] - v354[4] + v354[3];
  v354[2] = (double)v355[48];
  v354[6] = (double)v355[47];
  v356 = (_QWORD **)v380[3];
  v357 = *v380;
  v399 = (std::thread *)operator new(0x28uLL);
  v400 = xmmword_191A78320;
  strcpy((char *)v399, "RunStreamAtThroughputAsync::PostRun");
  sub_191068AFC(*v356, *(_BYTE *)(v357 + 179), (uint64_t)&v399);
  if (SHIBYTE(v400) < 0)
    operator delete(v399);
  v358 = 0.0;
  v359 = 0.0;
  v360 = v402 - (_QWORD)v401;
  if ((void *)v402 != v401)
  {
    std::__sort<std::__less<double,double> &,double *>();
    v361 = (unint64_t)(v360 >> 3) >> 1;
    if ((v360 & 8) != 0)
    {
      if (v361 >= (uint64_t)(v402 - (_QWORD)v401) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v359 = *((double *)v401 + v361);
    }
    else
    {
      v359 = (*((double *)v401 + v361 - 1) + *((double *)v401 + v361)) * 0.5;
    }
  }
  *(double *)v380[6] = v359;
  v362 = *(double *)v380[5];
  if (v362 != 0.0)
    v358 = (double)(1000000 * v352) / v362;
  *(double *)v380[7] = v358;
  v363 = atomic_load((unint64_t *)&v397);
  *(_QWORD *)v380[8] = v363;
  sub_19106A96C(*(_QWORD *)v380[9], v380[2], v363, *(unsigned __int8 *)(*v380 + 72), 0, v380[3], *v380, *(_BYTE *)(*v380 + 313));
  if (v401)
  {
    *(_QWORD *)&v402 = v401;
    operator delete(v401);
  }
  v364 = v403;
  if (v403)
  {
    v365 = (std::thread *)v404;
    if (v404 != (std::__shared_weak_count *)v403)
    {
      do
        std::thread::~thread(v365 - 1);
      while (v365 != v364);
      v364 = v403;
    }
    operator delete(v364);
  }
  v366 = (std::__shared_weak_count *)*((_QWORD *)&v389 + 1);
  if (*((_QWORD *)&v389 + 1))
  {
    v367 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
    do
      v368 = __ldaxr(v367);
    while (__stlxr(v368 - 1, v367));
    if (!v368)
    {
      ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
      std::__shared_weak_count::__release_weak(v366);
    }
  }
  if (v384)
  {
    v369 = (unint64_t *)&v384->__shared_owners_;
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
    }
  }
  v264 = v406;
  if (v406)
  {
    v371 = v407;
    v266 = v406;
    if ((char *)v407 != v406)
    {
      v372 = (char *)v407;
      do
      {
        v374 = (void *)*((_QWORD *)v372 - 3);
        v372 -= 24;
        v373 = v374;
        if (v374)
        {
          *(_QWORD *)(v371 - 16) = v373;
          operator delete(v373);
        }
        v371 = (uint64_t)v372;
      }
      while (v372 != v264);
LABEL_470:
      v266 = v406;
    }
LABEL_471:
    *(_QWORD *)&v407 = v264;
    operator delete(v266);
  }
LABEL_472:
  a1 = v381;
LABEL_473:
  **(_QWORD **)(a1 + 32) = **(_QWORD **)(a1 + 40);
}

void sub_191068238(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19106824C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,std::__shared_weak_count *a23,uint64_t a24,std::locale a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  char v50;
  uint64_t v51;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;

  if ((v50 & 1) == 0)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (a23)
  {
    v55 = (unint64_t *)&a23->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
  }
  if (a14)
  {
    v57 = (unint64_t *)&a14->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  v59 = *(_QWORD *)(v51 - 168);
  if (v59)
  {
    v60 = *(_QWORD *)(v51 - 160);
    v61 = *(void **)(v51 - 168);
    if (v60 != v59)
    {
      v62 = *(_QWORD *)(v51 - 160);
      do
      {
        v64 = *(void **)(v62 - 24);
        v62 -= 24;
        v63 = v64;
        if (v64)
        {
          *(_QWORD *)(v60 - 16) = v63;
          operator delete(v63);
        }
        v60 = v62;
      }
      while (v62 != v59);
      v61 = *(void **)(v51 - 168);
    }
    *(_QWORD *)(v51 - 160) = v59;
    operator delete(v61);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_191068AFC(_QWORD *result, char a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  std::locale v27;

  if (a2)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, (uint64_t)"[ProcPidRusage]", 15);
    v5 = *(char *)(a3 + 23);
    if (v5 >= 0)
      v6 = a3;
    else
      v6 = *(_QWORD *)a3;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a3 + 23);
    else
      v7 = *(_QWORD *)(a3 + 8);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ri_interval_max_phys_footprint:", 31);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ri_interval_max_neural_footprint:", 33);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ri_lifetime_max_phys_footprint:", 31);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"ri_lifetime_max_neural_footprint:", 33);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ri_phys_footprint:", 18);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"ri_resident_size:", 17);
    v20 = (_QWORD *)std::ostream::operator<<();
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"ri_wired_size:", 14);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"ri_neural_footprint:", 20);
    v24 = (_QWORD *)std::ostream::operator<<();
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"KB", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
    v26 = std::locale::use_facet(&v27, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    return (_QWORD *)std::ostream::flush();
  }
  return result;
}

void sub_191068D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_191068D20(uint64_t *a1, uint64_t *a2)
{
  uint64_t ExportedFunctions;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD **v16;
  void *v17;
  void *v18;
  void *v19;
  _BYTE *v20;
  std::string::size_type v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  int64_t v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string *v40;
  const std::string::value_type *v41;
  size_t size;
  std::string *v43;
  int v44;
  size_t v45;
  unint64_t v46;
  std::string *p_dst;
  char *v48;
  std::string *v49;
  uint64_t *v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  const char *v56;
  size_t v57;
  std::string::size_type v58;
  std::string *v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  std::string::size_type v63;
  int v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  int v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  std::string *p_p;
  std::string::size_type v73;
  _QWORD *v74;
  const std::locale::facet *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  char *v80;
  char *v81;
  void *v82;
  E5RT::ExecutionStreamOperationInternal **v83;
  _QWORD *v84;
  std::string::size_type v85;
  uint64_t InputPorts;
  _QWORD *v87;
  _QWORD **v88;
  void *v89;
  void *v90;
  void *v91;
  _QWORD **v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t *v96;
  void **v97;
  void *v98;
  void *v99;
  E5RT::TensorDescriptor *v100;
  uint64_t *TensorShape;
  int v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  void **v105;
  uint64_t i;
  uint64_t v107;
  void **v108;
  uint64_t *TensorStrides;
  uint64_t j;
  uint64_t v111;
  const std::locale::facet *v112;
  const std::string::value_type *locale;
  void *v114;
  _QWORD *v115;
  const std::locale::facet *v116;
  std::string *v117;
  std::string::size_type v118;
  _QWORD *v119;
  const std::locale::facet *v120;
  char *v121;
  void *v122;
  _QWORD **v123;
  uint64_t **v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD **v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  const std::locale::facet *v138;
  _QWORD **v139;
  std::string *v140;
  std::string *v141;
  std::string *v142;
  uint64_t v143;
  std::string *v144;
  _QWORD *v145;
  void **v146;
  void **v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  _QWORD *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::locale::__imp *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::string::size_type v175;
  std::string::size_type v176;
  void *v177;
  E5RT::ExecutionStreamOperationInternal **v178;
  void **v179;
  void **v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  uint64_t **k;
  void **v186;
  void **v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  E5RT::ExecutionStreamOperation *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  void **v196;
  void **v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  void *exception;
  std::string *v204;
  __int128 v205;
  _QWORD *v206;
  const char *v207;
  size_t v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t *v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  std::runtime_error *v216;
  void *v218;
  E5DB *v219;
  void *v220;
  void *v221;
  uint64_t *v222;
  std::string::size_type v223;
  std::__shared_weak_count *v224;
  std::string v225;
  std::locale v226[2];
  char v227;
  void *v228[2];
  void *v229[2];
  int v230;
  void *v231;
  char v232;
  uint64_t v233;
  std::string __p;
  std::string v235[2];
  void *v236;
  char v237;
  uint64_t v238;
  std::string v239;
  std::__shared_weak_count *v240;
  std::string __dst;
  _BYTE v242[32];
  int v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  E5RT::ExecutionStreamOperation *v246[2];
  std::__shared_weak_count *v247;
  _QWORD v248[2];
  void **v249;

  ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(*(E5RT::ProgramLibrary **)(*a2 + 40));
  v4 = (_QWORD *)std::unordered_map<std::string,std::shared_ptr<E5RT::ProgramFunction>>::unordered_map((uint64_t)v248, ExportedFunctions);
  v222 = a2;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v4, a2[1]))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "operator()");
    std::operator+<char>();
    v204 = std::string::append((std::string *)v242, "\" not found.");
    v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
    v229[0] = (void *)v204->__r_.__value_.__r.__words[2];
    *(_OWORD *)v228 = v205;
    v204->__r_.__value_.__l.__size_ = 0;
    v204->__r_.__value_.__r.__words[2] = 0;
    v204->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(&v239, 1, v228);
    E5RT::E5RTError::E5RTError(exception, &__p, &v239);
  }
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v248, a2[1]);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = v5[5];
  v6 = v5[6];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v244 = v7;
  v245 = (std::__shared_weak_count *)v6;
  v246[1] = 0;
  v247 = 0;
  E5RT::PrecompiledComputeOpCreateOptions::Create(&v244, v246);
  v10 = v245;
  if (v245)
  {
    p_shared_owners = (unint64_t *)&v245->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__p, "Inference Op");
  E5RT::PrecompiledComputeOpCreateOptions::SetOperationName((uint64_t)v246[0], &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = *(void **)v222[2];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKeyedSubscript:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    v16 = (_QWORD **)v222[1];
    if (*((char *)v16 + 23) < 0)
      v16 = (_QWORD **)*v16;
    v17 = *(void **)v222[2];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKeyedSubscript:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("adapter"));
    v219 = (E5DB *)objc_claimAutoreleasedReturnValue();
    E5DB::NSDictionaryToMap(v219, (uint64_t)v228);
    memset(v242, 0, sizeof(v242));
    v243 = 1065353216;
    *((_BYTE *)&v239.__r_.__value_.__s + 23) = 0;
    v239.__r_.__value_.__s.__data_[0] = 0;
    v20 = (_BYTE *)v222[3];
    v21 = v20[23];
    v221 = v19;
    if ((char)v20[23] < 0)
    {
      v22 = *(unsigned __int8 **)v20;
      v23 = *((_QWORD *)v20 + 1);
      if (!v23)
      {
LABEL_48:
        v41 = (const std::string::value_type *)v229[0];
        if (v229[0])
        {
          if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v239.__r_.__value_.__r.__words[2]);
          else
            size = v239.__r_.__value_.__l.__size_;
          if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &v239;
          else
            v43 = (std::string *)v239.__r_.__value_.__r.__words[0];
          while (1)
          {
            if (v41[39] < 0)
              std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v41 + 2), *((_QWORD *)v41 + 3));
            else
              __p = *(std::string *)(v41 + 16);
            if (v41[63] < 0)
              std::string::__init_copy_ctor_external(v235, *((const std::string::value_type **)v41 + 5), *((_QWORD *)v41 + 6));
            else
              v235[0] = *(std::string *)(v41 + 40);
            v44 = SHIBYTE(v235[0].__r_.__value_.__r.__words[2]);
            if ((v235[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = HIBYTE(v235[0].__r_.__value_.__r.__words[2]);
            else
              v45 = v235[0].__r_.__value_.__l.__size_;
            v46 = v45 + size;
            if (v45 + size > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v46 > 0x16)
              break;
            memset(&__dst, 0, sizeof(__dst));
            p_dst = &__dst;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v45 + size;
            if (size)
              goto LABEL_69;
LABEL_70:
            v48 = (char *)p_dst + size;
            if (v45)
            {
              if (v44 >= 0)
                v49 = v235;
              else
                v49 = (std::string *)v235[0].__r_.__value_.__r.__words[0];
              memmove(v48, v49, v45);
            }
            v48[v45] = 0;
            v226[0].__locale_ = (std::locale::__imp *)&__p;
            v50 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v242, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v226);
            v51 = (void **)(v50 + 5);
            if (*((char *)v50 + 63) < 0)
            {
              operator delete(*v51);
              *(std::string *)v51 = __dst;
              if (SHIBYTE(v235[0].__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_55;
LABEL_83:
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_56;
LABEL_84:
              operator delete(__p.__r_.__value_.__l.__data_);
              v41 = *(const std::string::value_type **)v41;
              if (!v41)
                goto LABEL_85;
            }
            else
            {
              *(_OWORD *)v51 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
              v50[7] = __dst.__r_.__value_.__r.__words[2];
              if ((SHIBYTE(v235[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_83;
LABEL_55:
              operator delete(v235[0].__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_84;
LABEL_56:
              v41 = *(const std::string::value_type **)v41;
              if (!v41)
                goto LABEL_85;
            }
          }
          v52 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v52 = v46 | 7;
          v53 = v52 + 1;
          p_dst = (std::string *)operator new(v52 + 1);
          __dst.__r_.__value_.__l.__size_ = v45 + size;
          __dst.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          if (!size)
            goto LABEL_70;
LABEL_69:
          memmove(p_dst, v43, size);
          goto LABEL_70;
        }
LABEL_85:
        objc_msgSend(v221, "objectForKeyedSubscript:", CFSTR("type"));
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v54, "isEqualToString:", CFSTR("DynamicCallables")))
        {
          E5RT::PrecompiledComputeOpCreateOptions::SetDynamicCallables((uint64_t)v246[0], (uint64_t)v242);
        }
        else
        {
          if (!objc_msgSend(v54, "isEqualToString:", CFSTR("MutableMILWeightPaths")))
          {
            v206 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(*v222 + 8), (uint64_t)"Unsupported adapter type = ", 27);
            v207 = (const char *)objc_msgSend(objc_retainAutorelease(v54), "UTF8String");
            v208 = strlen(v207);
            v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)v207, v208);
            v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)" in function = ", 15);
            v211 = (uint64_t *)v222[1];
            v212 = *((char *)v211 + 23);
            if (v212 >= 0)
              v213 = v222[1];
            else
              v213 = *v211;
            if (v212 >= 0)
              v214 = *((unsigned __int8 *)v211 + 23);
            else
              v214 = v211[1];
            v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, v213, v214);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v215);
            v216 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v216, "Unsupported adapter type.");
            __cxa_throw(v216, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths((uint64_t)v246[0], (uint64_t)v242);
        }
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        v55 = (char *)v229[0];
        if (v229[0])
        {
          do
          {
            std::string::append(&__p, "Type: ");
            v56 = (const char *)objc_msgSend(objc_retainAutorelease(v54), "UTF8String");
            v57 = strlen(v56);
            if (v57 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v58 = v57;
            if (v57 >= 0x17)
            {
              v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v57 | 7) != 0x17)
                v60 = v57 | 7;
              v61 = v60 + 1;
              v59 = (std::string *)operator new(v60 + 1);
              __dst.__r_.__value_.__l.__size_ = v58;
              __dst.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v57;
              v59 = &__dst;
              if (!v57)
                goto LABEL_98;
            }
            memmove(v59, v56, v58);
LABEL_98:
            v59->__r_.__value_.__s.__data_[v58] = 0;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v62 = &__dst;
            else
              v62 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v63 = __dst.__r_.__value_.__l.__size_;
            std::string::append(&__p, (const std::string::value_type *)v62, v63);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            std::string::append(&__p, ". Key: ");
            v64 = v55[39];
            if (v64 >= 0)
              v65 = v55 + 16;
            else
              v65 = (const std::string::value_type *)*((_QWORD *)v55 + 2);
            if (v64 >= 0)
              v66 = v55[39];
            else
              v66 = *((_QWORD *)v55 + 3);
            std::string::append(&__p, v65, v66);
            std::string::append(&__p, ". Value: ");
            v67 = v55[63];
            if (v67 >= 0)
              v68 = v55 + 40;
            else
              v68 = (const std::string::value_type *)*((_QWORD *)v55 + 5);
            if (v67 >= 0)
              v69 = v55[63];
            else
              v69 = *((_QWORD *)v55 + 6);
            std::string::append(&__p, v68, v69);
            v55 = *(char **)v55;
          }
          while (v55);
        }
        v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)*v222, (uint64_t)"Setting adapters. ", 18);
        std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(*v70 - 24)));
        v71 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v73 = __p.__r_.__value_.__l.__size_;
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)p_p, v73);
        std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(_QWORD *)(*v74 - 24)));
        v75 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);

          if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_127:
            v76 = *(char **)&v242[16];
            v77 = v221;
            if (*(_QWORD *)&v242[16])
              goto LABEL_134;
LABEL_137:
            v79 = *(void **)v242;
            *(_QWORD *)v242 = 0;
            if (v79)
              operator delete(v79);
            v80 = (char *)v229[0];
            if (!v229[0])
            {
LABEL_146:
              v82 = v228[0];
              v228[0] = 0;
              if (v82)
                operator delete(v82);

              goto LABEL_149;
            }
            while (1)
            {
              v81 = *(char **)v80;
              if (v80[63] < 0)
              {
                operator delete(*((void **)v80 + 5));
                if ((v80[39] & 0x80000000) == 0)
                  goto LABEL_142;
LABEL_145:
                operator delete(*((void **)v80 + 2));
                operator delete(v80);
                v80 = v81;
                if (!v81)
                  goto LABEL_146;
              }
              else
              {
                if (v80[39] < 0)
                  goto LABEL_145;
LABEL_142:
                operator delete(v80);
                v80 = v81;
                if (!v81)
                  goto LABEL_146;
              }
            }
          }
        }
        else
        {

          if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_127;
        }
        operator delete(v239.__r_.__value_.__l.__data_);
        v76 = *(char **)&v242[16];
        v77 = v221;
        if (!*(_QWORD *)&v242[16])
          goto LABEL_137;
        while (1)
        {
LABEL_134:
          v78 = *(char **)v76;
          if (v76[63] < 0)
          {
            operator delete(*((void **)v76 + 5));
            if ((v76[39] & 0x80000000) == 0)
              goto LABEL_133;
LABEL_136:
            operator delete(*((void **)v76 + 2));
            operator delete(v76);
            v76 = v78;
            if (!v78)
              goto LABEL_137;
          }
          else
          {
            if (v76[39] < 0)
              goto LABEL_136;
LABEL_133:
            operator delete(v76);
            v76 = v78;
            if (!v78)
              goto LABEL_137;
          }
        }
      }
    }
    else
    {
      v22 = (unsigned __int8 *)v222[3];
      v23 = v20[23];
      if (!v20[23])
        goto LABEL_48;
    }
    v24 = &v22[v23];
    v25 = v22;
    v26 = v24;
    do
    {
      v27 = v25;
      v28 = v25;
      while (1)
      {
        v29 = *v28++;
        if (v29 == 47)
          break;
        v27 = v28;
        if (v28 == v24)
        {
          v27 = v26;
          goto LABEL_26;
        }
      }
      v25 = v27 + 1;
      v26 = v27;
    }
    while (v28 != v24);
LABEL_26:
    if (v27 == v24 || v27 - v22 == -1)
      goto LABEL_48;
    if ((v21 & 0x80) != 0)
    {
      v30 = *(unsigned __int8 **)v20;
      v202 = *((_QWORD *)v20 + 1);
      v31 = (unsigned __int8 *)(*(_QWORD *)v20 + v202);
      if (v202)
        goto LABEL_30;
    }
    else
    {
      v30 = (unsigned __int8 *)v222[3];
      v31 = &v20[v21];
      if (v20[23])
      {
LABEL_30:
        v32 = v30;
        v33 = v31;
        do
        {
          v34 = v32;
          v35 = v32;
          while (1)
          {
            v36 = *v35++;
            if (v36 == 47)
              break;
            v34 = v35;
            if (v35 == v31)
            {
              v34 = v33;
              goto LABEL_36;
            }
          }
          v32 = v34 + 1;
          v33 = v34;
        }
        while (v35 != v31);
LABEL_36:
        v37 = v34 - v30;
        if (v34 == v31)
          v38 = 0;
        else
          v38 = v37 + 1;
        if ((v21 & 0x80) == 0)
        {
LABEL_40:
          if (v21 >= v38)
            v39 = v38;
          else
            v39 = v20[23];
          if (v39 <= 0x7FFFFFFFFFFFFFF7)
            goto LABEL_44;
          goto LABEL_346;
        }
LABEL_342:
        v20 = *(_BYTE **)v20;
        if (*(_QWORD *)(v222[3] + 8) >= v38)
          v39 = v38;
        else
          v39 = *(_QWORD *)(v222[3] + 8);
        if (v39 <= 0x7FFFFFFFFFFFFFF7)
        {
LABEL_44:
          if (v39 >= 0x17)
          {
            v152 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v152 = v39 | 7;
            v153 = v152 + 1;
            v40 = (std::string *)operator new(v152 + 1);
            __p.__r_.__value_.__l.__size_ = v39;
            __p.__r_.__value_.__r.__words[2] = v153 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
          }
          else
          {
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v39;
            v40 = &__p;
            if (!v39)
            {
              __p.__r_.__value_.__s.__data_[0] = 0;
              if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_47:
                v239 = __p;
                goto LABEL_48;
              }
LABEL_242:
              operator delete(v239.__r_.__value_.__l.__data_);
              goto LABEL_47;
            }
          }
          memmove(v40, v20, v39);
          v40->__r_.__value_.__s.__data_[v39] = 0;
          if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_47;
          goto LABEL_242;
        }
LABEL_346:
        std::string::__throw_length_error[abi:ne180100]();
      }
    }
    v38 = 0;
    if ((v21 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_342;
  }
LABEL_149:
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp(v246[0], &__p);
  v83 = (E5RT::ExecutionStreamOperationInternal **)__p.__r_.__value_.__r.__words[0];
  *a1 = __p.__r_.__value_.__r.__words[0];
  if (v83)
  {
    v84 = (_QWORD *)operator new();
    v85 = __p.__r_.__value_.__r.__words[0];
    *v84 = &unk_1E2DC32E0;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v85;
  }
  else
  {
    v84 = 0;
  }
  a1[1] = (uint64_t)v84;
  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(v83);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v242, InputPorts);
  v87 = *(_QWORD **)(E5RT::ExecutionStreamOperation::GetInOutPorts(v83) + 16);
  E5RT::ExecutionStreamOperation::GetInOutPorts(v83);
  for (; v87; v87 = (_QWORD *)*v87)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>((uint64_t)v242, (uint64_t)(v87 + 2), (uint64_t)(v87 + 2));
  v88 = (_QWORD **)v222[1];
  if (*((char *)v88 + 23) < 0)
    v88 = (_QWORD **)*v88;
  v89 = *(void **)v222[4];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v88);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v89, "objectForKeyedSubscript:", v90);
  v91 = (void *)objc_claimAutoreleasedReturnValue();

  if (v91)
  {
    v92 = (_QWORD **)v222[1];
    if (*((char *)v92 + 23) < 0)
      v92 = (_QWORD **)*v92;
    v93 = *(void **)v222[4];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v92);
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "objectForKeyedSubscript:", v94);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    E5DB::GetOperandDescriptorsFromShapesArray(v242, v95, (uint64_t)&v239);

    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
    v96 = (uint64_t *)v239.__r_.__value_.__r.__words[2];
    if (v239.__r_.__value_.__r.__words[2])
    {
      v97 = &v229[1];
      v98 = (void *)*MEMORY[0x1E0DE4F50];
      v99 = *(void **)(MEMORY[0x1E0DE4F50] + 72);
      v220 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
      v218 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      do
      {
        v100 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v96[5]);
        TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v100);
        std::string::append(&__dst, "Input Name: ");
        v102 = *((char *)v96 + 39);
        if (v102 >= 0)
          v103 = (const std::string::value_type *)(v96 + 2);
        else
          v103 = (const std::string::value_type *)v96[2];
        if (v102 >= 0)
          v104 = *((unsigned __int8 *)v96 + 39);
        else
          v104 = v96[3];
        std::string::append(&__dst, v103, v104);
        std::string::append(&__dst, " with shape: ");
        v105 = v97;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        v107 = *TensorShape;
        for (i = TensorShape[1]; v107 != i; v107 += 8)
        {
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)" ", 1);
        }
        std::stringbuf::str();
        if (SHIBYTE(v229[0]) >= 0)
          v108 = v228;
        else
          v108 = (void **)v228[0];
        std::string::append(&__dst, (const std::string::value_type *)v108);
        if (SHIBYTE(v229[0]) < 0)
          operator delete(v228[0]);
        TensorStrides = (uint64_t *)E5RT::TensorDescriptor::GetTensorStrides(v100);
        std::string::append(&__dst, "and stride: ");
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v228);
        v111 = *TensorStrides;
        for (j = TensorStrides[1]; v111 != j; v111 += 8)
        {
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)" ", 1);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)v229 + *((_QWORD *)v229[0] - 3)));
        v97 = v105;
        v112 = std::locale::use_facet(v226, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
        std::locale::~locale(v226);
        std::ostream::put();
        std::ostream::flush();
        std::stringbuf::str();
        if (v227 >= 0)
          locale = (const std::string::value_type *)v226;
        else
          locale = (const std::string::value_type *)v226[0].__locale_;
        std::string::append(&__dst, locale);
        v114 = v220;
        if (v227 < 0)
        {
          operator delete(v226[0].__locale_);
          v114 = v220;
        }
        v228[0] = v98;
        *(void **)((char *)v228 + *((_QWORD *)v98 - 3)) = v114;
        v229[0] = v99;
        v229[1] = v218;
        if (v232 < 0)
          operator delete(v231);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x19401CCD0](&v233);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *((_QWORD *)v98 - 3)) = (std::string::size_type)v114;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v99;
        v235[0].__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FB8] + 16;
        if (v237 < 0)
          operator delete(v236);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x19401CCD0](&v238);
        v96 = (uint64_t *)*v96;
      }
      while (v96);
    }
    v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)*v222, (uint64_t)"Reshaping network with new shapes/strides for: ", 47);
    std::ios_base::getloc((const std::ios_base *)((char *)v115 + *(_QWORD *)(*v115 - 24)));
    v116 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v117 = &__dst;
    else
      v117 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v118 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v118 = __dst.__r_.__value_.__l.__size_;
    v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)v117, v118);
    std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(*v119 - 24)));
    v120 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v120->__vftable[2].~facet_0)(v120, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    E5RT::ExecutionStreamOperation::ReshapeOperation(*a1, (uint64_t)&v239);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v121 = (char *)v239.__r_.__value_.__r.__words[2];
    if (v239.__r_.__value_.__r.__words[2])
    {
      do
      {
        v125 = *(char **)v121;
        v126 = *((_QWORD *)v121 + 5);
        *((_QWORD *)v121 + 5) = 0;
        if (v126)
          (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
        if (v121[39] < 0)
          operator delete(*((void **)v121 + 2));
        operator delete(v121);
        v121 = v125;
      }
      while (v125);
    }
    v122 = (void *)v239.__r_.__value_.__r.__words[0];
    v239.__r_.__value_.__r.__words[0] = 0;
    if (v122)
      operator delete(v122);
  }
  v123 = (_QWORD **)v222[1];
  if (*((_BYTE *)v123 + 178))
  {
    v124 = *(uint64_t ***)&v242[16];
    if (*(_QWORD *)&v242[16])
    {
      do
      {
        E5RT::AllocateAndBindMemory((E5RT::IOPort *)v124[5], *(_DWORD *)v222[5]);
        v124 = (uint64_t **)*v124;
      }
      while (v124);
    }
    goto LABEL_304;
  }
  if (*((_BYTE *)v123 + 192))
    v127 = (unint64_t)v123[23];
  else
    v127 = 0;
  v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)*v222, (uint64_t)"Using test data at: ", 20);
  v129 = (_QWORD **)v222[1];
  v132 = v129[15];
  v130 = (uint64_t)(v129 + 15);
  v131 = (uint64_t)v132;
  v133 = *(char *)(v130 + 23);
  if (v133 >= 0)
    v134 = v130;
  else
    v134 = v131;
  if (v133 >= 0)
    v135 = *(unsigned __int8 *)(v130 + 23);
  else
    v135 = *(_QWORD *)(v130 + 8);
  v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, v134, v135);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)" Index: ", 8);
  v137 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v137 + *(_QWORD *)(*v137 - 24)));
  v138 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v138->__vftable[2].~facet_0)(v138, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)v228 = 0u;
  *(_OWORD *)v229 = 0u;
  v230 = 1065353216;
  v139 = (_QWORD **)v222[1];
  if (!*((_BYTE *)v139 + 144))
  {
    memset(&v239, 0, sizeof(v239));
    v142 = (std::string *)v139[15];
    v140 = (std::string *)(v139 + 15);
    v141 = v142;
    v143 = HIBYTE(v140->__r_.__value_.__r.__words[2]);
    if ((v143 & 0x80u) == 0)
      v144 = v140;
    else
      v144 = v141;
    v145 = (_QWORD *)v140->__r_.__value_.__l.__size_;
    if ((v143 & 0x80u) == 0)
      v145 = (_QWORD *)v143;
    std::string::append[abi:ne180100]<char const*,0>(&v239, v144, (std::string *)((char *)v145 + (_QWORD)v144));
    E5DB::RegressionTestConfigParser::RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)&__p, (std::__fs::filesystem::path *)&v239);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    E5DB::MakeRefPortsFromParser(&__p, v127, (uint64_t)v242, (uint64_t)&v239);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__move_assign((uint64_t)v228, (uint64_t *)&v239);
    v146 = (void **)v239.__r_.__value_.__r.__words[2];
    if (v239.__r_.__value_.__r.__words[2])
    {
      do
      {
        while (1)
        {
          v147 = (void **)*v146;
          v148 = (std::__shared_weak_count *)v146[6];
          if (v148)
          {
            v149 = (unint64_t *)&v148->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
          }
          if (*((char *)v146 + 39) < 0)
            break;
          operator delete(v146);
          v146 = v147;
          if (!v147)
            goto LABEL_235;
        }
        operator delete(v146[2]);
        operator delete(v146);
        v146 = v147;
      }
      while (v147);
    }
LABEL_235:
    v151 = (void *)v239.__r_.__value_.__r.__words[0];
    v239.__r_.__value_.__r.__words[0] = 0;
    if (v151)
      operator delete(v151);
    E5DB::RegressionTestConfigParser::~RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)&__p);
    goto LABEL_292;
  }
  if (*((char *)v139 + 143) < 0)
    std::string::__init_copy_ctor_external(&v225, (const std::string::value_type *)v139[15], (std::string::size_type)v139[16]);
  else
    v225 = *(std::string *)((_BYTE *)v139 + 5);
  E5DB::E5PortTraceParser::E5PortTraceParser(&__dst, &v225);
  if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v154 = *(uint64_t **)&v242[16];
    if (*(_QWORD *)&v242[16])
      goto LABEL_250;
    goto LABEL_287;
  }
  operator delete(v225.__r_.__value_.__l.__data_);
  v154 = *(uint64_t **)&v242[16];
  if (*(_QWORD *)&v242[16])
  {
    do
    {
LABEL_250:
      E5DB::E5PortTraceParser::GetPortData(&__dst, (uint64_t)(v154 + 2), v127, &v239);
      v155 = operator new(0x28uLL);
      v155[1] = 0;
      v155[2] = 0;
      *v155 = &off_1E2DB5C10;
      std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::OperandDescriptor> const&>((uint64_t)&__p, (uint64_t)(v155 + 3), (uint64_t *)&v239);
      v226[0].__locale_ = (std::locale::__imp *)(v155 + 3);
      v226[1].__locale_ = (std::locale::__imp *)v155;
      v223 = v239.__r_.__value_.__r.__words[2];
      v224 = v240;
      if (v240)
      {
        v156 = (unint64_t *)&v240->__shared_owners_;
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
      }
      E5RT::IOPortPriv::BindMemoryObject((uint64_t)(v155 + 3), (uint64_t)&v223, 0);
      v158 = v224;
      if (!v224)
        goto LABEL_257;
      v159 = (unint64_t *)&v224->__shared_owners_;
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
        if ((*((char *)v154 + 39) & 0x80000000) == 0)
        {
LABEL_258:
          __p = *(std::string *)(v154 + 2);
          goto LABEL_261;
        }
      }
      else
      {
LABEL_257:
        if ((*((char *)v154 + 39) & 0x80000000) == 0)
          goto LABEL_258;
      }
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v154[2], v154[3]);
LABEL_261:
      *(_OWORD *)&v235[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v226[0].__locale_;
      if (v226[1].__locale_)
      {
        v161 = (unint64_t *)((char *)v226[1].__locale_ + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>((uint64_t)v228, (uint64_t)&__p, (uint64_t)&__p);
      v163 = (std::__shared_weak_count *)v235[0].__r_.__value_.__l.__size_;
      if (!v235[0].__r_.__value_.__l.__size_)
        goto LABEL_268;
      v164 = (unint64_t *)(v235[0].__r_.__value_.__l.__size_ + 8);
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_269:
          v166 = v226[1].__locale_;
          if (!v226[1].__locale_)
            goto LABEL_276;
          goto LABEL_273;
        }
      }
      else
      {
LABEL_268:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_269;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v166 = v226[1].__locale_;
      if (!v226[1].__locale_)
        goto LABEL_276;
LABEL_273:
      v167 = (unint64_t *)((char *)v166 + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (v168)
      {
LABEL_276:
        v169 = v240;
        if (v240)
          goto LABEL_277;
        goto LABEL_282;
      }
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v166 + 16))(v166);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v166);
      v169 = v240;
      if (v240)
      {
LABEL_277:
        v170 = (unint64_t *)&v169->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
        }
      }
LABEL_282:
      v172 = (std::__shared_weak_count *)v239.__r_.__value_.__l.__size_;
      if (v239.__r_.__value_.__l.__size_)
      {
        v173 = (unint64_t *)(v239.__r_.__value_.__l.__size_ + 8);
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      v154 = (uint64_t *)*v154;
    }
    while (v154);
  }
LABEL_287:
  v175 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    v176 = __dst.__r_.__value_.__l.__size_;
    v177 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
        v176 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table(v176 - 40);
      while (v176 != v175);
      v177 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v175;
    operator delete(v177);
  }
LABEL_292:
  v178 = (E5RT::ExecutionStreamOperationInternal **)*a1;
  E5DB::ReshapeIfNeeded((E5RT::ExecutionStreamOperationInternal **)*a1, (uint64_t)v228);
  E5DB::PrepareEsOpInputAndInOutPorts(v178, v228, *(_DWORD *)v222[5]);
  v179 = (void **)v229[0];
  if (v229[0])
  {
    do
    {
      while (1)
      {
        v180 = (void **)*v179;
        v181 = (std::__shared_weak_count *)v179[6];
        if (v181)
        {
          v182 = (unint64_t *)&v181->__shared_owners_;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        if (*((char *)v179 + 39) < 0)
          break;
        operator delete(v179);
        v179 = v180;
        if (!v180)
          goto LABEL_302;
      }
      operator delete(v179[2]);
      operator delete(v179);
      v179 = v180;
    }
    while (v180);
  }
LABEL_302:
  v184 = v228[0];
  v228[0] = 0;
  if (v184)
    operator delete(v184);
LABEL_304:
  for (k = *(uint64_t ***)(E5RT::ExecutionStreamOperation::GetOutputPorts((E5RT::ExecutionStreamOperationInternal **)*a1)
                         + 16); k; k = (uint64_t **)*k)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)k[5]) & 1) == 0)
      E5RT::AllocateAndBindMemory((E5RT::IOPort *)k[5], *(_DWORD *)v222[5]);
  }
  v186 = *(void ***)&v242[16];
  if (*(_QWORD *)&v242[16])
  {
    do
    {
      while (1)
      {
        v187 = (void **)*v186;
        v188 = (std::__shared_weak_count *)v186[6];
        if (v188)
        {
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
        if (*((char *)v186 + 39) < 0)
          break;
        operator delete(v186);
        v186 = v187;
        if (!v187)
          goto LABEL_315;
      }
      operator delete(v186[2]);
      operator delete(v186);
      v186 = v187;
    }
    while (v187);
  }
LABEL_315:
  v191 = *(void **)v242;
  *(_QWORD *)v242 = 0;
  if (v191)
    operator delete(v191);
  v192 = v246[0];
  v246[0] = 0;
  if (v192)
    (*(void (**)(E5RT::ExecutionStreamOperation *))(*(_QWORD *)v192 + 8))(v192);
  v193 = v247;
  if (v247)
  {
    v194 = (unint64_t *)&v247->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = v249;
  if (v249)
  {
    do
    {
      while (1)
      {
        v197 = (void **)*v196;
        v198 = (std::__shared_weak_count *)v196[6];
        if (v198)
        {
          v199 = (unint64_t *)&v198->__shared_owners_;
          do
            v200 = __ldaxr(v199);
          while (__stlxr(v200 - 1, v199));
          if (!v200)
          {
            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
            std::__shared_weak_count::__release_weak(v198);
          }
        }
        if (*((char *)v196 + 39) < 0)
          break;
        operator delete(v196);
        v196 = v197;
        if (!v197)
          goto LABEL_334;
      }
      operator delete(v196[2]);
      operator delete(v196);
      v196 = v197;
    }
    while (v197);
  }
LABEL_334:
  v201 = (void *)v248[0];
  v248[0] = 0;
  if (v201)
    operator delete(v201);
}

void sub_19106A4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  va_list va;

  va_start(va, a17);
  __cxa_free_exception(v17);

  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v19 - 224);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)va);

  v21 = *(_QWORD *)(v19 - 160);
  *(_QWORD *)(v19 - 160) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v19 - 152);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v19 - 136);
  _Unwind_Resume(a1);
}

uint64_t sub_19106A96C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, char a8)
{
  if (result)
  {
    pdwriter_new_group();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    if ((a8 & 1) == 0)
    {
      pdwriter_new_value();
      pdwriter_record_variable_str();
    }
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_stats();
    pdwriter_record_variable_str();
    pdwriter_new_stats();
    pdwriter_record_variable_str();
    pdwriter_record_mean();
    if (a3)
      pdwriter_record_median();
    pdwriter_new_stats();
    result = pdwriter_record_variable_str();
    if (a5)
    {
      pdwriter_new_value();
      return pdwriter_record_variable_str();
    }
  }
  return result;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::ProgramFunction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::ProgramFunction>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19106AE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19106AE80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::ProgramFunction>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::string *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x38uLL);
  v45[0] = v25;
  v45[1] = a1 + 16;
  v46 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v27 = *(_QWORD *)(a3 + 32);
  v25[5] = *(_QWORD *)(a3 + 24);
  v25[6] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v34 = 1;
    if (v11 >= 3)
      v34 = (v11 & (v11 - 1)) != 0;
    v35 = v34 | (2 * v11);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_71:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v42 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
      else
      {
        v3 = v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_60;
      }
    }
    else
    {
      v3 = v42 & v10;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v10));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_60;
    }
LABEL_84:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v43 >= v11)
          v43 %= v11;
      }
      else
      {
        v43 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_95;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_84;
LABEL_60:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_95:
  v14 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19106B2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19106B304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::thread>::reserve(uint64_t a1, unint64_t a2)
{
  std::thread *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  std::thread *v22;

  v2 = *(std::thread **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = *(char **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[v5];
    v8 = v4 - (char *)v2;
    v9 = (unint64_t)&v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == (char *)v2)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
LABEL_19:
      if (v2)
        operator delete(v2);
      return;
    }
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) >= 0x78)
    {
      v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
         || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9;
      v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        v13 = v8 >> 3;
        v14 = (v10 >> 3) + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v16 = &v4[-v15];
        v11 = (char *)(v9 - v15);
        v17 = &v6[8 * v13 - 16];
        v18 = v4 - 16;
        v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v20 = *(_OWORD *)v18;
          *((_OWORD *)v17 - 1) = *((_OWORD *)v18 - 1);
          *(_OWORD *)v17 = v20;
          *((_OWORD *)v18 - 1) = 0uLL;
          *(_OWORD *)v18 = 0uLL;
          v17 -= 32;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        v4 = v16;
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          v22 = *(std::thread **)a1;
          v2 = *(std::thread **)(a1 + 8);
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v7;
          if (v2 != v22)
          {
            do
              std::thread::~thread(--v2);
            while (v2 != v22);
            v2 = v22;
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v21 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v11 - 1) = v21;
      v11 -= 8;
      *(_QWORD *)v4 = 0;
    }
    while (v4 != (char *)v2);
    goto LABEL_16;
  }
}

void sub_19106B484(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  std::chrono::steady_clock::time_point v11;
  E5RT::ExecutionStreamImpl **v12;
  std::chrono::steady_clock::time_point v13;
  uint64_t v14;
  double v15;
  double *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::value_type *v23;
  std::string::size_type size;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  double *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  _OWORD *v42;
  double *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::value_type *v50;
  std::string::size_type v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  std::chrono::steady_clock::time_point v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  _DWORD v72[2];
  std::string v73;
  const void **v74;
  std::__shared_weak_count *v75;

  E5RT::ExecuteOptions::Create((E5RT::ExecuteOptions **)&v74);
  v4 = *a1;
  if (*(_BYTE *)(*a1 + 312))
  {
    *((_BYTE *)&v73.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&v73, "e5db-telemetry");
    E5RT::ExecuteOptions::SetExecutionIdentifier((uint64_t)v74, (uint64_t)&v73);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    E5RT::ExecuteOptions::SetEnableResourceTelemetry(v74, 1u);
    v4 = *a1;
  }
  v5 = 0;
  v61 = 0;
  v6 = 0;
  v7 = 16 * a2;
  v63 = a2;
  v64 = 16 * a2;
  v62 = a1;
  while (1)
  {
    v9 = *(unsigned __int8 *)(v4 + 88);
    if (v6 < *(_QWORD *)(v4 + 24))
    {
      if (!*(_BYTE *)(v4 + 88))
        goto LABEL_12;
      v9 = 1;
    }
    if ((v9 == 0) | v61 & 1)
      break;
LABEL_12:
    v8 = *(_QWORD *)(v4 + 64);
    if (v8)
    {
      v10 = 0;
      v65 = v6;
      while (1)
      {
        if (!*(_BYTE *)(v4 + 88) && v5 >= *(_QWORD *)(v4 + 24))
        {
LABEL_6:
          v8 = *(_QWORD *)(v4 + 64);
          goto LABEL_7;
        }
        v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v12 = *(E5RT::ExecutionStreamImpl ***)(*(_QWORD *)a1[1] + v7);
        if (*(_BYTE *)(*a1 + 312))
          E5RT::ExecutionStream::ExecuteStreamSync(v12, v74);
        else
          E5RT::ExecutionStream::ExecuteStreamSync(v12);
        v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v14 = *(_QWORD *)a1[2] + 24 * a2;
        v15 = (double)((v13.__d_.__rep_ - v11.__d_.__rep_) / 1000);
        v17 = (uint64_t *)(v14 + 8);
        v16 = *(double **)(v14 + 8);
        v18 = *(_QWORD *)(v14 + 16);
        v66 = v10;
        if ((unint64_t)v16 < v18)
        {
          *v16 = v15;
          *v17 = (uint64_t)(v16 + 1);
          v4 = *a1;
          if (*(_BYTE *)(*a1 + 224))
            goto LABEL_22;
          goto LABEL_62;
        }
        v28 = v5;
        v29 = *(double **)v14;
        v30 = (uint64_t)v16 - *(_QWORD *)v14;
        v31 = v30 >> 3;
        v32 = (v30 >> 3) + 1;
        if (v32 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v33 = v18 - (_QWORD)v29;
        if (v33 >> 2 > v32)
          v32 = v33 >> 2;
        v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v32;
        if (!v34)
          break;
        if (v34 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v35 = operator new(8 * v34);
        v36 = (double *)&v35[8 * v31];
        *v36 = v15;
        v37 = (uint64_t)(v36 + 1);
        if (v16 != v29)
          goto LABEL_35;
LABEL_59:
        *(_QWORD *)v14 = v36;
        *v17 = v37;
        *(_QWORD *)(v14 + 16) = &v35[8 * v34];
        if (v29)
          operator delete(v29);
        v5 = v28;
        a1 = v62;
        a2 = v63;
        *v17 = v37;
        v4 = *v62;
        if (*(_BYTE *)(*v62 + 224))
        {
LABEL_22:
          std::to_string(&v71, a2);
          v7 = v64;
          v19 = v66;
          v20 = std::string::insert(&v71, 0, "stream-");
          v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v73.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          v22 = std::string::append(&v73, "-");
          v23 = (std::string::value_type *)v22->__r_.__value_.__r.__words[0];
          size = v22->__r_.__value_.__l.__size_;
          v72[0] = v22->__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v72 + 3) = *(_DWORD *)((char *)&v22->__r_.__value_.__r.__words[2] + 3);
          v25 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v73.__r_.__value_.__l.__data_);
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_38;
LABEL_24:
            v26 = *(_QWORD *)(*(_QWORD *)a1[3] + v64);
            v27 = *a1;
            if ((*(char *)(*a1 + 223) & 0x80000000) == 0)
              goto LABEL_25;
LABEL_39:
            std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v27 + 200), *(_QWORD *)(v27 + 208));
          }
          else
          {
            if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_24;
LABEL_38:
            operator delete(v71.__r_.__value_.__l.__data_);
            v26 = *(_QWORD *)(*(_QWORD *)a1[3] + v64);
            v27 = *a1;
            if (*(char *)(*a1 + 223) < 0)
              goto LABEL_39;
LABEL_25:
            v70 = *(std::string *)(v27 + 200);
          }
          if (v25 < 0)
          {
            std::string::__init_copy_ctor_external(&v69, v23, size);
          }
          else
          {
            v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
            v69.__r_.__value_.__l.__size_ = size;
            LODWORD(v69.__r_.__value_.__r.__words[2]) = v72[0];
            *(_DWORD *)((char *)&v69.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v72 + 3);
            *((_BYTE *)&v69.__r_.__value_.__s + 23) = v25;
          }
          E5RT::ExecutionStreamOperation::SerializeInferenceFrameData(v26, (uint64_t)&v70, (uint64_t)&v69, 1);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v69.__r_.__value_.__l.__data_);
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_49;
LABEL_45:
            if ((v25 & 0x80000000) == 0)
              goto LABEL_46;
LABEL_50:
            operator delete(v23);
            v4 = *a1;
            if (!*(_BYTE *)(*a1 + 256))
              goto LABEL_77;
          }
          else
          {
            if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_45;
LABEL_49:
            operator delete(v70.__r_.__value_.__l.__data_);
            if (v25 < 0)
              goto LABEL_50;
LABEL_46:
            v4 = *a1;
            if (!*(_BYTE *)(*a1 + 256))
              goto LABEL_77;
          }
LABEL_63:
          std::to_string(&v71, a2);
          v47 = std::string::insert(&v71, 0, "stream-");
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v73.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          v49 = std::string::append(&v73, "-");
          v50 = (std::string::value_type *)v49->__r_.__value_.__r.__words[0];
          v51 = v49->__r_.__value_.__l.__size_;
          v72[0] = v49->__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v72 + 3) = *(_DWORD *)((char *)&v49->__r_.__value_.__r.__words[2] + 3);
          v52 = SHIBYTE(v49->__r_.__value_.__r.__words[2]);
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v73.__r_.__value_.__l.__data_);
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_68;
LABEL_65:
            v53 = *(_QWORD *)(*(_QWORD *)a1[3] + v7);
            v54 = *a1;
            if ((*(char *)(*a1 + 255) & 0x80000000) == 0)
              goto LABEL_66;
LABEL_69:
            std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(v54 + 232), *(_QWORD *)(v54 + 240));
          }
          else
          {
            if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_65;
LABEL_68:
            operator delete(v71.__r_.__value_.__l.__data_);
            v53 = *(_QWORD *)(*(_QWORD *)a1[3] + v7);
            v54 = *a1;
            if (*(char *)(*a1 + 255) < 0)
              goto LABEL_69;
LABEL_66:
            v68 = *(std::string *)(v54 + 232);
          }
          if (v52 < 0)
          {
            std::string::__init_copy_ctor_external(&v67, v50, v51);
          }
          else
          {
            v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
            v67.__r_.__value_.__l.__size_ = v51;
            LODWORD(v67.__r_.__value_.__r.__words[2]) = v72[0];
            *(_DWORD *)((char *)&v67.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v72 + 3);
            *((_BYTE *)&v67.__r_.__value_.__s + 23) = v52;
          }
          E5RT::ExecutionStreamOperation::SerializeInferenceFrameDataPerSegment(v53, (uint64_t)&v68, (uint64_t)&v67);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v67.__r_.__value_.__l.__data_);
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_81;
LABEL_75:
            if (v52 < 0)
LABEL_82:
              operator delete(v50);
          }
          else
          {
            if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_75;
LABEL_81:
            operator delete(v68.__r_.__value_.__l.__data_);
            if (v52 < 0)
              goto LABEL_82;
          }
          v4 = *a1;
          goto LABEL_77;
        }
LABEL_62:
        v7 = v64;
        v19 = v66;
        if (*(_BYTE *)(v4 + 256))
          goto LABEL_63;
LABEL_77:
        ++v5;
        if (*(_BYTE *)(v4 + 88))
        {
          v55.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v4 = *a1;
          if ((double)((v55.__d_.__rep_ - *(_QWORD *)a1[4]) / 1000000) / 1000.0 > *(double *)(*a1 + 80))
          {
            v61 = 1;
            v6 = v65;
            goto LABEL_6;
          }
        }
        v10 = v19 + 1;
        v6 = v65;
        if (v10 >= *(_QWORD *)(v4 + 64))
          goto LABEL_6;
      }
      v35 = 0;
      v36 = (double *)(8 * v31);
      *(double *)(8 * v31) = v15;
      v37 = 8 * v31 + 8;
      if (v16 == v29)
        goto LABEL_59;
LABEL_35:
      v38 = (char *)(v16 - 1) - (char *)v29;
      if (v38 < 0x58)
        goto LABEL_95;
      if ((unint64_t)((char *)v16 - &v35[v30]) < 0x20)
        goto LABEL_95;
      v39 = (v38 >> 3) + 1;
      v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
      v41 = &v16[v40 / 0xFFFFFFFFFFFFFFF8];
      v36 = (double *)((char *)v36 - v40);
      v42 = &v35[8 * v31 - 16];
      v43 = v16 - 2;
      v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = *(_OWORD *)v43;
        *(v42 - 1) = *((_OWORD *)v43 - 1);
        *v42 = v45;
        v42 -= 2;
        v43 -= 4;
        v44 -= 4;
      }
      while (v44);
      v16 = v41;
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_95:
        do
        {
          v46 = *((_QWORD *)v16-- - 1);
          *((_QWORD *)v36-- - 1) = v46;
        }
        while (v16 != v29);
      }
      goto LABEL_59;
    }
LABEL_7:
    v6 += v8;
  }
  v56 = (unint64_t *)a1[5];
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 + v5, v56));
  v58 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_19106BB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v48 - 128);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_19106BEBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<double>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19106BF4C(pthread_t *a1, _OWORD *a2, char *a3)
{
  std::__thread_struct *v6;
  char *v7;
  __int128 v8;
  uint64_t result;

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = (char *)operator new();
  *(_QWORD *)v7 = v6;
  v8 = a2[1];
  *(_OWORD *)(v7 + 8) = *a2;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = a2[2];
  v7[56] = *a3;
  result = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_19106C070, v7);
  if ((_DWORD)result)
  {
    std::__throw_system_error(result, "thread constructor failed");
    __break(1u);
    JUMPOUT(0x19106C008);
  }
  return result;
}

uint64_t sub_19106C070(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_19106B484((_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 56));
  v4 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    v5 = MEMORY[0x19401CA24]();
    MEMORY[0x19401CD90](v5, 0x20C4093837F09);
  }
  MEMORY[0x19401CD90](a1, 0x1060C40A001609FLL);
  return 0;
}

void sub_19106C0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19106C10C((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19106C10C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x19401CA24]();
      MEMORY[0x19401CD90](v4, 0x20C4093837F09);
    }
    MEMORY[0x19401CD90](v2, 0x1060C40A001609FLL);
  }
  return a1;
}

char *std::vector<std::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__push_back_slow_path<std::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>> const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  const void *v13;
  int64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = v10 + 8;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    *((_QWORD *)v10 + 2) = &v15[16 * (v14 >> 4)];
    v16 = v14 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v15, v13, v16);
    *v12 = &v15[v16];
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_19106C368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19106C38C(pthread_t *a1, _OWORD *a2, char *a3)
{
  std::__thread_struct *v6;
  char *v7;
  __int128 v8;
  uint64_t result;

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = (char *)operator new();
  *(_QWORD *)v7 = v6;
  v8 = a2[1];
  *(_OWORD *)(v7 + 8) = *a2;
  *(_OWORD *)(v7 + 24) = v8;
  v7[40] = *a3;
  result = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_19106C4A8, v7);
  if ((_DWORD)result)
  {
    std::__throw_system_error(result, "thread constructor failed");
    __break(1u);
    JUMPOUT(0x19106C440);
  }
  return result;
}

uint64_t sub_19106C4A8(const void **a1)
{
  const void **v1;
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count_vtbl *v6;
  E5RT::ExecutionStream *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  const void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t *v22;
  std::chrono::steady_clock::time_point **v23;
  std::chrono::steady_clock::time_point *v24;
  unint64_t v25;
  _QWORD *v26;
  std::chrono::steady_clock::time_point *v27;
  std::chrono::steady_clock::time_point *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v34;
  uint64_t v35;
  E5RT::ExecutionStream *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  E5RT::ExecutionStream *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v54;
  char v55;
  unint64_t v56;
  std::chrono::steady_clock::time_point v57;
  const void **v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  E5RT::AsyncEvent *v67;
  std::__shared_weak_count *v68;
  __int128 v69;
  E5RT::ExecutionStream *v70;
  _QWORD v71[3];
  _QWORD *v72;
  std::mutex v73;
  uint64_t v74;

  v1 = a1;
  v74 = *MEMORY[0x1E0C80C00];
  v2 = std::__thread_local_data();
  v3 = *v1;
  *v1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *((unsigned __int8 *)v1 + 40);
  E5RT::ExecutionStream::CreateExecutionStream(&v70);
  sub_191068D20((uint64_t *)&v69, (uint64_t *)v1[1]);
  v73.__m_.__opaque[15] = 16;
  strcpy((char *)&v73, "completion event");
  E5RT::AsyncEvent::CreateEvent((__int128 *)&v73.__m_.__sig, 0, v71);
  v67 = (E5RT::AsyncEvent *)v71[0];
  if (v71[0])
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = (std::__shared_weak_count_vtbl *)v71[0];
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3158;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v6;
    v68 = v5;
    v71[0] = 0;
    if ((v73.__m_.__opaque[15] & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v68 = 0;
  v71[0] = 0;
  if (v73.__m_.__opaque[15] < 0)
LABEL_3:
    operator delete((void *)v73.__m_.__sig);
LABEL_4:
  v7 = v70;
  v66 = v69;
  if (*((_QWORD *)&v69 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  E5RT::ExecutionStream::EncodeOperation((uint64_t)v7, &v66);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (!*((_QWORD *)&v66 + 1))
    goto LABEL_11;
  v11 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_11:
    v13 = v1[2];
    if (!*((_BYTE *)v13 + 176))
      goto LABEL_13;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  v13 = v1[2];
  if (*((_BYTE *)v13 + 176))
  {
LABEL_12:
    E5RT::ExecutionStream::PreWireInUseAllocations((E5RT::ExecutionStreamImpl **)v70);
    v13 = v1[2];
  }
LABEL_13:
  v64 = 0;
  v65 = 0;
  v14 = *((_QWORD *)v13 + 8);
  v63 = 1;
  memset(v73.__m_.__opaque, 0, sizeof(v73.__m_.__opaque));
  v73.__m_.__sig = 850045863;
  v59 = v1[3];
  v57.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v58 = v1;
  v55 = 0;
  v15 = 0;
  v60 = v4;
  v54 = v14;
  v16 = v1[2];
  if (!*((_BYTE *)v16 + 88))
    goto LABEL_16;
  do
  {
    v61 = v14;
    if ((v55 & 1) != 0)
      goto LABEL_53;
LABEL_21:
    std::mutex::lock(&v73);
    if (v61 < 1)
      goto LABEL_51;
    v56 = v15;
    v19 = 0;
    while (1)
    {
      v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      rep = v20.__d_.__rep_;
      v22 = (uint64_t *)(*(_QWORD *)v1[3] + 24 * v4);
      v23 = (std::chrono::steady_clock::time_point **)(v22 + 1);
      v24 = (std::chrono::steady_clock::time_point *)v22[1];
      v26 = v22 + 2;
      v25 = v22[2];
      if ((unint64_t)v24 < v25)
      {
        v24->__d_.__rep_ = v20.__d_.__rep_;
        v24[1].__d_.__rep_ = 0;
        v27 = v24 + 2;
        goto LABEL_37;
      }
      v28 = (std::chrono::steady_clock::time_point *)*v22;
      v29 = ((uint64_t)v24 - *v22) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v31 = v25 - (_QWORD)v28;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v30;
      if (v32)
      {
        if (v32 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v33 = (char *)operator new(16 * v32);
        v34 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)&v33[16 * v29];
        *v34 = rep;
        v34[1] = 0;
        v35 = (uint64_t)v34;
        if (v24 == v28)
        {
LABEL_35:
          *v22 = v35;
          v27 = (std::chrono::steady_clock::time_point *)(v34 + 2);
          *v23 = (std::chrono::steady_clock::time_point *)(v34 + 2);
          *v26 = &v33[16 * v32];
          if (!v24)
            goto LABEL_37;
LABEL_36:
          operator delete(v24);
          goto LABEL_37;
        }
      }
      else
      {
        v33 = 0;
        v34 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)(16 * v29);
        *v34 = rep;
        v34[1] = 0;
        v35 = 16 * v29;
        if (v24 == v28)
          goto LABEL_35;
      }
      do
      {
        *(_OWORD *)(v35 - 16) = *(_OWORD *)&v24[-2].__d_.__rep_;
        v35 -= 16;
        v24 -= 2;
      }
      while (v24 != v28);
      v24 = (std::chrono::steady_clock::time_point *)*v22;
      *v22 = v35;
      v27 = (std::chrono::steady_clock::time_point *)(v34 + 2);
      *v23 = (std::chrono::steady_clock::time_point *)(v34 + 2);
      *v26 = &v33[16 * v32];
      if (v24)
        goto LABEL_36;
LABEL_37:
      *v23 = v27;
      v36 = v70;
      v72 = 0;
      v37 = operator new(0x40uLL);
      *v37 = &off_1E2DD12D0;
      v37[1] = &v65;
      LODWORD(v4) = v60;
      v37[2] = v59;
      v37[3] = v60;
      v37[4] = &v63;
      v37[5] = &v67;
      v37[6] = &v64;
      v37[7] = &v73;
      v72 = v37;
      E5RT::ExecutionStream::SubmitStreamAsync((uint64_t)v36, v71);
      v38 = v72;
      if (v72 == v71)
      {
        v38 = v71;
        v39 = 4;
        v1 = v58;
      }
      else
      {
        v1 = v58;
        if (!v72)
          goto LABEL_42;
        v39 = 5;
      }
      (*(void (**)(void))(*v38 + 8 * v39))();
      do
LABEL_42:
        v40 = __ldxr(&v64);
      while (__stxr(v40 + 1, &v64));
      if (*((_BYTE *)v1[2] + 88)
        && (double)((std::chrono::steady_clock::now().__d_.__rep_ - v57.__d_.__rep_) / 1000000) / 1000.0 > *((double *)v1[2] + 10))
      {
        break;
      }
      if (++v19 == v61)
        goto LABEL_50;
    }
    v55 = 1;
LABEL_50:
    v14 = v54;
    v15 = v56;
LABEL_51:
    std::mutex::unlock(&v73);
    E5RT::AsyncEvent::SyncWait(v67);
    ++v63;
    v15 += v14;
    v16 = v1[2];
  }
  while (*((_BYTE *)v16 + 88));
LABEL_16:
  v17 = *((_QWORD *)v16 + 3);
  if (v17 > v15)
  {
    if (v15 + v14 <= v17)
      v18 = v14;
    else
      v18 = v17 - v15;
    v61 = v18;
    goto LABEL_21;
  }
LABEL_53:
  v41 = (unint64_t *)v1[4];
  v42 = atomic_load(&v65);
  do
    v43 = __ldaxr(v41);
  while (__stlxr(v43 + v42, v41));
  std::mutex::~mutex(&v73);
  v44 = v68;
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v70;
  v70 = 0;
  if (v50)
    (*(void (**)(E5RT::ExecutionStream *))(*(_QWORD *)v50 + 8))(v50);
  if (a1)
  {
    v51 = *a1;
    *a1 = 0;
    if (v51)
    {
      v52 = MEMORY[0x19401CA24]();
      MEMORY[0x19401CD90](v52, 0x20C4093837F09);
    }
    MEMORY[0x19401CD90](a1, 0x1060C40EEB2933FLL);
  }
  return 0;
}

void sub_19106CA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28)
{
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;

  v29 = a25;
  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = a27;
  if (a27)
  {
    v33 = (unint64_t *)&a27->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = a28;
  a28 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_19106CC14(&a18);
  _Unwind_Resume(a1);
}

uint64_t **sub_19106CC14(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x19401CA24]();
      MEMORY[0x19401CD90](v4, 0x20C4093837F09);
    }
    MEMORY[0x19401CD90](v2, 0x1060C40EEB2933FLL);
  }
  return a1;
}

void sub_19106CC80()
{
  JUMPOUT(0x19401CD90);
}

__n128 sub_19106CC94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E2DD12D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_19106CCE4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E2DD12D0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19106CD1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *a3;
  v6 = *a4;
  *a4 = 0;
  *(std::chrono::steady_clock::time_point *)(*(_QWORD *)(**(_QWORD **)(a1 + 16) + 24 * *(_QWORD *)(a1 + 24))
                                           + 16 * v5
                                           - 8) = std::chrono::steady_clock::now();
  v7 = *(std::mutex **)(a1 + 56);
  std::mutex::lock(v7);
  v8 = *(unint64_t **)(a1 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v10 = atomic_load(*(unint64_t **)(a1 + 48));
  v11 = atomic_load(*(unint64_t **)(a1 + 8));
  std::mutex::unlock(v7);
  if (v10 == v11)
    E5RT::AsyncEvent::Signal(**(E5RT::AsyncEvent ***)(a1 + 40));
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_19106CDE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19106CE08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112b"
                     "asic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_ENK3$_1clEvENKUlmE_clEmE"
                     "UlyyNS8_10unique_ptrIN4E5RT9E5RTErrorENS8_14default_deleteISN_EEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterR"
                                "KNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_EN"
                                "K3$_1clEvENKUlmE_clEmEUlyyNS8_10unique_ptrIN4E5RT9E5RTErrorENS8_14default_deleteISN_EEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_ENK3$_1clEvENKUlmE_clEmEUlyyNS8_10unique_ptrIN4E5RT9E5RTErrorENS8_14default_deleteISN_EEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_ENK3$_1clEvENKUlmE_clEmEUlyyNS8_10unique_ptrIN4E5RT9E5RTErrorENS8_14default_deleteISN_EEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_19106CE74()
{
  return &unk_1E2DD1330;
}

void sub_19106CE94()
{
  MEMORY[0x19401CA24]();
  sub_19106CE80();
  JUMPOUT(0x19401CD90);
}

uint64_t E5DB::SafeExecute(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  return 0;
}

void sub_19106D054(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

float Espresso::AOT::DTrees::concatAneFp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneIp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneJp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneKp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneGp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneHp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatCpuFp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuIp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuJp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuKp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuGp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuHp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatGpuFp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuIp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuJp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuKp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuGp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuHp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatAneCp()
{
  return 45.0;
}

float Espresso::AOT::DTrees::concatAneDp()
{
  return 45.0;
}

float Espresso::AOT::DTrees::concatAneEp()
{
  return 45.0;
}

float Espresso::AOT::DTrees::concatCpuCp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::concatCpuDp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::concatCpuEp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::concatGpuCp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatGpuDp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatGpuEp()
{
  return 5.0;
}

double *Espresso::AOT::ConstCostEstimator::ConstCostEstimator(Espresso::AOT::ConstCostEstimator *this, double a2, double a3)
{
  double *result;

  result = (double *)Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(this);
  *(_QWORD *)result = &off_1E2DA05D0;
  result[1] = a2;
  result[2] = a3;
  return result;
}

{
  double *result;

  result = (double *)Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(this);
  *(_QWORD *)result = &off_1E2DA05D0;
  result[1] = a2;
  result[2] = a3;
  return result;
}

uint64_t Espresso::AOT::ConstCostEstimator::EstimateCost@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t result;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v6 = *(double *)(a1 + 8)
     * (double)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) >> 4);
  v7 = operator new();
  result = Espresso::AOT::CostEstimate::CostEstimate(v7, v6);
  *a3 = v7;
  return result;
}

void sub_19106D26C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::ConstCostEstimator::EstimateCost@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = Espresso::AOT::CostEstimate::CostEstimate(v4, *(double *)(a1 + 16));
  *a2 = v4;
  return result;
}

void sub_19106D2E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::ConstCostEstimator::LaunchCost@<X0>(Espresso::AOT::ConstCostEstimator *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = Espresso::AOT::CostEstimate::CostEstimate(v4, *((double *)this + 2));
  *a2 = v4;
  return result;
}

void sub_19106D354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::ConstCostEstimator::EndCost@<X0>(Espresso::AOT::ConstCostEstimator *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = Espresso::AOT::CostEstimate::CostEstimate(v4, *((double *)this + 2));
  *a2 = v4;
  return result;
}

void sub_19106D3C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::ConstCostEstimator::~ConstCostEstimator(Espresso::AOT::ConstCostEstimator *this)
{
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(Espresso::AOT::AOTCompilerOptions *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  if (*((char *)this + 79) < 0)
  {
    operator delete(*((void **)this + 7));
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*((char *)this + 23) & 0x80000000) == 0)
        return;
LABEL_11:
      operator delete(*(void **)this);
      return;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0)
    goto LABEL_11;
}

double Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(Espresso::AOT::AOTCompilerOptions *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 24) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((_QWORD *)this + 16) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 24) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((_QWORD *)this + 16) = 0;
  return result;
}

std::string *Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(std::string *this, const Espresso::AOT::AOTCompilerOptions *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    this[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 24);
    v5 = (std::string *)((char *)this + 32);
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 24);
    v5 = (std::string *)((char *)this + 32);
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *((_OWORD *)a2 + 2);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 6);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
LABEL_6:
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v7;
  }
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  std::unordered_map<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>::unordered_map((uint64_t)&this[3].__r_.__value_.__r.__words[2], (uint64_t)a2 + 88);
  this[5].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 16);
  return this;
}

void sub_19106D618(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(result + 24) = *((_BYTE *)a2 + 24);
  v3 = a2[2];
  *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(result + 32) = v3;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v4 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(result + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(result + 56) = v4;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *(_DWORD *)(result + 80) = *((_DWORD *)a2 + 20);
  v5 = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = 0;
  *(_QWORD *)(result + 88) = v5;
  *(_QWORD *)(result + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  v6 = *((_QWORD *)a2 + 13);
  *(_QWORD *)(result + 104) = v6;
  v7 = *((_QWORD *)a2 + 14);
  *(_QWORD *)(result + 112) = v7;
  *(_DWORD *)(result + 120) = *((_DWORD *)a2 + 30);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *(_QWORD *)(result + 96);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v8 %= v9;
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(_QWORD *)(v5 + 8 * v8) = result + 104;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
  }
  *(_QWORD *)(result + 128) = *((_QWORD *)a2 + 16);
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(result + 24) = *((_BYTE *)a2 + 24);
  v3 = a2[2];
  *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(result + 32) = v3;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v4 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(result + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(result + 56) = v4;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *(_DWORD *)(result + 80) = *((_DWORD *)a2 + 20);
  v5 = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = 0;
  *(_QWORD *)(result + 88) = v5;
  *(_QWORD *)(result + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  v6 = *((_QWORD *)a2 + 13);
  *(_QWORD *)(result + 104) = v6;
  v7 = *((_QWORD *)a2 + 14);
  *(_QWORD *)(result + 112) = v7;
  *(_DWORD *)(result + 120) = *((_DWORD *)a2 + 30);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *(_QWORD *)(result + 96);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v8 %= v9;
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(_QWORD *)(v5 + 8 * v8) = result + 104;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
  }
  *(_QWORD *)(result + 128) = *((_QWORD *)a2 + 16);
  return result;
}

uint64_t Espresso::AOT::AOTCompilerOptions::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *> *>>((_QWORD *)(a1 + 88), *(char **)(a2 + 104), 0);
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t Espresso::AOT::AOTCompilerOptions::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v5);
  v6 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  v7 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v7);
  v8 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 79) = 0;
  *((_BYTE *)a2 + 56) = 0;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__move_assign(a1 + 88, (uint64_t *)a2 + 11);
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  return a1;
}

__n128 Espresso::AOT::AOTCompilerOptions::SetBackend(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  result = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  *(__n128 *)a1 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetBuildForProfiling(uint64_t this, char a2)
{
  *(_BYTE *)(this + 24) = a2;
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetInput(Espresso::AOT::AOTCompilerOptions *this)
{
  return (uint64_t)this + 32;
}

__n128 Espresso::AOT::AOTCompilerOptions::SetInput(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  __n128 result;

  v3 = a1 + 32;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)v3);
  result = *a2;
  *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetOutput(Espresso::AOT::AOTCompilerOptions *this)
{
  return (uint64_t)this + 56;
}

__n128 Espresso::AOT::AOTCompilerOptions::SetOutput(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  __n128 result;

  v3 = a1 + 56;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)v3);
  result = *a2;
  *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetVerbosityLevel(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetVerbosityLevel(uint64_t this, char a2)
{
  *(_BYTE *)(this + 80) = a2;
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::IncrementVerbosityLevel(uint64_t this)
{
  ++*(_BYTE *)(this + 80);
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetShowVersion(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetShowVersion(uint64_t this, char a2)
{
  *(_BYTE *)(this + 81) = a2;
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetQueryE5Platforms(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 82);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetQueryE5Platforms(uint64_t this, char a2)
{
  *(_BYTE *)(this + 82) = a2;
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetQueryE5PlatformFamilies(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 83);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetQueryE5PlatformFamilies(uint64_t this, char a2)
{
  *(_BYTE *)(this + 83) = a2;
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::TryGetMILProgram(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetMILProgram(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 128) = a2;
  return result;
}

double Espresso::AOT::AOTCompilerOptions::GetOptions@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  double result;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 88), a2);
  if (v4)
  {
    std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::unordered_map(a3, (uint64_t)(v4 + 5));
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
  return result;
}

uint64_t *Espresso::AOT::AOTCompilerOptions::SetOption(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 *v11;

  v11 = a2;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 88, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v11);
  v11 = a3;
  result = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v6 + 5), (uint64_t)a3, (uint64_t)&std::piecewise_construct, &v11);
  v8 = *((unsigned int *)result + 16);
  v9 = *(unsigned int *)(a4 + 24);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      return result;
  }
  else if ((_DWORD)v9 == -1)
  {
    v10 = result;
    result = (uint64_t *)((uint64_t (*)(__int128 **, uint64_t *))off_1E2DD1350[v8])(&v11, result + 5);
    *((_DWORD *)v10 + 16) = -1;
    return result;
  }
  v11 = (__int128 *)(result + 5);
  return (uint64_t *)((uint64_t (*)(__int128 **))off_1E2DD1370[v9])(&v11);
}

uint64_t *Espresso::AOT::AOTCompilerOptions::UnsetOption(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 88, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__erase_unique<std::string>(v4 + 5, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E2DD1350[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E2DD1350[v5])(&v6, v4);
  }
  v4[6] = -1;
  *v4 = *a3;
  v4[6] = 1;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  _DWORD *v4;
  uint64_t v5;
  float result;
  char v7;

  v4 = *(_DWORD **)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))off_1E2DD1350[v5])(&v7, v4);
  }
  result = *a3;
  *v4 = *(_DWORD *)a3;
  v4[6] = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEEOSS_EEEDcSK_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    ((void (*)(char *, __n128 *))off_1E2DD1350[v5])(&v8, v4);
LABEL_7:
    v4[1].n128_u32[2] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[1].n128_u32[2] = 3;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>(uint64_t a1)
{
  void **v2;
  void **v3;
  uint64_t v4;
  void *v5;
  char v6;

  v2 = *(void ***)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      v4 = *((unsigned int *)v2 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, void **))off_1E2DD1350[v4])(&v6, v2 + 5);
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    operator delete(v5);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      v4 = *((unsigned int *)v2 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, void **))off_1E2DD1350[v4])(&v7, v2 + 5);
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;
  uint64_t v4;
  char v5;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      v4 = *((unsigned int *)v2 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, void **))off_1E2DD1350[v4])(&v5, v2 + 5);
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19106E260(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_19106E274(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  char *v28;
  float v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return v14;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = (char *)operator new(0x50uLL);
  v28 = v27;
  v44[0] = v27;
  v44[1] = a1 + 16;
  v45 = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v27 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v27 + 4) = *(_QWORD *)(a3 + 16);
  }
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::unordered_map((uint64_t)(v28 + 40), a3 + 24);
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      v32 = (_QWORD *)v44[0];
      if (v31)
        goto LABEL_57;
    }
LABEL_81:
    *v32 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v44[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v44[0])
    {
      v42 = *(_QWORD *)(*(_QWORD *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11)
          v42 %= v11;
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v32 = (_QWORD *)v44[0];
  if (!v31)
    goto LABEL_81;
LABEL_57:
  *v32 = *v31;
  *v31 = v44[0];
LABEL_92:
  v14 = (uint64_t *)v44[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19106E6E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19106E6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19106E708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *> *>>(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v6;
  uint64_t i;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11[3];

  v6 = a1[1];
  if (!v6)
    goto LABEL_11;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 16));
      if (v8 != a2)
      {
        *((_DWORD *)v8 + 18) = *((_DWORD *)a2 + 18);
        std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *> *>>((_QWORD *)v8 + 5, *((__int128 **)a2 + 7), 0);
      }
      v9 = *(char **)v8;
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = *(char **)a2;
      v8 = v9;
      if (!v9)
        goto LABEL_11;
    }
    do
    {
      v10 = *(char **)v8;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v8 + 16));
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__construct_node<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>> const&>((uint64_t)a1, (uint64_t)(a2 + 16), (uint64_t)v11);
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__node_insert_multi(a1, v11[0]);
      a2 = *(char **)a2;
    }
  }
}

void sub_19106E878(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_19106E894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, char a12)
{
  if (__p)
  {
    if (a12)
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)__p + 16);
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *inserted;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  char v16;

  v4 = (_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  v11 = (int8x8_t)a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v11)
      v12 %= *(_QWORD *)&v11;
  }
  else
  {
    v12 &= *(_QWORD *)&v11 - 1;
  }
  if (!inserted)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_25;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
LABEL_24:
    *(_QWORD *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(_QWORD *)a2 = *inserted;
  *inserted = a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
    if (v14 != v12)
      goto LABEL_24;
  }
LABEL_25:
  ++a1[3];
  return a2;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *> *>>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;
  char *v15;
  char v16;

  v6 = a1[1];
  if (!v6)
    goto LABEL_14;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (!v8)
  {
LABEL_14:
    while (a2 != (__int128 *)a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_multi<std::pair<std::string const,std::variant<BOOL,int,float,std::string>> const&>(a1, a2 + 1);
      a2 = *(__int128 **)a2;
    }
    return;
  }
  while (a2 != (__int128 *)a3)
  {
    std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 1));
    v9 = *((unsigned int *)v8 + 16);
    v10 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v9 == -1)
    {
      if ((_DWORD)v10 != -1)
      {
LABEL_10:
        v15 = v8 + 40;
        ((void (*)(char **))off_1E2DD1390[v10])(&v15);
      }
    }
    else
    {
      if ((_DWORD)v10 != -1)
        goto LABEL_10;
      ((void (*)(char *, char *))off_1E2DD1350[v9])(&v16, v8 + 40);
      *((_DWORD *)v8 + 16) = -1;
    }
    v11 = *(char **)v8;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi(a1, (uint64_t)v8);
    a2 = *(__int128 **)a2;
    v8 = v11;
    if (!v11)
      goto LABEL_14;
  }
  do
  {
    v12 = *(char **)v8;
    v13 = *((unsigned int *)v8 + 16);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, char *))off_1E2DD1350[v13])(&v14, v8 + 40);
    *((_DWORD *)v8 + 16) = -1;
    if (v8[39] < 0)
      operator delete(*((void **)v8 + 2));
    operator delete(v8);
    v8 = v12;
  }
  while (v12);
}

void sub_19106EBA4(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_19106EBC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *inserted;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  char v16;

  v4 = (_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  v11 = (int8x8_t)a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v11)
      v12 %= *(_QWORD *)&v11;
  }
  else
  {
    v12 &= *(_QWORD *)&v11 - 1;
  }
  if (!inserted)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_25;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
LABEL_24:
    *(_QWORD *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(_QWORD *)a2 = *inserted;
  *inserted = a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
    if (v14 != v12)
      goto LABEL_24;
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSU_EEEDcSM_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E2DD1350[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSU_EEEDcSM_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E2DD1350[v5])(&v6, v4);
  }
  v4[6] = -1;
  *v4 = *a3;
  v4[6] = 1;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  _DWORD *v4;
  uint64_t v5;
  float result;
  char v7;

  v4 = *(_DWORD **)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))off_1E2DD1350[v5])(&v7, v4);
  }
  result = *a3;
  *v4 = *(_DWORD *)a3;
  v4[6] = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSU_EEEDcSM_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  __n128 *v3;
  unsigned __int32 v4;
  __n128 result;
  std::string v6;
  char v7;

  v3 = *a1;
  v4 = (*a1)[1].n128_u32[2];
  if (v4 == 3)
  {
    std::string::operator=(this, __str);
    return result;
  }
  if ((SHIBYTE(__str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v6 = *__str;
    if (v4 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  v4 = v3[1].n128_u32[2];
  if (v4 != -1)
LABEL_7:
    ((void (*)(char *, __n128 *))off_1E2DD1350[v4])(&v7, v3);
LABEL_8:
  result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
  v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
  *v3 = result;
  v3[1].n128_u32[2] = 3;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  size_t prime;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  size_t v19;
  uint8x8_t v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  _BOOL4 v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  char v40;
  BOOL v41;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const void **v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  char v57;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v12 = 1;
    if (v6 >= 3)
      v12 = (v6 & (v6 - 1)) != 0;
    v13 = v12 | (2 * v6);
    v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14)
      prime = v14;
    else
      prime = v13;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v6)
      goto LABEL_15;
    if (prime < v6)
    {
      v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 >= 3)
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] <= 1uLL)
        {
          v18 = 1 << -(char)__clz(v16 - 1);
          if (v16 >= 2)
            v16 = v18;
          if (prime <= v16)
            prime = v16;
          if (prime >= v6)
            goto LABEL_28;
LABEL_15:
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(a1, prime);
          goto LABEL_28;
        }
      }
      v19 = std::__next_prime(v16);
      if (prime <= v19)
        prime = v19;
      if (prime < v6)
        goto LABEL_15;
    }
LABEL_28:
    v6 = *(_QWORD *)(a1 + 8);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v20.i16[0] = vaddlv_u8(v20);
    v10 = v20.u32[0];
    if (v20.u32[0] <= 1uLL)
      goto LABEL_4;
    goto LABEL_29;
  }
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  v11 = a2;
  if (v6 <= a2)
    v11 = a2 % v6;
LABEL_31:
  v21 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v11);
  if (!v21)
    return 0;
  v22 = a3[23];
  if (v22 >= 0)
    v23 = a3[23];
  else
    v23 = *((_QWORD *)a3 + 1);
  if (v22 < 0)
    a3 = *(_BYTE **)a3;
  if (v10 >= 2)
  {
    v43 = 0;
    do
    {
      v28 = v21;
      v21 = (uint64_t *)*v21;
      if (!v21)
        break;
      v46 = v21[1];
      v47 = v46;
      if (v46 >= v6)
        v47 = v46 % v6;
      if (v47 != v11)
        break;
      if (v46 == a2
        && ((v48 = *((unsigned __int8 *)v21 + 39), (v48 & 0x80u) == 0)
          ? (v49 = *((unsigned __int8 *)v21 + 39))
          : (v49 = v21[3]),
            v49 == v23))
      {
        v50 = (const void **)(v21 + 2);
        if ((v48 & 0x80) != 0)
        {
          v44 = memcmp(*v50, a3, v21[3]) == 0;
        }
        else if (*((_BYTE *)v21 + 39))
        {
          v51 = v48 - 1;
          v52 = a3;
          do
          {
            v54 = *(unsigned __int8 *)v50;
            v50 = (const void **)((char *)v50 + 1);
            v53 = v54;
            v56 = *v52++;
            v55 = v56;
            v39 = v51-- != 0;
            v57 = v39;
            v41 = v53 == v55;
            v44 = v53 == v55;
          }
          while (v41 && (v57 & 1) != 0);
        }
        else
        {
          v44 = 1;
        }
      }
      else
      {
        v44 = 0;
      }
      v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    v24 = 0;
    v25 = v6 - 1;
    do
    {
      v28 = v21;
      v21 = (uint64_t *)*v21;
      if (!v21)
        break;
      v29 = v21[1];
      if ((v29 & v25) != v11)
        break;
      if (v29 == a2
        && ((v30 = *((unsigned __int8 *)v21 + 39), (v30 & 0x80u) == 0)
          ? (v31 = *((unsigned __int8 *)v21 + 39))
          : (v31 = v21[3]),
            v31 == v23))
      {
        v32 = (const void **)(v21 + 2);
        if ((v30 & 0x80) != 0)
        {
          v26 = memcmp(*v32, a3, v21[3]) == 0;
        }
        else if (*((_BYTE *)v21 + 39))
        {
          v33 = v30 - 1;
          v34 = a3;
          do
          {
            v36 = *(unsigned __int8 *)v32;
            v32 = (const void **)((char *)v32 + 1);
            v35 = v36;
            v38 = *v34++;
            v37 = v38;
            v39 = v33-- != 0;
            v40 = v39;
            v41 = v35 == v37;
            v26 = v35 == v37;
          }
          while (v41 && (v40 & 1) != 0);
        }
        else
        {
          v26 = 1;
        }
      }
      else
      {
        v26 = 0;
      }
      v27 = v24 & !v26;
      v24 |= v26;
    }
    while ((v27 & 1) == 0);
  }
  return v28;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_multi<std::pair<std::string const,std::variant<BOOL,int,float,std::string>> const&>(_QWORD *a1, __int128 *a2)
{
  char *v4;
  std::string *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  char v10;

  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = std::pair<std::string const,std::variant<BOOL,int,float,std::string>>::pair[abi:ne180100]((std::string *)(v4 + 16), a2);
  v6 = v4[39];
  if (v6 >= 0)
    v7 = (uint64_t *)v5;
  else
    v7 = (uint64_t *)*((_QWORD *)v4 + 2);
  if (v6 >= 0)
    v8 = v4[39];
  else
    v8 = *((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v10, v7, v8);
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi(a1, (uint64_t)v4);
}

void sub_19106F34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19106F364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(unsigned int *)(v2 + 64);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E2DD1350[v3])(&v5, v2 + 40);
      *(_DWORD *)(v2 + 64) = -1;
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

std::string *std::pair<std::string const,std::variant<BOOL,int,float,std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  _BYTE v7[2];

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = -1;
  v5 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_BYTE *, std::string *, char *))off_1E2DD13B0[v5])(v7, &this[1], (char *)a2 + 24);
    LODWORD(this[2].__r_.__value_.__l.__data_) = v5;
  }
  return this;
}

void sub_19106F494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 48);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD1350[v16])(&a13, v14);
  *(_DWORD *)(v13 + 48) = -1;
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__construct_node<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t result;
  char v13;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x50uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = (uint64_t *)(v6 + 16);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 4) = *(_QWORD *)(a2 + 16);
  }
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::unordered_map((uint64_t)(v7 + 40), a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  v9 = v7[39];
  if (v9 >= 0)
    v10 = v8;
  else
    v10 = (uint64_t *)*((_QWORD *)v7 + 2);
  if (v9 >= 0)
    v11 = v7[39];
  else
    v11 = *((_QWORD *)v7 + 3);
  result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v13, v10, v11);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_19106F5E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19106F5F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v4 + 2));
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *(void **)a1;
  *(_QWORD *)a1 = v8;
  if (v9)
    operator delete(v9);
  v12 = a2[2];
  v11 = a2 + 2;
  v10 = v12;
  v13 = *(v11 - 1);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  v14 = v11[1];
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
    *v11 = 0;
    v11[1] = 0;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char v27;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v27, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v22 = v13[1];
          if (v8 == v22)
          {
            v23 = *((unsigned __int8 *)v13 + 39);
            if ((v23 & 0x80u) == 0)
              v24 = *((unsigned __int8 *)v13 + 39);
            else
              v24 = v13[3];
            if (v24 == v15)
            {
              v25 = (const void **)(v13 + 2);
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp(*v25, v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                for (i = v2; *(unsigned __int8 *)v25 == *i; ++i)
                {
                  v25 = (const void **)((char *)v25 + 1);
                  if (!--v23)
                    return v13;
                }
              }
            }
          }
          else if ((v22 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            v20 = (const void **)(v13 + 2);
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp(*v20, v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              for (j = v2; *(unsigned __int8 *)v20 == *j; ++j)
              {
                v20 = (const void **)((char *)v20 + 1);
                if (!--v18)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<BOOL,int,float,std::string>> const&>(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_19106FA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_19106FA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<BOOL,int,float,std::string>> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  float v28;
  float v29;
  _QWORD *v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[2];
  char v44;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return v14;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = (char *)operator new(0x48uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  v44 = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v10;
  std::pair<std::string const,std::variant<BOOL,int,float,std::string>>::pair[abi:ne180100]((std::string *)(v27 + 16), a3);
  v44 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    v32 = 1;
    if (v11 >= 3)
      v32 = (v11 & (v11 - 1)) != 0;
    v33 = v32 | (2 * v11);
    v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v31 = (_QWORD *)v43[0];
        if (v30)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v31 = (_QWORD *)v43[0];
        if (v30)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v40 & v10;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v10));
      v31 = (_QWORD *)v43[0];
      if (v30)
        goto LABEL_54;
    }
LABEL_78:
    *v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v43[0])
    {
      v41 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11)
          v41 %= v11;
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_89;
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v31 = (_QWORD *)v43[0];
  if (!v30)
    goto LABEL_78;
LABEL_54:
  *v31 = *v30;
  *v30 = v43[0];
LABEL_89:
  v14 = (uint64_t *)v43[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19106FEB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19106FEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  char *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (char *)operator new(0x50uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v11;
  v29 = (std::string *)(v28 + 16);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *((_DWORD *)v28 + 18) = 1065353216;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19107033C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191070350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  char *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (char *)operator new(0x48uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v11;
  v29 = (std::string *)(v28 + 16);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[40] = 0;
  *((_DWORD *)v28 + 16) = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1910707B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910707CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__erase_unique<std::string>(_QWORD *a1, uint64_t a2)
{
  uint64_t *result;
  void **v4;
  uint64_t v5;
  void *__p;
  char v7;
  char v8;

  result = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(a1, result, (uint64_t)&__p);
    v4 = (void **)__p;
    __p = 0;
    if (v4)
    {
      if (v7)
      {
        v5 = *((unsigned int *)v4 + 16);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, void **))off_1E2DD1350[v5])(&v8, v4 + 5);
        *((_DWORD *)v4 + 16) = -1;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
      }
      operator delete(v4);
    }
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char v27;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v27, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v22 = v13[1];
          if (v22 == v8)
          {
            v23 = *((unsigned __int8 *)v13 + 39);
            if ((v23 & 0x80u) == 0)
              v24 = *((unsigned __int8 *)v13 + 39);
            else
              v24 = v13[3];
            if (v24 == v15)
            {
              v25 = (const void **)(v13 + 2);
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp(*v25, v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                for (i = v2; *(unsigned __int8 *)v25 == *i; ++i)
                {
                  v25 = (const void **)((char *)v25 + 1);
                  if (!--v23)
                    return v13;
                }
              }
            }
          }
          else if ((v22 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            v20 = (const void **)(v13 + 2);
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp(*v20, v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              for (j = v2; *(unsigned __int8 *)v20 == *j; ++j)
              {
                v20 = (const void **)((char *)v20 + 1);
                if (!--v18)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void Espresso::AOT::MILCompilerForE5::FilterUnavailableBackends(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, char **a4@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unsigned int *v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unsigned int *v27;
  uint64_t v28;
  __int128 v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  unsigned int *v56;
  char *v57;
  char *v58;
  char v59;

  v56 = 0;
  v57 = 0;
  v58 = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v9 = *v4;
      if (*v4 == 2)
      {
        if (!Espresso::AOT::Utils::DoesPlatformHaveANE(*a3))
          goto LABEL_6;
        v9 = *v4;
      }
      if (v9 == 5)
      {
        if (!Espresso::AOT::Utils::HasMPSGraphAvailable(*a3))
          goto LABEL_6;
        v9 = *v4;
      }
      if (v9 == 4)
      {
        v11 = (unsigned int *)v57;
        v10 = (unint64_t)v58;
        if (!*a3)
        {
          if (v57 >= v58)
          {
            v12 = v56;
            v21 = (v57 - (char *)v56) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v23 = v58 - (char *)v56;
            if ((v58 - (char *)v56) >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v16 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v16 = v22;
            if (v16)
            {
              if (v16 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v17 = operator new(4 * v16);
              v18 = (unsigned int *)&v17[4 * v21];
              *v18 = 3;
              v8 = (uint64_t)(v18 + 1);
              if (v57 == (char *)v56)
                goto LABEL_48;
            }
            else
            {
              v17 = 0;
              v18 = (unsigned int *)(4 * v21);
              *(_DWORD *)(4 * v21) = 3;
              v8 = 4 * v21 + 4;
              if (v57 == (char *)v56)
                goto LABEL_48;
            }
            v31 = v57 - 4 - (char *)v56;
            if (v31 < 0x2C)
              goto LABEL_93;
            if ((unint64_t)((char *)v56 - v17) < 0x20)
              goto LABEL_93;
            v32 = (v31 >> 2) + 1;
            v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
            v34 = &v57[-v33];
            v18 = (unsigned int *)((char *)v18 - v33);
            v35 = &v17[4 * v21 - 16];
            v36 = v57 - 16;
            v37 = v32 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v38 = *(_OWORD *)v36;
              *(v35 - 1) = *((_OWORD *)v36 - 1);
              *v35 = v38;
              v35 -= 2;
              v36 -= 32;
              v37 -= 8;
            }
            while (v37);
            v11 = (unsigned int *)v34;
            if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_93:
              do
              {
                v39 = *--v11;
                *--v18 = v39;
              }
              while (v11 != v56);
            }
            goto LABEL_48;
          }
          *(_DWORD *)v57 = 3;
          v7 = v57 + 4;
          goto LABEL_4;
        }
      }
      else
      {
        v11 = (unsigned int *)v57;
        v10 = (unint64_t)v58;
      }
      if ((unint64_t)v11 >= v10)
      {
        v12 = v56;
        v13 = v11 - v56;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v15 = v10 - (_QWORD)v56;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v17 = operator new(4 * v16);
          v18 = (unsigned int *)&v17[4 * v13];
          *v18 = v9;
          v8 = (uint64_t)(v18 + 1);
          if (v11 == v56)
            goto LABEL_48;
LABEL_30:
          v19 = (char *)(v11 - 1) - (char *)v56;
          if (v19 < 0x2C)
          {
            v20 = v11;
            goto LABEL_47;
          }
          if ((unint64_t)((char *)v56 - v17) < 0x20)
          {
            v20 = v11;
            goto LABEL_47;
          }
          v24 = (v19 >> 2) + 1;
          v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
          v20 = &v11[v25 / 0xFFFFFFFFFFFFFFFCLL];
          v18 = (unsigned int *)((char *)v18 - v25);
          v26 = &v17[4 * v13 - 16];
          v27 = v11 - 4;
          v28 = v24 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v29 = *(_OWORD *)v27;
            *(v26 - 1) = *((_OWORD *)v27 - 1);
            *v26 = v29;
            v26 -= 2;
            v27 -= 8;
            v28 -= 8;
          }
          while (v28);
          if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_47:
              v30 = *--v20;
              *--v18 = v30;
            }
            while (v20 != v56);
          }
        }
        else
        {
          v17 = 0;
          v18 = (unsigned int *)(4 * v13);
          *(_DWORD *)(4 * v13) = v9;
          v8 = 4 * v13 + 4;
          if (v11 != v56)
            goto LABEL_30;
        }
LABEL_48:
        v56 = v18;
        v58 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
        goto LABEL_5;
      }
      *v11 = v9;
      v7 = (char *)(v11 + 1);
LABEL_4:
      v8 = (uint64_t)v7;
LABEL_5:
      v57 = (char *)v8;
LABEL_6:
      ++v4;
    }
    while (v4 != v5);
  }
  if ((Espresso::AOT::CompilerOptionsForE5::GetUseRankedChoiceSegmentation((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264)) & 1) == 0)
  {
    v40 = 126 - 2 * __clz((v57 - (char *)v56) >> 2);
    if (v57 == (char *)v56)
      v41 = 0;
    else
      v41 = v40;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,false>(v56, v57, (uint64_t)&v59, v41, 1);
  }
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v42 = v57 - (char *)v56;
  if (v57 != (char *)v56)
  {
    if (v42 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v43 = (char *)operator new(v57 - (char *)v56);
    *a4 = v43;
    v44 = &v43[4 * (v42 >> 2)];
    a4[2] = v44;
    memcpy(v43, v56, v42);
    a4[1] = v44;
    v45 = v44;
    do
    {
      v46 = v43 + 4;
      v47 = v45;
      if (v43 + 4 != v45)
      {
        v47 = v43 + 4;
        while (*(_DWORD *)v47 != *(_DWORD *)v43)
        {
          v47 += 4;
          if (v47 == v45)
          {
            v47 = v45;
            break;
          }
        }
      }
      v48 = (char *)(v47 - v46);
      v49 = ((v47 - v46) >> 2) + 1;
      v50 = &v48[(_QWORD)v43];
      v51 = v50 + 4;
      v52 = v50 + 8;
      if (v51 != v45 && v52 != v45)
      {
        do
        {
          if (*(_DWORD *)v52 != *(_DWORD *)v43)
            *(_DWORD *)&v43[4 * v49++] = *(_DWORD *)v52;
          v52 += 4;
        }
        while (v52 != v45);
      }
      v45 = &v43[4 * v49];
      v43 += 4;
    }
    while (v49 != 1);
    if (v45 != v44)
      a4[1] = v45;
  }
  if (v56)
    operator delete(v56);
}

void sub_191070F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *Espresso::AOT::MILCompilerForE5::MILCompilerForE5(_QWORD *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void **v17;
  void *v18[3];
  void *v19[2];
  char v20;
  void *__p[2];
  void *v22[2];
  int v23;
  _BYTE v24[136];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v24, a2);
  v6 = *(void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v22[0] = v8;
  v22[1] = v9;
  v23 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v22;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v24, (uint64_t)__p);
  v11 = (void **)v22[0];
  if (v22[0])
  {
    do
    {
      v17 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_22:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_22;
      }
      operator delete(v11);
      v11 = v17;
    }
    while (v17);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v24);
  *a1 = &off_1E2DA0470;
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 33), a2);
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(a1 + 76), a2);
  a1[93] = 0;
  Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation((Espresso::AOT::MILCompilerForE5 *)a1, (uint64_t)(a1 + 94));
  Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicCost((Espresso::AOT::MILCompilerForE5 *)a1, (uint64_t)(a1 + 99));
  v20 = 2;
  strcpy((char *)v19, "e5");
  HIBYTE(v18[2]) = 17;
  strcpy((char *)v18, "platform-families");
  Espresso::AOT::AOTCompilerOptions::UnsetOption((uint64_t)(a1 + 76), (__int128 *)v19, (uint64_t)v18);
  if (SHIBYTE(v18[2]) < 0)
  {
    operator delete(v18[0]);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_24:
    operator delete(v19[0]);
    goto LABEL_12;
  }
  if (v20 < 0)
    goto LABEL_24;
LABEL_12:
  if (Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 33)))
  {
    std::make_unique[abi:ne180100]<Espresso::AOT::Classic::ClassicAOTCompilerBackend,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> &>((const Espresso::AOT::AOTCompilerOptions *)(a1 + 76), a3, (uint64_t *)v19);
    v13 = v19[0];
    v19[0] = 0;
    v14 = a1[93];
    a1[93] = v13;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v19[0];
      v19[0] = 0;
      if (v15)
        (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  return a1;
}

void sub_1910711E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  Espresso::AOT::AbstractMILCompiler *v20;
  Espresso::AOT::CompilerOptionsForE5 *v21;
  Espresso::AOT::AOTCompilerOptions *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v24);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v23);
  v26 = *((_QWORD *)v20 + 93);
  *((_QWORD *)v20 + 93) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v22);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5(v21);
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v20);
  _Unwind_Resume(a1);
}

void sub_191071270(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler *v1;
  Espresso::AOT::CompilerOptionsForE5 *v2;

  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5(v2);
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_19107128C(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler *v1;

  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_1910712A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)va);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)va1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForE5::ExtractOptions@<X0>(Espresso::AOT::MILCompilerForE5 *this@<X0>, Espresso::AOT::CompilerOptionsForE5 *a2@<X8>)
{
  return Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5(a2, this);
}

void Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation(Espresso::AOT::MILCompilerForE5 *this@<X0>, uint64_t a2@<X8>)
{
  int **ComputeUnitsWithClassicValidation;
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  unsigned int *v8;

  ComputeUnitsWithClassicValidation = (int **)Espresso::AOT::CompilerOptionsForE5::GetComputeUnitsWithClassicValidation((Espresso::AOT::MILCompilerForE5 *)((char *)this + 264));
  Espresso::AOT::MILCompilerForE5::ComputeUnitsToBackends((uint64_t)this, ComputeUnitsWithClassicValidation, &v7);
  v5 = (unsigned int *)v7;
  v6 = v8;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (v5 != v6)
  {
    do
    {
      std::__hash_table<Espresso::AOT::BackendIdentifier,std::hash<Espresso::AOT::BackendIdentifier>,std::equal_to<Espresso::AOT::BackendIdentifier>,std::allocator<Espresso::AOT::BackendIdentifier>>::__emplace_unique_key_args<Espresso::AOT::BackendIdentifier,Espresso::AOT::BackendIdentifier const&>(a2, v5, v5);
      ++v5;
    }
    while (v5 != v6);
    v5 = (unsigned int *)v7;
  }
  if (v5)
  {
    v8 = v5;
    operator delete(v5);
  }
}

void sub_19107135C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)v1[2];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicCost(Espresso::AOT::MILCompilerForE5 *this@<X0>, uint64_t a2@<X8>)
{
  int **ComputeUnitsWithClassicCost;
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  unsigned int *v8;

  ComputeUnitsWithClassicCost = (int **)Espresso::AOT::CompilerOptionsForE5::GetComputeUnitsWithClassicCost((Espresso::AOT::MILCompilerForE5 *)((char *)this + 264));
  Espresso::AOT::MILCompilerForE5::ComputeUnitsToBackends((uint64_t)this, ComputeUnitsWithClassicCost, &v7);
  v5 = (unsigned int *)v7;
  v6 = v8;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (v5 != v6)
  {
    do
    {
      std::__hash_table<Espresso::AOT::BackendIdentifier,std::hash<Espresso::AOT::BackendIdentifier>,std::equal_to<Espresso::AOT::BackendIdentifier>,std::allocator<Espresso::AOT::BackendIdentifier>>::__emplace_unique_key_args<Espresso::AOT::BackendIdentifier,Espresso::AOT::BackendIdentifier const&>(a2, v5, v5);
      ++v5;
    }
    while (v5 != v6);
    v5 = (unsigned int *)v7;
  }
  if (v5)
  {
    v8 = v5;
    operator delete(v5);
  }
}

void sub_191071428(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)v1[2];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::Classic::ClassicAOTCompilerBackend,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> &>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void **v7;
  void *v8;
  void **v9;
  void *__p[2];
  void *v11;
  _BYTE v12[136];

  v6 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12, a1);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, a2);
  Espresso::AOT::Classic::ClassicAOTCompilerBackend::ClassicAOTCompilerBackend(v6, v12, __p);
  *a3 = v6;
  v7 = (void **)v11;
  if (v11)
  {
    do
    {
      v9 = (void **)*v7;
      if (*((char *)v7 + 63) < 0)
      {
        operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0)
LABEL_10:
          operator delete(v7[2]);
      }
      else if (*((char *)v7 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v7);
      v7 = v9;
    }
    while (v9);
  }
  v8 = __p[0];
  __p[0] = 0;
  if (v8)
    operator delete(v8);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12);
}

void sub_191071540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C402E6D0B92);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(Espresso::AOT::AbstractMILCompiler *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E2DA0650;
  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    v3 = *((_QWORD *)this + 30);
    v4 = (void *)*((_QWORD *)this + 29);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 231) < 0)
  {
    operator delete(*((void **)this + 26));
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_14:
    operator delete(*((void **)this + 23));
    Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
    return;
  }
  if (*((char *)this + 207) < 0)
    goto LABEL_14;
LABEL_11:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
}

void Espresso::AOT::MILCompilerForE5::ComputeUnitsToBackends(uint64_t a1@<X0>, int **a2@<X1>, char **a3@<X8>)
{
  int *v3;
  int *v4;
  int v6;
  int v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  uint64_t CpuPreferredBackend;
  void **v21;
  void **v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  _OWORD *v33;
  int *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _OWORD *v43;
  int *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  char *v50;
  char *v51;
  uint64_t v52;
  _DWORD *v53;
  unsigned __int16 *v54;
  int v55;
  int v56;
  _QWORD *v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  char *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  char *v85;
  _DWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _OWORD *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _OWORD *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _DWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _OWORD *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  int v124;
  _DWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  _OWORD *v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  int v134;
  void **v135;
  void *v136;
  int *v137;
  Espresso::AOT::CompilerOptionsForE5 *v138;
  void *__p[2];
  char v140;
  void *v141;
  void **v142;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v137 = a2[1];
    v138 = (Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264);
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (v7 != 1)
        {
          if (v7 != 2)
            goto LABEL_5;
          v9 = (int *)a3[1];
          v8 = (unint64_t)a3[2];
          if ((unint64_t)v9 < v8)
          {
            v6 = 2;
            goto LABEL_4;
          }
          v11 = *a3;
          v24 = (char *)v9 - *a3;
          v25 = v24 >> 2;
          v26 = (v24 >> 2) + 1;
          if (v26 >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v27 = v8 - (_QWORD)v11;
          if (v27 >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v26;
          if (v16)
          {
            if (v16 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v17 = operator new(4 * v16);
            v18 = &v17[4 * v25];
            *(_DWORD *)v18 = 2;
            v19 = v18 + 4;
            if (v9 == (int *)v11)
              goto LABEL_53;
LABEL_47:
            v39 = (char *)(v9 - 1) - v11;
            if (v39 < 0x2C)
              goto LABEL_210;
            if ((unint64_t)((char *)v9 - &v17[v24]) < 0x20)
              goto LABEL_210;
            v40 = (v39 >> 2) + 1;
            v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
            v42 = &v9[v41 / 0xFFFFFFFFFFFFFFFCLL];
            v18 -= v41;
            v43 = &v17[v24 - 16];
            v44 = v9 - 4;
            v45 = v40 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v46 = *(_OWORD *)v44;
              *(v43 - 1) = *((_OWORD *)v44 - 1);
              *v43 = v46;
              v43 -= 2;
              v44 -= 8;
              v45 -= 8;
            }
            while (v45);
            v9 = v42;
            if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_210:
              do
              {
                v47 = *--v9;
                *((_DWORD *)v18 - 1) = v47;
                v18 -= 4;
              }
              while (v9 != (int *)v11);
            }
          }
          else
          {
            v17 = 0;
            v18 = (char *)(4 * v25);
            v38 = (_DWORD *)(4 * v25);
            *v38 = 2;
            v19 = (char *)(v38 + 1);
            if (v9 != (int *)v11)
              goto LABEL_47;
          }
LABEL_53:
          *a3 = v18;
          a3[1] = v19;
          a3[2] = &v17[4 * v16];
          if (v11)
            operator delete(v11);
          a3[1] = v19;
          goto LABEL_5;
        }
        v9 = (int *)a3[1];
        v10 = (unint64_t)a3[2];
        if ((unint64_t)v9 < v10)
        {
          v6 = 5;
LABEL_4:
          *v9 = v6;
          a3[1] = (char *)(v9 + 1);
          goto LABEL_5;
        }
        v11 = *a3;
        v12 = (char *)v9 - *a3;
        v13 = v12 >> 2;
        v14 = (v12 >> 2) + 1;
        if (v14 >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v15 = v10 - (_QWORD)v11;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v17 = operator new(4 * v16);
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = 5;
          v19 = v18 + 4;
          if (v9 == (int *)v11)
            goto LABEL_53;
        }
        else
        {
          v17 = 0;
          v18 = (char *)(4 * v13);
          v28 = (_DWORD *)(4 * v13);
          *v28 = 5;
          v19 = (char *)(v28 + 1);
          if (v9 == (int *)v11)
            goto LABEL_53;
        }
        v29 = (char *)(v9 - 1) - v11;
        if (v29 < 0x2C)
          goto LABEL_211;
        if ((unint64_t)((char *)v9 - &v17[v12]) < 0x20)
          goto LABEL_211;
        v30 = (v29 >> 2) + 1;
        v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
        v32 = &v9[v31 / 0xFFFFFFFFFFFFFFFCLL];
        v18 -= v31;
        v33 = &v17[v12 - 16];
        v34 = v9 - 4;
        v35 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 8;
          v35 -= 8;
        }
        while (v35);
        v9 = v32;
        if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_211:
          do
          {
            v37 = *--v9;
            *((_DWORD *)v18 - 1) = v37;
            v18 -= 4;
          }
          while (v9 != (int *)v11);
        }
        goto LABEL_53;
      }
      CpuPreferredBackend = Espresso::AOT::CompilerOptionsForE5::GetCpuPreferredBackend(v138);
      v140 = 1;
      LOWORD(__p[0]) = 44;
      E5Common::StringUtils::Split((uint64_t *)CpuPreferredBackend, (char *)__p, (uint64_t)&v141);
      if (v140 < 0)
        operator delete(__p[0]);
      v21 = (void **)v141;
      v22 = v142;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v142 - (_BYTE *)v141) >> 3) >= 2)
      {
        v23 = *(char *)(CpuPreferredBackend + 23);
        if (v23 < 0)
        {
          if (*(_QWORD *)(CpuPreferredBackend + 8) != 16)
            goto LABEL_203;
          CpuPreferredBackend = *(_QWORD *)CpuPreferredBackend;
        }
        else if (v23 != 16)
        {
          goto LABEL_203;
        }
        if ((*(_QWORD *)CpuPreferredBackend != 0x616C632C736E6E62
           || *(_QWORD *)(CpuPreferredBackend + 8) != 0x7570635F63697373)
          && (*(_QWORD *)CpuPreferredBackend != 0x5F63697373616C63
           || *(_QWORD *)(CpuPreferredBackend + 8) != 0x736E6E622C757063))
        {
LABEL_203:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("When specifying multiple preferred backends, only bnns and classic_cpu are supported.");
        }
      }
      if (v141 == v142)
      {
        if (v142)
          goto LABEL_183;
        goto LABEL_190;
      }
      do
      {
        v52 = *((unsigned __int8 *)v21 + 23);
        if (*((char *)v21 + 23) < 0)
        {
          v53 = *v21;
          if (v21[1] != (void *)4)
            goto LABEL_79;
        }
        else
        {
          v53 = v21;
          if (v52 != 4)
            goto LABEL_79;
        }
        if (*v53 == 1936617058)
        {
          v77 = a3[1];
          v76 = (unint64_t)a3[2];
          if ((unint64_t)v77 < v76)
          {
            *(_DWORD *)v77 = 8;
            v50 = v77 + 4;
            goto LABEL_71;
          }
          v68 = *a3;
          v96 = v77 - *a3;
          v97 = v96 >> 2;
          v98 = (v96 >> 2) + 1;
          if (v98 >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v99 = v76 - (_QWORD)v68;
          if (v99 >> 1 > v98)
            v98 = v99 >> 1;
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
            v73 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v73 = v98;
          if (v73)
          {
            if (v73 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v74 = operator new(4 * v73);
            v75 = &v74[4 * v97];
            *(_DWORD *)v75 = 8;
            v51 = v75 + 4;
            if (v77 == v68)
              goto LABEL_180;
          }
          else
          {
            v74 = 0;
            v75 = (char *)(4 * v97);
            v115 = (_DWORD *)(4 * v97);
            *v115 = 8;
            v51 = (char *)(v115 + 1);
            if (v77 == v68)
              goto LABEL_180;
          }
          v116 = v77 - 4 - v68;
          if (v116 < 0x2C)
            goto LABEL_212;
          if ((unint64_t)(v77 - &v74[v96]) < 0x20)
            goto LABEL_212;
          v117 = (v116 >> 2) + 1;
          v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
          v119 = &v77[-v118];
          v75 -= v118;
          v120 = &v74[v96 - 16];
          v121 = v77 - 16;
          v122 = v117 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v123 = *(_OWORD *)v121;
            *(v120 - 1) = *((_OWORD *)v121 - 1);
            *v120 = v123;
            v120 -= 2;
            v121 -= 32;
            v122 -= 8;
          }
          while (v122);
          v77 = v119;
          if (v117 != (v117 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_212:
            do
            {
              v124 = *((_DWORD *)v77 - 1);
              v77 -= 4;
              *((_DWORD *)v75 - 1) = v124;
              v75 -= 4;
            }
            while (v77 != v68);
          }
          goto LABEL_180;
        }
LABEL_79:
        if ((v52 & 0x80) != 0)
        {
          v54 = (unsigned __int16 *)*v21;
          if (v21[1] == (void *)3)
          {
LABEL_83:
            v55 = *v54;
            v56 = *((unsigned __int8 *)v54 + 2);
            if (v55 == 27757 && v56 == 99)
              goto LABEL_95;
          }
        }
        else
        {
          v54 = (unsigned __int16 *)v21;
          if (v52 == 3)
            goto LABEL_83;
        }
        if ((v52 & 0x80) != 0)
        {
          v58 = *v21;
          if (v21[1] != (void *)8)
            goto LABEL_92;
        }
        else
        {
          v58 = v21;
          if (v52 != 8)
            goto LABEL_92;
        }
        if (*v58 != 0x736E6E622F636C6DLL)
        {
LABEL_92:
          if ((v52 & 0x80) != 0)
          {
            v59 = (uint64_t *)*v21;
            if (v21[1] != (void *)11)
              goto LABEL_192;
          }
          else
          {
            v59 = (uint64_t *)v21;
            if (v52 != 11)
              goto LABEL_192;
          }
          v63 = *v59;
          v64 = *(uint64_t *)((char *)v59 + 3);
          if (v63 != 0x5F63697373616C63 || v64 != 0x7570635F63697373)
          {
LABEL_192:
            if ((v52 & 0x80) != 0)
              v21 = (void **)*v21;
            __p[0] = v21;
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Unknown CPU backend name '%s' specified as the preferred CPU backend.", __p);
          }
          v67 = a3[1];
          v66 = (unint64_t)a3[2];
          if ((unint64_t)v67 >= v66)
          {
            v68 = *a3;
            v69 = v67 - *a3;
            v70 = v69 >> 2;
            v71 = (v69 >> 2) + 1;
            if (v71 >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v72 = v66 - (_QWORD)v68;
            if (v72 >> 1 > v71)
              v71 = v72 >> 1;
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
              v73 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v73 = v71;
            if (v73)
            {
              if (v73 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v74 = operator new(4 * v73);
              v75 = &v74[4 * v70];
              *(_DWORD *)v75 = 3;
              v51 = v75 + 4;
              if (v67 == v68)
                goto LABEL_180;
            }
            else
            {
              v74 = 0;
              v75 = (char *)(4 * v70);
              v86 = (_DWORD *)(4 * v70);
              *v86 = 3;
              v51 = (char *)(v86 + 1);
              if (v67 == v68)
                goto LABEL_180;
            }
            v87 = v67 - 4 - v68;
            if (v87 < 0x2C)
              goto LABEL_213;
            if ((unint64_t)(v67 - &v74[v69]) < 0x20)
              goto LABEL_213;
            v88 = (v87 >> 2) + 1;
            v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
            v90 = &v67[-v89];
            v75 -= v89;
            v91 = &v74[v69 - 16];
            v92 = v67 - 16;
            v93 = v88 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v94 = *(_OWORD *)v92;
              *(v91 - 1) = *((_OWORD *)v92 - 1);
              *v91 = v94;
              v91 -= 2;
              v92 -= 32;
              v93 -= 8;
            }
            while (v93);
            v67 = v90;
            if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_213:
              do
              {
                v95 = *((_DWORD *)v67 - 1);
                v67 -= 4;
                *((_DWORD *)v75 - 1) = v95;
                v75 -= 4;
              }
              while (v67 != v68);
            }
            goto LABEL_180;
          }
LABEL_70:
          *(_DWORD *)v67 = 3;
          v50 = v67 + 4;
LABEL_71:
          v51 = v50;
LABEL_72:
          a3[1] = v51;
          goto LABEL_73;
        }
LABEL_95:
        v61 = a3[1];
        v60 = (unint64_t)a3[2];
        if ((unint64_t)v61 < v60)
        {
          *(_DWORD *)v61 = 4;
          v62 = v61 + 4;
          goto LABEL_153;
        }
        v78 = *a3;
        v79 = v61 - *a3;
        v80 = v79 >> 2;
        v81 = (v79 >> 2) + 1;
        if (v81 >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v82 = v60 - (_QWORD)v78;
        if (v82 >> 1 > v81)
          v81 = v82 >> 1;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
          v83 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v83 = v81;
        if (v83)
        {
          if (v83 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v84 = operator new(4 * v83);
          v85 = &v84[4 * v80];
          *(_DWORD *)v85 = 4;
          v62 = v85 + 4;
          if (v61 == v78)
            goto LABEL_151;
LABEL_145:
          v101 = v61 - 4 - v78;
          if (v101 < 0x2C)
            goto LABEL_214;
          if ((unint64_t)(v61 - &v84[v79]) < 0x20)
            goto LABEL_214;
          v102 = (v101 >> 2) + 1;
          v103 = 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
          v104 = &v61[-v103];
          v85 -= v103;
          v105 = &v84[v79 - 16];
          v106 = v61 - 16;
          v107 = v102 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v108 = *(_OWORD *)v106;
            *(v105 - 1) = *((_OWORD *)v106 - 1);
            *v105 = v108;
            v105 -= 2;
            v106 -= 32;
            v107 -= 8;
          }
          while (v107);
          v61 = v104;
          if (v102 != (v102 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_214:
            do
            {
              v109 = *((_DWORD *)v61 - 1);
              v61 -= 4;
              *((_DWORD *)v85 - 1) = v109;
              v85 -= 4;
            }
            while (v61 != v78);
          }
          goto LABEL_151;
        }
        v84 = 0;
        v85 = (char *)(4 * v80);
        v100 = (_DWORD *)(4 * v80);
        *v100 = 4;
        v62 = (char *)(v100 + 1);
        if (v61 != v78)
          goto LABEL_145;
LABEL_151:
        *a3 = v85;
        a3[1] = v62;
        a3[2] = &v84[4 * v83];
        if (v78)
          operator delete(v78);
LABEL_153:
        a3[1] = v62;
        if (Espresso::AOT::CompilerOptionsForE5::GetEnableClassicCpuFallbackForMlc(v138))
        {
          v67 = a3[1];
          v110 = (unint64_t)a3[2];
          if ((unint64_t)v67 < v110)
            goto LABEL_70;
          v68 = *a3;
          v111 = v67 - *a3;
          v112 = v111 >> 2;
          v113 = (v111 >> 2) + 1;
          if (v113 >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v114 = v110 - (_QWORD)v68;
          if (v114 >> 1 > v113)
            v113 = v114 >> 1;
          if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
            v73 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v73 = v113;
          if (v73)
          {
            if (v73 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v74 = operator new(4 * v73);
            v75 = &v74[4 * v112];
            *(_DWORD *)v75 = 3;
            v51 = v75 + 4;
            if (v67 == v68)
              goto LABEL_180;
          }
          else
          {
            v74 = 0;
            v75 = (char *)(4 * v112);
            v125 = (_DWORD *)(4 * v112);
            *v125 = 3;
            v51 = (char *)(v125 + 1);
            if (v67 == v68)
              goto LABEL_180;
          }
          v126 = v67 - 4 - v68;
          if (v126 < 0x2C)
            goto LABEL_215;
          if ((unint64_t)(v67 - &v74[v111]) < 0x20)
            goto LABEL_215;
          v127 = (v126 >> 2) + 1;
          v128 = 4 * (v127 & 0x7FFFFFFFFFFFFFF8);
          v129 = &v67[-v128];
          v75 -= v128;
          v130 = &v74[v111 - 16];
          v131 = v67 - 16;
          v132 = v127 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v133 = *(_OWORD *)v131;
            *(v130 - 1) = *((_OWORD *)v131 - 1);
            *v130 = v133;
            v130 -= 2;
            v131 -= 32;
            v132 -= 8;
          }
          while (v132);
          v67 = v129;
          if (v127 != (v127 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_215:
            do
            {
              v134 = *((_DWORD *)v67 - 1);
              v67 -= 4;
              *((_DWORD *)v75 - 1) = v134;
              v75 -= 4;
            }
            while (v67 != v68);
          }
LABEL_180:
          *a3 = v75;
          a3[1] = v51;
          a3[2] = &v74[4 * v73];
          if (v68)
            operator delete(v68);
          goto LABEL_72;
        }
LABEL_73:
        v21 += 3;
      }
      while (v21 != v22);
      v22 = (void **)v141;
      if (v141)
      {
LABEL_183:
        v135 = v142;
        v136 = v22;
        if (v142 != v22)
        {
          do
          {
            if (*((char *)v135 - 1) < 0)
              operator delete(*(v135 - 3));
            v135 -= 3;
          }
          while (v135 != v22);
          v136 = v141;
        }
        v142 = v22;
        operator delete(v136);
      }
LABEL_190:
      v4 = v137;
LABEL_5:
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1910720C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ComputeUnits;
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BOOL8 v10;
  char v11;
  char v12;
  const char *v13;
  const char *v14;
  int64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int *v18;
  const char *v19;
  unsigned int *v20;
  _DWORD *v21;
  _DWORD *v22;
  char *v23;
  int v24;
  unsigned int *v25;
  const char *i;
  int v27;
  unsigned int *v28;
  NSObject *v29;
  int v30;
  std::string::size_type v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string v35;
  std::string v36;
  uint8_t buf[4];
  std::string *v38;
  __int16 v39;
  std::string *v40;
  void *__p;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  ComputeUnits = Espresso::AOT::CompilerOptionsForE5::GetComputeUnits((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264));
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *(const void **)ComputeUnits;
  v5 = *(_QWORD *)(ComputeUnits + 8);
  v7 = v5 - *(_QWORD *)ComputeUnits;
  if (v5 == *(_QWORD *)ComputeUnits)
  {
    LODWORD(v42) = 0;
    __p = (void *)0x100000002;
    std::vector<E5RT::BufferType>::__assign_with_size[abi:ne180100]<E5RT::BufferType*,E5RT::BufferType*>((_QWORD *)a2, (char *)&__p, (char *)((unint64_t)&__p | 0xC), 3uLL);
  }
  else
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)ComputeUnits);
    *(_QWORD *)a2 = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a2 + 16) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a2 + 8) = v9;
  }
  v10 = Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1);
  if (v10 && E5RT::IsAVirtualMachine((E5RT *)v10))
  {
    __p = operator new(0x28uLL);
    v42 = xmmword_191A84930;
    strcpy((char *)__p, "espresso.e5compiler.enable-vm-hw");
    v11 = Espresso::AOT::Utils::IsDefaultsWritePresent((uint64_t *)&__p);
    v12 = v11;
    if (SHIBYTE(v42) < 0)
    {
      operator delete(__p);
      if ((v12 & 1) != 0)
        return;
    }
    else if ((v11 & 1) != 0)
    {
      return;
    }
    __p = 0;
    v42 = 0uLL;
    v13 = *(const char **)a2;
    v14 = *(const char **)(a2 + 8);
    v15 = (int64_t)&v14[-*(_QWORD *)a2];
    if (v14 == *(const char **)a2)
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      if (v15 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v16 = (char *)operator new((size_t)&v14[-*(_QWORD *)a2]);
      v17 = (unsigned int *)&v16[4 * (v15 >> 2)];
      __p = v16;
      *((_QWORD *)&v42 + 1) = v17;
      memcpy(v16, v13, v15);
      *(_QWORD *)&v42 = v17;
    }
    v18 = (unsigned int *)operator new(0xCuLL);
    v20 = v18;
    v18[2] = 2;
    *(_QWORD *)v18 = 0x100000000;
    if (v14 == v13)
      goto LABEL_54;
    v21 = v18 + 2;
    v22 = v18 + 1;
    v23 = (char *)v13;
    while (1)
    {
      v24 = *(_DWORD *)v23;
      v25 = v18;
      if (*v18 != *(_DWORD *)v23)
      {
        v25 = v18 + 1;
        if (*v22 != v24)
        {
          if (*v21 == v24)
            v25 = v18 + 2;
          else
            v25 = v18 + 3;
        }
      }
      if ((char *)v25 - (char *)v18 == 12)
        break;
      v23 += 4;
      if (v23 == v14)
        goto LABEL_38;
    }
    if (v23 != v14)
    {
      for (i = v23 + 4; i != v14; i += 4)
      {
        v27 = *(_DWORD *)i;
        v28 = v18;
        if (*v18 != *(_DWORD *)i)
        {
          v28 = v18 + 1;
          if (*v22 != v27)
          {
            if (*v21 == v27)
              v28 = v18 + 2;
            else
              v28 = v18 + 3;
          }
        }
        if ((char *)v28 - (char *)v18 != 12)
        {
          *(_DWORD *)v23 = v27;
          v23 += 4;
        }
      }
      if (v23 != v14)
      {
        v19 = v14;
        v14 = v23;
        *(_QWORD *)(a2 + 8) = v23;
      }
    }
LABEL_38:
    if (v13 == v14)
    {
LABEL_54:
      Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(E5Common::PlatformIdentifier)const::$_0::operator()(&v36, v18, v18 + 3);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v36;
      else
        v34 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("On-device compilation within a VM only supports [%s]", &v35);
    }
    if ((char *)v17 - v16 != v14 - v13)
    {
      v29 = Espresso::espresso_os_log_subsystem(0, v19);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(E5Common::PlatformIdentifier)const::$_0::operator()(&v36, (unsigned int *)v16, v17);
        v30 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
        v31 = v36.__r_.__value_.__r.__words[0];
        Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(E5Common::PlatformIdentifier)const::$_0::operator()(&v35, *(unsigned int **)a2, *(unsigned int **)(a2 + 8));
        v32 = &v36;
        if (v30 < 0)
          v32 = (std::string *)v31;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v35;
        else
          v33 = (std::string *)v35.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        v38 = v32;
        v39 = 2080;
        v40 = v33;
        _os_log_debug_impl(&dword_190DAF000, v29, OS_LOG_TYPE_DEBUG, "VM detected: Adjusted requested context from [%s] to [%s]", buf, 0x16u);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
      }
    }
    operator delete(v20);
    if (v16)
      operator delete(v16);
  }
}

void sub_191072548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  void *v33;

  if (v31 < 0)
    operator delete(v30);
  operator delete(v29);
  if (v28)
    operator delete(v28);
  v33 = *(void **)v27;
  if (*(_QWORD *)v27)
  {
    *(_QWORD *)(v27 + 8) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

double Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(E5Common::PlatformIdentifier)const::$_0::operator()(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  const char *ComputeUnitName;
  unint64_t v6;
  std::string::size_type v7;
  const char *v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t size;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *p_p;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  double result;
  std::string __p;
  std::string v26;
  std::string v27;
  std::string __dst;

  memset(&__p, 0, sizeof(__p));
  if (a2 != a3)
  {
    v4 = a2;
    while (1)
    {
      ComputeUnitName = E5RT::GetComputeUnitName(*v4);
      v7 = v6;
      if (v6 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v8 = ComputeUnitName;
      if (v6 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
      p_dst = &__dst;
      if (v6)
        goto LABEL_15;
LABEL_16:
      p_dst->__r_.__value_.__s.__data_[v7] = 0;
      v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        v14 = size + 2;
        if (size + 2 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v14 > 0x16)
        {
          v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v16 = v14 | 7;
          v17 = v16 + 1;
          v15 = operator new(v16 + 1);
          v27.__r_.__value_.__l.__size_ = size + 2;
          v27.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
          v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        }
        else
        {
          memset(&v27, 0, sizeof(v27));
          v15 = &v27;
          *((_BYTE *)&v27.__r_.__value_.__s + 23) = size + 2;
        }
        if (v12 >= 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v15, p_p, size);
        strcpy((char *)v15 + size, ", ");
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &__dst;
        else
          v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v20 = __dst.__r_.__value_.__l.__size_;
        v21 = std::string::append(&v27, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        goto LABEL_38;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v26, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_38:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_5;
      }
      v26 = __dst;
LABEL_5:
      if (v12 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v26;
      if (++v4 == a3)
        goto LABEL_40;
    }
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_15:
    memmove(p_dst, v8, v7);
    goto LABEL_16;
  }
LABEL_40:
  result = *(double *)&__p.__r_.__value_.__l.__data_;
  *a1 = __p;
  return result;
}

void sub_191072848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForE5::ExtractBackends(uint64_t a1@<X0>, __int128 *a2@<X1>, char **a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char *v15;
  E5Common::E5PlatformManager *v16;
  unint64_t v17;
  char *v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  int *v39;
  Espresso::AOT::CompilerOptionsForE5 *v40;
  char UseClassicAOTCompilerOldHW;
  char *v42;
  char *v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  int *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  _OWORD *v111;
  int *v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  uint64_t v116;
  uint64_t *v117;
  void **v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD v121[3];
  _QWORD *v122;
  char v123;
  _QWORD *v124;
  _QWORD v125[3];
  void **v126;
  __int128 v127;
  void *__p[2];
  char v129;
  __int128 v130;
  char *v131;
  __int128 v132;
  __int128 v133;
  unsigned int *v134;
  unsigned int *v135;

  if (E5Common::PlatformIdentifier::operator==((uint64_t)a2, 256))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = (char *)operator new(4uLL);
    *a3 = v6;
    *(_DWORD *)v6 = 7;
    v6 += 4;
    a3[1] = v6;
    a3[2] = v6;
    return;
  }
  v133 = *a2;
  Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(a1, (uint64_t)&v134);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v133);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v132 = *a2;
  if (!Espresso::AOT::Utils::IsPlatformMixANE(v132, v7, v8, v9, v10, v11, v12, v13, v120) || (v14 = v134, v134 == v135))
  {
LABEL_7:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v132);
  }
  else
  {
    while (*v14 - 1 > 1)
    {
      if (++v14 == v135)
        goto LABEL_7;
    }
    v40 = (Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264);
    UseClassicAOTCompilerOldHW = Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264));
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v132);
    if ((UseClassicAOTCompilerOldHW & 1) == 0)
    {
      v43 = a3[1];
      v42 = a3[2];
      if (v43 >= v42)
      {
        v64 = *a3;
        v65 = v43 - *a3;
        v66 = v65 >> 2;
        v67 = (v65 >> 2) + 1;
        if (v67 >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v68 = v42 - v64;
        if (v68 >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          if (v69 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v70 = operator new(4 * v69);
        }
        else
        {
          v70 = 0;
        }
        v71 = &v70[4 * v66];
        v42 = &v70[4 * v69];
        *(_DWORD *)v71 = 6;
        v44 = v71 + 4;
        if (v43 != v64)
        {
          v72 = v43 - v64 - 4;
          if (v72 < 0x2C)
            goto LABEL_151;
          if ((unint64_t)(v43 - v70 - v65) < 0x20)
            goto LABEL_151;
          v73 = (v72 >> 2) + 1;
          v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
          v75 = &v43[-v74];
          v71 -= v74;
          v76 = &v70[4 * v66 - 16];
          v77 = v43 - 16;
          v78 = v73 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v79 = *(_OWORD *)v77;
            *(v76 - 1) = *((_OWORD *)v77 - 1);
            *v76 = v79;
            v76 -= 2;
            v77 -= 32;
            v78 -= 8;
          }
          while (v78);
          v43 = v75;
          if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_151:
            do
            {
              v80 = *((_DWORD *)v43 - 1);
              v43 -= 4;
              *((_DWORD *)v71 - 1) = v80;
              v71 -= 4;
            }
            while (v43 != v64);
          }
        }
        *a3 = v71;
        a3[1] = v44;
        a3[2] = v42;
        if (v64)
        {
          operator delete(v64);
          v42 = a3[2];
        }
      }
      else
      {
        *(_DWORD *)v43 = 6;
        v44 = v43 + 4;
      }
      a3[1] = v44;
      if (v44 < v42)
      {
        *(_DWORD *)v44 = 7;
        v81 = v44 + 4;
LABEL_110:
        a3[1] = v81;
        if ((Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatterns(v40) & 1) == 0
          && !Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatternsForStates(v40))
        {
          goto LABEL_65;
        }
        v19 = (int *)a3[1];
        v100 = (unint64_t)a3[2];
        if ((unint64_t)v19 < v100)
        {
          v56 = 9;
          goto LABEL_57;
        }
        v28 = *a3;
        v101 = (char *)v19 - *a3;
        v102 = v101 >> 2;
        v103 = (v101 >> 2) + 1;
        if (v103 >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v104 = v100 - (_QWORD)v28;
        if (v104 >> 1 > v103)
          v103 = v104 >> 1;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
          v105 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (v105)
        {
          if (v105 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v106 = operator new(4 * v105);
        }
        else
        {
          v106 = 0;
        }
        v35 = &v106[4 * v102];
        v36 = &v106[4 * v105];
        *(_DWORD *)v35 = 9;
        v37 = v35 + 4;
        if (v19 != (int *)v28)
        {
          v107 = (char *)v19 - v28 - 4;
          if (v107 < 0x2C)
            goto LABEL_152;
          if ((unint64_t)((char *)v19 - v106 - v101) < 0x20)
            goto LABEL_152;
          v108 = (v107 >> 2) + 1;
          v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
          v110 = &v19[v109 / 0xFFFFFFFFFFFFFFFCLL];
          v35 -= v109;
          v111 = &v106[4 * v102 - 16];
          v112 = v19 - 4;
          v113 = v108 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v114 = *(_OWORD *)v112;
            *(v111 - 1) = *((_OWORD *)v112 - 1);
            *v111 = v114;
            v111 -= 2;
            v112 -= 8;
            v113 -= 8;
          }
          while (v113);
          v19 = v110;
          if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_152:
            do
            {
              v115 = *--v19;
              *((_DWORD *)v35 - 1) = v115;
              v35 -= 4;
            }
            while (v19 != (int *)v28);
          }
        }
LABEL_62:
        *a3 = v35;
        a3[1] = v37;
        a3[2] = v36;
        if (v28)
          operator delete(v28);
        goto LABEL_64;
      }
      v82 = *a3;
      v83 = v44 - *a3;
      v84 = v83 >> 2;
      v85 = (v83 >> 2) + 1;
      if (v85 >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v86 = v42 - v82;
      if (v86 >> 1 > v85)
        v85 = v86 >> 1;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v87 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        if (v87 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v88 = operator new(4 * v87);
      }
      else
      {
        v88 = 0;
      }
      v89 = &v88[4 * v84];
      v90 = &v88[4 * v87];
      *(_DWORD *)v89 = 7;
      v81 = v89 + 4;
      if (v44 != v82)
      {
        v91 = v44 - v82 - 4;
        if (v91 < 0x2C)
        {
          v92 = v44;
          goto LABEL_107;
        }
        if ((unint64_t)(v44 - v88 - v83) < 0x20)
        {
          v92 = v44;
          do
          {
LABEL_107:
            v99 = *((_DWORD *)v92 - 1);
            v92 -= 4;
            *((_DWORD *)v89 - 1) = v99;
            v89 -= 4;
          }
          while (v92 != v82);
          goto LABEL_108;
        }
        v93 = (v91 >> 2) + 1;
        v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
        v92 = &v44[-v94];
        v89 -= v94;
        v95 = &v88[4 * v84 - 16];
        v96 = v44 - 16;
        v97 = v93 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v98 = *(_OWORD *)v96;
          *(v95 - 1) = *((_OWORD *)v96 - 1);
          *v95 = v98;
          v95 -= 2;
          v96 -= 32;
          v97 -= 8;
        }
        while (v97);
        if (v93 != (v93 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_107;
      }
LABEL_108:
      *a3 = v89;
      a3[1] = v81;
      a3[2] = v90;
      if (v82)
        operator delete(v82);
      goto LABEL_110;
    }
  }
  Espresso::AOT::MILCompilerForE5::ComputeUnitsToBackends(a1, (int **)&v134, (char **)__p);
  v127 = *a2;
  Espresso::AOT::MILCompilerForE5::FilterUnavailableBackends(a1, (unsigned int **)__p, (uint64_t *)&v127, (char **)&v130);
  v15 = *a3;
  if (*a3)
  {
    a3[1] = v15;
    operator delete(v15);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(_OWORD *)a3 = v130;
  a3[2] = v131;
  v131 = 0;
  v130 = 0uLL;
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v127);
  v16 = (E5Common::E5PlatformManager *)__p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*a3 == a3[1])
  {
    v116 = E5Common::E5PlatformManager::Instance(v16);
    v117 = (uint64_t *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v116 + 32))(v116, a2);
    v130 = 0uLL;
    v131 = 0;
    std::for_each[abi:ne180100]<std::__wrap_iter<E5RT::ComputeUnitType *>,Espresso::AOT::MILCompilerForE5::ExtractBackends(E5Common::PlatformIdentifier)::$_0>(v134, v135, (uint64_t)&v130);
    std::string::basic_string[abi:ne180100]<0>(v125, "/");
    E5Common::StringUtils::Join((uint64_t)v125, v117);
    if (v129 >= 0)
      v118 = __p;
    else
      v118 = (void **)__p[0];
    v126 = v118;
    std::string::basic_string[abi:ne180100]<0>(v121, "/");
    E5Common::StringUtils::Join((uint64_t)v121, (uint64_t *)&v130);
    if (v123 >= 0)
      v119 = &v122;
    else
      v119 = v122;
    v124 = v119;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("No available backends on platform [%s] for compute units %s", &v126, &v124);
  }
  if ((Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatterns((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264)) & 1) != 0
    || (Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatternsForStates((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264)) & 1) != 0)
  {
    v18 = a3[1];
    v17 = (unint64_t)a3[2];
    if ((unint64_t)v18 >= v17)
    {
      v20 = *a3;
      v21 = v18 - *a3;
      v22 = v21 >> 2;
      v23 = (v21 >> 2) + 1;
      if (v23 >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v24 = v17 - (_QWORD)v20;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v26 = operator new(4 * v25);
      }
      else
      {
        v26 = 0;
      }
      v45 = &v26[4 * v22];
      v46 = &v26[4 * v25];
      *v45 = 9;
      v19 = v45 + 1;
      if (v18 != v20)
      {
        v47 = v18 - v20 - 4;
        if (v47 < 0x2C)
          goto LABEL_153;
        if ((unint64_t)(v18 - v26 - v21) < 0x20)
          goto LABEL_153;
        v48 = (v47 >> 2) + 1;
        v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        v50 = &v18[-v49];
        v45 = (_DWORD *)((char *)v45 - v49);
        v51 = &v26[4 * v22 - 16];
        v52 = v18 - 16;
        v53 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v54 = *(_OWORD *)v52;
          *(v51 - 1) = *((_OWORD *)v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 32;
          v53 -= 8;
        }
        while (v53);
        v18 = v50;
        if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_153:
          do
          {
            v55 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *--v45 = v55;
          }
          while (v18 != v20);
        }
      }
      *a3 = (char *)v45;
      a3[1] = (char *)v19;
      a3[2] = v46;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_DWORD *)v18 = 9;
      v19 = (int *)(v18 + 4);
    }
    a3[1] = (char *)v19;
    v27 = (unint64_t)a3[2];
    if ((unint64_t)v19 < v27)
      goto LABEL_56;
LABEL_27:
    v28 = *a3;
    v29 = (char *)v19 - *a3;
    v30 = v29 >> 2;
    v31 = (v29 >> 2) + 1;
    if (v31 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v32 = v27 - (_QWORD)v28;
    if (v32 >> 1 > v31)
      v31 = v32 >> 1;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
      v33 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v34 = operator new(4 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[4 * v30];
    v36 = &v34[4 * v33];
    *(_DWORD *)v35 = 7;
    v37 = v35 + 4;
    if (v19 == (int *)v28)
      goto LABEL_62;
    v38 = (char *)v19 - v28 - 4;
    if (v38 >= 0x2C)
    {
      if ((unint64_t)((char *)v19 - v34 - v29) >= 0x20)
      {
        v57 = (v38 >> 2) + 1;
        v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
        v39 = &v19[v58 / 0xFFFFFFFFFFFFFFFCLL];
        v35 -= v58;
        v59 = &v34[4 * v30 - 16];
        v60 = v19 - 4;
        v61 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v62 = *(_OWORD *)v60;
          *(v59 - 1) = *((_OWORD *)v60 - 1);
          *v59 = v62;
          v59 -= 2;
          v60 -= 8;
          v61 -= 8;
        }
        while (v61);
        if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_62;
      }
      else
      {
        v39 = v19;
      }
    }
    else
    {
      v39 = v19;
    }
    do
    {
      v63 = *--v39;
      *((_DWORD *)v35 - 1) = v63;
      v35 -= 4;
    }
    while (v39 != (int *)v28);
    goto LABEL_62;
  }
  v19 = (int *)a3[1];
  v27 = (unint64_t)a3[2];
  if ((unint64_t)v19 >= v27)
    goto LABEL_27;
LABEL_56:
  v56 = 7;
LABEL_57:
  *v19 = v56;
  v37 = (char *)(v19 + 1);
LABEL_64:
  a3[1] = v37;
LABEL_65:
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
}

void sub_191073150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39)
{
  uint64_t v39;
  uint64_t v40;
  void *v42;
  void *v43;

  if (a21 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if (a38 < 0)
      {
LABEL_8:
        operator delete(a33);
        if ((a28 & 0x80000000) == 0)
        {
LABEL_12:
          std::vector<std::string>::~vector[abi:ne180100](&a39);
          v42 = *(void **)v39;
          if (*(_QWORD *)v39)
          {
            *(_QWORD *)(v39 + 8) = v42;
            operator delete(v42);
            v43 = *(void **)(v40 - 88);
            if (!v43)
LABEL_14:
              _Unwind_Resume(a1);
          }
          else
          {
            v43 = *(void **)(v40 - 88);
            if (!v43)
              goto LABEL_14;
          }
          *(_QWORD *)(v40 - 80) = v43;
          operator delete(v43);
          _Unwind_Resume(a1);
        }
LABEL_11:
        operator delete(a23);
        goto LABEL_12;
      }
LABEL_10:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if (a38 < 0)
    goto LABEL_8;
  goto LABEL_10;
}

uint64_t std::for_each[abi:ne180100]<std::__wrap_iter<E5RT::ComputeUnitType *>,Espresso::AOT::MILCompilerForE5::ExtractBackends(E5Common::PlatformIdentifier)::$_0>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *i;
  __int128 v6;
  const char *ComputeUnitName;
  unint64_t v8;
  const char *v9;
  size_t v10;
  __int128 *p_dst;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  __int128 __dst;
  unint64_t v19;

  if (a1 != a2)
  {
    for (i = a1; i != a2; ++i)
    {
      ComputeUnitName = E5RT::GetComputeUnitName(*i);
      if (v8 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v9 = ComputeUnitName;
      v10 = v8;
      if (v8 >= 0x17)
      {
        v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v13 = v8 | 7;
        v14 = v13 + 1;
        p_dst = (__int128 *)operator new(v13 + 1);
        *((_QWORD *)&__dst + 1) = v10;
        v19 = v14 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v19) = v8;
        p_dst = &__dst;
        if (!v8)
        {
          LOBYTE(__dst) = 0;
          v12 = *(_QWORD *)(a3 + 8);
          if (v12 >= *(_QWORD *)(a3 + 16))
            goto LABEL_14;
          goto LABEL_3;
        }
      }
      memmove(p_dst, v9, v10);
      *((_BYTE *)p_dst + v10) = 0;
      v12 = *(_QWORD *)(a3 + 8);
      if (v12 >= *(_QWORD *)(a3 + 16))
      {
LABEL_14:
        v15 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)&__dst);
        v16 = SHIBYTE(v19);
        *(_QWORD *)(a3 + 8) = v15;
        if (v16 < 0)
          operator delete((void *)__dst);
        continue;
      }
LABEL_3:
      v6 = __dst;
      *(_QWORD *)(v12 + 16) = v19;
      *(_OWORD *)v12 = v6;
      *(_QWORD *)(a3 + 8) = v12 + 24;
    }
  }
  return a3;
}

void sub_19107343C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForE5::MakeBackendRegistry(Espresso::AOT::MILSegmenterOptions *this@<X3>, _QWORD *a2@<X0>, __n128 *a3@<X1>, unsigned int **a4@<X2>, uint64_t a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  double v10;
  const char *BackendName;
  unint64_t v12;
  size_t v13;
  const char *v14;
  __int128 *p_dst;
  unint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count_vtbl *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  const char *v47;
  NSObject *v48;
  char SkipDecisionTreesWithMILCost;
  char BuildForProfiling;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  _BOOL4 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  const char *v88;
  uint64_t v89;
  _BYTE *v90;
  __n128 v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 __dst;
  int64_t v97;
  _BYTE buf[22];
  char v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v8 = *a4;
  v7 = a4[1];
  if ((unint64_t)((char *)v7 - (char *)*a4) > 4)
  {
    v83 = 1;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_DWORD *)(a5 + 32) = 1065353216;
    if (v8 == v7)
      return;
    goto LABEL_5;
  }
  v83 = *(_BYTE *)Espresso::AOT::MILSegmenterOptions::GetSaveSegmentationData(this) != 0;
  v8 = *a4;
  v7 = a4[1];
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  if (v8 != v7)
  {
LABEL_5:
    v10 = 1.0;
    while (1)
    {
      BackendName = Espresso::AOT::GetBackendName(*v8);
      v13 = v12;
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = BackendName;
      if (v12 >= 0x17)
      {
        v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v18 = v12 | 7;
        v19 = v18 + 1;
        p_dst = (__int128 *)operator new(v18 + 1);
        *((_QWORD *)&__dst + 1) = v13;
        v97 = v19 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v97) = v12;
        p_dst = &__dst;
        if (!v12)
        {
          LOBYTE(__dst) = 0;
          v94 = 0;
          v95 = 0;
          v92 = 0;
          v93 = 0;
          v16 = *v8;
          v17 = (int8x8_t)a2[95];
          if (!*(_QWORD *)&v17)
            goto LABEL_38;
          goto LABEL_17;
        }
      }
      memmove(p_dst, v14, v13);
      *((_BYTE *)p_dst + v13) = 0;
      v94 = 0;
      v95 = 0;
      v92 = 0;
      v93 = 0;
      v16 = *v8;
      v17 = (int8x8_t)a2[95];
      if (!*(_QWORD *)&v17)
        goto LABEL_38;
LABEL_17:
      v20 = (uint8x8_t)vcnt_s8(v17);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        v21 = v16;
        if (*(_QWORD *)&v17 <= v16)
          v21 = v16 % *(_QWORD *)&v17;
      }
      else
      {
        v21 = (v17.i32[0] - 1) & v16;
      }
      v22 = *(uint64_t ***)(a2[94] + 8 * v21);
      if (!v22)
      {
LABEL_38:
        v23 = 0;
        goto LABEL_39;
      }
      v23 = *v22;
      if (*v22)
      {
        if (v20.u32[0] < 2uLL)
        {
          v24 = *(_QWORD *)&v17 - 1;
          while (1)
          {
            v26 = v23[1];
            if (v26 == v16)
            {
              if (*((_DWORD *)v23 + 4) == (_DWORD)v16)
                goto LABEL_39;
            }
            else if ((v26 & v24) != v21)
            {
              goto LABEL_38;
            }
            v23 = (uint64_t *)*v23;
            if (!v23)
              goto LABEL_39;
          }
        }
        do
        {
          v25 = v23[1];
          if (v25 == v16)
          {
            if (*((_DWORD *)v23 + 4) == (_DWORD)v16)
              break;
          }
          else
          {
            if (v25 >= *(_QWORD *)&v17)
              v25 %= *(_QWORD *)&v17;
            if (v25 != v21)
              goto LABEL_38;
          }
          v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
LABEL_39:
      v27 = (int8x8_t)a2[100];
      if (!*(_QWORD *)&v27)
        goto LABEL_59;
      v28 = (uint8x8_t)vcnt_s8(v27);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        v29 = v16;
        if (*(_QWORD *)&v27 <= v16)
          v29 = v16 % *(_QWORD *)&v27;
      }
      else
      {
        v29 = (v27.i32[0] - 1) & v16;
      }
      v30 = *(uint64_t ***)(a2[99] + 8 * v29);
      if (v30)
      {
        v31 = *v30;
        if (*v30)
        {
          if (v28.u32[0] < 2uLL)
          {
            v32 = *(_QWORD *)&v27 - 1;
            while (1)
            {
              v34 = v31[1];
              if (v34 == v16)
              {
                if (*((_DWORD *)v31 + 4) == (_DWORD)v16)
                  goto LABEL_60;
              }
              else if ((v34 & v32) != v29)
              {
                goto LABEL_59;
              }
              v31 = (uint64_t *)*v31;
              if (!v31)
                goto LABEL_60;
            }
          }
          do
          {
            v33 = v31[1];
            if (v33 == v16)
            {
              if (*((_DWORD *)v31 + 4) == (_DWORD)v16)
                break;
            }
            else
            {
              if (v33 >= *(_QWORD *)&v27)
                v33 %= *(_QWORD *)&v27;
              if (v33 != v29)
                goto LABEL_59;
            }
            v31 = (uint64_t *)*v31;
          }
          while (v31);
        }
      }
      else
      {
LABEL_59:
        v31 = 0;
      }
LABEL_60:
      if (v23)
      {
        if (v31)
        {
          v35 = (std::__shared_weak_count *)operator new(0x48uLL);
          v35->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          v35->__shared_weak_owners_ = 0;
          v35->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE880;
          v37 = Espresso::AOT::EvaluatorClassic::EvaluatorClassic(&v35[1].__vftable, &__dst);
          *(_QWORD *)buf = v37;
          *(_QWORD *)&buf[8] = v35;
          do
            v38 = __ldxr(p_shared_owners);
          while (__stxr(v38 + 1, p_shared_owners));
          v94 = (uint64_t)&v35[1].__shared_owners_;
          v95 = v35;
          if (v83)
          {
            do
              v39 = __ldxr(p_shared_owners);
            while (__stxr(v39 + 1, p_shared_owners));
            v40 = v35;
          }
          else
          {
            v40 = (std::__shared_weak_count *)operator new(0x30uLL);
            v40->__shared_weak_owners_ = 0;
            v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE8B8;
            v40->__shared_owners_ = 0;
            v37 = Espresso::AOT::ConstCostEstimator::ConstCostEstimator((Espresso::AOT::ConstCostEstimator *)&v40[1], 1.0, 1.0);
          }
          v92 = (uint64_t)v37;
          v93 = v40;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            v45 = v35;
LABEL_95:
            std::__shared_weak_count::__release_weak(v45);
            goto LABEL_96;
          }
          goto LABEL_96;
        }
        v42 = 0;
      }
      else
      {
        v91 = *a3;
        Espresso::AOT::MakeBackendValidator(this, &v91, *v8, (Espresso::AOT::Validators::JitCallValidator **)buf);
        v41 = *(_QWORD *)buf;
        if (*(_QWORD *)buf)
        {
          v42 = (std::__shared_weak_count *)operator new();
          v43 = *(std::__shared_weak_count_vtbl **)buf;
          v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC36D0;
          v42->__shared_owners_ = 0;
          v42->__shared_weak_owners_ = 0;
          v42[1].__vftable = v43;
          v94 = v41;
          v95 = v42;
          *(_QWORD *)buf = 0;
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v91);
          if (v31)
            goto LABEL_139;
        }
        else
        {
          v42 = 0;
          v94 = 0;
          v95 = 0;
          *(_QWORD *)buf = 0;
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v91);
          if (v31)
LABEL_139:
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Backend validator cannot be used unless mil based cost model is used.");
        }
      }
      if (Espresso::AOT::CompilerOptionsForE5::GetUseRankedChoiceSegmentation((Espresso::AOT::CompilerOptionsForE5 *)(a2 + 33)))
      {
        v46 = (std::__shared_weak_count *)operator new(0x30uLL);
        v46->__shared_weak_owners_ = 0;
        v46->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE8B8;
        v46->__shared_owners_ = 0;
        v92 = (uint64_t)Espresso::AOT::ConstCostEstimator::ConstCostEstimator((Espresso::AOT::ConstCostEstimator *)&v46[1], v10, 0.0);
        v93 = v46;
        v48 = Espresso::espresso_os_log_subsystem(0, v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          v76 = &__dst;
          if (v97 < 0)
            v76 = (__int128 *)__dst;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v76;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v10;
          _os_log_debug_impl(&dword_190DAF000, v48, OS_LOG_TYPE_DEBUG, "MILCompilerForE5::MakeBackendRegistry: Created ConstCostEstimator for backend: %s with cost: %f", buf, 0x16u);
          v10 = v10 * 10.0;
          if (!v23)
            goto LABEL_96;
        }
        else
        {
          v10 = v10 * 10.0;
          if (!v23)
            goto LABEL_96;
        }
      }
      else if (v83)
      {
        SkipDecisionTreesWithMILCost = Espresso::AOT::CompilerOptionsForE5::GetSkipDecisionTreesWithMILCost((Espresso::AOT::CompilerOptionsForE5 *)(a2 + 33));
        BuildForProfiling = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling((Espresso::AOT::AOTCompilerOptions *)(a2 + 76));
        v51 = (std::__shared_weak_count *)operator new(0x50uLL);
        v51->__shared_weak_owners_ = 0;
        v51->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE8F0;
        v51->__shared_owners_ = 0;
        v92 = Espresso::AOT::EstimatorMILDecisionTree::EstimatorMILDecisionTree((uint64_t)&v51[1], &__dst, a3, SkipDecisionTreesWithMILCost ^ 1u, BuildForProfiling);
        v93 = v51;
        if (!v23)
          goto LABEL_96;
      }
      else
      {
        v52 = (std::__shared_weak_count *)operator new(0x30uLL);
        v52->__shared_weak_owners_ = 0;
        v52->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE8B8;
        v52->__shared_owners_ = 0;
        v92 = (uint64_t)Espresso::AOT::ConstCostEstimator::ConstCostEstimator((Espresso::AOT::ConstCostEstimator *)&v52[1], 1.0, 1.0);
        v93 = v52;
        if (!v23)
          goto LABEL_96;
      }
      v53 = (std::__shared_weak_count *)operator new(0x48uLL);
      v53->__shared_owners_ = 0;
      v54 = (unint64_t *)&v53->__shared_owners_;
      v53->__shared_weak_owners_ = 0;
      v53->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE880;
      Espresso::AOT::EvaluatorClassic::EvaluatorClassic(&v53[1].__vftable, &__dst);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v94 = (uint64_t)&v53[1].__shared_owners_;
      v95 = v53;
      if (v42)
      {
        v56 = (unint64_t *)&v42->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      do
        v58 = __ldaxr(v54);
      while (__stlxr(v58 - 1, v54));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        v45 = v53;
        goto LABEL_95;
      }
LABEL_96:
      if (!v94)
      {
        v88 = Espresso::AOT::GetBackendName(*v8);
        v89 = v77;
        std::string::basic_string<std::string_view,0>(buf, (uint64_t)&v88);
        if (v99 >= 0)
          v78 = buf;
        else
          v78 = *(_BYTE **)buf;
        v90 = v78;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Validator for backend %s is not correctly created", &v90);
      }
      v59 = v92;
      if (!v92)
      {
        v88 = Espresso::AOT::GetBackendName(*v8);
        v89 = v79;
        std::string::basic_string<std::string_view,0>(buf, (uint64_t)&v88);
        if (v99 >= 0)
          v80 = buf;
        else
          v80 = *(_BYTE **)buf;
        v90 = v80;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cost estimator for backend %s is not correctly created", &v90);
      }
      v86 = v94;
      v87 = v95;
      if (v95)
      {
        v60 = (unint64_t *)&v95->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v84 = v59;
      v85 = v93;
      if (v93)
      {
        v62 = (unint64_t *)&v93->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      Espresso::AOT::BackendRegistry::RegisterBackend(a5, (uint64_t)&__dst, &v86, &v84);
      v64 = v85;
      if (!v85)
        goto LABEL_108;
      v65 = (unint64_t *)&v85->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
        v67 = v87;
        if (!v87)
          goto LABEL_114;
      }
      else
      {
LABEL_108:
        v67 = v87;
        if (!v87)
          goto LABEL_114;
      }
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
LABEL_114:
      v70 = v93;
      if (!v93)
        goto LABEL_118;
      v71 = (unint64_t *)&v93->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
        v73 = v95;
        if (v95)
        {
LABEL_119:
          v74 = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
      }
      else
      {
LABEL_118:
        v73 = v95;
        if (v95)
          goto LABEL_119;
      }
      if (SHIBYTE(v97) < 0)
      {
        operator delete((void *)__dst);
        if (++v8 == v7)
          return;
      }
      else if (++v8 == v7)
      {
        return;
      }
    }
  }
}

void sub_191073D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  void *v36;

  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v36);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if ((*(char *)(v34 - 145) & 0x80000000) == 0)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table(v32);
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v34 - 168));
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table(v32);
  _Unwind_Resume(a1);
}

void sub_191073EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (*(char *)(v32 - 145) < 0)
    JUMPOUT(0x191073DF8);
  JUMPOUT(0x191073EB8);
}

void sub_191073EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_191073F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForE5::MakeSegmenter@<X0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, unsigned int **a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  char BuildForProfiling;
  char v12;
  uint64_t CpuPreferredBackend;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  char v17;
  char ShouldMerge;
  Espresso::AOT::MILSegmenterOptions *v19;
  uint64_t v20;
  Espresso::AOT::MILSegmenterOptions *v21;
  std::string v24;
  Espresso::AOT::MILSegmenterOptions *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  Espresso::AOT::MILSegmenterOptions *v29;

  v26 = 0x2B23828000000000;
  v27 = 0u;
  v28 = 0u;
  kdebug_trace();
  BuildForProfiling = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling((Espresso::AOT::AOTCompilerOptions *)(a1 + 608));
  v12 = Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1);
  CpuPreferredBackend = Espresso::AOT::CompilerOptionsForE5::GetCpuPreferredBackend((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264));
  v14 = *(unsigned __int8 *)(CpuPreferredBackend + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(CpuPreferredBackend + 8);
  if (v14 == 8)
  {
    if (v15 >= 0)
      v16 = (_QWORD *)CpuPreferredBackend;
    else
      v16 = *(_QWORD **)CpuPreferredBackend;
    v17 = *v16 == 0x736E6E622F636C6DLL;
  }
  else
  {
    v17 = 0;
  }
  ShouldMerge = Espresso::AOT::CompilerOptionsForE5::GetSegmentsShouldMerge((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264));
  v19 = (Espresso::AOT::MILSegmenterOptions *)operator new();
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v24 = *(std::string *)a3;
  Espresso::AOT::MILSegmenterOptions::MILSegmenterOptions((uint64_t)v19, BuildForProfiling, (__int128 *)&v24, v12, v17, a5, ShouldMerge);
  v25 = v19;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  Espresso::AOT::MILCompilerForE5::MakeBackendRegistry(v19, (_QWORD *)a1, a2, a4, (uint64_t)&v24);
  v20 = operator new();
  v25 = 0;
  v29 = v19;
  Espresso::AOT::SegmenterShortestPath::SegmenterShortestPath(v20, &v24, &v29);
  v21 = v29;
  v29 = 0;
  if (v21)
  {
    Espresso::AOT::MILSegmenterOptions::~MILSegmenterOptions(v21);
    MEMORY[0x19401CD90]();
  }
  *a6 = v20;
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table((uint64_t)&v24);
  return kdebug_trace();
}

void sub_191074138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x19401CD90](v23, 0x10B2C40B6A99B69);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a21);
  _Unwind_Resume(a1);
}

void sub_1910741D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1910741E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1910741FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_191074210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

Espresso::AOT::MILSegmenterOptions **std::unique_ptr<Espresso::AOT::MILSegmenterOptions>::~unique_ptr[abi:ne180100](Espresso::AOT::MILSegmenterOptions **a1)
{
  Espresso::AOT::MILSegmenterOptions *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    Espresso::AOT::MILSegmenterOptions::~MILSegmenterOptions(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

uint64_t Espresso::AOT::MILCompilerForE5::Canonicalize(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  Espresso::MILTransforms::ConstCastFusion(*a2);
  MEMORY[0x19401BA88](&v3, v4);
  MIL::Transform::ProgramTransformer::EliminateDeadNodes((MIL::Transform::ProgramTransformer *)&v3);
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)&v3);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&v3);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1910742D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForE5::CanonicalizeForPlatform(Espresso::AOT::AbstractMILCompiler *a1@<X0>, MIL::Opsets::Common::ios15::ios15Opset **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t Options;
  _BOOL4 v11;
  MIL::Opsets::Common::ios15::ios15Opset *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void **v16;
  const void **v17;
  int v18;
  size_t v19;
  unint64_t v20;
  std::string *p_dst;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  MIL::Builder::Variable *v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  MIL::Builder::Variable *v48;
  uint64_t Name;
  __int128 v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  MIL::IRListValue *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  Espresso::AOT::CompilerOptionsForE5 *v91;
  MIL::Builder::FunctionBuilder *v92;
  MIL::Builder::FunctionBuilder *v93;
  std::vector<std::string>::pointer v94;
  _QWORD *Functions;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  int64_t v117;
  char ShrinkQuantGroup;
  char StateOps;
  char MatchE5MinimalCpuPatternsForStates;
  uint64_t v121;
  Espresso::AOT::E5BackendFlexibleShapeTransformer *v122;
  uint64_t v123;
  uint64_t *v124;
  std::vector<std::string>::pointer size;
  __int128 v126;
  __int128 *v127;
  BOOL HasAnEntryPointWithFlexibleShapeAttribute;
  std::string *v129;
  std::vector<std::string>::pointer v130;
  std::vector<std::string>::pointer v131;
  _DWORD *v132;
  _DWORD *v133;
  MIL::IRTensorValueType *Scalar;
  _DWORD *v135;
  _DWORD *v136;
  std::string::size_type v138;
  _QWORD *v139;
  std::string::size_type v140;
  std::string *v141;
  std::vector<std::string>::pointer v142;
  std::vector<std::string>::pointer v143;
  uint64_t v144;
  unint64_t v145;
  MIL::IRTensorValueType *v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  std::string *v151;
  std::string *v152;
  __int128 v153;
  std::vector<std::string>::pointer v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::string::size_type v161;
  _QWORD *v162;
  std::string::size_type v163;
  std::string::size_type v164;
  std::string::size_type v165;
  void *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  _QWORD *v173;
  MIL::IRListValue *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _QWORD *v178;
  std::string::size_type v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  MIL::IRListValue *v183;
  MIL::IRListValue *v184;
  std::string::size_type v185;
  std::string *v186;
  std::vector<std::string>::pointer v187;
  std::vector<std::string>::pointer v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  MIL::Builder::FunctionBuilder *v195;
  void *v196;
  void *v197;
  MIL::Builder::ProgramBuilder *v198;
  std::runtime_error *exception;
  uint64_t *v201;
  _DWORD *v202;
  uint64_t *v204;
  _DWORD *v205;
  MIL::Opsets::Common::ios15::ios15Opset *v206;
  uint64_t v207;
  BOOL v208;
  void *v209;
  void *v210;
  char *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  char v220;
  MIL::IRListValue *v221[2];
  char v222;
  std::string v223;
  MIL::IRListValue *v224;
  std::__shared_weak_count *v225;
  MIL::Builder::ProgramBuilder *v226[2];
  char v227;
  std::__shared_weak_count *v228;
  std::string v229;
  std::__shared_weak_count *v230;
  MIL::Builder::BlockBuilder *v231;
  std::__shared_weak_count *v232;
  std::string __p;
  std::__shared_weak_count *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count *v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  std::__shared_weak_count *v243;
  MIL::Builder::FunctionBuilder *v244;
  std::__shared_weak_count *v245;
  MIL::Builder::FunctionBuilder *v246;
  std::__shared_weak_count *v247;
  void *v248;
  std::__shared_weak_count *v249;
  MIL::Builder::ProgramBuilder *v250;
  void *v251[3];
  void *v252[3];
  std::string v253;
  std::string __dst;
  std::string v255;
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  Options = Espresso::AOT::AbstractMILCompiler::GetOptions(a1);
  v11 = E5Common::PlatformIdentifier::operator==((uint64_t)a5, 256);
  v12 = *a2;
  if (v11)
  {
    *a2 = 0;
    v206 = v12;
    (*(void (**)(MIL::Opsets::Common::ios15::ios15Opset *))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(void **__return_ptr, MIL::Opsets::Common::ios15::ios15Opset *))(*(_QWORD *)v12 + 48))(&v248, v12);
    MIL::Builder::ProgramBuilder::Make();
    v13 = v249;
    if (!v249)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v249->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (v15)
    {
LABEL_6:
      v16 = *(const void ***)(Options + 48);
      v17 = *(const void ***)(Options + 56);
      if (v16 != v17)
        goto LABEL_9;
      goto LABEL_320;
    }
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = *(const void ***)(Options + 48);
    v17 = *(const void ***)(Options + 56);
    if (v16 == v17)
    {
LABEL_320:
      MIL::Builder::ProgramBuilder::CreateProgram(v250);
      if (((*((uint64_t (**)(void **))v217 + 2))(&v217) & 1) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::MILResult::GetMessage((MIL::MILResult *)&v217);
        std::operator+<char>();
        std::runtime_error::runtime_error(exception, &__dst);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v196 = v216;
      v216 = 0;
      *a6 = v196;
      MEMORY[0x19401B338](&v217);
      v197 = v216;
      v216 = 0;
      if (v197)
        (*(void (**)(void *))(*(_QWORD *)v197 + 8))(v197);
      v198 = v250;
      v250 = 0;
      if (v198)
        (*(void (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)v198 + 8))(v198);
      (*(void (**)(MIL::Opsets::Common::ios15::ios15Opset *))(*(_QWORD *)v206 + 8))(v206);
      return;
    }
    while (1)
    {
LABEL_9:
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::ProgramBuilder::RemoveFunction();
      v18 = *((char *)v16 + 23);
      if (v18 >= 0)
        v19 = *((unsigned __int8 *)v16 + 23);
      else
        v19 = (size_t)v16[1];
      v20 = v19 + 18;
      if (v19 + 18 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v20 >= 0x17)
      {
        v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v22 = v20 | 7;
        v23 = v22 + 1;
        p_dst = (std::string *)operator new(v22 + 1);
        __dst.__r_.__value_.__l.__size_ = v19 + 18;
        __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19 + 18;
        if (!v19)
          goto LABEL_23;
      }
      if (v18 >= 0)
        v24 = v16;
      else
        v24 = *v16;
      memmove(p_dst, v24, v19);
LABEL_23:
      strcpy((char *)p_dst + v19, "__outlined_for_jit");
      v244 = v246;
      v245 = v247;
      if (v247)
      {
        v25 = (unint64_t *)&v247->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      MIL::Builder::ProgramBuilder::AddFunction();
      v27 = v245;
      if (v245)
      {
        v28 = (unint64_t *)&v245->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      MIL::Builder::FunctionBuilder::GetInputs(v246);
      MIL::Builder::ProgramBuilder::AddFunction();
      LocationPtr = (uint64_t *)MIL::Builder::FunctionBuilder::GetLocationPtr(v246);
      v31 = (std::__shared_weak_count *)LocationPtr[1];
      v241 = *LocationPtr;
      v242 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      MIL::Builder::FunctionBuilder::SetLocation();
      v34 = v242;
      if (!v242)
        goto LABEL_38;
      v35 = (unint64_t *)&v242->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        v37 = (MIL::Builder::Variable *)v218;
        if (!v218)
          goto LABEL_39;
      }
      else
      {
LABEL_38:
        v37 = (MIL::Builder::Variable *)v218;
        if (!v218)
          goto LABEL_39;
      }
      do
      {
        Name = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v37 + 2));
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
        }
        else
        {
          v50 = *(_OWORD *)Name;
          v253.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
          *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v50;
        }
        MIL::Builder::Variable::TryGetType(*((MIL::Builder::Variable **)v37 + 2));
        MIL::Builder::FunctionBuilder::AddInput();
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
        v37 = *(MIL::Builder::Variable **)v37;
      }
      while (v37);
LABEL_39:
      HIBYTE(v252[2]) = 5;
      strcpy((char *)v252, "ios16");
      MIL::Builder::FunctionBuilder::AddBlock();
      if (SHIBYTE(v252[2]) < 0)
        operator delete(v252[0]);
      v38 = (uint64_t *)MIL::Builder::FunctionBuilder::GetLocationPtr(v246);
      v39 = (std::__shared_weak_count *)v38[1];
      v238 = *v38;
      v239 = v39;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      MIL::Builder::BlockBuilder::SetLocation();
      v42 = v239;
      if (v239)
      {
        v43 = (unint64_t *)&v239->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      HIBYTE(v251[2]) = 4;
      strcpy((char *)v251, "call");
      v235 = 0;
      v236 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      v45 = v236;
      if (!v236)
        goto LABEL_53;
      v46 = (unint64_t *)&v236->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        if (SHIBYTE(v251[2]) < 0)
        {
LABEL_65:
          operator delete(v251[0]);
          v48 = (MIL::Builder::Variable *)v218;
          if (!v218)
            goto LABEL_66;
LABEL_85:
          while (2)
          {
            while (2)
            {
              v58 = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v48 + 2));
              if (*(char *)(v58 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)v58, *(_QWORD *)(v58 + 8));
              }
              else
              {
                v59 = *(_OWORD *)v58;
                v255.__r_.__value_.__r.__words[2] = *(_QWORD *)(v58 + 16);
                *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v59;
              }
              v60 = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v48 + 2));
              if (*(char *)(v60 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v60, *(_QWORD *)(v60 + 8));
              }
              else
              {
                v61 = *(_OWORD *)v60;
                __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 16);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v61;
              }
              MIL::Builder::OperationBuilder::AddInput();
              v62 = v234;
              if (!v234)
                goto LABEL_95;
              v63 = (unint64_t *)&v234->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_96;
              }
              else
              {
LABEL_95:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_96:
                  if ((SHIBYTE(v255.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_84:
                    v48 = *(MIL::Builder::Variable **)v48;
                    if (!v48)
                      goto LABEL_66;
                    continue;
                  }
                  goto LABEL_97;
                }
              }
              break;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v255.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_84;
LABEL_97:
            operator delete(v255.__r_.__value_.__l.__data_);
            v48 = *(MIL::Builder::Variable **)v48;
            if (!v48)
              goto LABEL_66;
            continue;
          }
        }
      }
      else
      {
LABEL_53:
        if (SHIBYTE(v251[2]) < 0)
          goto LABEL_65;
      }
      v48 = (MIL::Builder::Variable *)v218;
      if (v218)
        goto LABEL_85;
LABEL_66:
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v246);
      MIL::Builder::FunctionBuilder::GetBlock();
      MIL::Builder::BlockBuilder::GetOutputs(v231);
      if (v251[1] != v251[0])
      {
        v51 = 0;
        if ((unint64_t)(((char *)v251[1] - (char *)v251[0]) >> 3) <= 1)
          v52 = 1;
        else
          v52 = ((char *)v251[1] - (char *)v251[0]) >> 3;
        while (1)
        {
          v53 = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v251[0] + v51));
          if (*(char *)(v53 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)v53, *(_QWORD *)(v53 + 8));
          }
          else
          {
            v54 = *(_OWORD *)v53;
            v229.__r_.__value_.__r.__words[2] = *(_QWORD *)(v53 + 16);
            *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v54;
          }
          MIL::Builder::Variable::TryGetType(*((MIL::Builder::Variable **)v251[0] + v51));
          MIL::Builder::OperationBuilder::AddOutput();
          v55 = v230;
          if (v230)
          {
            v56 = (unint64_t *)&v230->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
              break;
          }
          if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_78;
LABEL_79:
          MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v251[0] + v51));
          MIL::Builder::BlockBuilder::AddOutput();
          if (++v51 == v52)
            goto LABEL_101;
        }
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
        if ((SHIBYTE(v229.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_79;
LABEL_78:
        operator delete(v229.__r_.__value_.__l.__data_);
        goto LABEL_79;
      }
LABEL_101:
      MIL::IRTensorValueType::MakeScalar();
      v227 = 8;
      strcpy((char *)v226, "function");
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v223, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v223 = __dst;
      MIL::IRTensorValueType::MakeStringValue();
      v224 = v221[0];
      if (v221[0])
      {
        v65 = (std::__shared_weak_count *)operator new();
        v66 = v221[0];
        v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v65->__shared_owners_ = 0;
        v65->__shared_weak_owners_ = 0;
        v65[1].__vftable = (std::__shared_weak_count_vtbl *)v66;
      }
      else
      {
        v65 = 0;
      }
      v225 = v65;
      v221[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v67 = v228;
      if (!v228)
        goto LABEL_111;
      v68 = (unint64_t *)&v228->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        v70 = v225;
        if (!v225)
          goto LABEL_117;
      }
      else
      {
LABEL_111:
        v70 = v225;
        if (!v225)
          goto LABEL_117;
      }
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
LABEL_117:
      v221[0] = 0;
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v223.__r_.__value_.__l.__data_);
        if ((v227 & 0x80000000) == 0)
          goto LABEL_119;
      }
      else if ((v227 & 0x80000000) == 0)
      {
        goto LABEL_119;
      }
      operator delete(v226[0]);
LABEL_119:
      v222 = 5;
      strcpy((char *)v221, "ios16");
      MIL::Builder::FunctionBuilder::SetSpecialization();
      if (v251[0])
      {
        v251[1] = v251[0];
        operator delete(v251[0]);
      }
      v73 = v232;
      if (!v232)
        goto LABEL_125;
      v74 = (unint64_t *)&v232->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        v76 = v237;
        if (!v237)
          goto LABEL_133;
      }
      else
      {
LABEL_125:
        v76 = v237;
        if (!v237)
          goto LABEL_133;
      }
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
LABEL_133:
      v79 = v240;
      if (!v240)
        goto LABEL_137;
      v80 = (unint64_t *)&v240->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
        v82 = v243;
        if (!v243)
          goto LABEL_143;
      }
      else
      {
LABEL_137:
        v82 = v243;
        if (!v243)
          goto LABEL_143;
      }
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
LABEL_143:
      v85 = v218;
      if (v218)
      {
        do
        {
          v86 = (_QWORD *)*v85;
          operator delete(v85);
          v85 = v86;
        }
        while (v86);
      }
      v87 = v216;
      v216 = 0;
      if (v87)
        operator delete(v87);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v88 = v247;
        if (!v247)
          goto LABEL_8;
LABEL_151:
        v89 = (unint64_t *)&v88->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
        goto LABEL_8;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      v88 = v247;
      if (v247)
        goto LABEL_151;
LABEL_8:
      v16 += 3;
      if (v16 == v17)
        goto LABEL_320;
    }
  }
  Espresso::MILTransforms::FoldTrivialConsts(*a2);
  Espresso::AOT::AbstractMILPass::AbstractMILPass(&v248);
  v248 = &unk_1E2DA0728;
  v204 = (uint64_t *)(Options + 48);
  Espresso::AOT::OpPlacementPass::Run((uint64_t)&v248, (uint64_t)*a2, (uint64_t *)(Options + 48));
  v91 = (Espresso::AOT::AbstractMILCompiler *)((char *)a1 + 264);
  if (Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatterns(v91))
  {
    Espresso::AOT::AbstractMILPass::AbstractMILPass(&v216);
    v216 = &unk_1E2DA09E0;
    Espresso::AOT::OpPlacementPass::Run((uint64_t)&v216, (uint64_t)v246, v204);
    v92 = (MIL::Builder::FunctionBuilder *)__dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    v93 = v246;
    v246 = v92;
    if (v93)
    {
      (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v93 + 8))(v93);
      v94 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v94)
        (*(void (**)(std::vector<std::string>::pointer))(v94->__r_.__value_.__r.__words[0] + 8))(v94);
    }
    Espresso::AOT::AbstractMILPass::~AbstractMILPass((Espresso::AOT::AbstractMILPass *)&v216);
  }
  MEMORY[0x19401BA88](&v244, v246);
  MIL::Transform::ProgramTransformer::EliminateDeadNodes((MIL::Transform::ProgramTransformer *)&v244);
  MIL::Transform::ProgramTransformer::GetProgramBuilder((MIL::Transform::ProgramTransformer *)&v244);
  Functions = (_QWORD *)MIL::Builder::ProgramBuilder::GetFunctions(v226[0]);
  if (Espresso::AOT::CompilerOptionsForE5::GetCoalesceOpsWithConsumers(v91))
  {
    v104 = *(_QWORD *)(Options + 48);
    v103 = *(_QWORD *)(Options + 56);
    while (v104 != v103)
    {
      v105 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(Functions, v104);
      if (v105)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 48))(&v214);
        Espresso::AOT::CoalesceOpsWithConsumers((int)&v214, (MIL::Builder::FunctionBuilder *)v105[5], 2);
        v106 = v215;
        if (v215)
        {
          v107 = (unint64_t *)&v215->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
      }
      v104 += 24;
    }
  }
  if (Espresso::AOT::Utils::IsPlatformHThirteenANE(*a5, v96, v97, v98, v99, v100, v101, v102, (uint64_t)a6))
  {
    v110 = *(_QWORD *)(Options + 48);
    v109 = *(_QWORD *)(Options + 56);
    while (v110 != v109)
    {
      v111 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(Functions, v110);
      if (v111)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 48))(&v212);
        Espresso::AOT::MoveFp32IOCasts((uint64_t)&v212, (MIL::Builder::FunctionBuilder *)v111[5]);
        v112 = v213;
        if (v213)
        {
          v113 = (unint64_t *)&v213->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
      }
      v110 += 24;
    }
  }
  MIL::Passes::AddOperationIdAttributes();
  v210 = 0;
  v211 = 0;
  v209 = 0;
  v116 = *(_DWORD **)a3;
  v115 = *(_QWORD *)(a3 + 8);
  v117 = v115 - *(_QWORD *)a3;
  if (v115 != *(_QWORD *)a3)
  {
    if (v117 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v209 = operator new(v115 - *(_QWORD *)a3);
    v211 = (char *)v209 + 4 * (v117 >> 2);
    memcpy(v209, v116, v117);
    v210 = v211;
  }
  ShrinkQuantGroup = Espresso::AOT::CompilerOptionsForE5::GetShrinkQuantGroup(v91);
  StateOps = Espresso::AOT::CompilerOptionsForE5::GetMoveReadStateOps(v91);
  MatchE5MinimalCpuPatternsForStates = Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatternsForStates(v91);
  Espresso::AOT::E5RTGroupMatcher::E5RTGroupMatcher((uint64_t)&v216, (uint64_t)&v209, 10, ShrinkQuantGroup, StateOps, MatchE5MinimalCpuPatternsForStates);
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  Espresso::AOT::E5RTGroupMatcher::TagGroups((uint64_t)&v216, (MIL::Transform::ProgramTransformer *)&v244, v204);
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)&v244);
  v121 = *v201;
  v122 = (Espresso::AOT::E5BackendFlexibleShapeTransformer *)operator new();
  Espresso::AOT::E5BackendFlexibleShapeTransformer::E5BackendFlexibleShapeTransformer(v122);
  v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 72))(v121);
  memset(&__dst, 0, sizeof(__dst));
  std::vector<std::string>::reserve((std::vector<std::string> *)&__dst, *(_QWORD *)(v123 + 24));
  v124 = *(uint64_t **)(v123 + 16);
  if (v124)
  {
    size = (std::vector<std::string>::pointer)__dst.__r_.__value_.__l.__size_;
    do
    {
      v127 = (__int128 *)(v124 + 2);
      if ((unint64_t)size < __dst.__r_.__value_.__r.__words[2])
      {
        if (*((char *)v124 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(size, (const std::string::value_type *)v124[2], v124[3]);
        }
        else
        {
          v126 = *v127;
          size->__r_.__value_.__r.__words[2] = v124[4];
          *(_OWORD *)&size->__r_.__value_.__l.__data_ = v126;
        }
        ++size;
      }
      else
      {
        size = std::vector<std::string>::__push_back_slow_path<std::string const&>(&__dst.__r_.__value_.__l.__data_, (uint64_t)v127);
      }
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      v124 = (uint64_t *)*v124;
    }
    while (v124);
  }
  HasAnEntryPointWithFlexibleShapeAttribute = Espresso::AOT::E5BackendFlexibleShapeTransformer::HasAnEntryPointWithFlexibleShapeAttribute((uint64_t)v122, v121, (uint64_t *)&__dst);
  v129 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    v130 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__l.__size_;
    v131 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (SHIBYTE(v130[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v130[-1].__r_.__value_.__l.__data_);
        --v130;
      }
      while (v130 != v129);
      v131 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v129;
    operator delete(v131);
  }
  MEMORY[0x19401CD90](v122, 0xC400A2AC0F1);
  v132 = *(_DWORD **)a3;
  v133 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 != v133)
  {
    v202 = *(_DWORD **)(a3 + 8);
    v207 = v121;
    v208 = HasAnEntryPointWithFlexibleShapeAttribute;
    while (1)
    {
      if (*v132 == 9)
      {
        E5Common::MinimalCpu::MatchTensorToTensorBufferLoadingWeightsAndAddIntendedBackend(v121, v204);
        goto LABEL_205;
      }
      if (*v132 == 6)
        break;
LABEL_205:
      if (++v132 == v133)
        goto LABEL_307;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 40))(v121);
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    v205 = v132;
    memset(&__dst, 0, sizeof(__dst));
    v135 = *(_DWORD **)a4;
    v136 = *(_DWORD **)(a4 + 8);
    while (1)
    {
      if (v135 == v136)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v207 + 40))(v207);
        MIL::IRListValueType::Make();
        (*(void (**)(uint64_t))(*(_QWORD *)v207 + 40))(v207);
        MIL::IRListValueType::Make();
        MIL::IRTensorValueType::MakeUInt32Value(Scalar);
        v255.__r_.__value_.__r.__words[0] = v223.__r_.__value_.__r.__words[0];
        if (v223.__r_.__value_.__r.__words[0])
        {
          v162 = (_QWORD *)operator new();
          v163 = v223.__r_.__value_.__r.__words[0];
          *v162 = &unk_1E2DC2BE0;
          v162[1] = 0;
          v162[2] = 0;
          v162[3] = v163;
        }
        else
        {
          v162 = 0;
        }
        v255.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
        v223.__r_.__value_.__r.__words[0] = 0;
        std::vector<std::shared_ptr<MIL::IRValue const>>::vector[abi:ne180100](&v253, &v255, 1uLL);
        MIL::IRListValueType::MakeValue();
        v164 = v253.__r_.__value_.__r.__words[0];
        if (v253.__r_.__value_.__r.__words[0])
        {
          v165 = v253.__r_.__value_.__l.__size_;
          v166 = (void *)v253.__r_.__value_.__r.__words[0];
          if (v253.__r_.__value_.__l.__size_ != v253.__r_.__value_.__r.__words[0])
          {
            do
            {
              v167 = *(std::__shared_weak_count **)(v165 - 8);
              if (v167)
              {
                v168 = (unint64_t *)&v167->__shared_owners_;
                do
                  v169 = __ldaxr(v168);
                while (__stlxr(v169 - 1, v168));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
              }
              v165 -= 16;
            }
            while (v165 != v164);
            v166 = (void *)v253.__r_.__value_.__r.__words[0];
          }
          v253.__r_.__value_.__l.__size_ = v164;
          operator delete(v166);
        }
        v170 = (std::__shared_weak_count *)v255.__r_.__value_.__l.__size_;
        if (v255.__r_.__value_.__l.__size_)
        {
          v171 = (unint64_t *)(v255.__r_.__value_.__l.__size_ + 8);
          do
            v172 = __ldaxr(v171);
          while (__stlxr(v172 - 1, v171));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
            std::__shared_weak_count::__release_weak(v170);
          }
        }
        MIL::IRListValueType::MakeValue();
        HIBYTE(v252[2]) = 17;
        strcpy((char *)v252, "backend_requested");
        __p.__r_.__value_.__l.__data_ = (std::string::pointer)v221[0];
        if (v221[0])
        {
          v173 = (_QWORD *)operator new();
          v174 = v221[0];
          *v173 = &unk_1E2DC2BA8;
          v173[1] = 0;
          v173[2] = 0;
          v173[3] = v174;
        }
        else
        {
          v173 = 0;
        }
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v173;
        v221[0] = 0;
        MIL::IRObject::SetAttribute();
        v175 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_274;
        v176 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
          if (SHIBYTE(v252[2]) < 0)
LABEL_275:
            operator delete(v252[0]);
        }
        else
        {
LABEL_274:
          if (SHIBYTE(v252[2]) < 0)
            goto LABEL_275;
        }
        HIBYTE(v251[2]) = 16;
        strcpy((char *)v251, "allowed_backends");
        v229.__r_.__value_.__r.__words[0] = v253.__r_.__value_.__r.__words[0];
        if (v253.__r_.__value_.__r.__words[0])
        {
          v178 = (_QWORD *)operator new();
          v179 = v253.__r_.__value_.__r.__words[0];
          *v178 = &unk_1E2DC2BA8;
          v178[1] = 0;
          v178[2] = 0;
          v178[3] = v179;
        }
        else
        {
          v178 = 0;
        }
        v229.__r_.__value_.__l.__size_ = (std::string::size_type)v178;
        v253.__r_.__value_.__r.__words[0] = 0;
        MIL::IRObject::SetAttribute();
        v180 = (std::__shared_weak_count *)v229.__r_.__value_.__l.__size_;
        if (!v229.__r_.__value_.__l.__size_)
          goto LABEL_283;
        v181 = (unint64_t *)(v229.__r_.__value_.__l.__size_ + 8);
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (v182)
        {
LABEL_283:
          if ((SHIBYTE(v251[2]) & 0x80000000) == 0)
            goto LABEL_284;
LABEL_305:
          operator delete(v251[0]);
          v183 = (MIL::IRListValue *)v253.__r_.__value_.__r.__words[0];
          v253.__r_.__value_.__r.__words[0] = 0;
          if (!v183)
            goto LABEL_286;
LABEL_285:
          MIL::IRListValue::~IRListValue(v183);
          MEMORY[0x19401CD90]();
          goto LABEL_286;
        }
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
        if (SHIBYTE(v251[2]) < 0)
          goto LABEL_305;
LABEL_284:
        v183 = (MIL::IRListValue *)v253.__r_.__value_.__r.__words[0];
        v253.__r_.__value_.__r.__words[0] = 0;
        if (v183)
          goto LABEL_285;
LABEL_286:
        v184 = v221[0];
        v221[0] = 0;
        if (v184)
        {
          MIL::IRListValue::~IRListValue(v184);
          MEMORY[0x19401CD90]();
        }
        v185 = v223.__r_.__value_.__r.__words[0];
        v223.__r_.__value_.__r.__words[0] = 0;
        if (v185)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v185 + 8))(v185);
        v186 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__r.__words[0])
        {
          v187 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__l.__size_;
          v188 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
          {
            do
            {
              v189 = (std::__shared_weak_count *)v187[-1].__r_.__value_.__r.__words[2];
              if (v189)
              {
                v190 = (unint64_t *)&v189->__shared_owners_;
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                  std::__shared_weak_count::__release_weak(v189);
                }
              }
              v187 = (std::vector<std::string>::pointer)((char *)v187 - 16);
            }
            while (v187 != v186);
            v188 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__r.__words[0];
          }
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v186;
          operator delete(v188);
        }
        v132 = v205;
        v121 = v207;
        v133 = v202;
        goto LABEL_205;
      }
      if (*v135 != 2 || !HasAnEntryPointWithFlexibleShapeAttribute)
      {
        MIL::IRTensorValueType::MakeUInt32Value(Scalar);
        v138 = v255.__r_.__value_.__r.__words[0];
        v253.__r_.__value_.__r.__words[0] = v255.__r_.__value_.__r.__words[0];
        if (v255.__r_.__value_.__r.__words[0])
        {
          v139 = (_QWORD *)operator new();
          v140 = v255.__r_.__value_.__r.__words[0];
          *v139 = &unk_1E2DC2BE0;
          v139[1] = 0;
          v139[2] = 0;
          v139[3] = v140;
          v253.__r_.__value_.__l.__size_ = (std::string::size_type)v139;
          v255.__r_.__value_.__r.__words[0] = 0;
          v142 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__l.__size_;
          v141 = (std::string *)__dst.__r_.__value_.__r.__words[2];
          if (__dst.__r_.__value_.__l.__size_ < __dst.__r_.__value_.__r.__words[2])
            goto LABEL_217;
        }
        else
        {
          *(_OWORD *)&v253.__r_.__value_.__l.__data_ = 0uLL;
          v139 = 0;
          v255.__r_.__value_.__r.__words[0] = 0;
          v142 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__l.__size_;
          v141 = (std::string *)__dst.__r_.__value_.__r.__words[2];
          if (__dst.__r_.__value_.__l.__size_ < __dst.__r_.__value_.__r.__words[2])
          {
LABEL_217:
            v142->__r_.__value_.__r.__words[0] = v138;
            v142->__r_.__value_.__l.__size_ = (std::string::size_type)v139;
            *(_OWORD *)&v253.__r_.__value_.__l.__data_ = 0uLL;
            __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v142->__r_.__value_.__r.__words[2];
LABEL_244:
            v161 = v255.__r_.__value_.__r.__words[0];
            v255.__r_.__value_.__r.__words[0] = 0;
            if (!v161)
              goto LABEL_209;
LABEL_245:
            (*(void (**)(std::string::size_type))(*(_QWORD *)v161 + 8))(v161);
            goto LABEL_209;
          }
        }
        v143 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__r.__words[0];
        v144 = (uint64_t)((uint64_t)v142 - __dst.__r_.__value_.__r.__words[0]) >> 4;
        v145 = v144 + 1;
        if ((unint64_t)(v144 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v146 = Scalar;
        v147 = (uint64_t)v141 - __dst.__r_.__value_.__r.__words[0];
        if (v147 >> 3 > v145)
          v145 = v147 >> 3;
        if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF0)
          v148 = 0xFFFFFFFFFFFFFFFLL;
        else
          v148 = v145;
        if (v148 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v149 = (char *)operator new(16 * v148);
        v150 = &v149[16 * v144];
        *(_QWORD *)v150 = v138;
        v151 = (std::string *)(v150 + 16);
        *(_QWORD *)&v149[(char *)v142 - (char *)v143 + 8] = v139;
        v152 = (std::string *)&v149[16 * v148];
        *(_OWORD *)&v253.__r_.__value_.__l.__data_ = 0uLL;
        if (v142 == v143)
        {
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v150 + 16);
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v149[16 * v148];
          Scalar = v146;
        }
        else
        {
          Scalar = v146;
          do
          {
            v153 = *(_OWORD *)&v142[-1].__r_.__value_.__r.__words[1];
            v142 = (std::vector<std::string>::pointer)((char *)v142 - 16);
            *((_OWORD *)v150 - 1) = v153;
            v150 -= 16;
            v142->__r_.__value_.__r.__words[0] = 0;
            v142->__r_.__value_.__l.__size_ = 0;
          }
          while (v142 != v143);
          v154 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__l.__size_;
          v142 = (std::vector<std::string>::pointer)__dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v151;
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v152;
          while (v154 != v142)
          {
            v155 = (std::__shared_weak_count *)v154[-1].__r_.__value_.__r.__words[2];
            if (v155)
            {
              v156 = (unint64_t *)&v155->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            v154 = (std::vector<std::string>::pointer)((char *)v154 - 16);
          }
        }
        HasAnEntryPointWithFlexibleShapeAttribute = v208;
        if (v142)
          operator delete(v142);
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v151;
        v158 = (std::__shared_weak_count *)v253.__r_.__value_.__l.__size_;
        if (!v253.__r_.__value_.__l.__size_)
          goto LABEL_244;
        v159 = (unint64_t *)(v253.__r_.__value_.__l.__size_ + 8);
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (v160)
          goto LABEL_244;
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
        v161 = v255.__r_.__value_.__r.__words[0];
        v255.__r_.__value_.__r.__words[0] = 0;
        if (v161)
          goto LABEL_245;
      }
LABEL_209:
      ++v135;
    }
  }
LABEL_307:
  v216 = off_1E2DA03D8;
  if (v220 < 0)
    operator delete(v219);
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  Espresso::AOT::AbstractGroupMatcher::~AbstractGroupMatcher((Espresso::AOT::AbstractGroupMatcher *)&v216);
  v192 = (std::__shared_weak_count *)v226[1];
  if (v226[1])
  {
    v193 = (unint64_t *)((char *)v226[1] + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&v244);
  v195 = v246;
  v246 = 0;
  if (v195)
    (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v195 + 8))(v195);
  Espresso::AOT::AbstractMILPass::~AbstractMILPass((Espresso::AOT::AbstractMILPass *)&v248);
}

void sub_191075960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  if (*(char *)(v29 - 129) < 0)
  {
    operator delete(*(void **)(v29 - 152));
    if ((v27 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x19401B338](v28);
      if (a26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a26 + 8))(a26);
        v31 = *(_QWORD *)(v29 - 248);
        *(_QWORD *)(v29 - 248) = 0;
        if (!v31)
        {
LABEL_8:
          (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
          _Unwind_Resume(a1);
        }
      }
      else
      {
        v31 = *(_QWORD *)(v29 - 248);
        *(_QWORD *)(v29 - 248) = 0;
        if (!v31)
          goto LABEL_8;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void Espresso::AOT::E5RTGroupMatcher::~E5RTGroupMatcher(void **this)
{
  void *v2;

  *this = off_1E2DA03D8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    v2 = this[1];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = this[1];
  if (v2)
  {
LABEL_3:
    this[2] = v2;
    operator delete(v2);
  }
LABEL_4:
  Espresso::AOT::AbstractGroupMatcher::~AbstractGroupMatcher((Espresso::AOT::AbstractGroupMatcher *)this);
}

{
  void *v2;

  *this = off_1E2DA03D8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    v2 = this[1];
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = this[1];
    if (!v2)
      goto LABEL_6;
  }
  this[2] = v2;
  operator delete(v2);
LABEL_6:
  JUMPOUT(0x19401CD90);
}

void Espresso::AOT::MILCompilerForE5::GetE5BackendToE5RTLoweringOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Espresso::AOT::AOTCompilerOptions *a4@<X8>)
{
  E5Common::E5PlatformManager *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::string v11;
  int v12;
  void *__p[2];
  _BYTE v14[18];
  char v15;
  std::string v16;
  char v17;

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(a4, (const Espresso::AOT::AOTCompilerOptions *)(a1 + 608));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v16 = *(std::string *)a2;
  Espresso::AOT::AOTCompilerOptions::SetOutput((uint64_t)a4, (__n128 *)&v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v15 = 2;
  strcpy(v14, "\te5");
  strcpy((char *)__p, "platforms");
  v8 = E5Common::E5PlatformManager::Instance(v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, a3);
  if (*(char *)(v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
  }
  else
  {
    v10 = *(_OWORD *)v9;
    v11.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v10;
  }
  v12 = 3;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)a4, (__int128 *)&v14[1], (__int128 *)__p, (uint64_t)&v11);
  if (v12 != -1)
    ((void (*)(char *, std::string *))off_1E2DD13D0[v12])(&v17, &v11);
  v12 = -1;
  if ((v14[0] & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(*(void **)&v14[1]);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_1910760B0(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerOptions *v1;

  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v1);
  _Unwind_Resume(a1);
}

void sub_1910760C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  Espresso::AOT::AOTCompilerOptions *v24;

  std::variant<BOOL,int,float,std::string>::~variant[abi:ne180100]((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v24);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForE5::MakeE5BackendToE5RTLowering@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  __int128 v10;
  _BYTE v11[136];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[136];

  v12 = 0x2B23828000000000;
  v13 = 0u;
  v14 = 0u;
  kdebug_trace();
  v10 = *a3;
  Espresso::AOT::MILCompilerForE5::GetE5BackendToE5RTLoweringOptions(a1, a2, (uint64_t)&v10, (Espresso::AOT::AOTCompilerOptions *)v11);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v10);
  v8 = (_QWORD *)operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v15, (const Espresso::AOT::AOTCompilerOptions *)v11);
  Espresso::AOT::E5BackendToE5RTLoweringPass::E5BackendToE5RTLoweringPass(v8, (const Espresso::AOT::AOTCompilerOptions *)v15);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v15);
  *a4 = v8;
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11);
  return kdebug_trace();
}

void sub_191076224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(v30 - 184));
  MEMORY[0x19401CD90](v29, 0x10F3C40F482E0DDLL);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a12);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a29);
  _Unwind_Resume(a1);
}

void sub_191076270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a9);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a29);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5::MakeMemOptimizer(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  kdebug_trace();
  v4 = operator new();
  v5 = v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v12 = *a1;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Espresso::AOT::MemOptimizer::MemOptimizerForMIL::MemOptimizerForMIL(v4, &v12);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a2 = v5;
  kdebug_trace();
}

void sub_1910763A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MEMORY[0x19401CD90](v2, 0xE1C405CB88AE7);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1910763D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5::MakeMILE5Builder(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  kdebug_trace();
  v10 = operator new();
  v11 = v10;
  v12 = (std::__shared_weak_count *)a1[1];
  v18 = *a1;
  v19 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  E5AOT::E5BuilderForMIL::E5BuilderForMIL(v10, &v18, a2, a3, a4);
  *a5 = v11;
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  kdebug_trace();
}

void sub_19107651C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MEMORY[0x19401CD90](v2, 0x10E1C40B4AB9854);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_191076550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForE5::MakeFlexibleShapeTransformer@<X0>(Espresso::AOT::E5BackendFlexibleShapeTransformer **a1@<X8>)
{
  Espresso::AOT::E5BackendFlexibleShapeTransformer *v3;
  uint64_t result;

  v3 = (Espresso::AOT::E5BackendFlexibleShapeTransformer *)operator new();
  result = Espresso::AOT::E5BackendFlexibleShapeTransformer::E5BackendFlexibleShapeTransformer(v3);
  *a1 = v3;
  return result;
}

void sub_1910765A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5::Run(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t InputPath;
  uint64_t v5;
  std::string *v6;
  std::__fs::filesystem::path::__string_view v7;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  uint64_t OutputBundlePath;
  uint64_t v12;
  std::string *v13;
  const char *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  E5Common::E5PlatformManager *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  uint64_t v30;
  const void **v31;
  int v32;
  size_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  Espresso::AOT::AOTCompilerBackend *v43;
  __int128 v44;
  void **v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  int v49;
  size_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  int v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  void **v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  const char *v65;
  unsigned int *v66;
  unsigned int *v67;
  NSObject *v68;
  const char *BackendName;
  MIL::Opsets::Common::ios15::ios15Opset *v70;
  std::string::size_type v71;
  uint64_t v72;
  std::string::size_type v73;
  MIL::Opsets::Common::ios15::ios15Opset *v74;
  uint64_t v75;
  char *v76;
  std::string *v77;
  Espresso::AOT::E5BackendFlexibleShapeTransformer *v78;
  std::string::size_type v79;
  uint64_t v80;
  const char *v81;
  unint64_t v82;
  size_t v83;
  const char *v84;
  void *p_p;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  void **v90;
  void *v91;
  void **v92;
  void **v93;
  void *v94;
  void **v95;
  std::string::size_type size;
  std::string::size_type v97;
  void *v98;
  std::string::size_type v99;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v100;
  char *v101;
  std::string *v102;
  const char *v103;
  NSObject *v104;
  Espresso::AOT::SegmentsIOTransformer *v105;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v106;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v107;
  std::string::size_type v108;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v109;
  char *v110;
  std::string *v111;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v112;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v113;
  std::string::size_type v114;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v115;
  char *v116;
  std::string *v117;
  _BOOL4 HasAnEntryPointWithFlexibleShapeAttribute;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v119;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v120;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v121;
  std::string::size_type v122;
  std::string::size_type v123;
  void *v124;
  std::string::size_type v125;
  char *v126;
  std::string *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v136;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v137;
  std::string::size_type v138;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v139;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v140;
  std::string::size_type v141;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v142;
  char *v143;
  std::string *v144;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v145;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v146;
  std::string::size_type v147;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v148;
  char *v149;
  std::string *v150;
  const char *v151;
  _QWORD *v152;
  std::string::size_type v153;
  NSObject *v154;
  char *v155;
  char *v156;
  uint64_t Function;
  uint64_t v158;
  _QWORD ***v159;
  _QWORD *v160;
  _QWORD *i;
  __int128 **v162;
  __int128 *v163;
  __int128 *v164;
  MIL::IRValueType *Type;
  std::string::size_type v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  int64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  __int128 v179;
  unint64_t *v180;
  unint64_t v181;
  char *v182;
  __int128 v183;
  char *v184;
  std::__shared_weak_count *v185;
  unint64_t *p_shared_owners;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  std::string *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  const char *v197;
  NSObject *v198;
  uint64_t BuildInfo;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  void *v203;
  void *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  unint64_t v215;
  MIL::IRNamedValueType **v216;
  uint64_t Name;
  int v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  MIL::IRValueType *v223;
  MIL::IRDimension **v224;
  uint64_t v225;
  unint64_t v226;
  MIL::IRDimension **v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  Espresso::AOT::AbstractMILCompiler *v232;
  __n128 *v234;
  Espresso::AOT::SegmentsIOTransformer *v235;
  Espresso::AOT::CompilerOptionsForE5 *v236;
  int DumpIrOnly;
  uint64_t v238;
  Espresso::AOT::E5BackendFlexibleShapeTransformer *v239;
  __int128 v240;
  char v241;
  char v242[15];
  __int128 v243;
  char v244;
  char v245[15];
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  char v250;
  char v251[15];
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v252;
  uint64_t v253;
  void *v254[4];
  int v255;
  _BYTE v256[32];
  int v257;
  void *v258;
  int v259[2];
  uint64_t v260;
  MIL::Opsets::Common::ios15::ios15Opset *v261;
  __int128 v262;
  void *v263;
  unsigned int *v264;
  __int128 v265;
  void *v266;
  _DWORD *v267;
  std::string v268;
  void *v269[2];
  std::string::size_type v270;
  void *v271[2];
  int64_t v272;
  void *v273[2];
  char v274;
  void *v275[2];
  char v276;
  MIL::Opsets::Common::ios15::ios15Opset *v277;
  __int128 v278;
  char v279[8];
  std::__fs::filesystem::path v280;
  std::string v281;
  std::__fs::filesystem::path v282;
  void *v283;
  uint8_t buf[4];
  uint64_t v285;
  void *__p;
  _BYTE *v287;
  int64_t v288;
  std::string __dst;
  void *v290;
  void **v291;
  uint64_t v292;

  v292 = *MEMORY[0x1E0C80C00];
  v236 = (Espresso::AOT::CompilerOptionsForE5 *)(a1 + 33);
  InputPath = Espresso::AOT::CompilerOptionsForE5::GetInputPath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 33));
  memset(&v282, 0, sizeof(v282));
  v5 = *(unsigned __int8 *)(InputPath + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (std::string *)InputPath;
  else
    v6 = *(std::string **)InputPath;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(InputPath + 8);
  std::string::append[abi:ne180100]<char const*,0>(&v282.__pn_, v6, (std::string *)((char *)v6 + v5));
  v7 = std::__fs::filesystem::path::__parent_path(&v282);
  if (v7.__size_ > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7.__size_ >= 0x17)
  {
    v9 = (v7.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7.__size_ | 7) != 0x17)
      v9 = v7.__size_ | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    __dst.__r_.__value_.__l.__size_ = v7.__size_;
    goto LABEL_13;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7.__size_;
  p_dst = &__dst;
  if (v7.__size_)
LABEL_13:
    memmove(p_dst, v7.__data_, v7.__size_);
  p_dst->__r_.__value_.__s.__data_[v7.__size_] = 0;
  v281 = __dst;
  OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath(v236);
  memset(&v280, 0, sizeof(v280));
  v12 = *(unsigned __int8 *)(OutputBundlePath + 23);
  if ((v12 & 0x80u) == 0)
    v13 = (std::string *)OutputBundlePath;
  else
    v13 = *(std::string **)OutputBundlePath;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(OutputBundlePath + 8);
  std::string::append[abi:ne180100]<char const*,0>(&v280.__pn_, v13, (std::string *)((char *)v13 + v12));
  std::__fs::filesystem::__create_directories(&v280, 0);
  std::__fs::filesystem::__status(&v280, 0);
  v15 = Espresso::espresso_os_log_subsystem(0, v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    Espresso::AOT::MILCompilerForE5::Run((uint64_t *)&v280, (uint64_t)v279, v15);
  DumpIrOnly = Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly(v236);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A72440;
  strcpy(__dst.__r_.__value_.__l.__data_, "Optimized_InputOfMILCompilerForE5.mil");
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v16 = a1[93];
    if (!v16)
      goto LABEL_26;
    goto LABEL_25;
  }
  v16 = a1[93];
  if (v16)
LABEL_25:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
LABEL_26:
  v24 = *(__n128 **)(Espresso::AOT::CompilerOptionsForE5::GetPlatforms(v236) + 16);
  if (v24)
  {
    v232 = (Espresso::AOT::AbstractMILCompiler *)a1;
    do
    {
      v278 = (__int128)v24[1];
      if (Espresso::AOT::Utils::IsPlatformMixANE(v278, v17, v18, v19, v20, v21, v22, v23, v230)
        && (Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW(v236) & 1) != 0)
      {
        goto LABEL_28;
      }
      v25 = (E5Common::E5PlatformManager *)(*(_QWORD *(**)(MIL::Opsets::Common::ios15::ios15Opset **__return_ptr))(*(_QWORD *)a2 + 32))(&v277);
      v26 = E5Common::E5PlatformManager::Instance(v25);
      v27 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v26 + 24))(v26, &v278);
      v234 = v24;
      v29 = Espresso::espresso_os_log_subsystem(0, v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        Espresso::AOT::MILCompilerForE5::Run(buf, (uint64_t *)v27, &v285, v29);
      v276 = 7;
      strcpy((char *)v275, ".bundle");
      v274 = 3;
      LODWORD(v273[0]) = 3499310;
      v30 = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath(v236);
      v31 = (const void **)v30;
      v32 = *(char *)(v30 + 23);
      if (v32 >= 0)
        v33 = *(unsigned __int8 *)(v30 + 23);
      else
        v33 = *(_QWORD *)(v30 + 8);
      v34 = v33 + 1;
      if (v33 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v34 >= 0x17)
      {
        v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v36 = v34 | 7;
        v37 = v36 + 1;
        v35 = operator new(v36 + 1);
        *(_QWORD *)&v256[8] = v33 + 1;
        *(_QWORD *)&v256[16] = v37 | 0x8000000000000000;
        *(_QWORD *)v256 = v35;
      }
      else
      {
        memset(v256, 0, 24);
        v35 = v256;
        v256[23] = v33 + 1;
        if (!v33)
          goto LABEL_47;
      }
      if (v32 >= 0)
        v38 = v31;
      else
        v38 = *v31;
      memmove(v35, v38, v33);
LABEL_47:
      *(_WORD *)&v35[v33] = 47;
      v39 = *(char *)(v27 + 23);
      if (v39 >= 0)
        v40 = (const std::string::value_type *)v27;
      else
        v40 = *(const std::string::value_type **)v27;
      if (v39 >= 0)
        v41 = *(unsigned __int8 *)(v27 + 23);
      else
        v41 = *(_QWORD *)(v27 + 8);
      v42 = std::string::append((std::string *)v256, v40, v41);
      v43 = v232;
      v44 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v44;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      if (v276 >= 0)
        v45 = v275;
      else
        v45 = (void **)v275[0];
      if (v276 >= 0)
        v46 = v276;
      else
        v46 = (std::string::size_type)v275[1];
      v47 = std::string::append(&__dst, (const std::string::value_type *)v45, v46);
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v272 = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)v271 = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((v256[23] & 0x80000000) == 0)
          goto LABEL_61;
      }
      else if ((v256[23] & 0x80000000) == 0)
      {
        goto LABEL_61;
      }
      operator delete(*(void **)v256);
LABEL_61:
      v49 = SHIBYTE(v272);
      if (v272 >= 0)
        v50 = HIBYTE(v272);
      else
        v50 = (size_t)v271[1];
      v51 = v50 + 1;
      if (v50 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v51 >= 0x17)
      {
        v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v53 = v51 | 7;
        v54 = v53 + 1;
        v52 = operator new(v53 + 1);
        *(_QWORD *)&v256[8] = v50 + 1;
        *(_QWORD *)&v256[16] = v54 | 0x8000000000000000;
        *(_QWORD *)v256 = v52;
      }
      else
      {
        memset(v256, 0, 24);
        v52 = v256;
        v256[23] = v50 + 1;
        if (!v50)
          goto LABEL_75;
      }
      if (v49 >= 0)
        v55 = v271;
      else
        v55 = (void **)v271[0];
      memmove(v52, v55, v50);
LABEL_75:
      *(_WORD *)&v52[v50] = 47;
      v56 = *(char *)(v27 + 23);
      if (v56 >= 0)
        v57 = (const std::string::value_type *)v27;
      else
        v57 = *(const std::string::value_type **)v27;
      if (v56 >= 0)
        v58 = *(unsigned __int8 *)(v27 + 23);
      else
        v58 = *(_QWORD *)(v27 + 8);
      v59 = std::string::append((std::string *)v256, v57, v58);
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      if (v274 >= 0)
        v61 = v273;
      else
        v61 = (void **)v273[0];
      if (v274 >= 0)
        v62 = v274;
      else
        v62 = (std::string::size_type)v273[1];
      v63 = std::string::append(&__dst, (const std::string::value_type *)v61, v62);
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v270 = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)v269 = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((v256[23] & 0x80000000) == 0)
          goto LABEL_89;
      }
      else if ((v256[23] & 0x80000000) == 0)
      {
        goto LABEL_89;
      }
      operator delete(*(void **)v256);
LABEL_89:
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_191A71230;
      strcpy(__dst.__r_.__value_.__l.__data_, "ESPRESSO_ENABLE_VALUE_INFERENCE");
      v256[23] = 1;
      strcpy(v256, "1");
      Espresso::scoped_env_var_kv::scoped_env_var_kv(&v268, (__int128 *)&__dst, (uint64_t)v256);
      if ((v256[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v256);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_121:
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_121;
      }
      v265 = v278;
      Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform((uint64_t)v232, (uint64_t)&v266);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v265);
      v262 = v278;
      Espresso::AOT::MILCompilerForE5::ExtractBackends((uint64_t)v232, &v262, (char **)&v263);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v262);
      v66 = (unsigned int *)v263;
      v67 = v264;
      while (v66 != v67)
      {
        v68 = Espresso::espresso_os_log_subsystem(0, v65);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          BackendName = Espresso::AOT::GetBackendName(*v66);
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)BackendName;
          _os_log_debug_impl(&dword_190DAF000, v68, OS_LOG_TYPE_DEBUG, "Backend registered: %s", (uint8_t *)&__dst, 0xCu);
        }
        ++v66;
      }
      v70 = v277;
      v277 = 0;
      v261 = v70;
      Espresso::AOT::MILCompilerForE5::CanonicalizeForPlatform(v232, &v261, (uint64_t)&v263, (uint64_t)&v266, (uint64_t *)&v278, &__dst);
      v71 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      v72 = (uint64_t)v277;
      v277 = (MIL::Opsets::Common::ios15::ios15Opset *)v71;
      if (v72)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
        v73 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v73)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v73 + 8))(v73);
      }
      v74 = v261;
      v261 = 0;
      if (v74)
        (*(void (**)(MIL::Opsets::Common::ios15::ios15Opset *))(*(_QWORD *)v74 + 8))(v74);
      v75 = (uint64_t)v277;
      memset(&__dst, 0, sizeof(__dst));
      v76 = (char *)HIBYTE(v272);
      if (v272 >= 0)
        v77 = (std::string *)v271;
      else
        v77 = (std::string *)v271[0];
      if (v272 < 0)
        v76 = (char *)v271[1];
      std::string::append[abi:ne180100]<char const*,0>(&__dst, v77, (std::string *)&v76[(_QWORD)v77]);
      *(_QWORD *)v256 = operator new(0x20uLL);
      *(_OWORD *)&v256[8] = xmmword_191A78340;
      strcpy(*(char **)v256, "CanonicalizeForPlatform.mil");
      if ((v256[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v256);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_123:
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_123;
      }
      v258 = 0;
      *(_QWORD *)v259 = 0;
      v260 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v258, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      memset(v256, 0, sizeof(v256));
      v257 = 1065353216;
      v78 = (Espresso::AOT::E5BackendFlexibleShapeTransformer *)operator new();
      Espresso::AOT::E5BackendFlexibleShapeTransformer::E5BackendFlexibleShapeTransformer(v78);
      v239 = v78;
      if (!Espresso::AOT::CompilerOptionsForE5::GetEnableDefaultFunctionForRangeDim(v236)
        || !Espresso::AOT::E5BackendFlexibleShapeTransformer::HasAnEntryPointWithFlexibleShapeAttribute((uint64_t)v78, (uint64_t)v277, a3))
      {
        goto LABEL_156;
      }
      Espresso::AOT::E5BackendFlexibleShapeTransformer::AddDefaultFunction((uint64_t)v277, a3, &__dst);
      v79 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      v80 = (uint64_t)v277;
      v277 = (MIL::Opsets::Common::ios15::ios15Opset *)v79;
      if (v80)
        (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v258, *(uint64_t *)v259, (std::string *)__dst.__r_.__value_.__l.__size_, (std::string *)__dst.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__l.__size_) >> 3));
      v81 = Espresso::AOT::GetBackendName(2u);
      v83 = v82;
      if (v82 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v84 = v81;
      if (v82 >= 0x17)
      {
        v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v86 = v82 | 7;
        v87 = v86 + 1;
        p_p = operator new(v86 + 1);
        v288 = v87 | 0x8000000000000000;
        __p = p_p;
        v287 = (_BYTE *)v83;
      }
      else
      {
        HIBYTE(v288) = v82;
        p_p = &__p;
        if (!v82)
          goto LABEL_128;
      }
      memmove(p_p, v84, v83);
LABEL_128:
      *((_BYTE *)p_p + v83) = 0;
      memset(v254, 0, sizeof(v254));
      v255 = 1065353216;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v254, (uint64_t)&__p, (uint64_t)&__p);
      v43 = v232;
      if (SHIBYTE(v288) < 0)
        operator delete(__p);
      v88 = (char *)v290;
      v89 = (char *)v291;
      if (v290 != v291)
      {
        do
        {
          std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unordered_set<std::string>&>((uint64_t)v256, (uint64_t)v88, (uint64_t)v88, (uint64_t)v254);
          v88 += 24;
        }
        while (v88 != v89);
      }
      v90 = (void **)v254[2];
      if (v254[2])
      {
        do
        {
          v95 = (void **)*v90;
          if (*((char *)v90 + 39) < 0)
            operator delete(v90[2]);
          operator delete(v90);
          v90 = v95;
        }
        while (v95);
      }
      v91 = v254[0];
      v254[0] = 0;
      if (v91)
        operator delete(v91);
      v92 = (void **)v290;
      if (v290)
      {
        v93 = v291;
        v94 = v290;
        if (v291 != v290)
        {
          do
          {
            if (*((char *)v93 - 1) < 0)
              operator delete(*(v93 - 3));
            v93 -= 3;
          }
          while (v93 != v92);
          v94 = v290;
        }
        v291 = v92;
        operator delete(v94);
      }
      size = __dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v97 = __dst.__r_.__value_.__r.__words[2];
        v98 = (void *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__r.__words[2] != __dst.__r_.__value_.__l.__size_)
        {
          do
          {
            if (*(char *)(v97 - 1) < 0)
              operator delete(*(void **)(v97 - 24));
            v97 -= 24;
          }
          while (v97 != size);
          v98 = (void *)__dst.__r_.__value_.__l.__size_;
        }
        __dst.__r_.__value_.__r.__words[2] = size;
        operator delete(v98);
      }
      v99 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v99)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v99 + 8))(v99);
LABEL_156:
      Espresso::AOT::MILCompilerForE5::MakeSegmenter((uint64_t)v43, (__n128 *)&v278, (uint64_t)v271, (unsigned int **)&v263, (uint64_t)v256, &v253);
      (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **__return_ptr, uint64_t, MIL::Opsets::Common::ios15::ios15Opset *, void **))(*(_QWORD *)v253 + 16))(&v252, v253, v277, &v258);
      v100 = v252;
      memset(&__dst, 0, sizeof(__dst));
      v101 = (char *)HIBYTE(v272);
      if (v272 >= 0)
        v102 = (std::string *)v271;
      else
        v102 = (std::string *)v271[0];
      if (v272 < 0)
        v101 = (char *)v271[1];
      std::string::append[abi:ne180100]<char const*,0>(&__dst, v102, (std::string *)&v101[(_QWORD)v102]);
      HIBYTE(v254[2]) = 13;
      strcpy((char *)v254, "Segmenter.mil");
      if (SHIBYTE(v254[2]) < 0)
      {
        operator delete(v254[0]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_163;
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_163;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_163:
      v104 = Espresso::espresso_os_log_subsystem(0, v103);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
        Espresso::AOT::MILCompilerForE5::Run(&v250, v251);
      v105 = (Espresso::AOT::SegmentsIOTransformer *)operator new();
      Espresso::AOT::SegmentsIOTransformer::SegmentsIOTransformer(v105);
      (*(void (**)(std::string *__return_ptr, Espresso::AOT::SegmentsIOTransformer *, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, void **))(*(_QWORD *)v105 + 16))(&__dst, v105, v252, &v258);
      v235 = v105;
      v106 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      v107 = v252;
      v252 = v106;
      if (v107)
      {
        (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v107 + 8))(v107);
        v108 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v108)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v108 + 8))(v108);
      }
      v109 = v252;
      memset(&__dst, 0, sizeof(__dst));
      v110 = (char *)HIBYTE(v272);
      if (v272 >= 0)
        v111 = (std::string *)v271;
      else
        v111 = (std::string *)v271[0];
      if (v272 < 0)
        v110 = (char *)v271[1];
      std::string::append[abi:ne180100]<char const*,0>(&__dst, v111, (std::string *)&v110[(_QWORD)v111]);
      v254[0] = operator new(0x20uLL);
      *(_OWORD *)&v254[1] = xmmword_191A86860;
      strcpy((char *)v254[0], "SegmentsIOTransformer.mil");
      if (SHIBYTE(v254[2]) < 0)
      {
        operator delete(v254[0]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_197:
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_197;
      }
      Espresso::AOT::ConvertNoOpFunctions((uint64_t)v252, (uint64_t *)&v258, (std::string::size_type *)&__dst);
      v112 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      v113 = v252;
      v252 = v112;
      if (v113)
      {
        (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v113 + 8))(v113);
        v114 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v114)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v114 + 8))(v114);
      }
      v115 = v252;
      memset(&__dst, 0, sizeof(__dst));
      v116 = (char *)HIBYTE(v272);
      if (v272 >= 0)
        v117 = (std::string *)v271;
      else
        v117 = (std::string *)v271[0];
      if (v272 < 0)
        v116 = (char *)v271[1];
      std::string::append[abi:ne180100]<char const*,0>(&__dst, v117, (std::string *)&v116[(_QWORD)v117]);
      v254[0] = operator new(0x20uLL);
      *(_OWORD *)&v254[1] = xmmword_191A71250;
      strcpy((char *)v254[0], "ConvertNoOpFunctions.mil");
      if (SHIBYTE(v254[2]) < 0)
      {
        operator delete(v254[0]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_185;
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_185;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_185:
      HasAnEntryPointWithFlexibleShapeAttribute = Espresso::AOT::E5BackendFlexibleShapeTransformer::HasAnEntryPointWithFlexibleShapeAttribute((uint64_t)v78, (uint64_t)v277, (uint64_t *)&v258);
      v119 = v252;
      if (HasAnEntryPointWithFlexibleShapeAttribute)
      {
        Espresso::AOT::E5BackendFlexibleShapeTransformer::Run((uint64_t)v252, (uint64_t *)&v258, &__dst);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v258, (std::string *)__dst.__r_.__value_.__l.__size_, (std::string *)__dst.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__l.__size_) >> 3));
        v120 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        v121 = v252;
        v252 = v120;
        if (v121)
          (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v121 + 8))(v121);
        v122 = __dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v123 = __dst.__r_.__value_.__r.__words[2];
          v124 = (void *)__dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__r.__words[2] != __dst.__r_.__value_.__l.__size_)
          {
            do
            {
              if (*(char *)(v123 - 1) < 0)
                operator delete(*(void **)(v123 - 24));
              v123 -= 24;
            }
            while (v123 != v122);
            v124 = (void *)__dst.__r_.__value_.__l.__size_;
          }
          __dst.__r_.__value_.__r.__words[2] = v122;
          operator delete(v124);
        }
        v125 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v125)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v125 + 8))(v125);
        v119 = v252;
      }
      memset(&__dst, 0, sizeof(__dst));
      v126 = (char *)HIBYTE(v272);
      if (v272 >= 0)
        v127 = (std::string *)v271;
      else
        v127 = (std::string *)v271[0];
      if (v272 < 0)
        v126 = (char *)v271[1];
      std::string::append[abi:ne180100]<char const*,0>(&__dst, v127, (std::string *)&v126[(_QWORD)v127]);
      v254[0] = operator new(0x20uLL);
      *(_OWORD *)&v254[1] = xmmword_191A72420;
      strcpy((char *)v254[0], "FlexibleShapeTransformer.mil");
      if (SHIBYTE(v254[2]) < 0)
      {
        operator delete(v254[0]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_243:
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_243;
      }
      v249 = v278;
      if (!Espresso::AOT::Utils::IsPlatformMixANE(v278, v128, v129, v130, v131, v132, v133, v134, v230)
        || (v135 = v266, v266 == v267))
      {
LABEL_216:
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v249);
      }
      else
      {
        while ((*v135 - 1) >= 2)
        {
          if (++v135 == v267)
            goto LABEL_216;
        }
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v249);
        Espresso::AOT::AddBackwardCompatibilityAttributes((uint64_t *)&v258, (uint64_t)v277, (std::string::size_type)v252);
      }
      Espresso::AOT::AddTotalSizeAttr((uint64_t)v252, (uint64_t *)&v258, &__dst);
      v136 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      v137 = v252;
      v252 = v136;
      if (v137)
      {
        (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v137 + 8))(v137);
        v138 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v138)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v138 + 8))(v138);
      }
      Espresso::AOT::PruneNoOpTransfers((uint64_t)v252, (uint64_t *)&v258, &__dst);
      v139 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      v140 = v252;
      v252 = v139;
      if (v140)
      {
        (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v140 + 8))(v140);
        v141 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v141)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v141 + 8))(v141);
      }
      v142 = v252;
      memset(&__dst, 0, sizeof(__dst));
      v143 = (char *)HIBYTE(v272);
      if (v272 >= 0)
        v144 = (std::string *)v271;
      else
        v144 = (std::string *)v271[0];
      if (v272 < 0)
        v143 = (char *)v271[1];
      std::string::append[abi:ne180100]<char const*,0>(&__dst, v144, (std::string *)&v143[(_QWORD)v144]);
      strcpy((char *)v254, "PruneNoOpTransfers.mil");
      HIBYTE(v254[2]) = 22;
      if (SHIBYTE(v254[2]) < 0)
      {
        operator delete(v254[0]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_245:
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_245;
      }
      Espresso::AOT::AlignCalleeWithCallOp(v252, (unsigned __int8 **)&v258);
      v145 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      v146 = v252;
      v252 = v145;
      if (v146)
      {
        (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v146 + 8))(v146);
        v147 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v147)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v147 + 8))(v147);
      }
      v148 = v252;
      memset(&__dst, 0, sizeof(__dst));
      v149 = (char *)HIBYTE(v272);
      if (v272 >= 0)
        v150 = (std::string *)v271;
      else
        v150 = (std::string *)v271[0];
      if (v272 < 0)
        v149 = (char *)v271[1];
      std::string::append[abi:ne180100]<char const*,0>(&__dst, v150, (std::string *)&v149[(_QWORD)v150]);
      v254[0] = operator new(0x20uLL);
      *(_OWORD *)&v254[1] = xmmword_191A86860;
      strcpy((char *)v254[0], "AlignCalleeWithCallOp.mil");
      if (SHIBYTE(v254[2]) < 0)
      {
        operator delete(v254[0]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_240;
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_240;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_240:
      v247 = v278;
      Espresso::AOT::MILCompilerForE5::MakeE5BackendToE5RTLowering((uint64_t)v43, (uint64_t)v271, &v247, &v248);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v247);
      (*(void (**)(std::string *__return_ptr, uint64_t, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, void **))(*(_QWORD *)v248 + 16))(&__dst, v248, v252, &v258);
      *(_QWORD *)&v246 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
      {
        v152 = (_QWORD *)operator new();
        v153 = __dst.__r_.__value_.__r.__words[0];
        *v152 = &unk_1E2DC3120;
        v152[1] = 0;
        v152[2] = 0;
        v152[3] = v153;
      }
      else
      {
        v152 = 0;
      }
      *((_QWORD *)&v246 + 1) = v152;
      v154 = Espresso::espresso_os_log_subsystem(0, v151);
      if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
        Espresso::AOT::MILCompilerForE5::Run(&v244, v245);
      if (Espresso::AOT::CompilerOptionsForE5::GetDisableDataDependentShape(v236))
      {
        v155 = (char *)v258;
        memset(v254, 0, 24);
        v238 = *(_QWORD *)v259;
        if (v258 != *(void **)v259)
        {
          v156 = 0;
          do
          {
            Function = MIL::IRProgram::GetFunction();
            v158 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
            v159 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 56))(v158);
            v160 = **v159;
            for (i = (*v159)[1]; v160 != i; v78 = v239)
            {
              v162 = (__int128 **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v160 + 176))(*v160);
              v164 = *v162;
              v163 = v162[1];
              while (v164 != v163)
              {
                Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v164);
                v166 = __dst.__r_.__value_.__l.__size_;
                v167 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__l.__size_)
                {
                  while (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v167 + 24))(*v167))
                  {
                    if (++v167 == (_QWORD *)v166)
                      goto LABEL_294;
                  }
                  if (v156 >= v254[2])
                  {
                    v172 = (char *)v254[0];
                    v173 = (v156 - (char *)v254[0]) >> 4;
                    v174 = v173 + 1;
                    if ((unint64_t)(v173 + 1) >> 60)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v175 = (char *)v254[2] - (char *)v254[0];
                    if (((char *)v254[2] - (char *)v254[0]) >> 3 > v174)
                      v174 = v175 >> 3;
                    if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF0)
                      v176 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v176 = v174;
                    if (v176 >> 60)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v177 = (char *)operator new(16 * v176);
                    v178 = &v177[16 * v173];
                    v179 = *v164;
                    *(_OWORD *)v178 = *v164;
                    if (*((_QWORD *)&v179 + 1))
                    {
                      v180 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
                      do
                        v181 = __ldxr(v180);
                      while (__stxr(v181 + 1, v180));
                    }
                    v182 = &v177[16 * v176];
                    v171 = v178 + 16;
                    if (v156 == v172)
                    {
                      v254[0] = v178;
                      v254[1] = v178 + 16;
                      v254[2] = &v177[16 * v176];
                    }
                    else
                    {
                      do
                      {
                        v183 = *((_OWORD *)v156 - 1);
                        v156 -= 16;
                        *((_OWORD *)v178 - 1) = v183;
                        v178 -= 16;
                        *(_QWORD *)v156 = 0;
                        *((_QWORD *)v156 + 1) = 0;
                      }
                      while (v156 != v172);
                      v156 = (char *)v254[0];
                      v184 = (char *)v254[1];
                      v254[0] = v178;
                      v254[1] = v171;
                      v254[2] = v182;
                      while (v184 != v156)
                      {
                        v185 = (std::__shared_weak_count *)*((_QWORD *)v184 - 1);
                        if (v185)
                        {
                          p_shared_owners = (unint64_t *)&v185->__shared_owners_;
                          do
                            v187 = __ldaxr(p_shared_owners);
                          while (__stlxr(v187 - 1, p_shared_owners));
                          if (!v187)
                          {
                            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                            std::__shared_weak_count::__release_weak(v185);
                          }
                        }
                        v184 -= 16;
                      }
                    }
                    if (v156)
                      operator delete(v156);
                  }
                  else
                  {
                    *(_QWORD *)v156 = *(_QWORD *)v164;
                    v168 = *((_QWORD *)v164 + 1);
                    *((_QWORD *)v156 + 1) = v168;
                    if (v168)
                    {
                      v169 = (unint64_t *)(v168 + 8);
                      do
                        v170 = __ldxr(v169);
                      while (__stxr(v170 + 1, v169));
                    }
                    v171 = v156 + 16;
                  }
                  v254[1] = v171;
                  v156 = (char *)v171;
LABEL_294:
                  v167 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
                }
                if (v167)
                {
                  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v167;
                  operator delete(v167);
                }
                ++v164;
              }
              v160 += 2;
            }
            v155 += 24;
          }
          while (v155 != (char *)v238);
          v188 = (char *)v254[0];
          if (v254[0] != v156)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__dst);
            v215 = 0;
            while (1)
            {
              if (v215)
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)", ", 2);
              v216 = (MIL::IRNamedValueType **)&v188[16 * v215];
              Name = MIL::IRNamedValueType::GetName(*v216);
              v218 = *(char *)(Name + 23);
              if (v218 >= 0)
                v219 = Name;
              else
                v219 = *(_QWORD *)Name;
              if (v218 >= 0)
                v220 = *(unsigned __int8 *)(Name + 23);
              else
                v220 = *(_QWORD *)(Name + 8);
              v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, v219, v220);
              v222 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)" - ", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)"[", 1);
              v223 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v216);
              v224 = (MIL::IRDimension **)__p;
              if (v287 != __p)
              {
                if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)__p + 24))(*(_QWORD *)__p))
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"?", 1);
                }
                else
                {
                  v225 = MIL::IRDimension::AsConstant(*v224);
                  (*(void (**)(uint64_t))(*(_QWORD *)v225 + 48))(v225);
                  std::ostream::operator<<();
                }
                if ((unint64_t)(v287 - (_BYTE *)__p) >= 9)
                {
                  v226 = 1;
                  do
                  {
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)", ", 2);
                    v227 = (MIL::IRDimension **)__p;
                    if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)__p + v226) + 24))(*((_QWORD *)__p + v226)))
                    {
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"?", 1);
                    }
                    else
                    {
                      v228 = MIL::IRDimension::AsConstant(v227[v226]);
                      (*(void (**)(uint64_t))(*(_QWORD *)v228 + 48))(v228);
                      std::ostream::operator<<();
                    }
                    ++v226;
                  }
                  while (v226 < (v287 - (_BYTE *)__p) >> 3);
                }
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"]", 1);
              if (__p)
              {
                v287 = __p;
                operator delete(__p);
              }
              ++v215;
              v188 = (char *)v254[0];
              if (v215 >= ((char *)v254[1] - (char *)v254[0]) >> 4)
              {
                std::stringbuf::str();
                if (v288 >= 0)
                  v229 = &__p;
                else
                  v229 = __p;
                v283 = v229;
                Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,char const*>("Data-dependent shapes were disabled: %s.", &v283);
              }
            }
          }
          if (v156)
          {
            v254[1] = v156;
            operator delete(v156);
          }
        }
        v43 = v232;
      }
      v189 = v246;
      memset(&__dst, 0, sizeof(__dst));
      v190 = (char *)HIBYTE(v272);
      if (v272 >= 0)
        v191 = (std::string *)v271;
      else
        v191 = (std::string *)v271[0];
      if (v272 < 0)
        v190 = (char *)v271[1];
      std::string::append[abi:ne180100]<char const*,0>(&__dst, v191, (std::string *)&v190[(_QWORD)v191]);
      v254[0] = operator new(0x20uLL);
      *(_OWORD *)&v254[1] = xmmword_191A78340;
      strcpy((char *)v254[0], "E5BackendToE5RTLowering.mil");
      if (SHIBYTE(v254[2]) < 0)
      {
        operator delete(v254[0]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_308;
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_308;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_308:
      if ((Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly(v236) & 1) == 0)
      {
        v243 = v246;
        if (*((_QWORD *)&v246 + 1))
        {
          v192 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
          do
            v193 = __ldxr(v192);
          while (__stxr(v193 + 1, v192));
        }
        Espresso::AOT::MILCompilerForE5::MakeMemOptimizer((uint64_t *)&v243, (uint64_t *)v254);
        v194 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
        if (*((_QWORD *)&v243 + 1))
        {
          v195 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        Espresso::AOT::MemOptimizer::Optimizer::Run((uint64_t)v254[0], (uint64_t *)&v258, (uint64_t)&__dst);
        v198 = Espresso::espresso_os_log_subsystem(0, v197);
        if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG))
          Espresso::AOT::MILCompilerForE5::Run(&v241, v242);
        v240 = v246;
        v246 = 0uLL;
        BuildInfo = Espresso::AOT::AOTCompilerBackend::GetBuildInfo(v43);
        Espresso::AOT::MILCompilerForE5::MakeMILE5Builder((uint64_t *)&v240, (uint64_t)&v278, (uint64_t)&__dst, BuildInfo, (uint64_t *)&__p);
        v200 = (std::__shared_weak_count *)*((_QWORD *)&v240 + 1);
        if (*((_QWORD *)&v240 + 1))
        {
          v201 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        v203 = __p;
        E5AOT::E5BuilderForMIL::SerializeToDisk((E5AOT::E5BuilderForMIL *)__p, (uint64_t)v269);
        if (v203)
          (*(void (**)(void *))(*(_QWORD *)v203 + 8))(v203);
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node((int)&__dst, (char *)__dst.__r_.__value_.__r.__words[2]);
        v204 = (void *)__dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v204)
          operator delete(v204);
        if (v254[0])
          (*(void (**)(void *))(*(_QWORD *)v254[0] + 8))(v254[0]);
      }
      v205 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
      if (!*((_QWORD *)&v246 + 1))
        goto LABEL_334;
      v206 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (v207)
      {
LABEL_334:
        v208 = v248;
        if (!v248)
          goto LABEL_336;
LABEL_335:
        (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
        goto LABEL_336;
      }
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
      v208 = v248;
      if (v248)
        goto LABEL_335;
LABEL_336:
      (*(void (**)(Espresso::AOT::SegmentsIOTransformer *))(*(_QWORD *)v235 + 8))(v235);
      v209 = v252;
      v252 = 0;
      if (v209)
        (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v209 + 8))(v209);
      if (v253)
        (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
      MEMORY[0x19401CD90](v78, 0xC400A2AC0F1);
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node((int)v256, *(char **)&v256[16]);
      v210 = *(void **)v256;
      *(_QWORD *)v256 = 0;
      if (v210)
        operator delete(v210);
      v211 = v258;
      v24 = v234;
      if (v258)
      {
        v212 = *(_QWORD *)v259;
        v213 = v258;
        if (*(void **)v259 != v258)
        {
          do
          {
            if (*(char *)(v212 - 1) < 0)
              operator delete(*(void **)(v212 - 24));
            v212 -= 24;
          }
          while ((void *)v212 != v211);
          v213 = v258;
        }
        *(_QWORD *)v259 = v211;
        operator delete(v213);
      }
      if (v263)
      {
        v264 = (unsigned int *)v263;
        operator delete(v263);
      }
      if (v266)
      {
        v267 = v266;
        operator delete(v266);
      }
      Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)&v268.__r_.__value_.__l.__data_);
      if (SHIBYTE(v270) < 0)
      {
        operator delete(v269[0]);
        if ((SHIBYTE(v272) & 0x80000000) == 0)
        {
LABEL_356:
          if ((v274 & 0x80000000) == 0)
            goto LABEL_357;
          goto LABEL_364;
        }
      }
      else if ((SHIBYTE(v272) & 0x80000000) == 0)
      {
        goto LABEL_356;
      }
      operator delete(v271[0]);
      if ((v274 & 0x80000000) == 0)
      {
LABEL_357:
        if ((v276 & 0x80000000) == 0)
          goto LABEL_358;
        goto LABEL_365;
      }
LABEL_364:
      operator delete(v273[0]);
      if ((v276 & 0x80000000) == 0)
      {
LABEL_358:
        v214 = (uint64_t)v277;
        v277 = 0;
        if (!v214)
          goto LABEL_28;
LABEL_366:
        (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
        goto LABEL_28;
      }
LABEL_365:
      operator delete(v275[0]);
      v214 = (uint64_t)v277;
      v277 = 0;
      if (v214)
        goto LABEL_366;
LABEL_28:
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v278);
      v24 = (__n128 *)v24->n128_u64[0];
    }
    while (v24);
  }
  if (SHIBYTE(v280.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v280.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_372:
      if ((SHIBYTE(v282.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_376:
      operator delete(v282.__pn_.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_372;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
  if (SHIBYTE(v282.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_376;
}

void sub_1910781A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *a72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;

  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x370]);
  v73 = a32;
  v74 = a53;
  if (a53)
  {
    v80 = a54;
    v81 = a53;
    if ((void *)a54 != a53)
    {
      do
      {
        v82 = *(std::__shared_weak_count **)(v80 - 8);
        if (v82)
        {
          p_shared_owners = (unint64_t *)&v82->__shared_owners_;
          do
            v84 = __ldaxr(p_shared_owners);
          while (__stlxr(v84 - 1, p_shared_owners));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        v80 -= 16;
      }
      while ((void *)v80 != v74);
      v81 = a53;
      v73 = a32;
    }
    a54 = (uint64_t)v74;
    operator delete(v81);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
    v75 = a46;
    if (!a46)
    {
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)a24 + 8))(a24);
      v76 = a51;
      a51 = 0;
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      if (a52)
        (*(void (**)(uint64_t))(*(_QWORD *)a52 + 8))(a52);
      MEMORY[0x19401CD90](v73, 0xC400A2AC0F1);
      std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100]((uint64_t)&a59);
      std::vector<std::string>::~vector[abi:ne180100](&a65);
      v77 = a72;
      if (a72)
      {
        STACK[0x200] = (unint64_t)a72;
        operator delete(v77);
      }
      v78 = (void *)STACK[0x228];
      if (STACK[0x228])
      {
        STACK[0x230] = (unint64_t)v78;
        operator delete(v78);
      }
      Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)&STACK[0x240]);
      if (SLOBYTE(STACK[0x277]) < 0)
        operator delete((void *)STACK[0x260]);
      if (SLOBYTE(STACK[0x297]) < 0)
        operator delete((void *)STACK[0x280]);
      if (SLOBYTE(STACK[0x2AF]) < 0)
      {
        operator delete((void *)STACK[0x298]);
        if ((SLOBYTE(STACK[0x2C7]) & 0x80000000) == 0)
          goto LABEL_24;
      }
      else if ((SLOBYTE(STACK[0x2C7]) & 0x80000000) == 0)
      {
LABEL_24:
        v79 = STACK[0x2C8];
        STACK[0x2C8] = 0;
        if (!v79)
          goto LABEL_26;
        goto LABEL_25;
      }
      operator delete((void *)STACK[0x2B0]);
      v79 = STACK[0x2C8];
      STACK[0x2C8] = 0;
      if (!v79)
      {
LABEL_26:
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x2D0]);
        if (SLOBYTE(STACK[0x2FF]) < 0)
        {
          operator delete((void *)STACK[0x2E8]);
          if (SLOBYTE(STACK[0x317]) < 0)
            goto LABEL_28;
        }
        else if (SLOBYTE(STACK[0x317]) < 0)
        {
LABEL_28:
          operator delete((void *)STACK[0x300]);
          if ((SLOBYTE(STACK[0x337]) & 0x80000000) == 0)
LABEL_29:
            _Unwind_Resume(a1);
LABEL_7:
          operator delete((void *)STACK[0x320]);
          _Unwind_Resume(a1);
        }
        if ((SLOBYTE(STACK[0x337]) & 0x80000000) == 0)
          goto LABEL_29;
        goto LABEL_7;
      }
LABEL_25:
      (*(void (**)(unint64_t))(*(_QWORD *)v79 + 8))(v79);
      goto LABEL_26;
    }
  }
  else
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
    v75 = a46;
    if (!a46)
      goto LABEL_10;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  goto LABEL_10;
}

void `anonymous namespace'::DumpIR(int a1, uint64_t a2, uint64_t a3, std::__fs::filesystem::path *a4, uint64_t a5)
{
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  std::string *v18;
  void *__p;
  char v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  std::__fs::filesystem::__create_directories(a4, 0);
  v9 = std::string::append(&v23, "_dumped_");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = *(char *)(a5 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a5;
  else
    v12 = *(const std::string::value_type **)a5;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a5 + 23);
  else
    v13 = *(_QWORD *)(a5 + 8);
  v14 = std::string::append(&v24, v12, v13);
  v15 = v14->__r_.__value_.__r.__words[0];
  v25[0] = v14->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a5 + 23) < 0)
    operator delete(*(void **)a5);
  *(_QWORD *)a5 = v15;
  *(_QWORD *)(a5 + 8) = v25[0];
  *(_QWORD *)(a5 + 15) = *(_QWORD *)((char *)v25 + 7);
  *(_BYTE *)(a5 + 23) = v16;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
LABEL_12:
  memset(&v23, 0, sizeof(v23));
  v17 = *(unsigned __int8 *)(a5 + 23);
  if ((v17 & 0x80u) == 0)
    v18 = (std::string *)a5;
  else
    v18 = *(std::string **)a5;
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a5 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&v23, v18, (std::string *)((char *)v18 + v17));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v23, (uint64_t)a4, (std::__fs::filesystem::path *)&v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v22 = v24;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v21 = *(std::string *)a3;
  v20 = 0;
  LOBYTE(__p) = 0;
  Espresso::MILUtil::SerializeProgram(a2, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)&__p, 0x100000004, 0);
  if (v20 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
LABEL_33:
      operator delete(v22.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
LABEL_35:
        operator delete(v23.__r_.__value_.__l.__data_);
        return;
      }
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_33;
LABEL_28:
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_34:
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_35;
}

void sub_191078C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a40 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a29);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a40 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a35);
  if ((a34 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t *std::tuple<std::unique_ptr<MIL::IRProgram>,std::vector<std::string>,std::vector<std::string>>::~tuple(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v5 = a1[1];
  if (v5)
  {
    v6 = a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  v8 = *a1;
  *a1 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t *std::pair<std::unique_ptr<MIL::IRProgram>,std::vector<std::string>>::~pair(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void Espresso::AOT::MILCompilerForE5::GetOutputPaths(Espresso::AOT::MILCompilerForE5 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t OutputBundlePath;
  __int128 v4;
  std::string __p;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::MILCompilerForE5 *)((char *)this + 264));
  if (*(char *)(OutputBundlePath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)OutputBundlePath, *(_QWORD *)(OutputBundlePath + 8));
  }
  else
  {
    v4 = *(_OWORD *)OutputBundlePath;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputBundlePath + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191078F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForE5::~MILCompilerForE5(Espresso::AOT::MILCompilerForE5 *this)
{
  Espresso::AOT::MILCompilerForE5::~MILCompilerForE5(this);
  JUMPOUT(0x19401CD90);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)this = &off_1E2DA0470;
  v2 = (_QWORD *)*((_QWORD *)this + 101);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 96);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v7)
    operator delete(v7);
  v8 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::MILCompilerForE5 *)((char *)this + 608));
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::MILCompilerForE5 *)((char *)this + 264));
  *(_QWORD *)this = off_1E2DA0650;
  v9 = *((_QWORD *)this + 29);
  if (v9)
  {
    v10 = *((_QWORD *)this + 30);
    v11 = (void *)*((_QWORD *)this + 29);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0)
          operator delete(*(void **)(v10 - 24));
        v10 -= 24;
      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v9;
    operator delete(v11);
  }
  if (*((char *)this + 231) < 0)
  {
    operator delete(*((void **)this + 26));
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_21;
LABEL_24:
    operator delete(*((void **)this + 23));
    Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
    return;
  }
  if (*((char *)this + 207) < 0)
    goto LABEL_24;
LABEL_21:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
}

_QWORD *std::vector<std::shared_ptr<MIL::IRValue const>>::vector[abi:ne180100](_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_19107904C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

MIL::IRListValue **std::unique_ptr<MIL::IRListValue const>::~unique_ptr[abi:ne180100](MIL::IRListValue **a1)
{
  MIL::IRListValue *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::IRListValue::~IRListValue(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRListValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

MIL::IRListValue *std::__shared_ptr_pointer<MIL::IRListValue const *>::__on_zero_shared(uint64_t a1)
{
  MIL::IRListValue *result;

  result = *(MIL::IRListValue **)(a1 + 24);
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRListValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A86908)
    return a1 + 24;
  if (((v3 & 0x8000000191A86908 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A86908))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A86908 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t `anonymous namespace'::CheckForDataDependentShape(BOOL,std::shared_ptr<MIL::IRProgram> const&,std::vector<std::string> const&)::$_0::operator()(_QWORD *a1, MIL::IRValueType *a2)
{
  const MIL::IRValueType *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  const MIL::IRValueType *v10;
  MIL::IRMemoryLayoutValueType *v11;
  MIL::IRTensorBufferValueType *v12;
  MIL::IRMemoryLayoutValueType *v13;
  MIL::IRPixelBufferValueType *v14;
  char *v15;
  char *v16;
  std::logic_error *exception;

  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    v5 = MIL::IRValueType::AsTensorType(a2);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    v8 = *(const void **)result;
    v7 = *(_QWORD *)(result + 8);
    v9 = v7 - *(_QWORD *)result;
    if (v7 == *(_QWORD *)result)
      return result;
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    goto LABEL_12;
  }
  if (E5Common::Utils::IsTensorBuffer(a2, v4))
  {
    v11 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    v12 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v11);
    result = MIL::IRTensorBufferValueType::GetShape(v12);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    v8 = *(const void **)result;
    v7 = *(_QWORD *)(result + 8);
    v9 = v7 - *(_QWORD *)result;
    if (v7 == *(_QWORD *)result)
      return result;
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    goto LABEL_12;
  }
  if (!E5Common::Utils::IsPixelBuffer(a2, v10))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "MILCompilerForE5 - CheckForDataDependentShape(): Unsupported type for getShape.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v13 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  v14 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v13);
  result = MIL::IRPixelBufferValueType::GetShape(v14);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v8 = *(const void **)result;
  v7 = *(_QWORD *)(result + 8);
  v9 = v7 - *(_QWORD *)result;
  if (v7 != *(_QWORD *)result)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
LABEL_12:
    v15 = (char *)operator new(v7 - *(_QWORD *)result);
    *a1 = v15;
    a1[1] = v15;
    v16 = &v15[8 * (v9 >> 3)];
    a1[2] = v16;
    result = (uint64_t)memcpy(v15, v8, v9);
    a1[1] = v16;
  }
  return result;
}

void sub_1910792E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910792FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(int a1, char *__p)
{
  char *v2;
  char *v3;
  void **v4;
  void *v5;
  void **v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)*((_QWORD *)v2 + 7);
      if (v4)
      {
        do
        {
          v6 = (void **)*v4;
          if (*((char *)v4 + 39) < 0)
            operator delete(v4[2]);
          operator delete(v4);
          v4 = v6;
        }
        while (v6);
      }
      v5 = (void *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v5)
        operator delete(v5);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,false>(unsigned int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int *v73;
  _DWORD *v74;
  char *v75;
  BOOL v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;

  v9 = result;
LABEL_2:
  v10 = (unsigned int *)(a2 - 4);
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = a2 - (char *)v11;
    v13 = (a2 - (char *)v11) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v64 = *v11;
        if (*v10 < *v11)
        {
          *v11 = *v10;
          *v10 = v64;
        }
        return result;
      case 3uLL:
        v65 = *v11;
        v66 = v11[1];
        v67 = *v10;
        if (v66 >= *v11)
        {
          if (v67 < v66)
          {
            v11[1] = v67;
            *v10 = v66;
            v85 = *v11;
            v84 = v11[1];
            if (v84 < *v11)
            {
              *v11 = v84;
              v11[1] = v85;
            }
          }
        }
        else
        {
          if (v67 >= v66)
          {
            *v11 = v66;
            v11[1] = v65;
            if (*v10 >= v65)
              return result;
            v11[1] = *v10;
          }
          else
          {
            *v11 = v67;
          }
          *v10 = v65;
        }
        return result;
      case 4uLL:
        v68 = v11 + 1;
        v69 = (unsigned int *)v11[1];
        v70 = v11 + 2;
        v71 = v11[2];
        v72 = (unsigned int *)*v11;
        if (v69 >= v72)
        {
          if (v71 >= v69)
          {
LABEL_139:
            LODWORD(v69) = v71;
            v86 = *v10;
            if (*v10 >= v69)
              return result;
LABEL_140:
            *v70 = v86;
            *v10 = v69;
            v89 = *v70;
            v90 = *v68;
            if (v89 < v90)
            {
              v11[1] = v89;
              v11[2] = v90;
              v91 = *v11;
              if (v89 < *v11)
              {
                *v11 = v89;
                v11[1] = v91;
              }
            }
            return result;
          }
          *v68 = v71;
          *v70 = v69;
          v73 = v11;
          v74 = v11 + 1;
          result = v69;
          if (v71 >= v72)
          {
LABEL_131:
            v86 = *v10;
            if (*v10 >= v69)
              return result;
            goto LABEL_140;
          }
        }
        else
        {
          v73 = v11;
          v74 = v11 + 2;
          result = (unsigned int *)*v11;
          if (v71 >= v69)
          {
            *v11 = v69;
            v11[1] = v72;
            v73 = v11 + 1;
            v74 = v11 + 2;
            result = v72;
            if (v71 >= v72)
              goto LABEL_139;
          }
        }
        *v73 = v71;
        *v74 = (_DWORD)v72;
        LODWORD(v69) = (_DWORD)result;
        goto LABEL_131;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(v11, v11 + 1, v11 + 2, v11 + 3, (unsigned int *)a2 - 1);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != (unsigned int *)a2)
              return (unsigned int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,Espresso::AOT::BackendIdentifier *>((char *)v11, a2, a2);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v11[v13 >> 1];
          v16 = *v10;
          if ((unint64_t)v12 < 0x201)
          {
            v19 = *v11;
            v20 = *v15;
            if (*v11 >= *v15)
            {
              if (v16 < v19)
              {
                *v11 = v16;
                *v10 = v19;
                v22 = *v15;
                if (*v11 < *v15)
                {
                  *v15 = *v11;
                  *v11 = v22;
                  --a4;
                  v23 = v22;
                  v24 = v11;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v16 < v19)
              {
                *v15 = v16;
                goto LABEL_31;
              }
              *v15 = v19;
              *v11 = v20;
              if (*v10 < v20)
              {
                *v11 = *v10;
LABEL_31:
                *v10 = v20;
              }
            }
            --a4;
            v23 = *v11;
            v24 = v11;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v17 = *v15;
          v18 = *v11;
          if (*v15 >= *v11)
          {
            if (v16 < v17)
            {
              *v15 = v16;
              *v10 = v17;
              v21 = *v11;
              if (*v15 < *v11)
              {
                *v11 = *v15;
                *v15 = v21;
              }
            }
          }
          else
          {
            if (v16 >= v17)
            {
              *v11 = v17;
              *v15 = v18;
              if (*v10 >= v18)
                goto LABEL_23;
              *v15 = *v10;
            }
            else
            {
              *v11 = v16;
            }
            *v10 = v18;
          }
LABEL_23:
          v25 = &v11[v14];
          v26 = v25 - 1;
          v27 = *(v25 - 1);
          v28 = v11[1];
          v29 = *((_DWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v27)
            {
              *v26 = v29;
              *((_DWORD *)a2 - 2) = v27;
              v30 = v11[1];
              if (*v26 < v30)
              {
                v11[1] = *v26;
                *v26 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v27)
            {
              v11[1] = v27;
              *v26 = v28;
              v31 = *((_DWORD *)a2 - 2);
              if (v31 >= v28)
                goto LABEL_37;
              *v26 = v31;
            }
            else
            {
              v11[1] = v29;
            }
            *((_DWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v34 = v25[1];
          v32 = v25 + 1;
          v33 = v34;
          v35 = v11[2];
          v36 = *((_DWORD *)a2 - 3);
          if (v34 >= v35)
          {
            if (v36 < v33)
            {
              *v32 = v36;
              *((_DWORD *)a2 - 3) = v33;
              v37 = v11[2];
              if (*v32 < v37)
              {
                v11[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v11[2] = v33;
              *v32 = v35;
              v38 = *((_DWORD *)a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v11[2] = v36;
            }
            *((_DWORD *)a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v15;
          v40 = *v26;
          v41 = *v32;
          if (*v15 < *v26)
          {
            if (v41 >= v39)
            {
              *v26 = v39;
              *v15 = v40;
              v26 = v15;
              v39 = v41;
              if (v41 >= v40)
              {
                v39 = v40;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v26 = v41;
            *v32 = v40;
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_53;
          *v15 = v41;
          *v32 = v39;
          v32 = v15;
          v39 = v40;
          if (v41 < v40)
            goto LABEL_52;
          v39 = v41;
LABEL_53:
          v42 = *v11;
          *v11 = v39;
          *v15 = v42;
          --a4;
          v23 = *v11;
          v24 = v11;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          v24 = v11;
          if (*(v11 - 1) >= v23)
          {
            if (v23 >= *v10)
            {
              v56 = v11 + 1;
              do
              {
                v11 = v56;
                if (v56 >= (unsigned int *)a2)
                  break;
                ++v56;
              }
              while (v23 >= *v11);
            }
            else
            {
              do
              {
                v55 = v11[1];
                ++v11;
              }
              while (v23 >= v55);
            }
            v57 = (unsigned int *)a2;
            if (v11 < (unsigned int *)a2)
            {
              v57 = (unsigned int *)a2;
              do
                v58 = *--v57;
              while (v23 < v58);
            }
            if (v11 < v57)
            {
              v59 = *v11;
              v60 = *v57;
              do
              {
                *v11 = v60;
                *v57 = v59;
                do
                {
                  v61 = v11[1];
                  ++v11;
                  v59 = v61;
                }
                while (v23 >= v61);
                do
                {
                  v62 = *--v57;
                  v60 = v62;
                }
                while (v23 < v62);
              }
              while (v11 < v57);
            }
            v63 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v63;
            a5 = 0;
            *v63 = v23;
            continue;
          }
          do
          {
LABEL_55:
            v43 = v24;
            v45 = v24[1];
            ++v24;
            v44 = v45;
          }
          while (v45 < v23);
          v46 = a2;
          if (v43 == v11)
          {
            v46 = a2;
            do
            {
              if (v24 >= (unsigned int *)v46)
                break;
              v48 = *((_DWORD *)v46 - 1);
              v46 -= 4;
            }
            while (v48 >= v23);
          }
          else
          {
            do
            {
              v47 = *((_DWORD *)v46 - 1);
              v46 -= 4;
            }
            while (v47 >= v23);
          }
          if (v24 < (unsigned int *)v46)
          {
            v49 = *(_DWORD *)v46;
            v50 = v24;
            v51 = (unsigned int *)v46;
            do
            {
              *v50 = v49;
              *v51 = v44;
              do
              {
                v43 = v50;
                v52 = v50[1];
                ++v50;
                v44 = v52;
              }
              while (v52 < v23);
              do
              {
                v53 = *--v51;
                v49 = v53;
              }
              while (v53 >= v23);
            }
            while (v50 < v51);
          }
          if (v43 != v11)
            *v11 = *v43;
          *v43 = v23;
          if (v24 < (unsigned int *)v46)
            goto LABEL_73;
          v54 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(v11, v43);
          v11 = v43 + 1;
          result = (unsigned int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(v43 + 1, (unsigned int *)a2);
          if (!(_DWORD)result)
          {
            if (v54)
              continue;
LABEL_73:
            result = (unsigned int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,false>(v9, v43, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v43 + 1;
            continue;
          }
          a2 = (char *)v43;
          if (v54)
            return result;
          goto LABEL_2;
        }
        v75 = (char *)(v11 + 1);
        v77 = v11 == (unsigned int *)a2 || v75 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v77)
          {
            v78 = 0;
            v79 = v11;
            do
            {
              v81 = *(_DWORD *)v75;
              v82 = *v79;
              if (*(_DWORD *)v75 < *v79)
              {
                v83 = 0;
                do
                {
                  *(_DWORD *)&v75[v83] = v82;
                  if (v78 == v83)
                  {
                    v80 = v11;
                    goto LABEL_116;
                  }
                  v82 = v79[v83 / 4 - 1];
                  v83 -= 4;
                }
                while (v81 < v82);
                v80 = (unsigned int *)&v75[v83];
LABEL_116:
                *v80 = v81;
              }
              v75 += 4;
              ++v79;
              v78 -= 4;
            }
            while (v75 != a2);
          }
        }
        else if (!v77)
        {
          do
          {
            v88 = *v9;
            v87 = v9[1];
            v9 = (unsigned int *)v75;
            if (v87 < v88)
            {
              do
              {
                *(_DWORD *)v75 = v88;
                v88 = *((_DWORD *)v75 - 2);
                v75 -= 4;
              }
              while (v87 < v88);
              *(_DWORD *)v75 = v87;
            }
            v75 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unsigned int *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  int v23;
  uint64_t i;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 12; ; i += 4)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v27) = v26;
        v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unsigned int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(unsigned int *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

unsigned int *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= v7)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    v8 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v8;
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= *a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (*a3 >= v6)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v7;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v9 = *a4;
  if (*a4 >= v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    v11 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        v15 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,Espresso::AOT::BackendIdentifier *>(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  int64_t v23;
  char *v24;
  int v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  unsigned int v33;
  int64_t v35;
  _DWORD *v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  BOOL v41;
  char *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 2;
  if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
  {
    v35 = (unint64_t)(v4 - 2) >> 1;
    v36 = a1 + 4;
    v37 = v35;
    do
    {
      if (v35 >= v37)
      {
        v38 = (2 * v37) | 1;
        v39 = (char *)&v36[2 * v37];
        if (2 * v37 + 2 >= v4)
        {
          v40 = *(_DWORD *)v39;
          v42 = &a1[4 * v37];
          v43 = *(_DWORD *)v42;
          if (*(_DWORD *)v39 >= *(_DWORD *)v42)
            goto LABEL_78;
        }
        else
        {
          v40 = *((_DWORD *)v39 + 1);
          v41 = *(_DWORD *)v39 >= v40;
          if (*(_DWORD *)v39 > v40)
            v40 = *(_DWORD *)v39;
          if (!v41)
          {
            v39 += 4;
            v38 = 2 * v37 + 2;
          }
          v42 = &a1[4 * v37];
          v43 = *(_DWORD *)v42;
          if (v40 >= *(_DWORD *)v42)
          {
LABEL_78:
            while (1)
            {
              *(_DWORD *)v42 = v40;
              v42 = v39;
              if (v35 < v38)
                break;
              v45 = (2 * v38) | 1;
              v39 = (char *)&v36[2 * v38];
              v38 = 2 * v38 + 2;
              if (v38 < v4)
              {
                v40 = *(_DWORD *)v39;
                v44 = *((_DWORD *)v39 + 1);
                if (*(_DWORD *)v39 <= v44)
                  v40 = *((_DWORD *)v39 + 1);
                if (*(_DWORD *)v39 >= v44)
                  v38 = v45;
                else
                  v39 += 4;
                if (v40 < v43)
                  break;
              }
              else
              {
                v40 = *(_DWORD *)v39;
                v38 = v45;
                if (*(_DWORD *)v39 < v43)
                  break;
              }
            }
            *(_DWORD *)v42 = v43;
          }
        }
      }
      v20 = v37-- <= 0;
    }
    while (!v20);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      v6 = *(_DWORD *)a1;
      v7 = a2;
      do
      {
        v8 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 < v6)
        {
          *(_DWORD *)v7 = v6;
          *(_DWORD *)a1 = v8;
          v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != a3);
LABEL_37:
      v5 = a3;
      goto LABEL_38;
    }
    v9 = a2;
    while (1)
    {
      v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 < *(_DWORD *)a1)
      {
        *(_DWORD *)v9 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v10;
        v11 = *((_DWORD *)a1 + 1);
        if (v3 == 8)
        {
          v12 = a1 + 4;
          v13 = 1;
          if (v11 >= v10)
            goto LABEL_26;
        }
        else
        {
          v14 = *((_DWORD *)a1 + 2);
          v15 = v11 >= v14;
          if (v11 <= v14)
            v11 = *((_DWORD *)a1 + 2);
          if (v15)
            v12 = a1 + 4;
          else
            v12 = a1 + 8;
          if (v15)
            v13 = 1;
          else
            v13 = 2;
          if (v11 >= v10)
          {
LABEL_26:
            v16 = a1;
            while (1)
            {
              *(_DWORD *)v16 = v11;
              v16 = v12;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13)
                break;
              v18 = (2 * v13) | 1;
              v12 = &a1[8 * v13 + 4];
              v13 = 2 * v13 + 2;
              if (v13 < v4)
              {
                v11 = *(_DWORD *)v12;
                v17 = *((_DWORD *)v12 + 1);
                if (*(_DWORD *)v12 <= v17)
                  v11 = *((_DWORD *)v12 + 1);
                if (*(_DWORD *)v12 >= v17)
                  v13 = v18;
                else
                  v12 += 4;
                if (v11 < v10)
                  break;
              }
              else
              {
                v11 = *(_DWORD *)v12;
                v13 = v18;
                if (*(_DWORD *)v12 < v10)
                  break;
              }
            }
            *(_DWORD *)v16 = v10;
          }
        }
      }
      v9 += 4;
      if (v9 == a3)
        goto LABEL_37;
    }
  }
LABEL_38:
  if (v3 >= 5)
  {
    v19 = (unint64_t)v3 >> 2;
    do
    {
      v21 = 0;
      v22 = *(_DWORD *)a1;
      v23 = (unint64_t)(v19 - 2) >> 1;
      v24 = a1;
      do
      {
        while (1)
        {
          v27 = &v24[4 * v21 + 4];
          v28 = (2 * v21) | 1;
          v21 = 2 * v21 + 2;
          if (v21 < v19)
            break;
          v21 = v28;
          *(_DWORD *)v24 = *(_DWORD *)v27;
          v24 = v27;
          if (v28 > v23)
            goto LABEL_51;
        }
        v25 = *(_DWORD *)v27;
        v26 = *((_DWORD *)v27 + 1);
        if (*(_DWORD *)v27 <= v26)
          v25 = *((_DWORD *)v27 + 1);
        if (*(_DWORD *)v27 >= v26)
          v21 = v28;
        else
          v27 += 4;
        *(_DWORD *)v24 = v25;
        v24 = v27;
      }
      while (v21 <= v23);
LABEL_51:
      a2 -= 4;
      if (v27 == a2)
      {
        *(_DWORD *)v27 = v22;
      }
      else
      {
        *(_DWORD *)v27 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v22;
        v29 = v27 - a1 + 4;
        if (v29 >= 5)
        {
          v30 = (((unint64_t)v29 >> 2) - 2) >> 1;
          v31 = &a1[4 * v30];
          v32 = *(_DWORD *)v31;
          v33 = *(_DWORD *)v27;
          if (*(_DWORD *)v31 < *(_DWORD *)v27)
          {
            do
            {
              *(_DWORD *)v27 = v32;
              v27 = v31;
              if (!v30)
                break;
              v30 = (v30 - 1) >> 1;
              v31 = &a1[4 * v30];
              v32 = *(_DWORD *)v31;
            }
            while (*(_DWORD *)v31 < v33);
            *(_DWORD *)v27 = v33;
          }
        }
      }
      v20 = v19-- <= 2;
    }
    while (!v20);
  }
  return v5;
}

uint64_t *std::__hash_table<Espresso::AOT::BackendIdentifier,std::hash<Espresso::AOT::BackendIdentifier>,std::equal_to<Espresso::AOT::BackendIdentifier>,std::allocator<Espresso::AOT::BackendIdentifier>>::__emplace_unique_key_args<Espresso::AOT::BackendIdentifier,Espresso::AOT::BackendIdentifier const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19107A6C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Espresso::AOT::AbstractValidator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<Espresso::AOT::AbstractValidator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<Espresso::AOT::AbstractValidator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A869A7)
    return a1 + 24;
  if (((v3 & 0x8000000191A869A7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A869A7))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A869A7 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<Espresso::AOT::ConstCostEstimator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE8B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::AOT::ConstCostEstimator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE8B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::AOT::ConstCostEstimator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::AOT::EstimatorMILDecisionTree>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE8F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::AOT::EstimatorMILDecisionTree>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE8F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::AOT::EstimatorMILDecisionTree>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::AOT::EvaluatorClassic>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::AOT::EvaluatorClassic>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DBE880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::AOT::EvaluatorClassic>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::AOT::MILSegmenterOptions::MILSegmenterOptions(uint64_t a1, char a2, __int128 *a3, char a4, char a5, uint64_t a6, char a7)
{
  __int128 v12;

  *(_BYTE *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 57) = a5;
  *(_BYTE *)(a1 + 58) = a7;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  if (a6 && a1 + 64 != a6)
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *> *>>((_QWORD *)(a1 + 64), *(char **)(a6 + 16), 0);
  }
  return a1;
}

void sub_19107A964(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *> *>>(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v6;
  uint64_t i;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void *v12;
  void **v13;

  v6 = a1[1];
  if (!v6)
    goto LABEL_11;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 16));
      if (v8 != a2)
      {
        *((_DWORD *)v8 + 18) = *((_DWORD *)a2 + 18);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)v8 + 5, *((uint64_t **)a2 + 7), 0);
      }
      v9 = *(char **)v8;
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = *(char **)a2;
      v8 = v9;
      if (!v9)
        goto LABEL_11;
    }
    do
    {
      v10 = *(char **)v8;
      v11 = (void **)*((_QWORD *)v8 + 7);
      if (v11)
      {
        do
        {
          v13 = (void **)*v11;
          if (*((char *)v11 + 39) < 0)
            operator delete(v11[2]);
          operator delete(v11);
          v11 = v13;
        }
        while (v13);
      }
      v12 = (void *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = 0;
      if (v12)
        operator delete(v12);
      if (v8[39] < 0)
        operator delete(*((void **)v8 + 2));
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>> const&>(a1, (uint64_t)(a2 + 16));
      a2 = *(char **)a2;
    }
  }
}

void sub_19107AAEC(void *a1)
{
  char *v1;
  int v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(v2, v1);
  __cxa_rethrow();
}

void sub_19107AB08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *inserted;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  char v16;

  v4 = (_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  v11 = (int8x8_t)a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v11)
      v12 %= *(_QWORD *)&v11;
  }
  else
  {
    v12 &= *(_QWORD *)&v11 - 1;
  }
  if (!inserted)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_25;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
LABEL_24:
    *(_QWORD *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(_QWORD *)a2 = *inserted;
  *inserted = a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
    if (v14 != v12)
      goto LABEL_24;
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node<std::pair<std::string const,std::unordered_set<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v4);
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__node_insert_multi(a1, v4[0]);
}

void sub_19107ACAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>> const&>((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node<std::pair<std::string const,std::unordered_set<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t result;
  char v13;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x50uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = (uint64_t *)(v6 + 16);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 4) = *(_QWORD *)(a2 + 16);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)(v7 + 40), a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  v9 = v7[39];
  if (v9 >= 0)
    v10 = v8;
  else
    v10 = (uint64_t *)*((_QWORD *)v7 + 2);
  if (v9 >= 0)
    v11 = v7[39];
  else
    v11 = *((_QWORD *)v7 + 3);
  result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v13, v10, v11);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_19107AD7C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_19107AD98(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void *v4;
  void **v5;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
      goto LABEL_7;
    v3 = *(void ***)(v2 + 56);
    if (v3)
    {
      do
      {
        v5 = (void **)*v3;
        if (*((char *)v3 + 39) < 0)
          operator delete(v3[2]);
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v4)
      operator delete(v4);
    if (*(char *)(v2 + 39) < 0)
    {
      operator delete(*(void **)(v2 + 16));
      operator delete((void *)v2);
    }
    else
    {
LABEL_7:
      operator delete((void *)v2);
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unordered_set<std::string>&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  char *v29;
  char *v30;
  float v31;
  float v32;
  _QWORD *v33;
  _QWORD *v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  int8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v46[2];
  char v47;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = (char *)operator new(0x50uLL);
  v30 = v29;
  v46[0] = v29;
  v46[1] = a1 + 16;
  v47 = 0;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = v12;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v29 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v29 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v29 + 4) = *(_QWORD *)(a3 + 16);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)(v30 + 40), a4);
  v47 = 1;
  v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v32 = *(float *)(a1 + 32);
  if (!v13 || (float)(v32 * (float)v13) < v31)
  {
    v35 = 1;
    if (v13 >= 3)
      v35 = (v13 & (v13 - 1)) != 0;
    v36 = v35 | (2 * v13);
    v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37)
      prime = v37;
    else
      prime = v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v39)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v39)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v39 < 3uLL || (v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < *(_QWORD *)&v39)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v43 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        v34 = (_QWORD *)v46[0];
        if (v33)
          goto LABEL_57;
      }
      else
      {
        v4 = v12;
        v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        v34 = (_QWORD *)v46[0];
        if (v33)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v43 & v12;
      v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v12));
      v34 = (_QWORD *)v46[0];
      if (v33)
        goto LABEL_57;
    }
LABEL_81:
    *v34 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v46[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v46[0])
    {
      v44 = *(_QWORD *)(*(_QWORD *)v46[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v44 >= v13)
          v44 %= v13;
      }
      else
      {
        v44 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v46[0];
    }
    goto LABEL_92;
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v34 = (_QWORD *)v46[0];
  if (!v33)
    goto LABEL_81;
LABEL_57:
  *v34 = *v33;
  *v33 = v46[0];
LABEL_92:
  v16 = (uint64_t *)v46[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_19107B2C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_19107B2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_19107B2F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8CD58)
    return a1 + 24;
  if (((v3 & 0x8000000191A8CD58 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8CD58))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8CD58 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void OUTLINED_FUNCTION_0_1(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

_BYTE *OUTLINED_FUNCTION_1(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_3(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  return result;
}

void Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation(uint64_t *a1)
{
  _QWORD *v1;
  void **v2;
  void *v3;
  void *v4;

  v3 = (void *)OUTLINED_FUNCTION_3(a1);
  if (v3)
    operator delete(v3);
  v4 = *v2;
  if (*v2)
  {
    *v1 = v4;
    operator delete(v4);
  }
  OUTLINED_FUNCTION_2();
}

void Espresso::AOT::MILCompilerForE5::Run(_BYTE *a1, _BYTE *a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_1(a1, a2);
  OUTLINED_FUNCTION_0_1(&dword_190DAF000, v2, v3, "Memory allocation completed", v4);
}

{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_1(a1, a2);
  OUTLINED_FUNCTION_0_1(&dword_190DAF000, v2, v3, "Lowering to E5RT opset completed", v4);
}

{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_1(a1, a2);
  OUTLINED_FUNCTION_0_1(&dword_190DAF000, v2, v3, "Segmenter completed", v4);
}

void Espresso::AOT::MILCompilerForE5::Run(uint64_t **a1)
{
  uint64_t *v2;

  do
  {
    v2 = *a1;
    if (*((char *)a1 + 39) < 0)
      OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_50();
    a1 = (uint64_t **)v2;
  }
  while (v2);
  OUTLINED_FUNCTION_2();
}

void Espresso::AOT::MILCompilerForE5::Run(uint8_t *buf, uint64_t *a2, _QWORD *a3, os_log_t log)
{
  uint64_t *v4;

  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  *(_DWORD *)buf = 136315138;
  *a3 = v4;
  _os_log_debug_impl(&dword_190DAF000, log, OS_LOG_TYPE_DEBUG, "Compile for platform %s", buf, 0xCu);
}

void Espresso::AOT::MILCompilerForE5::Run(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t *v3;
  int v4;
  int v5;
  uint64_t *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = *(_DWORD *)(a2 + 4);
  v5 = 136315394;
  v6 = v3;
  v7 = 1024;
  v8 = v4;
  _os_log_debug_impl(&dword_190DAF000, log, OS_LOG_TYPE_DEBUG, "MILCompilerForE5: Run(): Created E5 output dir @ %s. Permissions (octal) = 0%o", (uint8_t *)&v5, 0x12u);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>> const&>(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void *v5;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(void ***)(a2 + 56);
    if (v3)
    {
      do
      {
        v4 = (void **)*v3;
        if (*((char *)v3 + 39) < 0)
          operator delete(v3[2]);
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    if (v5)
      operator delete(v5);
    if (*(char *)(a2 + 39) < 0)
      OUTLINED_FUNCTION_5();
  }
  OUTLINED_FUNCTION_50();
}

uint64_t Espresso::AOT::EstimateTransferCostBetweenBackends@<X0>(unsigned __int8 *a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t **v3;
  signed __int8 v5;
  size_t v6;
  size_t v7;
  int v8;
  uint64_t *v9;
  double v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t result;

  v3 = a2;
  v5 = a1[23];
  v6 = *((_QWORD *)a1 + 1);
  if (v5 >= 0)
    v7 = a1[23];
  else
    v7 = *((_QWORD *)a1 + 1);
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  if ((uint64_t *)v7 == v9)
  {
    if (v8 < 0)
      a2 = (uint64_t **)*a2;
    if ((a1[23] & 0x80) != 0)
    {
      v13 = *(_BYTE **)a1;
      if (!memcmp(*(const void **)a1, a2, v6))
      {
        v10 = 0.0;
        goto LABEL_36;
      }
      goto LABEL_20;
    }
    v10 = 0.0;
    if (!a1[23])
      goto LABEL_36;
    v11 = a1;
    v12 = a1[23];
    while (*v11 == *(unsigned __int8 *)a2)
    {
      ++v11;
      a2 = (uint64_t **)((char *)a2 + 1);
      if (!--v12)
        goto LABEL_36;
    }
  }
  if (v5 >= 0)
    v13 = a1;
  else
    v13 = *(_BYTE **)a1;
  v6 = v7;
LABEL_20:
  if (v6 == 9 && *(_QWORD *)v13 == 0x706172675F73706DLL && v13[8] == 104)
    goto LABEL_33;
  v10 = 0.125;
  if (v9 == (uint64_t *)9)
  {
    v15 = *v3;
    if (v8 >= 0)
      v15 = (uint64_t *)v3;
    v16 = *v15;
    v17 = *((unsigned __int8 *)v15 + 8);
    if (v16 == 0x706172675F73706DLL && v17 == 104)
LABEL_33:
      v10 = 0.25;
  }
LABEL_36:
  v19 = operator new();
  result = Espresso::AOT::CostEstimate::CostEstimate(v19, v10);
  *a3 = v19;
  return result;
}

void sub_19107B7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::EstimateLaunchCostForBackend@<X0>(unsigned __int16 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  int v4;
  double v5;
  unsigned __int16 *v6;
  BOOL v8;
  double v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t result;

  v3 = *((unsigned __int8 *)a1 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a1 + 1);
  if (v3 == 9)
  {
    if (v4 >= 0)
      v10 = a1;
    else
      v10 = *(unsigned __int16 **)a1;
    v8 = (*(_QWORD *)v10 ^ 0x706172675F73706DLL | *((unsigned __int8 *)v10 + 8) ^ 0x68) == 0;
    v9 = 0.25;
  }
  else
  {
    v5 = 0.0;
    if (v3 != 3)
      goto LABEL_20;
    if (v4 >= 0)
      v6 = a1;
    else
      v6 = *(unsigned __int16 **)a1;
    if (*v6 == 28257 && *((_BYTE *)v6 + 2) == 101)
    {
      v5 = 0.125;
      goto LABEL_20;
    }
    v8 = (*v6 ^ 0x6C6D | *((unsigned __int8 *)v6 + 2) ^ 0x63) == 0;
    v9 = 0.100000001;
  }
  if (v8)
    v5 = v9;
  else
    v5 = 0.0;
LABEL_20:
  v11 = operator new();
  result = Espresso::AOT::CostEstimate::CostEstimate(v11, v5);
  *a2 = v11;
  return result;
}

void sub_19107B8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::EstimateEndCostForBackend@<X0>(unsigned __int16 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  int v4;
  double v5;
  unsigned __int16 *v6;
  BOOL v7;
  double v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t result;

  v3 = *((unsigned __int8 *)a1 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a1 + 1);
  if (v3 == 3)
  {
    if (v4 >= 0)
      v9 = a1;
    else
      v9 = *(unsigned __int16 **)a1;
    v7 = (*v9 ^ 0x6E61 | *((unsigned __int8 *)v9 + 2) ^ 0x65) == 0;
    v8 = 0.125;
  }
  else
  {
    v5 = 0.0;
    if (v3 != 9)
      goto LABEL_16;
    if (v4 >= 0)
      v6 = a1;
    else
      v6 = *(unsigned __int16 **)a1;
    v7 = (*(_QWORD *)v6 ^ 0x706172675F73706DLL | *((unsigned __int8 *)v6 + 8) ^ 0x68) == 0;
    v8 = 0.25;
  }
  if (v7)
    v5 = v8;
  else
    v5 = 0.0;
LABEL_16:
  v10 = operator new();
  result = Espresso::AOT::CostEstimate::CostEstimate(v10, v5);
  *a2 = v10;
  return result;
}

void sub_19107B9F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::GetNumElementsSkipUnknownDims(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  uint64_t v3;
  uint64_t v4;
  MIL::IRDimension **v5;
  MIL::IRDimension **v6;
  uint64_t v7;
  MIL::IRDimension *v8;
  uint64_t v9;

  if (!(*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2))
    return 1;
  v3 = MIL::IRValueType::AsTensorType(this);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
  v5 = *(MIL::IRDimension ***)v4;
  v6 = *(MIL::IRDimension ***)(v4 + 8);
  v7 = 1;
  while (v5 != v6)
  {
    v8 = *v5;
    if ((*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)*v5 + 16))(*v5))
    {
      v9 = MIL::IRDimension::AsConstant(v8);
      v7 *= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    }
    ++v5;
  }
  return v7;
}

double Espresso::AOT::GetSizeInMbForShape(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  uint64_t v3;
  uint64_t v4;
  MIL::IRDimension **v5;
  MIL::IRDimension **v6;
  uint64_t v7;
  MIL::IRDimension *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2))
  {
    v3 = MIL::IRValueType::AsTensorType(this);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    v5 = *(MIL::IRDimension ***)v4;
    v6 = *(MIL::IRDimension ***)(v4 + 8);
    v7 = 1;
    while (v5 != v6)
    {
      v8 = *v5;
      if ((*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)*v5 + 16))(*v5))
      {
        v9 = MIL::IRDimension::AsConstant(v8);
        v7 *= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      }
      ++v5;
    }
  }
  else
  {
    v7 = 1;
  }
  v10 = MIL::IRValueType::AsTensorType(this);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  return (double)(unint64_t)(Espresso::AOT::IRDataTypeToByteSize(v11) * v7) * 0.000000953674316;
}

double Espresso::AOT::GetSizeInMbForDims(char **a1, int a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    v4 = v2 - v3 - 8;
    if (v4 >= 8)
    {
      v8 = (v4 >> 3) + 1;
      v6 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
      v9 = v3 + 8;
      v10 = 1;
      v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      v5 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_9;
    }
    else
    {
      v5 = 1;
      v6 = *a1;
    }
    do
    {
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v2);
LABEL_9:
    v7 = (double)v5 * 0.000000953674316;
    return v7 * (double)(unint64_t)Espresso::AOT::IRDataTypeToByteSize(a2);
  }
  v7 = 0.000000953674316;
  return v7 * (double)(unint64_t)Espresso::AOT::IRDataTypeToByteSize(a2);
}

double Espresso::AOT::GetNumberOfElementsFromShapeValue(Espresso::AOT *this, const MIL::IRValue *a2)
{
  double v3;
  uint64_t Data;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  __int128 v20;
  int64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int v26;

  v3 = 1.0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValue *))(*(_QWORD *)this + 40))(this, a2))
  {
    (*(void (**)(Espresso::AOT *))(*(_QWORD *)this + 40))(this);
    Data = MIL::IRTensorValue::GetDataView<int>();
    if (v5)
    {
      v6 = (v5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v6 < 7)
      {
        v7 = (int *)Data;
        do
        {
LABEL_8:
          v26 = *v7++;
          v3 = v3 * (double)v26;
        }
        while (v7 != (int *)(Data + 4 * v5));
        return v3;
      }
      v8 = v6 + 1;
      v9 = (v6 + 1) & 0x7FFFFFFFFFFFFFF8;
      v7 = (int *)(Data + 4 * v9);
      v10 = Data + 16;
      __asm { FMOV            V0.2D, #1.0 }
      v16 = v9;
      v17 = _Q0;
      v18 = _Q0;
      v19 = _Q0;
      do
      {
        v20 = *(_OWORD *)(v10 - 16);
        v21.i64[0] = (int)v20;
        v21.i64[1] = SDWORD1(v20);
        v22 = vcvtq_f64_s64(v21);
        v21.i64[0] = SDWORD2(v20);
        v21.i64[1] = SHIDWORD(v20);
        v23 = vcvtq_f64_s64(v21);
        v21.i64[0] = (int)*(_OWORD *)v10;
        v21.i64[1] = (int)HIDWORD(*(_QWORD *)v10);
        v24 = vcvtq_f64_s64(v21);
        v21.i64[0] = (int)*(_QWORD *)(v10 + 8);
        v21.i64[1] = (int)HIDWORD(*(_OWORD *)v10);
        v17 = vmulq_f64(v17, v23);
        _Q0 = vmulq_f64(_Q0, v22);
        v19 = vmulq_f64(v19, vcvtq_f64_s64(v21));
        v18 = vmulq_f64(v18, v24);
        v10 += 32;
        v16 -= 8;
      }
      while (v16);
      v25 = vmulq_f64(vmulq_f64(v18, _Q0), vmulq_f64(v19, v17));
      v3 = vmuld_lane_f64(v25.f64[0], v25, 1);
      if (v8 != v9)
        goto LABEL_8;
    }
  }
  return v3;
}

double Espresso::AOT::GetXDimOfTensorFromIRValueType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  MIL::IRDimension **v10;
  uint64_t v11;

  v3 = 1.0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2))
  {
    v4 = MIL::IRValueType::AsTensorType(this);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    v7 = *(const void **)v5;
    v6 = *(_QWORD *)(v5 + 8);
    v8 = v6 - *(_QWORD *)v5;
    if (v6 != *(_QWORD *)v5)
    {
      if (v8 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v9 = (char *)operator new(v6 - *(_QWORD *)v5);
      memcpy(v9, v7, v8);
      v10 = (MIL::IRDimension **)&v9[8 * (v8 >> 3)];
      if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v10 - 1) + 16))(*(v10 - 1)))
      {
        v11 = MIL::IRDimension::AsConstant(*(v10 - 1));
        v3 = (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
      }
      operator delete(v9);
    }
  }
  return v3;
}

void sub_19107BE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double Espresso::AOT::GetBatchDimOfTensorFromIRValueType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  double v3;
  uint64_t v4;
  MIL::IRDimension ***v5;
  MIL::IRDimension ***v6;
  uint64_t v7;

  v3 = 1.0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2))
  {
    v4 = MIL::IRValueType::AsTensorType(this);
    v5 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    if (v5[1] != *v5)
    {
      v6 = v5;
      if ((*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)**v5 + 16))(**v5))
      {
        if (v6[1] == *v6)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v7 = MIL::IRDimension::AsConstant(**v6);
        return (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      }
    }
  }
  return v3;
}

double Espresso::AOT::GetChannelDimOfTensorFromIRValueType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  double v3;
  uint64_t v4;
  MIL::IRDimension ***v5;
  MIL::IRDimension **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = 1.0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2))
  {
    v4 = MIL::IRValueType::AsTensorType(this);
    v5 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    if ((unint64_t)((char *)v5[1] - (char *)*v5) < 9)
    {
      v7 = MIL::IRValueType::AsTensorType(this);
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
      if (v8[1] - *v8 == 8)
      {
        if (v5[1] == *v5)
          goto LABEL_12;
        if ((*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)**v5 + 16))(**v5))
        {
          v6 = *v5;
          if (v5[1] != *v5)
            goto LABEL_10;
          goto LABEL_12;
        }
      }
    }
    else if ((*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)(*v5)[1] + 16))((*v5)[1]))
    {
      if ((unint64_t)((char *)v5[1] - (char *)*v5) > 8)
      {
        v6 = *v5 + 1;
LABEL_10:
        v9 = MIL::IRDimension::AsConstant(*v6);
        return (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      }
LABEL_12:
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
  }
  return v3;
}

double Espresso::AOT::GetYDimOfTensorFromIRValueType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v11;
  unint64_t v12;

  if (!(*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2))
    return (double)1uLL;
  v3 = MIL::IRValueType::AsTensorType(this);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
  v6 = *(const void **)v4;
  v5 = *(_QWORD *)(v4 + 8);
  v7 = v5 - *(_QWORD *)v4;
  if (v5 == *(_QWORD *)v4)
  {
    v8 = 0;
    goto LABEL_11;
  }
  if (v7 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v8 = (char *)operator new(v5 - *(_QWORD *)v4);
  v9 = &v8[8 * (v7 >> 3)];
  memcpy(v8, v6, v7);
  if ((unint64_t)(8 * (v7 >> 3)) < 9
    || !(*(uint64_t (**)(_QWORD))(**((_QWORD **)v9 - 2) + 16))(*((_QWORD *)v9 - 2)))
  {
LABEL_11:
    v12 = 1;
    if (!v8)
      return (double)v12;
    goto LABEL_12;
  }
  v11 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v9 - 2));
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
  if (!v8)
    return (double)v12;
LABEL_12:
  operator delete(v8);
  return (double)v12;
}

void sub_19107C114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::GetDimsOfTensorFromIRValueType(Espresso::AOT *this@<X0>, const MIL::IRValueType *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  MIL::IRDimension **v11;
  uint64_t v12;
  MIL::IRDimension *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _OWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2))
  {
    v5 = MIL::IRValueType::AsTensorType(this);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
    v8 = *(const void **)v6;
    v7 = *(_QWORD *)(v6 + 8);
    v9 = v7 - *(_QWORD *)v6;
    if (v7 != *(_QWORD *)v6)
    {
      if (v9 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v54 = (char *)operator new(v7 - *(_QWORD *)v6);
      v10 = &v54[8 * (v9 >> 3)];
      memcpy(v54, v8, v9);
      v11 = (MIL::IRDimension **)v54;
      while (1)
      {
        v13 = *v11;
        if (!(*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)*v11 + 16))(*v11))
          break;
        v14 = MIL::IRDimension::AsConstant(v13);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
        v16 = v15;
        v18 = (uint64_t *)a3[1];
        v17 = a3[2];
        if ((unint64_t)v18 >= v17)
        {
          v19 = (_QWORD *)*a3;
          v20 = (uint64_t)v18 - *a3;
          v21 = v20 >> 3;
          v22 = (v20 >> 3) + 1;
          if (v22 >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v23 = v17 - (_QWORD)v19;
          if (v23 >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v25 = operator new(8 * v24);
            v26 = (uint64_t *)&v25[8 * v21];
            *v26 = v16;
            v12 = (uint64_t)(v26 + 1);
            if (v18 == v19)
            {
LABEL_38:
              *a3 = v26;
              a3[1] = v12;
              a3[2] = &v25[8 * v24];
              if (!v19)
                goto LABEL_6;
LABEL_48:
              operator delete(v19);
              goto LABEL_6;
            }
          }
          else
          {
            v25 = 0;
            v26 = (uint64_t *)(8 * v21);
            *(_QWORD *)(8 * v21) = v16;
            v12 = 8 * v21 + 8;
            if (v18 == v19)
              goto LABEL_38;
          }
          v36 = (char *)(v18 - 1) - (char *)v19;
          if (v36 < 0x58)
            goto LABEL_58;
          if ((unint64_t)((char *)v18 - &v25[v20]) < 0x20)
            goto LABEL_58;
          v37 = (v36 >> 3) + 1;
          v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          v39 = &v18[v38 / 0xFFFFFFFFFFFFFFF8];
          v26 = (uint64_t *)((char *)v26 - v38);
          v40 = &v25[8 * v21 - 16];
          v41 = v18 - 2;
          v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v43 = *(_OWORD *)v41;
            *(v40 - 1) = *((_OWORD *)v41 - 1);
            *v40 = v43;
            v40 -= 2;
            v41 -= 4;
            v42 -= 4;
          }
          while (v42);
          v18 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_58:
            do
            {
              v44 = *--v18;
              *--v26 = v44;
            }
            while (v18 != v19);
          }
          goto LABEL_38;
        }
        *v18 = v15;
        v12 = (uint64_t)(v18 + 1);
LABEL_6:
        a3[1] = v12;
        if (++v11 == (MIL::IRDimension **)v10)
        {
          operator delete(v54);
          return;
        }
      }
      v28 = (char *)a3[1];
      v27 = a3[2];
      if ((unint64_t)v28 < v27)
      {
        *(_QWORD *)v28 = 1;
        v12 = (uint64_t)(v28 + 8);
        goto LABEL_6;
      }
      v19 = (_QWORD *)*a3;
      v29 = (uint64_t)&v28[-*a3];
      v30 = v29 >> 3;
      v31 = (v29 >> 3) + 1;
      if (v31 >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v32 = v27 - (_QWORD)v19;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v34 = operator new(8 * v33);
        v35 = &v34[8 * v30];
        *v35 = 1;
        v12 = (uint64_t)(v35 + 1);
        if (v28 == (char *)v19)
        {
LABEL_47:
          *a3 = v35;
          a3[1] = v12;
          a3[2] = &v34[8 * v33];
          if (v19)
            goto LABEL_48;
          goto LABEL_6;
        }
      }
      else
      {
        v34 = 0;
        v35 = (_QWORD *)(8 * v30);
        *(_QWORD *)(8 * v30) = 1;
        v12 = 8 * v30 + 8;
        if (v28 == (char *)v19)
          goto LABEL_47;
      }
      v45 = v28 - 8 - (char *)v19;
      if (v45 < 0x58)
        goto LABEL_59;
      if ((unint64_t)(v28 - &v34[v29]) < 0x20)
        goto LABEL_59;
      v46 = (v45 >> 3) + 1;
      v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      v48 = &v28[-v47];
      v35 = (_QWORD *)((char *)v35 - v47);
      v49 = &v34[8 * v30 - 16];
      v50 = v28 - 16;
      v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v52 = *(_OWORD *)v50;
        *(v49 - 1) = *((_OWORD *)v50 - 1);
        *v49 = v52;
        v49 -= 2;
        v50 -= 32;
        v51 -= 4;
      }
      while (v51);
      v28 = v48;
      if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          v53 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v35 = v53;
        }
        while (v28 != (char *)v19);
      }
      goto LABEL_47;
    }
  }
}

void sub_19107C4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

double Espresso::AOT::GetWU16EfficiencyForInputType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  double XDimOfTensorFromIRValueType;
  const MIL::IRValueType *v4;
  double YDimOfTensorFromIRValueType;

  XDimOfTensorFromIRValueType = Espresso::AOT::GetXDimOfTensorFromIRValueType(this, a2);
  YDimOfTensorFromIRValueType = Espresso::AOT::GetYDimOfTensorFromIRValueType(this, v4);
  return YDimOfTensorFromIRValueType
       * XDimOfTensorFromIRValueType
       / (floor(XDimOfTensorFromIRValueType * 0.0625 + 0.9375)
        * 256.0
        * floor(YDimOfTensorFromIRValueType * 0.0625 + 0.9375));
}

double Espresso::AOT::GetFlopCountForActivation(uint64_t *a1, unint64_t a2)
{
  double result;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    result = 0.0;
    switch(*((_BYTE *)a1 + 23))
    {
      case 4:
        if (*(_DWORD *)a1 == 1752064372)
          goto LABEL_51;
        if (*(_DWORD *)a1 == 1970038130)
          goto LABEL_9;
        return result;
      case 6:
        goto LABEL_29;
      case 7:
        if (*(_DWORD *)a1 == 1835493747 && *(_DWORD *)((char *)a1 + 3) == 1684631405)
          goto LABEL_38;
        return result;
      case 0xB:
        if (*a1 == 0x745F64656C616373 && *(uint64_t *)((char *)a1 + 3) == 0x686E61745F64656CLL)
          goto LABEL_44;
        return result;
      case 0xC:
        if (*a1 == 0x6769735F64726168 && *((_DWORD *)a1 + 2) == 1684631405)
          goto LABEL_50;
        return result;
      default:
        return result;
    }
  }
  result = 0.0;
  switch(a1[1])
  {
    case 4:
      if (*(_DWORD *)*a1 == 1752064372)
      {
LABEL_51:
        result = (double)a2 * 37.0;
      }
      else if (*(_DWORD *)*a1 == 1970038130)
      {
LABEL_9:
        result = (double)a2;
      }
      break;
    case 6:
      a1 = (uint64_t *)*a1;
LABEL_29:
      if (bswap32(*(_DWORD *)a1) == 1818848869 && bswap32(*((unsigned __int16 *)a1 + 2)) >> 16 == 24946)
        result = (double)a2 + (double)a2;
      break;
    case 7:
      if (*(_DWORD *)*a1 == 1835493747 && *(_DWORD *)(*a1 + 3) == 1684631405)
LABEL_38:
        result = (double)a2 * 36.0;
      break;
    case 11:
      if (*(_QWORD *)*a1 == 0x745F64656C616373 && *(_QWORD *)(*a1 + 3) == 0x686E61745F64656CLL)
LABEL_44:
        result = (double)a2 * 39.0;
      break;
    case 12:
      if (*(_QWORD *)*a1 == 0x6769735F64726168 && *(_DWORD *)(*a1 + 8) == 1684631405)
LABEL_50:
        result = (double)a2 * 4.0;
      break;
    default:
      return result;
  }
  return result;
}

double Espresso::AOT::GetFlopCountForMatMul(char **a1, int a2, char **a3, int a4)
{
  char *v4;
  char *v5;
  double result;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  double v27;
  double v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = *a1;
  v4 = a1[1];
  result = 0.0;
  if (*a1 != v4)
  {
    v8 = *a3;
    v7 = a3[1];
    if (*a3 != v7)
    {
      v9 = v4 - v5;
      v10 = v4 - v5 - 8;
      if (v4 - v5 == 8)
      {
        result = 1.0;
        if (v7 - v8 == 8)
          return result;
      }
      else if ((unint64_t)v9 >= 9)
      {
        v11 = *((_QWORD *)v4 - 2);
        v12 = 1;
        goto LABEL_9;
      }
      v12 = 0;
      v11 = 1;
LABEL_9:
      if ((v12 & a2) != 0)
        v13 = *((_QWORD *)v4 - 1);
      else
        v13 = v11;
      if ((v12 & a2) == 0)
        v11 = *((_QWORD *)v4 - 1);
      v14 = v7 - v8;
      if ((unint64_t)(v7 - v8) < 9)
      {
        v16 = 1;
      }
      else
      {
        v15 = -8;
        if (a4)
          v15 = -16;
        v16 = *(_QWORD *)&v7[v15];
      }
      v17 = v13 * v11 * v16;
      v18 = v14 > 16;
      v19 = v9 > 16;
      if (v9 > 16 || v14 >= 17)
      {
        v20 = (v14 >> 3) - 3;
        v21 = (v9 >> 3) - 3;
        while (1)
        {
          v22 = v20;
          if (v19)
          {
            v23 = *(_QWORD *)&v5[8 * v21];
            if (v18)
              goto LABEL_26;
          }
          else
          {
            v23 = 1;
            if (v18)
            {
LABEL_26:
              v24 = *(_QWORD *)&v8[8 * v20];
              goto LABEL_27;
            }
          }
          v24 = 1;
LABEL_27:
          if (v23 > v24)
            v24 = v23;
          v17 *= v24;
          v25 = v21 - 1;
          --v20;
          v18 = v22 > 0;
          v26 = v21 <= 0;
          v19 = v21-- > 0;
          if (v26)
          {
            v21 = v25;
            if (v22 <= 0)
              break;
          }
        }
      }
      v27 = 0.0;
      v28 = 0.0;
      if ((unint64_t)v9 < 0x10 || !a2)
      {
LABEL_41:
        v37 = v28 + (double)(unint64_t)(2 * v17);
        if ((unint64_t)v14 < 0x10 || !a4)
          return v37 + v27;
        if ((unint64_t)(v14 - 8) >= 8)
        {
          v40 = ((unint64_t)(v14 - 8) >> 3) + 1;
          v39 = &v8[8 * (v40 & 0x3FFFFFFFFFFFFFFELL)];
          v41 = v8 + 8;
          v42 = 1;
          v43 = v40 & 0x3FFFFFFFFFFFFFFELL;
          v44 = 1;
          do
          {
            v42 *= *(v41 - 1);
            v44 *= *v41;
            v41 += 2;
            v43 -= 2;
          }
          while (v43);
          v38 = v44 * v42;
          if (v40 == (v40 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_49;
        }
        else
        {
          v38 = 1;
          v39 = v8;
        }
        do
        {
          v45 = *(_QWORD *)v39;
          v39 += 8;
          v38 *= v45;
        }
        while (v39 != v7);
LABEL_49:
        v27 = (double)v38;
        return v37 + v27;
      }
      if (v10 >= 8)
      {
        v31 = (v10 >> 3) + 1;
        v30 = &v5[8 * (v31 & 0x3FFFFFFFFFFFFFFELL)];
        v32 = v5 + 8;
        v33 = 1;
        v34 = v31 & 0x3FFFFFFFFFFFFFFELL;
        v35 = 1;
        do
        {
          v33 *= *(v32 - 1);
          v35 *= *v32;
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        v29 = v35 * v33;
        if (v31 == (v31 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_40;
      }
      else
      {
        v29 = 1;
        v30 = v5;
      }
      do
      {
        v36 = *(_QWORD *)v30;
        v30 += 8;
        v29 *= v36;
      }
      while (v30 != v4);
LABEL_40:
      v28 = (double)v29;
      goto LABEL_41;
    }
  }
  return result;
}

void Espresso::AOT::Backends::CostModel::GRUOpEstimator::EstimateComputeResources(const MIL::IROperation *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  Espresso::AOT *ParameterType;
  uint64_t v7;
  int v8;
  const MIL::IRValueType *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Espresso::AOT *v13;
  const MIL::IRValueType *v14;
  double YDimOfTensorFromIRValueType;
  uint64_t ParameterValue;
  _QWORD *v17;
  const std::string::value_type **v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  double FlopCountForActivation;
  _QWORD *v23;
  char *v24;
  double FlopCountForMatMul;
  _QWORD *v26;
  char *v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  _QWORD *v32;
  const std::string::value_type **v33;
  __int128 v34;
  const MIL::IRValueType *v35;
  double v36;
  _QWORD *v37;
  double SizeInMbForDims;
  _QWORD *v39;
  uint64_t v40;
  double v41;
  _QWORD *v42;
  const MIL::IRValueType *v43;
  double v44;
  _QWORD *v45;
  double v46;
  const MIL::IRValueType *v47;
  const MIL::IRValueType *v48;
  double SizeInMbForShape;
  double v50;
  double v51;
  void *v52;
  const MIL::IRValueType *v53;
  Espresso::AOT *OutputType;
  _QWORD v55[3];
  _QWORD v56[3];
  char *v57[4];
  std::string v58;
  void *__p[2];
  char v60;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = v5;
  v60 = 1;
  LOWORD(__p[0]) = 120;
  ParameterType = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  if ((*(uint64_t (**)(Espresso::AOT *))(*(_QWORD *)ParameterType + 24))(ParameterType))
  {
    v7 = (*(uint64_t (**)(Espresso::AOT *))(*(_QWORD *)ParameterType + 24))(ParameterType);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
    OutputType = (Espresso::AOT *)MIL::IROperation::GetOutputType(a1);
    Espresso::AOT::GetDimsOfTensorFromIRValueType(ParameterType, v9, __p);
    v10 = *(_QWORD *)__p[0];
    v11 = *((_QWORD *)__p[0] + 1);
    v12 = *((_QWORD *)__p[0] + 2);
    *((_BYTE *)&v58.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v58, "weight_ih");
    v13 = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
    YDimOfTensorFromIRValueType = Espresso::AOT::GetYDimOfTensorFromIRValueType(v13, v14);
    HIBYTE(v57[2]) = 20;
    strcpy((char *)v57, "recurrent_activation");
    memset(v56, 0, sizeof(v56));
    ParameterValue = MIL::IROperation::TryGetParameterValue();
    if (ParameterValue)
      ParameterValue = MEMORY[0x19401C3DC]();
    v17 = v56;
    if (ParameterValue)
      v18 = (const std::string::value_type **)ParameterValue;
    else
      v18 = (const std::string::value_type **)v56;
    if (*((char *)v18 + 23) < 0)
    {
      if (ParameterValue)
        v17 = (_QWORD *)ParameterValue;
      std::string::__init_copy_ctor_external(&v58, *v18, v17[1]);
    }
    else
    {
      v19 = *(_OWORD *)v18;
      v58.__r_.__value_.__r.__words[2] = (std::string::size_type)v18[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v19;
    }
    v20 = (unint64_t)YDimOfTensorFromIRValueType / 3;
    if (SHIBYTE(v57[2]) < 0)
      operator delete(v57[0]);
    v21 = v20 * v11;
    FlopCountForActivation = Espresso::AOT::GetFlopCountForActivation((uint64_t *)&v58, v20 * v11);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v23 = operator new(0x10uLL);
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)(v23 + 2);
    v58.__r_.__value_.__r.__words[2] = (std::string::size_type)(v23 + 2);
    *v23 = v11;
    v23[1] = v12;
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v24 = (char *)operator new(0x10uLL);
    v57[1] = v24 + 16;
    v57[2] = v24 + 16;
    *(_QWORD *)v24 = v12;
    *((_QWORD *)v24 + 1) = v20;
    v57[0] = v24;
    FlopCountForMatMul = Espresso::AOT::GetFlopCountForMatMul(&v58.__r_.__value_.__l.__data_, 0, v57, 0);
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
    if (v58.__r_.__value_.__r.__words[0])
    {
      v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    v26 = operator new(0x10uLL);
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)(v26 + 2);
    v58.__r_.__value_.__r.__words[2] = (std::string::size_type)(v26 + 2);
    *v26 = v12;
    v26[1] = v20;
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    v27 = (char *)operator new(0x10uLL);
    v57[1] = v27 + 16;
    v57[2] = v27 + 16;
    *(_QWORD *)v27 = v20;
    *((_QWORD *)v27 + 1) = v20;
    v57[0] = v27;
    v28 = Espresso::AOT::GetFlopCountForMatMul(&v58.__r_.__value_.__l.__data_, 0, v57, 0);
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
    if (v58.__r_.__value_.__r.__words[0])
    {
      v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    *((_BYTE *)&v58.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v58, "bias");
    v29 = MIL::IROperation::TryGetParameterType();
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    HIBYTE(v57[2]) = 10;
    LOWORD(v57[1]) = 28271;
    if (v29)
      v30 = (double)v21;
    else
      v30 = 0.0;
    v57[0] = *(char **)"activation";
    BYTE2(v57[1]) = 0;
    memset(v55, 0, sizeof(v55));
    v31 = MIL::IROperation::TryGetParameterValue();
    if (v31)
      v31 = MEMORY[0x19401C3DC]();
    v32 = v55;
    if (v31)
      v33 = (const std::string::value_type **)v31;
    else
      v33 = (const std::string::value_type **)v55;
    if (*((char *)v33 + 23) < 0)
    {
      if (v31)
        v32 = (_QWORD *)v31;
      std::string::__init_copy_ctor_external(&v58, *v33, v32[1]);
    }
    else
    {
      v34 = *(_OWORD *)v33;
      v58.__r_.__value_.__r.__words[2] = (std::string::size_type)v33[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
    }
    if (SHIBYTE(v57[2]) < 0)
      operator delete(v57[0]);
    v36 = Espresso::AOT::GetFlopCountForActivation((uint64_t *)&v58, v20 * v11);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    *(double *)v5 = (double)v10
                  * 0.000000001
                  * (v36
                   + FlopCountForActivation
                   + FlopCountForActivation
                   + (FlopCountForMatMul + (double)v21 + v28 + v30) * 3.0);
    *(double *)(v5 + 56) = (double)v12;
    *(double *)(v5 + 72) = Espresso::AOT::GetXDimOfTensorFromIRValueType(OutputType, v35);
    v37 = operator new(0x10uLL);
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)(v37 + 2);
    v58.__r_.__value_.__r.__words[2] = (std::string::size_type)(v37 + 2);
    *v37 = v11;
    v37[1] = v12;
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    SizeInMbForDims = Espresso::AOT::GetSizeInMbForDims(&v58.__r_.__value_.__l.__data_, v8);
    if (v58.__r_.__value_.__r.__words[0])
    {
      v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    v39 = operator new(0x10uLL);
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)(v39 + 2);
    v58.__r_.__value_.__r.__words[2] = (std::string::size_type)(v39 + 2);
    v40 = 3 * v20;
    *v39 = 3 * v20;
    v39[1] = v12;
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    v41 = Espresso::AOT::GetSizeInMbForDims(&v58.__r_.__value_.__l.__data_, v8);
    if (v58.__r_.__value_.__r.__words[0])
    {
      v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    v42 = operator new(0x10uLL);
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)(v42 + 2);
    v58.__r_.__value_.__r.__words[2] = (std::string::size_type)(v42 + 2);
    *v42 = v40;
    v42[1] = v20;
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    v44 = Espresso::AOT::GetSizeInMbForDims(&v58.__r_.__value_.__l.__data_, v8);
    if (v58.__r_.__value_.__r.__words[0])
    {
      v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (v30 == 0.0)
    {
      v46 = 0.0;
    }
    else
    {
      v45 = operator new(8uLL);
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
      *v45 = v40;
      v58.__r_.__value_.__l.__size_ = (std::string::size_type)(v45 + 1);
      v58.__r_.__value_.__r.__words[2] = (std::string::size_type)(v45 + 1);
      v46 = Espresso::AOT::GetSizeInMbForDims(&v58.__r_.__value_.__l.__data_, v8);
      if (v58.__r_.__value_.__r.__words[0])
      {
        v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
        operator delete(v58.__r_.__value_.__l.__data_);
      }
    }
    *(double *)(v5 + 24) = v41 + SizeInMbForDims + v44 + v46;
    *(double *)(v5 + 32) = Espresso::AOT::GetSizeInMbForShape(ParameterType, v43);
    SizeInMbForShape = Espresso::AOT::GetSizeInMbForShape(OutputType, v47);
    *(double *)(v5 + 40) = SizeInMbForShape;
    v50 = *(double *)(v5 + 32) + SizeInMbForShape + *(double *)(v5 + 24);
    *(double *)(v5 + 8) = v50;
    v51 = 0.0;
    if (v50 > 0.0)
      v51 = *(double *)v5 * 1000.0 / v50;
    *(double *)(v5 + 48) = v51;
    Espresso::AOT::GetDimsOfTensorFromIRValueType(OutputType, v48, &v58);
    v52 = (void *)v58.__r_.__value_.__r.__words[0];
    *(double *)(v5 + 88) = (double)*(unint64_t *)v58.__r_.__value_.__l.__data_;
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
    operator delete(v52);
    *(double *)(v5 + 16) = *(double *)(v5 + 24) * 1024.0 / *(double *)(v5 + 88);
    *(double *)(v5 + 136) = Espresso::AOT::GetWU16EfficiencyForInputType(ParameterType, v53);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_19107D09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  *a9 = 0;
  MEMORY[0x19401CD90](v36, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Backends::CostModel::GRUOpEstimator::~GRUOpEstimator(Espresso::AOT::Backends::CostModel::GRUOpEstimator *this)
{
  Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator(this);
  JUMPOUT(0x19401CD90);
}

Espresso::AOT::MemOptimizer::Optimizer *Espresso::AOT::MemOptimizer::MemOptimizerForMIL::MemOptimizerForMIL(Espresso::AOT::MemOptimizer::Optimizer *a1, uint64_t a2)
{
  Espresso::AOT::MemOptimizer::Optimizer *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = Espresso::AOT::MemOptimizer::Optimizer::Optimizer(a1);
  *(_QWORD *)v4 = &off_1E2DA02F0;
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 3);
  v12 = *((_QWORD *)v4 + 2);
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::AOT::ValidateE5RTProgram(&v12);
  v8 = v13;
  if (!v13)
    return a1;
  v9 = (unint64_t *)&v13->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_19107D2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::AOT::MemOptimizer::Optimizer *v9;
  uint64_t v10;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v10);
  Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(v9);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MemOptimizer::MemOptimizerForMIL::~MemOptimizerForMIL(Espresso::AOT::MemOptimizer::MemOptimizerForMIL *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2DA02F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(this);
  }
  else
  {
LABEL_5:
    Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2DA02F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(this);
  }
  else
  {
LABEL_5:
    Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E2DA02F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::AOT::MemOptimizer::MemOptimizerForMIL::HasEntryPoint(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16)) != 0;
}

BOOL Espresso::AOT::MemOptimizer::MemOptimizerForMIL::IsRangeOverlapped(_DWORD *a1, _DWORD *a2)
{
  return *a2 <= a1[1] && *a1 <= a2[1];
}

uint64_t Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Function;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  void **v13;
  void *v14;
  void **v15;
  void *v16;
  uint64_t result;
  void **v18;
  void **v19;
  _DWORD *v20;
  int v22;
  void *__p[2];
  void *v24[2];
  int v25;
  char v26;
  void *v27[2];
  void *v28[2];
  int v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  Espresso::AOT::MemOptimizer::InterferenceGraphBuilder::CreateBuilder(&v30);
  Function = MIL::IRProgram::GetFunction();
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)v28 = 0u;
  v29 = 1065353216;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v24 = 0u;
  v25 = 1065353216;
  v22 = 0;
  v6 = operator new(0x38uLL);
  *v6 = &off_1E2DB3760;
  v6[1] = v27;
  v6[2] = v3;
  v6[3] = v5;
  v6[4] = &v22;
  v6[5] = &v26;
  v6[6] = __p;
  v32 = v6;
  MIL::Util::Walk();
  v7 = v32;
  if (v32 == v31)
  {
    v8 = 4;
    v7 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v28[0];
  if (v28[0])
  {
    do
    {
      v10 = v9 + 2;
      v11 = v9[6];
      if (!v11)
      {
        if (*((char *)v9 + 39) < 0)
          v10 = (_QWORD *)*v10;
        v31[0] = v10;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Memory allocation size for \"%s\" is 0 byte", v31);
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v30 + 16))(v30, v10, v11, 0);
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    v12 = v28[0];
    if (v28[0])
    {
      do
      {
        v20 = *(_DWORD **)v12;
        if (!*(_QWORD *)v12)
          break;
        do
        {
          if (v20[10] <= v12[11] && v12[10] <= v20[11])
            (*(void (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)v30 + 24))(v30, v12 + 4, v20 + 4);
          v20 = *(_DWORD **)v20;
        }
        while (v20);
        v12 = *(_DWORD **)v12;
      }
      while (v12);
    }
  }
  Espresso::AOT::MemOptimizer::InterferenceGraphBuilder::Finalize(&v30, a1);
  v13 = (void **)v24[0];
  if (v24[0])
  {
    do
    {
      v18 = (void **)*v13;
      if (*((char *)v13 + 39) < 0)
        operator delete(v13[2]);
      operator delete(v13);
      v13 = v18;
    }
    while (v18);
  }
  v14 = __p[0];
  __p[0] = 0;
  if (v14)
    operator delete(v14);
  v15 = (void **)v28[0];
  if (v28[0])
  {
    do
    {
      v19 = (void **)*v15;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v19;
    }
    while (v19);
  }
  v16 = v27[0];
  v27[0] = 0;
  if (v16)
    operator delete(v16);
  result = v30;
  v30 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19107D714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  v5 = *(_QWORD *)(v3 - 96);
  *(_QWORD *)(v3 - 96) = 0;
  if (!v5)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DB3760;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DB3760;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  MIL::IRArgument **v9;
  uint64_t Name;
  uint64_t v11;
  uint64_t **v12;
  int v13;
  size_t v14;
  const void *v15;
  int v16;
  size_t v17;
  uint64_t *v18;
  size_t v19;
  int v20;
  BOOL v21;
  int v22;
  _BOOL4 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  std::__shared_weak_count *v38;
  MIL::IRNamedValueType *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  MIL::IRValueType *Type;
  const MIL::IRValueType *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  const MIL::IRValueType *v59;
  MIL::IRMemoryLayoutValueType *v60;
  MIL::IRTensorBufferValueType *v61;
  uint64_t Shape;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  _DWORD *v67;
  MIL::IRValueType *v68;
  const MIL::IRValueType *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  MIL::IRValue *v76;
  uint64_t Size;
  E5RT::TensorDescriptor *v78;
  MIL::IRMemoryLayoutValueType *v79;
  MIL::IRTensorBufferValueType *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::logic_error *v88;
  unsigned __int8 *v89;
  std::logic_error *exception;
  void *__p[2];
  char v93;
  E5RT::TensorDescriptor *v94;
  std::__shared_weak_count *v95;
  E5RT::TensorDescriptor *v96;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
  v4 = v3 + 1;
  v5 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 != v3 + 1)
  {
    do
    {
      v9 = (MIL::IRArgument **)v5[7];
      if ((MIL::IRArgument **)v5[8] == v9)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      Name = MIL::IRArgument::GetName(*v9);
      v11 = Name;
      v12 = *(uint64_t ***)(*(_QWORD *)(a1 + 16) + 8);
      if (v12)
      {
        v13 = *(char *)(Name + 23);
        if (v13 >= 0)
          v14 = *(unsigned __int8 *)(Name + 23);
        else
          v14 = *(_QWORD *)(Name + 8);
        if (v13 >= 0)
          v15 = (const void *)Name;
        else
          v15 = *(const void **)Name;
        do
        {
          v16 = *((char *)v12 + 55);
          if (v16 >= 0)
            v17 = *((unsigned __int8 *)v12 + 55);
          else
            v17 = (size_t)v12[5];
          if (v16 >= 0)
            v18 = (uint64_t *)(v12 + 4);
          else
            v18 = v12[4];
          if (v17 >= v14)
            v19 = v14;
          else
            v19 = v17;
          v20 = memcmp(v15, v18, v19);
          v21 = v14 < v17;
          if (v20)
            v21 = v20 < 0;
          if (!v21)
          {
            v22 = memcmp(v18, v15, v19);
            v23 = v17 < v14;
            if (v22)
              v23 = v22 < 0;
            if (!v23)
              goto LABEL_54;
            ++v12;
          }
          v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
      v24 = *(uint64_t **)(a1 + 24);
      v25 = *v24;
      v26 = v24[1];
      if (*v24 != v26)
      {
        v27 = *(_BYTE *)(v11 + 23);
        if (v27 >= 0)
          v28 = *(unsigned __int8 *)(v11 + 23);
        else
          v28 = *(_QWORD *)(v11 + 8);
        if (v27 >= 0)
          v29 = (unsigned __int8 *)v11;
        else
          v29 = *(unsigned __int8 **)v11;
        while (1)
        {
          v30 = *(unsigned __int8 *)(v25 + 23);
          if ((v30 & 0x80u) == 0)
            v31 = *(unsigned __int8 *)(v25 + 23);
          else
            v31 = *(_QWORD *)(v25 + 8);
          if (v31 == v28)
          {
            if ((v30 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v25, v29, *(_QWORD *)(v25 + 8)))
                break;
            }
            else
            {
              if (!*(_BYTE *)(v25 + 23))
                break;
              v32 = 0;
              while (*(unsigned __int8 *)(v25 + v32) == v29[v32])
              {
                if (v30 == ++v32)
                  goto LABEL_48;
              }
            }
          }
          v25 += 24;
          if (v25 == v26)
            goto LABEL_49;
        }
      }
LABEL_48:
      if (v25 == v26)
      {
LABEL_49:
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(_QWORD **)(a1 + 48), v11))
        {
          v33 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(*(_QWORD **)(a1 + 8), v11);
          if (!v33)
          {
            if (*(char *)(v11 + 23) >= 0)
              v89 = (unsigned __int8 *)v11;
            else
              v89 = *(unsigned __int8 **)v11;
            __p[0] = v89;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Input argument \"%s\" was not already visited", __p);
          }
          v34 = **(_DWORD **)(a1 + 32);
          if (*((_DWORD *)v33 + 11) < v34)
            *((_DWORD *)v33 + 11) = v34;
        }
      }
LABEL_54:
      v35 = (_QWORD *)v5[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v5[2];
          v37 = *v36 == (_QWORD)v5;
          v5 = v36;
        }
        while (!v37);
      }
      v5 = v36;
    }
    while (v36 != v4);
  }
  v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  v7 = *v6;
  v8 = v6[1];
  while (v7 != v8)
  {
    v39 = *(MIL::IRNamedValueType **)v7;
    v38 = *(std::__shared_weak_count **)(v7 + 8);
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
    }
    v42 = MIL::IRNamedValueType::GetName(v39);
    v43 = (void *)v42;
    v44 = *(uint64_t **)(a1 + 24);
    v46 = *v44;
    v45 = v44[1];
    if (*v44 != v45)
    {
      v47 = *(_BYTE *)(v42 + 23);
      if (v47 >= 0)
        v48 = *(unsigned __int8 *)(v42 + 23);
      else
        v48 = *(_QWORD *)(v42 + 8);
      if (v47 >= 0)
        v49 = (unsigned __int8 *)v42;
      else
        v49 = *(unsigned __int8 **)v42;
      while (1)
      {
        v50 = *(unsigned __int8 *)(v46 + 23);
        if ((v50 & 0x80u) == 0)
          v51 = *(unsigned __int8 *)(v46 + 23);
        else
          v51 = *(_QWORD *)(v46 + 8);
        if (v51 == v48)
        {
          if ((v50 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v46, v49, *(_QWORD *)(v46 + 8)))
              break;
          }
          else
          {
            if (!*(_BYTE *)(v46 + 23))
              break;
            v52 = 0;
            while (*(unsigned __int8 *)(v46 + v52) == v49[v52])
            {
              if (v50 == ++v52)
                goto LABEL_83;
            }
          }
        }
        v46 += 24;
        if (v46 == v45)
          goto LABEL_84;
      }
    }
LABEL_83:
    if (v46 == v45)
    {
LABEL_84:
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v39);
      if (E5Common::Utils::IsTensor((uint64_t)Type))
      {
        v55 = MIL::IRValueType::AsTensorType(Type);
        v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 96))(v55);
        v57 = *(_QWORD **)v56;
        v58 = *(_QWORD **)(v56 + 8);
        if (*(_QWORD **)v56 == v58)
          goto LABEL_95;
        while ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v57 + 16))(*v57))
        {
          if (++v57 == v58)
            goto LABEL_95;
        }
      }
      else
      {
        if (!E5Common::Utils::IsTensorBuffer(Type, v54))
        {
          if (E5Common::Utils::IsPixelBuffer(Type, v59))
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "isDynamicOperand: PixelBuffer type is not expected here.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
LABEL_95:
          v65 = *(_QWORD *)(a1 + 8);
          __p[0] = v43;
          v66 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v65, (uint64_t)v43, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
          v67 = *(_DWORD **)(a1 + 32);
          *((_DWORD *)v66 + 10) = *v67;
          *((_DWORD *)v66 + 11) = *v67;
          v68 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v39);
          if (E5Common::Utils::IsTensor((uint64_t)v68))
          {
            v70 = MIL::IRValueType::AsTensorType(v68);
            v94 = 0;
            v95 = 0;
            Espresso::AOT::BuildTensorDescriptor((uint64_t)v43, v70, &v94, &v96);
            v71 = v95;
            if (v95)
            {
              v72 = (unint64_t *)&v95->__shared_owners_;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v74 = MIL::IRValueType::AsTensorType(v68);
            v93 = 10;
            strcpy((char *)__p, "total_size");
            v75 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v74 + 64))(v74, __p);
            v76 = (MIL::IRValue *)v75;
            if (v93 < 0)
            {
              operator delete(__p[0]);
              if (!v76)
                goto LABEL_122;
LABEL_103:
              MIL::IRValue::AsTensor(v76);
              Size = *(_QWORD *)MIL::IRTensorValue::GetDataView<unsigned long long>();
              v78 = v96;
              v96 = 0;
              if (!v78)
              {
LABEL_113:
                v84 = *(_QWORD *)(a1 + 8);
                __p[0] = v43;
                std::__hash_table<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v84, (uint64_t)v43, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[6] = Size;
                goto LABEL_116;
              }
            }
            else
            {
              if (v75)
                goto LABEL_103;
LABEL_122:
              Size = E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)v96);
              v78 = v96;
              v96 = 0;
              if (!v78)
                goto LABEL_113;
            }
          }
          else
          {
            if (!E5Common::Utils::IsTensorBuffer(v68, v69))
            {
              v88 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v88, "Unsupported type for ComputeAllocationSize.");
              v88->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
              __cxa_throw(v88, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
            }
            v79 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v68);
            v80 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v79);
            __p[0] = 0;
            __p[1] = 0;
            Espresso::AOT::BuildTensorDescriptor(v80, (uint64_t)v43, &v94);
            v81 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v82 = (unint64_t *)((char *)__p[1] + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            Size = E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)v94);
            v78 = v94;
            v94 = 0;
            if (!v78)
              goto LABEL_113;
          }
          (*(void (**)(E5RT::TensorDescriptor *))(*(_QWORD *)v78 + 8))(v78);
          goto LABEL_113;
        }
        v60 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(Type);
        v61 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v60);
        Shape = MIL::IRTensorBufferValueType::GetShape(v61);
        v63 = *(_QWORD **)Shape;
        v64 = *(_QWORD **)(Shape + 8);
        if (*(_QWORD **)Shape == v64)
          goto LABEL_95;
        while ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v63 + 16))(*v63))
        {
          if (++v63 == v64)
            goto LABEL_95;
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*(_QWORD *)(a1 + 48), (uint64_t)v43, (uint64_t)v43);
    }
LABEL_116:
    if (v38)
    {
      v85 = (unint64_t *)&v38->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v7 += 16;
  }
  ++**(_DWORD **)(a1 + 32);
  return 1;
}

void sub_19107DF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK8Espresso3AOT12MemOptimizer18MemOptimizerForMIL22BuildInterferenceGraphERKNSt3__112basic_stringI"
                     "cNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK8Espresso3AOT12MemOptimizer18MemOptimizerForMIL22BuildInterferenceGraphERKNSt3__112ba"
                                "sic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK8Espresso3AOT12MemOptimizer18MemOptimizerForMIL22BuildInterferenceGraphERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK8Espresso3AOT12MemOptimizer18MemOptimizerForMIL22BuildInterferenceGraphERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::pair<unsigned int,unsigned int>,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x38uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = (std::string *)(v28 + 2);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19107E508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19107E51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILSegmenterAnalytics::~MILSegmenterAnalytics(void **this)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;

  if (*((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    v2 = (void **)this[2];
    if (!v2)
    {
LABEL_3:
      v3 = this[1];
      this[1] = 0;
      if (!v3)
        return;
      goto LABEL_4;
    }
  }
  else
  {
    v2 = (void **)this[2];
    if (!v2)
      goto LABEL_3;
  }
  v4 = (void **)this[3];
  if (v4 == v2)
  {
    this[3] = v2;
    operator delete(v2);
    v3 = this[1];
    this[1] = 0;
    if (!v3)
      return;
LABEL_4:
    (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
    return;
  }
  do
  {
    if (*((char *)v4 - 1) < 0)
      operator delete(*(v4 - 3));
    v4 -= 3;
  }
  while (v4 != v2);
  v5 = this[2];
  this[3] = v2;
  operator delete(v5);
  v3 = this[1];
  this[1] = 0;
  if (v3)
    goto LABEL_4;
}

{
  void **v2;
  void *v3;
  void **v4;
  void *v5;

  if (*((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    v2 = (void **)this[2];
    if (!v2)
    {
LABEL_3:
      v3 = this[1];
      this[1] = 0;
      if (!v3)
        return;
      goto LABEL_4;
    }
  }
  else
  {
    v2 = (void **)this[2];
    if (!v2)
      goto LABEL_3;
  }
  v4 = (void **)this[3];
  if (v4 == v2)
  {
    this[3] = v2;
    operator delete(v2);
    v3 = this[1];
    this[1] = 0;
    if (!v3)
      return;
LABEL_4:
    (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
    return;
  }
  do
  {
    if (*((char *)v4 - 1) < 0)
      operator delete(*(v4 - 3));
    v4 -= 3;
  }
  while (v4 != v2);
  v5 = this[2];
  this[3] = v2;
  operator delete(v5);
  v3 = this[1];
  this[1] = 0;
  if (v3)
    goto LABEL_4;
}

Espresso::AOT::ValidationMessage **Espresso::AOT::MILSegmenterAnalytics::UpdateWithValidationResults(Espresso::AOT::ValidationMessage **result, uint64_t *a2, uint64_t a3, Espresso::AOT::ValidationResult **a4, _QWORD *a5, unint64_t a6)
{
  Espresso::AOT::ValidationMessage **v6;
  uint64_t Function;
  uint64_t ValidDispatchUnits;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  MIL::IRObject ****v17;
  MIL::IRObject **v18;
  MIL::IRObject **v19;
  uint64_t Location;
  char *v21;
  char *v22;
  MIL::IRObject ****v23;
  MIL::IRObject **v24;
  MIL::IRObject **v25;
  void **v26;
  int v27;
  MIL::IRObject *v28;
  uint64_t ***v29;
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  int v56;
  int v57;
  Espresso::AOT::ValidationMessage *v59;
  __int128 *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  void **v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void **v67;
  double Runtime;
  void **v69;
  Espresso::AOT::ValidationMessage *v70;
  const void **v71;
  int v72;
  size_t v73;
  unint64_t v74;
  void **p_dst;
  uint64_t v76;
  uint64_t v77;
  const void *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  uint64_t *v81;
  unint64_t v82;
  void **v83;
  Espresso::AOT::ValidationMessage **v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  MIL::IRObject ****v91;
  MIL::IRObject **v92;
  MIL::IRObject **v93;
  uint64_t v94;
  char *v95;
  char *v96;
  MIL::IRObject ****v97;
  MIL::IRObject **v98;
  MIL::IRObject **v99;
  void **v100;
  int v101;
  MIL::IRObject *v102;
  uint64_t ***v103;
  uint64_t *v104;
  uint64_t *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  size_t v126;
  uint64_t v127;
  void **p_DispatchUnit;
  uint64_t v129;
  int v130;
  int v131;
  Espresso::AOT::ValidationMessage *v133;
  const void **v134;
  int v135;
  size_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  const void *v141;
  std::__shared_weak_count *v142;
  void **v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void **v147;
  void **v148;
  void **v149;
  Espresso::AOT::ValidationResult **v150;
  _QWORD *v151;
  _QWORD *v152;
  MIL::IRObject **v155;
  Espresso::AOT::ValidationMessage *v156;
  uint64_t v157;
  MIL::IRObject **v158;
  MIL::IRObject **v159;
  MIL::IRObject **v160;
  MIL::IRTensorValueType *Scalar;
  Espresso::AOT::ValidationMessage *v163;
  char v164;
  char v165;
  Espresso::AOT::ValidationMessage **v167;
  MIL::IRObject **i;
  MIL::IRObject **j;
  MIL::IRObject *v170;
  MIL::IRObject *v171;
  void *v172;
  char v173;
  void **v174;
  std::__shared_weak_count *v175;
  void *v176;
  size_t v177;
  unint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void **v181;
  std::__shared_weak_count *v182;
  void **__dst;
  size_t v184;
  unint64_t v185;
  void *__p[2];
  char v187;
  void **v188;
  std::__shared_weak_count *v189;
  std::string v190;
  void **v191;
  size_t v192;
  unsigned __int8 v193;
  char *v194;
  char *v195;
  char *v196;
  void **DispatchUnit;
  uint64_t v198;
  unsigned __int8 v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  Espresso::AOT::ValidationMessage **v202;

  v167 = result;
  if (*(_BYTE *)result)
  {
    v6 = result;
    Function = MIL::IRProgram::GetFunction();
    v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
    (*(void (**)(Espresso::AOT::ValidationMessage *))(*(_QWORD *)v6[1] + 40))(v6[1]);
    MIL::IRTensorValueType::MakeScalar();
    (*(void (**)(Espresso::AOT::ValidationMessage *))(*(_QWORD *)v6[1] + 40))(v6[1]);
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    v150 = a4;
    ValidDispatchUnits = Espresso::AOT::ValidationResult::GetValidDispatchUnits(*a4);
    v10 = *(_QWORD **)ValidDispatchUnits;
    v151 = *(_QWORD **)(ValidDispatchUnits + 8);
    if (*(_QWORD **)ValidDispatchUnits != v151)
    {
      while (1)
      {
        v11 = (std::__shared_weak_count *)a2[1];
        v200 = *a2;
        v201 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
        v152 = v10;
        Espresso::AOT::DispatchUnitToBlock((uint64_t)&v200, a3, v10);
        v14 = v201;
        if (v201)
        {
          v15 = (unint64_t *)&v201->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v17 = (MIL::IRObject ****)(*((uint64_t (**)(Espresso::AOT::ValidationMessage **))*v202 + 8))(v202);
        v19 = **v17;
        v18 = (*v17)[1];
        v155 = v18;
LABEL_15:
        if (v19 != v18)
          break;
        v84 = v202;
        v202 = 0;
        if (v84)
          (*((void (**)(Espresso::AOT::ValidationMessage **))*v84 + 1))(v84);
        v10 = v152 + 1;
        if (v152 + 1 == v151)
          goto LABEL_132;
      }
      v158 = v19;
      Location = MIL::IRObject::GetLocation(*v19);
      (*(void (**)(void ***__return_ptr))(*(_QWORD *)Location + 24))(&DispatchUnit);
      v194 = 0;
      v195 = 0;
      v196 = 0;
      v21 = (char *)operator new(8uLL);
      v164 = 0;
      *(_QWORD *)v21 = v157;
      v22 = v21 + 8;
      v194 = v21;
      v196 = v21 + 8;
LABEL_19:
      v195 = v22 - 8;
      v23 = (MIL::IRObject ****)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v22 - 1) + 56))(*((_QWORD *)v22 - 1));
      v25 = **v23;
      v24 = (*v23)[1];
      for (i = v24; ; v24 = i)
      {
        if (v25 == v24)
          goto LABEL_18;
        v28 = *v25;
        v29 = (uint64_t ***)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*v25 + 208))(*v25);
        v170 = v28;
        v30 = **v29;
        v31 = (*v29)[1];
        if (v30 != v31)
          break;
LABEL_55:
        v51 = MIL::IRObject::GetLocation(v170);
        (*(void (**)(void ***__return_ptr))(*(_QWORD *)v51 + 24))(&v191);
        if ((v193 & 0x80u) == 0)
          v52 = v193;
        else
          v52 = v192;
        v53 = v199;
        if ((v199 & 0x80u) != 0)
          v53 = v198;
        if (v52 == v53)
        {
          if ((v199 & 0x80u) == 0)
            v54 = (void **)&DispatchUnit;
          else
            v54 = DispatchUnit;
          if ((v193 & 0x80) != 0)
          {
            v26 = v191;
            v27 = memcmp(v191, v54, v192);
            operator delete(v26);
            if (!v27)
              goto LABEL_76;
          }
          else
          {
            if (!v193)
              goto LABEL_76;
            v55 = 0;
            do
            {
              v56 = *((unsigned __int8 *)&v191 + v55);
              v57 = *((unsigned __int8 *)v54 + v55);
            }
            while (v56 == v57 && v193 - 1 != v55++);
            if (v56 == v57)
            {
LABEL_76:
              v59 = v167[2];
              if (0xAAAAAAAAAAAAAAABLL * ((v167[3] - v59) >> 3) <= a6)
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              v60 = (__int128 *)((char *)v59 + 24 * a6);
              if (*((char *)v60 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
              }
              else
              {
                v61 = *v60;
                v190.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
                *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v61;
              }
              v187 = 9;
              strcpy((char *)__p, "supported");
              MIL::IRTensorValueType::MakeStringValue();
              v188 = v191;
              if (v191)
              {
                v62 = (std::__shared_weak_count *)operator new();
                v63 = v191;
                v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
                v62->__shared_owners_ = 0;
                v62->__shared_weak_owners_ = 0;
                v62[1].__vftable = (std::__shared_weak_count_vtbl *)v63;
              }
              else
              {
                v62 = 0;
              }
              v189 = v62;
              v191 = 0;
              MIL::IRObject::SetAttribute();
              v64 = v189;
              if (!v189)
                goto LABEL_87;
              v65 = (unint64_t *)&v189->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
                v67 = v191;
                v191 = 0;
                if (v67)
LABEL_88:
                  (*((void (**)(void **))*v67 + 1))(v67);
              }
              else
              {
LABEL_87:
                v67 = v191;
                v191 = 0;
                if (v67)
                  goto LABEL_88;
              }
              if (v187 < 0)
              {
                operator delete(__p[0]);
                if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_111;
              }
              else
              {
                if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_91;
LABEL_111:
                operator delete(v190.__r_.__value_.__l.__data_);
              }
LABEL_91:
              (*(void (**)(void ***__return_ptr, _QWORD, Espresso::AOT::ValidationMessage **))(*(_QWORD *)*a5 + 16))(&v191, *a5, v202);
              Runtime = Espresso::AOT::CostEstimate::GetRuntime((Espresso::AOT::CostEstimate *)v191);
              v69 = v191;
              v191 = 0;
              if (v69)
                (*((void (**)(void **))*v69 + 1))(v69);
              v70 = v167[2];
              if (0xAAAAAAAAAAAAAAABLL * ((v167[3] - v70) >> 3) <= a6)
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              v71 = (const void **)((char *)v70 + 24 * a6);
              v72 = *((char *)v71 + 23);
              if (v72 >= 0)
                v73 = *((unsigned __int8 *)v71 + 23);
              else
                v73 = (size_t)v71[1];
              v74 = v73 + 17;
              if (v73 + 17 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v74 >= 0x17)
              {
                v76 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v74 | 7) != 0x17)
                  v76 = v74 | 7;
                v77 = v76 + 1;
                p_dst = (void **)operator new(v76 + 1);
                v184 = v73 + 17;
                v185 = v77 | 0x8000000000000000;
                __dst = p_dst;
              }
              else
              {
                v184 = 0;
                v185 = 0;
                __dst = 0;
                p_dst = (void **)&__dst;
                HIBYTE(v185) = v73 + 17;
                if (!v73)
                  goto LABEL_108;
              }
              if (v72 >= 0)
                v78 = v71;
              else
                v78 = *v71;
              memmove(p_dst, v78, v73);
LABEL_108:
              strcpy((char *)p_dst + v73, "_estimatedRuntime");
              MIL::IRTensorValueType::MakeFloat64Value(Scalar, Runtime);
              v181 = v191;
              if (v191)
              {
                v79 = (std::__shared_weak_count *)operator new();
                v80 = (std::__shared_weak_count_vtbl *)v191;
                v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
                v79->__shared_owners_ = 0;
                v79->__shared_weak_owners_ = 0;
                v79[1].__vftable = v80;
              }
              else
              {
                v79 = 0;
              }
              v182 = v79;
              v191 = 0;
              MIL::IRObject::SetAttribute();
              if (!v182)
                goto LABEL_117;
              v81 = &v182->__shared_owners_;
              do
                v82 = __ldaxr((unint64_t *)v81);
              while (__stlxr(v82 - 1, (unint64_t *)v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
                v83 = v191;
                v191 = 0;
                if (v83)
LABEL_118:
                  (*((void (**)(void **))*v83 + 1))(v83);
              }
              else
              {
LABEL_117:
                v83 = v191;
                v191 = 0;
                if (v83)
                  goto LABEL_118;
              }
              if (SHIBYTE(v185) < 0)
                operator delete(__dst);
              v164 = 1;
LABEL_18:
              v22 = v195;
              if (v195 == v194)
              {
                if ((v164 & 1) == 0)
                {
                  v148 = (void **)&DispatchUnit;
                  if ((v199 & 0x80u) != 0)
                    v148 = DispatchUnit;
                  v191 = v148;
                  Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Could not find a op in the input program. op: %s", &v191);
                }
                if (v195)
                  operator delete(v195);
                if ((char)v199 < 0)
                  operator delete(DispatchUnit);
                v19 = v158 + 2;
                v18 = v155;
                goto LABEL_15;
              }
              goto LABEL_19;
            }
          }
        }
        else if ((v193 & 0x80) != 0)
        {
          operator delete(v191);
        }
        v25 += 2;
      }
      v32 = v195;
      while (1)
      {
        v34 = *v30;
        if (v32 < v196)
        {
          *(_QWORD *)v32 = v34;
          v33 = v32 + 8;
          goto LABEL_26;
        }
        v35 = v194;
        v36 = (v32 - v194) >> 3;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v38 = v196 - v194;
        if ((v196 - v194) >> 2 > v37)
          v37 = v38 >> 2;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          if (v39 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v40 = (char *)operator new(8 * v39);
          v41 = &v40[8 * v36];
          *(_QWORD *)v41 = v34;
          v33 = v41 + 8;
          if (v32 == v35)
          {
LABEL_37:
            v194 = v41;
            v195 = v33;
            v196 = &v40[8 * v39];
            if (!v32)
              goto LABEL_26;
LABEL_44:
            operator delete(v32);
            goto LABEL_26;
          }
        }
        else
        {
          v40 = 0;
          v41 = (char *)(8 * v36);
          *(_QWORD *)(8 * v36) = v34;
          v33 = (char *)(8 * v36 + 8);
          if (v32 == v35)
            goto LABEL_37;
        }
        v42 = v32 - 8 - v35;
        if (v42 < 0x168)
        {
          v43 = v32;
          goto LABEL_42;
        }
        if (&v40[v32 - v35 - 8 - (v42 & 0xFFFFFFFFFFFFFFF8)] > &v40[v32 - v35 - 8])
          break;
        if (&v32[-(v42 & 0xFFFFFFFFFFFFFFF8) - 8] > v32 - 8)
        {
          v43 = v32;
          goto LABEL_42;
        }
        if ((unint64_t)(v35 - v40) < 0x20)
        {
          v43 = v32;
          goto LABEL_42;
        }
        v45 = (v42 >> 3) + 1;
        v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
        v43 = &v32[-v46];
        v41 -= v46;
        v47 = &v40[8 * v36 - 16];
        v48 = v32 - 16;
        v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v50 = *(_OWORD *)v48;
          *((_OWORD *)v47 - 1) = *((_OWORD *)v48 - 1);
          *(_OWORD *)v47 = v50;
          v47 -= 32;
          v48 -= 32;
          v49 -= 4;
        }
        while (v49);
        if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_42;
LABEL_43:
        v32 = v194;
        v194 = v41;
        v195 = v33;
        v196 = &v40[8 * v39];
        if (v32)
          goto LABEL_44;
LABEL_26:
        v195 = v33;
        v30 += 2;
        v32 = v33;
        if (v30 == v31)
          goto LABEL_55;
      }
      v43 = v32;
      do
      {
LABEL_42:
        v44 = *((_QWORD *)v43 - 1);
        v43 -= 8;
        *((_QWORD *)v41 - 1) = v44;
        v41 -= 8;
      }
      while (v43 != v35);
      goto LABEL_43;
    }
LABEL_132:
    result = (Espresso::AOT::ValidationMessage **)Espresso::AOT::ValidationResult::GetValidationMessages(*v150);
    v163 = *result;
    v156 = result[1];
    if (*result != v156)
    {
      while (1)
      {
        v85 = (std::__shared_weak_count *)a2[1];
        v179 = *a2;
        v180 = v85;
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        DispatchUnit = (void **)Espresso::AOT::ValidationMessage::GetDispatchUnit(v163);
        Espresso::AOT::DispatchUnitToBlock((uint64_t)&v179, a3, &DispatchUnit);
        v88 = v180;
        if (v180)
        {
          v89 = (unint64_t *)&v180->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        v91 = (MIL::IRObject ****)(*((uint64_t (**)(Espresso::AOT::ValidationMessage **))*v202 + 8))(v202);
        v93 = **v91;
        v92 = (*v91)[1];
        v159 = v92;
LABEL_145:
        if (v93 != v92)
          break;
        result = v202;
        v202 = 0;
        if (result)
          result = (Espresso::AOT::ValidationMessage **)(*((uint64_t (**)(Espresso::AOT::ValidationMessage **))*result
                                                         + 1))(result);
        v163 = (Espresso::AOT::ValidationMessage *)((char *)v163 + 32);
        if (v163 == v156)
          return result;
      }
      v160 = v93;
      v94 = MIL::IRObject::GetLocation(*v93);
      (*(void (**)(void ***__return_ptr))(*(_QWORD *)v94 + 24))(&DispatchUnit);
      v194 = 0;
      v195 = 0;
      v196 = 0;
      v95 = (char *)operator new(8uLL);
      v165 = 0;
      *(_QWORD *)v95 = v157;
      v96 = v95 + 8;
      v194 = v95;
      v196 = v95 + 8;
LABEL_149:
      v195 = v96 - 8;
      v97 = (MIL::IRObject ****)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v96 - 1) + 56))(*((_QWORD *)v96 - 1));
      v99 = **v97;
      v98 = (*v97)[1];
      for (j = v98; ; v98 = j)
      {
        if (v99 == v98)
          goto LABEL_148;
        v102 = *v99;
        v103 = (uint64_t ***)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*v99 + 208))(*v99);
        v171 = v102;
        v104 = **v103;
        v105 = (*v103)[1];
        if (v104 != v105)
          break;
LABEL_185:
        v125 = MIL::IRObject::GetLocation(v171);
        (*(void (**)(void ***__return_ptr))(*(_QWORD *)v125 + 24))(&v191);
        if ((v193 & 0x80u) == 0)
          v126 = v193;
        else
          v126 = v192;
        v127 = v199;
        if ((v199 & 0x80u) != 0)
          v127 = v198;
        if (v126 == v127)
        {
          if ((v199 & 0x80u) == 0)
            p_DispatchUnit = (void **)&DispatchUnit;
          else
            p_DispatchUnit = DispatchUnit;
          if ((v193 & 0x80) != 0)
          {
            v100 = v191;
            v101 = memcmp(v191, p_DispatchUnit, v192);
            operator delete(v100);
            if (!v101)
              goto LABEL_206;
          }
          else
          {
            if (!v193)
              goto LABEL_206;
            v129 = 0;
            do
            {
              v130 = *((unsigned __int8 *)&v191 + v129);
              v131 = *((unsigned __int8 *)p_DispatchUnit + v129);
            }
            while (v130 == v131 && v193 - 1 != v129++);
            if (v130 == v131)
            {
LABEL_206:
              v133 = v167[2];
              if (0xAAAAAAAAAAAAAAABLL * ((v167[3] - v133) >> 3) <= a6)
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              v134 = (const void **)((char *)v133 + 24 * a6);
              v135 = *((char *)v134 + 23);
              if (v135 >= 0)
                v136 = *((unsigned __int8 *)v134 + 23);
              else
                v136 = (size_t)v134[1];
              v137 = v136 + 18;
              if (v136 + 18 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v137 >= 0x17)
              {
                v139 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v137 | 7) != 0x17)
                  v139 = v137 | 7;
                v140 = v139 + 1;
                v138 = operator new(v139 + 1);
                v177 = v136 + 18;
                v178 = v140 | 0x8000000000000000;
                v176 = v138;
              }
              else
              {
                v177 = 0;
                v178 = 0;
                v176 = 0;
                v138 = &v176;
                HIBYTE(v178) = v136 + 18;
                if (!v136)
                  goto LABEL_221;
              }
              if (v135 >= 0)
                v141 = v134;
              else
                v141 = *v134;
              memmove(v138, v141, v136);
LABEL_221:
              strcpy((char *)v138 + v136, "_validationMessage");
              Espresso::AOT::ValidationMessage::GetMessage(v163, (uint64_t)&v172);
              MIL::IRTensorValueType::MakeStringValue();
              v174 = v191;
              if (v191)
              {
                v142 = (std::__shared_weak_count *)operator new();
                v143 = v191;
                v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
                v142->__shared_owners_ = 0;
                v142->__shared_weak_owners_ = 0;
                v142[1].__vftable = (std::__shared_weak_count_vtbl *)v143;
              }
              else
              {
                v142 = 0;
              }
              v175 = v142;
              v191 = 0;
              MIL::IRObject::SetAttribute();
              v144 = v175;
              if (!v175)
                goto LABEL_228;
              v145 = (unint64_t *)&v175->__shared_owners_;
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
                v147 = v191;
                v191 = 0;
                if (v147)
LABEL_229:
                  (*((void (**)(void **))*v147 + 1))(v147);
              }
              else
              {
LABEL_228:
                v147 = v191;
                v191 = 0;
                if (v147)
                  goto LABEL_229;
              }
              if (v173 < 0)
              {
                operator delete(v172);
                if (SHIBYTE(v178) < 0)
                  goto LABEL_234;
              }
              else if (SHIBYTE(v178) < 0)
              {
LABEL_234:
                operator delete(v176);
              }
              v165 = 1;
LABEL_148:
              v96 = v195;
              if (v195 == v194)
              {
                if ((v165 & 1) == 0)
                {
                  v149 = (void **)&DispatchUnit;
                  if ((v199 & 0x80u) != 0)
                    v149 = DispatchUnit;
                  v191 = v149;
                  Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Could not find a op in the input program. op: %s", &v191);
                }
                if (v195)
                  operator delete(v195);
                if ((char)v199 < 0)
                  operator delete(DispatchUnit);
                v92 = v159;
                v93 = v160 + 2;
                goto LABEL_145;
              }
              goto LABEL_149;
            }
          }
        }
        else if ((v193 & 0x80) != 0)
        {
          operator delete(v191);
        }
        v99 += 2;
      }
      v106 = v195;
      while (1)
      {
        v108 = *v104;
        if (v106 < v196)
        {
          *(_QWORD *)v106 = v108;
          v107 = v106 + 8;
          goto LABEL_156;
        }
        v109 = v194;
        v110 = (v106 - v194) >> 3;
        v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v112 = v196 - v194;
        if ((v196 - v194) >> 2 > v111)
          v111 = v112 >> 2;
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
          v113 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v113 = v111;
        if (v113)
        {
          if (v113 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v114 = (char *)operator new(8 * v113);
          v115 = &v114[8 * v110];
          *(_QWORD *)v115 = v108;
          v107 = v115 + 8;
          if (v106 == v109)
          {
LABEL_167:
            v194 = v115;
            v195 = v107;
            v196 = &v114[8 * v113];
            if (!v106)
              goto LABEL_156;
LABEL_174:
            operator delete(v106);
            goto LABEL_156;
          }
        }
        else
        {
          v114 = 0;
          v115 = (char *)(8 * v110);
          *(_QWORD *)(8 * v110) = v108;
          v107 = (char *)(8 * v110 + 8);
          if (v106 == v109)
            goto LABEL_167;
        }
        v116 = v106 - 8 - v109;
        if (v116 < 0x168)
        {
          v117 = v106;
          goto LABEL_172;
        }
        if (&v114[v106 - v109 - 8 - (v116 & 0xFFFFFFFFFFFFFFF8)] > &v114[v106 - v109 - 8])
          break;
        if (&v106[-(v116 & 0xFFFFFFFFFFFFFFF8) - 8] > v106 - 8)
        {
          v117 = v106;
          goto LABEL_172;
        }
        if ((unint64_t)(v109 - v114) < 0x20)
        {
          v117 = v106;
          goto LABEL_172;
        }
        v119 = (v116 >> 3) + 1;
        v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
        v117 = &v106[-v120];
        v115 -= v120;
        v121 = &v114[8 * v110 - 16];
        v122 = v106 - 16;
        v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v124 = *(_OWORD *)v122;
          *((_OWORD *)v121 - 1) = *((_OWORD *)v122 - 1);
          *(_OWORD *)v121 = v124;
          v121 -= 32;
          v122 -= 32;
          v123 -= 4;
        }
        while (v123);
        if (v119 != (v119 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_172;
LABEL_173:
        v106 = v194;
        v194 = v115;
        v195 = v107;
        v196 = &v114[8 * v113];
        if (v106)
          goto LABEL_174;
LABEL_156:
        v195 = v107;
        v104 += 2;
        v106 = v107;
        if (v104 == v105)
          goto LABEL_185;
      }
      v117 = v106;
      do
      {
LABEL_172:
        v118 = *((_QWORD *)v117 - 1);
        v117 -= 8;
        *((_QWORD *)v115 - 1) = v118;
        v115 -= 8;
      }
      while (v117 != v109);
      goto LABEL_173;
    }
  }
  return result;
}

void sub_19107F628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;
  uint64_t v58;

  v58 = *(_QWORD *)(v56 - 112);
  *(_QWORD *)(v56 - 112) = 0;
  if (!v58)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILSegmenterAnalytics::UpdateWithOpToBackend(uint64_t a1, _QWORD *a2)
{
  uint64_t Function;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ***v12;
  const char *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  const char *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  unint64_t v55;
  std::string v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void *__p[2];
  _BYTE v60[7];
  char v61;
  uint8_t v62;
  char v63[15];
  char *v64;
  char *v65;
  char *v66;
  _DWORD v67[2];
  _BYTE buf[12];
  __int16 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)a1)
    return;
  Function = MIL::IRProgram::GetFunction();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  MIL::IRTensorValueType::MakeScalar();
  v65 = 0;
  v5 = (char *)operator new(8uLL);
  v6 = 0;
  v51 = v4;
  *(_QWORD *)v5 = v4;
  v7 = v5 + 8;
  v64 = v5;
  v66 = v5 + 8;
  v52 = a1;
  while (2)
  {
    v8 = *((_QWORD *)v7 - 1);
    v65 = v7 - 8;
    v9 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
    v11 = **v9;
    v10 = (*v9)[1];
    for (i = v10; ; v10 = i)
    {
      if (v11 == v10)
        goto LABEL_3;
      v12 = (uint64_t ***)(*(uint64_t (**)(void))(**(_QWORD **)v11 + 208))();
      v55 = v6;
      v15 = **v12;
      v14 = (*v12)[1];
      if (v15 != v14)
      {
        v16 = v65;
        while (1)
        {
          v18 = *v15;
          if (v16 < v66)
          {
            *(_QWORD *)v16 = v18;
            v17 = (uint64_t)(v16 + 8);
            goto LABEL_10;
          }
          v19 = v64;
          v20 = (v16 - v64) >> 3;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v22 = v66 - v64;
          if ((v66 - v64) >> 2 > v21)
            v21 = v22 >> 2;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            if (v23 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v24 = operator new(8 * v23);
            v25 = &v24[8 * v20];
            *(_QWORD *)v25 = v18;
            v17 = (uint64_t)(v25 + 8);
            if (v16 == v19)
            {
LABEL_21:
              v64 = v25;
              v65 = (char *)v17;
              v66 = &v24[8 * v23];
              if (!v16)
                goto LABEL_10;
LABEL_28:
              operator delete(v16);
              goto LABEL_10;
            }
          }
          else
          {
            v24 = 0;
            v25 = (char *)(8 * v20);
            *(_QWORD *)(8 * v20) = v18;
            v17 = 8 * v20 + 8;
            if (v16 == v19)
              goto LABEL_21;
          }
          v26 = v16 - 8 - v19;
          if (v26 < 0x168)
          {
            v27 = v16;
            goto LABEL_26;
          }
          if (&v24[v16 - v19 - 8 - (v26 & 0xFFFFFFFFFFFFFFF8)] > &v24[v16 - v19 - 8])
            break;
          if (&v16[-(v26 & 0xFFFFFFFFFFFFFFF8) - 8] > v16 - 8)
          {
            v27 = v16;
            goto LABEL_26;
          }
          if ((unint64_t)(v19 - v24) < 0x20)
          {
            v27 = v16;
            goto LABEL_26;
          }
          v29 = (v26 >> 3) + 1;
          v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          v27 = &v16[-v30];
          v25 -= v30;
          v31 = &v24[8 * v20 - 16];
          v32 = v16 - 16;
          v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *v31 = v34;
            v31 -= 2;
            v32 -= 32;
            v33 -= 4;
          }
          while (v33);
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_26;
LABEL_27:
          v16 = v64;
          v64 = v25;
          v65 = (char *)v17;
          v66 = &v24[8 * v23];
          if (v16)
            goto LABEL_28;
LABEL_10:
          v65 = (char *)v17;
          v15 += 2;
          v16 = (char *)v17;
          if (v15 == v14)
            goto LABEL_39;
        }
        v27 = v16;
        do
        {
LABEL_26:
          v28 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *((_QWORD *)v25 - 1) = v28;
          v25 -= 8;
        }
        while (v27 != v19);
        goto LABEL_27;
      }
LABEL_39:
      v6 = v55;
      if (v55 >= (uint64_t)(a2[1] - *a2) >> 3)
        break;
      v35 = *(_QWORD *)(*a2 + 8 * v55);
      strcpy((char *)__p, "SelectedBackend");
      *(_DWORD *)v60 = v67[0];
      *(_DWORD *)&v60[3] = *(_DWORD *)((char *)v67 + 3);
      v61 = 15;
      v36 = *(_QWORD *)(v52 + 16);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v52 + 24) - v36) >> 3) <= v35)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v37 = (__int128 *)(v36 + 24 * v35);
      if (*((char *)v37 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
      }
      else
      {
        v38 = *v37;
        v56.__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v38;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v57 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        v39 = (std::__shared_weak_count *)operator new();
        v40 = *(std::__shared_weak_count_vtbl **)buf;
        v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v39->__shared_owners_ = 0;
        v39->__shared_weak_owners_ = 0;
        v39[1].__vftable = v40;
      }
      else
      {
        v39 = 0;
      }
      v58 = v39;
      *(_QWORD *)buf = 0;
      MIL::IRObject::SetAttribute();
      v41 = v58;
      if (!v58)
        goto LABEL_51;
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (v43)
      {
LABEL_51:
        v44 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (!v44)
          goto LABEL_53;
LABEL_52:
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        goto LABEL_53;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      v44 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v44)
        goto LABEL_52;
LABEL_53:
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((v61 & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((v61 & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(__p[0]);
LABEL_5:
      v6 = v55 + 1;
      v11 += 16;
    }
    v45 = Espresso::espresso_os_log_subsystem(0, v13);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      Espresso::AOT::MILSegmenterAnalytics::UpdateWithOpToBackend(&v62, v63, v45);
    v47 = Espresso::espresso_os_log_subsystem(0, v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 56))(v51);
      v49 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v48 + 8) - **(_QWORD **)v48) >> 4;
      v50 = (uint64_t)(a2[1] - *a2) >> 3;
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v49;
      v69 = 2048;
      v70 = v50;
      _os_log_error_impl(&dword_190DAF000, v47, OS_LOG_TYPE_ERROR, "Input Program had %lu Ops. Op to backend mapping had %lu ops", buf, 0x16u);
    }
LABEL_3:
    v7 = v65;
    if (v64 != v65)
      continue;
    break;
  }
  if (v64)
    operator delete(v64);
}

void sub_19107FE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILSegmenterAnalytics::UpdateTransferCost(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  MIL::IRTensorValueType *Scalar;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  std::string::size_type v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  if (*(_BYTE *)a1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 64))(&v30, *(_QWORD *)(a1 + 8), a1 + 40);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    std::operator+<char>();
    v8 = std::string::append(&v25, "_Dest_");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = *(char *)(a4 + 23);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)a4;
    else
      v11 = *(const std::string::value_type **)a4;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a4 + 23);
    else
      v12 = *(_QWORD *)(a4 + 8);
    v13 = std::string::append(&v26, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v27, "_ms");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v29 = v15->__r_.__value_.__r.__words[2];
    v28 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    MIL::IRTensorValueType::MakeFloat64Value(Scalar, a2);
    if (v23)
    {
      v17 = (std::__shared_weak_count *)operator new();
      v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
      v17->__shared_owners_ = 0;
      v17->__shared_weak_owners_ = 0;
      v17[1].__vftable = v23;
    }
    else
    {
      v17 = 0;
    }
    v24 = v17;
    MIL::IRObject::SetAttribute();
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(v29) < 0)
    {
      operator delete((void *)v28);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_18:
        if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_19;
        goto LABEL_24;
      }
    }
    else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_25;
    }
LABEL_24:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_20:
      v20 = v31;
      if (!v31)
        return;
LABEL_26:
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      return;
    }
LABEL_25:
    operator delete(v25.__r_.__value_.__l.__data_);
    v20 = v31;
    if (!v31)
      return;
    goto LABEL_26;
  }
}

void sub_1910801D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    if ((*(char *)(v30 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v30 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v30 - 96));
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a23 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(__p);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a17 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a18);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_6:
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v30 - 64);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v30 - 64);
  _Unwind_Resume(a1);
}

void sub_1910802C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void sub_1910802D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILSegmenterAnalytics::UpdateLaunchCost(uint64_t a1, double a2)
{
  MIL::IRTensorValueType *Scalar;
  std::string *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::string v15;
  void *__p[2];
  std::string::size_type v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  if (*(_BYTE *)a1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 64))(&v18, *(_QWORD *)(a1 + 8), a1 + 40);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    std::operator+<char>();
    v5 = std::string::append(&v15, "_ms");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v17 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    MIL::IRTensorValueType::MakeFloat64Value(Scalar, a2);
    if (v13)
    {
      v7 = (std::__shared_weak_count *)operator new();
      v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
      v7->__shared_owners_ = 0;
      v7->__shared_weak_owners_ = 0;
      v7[1].__vftable = v13;
    }
    else
    {
      v7 = 0;
    }
    v14 = v7;
    MIL::IRObject::SetAttribute();
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (SHIBYTE(v17) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_12:
        v10 = v19;
        if (!v19)
          return;
LABEL_16:
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
    }
    else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v15.__r_.__value_.__l.__data_);
    v10 = v19;
    if (!v19)
      return;
    goto LABEL_16;
  }
}

void sub_1910804DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23 - 64);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23 - 64);
  _Unwind_Resume(a1);
}

void sub_191080578(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void sub_19108058C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILSegmenterAnalytics::ConsolidateMetadata(Espresso::AOT::MILSegmenterAnalytics *this)
{
  uint64_t Function;
  uint64_t v3;
  uint64_t Scalar;
  uint64_t **v5;
  uint64_t v6;
  std::string::size_type *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  std::string::size_type v11;
  _QWORD *v12;
  std::string::size_type v13;
  char *v14;
  std::string::size_type *v15;
  std::string::size_type *v16;
  std::string::size_type v17;
  _QWORD *v18;
  std::string::size_type v19;
  char *v20;
  std::string::size_type *v21;
  std::string::size_type *v22;
  std::string::size_type *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  std::string::size_type *v29;
  __int128 v30;
  std::string::size_type *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::string::size_type *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  std::string::size_type *v41;
  __int128 v42;
  std::string::size_type *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string::size_type v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string::size_type v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  MIL::IRListValue *v60;
  __int128 *v61;
  __int128 *v62;
  char v63;
  __int128 v64;
  int v65;
  size_t size;
  unint64_t v67;
  __int128 *p_dst;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  uint64_t Attribute;
  MIL::IRValue *v73;
  double v74;
  double v75;
  _QWORD *v76;
  std::string::size_type v77;
  _QWORD *v78;
  std::string::size_type v79;
  std::string::size_type v80;
  _QWORD *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  char v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::string::size_type v92;
  std::string::size_type v93;
  int v94;
  size_t v95;
  unint64_t v96;
  __int128 *v97;
  uint64_t v98;
  uint64_t v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  MIL::IRDictionaryValue *v106;
  __int128 *v107;
  __int128 *v108;
  char v109;
  __int128 v110;
  int v111;
  size_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  std::string *v117;
  uint64_t v118;
  MIL::IRValue *v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  _QWORD *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  size_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  std::string *v144;
  std::__shared_weak_count *v145;
  std::string::size_type v146;
  unint64_t *v147;
  unint64_t v148;
  MIL::IRDictionaryValue *v149;
  _QWORD *v150;
  void *v151;
  _QWORD *v152;
  void *v153;
  std::string::size_type *v154;
  std::string::size_type *v155;
  _QWORD *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  Espresso::AOT::MILSegmenterAnalytics *v175;
  MIL::IRTensorValueType *v176;
  std::__shared_weak_count *v177;
  void *v178[3];
  std::string v179;
  uint64_t v180;
  std::string v181;
  uint64_t v182;
  std::string v183;
  std::string v184;
  __int128 __dst;
  __int128 v186;
  int v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  void *v190[3];
  std::string v191;
  _BYTE v192[32];
  int v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  char __p[15];
  char v197;
  _BYTE v198[7];
  char v199;
  void *v200[2];
  char v201;
  std::string v202;
  std::string::size_type *v203;
  std::string::size_type *v204;
  char *i;
  int v206;
  char v207;
  int v208;
  __int16 v209;
  _DWORD v210[2];
  std::string v211;

  Function = MIL::IRProgram::GetFunction();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  MIL::IRTensorValueType::MakeScalar();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  Scalar = MIL::IRTensorValueType::MakeScalar();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  MIL::IRListValueType::Make();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v176 = (MIL::IRTensorValueType *)Scalar;
  MIL::IRDictionaryValueType::Make();
  v175 = this;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  MIL::IRDictionaryValueType::Make();
  v5 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v6 = **v5;
  v173 = (*v5)[1];
  if (v6 != v173)
  {
    while (1)
    {
      v174 = v6;
      v203 = 0;
      v204 = 0;
      i = 0;
      v9 = (__int128 *)*((_QWORD *)v175 + 2);
      v8 = (__int128 *)*((_QWORD *)v175 + 3);
      while (v9 != v8)
      {
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v192, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
        }
        else
        {
          v10 = *v9;
          *(_QWORD *)&v192[16] = *((_QWORD *)v9 + 2);
          *(_OWORD *)v192 = v10;
        }
        if (MIL::IRObject::TryGetAttribute())
        {
          if ((v192[23] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)v192, *(std::string::size_type *)&v192[8]);
          else
            v202 = *(std::string *)v192;
          MIL::IRTensorValueType::MakeStringValue();
          v17 = v211.__r_.__value_.__r.__words[0];
          *(_QWORD *)&__dst = v211.__r_.__value_.__r.__words[0];
          if (v211.__r_.__value_.__r.__words[0])
          {
            v18 = (_QWORD *)operator new();
            v19 = v211.__r_.__value_.__r.__words[0];
            *v18 = &unk_1E2DC2BE0;
            v18[1] = 0;
            v18[2] = 0;
            v18[3] = v19;
            *((_QWORD *)&__dst + 1) = v18;
            v211.__r_.__value_.__r.__words[0] = 0;
            v21 = v204;
            v20 = i;
            if (v204 < (std::string::size_type *)i)
              goto LABEL_22;
LABEL_24:
            v23 = v203;
            v24 = ((char *)v21 - (char *)v203) >> 4;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 60)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v26 = v20 - (char *)v203;
            if (v26 >> 3 > v25)
              v25 = v26 >> 3;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
              v27 = 0xFFFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            if (v27 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v28 = (char *)operator new(16 * v27);
            v29 = (std::string::size_type *)&v28[16 * v24];
            *v29 = v17;
            v22 = v29 + 2;
            *(_QWORD *)&v28[(char *)v21 - (char *)v23 + 8] = v18;
            __dst = 0uLL;
            if (v21 == v23)
            {
              v203 = v29;
              v204 = v29 + 2;
              i = &v28[16 * v27];
            }
            else
            {
              do
              {
                v30 = *((_OWORD *)v21 - 1);
                v21 -= 2;
                *((_OWORD *)v29 - 1) = v30;
                v29 -= 2;
                *v21 = 0;
                v21[1] = 0;
              }
              while (v21 != v23);
              v21 = v203;
              v31 = v204;
              v203 = v29;
              v204 = v22;
              for (i = &v28[16 * v27]; v31 != v21; v31 -= 2)
              {
                v32 = (std::__shared_weak_count *)*(v31 - 1);
                if (v32)
                {
                  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
                  do
                    v34 = __ldaxr(p_shared_owners);
                  while (__stlxr(v34 - 1, p_shared_owners));
                  if (!v34)
                  {
                    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                    std::__shared_weak_count::__release_weak(v32);
                  }
                }
              }
            }
            if (v21)
              operator delete(v21);
          }
          else
          {
            __dst = 0uLL;
            v18 = 0;
            v211.__r_.__value_.__r.__words[0] = 0;
            v21 = v204;
            v20 = i;
            if (v204 >= (std::string::size_type *)i)
              goto LABEL_24;
LABEL_22:
            *v21 = v17;
            v21[1] = (std::string::size_type)v18;
            v22 = v21 + 2;
            __dst = 0uLL;
          }
          v204 = v22;
          v47 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
          if (!*((_QWORD *)&__dst + 1))
            goto LABEL_66;
          v48 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
            v50 = v211.__r_.__value_.__r.__words[0];
            v211.__r_.__value_.__r.__words[0] = 0;
            if (v50)
LABEL_67:
              (*(void (**)(std::string::size_type))(*(_QWORD *)v50 + 8))(v50);
          }
          else
          {
LABEL_66:
            v50 = v211.__r_.__value_.__r.__words[0];
            v211.__r_.__value_.__r.__words[0] = 0;
            if (v50)
              goto LABEL_67;
          }
          if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v202.__r_.__value_.__l.__data_);
          MIL::IRObject::RemoveAttribute();
LABEL_83:
          if ((v192[23] & 0x80000000) == 0)
            goto LABEL_8;
          goto LABEL_84;
        }
        v201 = 11;
        strcpy((char *)v200, "unsupported");
        MIL::IRTensorValueType::MakeStringValue();
        v11 = v211.__r_.__value_.__r.__words[0];
        *(_QWORD *)&__dst = v211.__r_.__value_.__r.__words[0];
        if (v211.__r_.__value_.__r.__words[0])
        {
          v12 = (_QWORD *)operator new();
          v13 = v211.__r_.__value_.__r.__words[0];
          *v12 = &unk_1E2DC2BE0;
          v12[1] = 0;
          v12[2] = 0;
          v12[3] = v13;
          *((_QWORD *)&__dst + 1) = v12;
          v211.__r_.__value_.__r.__words[0] = 0;
          v15 = v204;
          v14 = i;
          if (v204 < (std::string::size_type *)i)
            goto LABEL_18;
        }
        else
        {
          __dst = 0uLL;
          v12 = 0;
          v211.__r_.__value_.__r.__words[0] = 0;
          v15 = v204;
          v14 = i;
          if (v204 < (std::string::size_type *)i)
          {
LABEL_18:
            *v15 = v11;
            v15[1] = (std::string::size_type)v12;
            v16 = v15 + 2;
            __dst = 0uLL;
            goto LABEL_76;
          }
        }
        v35 = v203;
        v36 = ((char *)v15 - (char *)v203) >> 4;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v38 = v14 - (char *)v203;
        if (v38 >> 3 > v37)
          v37 = v38 >> 3;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
          v39 = 0xFFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v40 = (char *)operator new(16 * v39);
        v41 = (std::string::size_type *)&v40[16 * v36];
        *v41 = v11;
        v16 = v41 + 2;
        *(_QWORD *)&v40[(char *)v15 - (char *)v35 + 8] = v12;
        __dst = 0uLL;
        if (v15 == v35)
        {
          v203 = v41;
          v204 = v41 + 2;
          i = &v40[16 * v39];
        }
        else
        {
          do
          {
            v42 = *((_OWORD *)v15 - 1);
            v15 -= 2;
            *((_OWORD *)v41 - 1) = v42;
            v41 -= 2;
            *v15 = 0;
            v15[1] = 0;
          }
          while (v15 != v35);
          v15 = v203;
          v43 = v204;
          v203 = v41;
          v204 = v16;
          for (i = &v40[16 * v39]; v43 != v15; v43 -= 2)
          {
            v44 = (std::__shared_weak_count *)*(v43 - 1);
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
          }
        }
        if (v15)
          operator delete(v15);
LABEL_76:
        v204 = v16;
        v51 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
        if (!*((_QWORD *)&__dst + 1))
          goto LABEL_80;
        v52 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (v53)
        {
LABEL_80:
          v54 = v211.__r_.__value_.__r.__words[0];
          v211.__r_.__value_.__r.__words[0] = 0;
          if (!v54)
            goto LABEL_82;
LABEL_81:
          (*(void (**)(std::string::size_type))(*(_QWORD *)v54 + 8))(v54);
          goto LABEL_82;
        }
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
        v54 = v211.__r_.__value_.__r.__words[0];
        v211.__r_.__value_.__r.__words[0] = 0;
        if (v54)
          goto LABEL_81;
LABEL_82:
        if ((v201 & 0x80000000) == 0)
          goto LABEL_83;
        operator delete(v200[0]);
        if ((v192[23] & 0x80000000) == 0)
          goto LABEL_8;
LABEL_84:
        operator delete(*(void **)v192);
LABEL_8:
        v9 = (__int128 *)((char *)v9 + 24);
      }
      strcpy(__p, "BackendSupport");
      v197 = 0;
      *(_DWORD *)v198 = v210[0];
      *(_DWORD *)&v198[3] = *(_DWORD *)((char *)v210 + 3);
      v199 = 14;
      MIL::IRListValueType::MakeValue();
      v194 = *(_QWORD *)v192;
      if (*(_QWORD *)v192)
      {
        v55 = (std::__shared_weak_count *)operator new();
        v56 = *(std::__shared_weak_count_vtbl **)v192;
        v55->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BA8;
        v55->__shared_owners_ = 0;
        v55->__shared_weak_owners_ = 0;
        v55[1].__vftable = v56;
      }
      else
      {
        v55 = 0;
      }
      v195 = v55;
      *(_QWORD *)v192 = 0;
      MIL::IRObject::SetAttribute();
      v57 = v195;
      if (!v195)
        goto LABEL_94;
      v58 = (unint64_t *)&v195->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
        v60 = *(MIL::IRListValue **)v192;
        *(_QWORD *)v192 = 0;
        if (v60)
        {
LABEL_95:
          MIL::IRListValue::~IRListValue(v60);
          MEMORY[0x19401CD90]();
        }
      }
      else
      {
LABEL_94:
        v60 = *(MIL::IRListValue **)v192;
        *(_QWORD *)v192 = 0;
        if (v60)
          goto LABEL_95;
      }
      if (v199 < 0)
        operator delete(*(void **)__p);
      memset(v192, 0, sizeof(v192));
      v193 = 1065353216;
      v61 = (__int128 *)*((_QWORD *)v175 + 2);
      v62 = (__int128 *)*((_QWORD *)v175 + 3);
      if (v61 == v62)
        goto LABEL_184;
      v63 = 0;
LABEL_102:
      if (*((char *)v61 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)v61, *((_QWORD *)v61 + 1));
      }
      else
      {
        v64 = *v61;
        v211.__r_.__value_.__r.__words[2] = *((_QWORD *)v61 + 2);
        *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v64;
      }
      v65 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v211.__r_.__value_.__r.__words[2]);
      else
        size = v211.__r_.__value_.__l.__size_;
      v67 = size + 17;
      if (size + 17 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v67 >= 0x17)
      {
        v69 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17)
          v69 = v67 | 7;
        v70 = v69 + 1;
        p_dst = (__int128 *)operator new(v69 + 1);
        *((_QWORD *)&__dst + 1) = size + 17;
        *(_QWORD *)&v186 = v70 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        *(_QWORD *)&v186 = 0;
        __dst = 0uLL;
        p_dst = &__dst;
        BYTE7(v186) = size + 17;
        if (!size)
          goto LABEL_119;
      }
      v71 = v65 >= 0 ? &v211 : (std::string *)v211.__r_.__value_.__r.__words[0];
      memmove(p_dst, v71, size);
LABEL_119:
      strcpy((char *)p_dst + size, "_estimatedRuntime");
      Attribute = MIL::IRObject::TryGetAttribute();
      v73 = (MIL::IRValue *)Attribute;
      if (SBYTE7(v186) < 0)
        break;
      if (!Attribute)
        goto LABEL_100;
LABEL_123:
      MIL::IRValue::AsTensor(v73);
      MIL::IRValue::GetScalar<double>();
      v75 = v74;
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v191, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
      else
        v191 = v211;
      MIL::IRTensorValueType::MakeStringValue();
      MIL::IRTensorValueType::MakeFloat64Value(v176, v75);
      v76 = operator new(0x30uLL);
      *(_QWORD *)&__dst = v76;
      *((_QWORD *)&__dst + 1) = &v192[16];
      LOBYTE(v186) = 0;
      v77 = v184.__r_.__value_.__r.__words[0];
      v76[2] = v184.__r_.__value_.__r.__words[0];
      *v76 = 0;
      v76[1] = 0;
      if (v77)
      {
        v78 = (_QWORD *)operator new();
        v79 = v184.__r_.__value_.__r.__words[0];
        *v78 = &unk_1E2DC2BE0;
        v78[1] = 0;
        v78[2] = 0;
        v78[3] = v79;
        v184.__r_.__value_.__r.__words[0] = 0;
        v80 = v183.__r_.__value_.__r.__words[0];
        v76[3] = v78;
        v76[4] = v80;
        if (v80)
          goto LABEL_128;
LABEL_130:
        v81 = 0;
      }
      else
      {
        v184.__r_.__value_.__r.__words[0] = 0;
        v83 = v183.__r_.__value_.__r.__words[0];
        v76[3] = 0;
        v76[4] = v83;
        if (!v83)
          goto LABEL_130;
LABEL_128:
        v81 = (_QWORD *)operator new();
        v82 = v183.__r_.__value_.__r.__words[0];
        *v81 = &unk_1E2DC2BE0;
        v81[1] = 0;
        v81[2] = 0;
        v81[3] = v82;
      }
      v76[5] = v81;
      v183.__r_.__value_.__r.__words[0] = 0;
      LOBYTE(v186) = 1;
      v76[1] = MIL::IRValueMapHasher::operator()();
      std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_unique(v192, (_QWORD *)__dst);
      if ((v84 & 1) == 0)
      {
        v85 = (_QWORD *)__dst;
        *(_QWORD *)&__dst = 0;
        if (v85)
        {
          if ((_BYTE)v186)
          {
            v86 = (std::__shared_weak_count *)v85[5];
            if (!v86)
              goto LABEL_138;
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
              v89 = (std::__shared_weak_count *)v85[3];
              if (v89)
              {
LABEL_139:
                v90 = (unint64_t *)&v89->__shared_owners_;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
            }
            else
            {
LABEL_138:
              v89 = (std::__shared_weak_count *)v85[3];
              if (v89)
                goto LABEL_139;
            }
          }
          operator delete(v85);
        }
      }
      v92 = v183.__r_.__value_.__r.__words[0];
      v183.__r_.__value_.__r.__words[0] = 0;
      if (v92)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v92 + 8))(v92);
      v93 = v184.__r_.__value_.__r.__words[0];
      v184.__r_.__value_.__r.__words[0] = 0;
      if (v93)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v93 + 8))(v93);
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v191.__r_.__value_.__l.__data_);
      v94 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v95 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
      else
        v95 = v211.__r_.__value_.__l.__size_;
      v96 = v95 + 17;
      if (v95 + 17 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v96 >= 0x17)
      {
        v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v96 | 7) != 0x17)
          v98 = v96 | 7;
        v99 = v98 + 1;
        v97 = (__int128 *)operator new(v98 + 1);
        *((_QWORD *)&__dst + 1) = v95 + 17;
        *(_QWORD *)&v186 = v99 | 0x8000000000000000;
        *(_QWORD *)&__dst = v97;
      }
      else
      {
        *(_QWORD *)&v186 = 0;
        __dst = 0uLL;
        v97 = &__dst;
        BYTE7(v186) = v95 + 17;
        if (!v95)
          goto LABEL_165;
      }
      if (v94 >= 0)
        v100 = &v211;
      else
        v100 = (std::string *)v211.__r_.__value_.__r.__words[0];
      memmove(v97, v100, v95);
LABEL_165:
      strcpy((char *)v97 + v95, "_estimatedRuntime");
      MIL::IRObject::RemoveAttribute();
      if ((SBYTE7(v186) & 0x80000000) == 0)
      {
        v63 = 1;
        if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_169;
        goto LABEL_101;
      }
      operator delete((void *)__dst);
      v63 = 1;
      if ((SHIBYTE(v211.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_101;
LABEL_169:
      operator delete(v211.__r_.__value_.__l.__data_);
      v61 = (__int128 *)((char *)v61 + 24);
      if (v61 != v62)
        goto LABEL_102;
LABEL_170:
      if ((v63 & 1) != 0)
      {
        strcpy((char *)v190, "EstimatedRuntime");
        *(_DWORD *)((char *)&v190[2] + 1) = v208;
        *(_WORD *)((char *)&v190[2] + 5) = v209;
        HIBYTE(v190[2]) = 16;
        MIL::IRDictionaryValueType::MakeValue();
        v188 = __dst;
        if ((_QWORD)__dst)
        {
          v101 = (std::__shared_weak_count *)operator new();
          v102 = (std::__shared_weak_count_vtbl *)__dst;
          v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C18;
          v101->__shared_owners_ = 0;
          v101->__shared_weak_owners_ = 0;
          v101[1].__vftable = v102;
        }
        else
        {
          v101 = 0;
        }
        v189 = v101;
        *(_QWORD *)&__dst = 0;
        MIL::IRObject::SetAttribute();
        v103 = v189;
        if (!v189)
          goto LABEL_180;
        v104 = (unint64_t *)&v189->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
          v106 = (MIL::IRDictionaryValue *)__dst;
          *(_QWORD *)&__dst = 0;
          if (v106)
          {
LABEL_181:
            MIL::IRDictionaryValue::~IRDictionaryValue(v106);
            MEMORY[0x19401CD90]();
          }
        }
        else
        {
LABEL_180:
          v106 = (MIL::IRDictionaryValue *)__dst;
          *(_QWORD *)&__dst = 0;
          if (v106)
            goto LABEL_181;
        }
        if (SHIBYTE(v190[2]) < 0)
          operator delete(v190[0]);
      }
LABEL_184:
      __dst = 0u;
      v186 = 0u;
      v187 = 1065353216;
      v107 = (__int128 *)*((_QWORD *)v175 + 2);
      v108 = (__int128 *)*((_QWORD *)v175 + 3);
      if (v107 == v108)
        goto LABEL_275;
      v109 = 0;
      while (2)
      {
        while (2)
        {
          if (*((char *)v107 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)v107, *((_QWORD *)v107 + 1));
          }
          else
          {
            v110 = *v107;
            v184.__r_.__value_.__r.__words[2] = *((_QWORD *)v107 + 2);
            *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v110;
          }
          v111 = SHIBYTE(v184.__r_.__value_.__r.__words[2]);
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v112 = HIBYTE(v184.__r_.__value_.__r.__words[2]);
          else
            v112 = v184.__r_.__value_.__l.__size_;
          v113 = v112 + 18;
          if (v112 + 18 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v113 >= 0x17)
          {
            v115 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v113 | 7) != 0x17)
              v115 = v113 | 7;
            v116 = v115 + 1;
            v114 = operator new(v115 + 1);
            v211.__r_.__value_.__l.__size_ = v112 + 18;
            v211.__r_.__value_.__r.__words[2] = v116 | 0x8000000000000000;
            v211.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
          }
          else
          {
            memset(&v211, 0, sizeof(v211));
            v114 = &v211;
            *((_BYTE *)&v211.__r_.__value_.__s + 23) = v112 + 18;
            if (!v112)
              goto LABEL_205;
          }
          if (v111 >= 0)
            v117 = &v184;
          else
            v117 = (std::string *)v184.__r_.__value_.__r.__words[0];
          memmove(v114, v117, v112);
LABEL_205:
          strcpy((char *)v114 + v112, "_validationMessage");
          v118 = MIL::IRObject::TryGetAttribute();
          v119 = (MIL::IRValue *)v118;
          if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v211.__r_.__value_.__l.__data_);
            if (v119)
              goto LABEL_209;
LABEL_186:
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_263;
LABEL_187:
            v107 = (__int128 *)((char *)v107 + 24);
            if (v107 == v108)
              goto LABEL_264;
            continue;
          }
          break;
        }
        if (!v118)
          goto LABEL_186;
LABEL_209:
        MIL::IRValue::AsTensor(v119);
        MIL::IRValue::GetScalar<std::string>();
        if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v181, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
        else
          v181 = v184;
        MIL::IRTensorValueType::MakeStringValue();
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v179, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
        else
          v179 = v183;
        MIL::IRTensorValueType::MakeStringValue();
        v120 = operator new(0x30uLL);
        v211.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
        v211.__r_.__value_.__l.__size_ = (std::string::size_type)&v186;
        v211.__r_.__value_.__s.__data_[16] = 0;
        v121 = v182;
        v120[2] = v182;
        *v120 = 0;
        v120[1] = 0;
        if (v121)
        {
          v122 = (_QWORD *)operator new();
          v123 = v182;
          *v122 = &unk_1E2DC2BE0;
          v122[1] = 0;
          v122[2] = 0;
          v122[3] = v123;
          v182 = 0;
          v124 = v180;
          v120[3] = v122;
          v120[4] = v124;
          if (v124)
            goto LABEL_217;
LABEL_219:
          v125 = 0;
        }
        else
        {
          v182 = 0;
          v127 = v180;
          v120[3] = 0;
          v120[4] = v127;
          if (!v127)
            goto LABEL_219;
LABEL_217:
          v125 = (_QWORD *)operator new();
          v126 = v180;
          *v125 = &unk_1E2DC2BE0;
          v125[1] = 0;
          v125[2] = 0;
          v125[3] = v126;
        }
        v120[5] = v125;
        v180 = 0;
        v211.__r_.__value_.__s.__data_[16] = 1;
        v120[1] = MIL::IRValueMapHasher::operator()();
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_unique(&__dst, v211.__r_.__value_.__l.__data_);
        if ((v128 & 1) == 0)
        {
          v129 = (_QWORD *)v211.__r_.__value_.__r.__words[0];
          v211.__r_.__value_.__r.__words[0] = 0;
          if (v129)
          {
            if (v211.__r_.__value_.__s.__data_[16])
            {
              v130 = (std::__shared_weak_count *)v129[5];
              if (!v130)
                goto LABEL_227;
              v131 = (unint64_t *)&v130->__shared_owners_;
              do
                v132 = __ldaxr(v131);
              while (__stlxr(v132 - 1, v131));
              if (!v132)
              {
                ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                std::__shared_weak_count::__release_weak(v130);
                v133 = (std::__shared_weak_count *)v129[3];
                if (v133)
                {
LABEL_228:
                  v134 = (unint64_t *)&v133->__shared_owners_;
                  do
                    v135 = __ldaxr(v134);
                  while (__stlxr(v135 - 1, v134));
                  if (!v135)
                  {
                    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                    std::__shared_weak_count::__release_weak(v133);
                  }
                }
              }
              else
              {
LABEL_227:
                v133 = (std::__shared_weak_count *)v129[3];
                if (v133)
                  goto LABEL_228;
              }
            }
            operator delete(v129);
          }
        }
        v136 = v180;
        v180 = 0;
        if (v136)
          (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v179.__r_.__value_.__l.__data_);
          v137 = v182;
          v182 = 0;
          if (v137)
LABEL_238:
            (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
        }
        else
        {
          v137 = v182;
          v182 = 0;
          if (v137)
            goto LABEL_238;
        }
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v181.__r_.__value_.__l.__data_);
        v138 = SHIBYTE(v184.__r_.__value_.__r.__words[2]);
        if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v139 = HIBYTE(v184.__r_.__value_.__r.__words[2]);
        else
          v139 = v184.__r_.__value_.__l.__size_;
        v140 = v139 + 18;
        if (v139 + 18 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v140 >= 0x17)
        {
          v142 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v140 | 7) != 0x17)
            v142 = v140 | 7;
          v143 = v142 + 1;
          v141 = operator new(v142 + 1);
          v211.__r_.__value_.__l.__size_ = v139 + 18;
          v211.__r_.__value_.__r.__words[2] = v143 | 0x8000000000000000;
          v211.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
        }
        else
        {
          memset(&v211, 0, sizeof(v211));
          v141 = &v211;
          *((_BYTE *)&v211.__r_.__value_.__s + 23) = v139 + 18;
          if (!v139)
            goto LABEL_255;
        }
        if (v138 >= 0)
          v144 = &v184;
        else
          v144 = (std::string *)v184.__r_.__value_.__r.__words[0];
        memmove(v141, v144, v139);
LABEL_255:
        strcpy((char *)v141 + v139, "_validationMessage");
        MIL::IRObject::RemoveAttribute();
        if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v211.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_257;
        }
        else if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_257:
          v109 = 1;
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_263;
          goto LABEL_187;
        }
        operator delete(v183.__r_.__value_.__l.__data_);
        v109 = 1;
        if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_187;
LABEL_263:
        operator delete(v184.__r_.__value_.__l.__data_);
        v107 = (__int128 *)((char *)v107 + 24);
        if (v107 != v108)
          continue;
        break;
      }
LABEL_264:
      if ((v109 & 1) == 0)
        goto LABEL_275;
      strcpy((char *)v178, "ValidationMessage");
      *(_DWORD *)((char *)&v178[2] + 2) = v206;
      BYTE6(v178[2]) = v207;
      HIBYTE(v178[2]) = 17;
      MIL::IRDictionaryValueType::MakeValue();
      if (v211.__r_.__value_.__r.__words[0])
      {
        v145 = (std::__shared_weak_count *)operator new();
        v146 = v211.__r_.__value_.__r.__words[0];
        v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C18;
        v145->__shared_owners_ = 0;
        v145->__shared_weak_owners_ = 0;
        v145[1].__vftable = (std::__shared_weak_count_vtbl *)v146;
      }
      else
      {
        v145 = 0;
      }
      v177 = v145;
      v211.__r_.__value_.__r.__words[0] = 0;
      MIL::IRObject::SetAttribute();
      if (!v177)
        goto LABEL_272;
      v147 = (unint64_t *)&v177->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
        v149 = (MIL::IRDictionaryValue *)v211.__r_.__value_.__r.__words[0];
        v211.__r_.__value_.__r.__words[0] = 0;
        if (v149)
        {
LABEL_273:
          MIL::IRDictionaryValue::~IRDictionaryValue(v149);
          MEMORY[0x19401CD90]();
        }
      }
      else
      {
LABEL_272:
        v149 = (MIL::IRDictionaryValue *)v211.__r_.__value_.__r.__words[0];
        v211.__r_.__value_.__r.__words[0] = 0;
        if (v149)
          goto LABEL_273;
      }
      if ((SHIBYTE(v178[2]) & 0x80000000) == 0)
      {
LABEL_275:
        v150 = (_QWORD *)v186;
        if (!(_QWORD)v186)
          goto LABEL_276;
LABEL_305:
        while (2)
        {
          v166 = v150;
          v150 = (_QWORD *)*v150;
          v167 = (std::__shared_weak_count *)v166[5];
          if (!v167)
            goto LABEL_309;
          v168 = (unint64_t *)&v167->__shared_owners_;
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 - 1, v168));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
            std::__shared_weak_count::__release_weak(v167);
            v170 = (std::__shared_weak_count *)v166[3];
            if (v170)
            {
LABEL_310:
              v171 = (unint64_t *)&v170->__shared_owners_;
              do
                v172 = __ldaxr(v171);
              while (__stlxr(v172 - 1, v171));
              if (!v172)
              {
                ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                std::__shared_weak_count::__release_weak(v170);
              }
            }
          }
          else
          {
LABEL_309:
            v170 = (std::__shared_weak_count *)v166[3];
            if (v170)
              goto LABEL_310;
          }
          operator delete(v166);
          if (!v150)
            goto LABEL_276;
          continue;
        }
      }
      operator delete(v178[0]);
      v150 = (_QWORD *)v186;
      if ((_QWORD)v186)
        goto LABEL_305;
LABEL_276:
      v151 = (void *)__dst;
      *(_QWORD *)&__dst = 0;
      if (v151)
        operator delete(v151);
      v152 = *(_QWORD **)&v192[16];
      if (*(_QWORD *)&v192[16])
      {
        do
        {
          v156 = v152;
          v152 = (_QWORD *)*v152;
          v157 = (std::__shared_weak_count *)v156[5];
          if (!v157)
            goto LABEL_289;
          v158 = (unint64_t *)&v157->__shared_owners_;
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
            v160 = (std::__shared_weak_count *)v156[3];
            if (v160)
            {
LABEL_290:
              v161 = (unint64_t *)&v160->__shared_owners_;
              do
                v162 = __ldaxr(v161);
              while (__stlxr(v162 - 1, v161));
              if (!v162)
              {
                ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                std::__shared_weak_count::__release_weak(v160);
              }
            }
          }
          else
          {
LABEL_289:
            v160 = (std::__shared_weak_count *)v156[3];
            if (v160)
              goto LABEL_290;
          }
          operator delete(v156);
        }
        while (v152);
      }
      v153 = *(void **)v192;
      *(_QWORD *)v192 = 0;
      if (v153)
        operator delete(v153);
      v154 = v203;
      if (v203)
      {
        v155 = v204;
        v7 = v203;
        if (v204 != v203)
        {
          do
          {
            v163 = (std::__shared_weak_count *)*(v155 - 1);
            if (v163)
            {
              v164 = (unint64_t *)&v163->__shared_owners_;
              do
                v165 = __ldaxr(v164);
              while (__stlxr(v165 - 1, v164));
              if (!v165)
              {
                ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                std::__shared_weak_count::__release_weak(v163);
              }
            }
            v155 -= 2;
          }
          while (v155 != v154);
          v7 = v203;
        }
        v204 = v154;
        operator delete(v7);
      }
      v6 = v174 + 16;
      if (v174 + 16 == v173)
        return;
    }
    operator delete((void *)__dst);
    if (v73)
      goto LABEL_123;
LABEL_100:
    if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_169;
LABEL_101:
    v61 = (__int128 *)((char *)v61 + 24);
    if (v61 == v62)
      goto LABEL_170;
    goto LABEL_102;
  }
}

void sub_191081B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;

  std::unique_ptr<MIL::IRDictionaryValue const>::~unique_ptr[abi:ne180100]((MIL::IRDictionaryValue **)(v68 - 144));
  if (a37 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a54);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a68);
  v70 = *(_QWORD *)(v68 - 192);
  if (v70)
  {
    v71 = *(_QWORD *)(v68 - 184);
    v72 = *(void **)(v68 - 192);
    if (v71 != v70)
    {
      do
      {
        v73 = *(std::__shared_weak_count **)(v71 - 8);
        if (v73)
        {
          p_shared_owners = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldaxr(p_shared_owners);
          while (__stlxr(v75 - 1, p_shared_owners));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v71 -= 16;
      }
      while (v71 != v70);
      v72 = *(void **)(v68 - 192);
    }
    *(_QWORD *)(v68 - 184) = v70;
    operator delete(v72);
  }
  _Unwind_Resume(a1);
}

MIL::IRDictionaryValue **std::unique_ptr<MIL::IRDictionaryValue const>::~unique_ptr[abi:ne180100](MIL::IRDictionaryValue **a1)
{
  MIL::IRDictionaryValue *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

BOOL Espresso::AOT::MILSegmenterAnalytics::Serialize(Espresso::AOT::MILSegmenterAnalytics *this, const std::__fs::filesystem::path *a2)
{
  int v2;
  std::__fs::filesystem::path::__string_view v5;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::__fs::filesystem::path::__string_view v9;
  std::string::size_type v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  std::__fs::filesystem::path *v14;
  NSObject *v15;
  _QWORD *v16;
  std::string *p_buf;
  uint64_t v18;
  std::string v20;
  std::string v21;
  std::string pn;
  std::string __p;
  std::string v24;
  std::__fs::filesystem::path v25;
  std::string __dst;
  std::string v27;
  std::string buf;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    Espresso::AOT::MILSegmenterAnalytics::ConsolidateMetadata(this);
    v5 = std::__fs::filesystem::path::__parent_path(a2);
    if (v5.__size_ >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v5.__size_ >= 0x17)
    {
      v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5.__size_ | 7) != 0x17)
        v7 = v5.__size_ | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5.__size_;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5.__size_;
      p_dst = &__dst;
      if (!v5.__size_)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5.__size_] = 0;
        v25.__pn_ = __dst;
        std::__fs::filesystem::__create_directories(&v25, 0);
        if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v25.__pn_.__r_.__value_.__l.__data_);
          if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_12;
        }
        else if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_12:
          __dst = a2->__pn_;
          goto LABEL_15;
        }
        std::string::__init_copy_ctor_external(&__dst, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
LABEL_15:
        v9 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&__dst);
        if (v9.__size_)
        {
          v10 = (std::string::size_type)&__dst;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v10 = __dst.__r_.__value_.__r.__words[0];
          std::string::erase(&__dst, (std::string::size_type)&v9.__data_[-v10], 0xFFFFFFFFFFFFFFFFLL);
        }
        memset(&v24, 0, sizeof(v24));
        std::string::append[abi:ne180100]<char const*,0>(&v24, (std::string *)"weights", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v24, (uint64_t)&__dst, &v25);
        std::__fs::filesystem::__create_directories(&v25, 0);
        if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v25.__pn_.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_21;
        }
        else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_21;
        }
        operator delete(v24.__r_.__value_.__l.__data_);
LABEL_21:
        memset(&v27, 0, sizeof(v27));
        std::string::append[abi:ne180100]<char const*,0>(&v27, (std::string *)"weights", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v27, (uint64_t)&__dst, (std::__fs::filesystem::path *)&buf);
        memset(&__p, 0, sizeof(__p));
        std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)"weights.bin", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&buf, (std::__fs::filesystem::path *)&v24);
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v25.__pn_ = v24;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_23;
LABEL_31:
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_24:
            operator delete(buf.__r_.__value_.__l.__data_);
            if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_25;
            goto LABEL_33;
          }
LABEL_32:
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_25:
            operator delete(v27.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_26:
              std::string::__init_copy_ctor_external(&v24, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
              goto LABEL_35;
            }
LABEL_34:
            v24 = __dst;
LABEL_35:
            v12 = Espresso::espresso_os_log_subsystem(0, v11);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              v14 = &v25;
              if ((v25.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v14 = (std::__fs::filesystem::path *)v25.__pn_.__r_.__value_.__r.__words[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
              _os_log_impl(&dword_190DAF000, v12, OS_LOG_TYPE_INFO, "[MILSegmenterAnalytics::Serialize] Copy weights to \"%s\" ", (uint8_t *)&buf, 0xCu);
            }
            v15 = Espresso::espresso_os_log_subsystem(0, v13);
            if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              goto LABEL_48;
            v16 = (_QWORD *)((char *)this + 40);
            if (*((char *)this + 63) < 0)
            {
              v16 = (_QWORD *)*v16;
              if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_42;
            }
            else if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_42:
              buf = a2->__pn_;
              goto LABEL_45;
            }
            std::string::__init_copy_ctor_external(&buf, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
LABEL_45:
            p_buf = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            LODWORD(v27.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
            WORD2(v27.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
            _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "[MILSegmenterAnalytics::Serialize] Analytics file for function %s: %s ", (uint8_t *)&v27, 0x16u);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              v18 = *((_QWORD *)this + 1);
              if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_49;
              goto LABEL_51;
            }
LABEL_48:
            v18 = *((_QWORD *)this + 1);
            if ((SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_49:
              pn = a2->__pn_;
              goto LABEL_52;
            }
LABEL_51:
            std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
LABEL_52:
            if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v21, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
            else
              v21 = v24;
            if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v20, v25.__pn_.__r_.__value_.__l.__data_, v25.__pn_.__r_.__value_.__l.__size_);
            else
              v20 = v25.__pn_;
            Espresso::MILUtil::SerializeProgram(v18, (uint64_t)&pn, (uint64_t)&v21, (uint64_t)&v20, 0x100000004, 0);
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v20.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_60:
                if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_61;
                goto LABEL_67;
              }
            }
            else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_60;
            }
            operator delete(v21.__r_.__value_.__l.__data_);
            if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_61:
              if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_62;
              goto LABEL_68;
            }
LABEL_67:
            operator delete(pn.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_62:
              if ((SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_63;
              goto LABEL_69;
            }
LABEL_68:
            operator delete(v24.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_63:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                return v2 == 0;
LABEL_70:
              operator delete(__dst.__r_.__value_.__l.__data_);
              return v2 == 0;
            }
LABEL_69:
            operator delete(v25.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return v2 == 0;
            goto LABEL_70;
          }
LABEL_33:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_26;
          goto LABEL_34;
        }
        std::string::__init_copy_ctor_external(&v25.__pn_, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v24.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_31;
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_31;
        }
LABEL_23:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_24;
        goto LABEL_32;
      }
    }
    memmove(p_dst, v5.__data_, v5.__size_);
    goto LABEL_10;
  }
  return v2 == 0;
}

void sub_191082540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a40 < 0)
  {
    operator delete(__p);
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a42);
LABEL_6:
  if (*(char *)(v47 - 137) < 0)
    operator delete(*(void **)(v47 - 160));
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[5];
    if (!v6)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
      {
LABEL_11:
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
LABEL_10:
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
        goto LABEL_11;
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *result;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  unint64_t v11;

  v4 = a1 + 3;
  v5 = MIL::IRValueMapHasher::operator()();
  a2[1] = v5;
  result = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5);
  if (!result)
  {
    v7 = (int8x8_t)a1[1];
    v8 = a2[1];
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v7)
        v8 %= *(_QWORD *)&v7;
    }
    else
    {
      v8 &= *(_QWORD *)&v7 - 1;
    }
    v10 = *(_QWORD **)(*a1 + 8 * v8);
    if (v10)
    {
      *a2 = *v10;
    }
    else
    {
      *a2 = a1[2];
      a1[2] = a2;
      *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
      if (!*a2)
      {
LABEL_15:
        ++*v4;
        return a2;
      }
      v11 = *(_QWORD *)(*a2 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v7)
          v11 %= *(_QWORD *)&v7;
      }
      else
      {
        v11 &= *(_QWORD *)&v7 - 1;
      }
      v10 = (_QWORD *)(*a1 + 8 * v11);
    }
    *v10 = a2;
    goto LABEL_15;
  }
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = (std::__shared_weak_count *)v2[3];
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t prime;
  int8x8_t v17;
  size_t v18;
  uint8x8_t v19;
  uint64_t v20;
  size_t v21;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    goto LABEL_23;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 <= a2)
      v6 = a2 % v3;
    else
      v6 = a2;
    v7 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
    if (!v7)
      goto LABEL_23;
  }
  else
  {
    v6 = (v3 - 1) & a2;
    v7 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
    if (!v7)
      goto LABEL_23;
  }
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      while (1)
      {
        v10 = v8[1];
        if (v10 == a2)
        {
          if (MIL::IRValueMapEq::operator()())
            return v8;
        }
        else if ((v10 & (v3 - 1)) != v6)
        {
          goto LABEL_23;
        }
        v8 = (_QWORD *)*v8;
        if (!v8)
          goto LABEL_23;
      }
    }
    do
    {
      v9 = v8[1];
      if (v9 == a2)
      {
        if (MIL::IRValueMapEq::operator()())
          return v8;
      }
      else
      {
        if (v9 >= v3)
          v9 %= v3;
        if (v9 != v6)
          break;
      }
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
LABEL_23:
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (v3 && (float)(v12 * (float)v3) >= v11)
    return 0;
  v13 = 1;
  if (v3 >= 3)
    v13 = (v3 & (v3 - 1)) != 0;
  v14 = v13 | (2 * v3);
  v15 = vcvtps_u32_f32(v11 / v12);
  if (v14 <= v15)
    prime = v15;
  else
    prime = v14;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v17 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v17)
    goto LABEL_47;
  if (prime < *(_QWORD *)&v17)
  {
    v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v17 < 3uLL || (v19 = (uint8x8_t)vcnt_s8(v17), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      v21 = std::__next_prime(v18);
      if (prime <= v21)
        prime = v21;
      if (prime >= *(_QWORD *)&v17)
        return 0;
    }
    else
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
      if (prime <= v18)
        prime = v18;
      if (prime >= *(_QWORD *)&v17)
        return 0;
    }
LABEL_47:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

MIL::IRDictionaryValue *std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__on_zero_shared(uint64_t a1)
{
  MIL::IRDictionaryValue *result;

  result = *(MIL::IRDictionaryValue **)(a1 + 24);
  if (result)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A86D44)
    return a1 + 24;
  if (((v3 & 0x8000000191A86D44 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A86D44))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A86D44 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void Espresso::AOT::MILSegmenterAnalytics::UpdateWithOpToBackend(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "MIL Compiler Analytics detected a mismatch between theprogram its handling and the op to backend mapping passed", buf, 2u);
}

float Espresso::AOT::DTrees::conv_transposeAneFp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 6414.1;
  if (a1[4] <= 0.05469)
    return 37832.0;
  result = 15205.0;
  if (a1[1] > 0.8282)
    return 16850.0;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneIp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 6498.5;
  if (a1[4] <= 0.05469)
    return 12703.0;
  result = 3470.5;
  if (a1[1] > 0.8282)
    return 12762.0;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneJp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 7109.0;
  if (a1[4] <= 0.05469)
    return 14264.0;
  result = 3896.5;
  if (a1[1] > 0.8282)
    return 12308.0;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneKp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 7343.1;
  if (a1[4] <= 0.05469)
    return 14408.0;
  result = 3935.8;
  if (a1[1] > 0.8282)
    return 12153.0;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneGp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 6728.0;
  if (a1[4] <= 0.05469)
    return 14409.0;
  result = 5435.5;
  if (a1[1] > 0.8282)
    return 5001.5;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneHp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 6944.2;
  if (a1[4] <= 0.05469)
    return 14409.0;
  result = 5435.5;
  if (a1[1] > 0.8282)
    return 5005.8;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuFp(double *a1)
{
  float result;

  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 184.02;
    }
    else
    {
      result = 54.896;
      if (a1[1] > 0.8282)
        return 271.98;
    }
  }
  else
  {
    result = 497.72;
    if (*a1 > 400.0)
      return 22419.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuIp(double *a1)
{
  float result;

  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 122.57;
    }
    else
    {
      result = 633.97;
      if (a1[1] > 0.8282)
        return 503.17;
    }
  }
  else
  {
    result = 409.9;
    if (*a1 > 400.0)
      return 22419.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuJp(double *a1)
{
  float result;

  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 1388.0;
    }
    else
    {
      result = 54.577;
      if (a1[1] > 0.8282)
        return 174.7;
    }
  }
  else
  {
    result = 498.98;
    if (*a1 > 400.0)
      return 22419.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuKp(double *a1)
{
  float result;

  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 1388.0;
    }
    else
    {
      result = 1387.9;
      if (a1[1] > 0.8282)
        return 420.21;
    }
  }
  else
  {
    result = 491.59;
    if (*a1 > 400.0)
      return 22419.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuGp(double *a1)
{
  float result;

  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 314.79;
    }
    else
    {
      result = 24.398;
      if (a1[1] > 0.8282)
        return 702.29;
    }
  }
  else
  {
    result = 806.45;
    if (*a1 > 400.0)
      return 22419.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuHp(double *a1)
{
  float result;

  if (*a1 <= 1.4165)
  {
    if (a1[4] <= 0.05469)
    {
      return 108.24;
    }
    else
    {
      result = 1461.9;
      if (a1[1] > 0.8282)
        return 416.77;
    }
  }
  else
  {
    result = 504.71;
    if (*a1 > 400.0)
      return 22419.0;
  }
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuFp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 1162.4;
  if (a1[4] <= 0.05469)
    return 491.52;
  result = 761.62;
  if (a1[1] > 0.8282)
    return 2533.8;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuIp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 843.22;
  if (a1[4] <= 0.05469)
    return 2620.0;
  result = 1860.5;
  if (a1[1] > 0.8282)
    return 729.21;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuJp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 3282.6;
  if (a1[4] <= 0.05469)
    return 10619.0;
  result = 10621.0;
  if (a1[1] > 0.8282)
    return 2205.7;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuKp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 1705.4;
  if (a1[4] <= 0.05469)
    return 1350.2;
  result = 5310.3;
  if (a1[1] > 0.8282)
    return 1314.2;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuGp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 2161.3;
  if (a1[4] <= 0.05469)
    return 2733.3;
  result = 5609.8;
  if (a1[1] > 0.8282)
    return 2191.6;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuHp(double *a1)
{
  float result;

  if (*a1 > 1.4165)
    return 3511.1;
  if (a1[4] <= 0.05469)
    return 13600.0;
  result = 4449.5;
  if (a1[1] > 0.8282)
    return 7549.2;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneCp(uint64_t a1)
{
  float result;

  result = 8222.9;
  if (*(double *)(a1 + 88) > 72.0)
    return 20895.0;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneDp(uint64_t a1)
{
  float result;

  result = 10828.0;
  if (*(double *)(a1 + 88) > 72.0)
    return 25771.0;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeAneEp(uint64_t a1)
{
  float result;

  result = 9358.8;
  if (*(double *)(a1 + 88) > 72.0)
    return 30035.0;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuCp(double *a1)
{
  float v1;
  float result;

  v1 = 152.95;
  if (a1[11] > 72.0)
    v1 = 476.4;
  result = 22419.0;
  if (*a1 <= 400.0)
    return v1;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuDp(double *a1)
{
  float v1;
  float result;

  v1 = 128.68;
  if (a1[11] > 72.0)
    v1 = 551.53;
  result = 22419.0;
  if (*a1 <= 400.0)
    return v1;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeCpuEp(double *a1)
{
  float v1;
  float result;

  v1 = 207.86;
  if (a1[11] > 72.0)
    v1 = 569.22;
  result = 22419.0;
  if (*a1 <= 400.0)
    return v1;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuCp(uint64_t a1)
{
  float result;

  result = 86.277;
  if (*(double *)(a1 + 88) > 72.0)
    return 322.73;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuDp(uint64_t a1)
{
  float result;

  result = 151.11;
  if (*(double *)(a1 + 88) > 72.0)
    return 478.52;
  return result;
}

float Espresso::AOT::DTrees::conv_transposeGpuEp(uint64_t a1)
{
  float result;

  result = 83.662;
  if (*(double *)(a1 + 88) > 72.0)
    return 453.79;
  return result;
}

void Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(Espresso::AOT::AOTCompilerBackend *this)
{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E2DA05A0;
  v2 = (void **)*((_QWORD *)this + 20);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_10:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    operator delete(v3);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerBackend *)((char *)this + 8));
}

uint64_t Espresso::AOT::AOTCompilerBackend::AOTCompilerBackend(uint64_t a1, __int128 *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions *v5;
  Espresso::AOT::AOTCompilerOptions *v6;
  int BuildForProfiling;
  unsigned __int8 *v8;
  const char *v9;
  uint64_t Input;
  uint64_t v11;
  std::string *v12;
  const std::string *v13;
  unsigned __int8 *v14;
  void *v15;
  unsigned __int8 *v16;
  void **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v24[2];
  char v25;
  std::__fs::filesystem::path v26;
  std::string pn;
  std::string __p;
  void **v29;

  *(_QWORD *)a1 = off_1E2DA05A0;
  v5 = (Espresso::AOT::AOTCompilerOptions *)(a1 + 8);
  v6 = (Espresso::AOT::AOTCompilerOptions *)Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(a1 + 8, a2);
  BuildForProfiling = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(v6);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&__p, "built-for-profiling");
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&pn)+ 40;
  if (BuildForProfiling)
    v9 = "true";
  else
    v9 = "false";
  MEMORY[0x19401C808](v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Input = Espresso::AOT::AOTCompilerOptions::GetInput(v5);
  memset(&__p, 0, sizeof(__p));
  v11 = *(unsigned __int8 *)(Input + 23);
  if ((v11 & 0x80u) == 0)
    v12 = (std::string *)Input;
  else
    v12 = *(std::string **)Input;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(Input + 8);
  std::string::append[abi:ne180100]<char const*,0>(&__p, v12, (std::string *)((char *)v12 + v11));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  if (!pn.__r_.__value_.__s.__data_[0] || pn.__r_.__value_.__s.__data_[0] == 255)
  {
    v13 = (const std::string *)Espresso::AOT::AOTCompilerOptions::GetInput(v5);
    *((_BYTE *)&pn.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&pn, "input-file-path");
    v26.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
    v14 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (uint64_t)&pn, (uint64_t)&std::piecewise_construct, (__int128 **)&v26);
    std::string::operator=((std::string *)(v14 + 40), v13);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
    v15 = (void *)pn.__r_.__value_.__r.__words[0];
    goto LABEL_25;
  }
  std::__fs::filesystem::__canonical(&v26, (const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(v26.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v26.__pn_.__r_.__value_.__l.__data_, v26.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v26.__pn_;
  v25 = 15;
  strcpy((char *)v24, "input-file-path");
  v29 = v24;
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (uint64_t)v24, (uint64_t)&std::piecewise_construct, (__int128 **)&v29);
  v17 = (void **)(v16 + 40);
  if ((char)v16[63] < 0)
    operator delete(*v17);
  *(std::string *)v17 = pn;
  *((_BYTE *)&pn.__r_.__value_.__s + 23) = 0;
  pn.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v15 = (void *)v26.__pn_.__r_.__value_.__r.__words[0];
LABEL_25:
    operator delete(v15);
  }
LABEL_26:
  v18 = *(_QWORD *)a3;
  v19 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v20 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 144) = v18;
  *(_QWORD *)(a1 + 152) = v19;
  v21 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 168) = v21;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a3 + 32);
  if (v21)
  {
    v22 = *(_QWORD *)(v20 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v22 >= v19)
        v22 %= v19;
    }
    else
    {
      v22 &= v19 - 1;
    }
    *(_QWORD *)(v18 + 8 * v22) = a1 + 160;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_191083BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  Espresso::AOT::AOTCompilerOptions *v33;

  if (a20 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v33);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::AOTCompilerBackend::GetBuildInfo(Espresso::AOT::AOTCompilerBackend *this)
{
  return (uint64_t)this + 144;
}

BOOL Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation(Espresso::AOT::AOTCompilerBackend *this)
{
  uint64_t *v1;
  int v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *v6;
  char __p[22];
  char v9;
  void *v10[2];
  void *v11;
  char *v12;

  v9 = 2;
  strcpy(__p, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this + 8, (uint64_t)__p, (uint64_t)v10);
  if (v9 < 0)
    operator delete(*(void **)__p);
  v9 = 21;
  strcpy(__p, "on-device-compilation");
  v12 = __p;
  v1 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v10, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
  if (*((_DWORD *)v1 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = *((unsigned __int8 *)v1 + 40);
  if (v9 < 0)
  {
    operator delete(*(void **)__p);
    v3 = (void **)v11;
    if (!v11)
      goto LABEL_14;
  }
  else
  {
    v3 = (void **)v11;
    if (!v11)
      goto LABEL_14;
  }
  do
  {
    v4 = (void **)*v3;
    v5 = *((unsigned int *)v3 + 16);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, void **))off_1E2DD13F0[v5])(__p, v3 + 5);
    *((_DWORD *)v3 + 16) = -1;
    if (*((char *)v3 + 39) < 0)
      operator delete(v3[2]);
    operator delete(v3);
    v3 = v4;
  }
  while (v4);
LABEL_14:
  v6 = v10[0];
  v10[0] = 0;
  if (v6)
    operator delete(v6);
  return v2 != 0;
}

void sub_191083DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      v4 = *((unsigned int *)v2 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, void **))off_1E2DD13F0[v4])(&v7, v2 + 5);
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

int8x16_t Espresso::AOT::Backends::CostModel::ConvOpEstimator::EstimateComputeResources@<Q0>(const MIL::IROperation *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  Espresso::AOT *ParameterType;
  Espresso::AOT *v7;
  Espresso::AOT *OutputType;
  const MIL::IRValueType *v9;
  const MIL::IRValueType *v10;
  const MIL::IRValueType *v11;
  const MIL::IRValueType *v12;
  const MIL::IRValueType *v13;
  const MIL::IRValueType *v14;
  Espresso::AOT *v15;
  Espresso::AOT *v16;
  const MIL::IRValueType *v17;
  unint64_t NumElementsSkipUnknownDims;
  const MIL::IRValueType *v19;
  MIL::IRValue *ParameterValue;
  uint64_t Data;
  unint64_t v22;
  int v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int32x4_t *v28;
  int32x4_t v29;
  uint64_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  const MIL::IRValueType *v39;
  uint64_t v40;
  double v41;
  const MIL::IRValueType *v42;
  Espresso::AOT *v43;
  const MIL::IRValueType *v44;
  double SizeInMbForShape;
  const MIL::IRValueType *v46;
  uint64_t v47;
  double v48;
  const MIL::IRValueType *v49;
  double BatchDimOfTensorFromIRValueType;
  const MIL::IRValueType *v51;
  MIL::IRValue *v52;
  int8x16_t result;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int64x2_t v57;
  int8x16_t v58;
  void *__p[2];
  char v60;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = v5;
  ParameterType = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  strcpy((char *)__p, "weight");
  v7 = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  OutputType = (Espresso::AOT *)MIL::IROperation::TryGetOutputType(a1);
  *(double *)(v5 + 56) = Espresso::AOT::GetXDimOfTensorFromIRValueType(ParameterType, v9);
  *(double *)(v5 + 64) = Espresso::AOT::GetYDimOfTensorFromIRValueType(ParameterType, v10);
  *(double *)(v5 + 72) = Espresso::AOT::GetXDimOfTensorFromIRValueType(OutputType, v11);
  *(double *)(v5 + 80) = Espresso::AOT::GetYDimOfTensorFromIRValueType(OutputType, v12);
  *(double *)(v5 + 104) = Espresso::AOT::GetXDimOfTensorFromIRValueType(v7, v13);
  *(double *)(v5 + 112) = Espresso::AOT::GetYDimOfTensorFromIRValueType(v7, v14);
  strcpy((char *)__p, "weight");
  v15 = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  v16 = (Espresso::AOT *)MIL::IROperation::GetOutputType(a1);
  NumElementsSkipUnknownDims = Espresso::AOT::GetNumElementsSkipUnknownDims(v16, v17);
  v60 = 9;
  strcpy((char *)__p, "dilations");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue || (MIL::IRValue::AsTensor(ParameterValue), Data = MIL::IRTensorValue::GetDataView<int>(), !v19))
  {
    v25 = 1;
    goto LABEL_11;
  }
  v22 = ((unint64_t)v19 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v22 >= 7)
  {
    v26 = v22 + 1;
    v27 = (v22 + 1) & 0x7FFFFFFFFFFFFFF8;
    v24 = (int *)(Data + 4 * v27);
    v28 = (int32x4_t *)(Data + 16);
    v29.i64[0] = 0x100000001;
    v29.i64[1] = 0x100000001;
    v30 = v27;
    v31.i64[0] = 0x100000001;
    v31.i64[1] = 0x100000001;
    do
    {
      v29 = vmulq_s32(v28[-1], v29);
      v31 = vmulq_s32(*v28, v31);
      v28 += 2;
      v30 -= 8;
    }
    while (v30);
    v32 = (int8x16_t)vmulq_s32(v31, v29);
    *(int32x2_t *)v32.i8 = vmul_s32(*(int32x2_t *)v32.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    v23 = v32.i32[0] * v32.i32[1];
    if (v26 == v27)
      goto LABEL_10;
  }
  else
  {
    v23 = 1;
    v24 = (int *)Data;
  }
  do
  {
    v33 = *v24++;
    v23 *= v33;
  }
  while (v24 != (int *)(Data + 4 * (_QWORD)v19));
LABEL_10:
  v25 = v23;
LABEL_11:
  v34 = Espresso::AOT::GetNumElementsSkipUnknownDims(v15, v19);
  v35 = MIL::IRValueType::AsTensorType(v15);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 96))(v35);
  if (*(_QWORD *)(v36 + 8) == *(_QWORD *)v36)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v37 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v36);
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37);
  v60 = 4;
  strcpy((char *)__p, "bias");
  v40 = MIL::IROperation::TryGetParameterType();
  v41 = -0.0;
  if (v40)
    v41 = (double)(uint64_t)(NumElementsSkipUnknownDims / v25);
  *(double *)v5 = (v41
                 + (double)(uint64_t)(NumElementsSkipUnknownDims / v25) * ((double)(v34 / v38) + (double)(v34 / v38)))
                * 0.000000001;
  *(double *)(v5 + 24) = Espresso::AOT::GetSizeInMbForShape(v7, v39);
  *(double *)(v5 + 32) = Espresso::AOT::GetSizeInMbForShape(ParameterType, v42);
  v43 = (Espresso::AOT *)MIL::IROperation::GetOutputType(a1);
  SizeInMbForShape = Espresso::AOT::GetSizeInMbForShape(v43, v44);
  *(double *)(v5 + 40) = SizeInMbForShape;
  *(double *)(v5 + 8) = *(double *)(v5 + 24) + SizeInMbForShape + *(double *)(v5 + 32);
  v60 = 4;
  strcpy((char *)__p, "bias");
  v47 = MIL::IROperation::TryGetParameterType();
  v48 = *(double *)(v5 + 8);
  if (v47)
  {
    v48 = v48 + *(double *)(v5 + 40);
    *(double *)(v5 + 8) = v48;
  }
  *(double *)(v5 + 48) = *(double *)v5 * 1000.0 / v48;
  *(double *)(v5 + 96) = Espresso::AOT::GetChannelDimOfTensorFromIRValueType(v7, v46);
  BatchDimOfTensorFromIRValueType = Espresso::AOT::GetBatchDimOfTensorFromIRValueType(v7, v49);
  *(double *)(v5 + 88) = BatchDimOfTensorFromIRValueType;
  *(double *)(v5 + 16) = *(double *)(v5 + 24) * 1024.0 / BatchDimOfTensorFromIRValueType;
  *(double *)(v5 + 136) = Espresso::AOT::GetWU16EfficiencyForInputType(ParameterType, v51);
  v60 = 9;
  strcpy((char *)__p, "dilations");
  v52 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
  if (v52)
  {
    MIL::IRValue::AsTensor(v52);
    v54 = MIL::IRTensorValue::GetDataView<int>();
    if (v55 >= 2)
    {
      v56 = *(_QWORD *)(v54 + 4 * v55 - 8);
      v57.i64[0] = (int)v56;
      v57.i64[1] = SHIDWORD(v56);
      v58 = (int8x16_t)vcvtq_f64_s64(v57);
      result = vextq_s8(v58, v58, 8uLL);
      *(int8x16_t *)(v5 + 120) = result;
    }
  }
  return result;
}

void sub_19108438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  *a9 = 0;
  MEMORY[0x19401CD90](v15, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

float Espresso::AOT::DTrees::upsample_bilinearAneFp()
{
  return 39.659;
}

float Espresso::AOT::DTrees::upsample_bilinearAneIp()
{
  return 33.18;
}

float Espresso::AOT::DTrees::upsample_bilinearAneJp(uint64_t a1)
{
  float result;

  result = 31.012;
  if (*(double *)(a1 + 32) > 0.07326)
    return 31.006;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearAneKp(uint64_t a1)
{
  float result;

  result = 31.231;
  if (*(double *)(a1 + 32) > 0.07326)
    return 31.225;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearAneGp(uint64_t a1)
{
  float result;

  result = 39.41;
  if (*(double *)(a1 + 32) > 0.07326)
    return 39.404;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearAneHp()
{
  return 39.293;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuFp(uint64_t a1)
{
  float result;

  result = 15.213;
  if (*(double *)(a1 + 32) > 0.07326)
    return 0.22808;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuIp(uint64_t a1)
{
  float result;

  result = 10.14;
  if (*(double *)(a1 + 32) > 0.07326)
    return 0.19378;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuJp(uint64_t a1)
{
  float result;

  result = 10.14;
  if (*(double *)(a1 + 32) > 0.07326)
    return 0.18542;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuKp(uint64_t a1)
{
  float result;

  result = 10.14;
  if (*(double *)(a1 + 32) > 0.07326)
    return 0.19812;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuGp(uint64_t a1)
{
  float result;

  result = 15.213;
  if (*(double *)(a1 + 32) > 0.07326)
    return 0.21885;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuHp(uint64_t a1)
{
  float result;

  result = 15.213;
  if (*(double *)(a1 + 32) > 0.07326)
    return 0.14238;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuFp(uint64_t a1)
{
  float result;

  result = 21.897;
  if (*(double *)(a1 + 32) > 0.07326)
    return 18.894;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuIp(uint64_t a1)
{
  float result;

  result = 14.606;
  if (*(double *)(a1 + 32) > 0.07326)
    return 9.6933;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuJp(uint64_t a1)
{
  float result;

  result = 2.3458;
  if (*(double *)(a1 + 32) > 0.07326)
    return 57.74;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuKp(uint64_t a1)
{
  float result;

  result = 0.33273;
  if (*(double *)(a1 + 32) > 0.07326)
    return 12.962;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuGp(uint64_t a1)
{
  float result;

  result = 43.773;
  if (*(double *)(a1 + 32) > 0.07326)
    return 32.683;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuHp(uint64_t a1)
{
  float result;

  result = 87.545;
  if (*(double *)(a1 + 32) > 0.07326)
    return 14.064;
  return result;
}

float Espresso::AOT::DTrees::upsample_bilinearAneCp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearAneDp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearAneEp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuCp()
{
  return 0.01;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuDp()
{
  return 0.01;
}

float Espresso::AOT::DTrees::upsample_bilinearCpuEp()
{
  return 0.01;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuCp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuDp()
{
  return 0.37;
}

float Espresso::AOT::DTrees::upsample_bilinearGpuEp()
{
  return 0.37;
}

Espresso::AOT::Validators::JitCallValidator *Espresso::AOT::Validators::JitCallValidator::JitCallValidator(Espresso::AOT::Validators::JitCallValidator *this)
{
  _QWORD *v2;
  std::string __p;
  std::string v5;

  v5.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C80C00];
  v2 = Espresso::AOT::AbstractValidator::AbstractValidator(this);
  *v2 = off_1E2DA0200;
  *(_OWORD *)(v2 + 1) = 0u;
  *(_OWORD *)(v2 + 3) = 0u;
  *((_DWORD *)v2 + 10) = 1065353216;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "call");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v2 + 1, &__p, &v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_19108483C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  Espresso::AOT::AbstractValidator *v14;
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
  Espresso::AOT::AbstractValidator::~AbstractValidator(v14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::JitCallValidator::Validate(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t Function;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string::size_type v19;
  const void *v20;
  std::string *p_p;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  void *v46;
  void **v47;
  uint64_t *v48;
  void *v49[2];
  void *v50[2];
  int v51;
  std::string __p;
  void *v53;
  char *v54;
  char *v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  HIBYTE(v55) = 5;
  strcpy((char *)&v53, "ios15");
  v57 = 5;
  strcpy((char *)v56, "ios16");
  v59 = 5;
  strcpy((char *)v58, "ios17");
  v61 = 5;
  strcpy((char *)v60, "ios18");
  *(_OWORD *)v49 = 0u;
  *(_OWORD *)v50 = 0u;
  v51 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v49, (uint64_t)&v53, (uint64_t)&v53);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v49, (uint64_t)v56, (uint64_t)v56);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v49, (uint64_t)v58, (uint64_t)v58);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v49, (uint64_t)v60, (uint64_t)v60);
  if (v61 < 0)
  {
    operator delete(v60[0]);
    if ((v59 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v57 & 0x80000000) == 0)
        goto LABEL_4;
LABEL_60:
      operator delete(v56[0]);
      v48 = a2;
      if ((SHIBYTE(v55) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_61;
    }
  }
  else if ((v59 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v58[0]);
  if (v57 < 0)
    goto LABEL_60;
LABEL_4:
  v48 = a2;
  if ((SHIBYTE(v55) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_61:
  operator delete(v53);
LABEL_5:
  Function = MIL::IRProgram::GetFunction();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v6 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  v7 = **v6;
  v8 = (*v6)[1];
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v9 = v8 - v7;
  if (v9)
  {
    v10 = 0;
    v11 = (_QWORD *)(a1 + 8);
    v12 = v9 >> 4;
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = v12;
    while (1)
    {
      v15 = *(_QWORD *)(**v6 + 16 * v10);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 232))(v15);
      if (!v16)
      {
        v22 = 0;
        goto LABEL_27;
      }
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v19 = v18;
      if (v18 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v20 = (const void *)v17;
      if (v18 >= 0x17)
        break;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v18;
      p_p = &__p;
      if (v18)
        goto LABEL_24;
LABEL_25:
      p_p->__r_.__value_.__s.__data_[v19] = 0;
      v22 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v49, (uint64_t)&__p) == 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_27:
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 56))(v15);
      Espresso::AOT::GetOperatorType(v25, &__p);
      if (v22
        || !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, (uint64_t)&__p))
      {
        goto LABEL_11;
      }
      v26 = v54;
      if (v54 >= v55)
      {
        v27 = (char *)v53;
        v28 = v54 - (_BYTE *)v53;
        v29 = (v54 - (_BYTE *)v53) >> 3;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v31 = v55 - (_BYTE *)v53;
        if ((v55 - (_BYTE *)v53) >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          if (v32 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v33 = (char *)operator new(8 * v32);
          v34 = &v33[8 * v29];
          *(_QWORD *)v34 = v10;
          v14 = (uint64_t)(v34 + 8);
          if (v26 == v27)
            goto LABEL_47;
LABEL_41:
          v35 = v26 - 8 - v27;
          if (v35 < 0x58)
            goto LABEL_67;
          if ((unint64_t)(v26 - &v33[v28]) < 0x20)
            goto LABEL_67;
          v36 = (v35 >> 3) + 1;
          v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          v38 = &v26[-v37];
          v34 -= v37;
          v39 = &v33[8 * v29 - 16];
          v40 = v26 - 16;
          v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v42 = *(_OWORD *)v40;
            *((_OWORD *)v39 - 1) = *((_OWORD *)v40 - 1);
            *(_OWORD *)v39 = v42;
            v39 -= 32;
            v40 -= 32;
            v41 -= 4;
          }
          while (v41);
          v26 = v38;
          if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_67:
            do
            {
              v43 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *((_QWORD *)v34 - 1) = v43;
              v34 -= 8;
            }
            while (v26 != v27);
          }
        }
        else
        {
          v33 = 0;
          v34 = (char *)(8 * v29);
          *(_QWORD *)(8 * v29) = v10;
          v14 = 8 * v29 + 8;
          if (v26 != v27)
            goto LABEL_41;
        }
LABEL_47:
        v53 = v34;
        v54 = (char *)v14;
        v55 = &v33[8 * v32];
        if (v27)
          operator delete(v27);
        goto LABEL_10;
      }
      *(_QWORD *)v54 = v10;
      v14 = (uint64_t)(v26 + 8);
LABEL_10:
      v54 = (char *)v14;
LABEL_11:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (++v10 == v13)
          goto LABEL_49;
      }
      else if (++v10 == v13)
      {
        goto LABEL_49;
      }
    }
    v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v23 = v18 | 7;
    v24 = v23 + 1;
    p_p = (std::string *)operator new(v23 + 1);
    __p.__r_.__value_.__l.__size_ = v19;
    __p.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_24:
    memmove(p_p, v20, v19);
    goto LABEL_25;
  }
LABEL_49:
  v44 = operator new();
  Espresso::AOT::ValidationResult::ValidationResult(v44, (uint64_t)&v53);
  *v48 = v44;
  if (v53)
  {
    v54 = (char *)v53;
    operator delete(v53);
  }
  v45 = (void **)v50[0];
  if (v50[0])
  {
    do
    {
      v47 = (void **)*v45;
      if (*((char *)v45 + 39) < 0)
        operator delete(v45[2]);
      operator delete(v45);
      v45 = v47;
    }
    while (v47);
  }
  v46 = v49[0];
  v49[0] = 0;
  if (v46)
    operator delete(v46);
}

void sub_191084D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  MEMORY[0x19401CD90](v45, 0x10B1C40E94733EDLL);
  if (!__p)
  {
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  a23 = (uint64_t)__p;
  operator delete(__p);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::JitCallValidator::~JitCallValidator(Espresso::AOT::Validators::JitCallValidator *this)
{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E2DA0200;
  v2 = (void **)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
}

{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E2DA0200;
  v2 = (void **)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete(v3);
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
  JUMPOUT(0x19401CD90);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(_QWORD *a1, std::string *__str, std::string *a3)
{
  const std::string *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void **v10;
  BOOL v11;
  void **v12;

  v4 = __str;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (!v8 || __str == a3)
    {
      v10 = (void **)v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        v10 = *(void ***)v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, v8);
        ++v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = (uint64_t)v10;
      }
      while (!v11);
    }
    if (v10)
    {
      do
      {
        v12 = (void **)*v10;
        if (*((char *)v10 + 39) < 0)
          operator delete(v10[2]);
        operator delete(v10);
        v10 = v12;
      }
      while (v12);
    }
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a1, (uint64_t)v4, (uint64_t)v4);
    ++v4;
  }
}

void sub_191085064(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_191085080(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *result;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;

  v4 = (unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    v11 = (int8x8_t)a1[1];
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v11)
        v12 %= *(_QWORD *)&v11;
    }
    else
    {
      v12 &= *(_QWORD *)&v11 - 1;
    }
    v14 = *(_QWORD **)(*a1 + 8 * v12);
    if (v14)
    {
      *(_QWORD *)a2 = *v14;
    }
    else
    {
      *(_QWORD *)a2 = a1[2];
      a1[2] = a2;
      *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(_QWORD *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v11)
          v15 %= *(_QWORD *)&v11;
      }
      else
      {
        v15 &= *(_QWORD *)&v11 - 1;
      }
      v14 = (_QWORD *)(*a1 + 8 * v15);
    }
    *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  const void **v16;
  unsigned __int8 *j;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  const void **v21;
  unsigned __int8 *i;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  size_t v29;
  uint8x8_t v30;
  uint64_t v31;
  size_t v32;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_50;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2)
      v7 = a2 % v4;
    else
      v7 = a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  else
  {
    v7 = (v4 - 1) & a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  v9 = *v8;
  if (*v8)
  {
    v10 = *((_BYTE *)a3 + 23);
    if (v10 >= 0)
      v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v11 = a3[1];
    if (v10 >= 0)
      v12 = (unsigned __int8 *)a3;
    else
      v12 = *a3;
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        v18 = v9[1];
        if (v18 == a2)
        {
          v19 = *((unsigned __int8 *)v9 + 39);
          if ((v19 & 0x80u) == 0)
            v20 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          else
            v20 = (unsigned __int8 *)v9[3];
          if (v20 == v11)
          {
            v21 = (const void **)(v9 + 2);
            if ((v19 & 0x80) != 0)
            {
              if (!memcmp(*v21, v12, v9[3]))
                return v9;
            }
            else
            {
              if (!*((_BYTE *)v9 + 39))
                return v9;
              for (i = v12; *(unsigned __int8 *)v21 == *i; ++i)
              {
                v21 = (const void **)((char *)v21 + 1);
                if (!--v19)
                  return v9;
              }
            }
          }
        }
        else if ((v18 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        v9 = (uint64_t *)*v9;
        if (!v9)
          goto LABEL_50;
      }
    }
    do
    {
      v13 = v9[1];
      if (v13 == a2)
      {
        v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0)
          v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        else
          v15 = (unsigned __int8 *)v9[3];
        if (v15 == v11)
        {
          v16 = (const void **)(v9 + 2);
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp(*v16, v12, v9[3]))
              return v9;
          }
          else
          {
            if (!*((_BYTE *)v9 + 39))
              return v9;
            for (j = v12; *(unsigned __int8 *)v16 == *j; ++j)
            {
              v16 = (const void **)((char *)v16 + 1);
              if (!--v14)
                return v9;
            }
          }
        }
      }
      else
      {
        if (v13 >= v4)
          v13 %= v4;
        if (v13 != v7)
          break;
      }
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (v4 && (float)(v24 * (float)v4) >= v23)
    return 0;
  v25 = 1;
  if (v4 >= 3)
    v25 = (v4 & (v4 - 1)) != 0;
  v26 = v25 | (2 * v4);
  v27 = vcvtps_u32_f32(v23 / v24);
  if (v26 <= v27)
    prime = v27;
  else
    prime = v26;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v4)
    goto LABEL_74;
  if (prime < v4)
  {
    v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v29);
      if (prime <= v32)
        prime = v32;
      if (prime >= v4)
        return 0;
    }
    else
    {
      v31 = 1 << -(char)__clz(v29 - 1);
      if (v29 >= 2)
        v29 = v31;
      if (prime <= v29)
        prime = v29;
      if (prime >= v4)
        return 0;
    }
LABEL_74:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

std::string *Espresso::AOT::MILCompilerForE5MinimalCpu::MILCompilerForE5MinimalCpu(std::string *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  uint64_t Output;
  std::string *v14;
  __int128 v15;
  void **v16;
  void *__p[2];
  void *v19[2];
  int v20;
  _BYTE v21[136];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v21, a2);
  v6 = *(void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v19[0] = v8;
  v19[1] = v9;
  v20 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v19;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v21, (uint64_t)__p);
  v11 = (void **)v19[0];
  if (v19[0])
  {
    do
    {
      v16 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_17:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v11);
      v11 = v16;
    }
    while (v16);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v21);
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DA08E0;
  Output = Espresso::AOT::AOTCompilerOptions::GetOutput(a2);
  v14 = a1 + 11;
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)Output, *(_QWORD *)(Output + 8));
  }
  else
  {
    v15 = *(_OWORD *)Output;
    a1[11].__r_.__value_.__r.__words[2] = *(_QWORD *)(Output + 16);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  a1[12].__r_.__value_.__r.__words[0] = 0;
  a1[12].__r_.__value_.__l.__size_ = 0;
  a1[12].__r_.__value_.__r.__words[2] = 0;
  return a1;
}

void sub_191085620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void sub_19108563C(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler *v1;

  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::ExtractOptions(Espresso::AOT::MILCompilerForE5MinimalCpu *this@<X0>, std::string *a2@<X8>)
{
  uint64_t Output;
  __int128 v5;

  Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)Output, *(_QWORD *)(Output + 8));
  }
  else
  {
    v5 = *(_OWORD *)Output;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(Output + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
}

uint64_t Espresso::AOT::MILCompilerForE5MinimalCpu::Options::AssertValid(uint64_t this)
{
  std::logic_error *exception;

  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(this + 23))
      return this;
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (!*(_QWORD *)(this + 8))
    goto LABEL_5;
  return this;
}

void sub_191085700(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::TransformInterleavedEmbeddings(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t **v5;
  uint64_t v7;
  uint64_t v8;
  MIL::IROperation *v9;
  uint64_t v10;
  MIL::IRValue *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  MIL::IRValueType *OutputType;
  MIL::IRMemoryLayoutValueType *v16;
  E5Common::Utils *v17;
  const MIL::IRValueType *v18;
  int64_t v19;
  int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  MIL::IRValue *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  MIL::IRValue *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  MIL::IRValueType *v50;
  std::string::size_type v51;
  std::__shared_weak_count *v52;
  std::string::size_type v53;
  uint64_t *Strides;
  uint64_t *InterleaveFactors;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  const MIL::IRValueType *v62;
  char *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void **v100;
  void **v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::string::size_type v120;
  std::string::size_type size;
  void *v122;
  uint64_t *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  MIL::Builder::BlockBuilder *v137;
  std::__shared_weak_count *v138;
  unint64_t *p_shared_owners;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::logic_error *exception;
  uint64_t v145;
  void *v146;
  std::string::size_type v147;
  std::__shared_weak_count *v148;
  char *v149;
  std::__shared_weak_count *v150;
  _QWORD v153[2];
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  void *v157;
  void **v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  void *v161;
  std::__shared_weak_count *v162;
  std::string::size_type v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  void *v171;
  std::__shared_weak_count *v172;
  std::string::size_type v173;
  std::__shared_weak_count *v174;
  std::string v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  MIL::Builder::BlockBuilder *v178;
  void *v179[3];
  std::string v180;
  void *v181[3];
  std::string v182;
  void *v183[3];
  std::string v184;
  std::string __str;
  std::string v186;
  std::string __s;
  MIL::IRValue *v188;
  std::__shared_weak_count *v189;
  MIL::IRValue *v190;
  std::__shared_weak_count *v191;
  void *v192[3];
  char v193;
  void *v194[3];
  char v195;
  void *__p;
  char *v197;
  char v198;
  char v199;
  std::string v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  void *v203[4];
  std::__shared_weak_count *v204;
  void *v205[2];
  char v206;
  std::string::size_type v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;

  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    while (1)
    {
      v7 = (*(uint64_t (**)(uint64_t *))(*v5[5] + 48))(v5[5]);
      if (!E5Common::MinimalCpu::IsTensorToTensorBufferLoadingWeights(*a2, v7))
        goto LABEL_3;
      v8 = (*(uint64_t (**)(uint64_t *))(*v5[5] + 48))(v5[5]);
      v9 = ***(MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
      v198 = 5;
      strcpy((char *)&__p, "input");
      v10 = (*(uint64_t (**)(MIL::IROperation *, void **, _QWORD))(*(_QWORD *)v9 + 128))(v9, &__p, 0);
      v11 = (MIL::IRValue *)v10;
      if (v198 < 0)
      {
        operator delete(__p);
        if (!v11)
          goto LABEL_3;
      }
      else if (!v10)
      {
        goto LABEL_3;
      }
      v12 = MIL::IRValue::AsTensor(v11);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
      if (!v13)
        goto LABEL_3;
      v14 = (_QWORD *)v13;
      OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(v9);
      v16 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
      v17 = (E5Common::Utils *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v16);
      E5Common::Utils::GetConstantShape(v17, v18, (uint64_t)&__p);
      if (!v199)
      {
        v20 = 3;
        goto LABEL_22;
      }
      E5Common::Utils::GetConstantStrides(v17, (uint64_t)v194);
      if (!v195)
      {
        v20 = 3;
        v22 = v194[0];
        if (!v194[0])
          goto LABEL_22;
LABEL_21:
        v194[1] = v22;
        operator delete(v22);
        goto LABEL_22;
      }
      E5Common::Utils::GetConstantInterleaves(v17, (uint64_t)v192);
      if (!v193)
        goto LABEL_14;
      v19 = v197 - (_BYTE *)__p;
      if ((unint64_t)(((v197 - (_BYTE *)__p) >> 3) - 4) < 0xFFFFFFFFFFFFFFFELL
        || v19 == 24 && *((_QWORD *)__p + 1) != 1)
      {
        goto LABEL_14;
      }
      v21 = v192[0];
      v23 = *(unsigned __int8 *)v192[0];
      if (v23 != 1)
        break;
      v20 = 3;
LABEL_16:
      v192[1] = v21;
      operator delete(v21);
LABEL_17:
      v22 = v194[0];
      if (v194[0])
        goto LABEL_21;
LABEL_22:
      if (__p)
      {
        v197 = (char *)__p;
        operator delete(__p);
      }
      if (v20 != 3 && v20)
        return;
LABEL_3:
      v5 = (uint64_t **)*v5;
      if (!v5)
        return;
    }
    v24 = *(_QWORD *)((char *)v194[0] + v19 - 8);
    if (v24 == v23)
    {
      v25 = *(_QWORD *)((char *)v194[0] + v19 - 16);
      if (v25 == *((_QWORD *)v197 - 1) * v24)
      {
        if (v19 != 24)
          goto LABEL_38;
        if (*(_QWORD *)v194[0] == *((_QWORD *)v197 - 2) * v25)
        {
          v26 = (char *)__p + 8;
          v27 = v197 - ((_BYTE *)__p + 16);
          if (v197 != (char *)__p + 16)
          {
            v149 = (char *)__p + 8;
            memmove((char *)__p + 8, (char *)__p + 16, v197 - ((_BYTE *)__p + 16));
            v26 = v149;
          }
          v197 = &v26[v27];
LABEL_38:
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&__str, "path");
          v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v14, (uint64_t)&__str);
          if (!v28)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v30 = (MIL::IRValue *)v28[5];
          v29 = v28[6];
          v190 = v30;
          v191 = (std::__shared_weak_count *)v29;
          if (v29)
          {
            v31 = (unint64_t *)(v29 + 8);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = 6;
          strcpy((char *)&__str, "offset");
          v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v14, (uint64_t)&__str);
          if (!v33)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v35 = (MIL::IRValue *)v33[5];
          v34 = v33[6];
          v188 = v35;
          v189 = (std::__shared_weak_count *)v34;
          if (v34)
          {
            v36 = (unint64_t *)(v34 + 8);
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          MIL::IRValue::AsTensor(v30);
          MIL::IRValue::GetScalar<std::string>();
          MIL::IRValue::AsTensor(v35);
          v38 = MIL::IRValue::GetScalar<unsigned long long>();
          v39 = (*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v11 + 32))(v11);
          v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
          v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 88))(v40);
          memset(&v186, 0, sizeof(v186));
          switch(v41)
          {
            case 4:
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v184, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              else
                v184 = __s;
              std::vector<unsigned long long>::vector(v183, (uint64_t)&__p);
              if (v183[0])
              {
                v183[1] = v183[0];
                operator delete(v183[0]);
              }
              if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v184.__r_.__value_.__l.__data_);
              break;
            case 5:
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v180, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              else
                v180 = __s;
              std::vector<unsigned long long>::vector(v179, (uint64_t)&__p);
              if (v179[0])
              {
                v179[1] = v179[0];
                operator delete(v179[0]);
              }
              if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v180.__r_.__value_.__l.__data_);
              break;
            case 9:
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v182, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              else
                v182 = __s;
              std::vector<unsigned long long>::vector(v181, (uint64_t)&__p);
              if (v181[0])
              {
                v181[1] = v181[0];
                operator delete(v181[0]);
              }
              if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v182.__r_.__value_.__l.__data_);
              break;
            default:
              v20 = 1;
LABEL_250:
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              v138 = v189;
              if (v189)
              {
                p_shared_owners = (unint64_t *)&v189->__shared_owners_;
                do
                  v140 = __ldaxr(p_shared_owners);
                while (__stlxr(v140 - 1, p_shared_owners));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              v141 = v191;
              if (v191)
              {
                v142 = (unint64_t *)&v191->__shared_owners_;
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
LABEL_15:
              v21 = v192[0];
              if (!v192[0])
                goto LABEL_17;
              goto LABEL_16;
          }
          std::string::operator=(&v186, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v42 = a2[1];
          v176 = *a2;
          v177 = (std::__shared_weak_count *)v42;
          if (v42)
          {
            v43 = (unint64_t *)(v42 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          v45 = (*(uint64_t (**)(uint64_t *))(*v5[5] + 32))(v5[5]);
          if (*(char *)(v45 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)v45, *(_QWORD *)(v45 + 8));
          }
          else
          {
            v46 = *(_OWORD *)v45;
            v175.__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 16);
            *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v46;
          }
          MIL::Builder::BlockBuilder::Make();
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v175.__r_.__value_.__l.__data_);
          v47 = v177;
          if (v177)
          {
            v48 = (unint64_t *)&v177->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v50 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v11 + 32))(v11);
          MIL::IRValueType::AsTensorType(v50);
          MIL::IRTensorValueType::MakeValueFromBlobFile();
          v51 = __str.__r_.__value_.__r.__words[0];
          v173 = __str.__r_.__value_.__r.__words[0];
          if (__str.__r_.__value_.__r.__words[0])
          {
            v52 = (std::__shared_weak_count *)operator new();
            v53 = __str.__r_.__value_.__r.__words[0];
            v52->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
            v52->__shared_owners_ = 0;
            v52->__shared_weak_owners_ = 0;
            v52[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
          }
          else
          {
            v52 = 0;
          }
          v174 = v52;
          Strides = (uint64_t *)MIL::IRTensorBufferValueType::GetStrides(v17);
          E5Common::Utils::MakeIRValueFromPropertyVec(Strides, &v171);
          InterleaveFactors = (uint64_t *)MIL::IRTensorBufferValueType::GetInterleaveFactors(v17);
          E5Common::Utils::MakeIRValueFromPropertyVec(InterleaveFactors, &v169);
          v166 = 5;
          strcpy((char *)v165, "ios18");
          v163 = v51;
          v164 = v52;
          if (v52)
          {
            v56 = (unint64_t *)&v52->__shared_owners_;
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          v146 = v171;
          v161 = v171;
          v162 = v172;
          v150 = v172;
          if (v172)
          {
            v58 = (unint64_t *)&v172->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          v145 = v169;
          v159 = v169;
          v160 = v170;
          v148 = v170;
          if (v170)
          {
            v60 = (unint64_t *)&v170->__shared_owners_;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v147 = v51;
          (*(void (**)(void **__return_ptr, MIL::IROperation *))(*(_QWORD *)v9 + 200))(&v157, v9);
          v63 = (char *)v157;
          if (v158 == v157)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          if ((E5Common::Utils::IsTensorBuffer(v17, v62) & 1) == 0)
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Only tensor_buffer types are supported.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
          MIL::MILContext::GetOpset();
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_191A849B0;
          strcpy(__str.__r_.__value_.__l.__data_, "tensor_to_tensor_buffer");
          MIL::IROpset::TryGetOperatorSharedPtr();
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v209 = v215;
          v210 = v216;
          if (v216)
          {
            v64 = (unint64_t *)&v216->__shared_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          MIL::Builder::OperationBuilder::Make();
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&__str, "input");
          v207 = v147;
          v208 = v52;
          if (v52)
          {
            v66 = (unint64_t *)&v52->__shared_owners_;
            do
              v67 = __ldxr(v66);
            while (__stxr(v67 + 1, v66));
          }
          MIL::Builder::OperationBuilder::AddInput();
          v206 = 7;
          strcpy((char *)v205, "strides");
          v203[3] = v146;
          v204 = v150;
          if (v150)
          {
            v68 = (unint64_t *)&v150->__shared_owners_;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
          MIL::Builder::OperationBuilder::AddInput();
          HIBYTE(v203[2]) = 18;
          strcpy((char *)v203, "interleave_factors");
          v201 = v145;
          v202 = v148;
          if (v148)
          {
            v70 = (unint64_t *)&v148->__shared_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          MIL::Builder::OperationBuilder::AddInput();
          if (v63[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)v63, *((_QWORD *)v63 + 1));
          }
          else
          {
            v72 = *(_OWORD *)v63;
            v200.__r_.__value_.__r.__words[2] = *((_QWORD *)v63 + 2);
            *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v72;
          }
          MIL::Builder::OperationBuilder::AddOutput();
          if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v200.__r_.__value_.__l.__data_);
          v73 = v214;
          if (v214)
          {
            v74 = (unint64_t *)&v214->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v76 = v202;
          if (v202)
          {
            v77 = (unint64_t *)&v202->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          if (SHIBYTE(v203[2]) < 0)
            operator delete(v203[0]);
          v79 = v213;
          if (v213)
          {
            v80 = (unint64_t *)&v213->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v82 = v204;
          if (v204)
          {
            v83 = (unint64_t *)&v204->__shared_owners_;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          if (v206 < 0)
            operator delete(v205[0]);
          v85 = v212;
          if (v212)
          {
            v86 = (unint64_t *)&v212->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          v88 = v208;
          if (v208)
          {
            v89 = (unint64_t *)&v208->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v91 = v211;
          if (v211)
          {
            v92 = (unint64_t *)&v211->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v94 = v210;
          if (v210)
          {
            v95 = (unint64_t *)&v210->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          MIL::Builder::OperationBuilder::SetSpecificationOpsetName();
          v97 = v216;
          if (v216)
          {
            v98 = (unint64_t *)&v216->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v100 = (void **)v157;
          if (v157)
          {
            v101 = v158;
            v102 = v157;
            if (v158 != v157)
            {
              do
              {
                if (*((char *)v101 - 1) < 0)
                  operator delete(*(v101 - 3));
                v101 -= 3;
              }
              while (v101 != v100);
              v102 = v157;
            }
            v158 = v100;
            operator delete(v102);
          }
          v103 = v160;
          if (v160)
          {
            v104 = (unint64_t *)&v160->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          v106 = v162;
          if (v162)
          {
            v107 = (unint64_t *)&v162->__shared_owners_;
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          v109 = v164;
          if (v164)
          {
            v110 = (unint64_t *)&v164->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          if (v166 < 0)
            operator delete(v165[0]);
          v155 = v167;
          v156 = v168;
          if (v168)
          {
            v112 = (unint64_t *)&v168->__shared_owners_;
            do
              v113 = __ldxr(v112);
            while (__stxr(v113 + 1, v112));
          }
          v153[1] = 0;
          v154 = 0;
          MIL::Builder::BlockBuilder::AddOperation();
          v114 = v154;
          if (v154)
          {
            v115 = (unint64_t *)&v154->__shared_owners_;
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          v117 = v156;
          if (v156)
          {
            v118 = (unint64_t *)&v156->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          (*(void (**)(std::string *__return_ptr, MIL::IROperation *))(*(_QWORD *)v9 + 200))(&__str, v9);
          if (__str.__r_.__value_.__l.__size_ == __str.__r_.__value_.__r.__words[0])
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          MIL::Builder::BlockBuilder::AddOutput();
          v120 = __str.__r_.__value_.__r.__words[0];
          if (__str.__r_.__value_.__r.__words[0])
          {
            size = __str.__r_.__value_.__l.__size_;
            v122 = (void *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
            {
              do
              {
                if (*(char *)(size - 1) < 0)
                  operator delete(*(void **)(size - 24));
                size -= 24;
              }
              while (size != v120);
              v122 = (void *)__str.__r_.__value_.__r.__words[0];
            }
            __str.__r_.__value_.__l.__size_ = v120;
            operator delete(v122);
          }
          v123 = v5[5];
          MIL::Builder::BlockBuilder::CreateBlock(v178);
          (*(void (**)(uint64_t *, _QWORD *))(*v123 + 80))(v123, v153);
          v124 = v153[0];
          v153[0] = 0;
          if (v124)
            (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
          v125 = v168;
          if (v168)
          {
            v126 = (unint64_t *)&v168->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          v128 = v170;
          if (v170)
          {
            v129 = (unint64_t *)&v170->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = v172;
          if (v172)
          {
            v132 = (unint64_t *)&v172->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          v134 = v174;
          if (v174)
          {
            v135 = (unint64_t *)&v174->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = v178;
          v178 = 0;
          if (v137)
            (*(void (**)(MIL::Builder::BlockBuilder *))(*(_QWORD *)v137 + 8))(v137);
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v186.__r_.__value_.__l.__data_);
          v20 = 0;
          goto LABEL_250;
        }
      }
    }
LABEL_14:
    v20 = 3;
    goto LABEL_15;
  }
}

void sub_191086730(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  v4 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v4;
    operator delete(v4);
    v2 = (void *)STACK[0x280];
    if (STACK[0x280])
    {
LABEL_11:
      STACK[0x288] = (unint64_t)v2;
      operator delete(v2);
      v3 = (void *)STACK[0x2A0];
      if (!STACK[0x2A0])
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else
  {
    v2 = (void *)STACK[0x280];
    if (STACK[0x280])
      goto LABEL_11;
  }
  v3 = (void *)STACK[0x2A0];
  if (!STACK[0x2A0])
LABEL_13:
    _Unwind_Resume(a1);
LABEL_12:
  STACK[0x2A8] = (unint64_t)v3;
  operator delete(v3);
  goto LABEL_13;
}

void `anonymous namespace'::WriteInterleavedEmbeddingsFile<MIL::Fp16>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  size_t size;
  unint64_t v29;
  __int128 *p_dst;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  void *v36;
  std::string *v37;
  uint64_t *v38;
  __int128 __dst;
  unint64_t v40;
  std::string v41;
  void *__p;
  void *v43;
  char *v44;
  void *v45;
  char *v46;
  char *v47;
  std::string v48;
  char v49[8];
  std::string v50;
  _QWORD v51[22];

  v51[20] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v48 = *(std::string *)a2;
  MEMORY[0x19401B434](v49, &v48);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v13 = MIL::Blob::StorageReader::GetDataView<MIL::Fp16>();
  v14 = v12;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v37 = a1;
  v38 = a6;
  if (v12)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = 2 * v12;
    v16 = (char *)operator new(2 * v12);
    v17 = a7;
    v45 = v16;
    v47 = &v16[2 * v14];
    bzero(v16, 2 * v14);
    v18 = &v16[v15];
    v46 = &v16[v15];
  }
  else
  {
    v17 = a7;
    v18 = 0;
    v16 = 0;
  }
  v19 = v18 - v16;
  if (v18 == v16)
    v20 = 0;
  else
    v20 = (uint64_t)v16;
  __p = 0;
  v43 = 0;
  v44 = 0;
  v21 = *(const void **)a4;
  v22 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v22)
  {
    if (v22 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(v22);
    v44 = (char *)__p + 8 * (v22 >> 3);
    memcpy(__p, v21, v22);
    v43 = v44;
  }
  Espresso::AOT::InterleaveSpan<MIL::Fp16>(v13, v14, v20, v19 >> 1, (uint64_t)&__p, a5);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  v23 = *v38;
  if (!*v38)
  {
    v23 = operator new();
    if (*(char *)(v17 + 23) < 0)
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
    else
      v50 = *(std::string *)v17;
    Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory(v23, &v50);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    v24 = *v38;
    *v38 = v23;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v23 = *v38;
    }
  }
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  if (*(char *)(v25 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
  }
  else
  {
    v26 = *(_OWORD *)v25;
    v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 16);
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v26;
  }
  v27 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    size = v41.__r_.__value_.__l.__size_;
  v29 = size + 24;
  if (size + 24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 > 0x16)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    p_dst = (__int128 *)operator new(v32 + 1);
    *((_QWORD *)&__dst + 1) = size + 24;
    v40 = v33 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    v31 = v41.__r_.__value_.__r.__words[0];
    if (!size)
    {
      if (v27 >= 0)
        v34 = &v41;
      else
        v34 = (std::string *)v41.__r_.__value_.__r.__words[0];
      goto LABEL_42;
    }
  }
  else
  {
    v40 = 0;
    __dst = 0uLL;
    HIBYTE(v40) = size + 24;
    p_dst = &__dst;
    v31 = v41.__r_.__value_.__r.__words[0];
  }
  if (v27 >= 0)
    v34 = &v41;
  else
    v34 = (std::string *)v31;
  memmove(p_dst, v34, size);
LABEL_42:
  strcpy((char *)p_dst + size, "/interleaved_weights.bin");
  memset(&v50, 0, sizeof(v50));
  std::string::append[abi:ne180100]<char const*,0>(&v50, v34, (std::string *)((char *)v34 + size));
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v50, 0);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  std::ofstream::basic_ofstream(&v50);
  v50.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
  *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + *(_QWORD *)(v50.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x19401C8BC](&v50.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v51);
  MEMORY[0x19401B47C](&v50, &__dst, 1);
  v35 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>();
  if (SHIBYTE(v40) < 0)
  {
    std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = __dst;
    v37->__r_.__value_.__r.__words[2] = v40;
  }
  v37[1].__r_.__value_.__r.__words[0] = v35;
  MIL::Blob::StorageWriter::~StorageWriter((MIL::Blob::StorageWriter *)&v50);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_49;
LABEL_53:
    operator delete(v41.__r_.__value_.__l.__data_);
    v36 = v45;
    if (!v45)
      goto LABEL_51;
    goto LABEL_50;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
LABEL_49:
  v36 = v45;
  if (v45)
LABEL_50:
    operator delete(v36);
LABEL_51:
  MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)v49);
}

void sub_191086FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  uint64_t v44;

  MEMORY[0x19401CD90](v44, 0x1093C402D7449D9);
  if (v43)
    operator delete(v43);
  MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&a37);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1910871A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::WriteInterleavedEmbeddingsFile<signed char>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  size_t v10;
  uint64_t Data;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  size_t size;
  unint64_t v25;
  __int128 *p_dst;
  std::string::size_type v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  void *v32;
  __int128 __dst;
  unint64_t v36;
  std::string v37;
  void *__p;
  void *v39;
  char *v40;
  void *v41;
  char *v42;
  char *v43;
  std::string v44;
  char v45[8];
  std::string v46;
  _QWORD v47[22];

  v47[20] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v44 = *(std::string *)a2;
  MEMORY[0x19401B434](v45, &v44);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  Data = MIL::Blob::StorageReader::GetDataView<signed char>();
  v12 = v10;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10);
    v14 = &v13[v12];
    v41 = v13;
    v43 = &v13[v12];
    bzero(v13, v12);
    v42 = &v13[v12];
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v15 = v14 - v13;
  if (v14 == v13)
    v16 = 0;
  else
    v16 = (uint64_t)v13;
  __p = 0;
  v39 = 0;
  v40 = 0;
  v17 = *(const void **)a4;
  v18 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v18)
  {
    if (v18 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(v18);
    v40 = (char *)__p + 8 * (v18 >> 3);
    memcpy(__p, v17, v18);
    v39 = v40;
  }
  Espresso::AOT::InterleaveSpan<signed char>(Data, v12, v16, v15, (uint64_t)&__p, a5);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  v19 = *a6;
  if (!*a6)
  {
    v19 = operator new();
    if (*(char *)(a7 + 23) < 0)
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
    else
      v46 = *(std::string *)a7;
    Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory(v19, &v46);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    v20 = *a6;
    *a6 = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v19 = *a6;
    }
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  if (*(char *)(v21 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
  }
  else
  {
    v22 = *(_OWORD *)v21;
    v37.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v22;
  }
  v23 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    size = v37.__r_.__value_.__l.__size_;
  v25 = size + 24;
  if (size + 24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v25 > 0x16)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    p_dst = (__int128 *)operator new(v28 + 1);
    *((_QWORD *)&__dst + 1) = size + 24;
    v36 = v29 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    v27 = v37.__r_.__value_.__r.__words[0];
    if (!size)
    {
      if (v23 >= 0)
        v30 = &v37;
      else
        v30 = (std::string *)v37.__r_.__value_.__r.__words[0];
      goto LABEL_42;
    }
  }
  else
  {
    v36 = 0;
    __dst = 0uLL;
    HIBYTE(v36) = size + 24;
    p_dst = &__dst;
    v27 = v37.__r_.__value_.__r.__words[0];
  }
  if (v23 >= 0)
    v30 = &v37;
  else
    v30 = (std::string *)v27;
  memmove(p_dst, v30, size);
LABEL_42:
  strcpy((char *)p_dst + size, "/interleaved_weights.bin");
  memset(&v46, 0, sizeof(v46));
  std::string::append[abi:ne180100]<char const*,0>(&v46, v30, (std::string *)((char *)v30 + size));
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v46, 0);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  std::ofstream::basic_ofstream(&v46);
  v46.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
  *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + *(_QWORD *)(v46.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x19401C8BC](&v46.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v47);
  MEMORY[0x19401B47C](&v46, &__dst, 1);
  v31 = MIL::Blob::StorageWriter::WriteData<signed char>();
  if (SHIBYTE(v36) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = __dst;
    a1->__r_.__value_.__r.__words[2] = v36;
  }
  a1[1].__r_.__value_.__r.__words[0] = v31;
  MIL::Blob::StorageWriter::~StorageWriter((MIL::Blob::StorageWriter *)&v46);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_49;
LABEL_53:
    operator delete(v37.__r_.__value_.__l.__data_);
    v32 = v41;
    if (!v41)
      goto LABEL_51;
    goto LABEL_50;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
LABEL_49:
  v32 = v41;
  if (v41)
LABEL_50:
    operator delete(v32);
LABEL_51:
  MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)v45);
}

void sub_191087620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  uint64_t v44;

  MEMORY[0x19401CD90](v44, 0x1093C402D7449D9);
  if (v43)
    operator delete(v43);
  MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&a37);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::WriteInterleavedEmbeddingsFile<float>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  unint64_t v12;
  uint64_t Data;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  size_t size;
  unint64_t v29;
  __int128 *p_dst;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  void *v36;
  std::string *v37;
  uint64_t *v38;
  __int128 __dst;
  unint64_t v40;
  std::string v41;
  void *__p;
  void *v43;
  char *v44;
  void *v45;
  char *v46;
  char *v47;
  std::string v48;
  char v49[8];
  std::string v50;
  _QWORD v51[22];

  v51[20] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v48 = *(std::string *)a2;
  MEMORY[0x19401B434](v49, &v48);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  Data = MIL::Blob::StorageReader::GetDataView<float>();
  v14 = v12;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v37 = a1;
  v38 = a6;
  if (v12)
  {
    if (v12 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = 4 * v12;
    v16 = (char *)operator new(4 * v12);
    v17 = a7;
    v45 = v16;
    v47 = &v16[4 * v14];
    bzero(v16, 4 * v14);
    v18 = &v16[v15];
    v46 = &v16[v15];
  }
  else
  {
    v17 = a7;
    v18 = 0;
    v16 = 0;
  }
  v19 = v18 - v16;
  if (v18 == v16)
    v20 = 0;
  else
    v20 = (uint64_t)v16;
  __p = 0;
  v43 = 0;
  v44 = 0;
  v21 = *(const void **)a4;
  v22 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v22)
  {
    if (v22 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(v22);
    v44 = (char *)__p + 8 * (v22 >> 3);
    memcpy(__p, v21, v22);
    v43 = v44;
  }
  Espresso::AOT::InterleaveSpan<float>(Data, v14, v20, v19 >> 2, (uint64_t)&__p, a5);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  v23 = *v38;
  if (!*v38)
  {
    v23 = operator new();
    if (*(char *)(v17 + 23) < 0)
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
    else
      v50 = *(std::string *)v17;
    Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory(v23, &v50);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    v24 = *v38;
    *v38 = v23;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v23 = *v38;
    }
  }
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  if (*(char *)(v25 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
  }
  else
  {
    v26 = *(_OWORD *)v25;
    v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 16);
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v26;
  }
  v27 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    size = v41.__r_.__value_.__l.__size_;
  v29 = size + 24;
  if (size + 24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 > 0x16)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    p_dst = (__int128 *)operator new(v32 + 1);
    *((_QWORD *)&__dst + 1) = size + 24;
    v40 = v33 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    v31 = v41.__r_.__value_.__r.__words[0];
    if (!size)
    {
      if (v27 >= 0)
        v34 = &v41;
      else
        v34 = (std::string *)v41.__r_.__value_.__r.__words[0];
      goto LABEL_42;
    }
  }
  else
  {
    v40 = 0;
    __dst = 0uLL;
    HIBYTE(v40) = size + 24;
    p_dst = &__dst;
    v31 = v41.__r_.__value_.__r.__words[0];
  }
  if (v27 >= 0)
    v34 = &v41;
  else
    v34 = (std::string *)v31;
  memmove(p_dst, v34, size);
LABEL_42:
  strcpy((char *)p_dst + size, "/interleaved_weights.bin");
  memset(&v50, 0, sizeof(v50));
  std::string::append[abi:ne180100]<char const*,0>(&v50, v34, (std::string *)((char *)v34 + size));
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v50, 0);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  std::ofstream::basic_ofstream(&v50);
  v50.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
  *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + *(_QWORD *)(v50.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x19401C8BC](&v50.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v51);
  MEMORY[0x19401B47C](&v50, &__dst, 1);
  v35 = MIL::Blob::StorageWriter::WriteData<float>();
  if (SHIBYTE(v40) < 0)
  {
    std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = __dst;
    v37->__r_.__value_.__r.__words[2] = v40;
  }
  v37[1].__r_.__value_.__r.__words[0] = v35;
  MIL::Blob::StorageWriter::~StorageWriter((MIL::Blob::StorageWriter *)&v50);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_49;
LABEL_53:
    operator delete(v41.__r_.__value_.__l.__data_);
    v36 = v45;
    if (!v45)
      goto LABEL_51;
    goto LABEL_50;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
LABEL_49:
  v36 = v45;
  if (v45)
LABEL_50:
    operator delete(v36);
LABEL_51:
  MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)v49);
}

void sub_191087C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  uint64_t v44;

  MEMORY[0x19401CD90](v44, 0x1093C402D7449D9);
  if (v43)
    operator delete(v43);
  MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&a37);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::Run(uint64_t a1, uint64_t a2, std::string::size_type *a3)
{
  std::string::size_type v6;
  std::string::size_type *v7;
  char *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__fs::filesystem::path::__string_view v25;
  void *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v27;
  std::basic_string_view<_CharT, _Traits>::size_type v28;
  void **v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  std::runtime_error *v41;
  std::logic_error *exception;
  std::string __p;
  std::string v44;
  std::string v45;
  std::string pn;
  uint64_t v47;
  std::__fs::filesystem::path __base;
  std::__fs::filesystem::path v49;
  std::__fs::filesystem::path v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__fs::filesystem::path v54;
  std::__fs::filesystem::path v55;
  __int128 v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  std::string __dst;
  uint64_t v63;

  v59 = 0x2B23835800000000;
  v60 = 0u;
  v61 = 0u;
  kdebug_trace();
  v7 = a3;
  v6 = *a3;
  if (v7[1] - v6 != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Too many or too few entry points for E5MinimalCpu.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v56 = 0u;
  v57 = 0u;
  v58 = 1065353216;
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string::size_type))(*(_QWORD *)a2 + 64))(&__dst, a2, v6);
  v55.__pn_.__r_.__value_.__r.__words[0] = v6;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v56, (unsigned __int8 *)v6, (uint64_t)&std::piecewise_construct, (__int128 **)&v55);
  v9 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  *(_OWORD *)(v8 + 40) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  if (__dst.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  memset(&v55, 0, sizeof(v55));
  v16 = *(_BYTE *)(a1 + 287);
  if (v16 >= 0)
    v17 = (std::string *)(a1 + 264);
  else
    v17 = *(std::string **)(a1 + 264);
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a1 + 287);
  else
    v18 = *(_QWORD *)(a1 + 272);
  std::string::append[abi:ne180100]<char const*,0>(&v55.__pn_, v17, (std::string *)((char *)v17 + v18));
  memset(&__dst, 0, sizeof(__dst));
  v19 = *(unsigned __int8 *)(v6 + 23);
  if ((v19 & 0x80u) == 0)
    v20 = (std::string *)v6;
  else
    v20 = *(std::string **)v6;
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(v6 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v20, (std::string *)((char *)v20 + v19));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v55, &v54);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__create_directories(&v54, 0);
  v53 = 0;
  v21 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v51, a2);
  if (SHIBYTE(v54.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, v54.__pn_.__r_.__value_.__l.__data_, v54.__pn_.__r_.__value_.__l.__size_);
  else
    __dst = v54.__pn_;
  Espresso::AOT::MILCompilerForE5MinimalCpu::TransformInterleavedEmbeddings((uint64_t)v21, &v51, (uint64_t)&v56, &v53, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v22 = v52;
  if (v52)
  {
    v23 = (unint64_t *)&v52->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"fragment.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v54, &v50);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v25 = std::__fs::filesystem::path::__parent_path(&v55);
  if (v25.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v25.__size_ >= 0x17)
  {
    v27 = (v25.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25.__size_ | 7) != 0x17)
      v27 = v25.__size_ | 7;
    v28 = v27 + 1;
    p_dst = operator new(v27 + 1);
    __dst.__r_.__value_.__l.__size_ = v25.__size_;
    __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_44;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v25.__size_;
  p_dst = &__dst;
  if (v25.__size_)
LABEL_44:
    memmove(p_dst, v25.__data_, v25.__size_);
  *((_BYTE *)p_dst + v25.__size_) = 0;
  __base.__pn_ = __dst;
  std::__fs::filesystem::path::lexically_relative(&v49, &v50, &__base);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  memset(&__base, 0, sizeof(__base));
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"weights.bin", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&v54, (std::__fs::filesystem::path *)&__dst);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_49;
  }
  else if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_49:
    __base = v49;
    goto LABEL_52;
  }
  std::string::__init_copy_ctor_external(&__base.__pn_, v49.__pn_.__r_.__value_.__l.__data_, v49.__pn_.__r_.__value_.__l.__size_);
LABEL_52:
  v29 = (void **)(a1 + 288);
  if (*(char *)(a1 + 311) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 304) = *((_QWORD *)&__base.__pn_.__r_.__value_.__l + 2);
  Espresso::AOT::MakeIRProgramWithFunctions((uint64_t)&v56, 0, &v47);
  v30 = v47;
  if (SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v50.__pn_.__r_.__value_.__l.__data_, v50.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v50.__pn_;
  if (SHIBYTE(v54.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, v54.__pn_.__r_.__value_.__l.__data_, v54.__pn_.__r_.__value_.__l.__size_);
  else
    v45 = v54.__pn_;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v44, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v44 = __dst;
  Espresso::MILUtil::SerializeProgram(v30, (uint64_t)&pn, (uint64_t)&v45, (uint64_t)&v44, 0x100000004, 0);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_66;
LABEL_70:
      operator delete(pn.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_65;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_70;
LABEL_66:
  if ((SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_67:
    __p = v50.__pn_;
    goto LABEL_72;
  }
LABEL_71:
  std::string::__init_copy_ctor_external(&__p, v50.__pn_.__r_.__value_.__l.__data_, v50.__pn_.__r_.__value_.__l.__size_);
LABEL_72:
  __base.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&__base, 0);
  v31 = v63;
  if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_74;
LABEL_77:
    operator delete(__p.__r_.__value_.__l.__data_);
    v32 = v31;
    if (v31 == 255)
      goto LABEL_110;
    goto LABEL_78;
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_77;
LABEL_74:
  v32 = v31;
  if (v31 == 255)
  {
LABEL_110:
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Failed in serializing MIL fragment on disk.");
    __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_78:
  if (!v32)
    goto LABEL_110;
  v33 = v47;
  v47 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_83:
      if ((SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_84;
      goto LABEL_92;
    }
  }
  else if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_83;
  }
  operator delete(v49.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_84:
    v34 = v53;
    if (!v53)
      goto LABEL_86;
    goto LABEL_85;
  }
LABEL_92:
  operator delete(v50.__pn_.__r_.__value_.__l.__data_);
  v34 = v53;
  if (v53)
LABEL_85:
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
LABEL_86:
  if ((SHIBYTE(v54.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_88;
LABEL_95:
    operator delete(v55.__pn_.__r_.__value_.__l.__data_);
    v35 = (void **)v57;
    if ((_QWORD)v57)
      goto LABEL_99;
    goto LABEL_105;
  }
  operator delete(v54.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_95;
LABEL_88:
  v35 = (void **)v57;
  if ((_QWORD)v57)
  {
    do
    {
      while (1)
      {
LABEL_99:
        v36 = (void **)*v35;
        v37 = (std::__shared_weak_count *)v35[6];
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        if (*((char *)v35 + 39) < 0)
          break;
        operator delete(v35);
        v35 = v36;
        if (!v36)
          goto LABEL_105;
      }
      operator delete(v35[2]);
      operator delete(v35);
      v35 = v36;
    }
    while (v36);
  }
LABEL_105:
  v40 = (void *)v56;
  *(_QWORD *)&v56 = 0;
  if (v40)
    operator delete(v40);
  if (E5RT::g_trace_analysis_level >= v59)
    kdebug_trace();
}

void sub_1910884C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a36)
    (*(void (**)(uint64_t))(*(_QWORD *)a36 + 8))(a36);
  if (*(char *)(v63 - 73) < 0)
    operator delete(*(void **)(v63 - 96));
  if (a48 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (a57)
    (*(void (**)(uint64_t))(*(_QWORD *)a57 + 8))(a57);
  if (a63 < 0)
    operator delete(a58);
  if (*(char *)(v63 - 177) < 0)
    operator delete(*(void **)(v63 - 200));
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v63 - 176);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v63 - 136));
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::GetOutputPaths(Espresso::AOT::MILCompilerForE5MinimalCpu *this@<X0>, _QWORD *a2@<X8>)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 311) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 36), *((_QWORD *)this + 37));
  else
    __p = *(std::string *)((_BYTE *)this + 12);
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1910887C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForE5MinimalCpu::GetOptions(Espresso::AOT::MILCompilerForE5MinimalCpu *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::~MILCompilerForE5MinimalCpu(void **this)
{
  Espresso::AOT::MILCompilerForE5MinimalCpu::~MILCompilerForE5MinimalCpu(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;
  void *v4;

  *this = &off_1E2DA08E0;
  if (*((char *)this + 311) < 0)
  {
    operator delete(this[36]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_3:
      *this = off_1E2DA0650;
      v2 = (void **)this[29];
      if (!v2)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[33]);
  *this = off_1E2DA0650;
  v2 = (void **)this[29];
  if (!v2)
  {
LABEL_4:
    if ((*((char *)this + 231) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_17:
    operator delete(this[26]);
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_18:
    operator delete(this[23]);
    Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
    return;
  }
LABEL_10:
  v3 = (void **)this[30];
  if (v3 == v2)
  {
    this[30] = v2;
    operator delete(v2);
    if (*((char *)this + 231) < 0)
      goto LABEL_17;
  }
  else
  {
    do
    {
      if (*((char *)v3 - 1) < 0)
        operator delete(*(v3 - 3));
      v3 -= 3;
    }
    while (v3 != v2);
    v4 = this[29];
    this[30] = v2;
    operator delete(v4);
    if (*((char *)this + 231) < 0)
      goto LABEL_17;
  }
LABEL_5:
  if (*((char *)this + 207) < 0)
    goto LABEL_18;
LABEL_6:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
}

_QWORD *Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(_QWORD *this)
{
  *this = off_1E2DA08A8;
  return this;
}

_QWORD *Espresso::AOT::SegmentsLowerer::SegmentsLowerer(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v10;
  _QWORD *i;
  void **v12;
  void *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  void **v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *j;
  unsigned __int8 *k;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t Function;
  uint64_t v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  void *__p[2];
  void *v50[2];
  int v51;

  *a1 = a2;
  a1[1] = a3;
  *(_OWORD *)(a1 + 3) = 0u;
  a1[2] = a4;
  *(_OWORD *)(a1 + 5) = 0u;
  v10 = (uint64_t)(a1 + 5);
  *(_OWORD *)(a1 + 7) = 0u;
  *((_DWORD *)a1 + 18) = 1065353216;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v50 = 0u;
  v51 = 1065353216;
  for (i = (_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2) + 16);
        ;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)(i + 2), (uint64_t)(i + 2)))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string> &>((uint64_t)__p, (uint64_t *)&v48);
  v12 = (void **)v50[0];
  if (v50[0])
  {
    do
    {
      v17 = (void **)*v12;
      if (*((char *)v12 + 39) < 0)
        operator delete(v12[2]);
      operator delete(v12);
      v12 = v17;
    }
    while (v17);
  }
  v13 = __p[0];
  __p[0] = 0;
  if (v13)
    operator delete(v13);
  v14 = v48;
  a1[10] = v48;
  if (v14)
  {
    v15 = (_QWORD *)operator new();
    v16 = v48;
    *v15 = &unk_1E2DC3660;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v16;
  }
  else
  {
    v15 = 0;
  }
  a1[11] = v15;
  *((_BYTE *)a1 + 96) = a5;
  *((_BYTE *)a1 + 97) = a6;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 48))(__p);
  v18 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v19 = (std::__shared_weak_count *)a1[4];
  *(_OWORD *)(a1 + 3) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v23 = (unint64_t *)((char *)__p[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = a1[1];
  v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1[2] + 8) - *(_QWORD *)a1[2]) >> 3);
  for (j = *(uint64_t **)(v25 + 16); j; j = (uint64_t *)*j)
  {
    v36 = j + 2;
    if (!(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 56))(*a1, j + 2))
    {
      if (*((char *)j + 39) < 0)
        v36 = (_QWORD *)*v36;
      __p[0] = v36;
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Cannot find function %s\n", __p);
    }
    Function = MIL::IRProgram::GetFunction();
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
    v39 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 56))(v38);
    v41 = **v39;
    v40 = (*v39)[1];
    v42 = (v40 - v41) >> 4;
    __p[0] = (void *)v42;
    v43 = (unint64_t *)j[5];
    if (v42 != (j[6] - (uint64_t)v43) >> 3)
    {
      if (*((char *)j + 39) < 0)
        v36 = (_QWORD *)*v36;
      v46 = (j[6] - (uint64_t)v43) >> 3;
      v47 = v36;
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,unsigned long const&,unsigned long>("Function %s has %lu ops != number of ops in funcToOpBE %lu", &v47, __p, &v46);
    }
    if (v40 != v41)
    {
      if (v42 <= 1)
        v42 = 1;
      do
      {
        v44 = *v43++;
        v47 = (_QWORD *)v44;
        if (v44 >= v48)
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long const&,unsigned long const&>("Backend idx %lu >= total number of backends = %lu", &v47, &v48);
        --v42;
      }
      while (v42);
    }
  }
  for (k = *(unsigned __int8 **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2) + 16);
        k;
        k = *(unsigned __int8 **)k)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)a1[1], k + 16))
    {
      __p[0] = k + 16;
      v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, k + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v30 = *((_QWORD *)k + 5);
      v29 = *((_QWORD *)k + 6);
      if (v29)
      {
        v31 = (unint64_t *)(v29 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)v28 + 6);
      *((_QWORD *)v28 + 5) = v30;
      *((_QWORD *)v28 + 6) = v29;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
  }
  return a1;
}

void sub_191088D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  std::unique_ptr<Espresso::MILTranslator::NameGenerator>::~unique_ptr[abi:ne180100]((Espresso::MILTranslator::NameGenerator **)va);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_191088D40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v3);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

Espresso::MILTranslator::NameGenerator **std::unique_ptr<Espresso::MILTranslator::NameGenerator>::~unique_ptr[abi:ne180100](Espresso::MILTranslator::NameGenerator **a1)
{
  Espresso::MILTranslator::NameGenerator *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    Espresso::MILTranslator::NameGenerator::~NameGenerator(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,unsigned long const&,unsigned long>(char *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>(a1, *a2, *a3, *a4);
}

void Espresso::AOT::SegmentsLowerer::Run(Espresso::AOT::SegmentsLowerer *this@<X0>, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **a2@<X8>)
{
  uint64_t *v4;
  std::string *v5;
  __int128 v6;
  __int128 *v7;
  unsigned __int8 *i;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v9;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v10;
  void *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  const char *v15;
  const char *v16;
  char v17;
  void *__p[7];
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;

  v20 = 0;
  v21 = 0;
  v19 = 0;
  v4 = *(uint64_t **)(*((_QWORD *)this + 1) + 16);
  if (v4)
  {
    v5 = 0;
    do
    {
      v7 = (__int128 *)(v4 + 2);
      if ((unint64_t)v5 < v21)
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          v6 = *v7;
          v5->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
        }
        ++v5;
      }
      else
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v19, (uint64_t)v7);
      }
      v20 = (unsigned __int8 *)v5;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    for (i = v19; i != (unsigned __int8 *)v5; i += 24)
    {
      Espresso::AOT::SegmentsLowerer::FindSegmentMeta((uint64_t)this, i, (uint64_t **)__p);
      Espresso::AOT::SegmentsLowerer::LowerFunction((uint64_t)this, (uint64_t)i, (__int128 **)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(_QWORD, char *))(**(_QWORD **)this + 88))(*(_QWORD *)this, (char *)this + 40);
  Espresso::AOT::AlignCalleeWithCallOp(*a2, &v19);
  v9 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__p[0];
  __p[0] = 0;
  v10 = *a2;
  *a2 = v9;
  if (v10)
  {
    (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v10 + 8))(v10);
    v11 = __p[0];
    __p[0] = 0;
    if (v11)
      (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  }
  MIL::IRProgramValidator::Validate();
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p) & 1) == 0)
  {
    MIL::MILResult::GetMessage((MIL::MILResult *)__p);
    std::operator+<char>();
    if (v17 >= 0)
      v15 = (const char *)&v16;
    else
      v15 = v16;
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v15);
  }
  MEMORY[0x19401B338](__p);
  v12 = v19;
  if (v19)
  {
    v13 = v20;
    v14 = v19;
    if (v20 != v19)
    {
      do
      {
        if ((char)*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = v19;
    }
    v20 = v12;
    operator delete(v14);
  }
}

void sub_191089008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x19401B338](&a16);
  v20 = *v17;
  *v17 = 0;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v18 - 56));
    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v18 - 56));
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::FindSegmentMeta(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t Function;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  __int128 v26;
  void *__p[2];
  char v28;

  Function = MIL::IRProgram::GetFunction();
  v7 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(*(_QWORD **)(a1 + 8), a2);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = v7;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
  v11 = 0;
  v12 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v13 = -1;
  do
  {
    v16 = *(_QWORD *)(*((_QWORD *)v8 + 5) + 8 * v12);
    if (v13 != v16 || (v28 = 12, strcpy((char *)__p, "EndOfSegment"), MIL::IRObject::TryGetAttribute()))
    {
      if (v12)
        *(v11 - 1) = v12;
      v17 = (unint64_t)a3[2];
      if ((unint64_t)v11 < v17)
      {
        *v11 = v16;
        v11[1] = v12;
        v14 = v11 + 3;
        v11[2] = 0;
      }
      else
      {
        v18 = *a3;
        v19 = 0xAAAAAAAAAAAAAAABLL * (v11 - *a3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v18) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = (char *)operator new(24 * v22);
        }
        else
        {
          v23 = 0;
        }
        v24 = (uint64_t *)&v23[24 * v19];
        *v24 = v16;
        v24[1] = v12;
        v24[2] = 0;
        v25 = v24;
        if (v11 != v18)
        {
          do
          {
            v26 = *(_OWORD *)(v11 - 3);
            *(v25 - 1) = *(v11 - 1);
            *(_OWORD *)(v25 - 3) = v26;
            v25 -= 3;
            v11 -= 3;
          }
          while (v11 != v18);
          v11 = *a3;
        }
        v14 = v24 + 3;
        *a3 = v25;
        a3[1] = v24 + 3;
        a3[2] = (uint64_t *)&v23[24 * v22];
        if (v11)
          operator delete(v11);
      }
      a3[1] = v14;
      v11 = v14;
      v13 = v16;
    }
    ++v12;
    v15 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v10 + 8) - **(_QWORD **)v10) >> 4;
  }
  while (v12 < v15);
  *(v11 - 1) = v15;
}

void sub_191089338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::SegmentsLowerer::LowerFunction(uint64_t a1, uint64_t a2, __int128 **a3)
{
  MIL::IRObject *Function;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  int64x2_t v26;

  Function = (MIL::IRObject *)MIL::IRProgram::GetFunction();
  Espresso::AOT::SegmentsLowerer::FindSegmentDefs((uint64_t)Function, a3, &v26);
  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  if (*(_BYTE *)(a1 + 96) && 0x8E38E38E38E38E39 * ((v26.i64[1] - v26.i64[0]) >> 3) >= 2)
  {
    Espresso::AOT::SegmentsLowerer::GenerateAndMergeSegmentFunctions(a1, a2, (uint64_t)Function, (char **)&v26, &v22);
    v7 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_12;
    v8 = (char *)__p[1];
    v9 = __p[0];
    if (__p[1] == __p[0])
      goto LABEL_11;
    do
    {
      v8 -= 80;
      std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)&v25, (uint64_t)v8);
    }
    while (v8 != v7);
    goto LABEL_10;
  }
  Espresso::AOT::SegmentsLowerer::GenerateSegmentFunctions(a1, a2, v26.i64, (uint64_t)&v22);
  v7 = (char *)__p[0];
  if (!__p[0])
    goto LABEL_12;
  v10 = (char *)__p[1];
  v9 = __p[0];
  if (__p[1] != __p[0])
  {
    do
    {
      v10 -= 80;
      std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)&v25, (uint64_t)v10);
    }
    while (v10 != v7);
LABEL_10:
    v9 = __p[0];
  }
LABEL_11:
  __p[1] = v7;
  operator delete(v9);
LABEL_12:
  *(_OWORD *)__p = v22;
  v25 = v23;
  Espresso::AOT::SegmentsLowerer::GenerateEntryPointFunction(a1, (uint64_t)Function, (uint64_t *)__p, (uint64_t)&v22);
  v11 = *(std::__shared_weak_count **)(MIL::IRObject::GetLocationPtr(Function) + 8);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRObject::SetLocation();
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRFunction>>(a1 + 40, a2, a2, (uint64_t *)&v22);
  if ((v16 & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to lower entry point function");
  v17 = v22;
  *(_QWORD *)&v22 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (char *)__p[0];
  if (__p[0])
  {
    v19 = (char *)__p[1];
    v20 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v19 -= 80;
        std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)&v25, (uint64_t)v19);
      }
      while (v19 != v18);
      v20 = __p[0];
    }
    __p[1] = v18;
    operator delete(v20);
  }
  if (v26.i64[0])
  {
    std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v26, v26.i64[0]);
    operator delete((void *)v26.i64[0]);
  }
}

void sub_1910895F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, void *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100]((void **)va);
  std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::~vector[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::FindSegmentDefs(uint64_t a1@<X1>, __int128 **a2@<X2>, int64x2_t *a3@<X8>)
{
  uint64_t **v5;
  const MIL::IROperation *v6;
  uint64_t v7;
  unint64_t v8;
  Espresso::AOT *v9;
  _QWORD *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  MIL::IRNamedValueType **v14;
  MIL::IRNamedValueType **v15;
  void **v16;
  uint64_t v17;
  const MIL::IROperation *v18;
  uint64_t v19;
  __int128 *v20;
  std::string *v21;
  __int128 v22;
  unint64_t j;
  Espresso::AOT *v24;
  __int128 *v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char **v29;
  char **v30;
  int v31;
  size_t v32;
  const void *v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  size_t v38;
  char *v39;
  size_t v40;
  int v41;
  _BOOL4 v42;
  int v43;
  _BOOL4 v44;
  char *v45;
  std::string *v46;
  __int128 v47;
  char *v48;
  BOOL v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void **v62;
  void *v63;
  uint64_t v64;
  MIL::IRNamedValueType **v65;
  MIL::IRNamedValueType **v66;
  void **v67;
  std::string *v68;
  uint64_t Name;
  uint64_t *v70;
  _OWORD *v71;
  __int128 v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  std::string *v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  std::string *v87;
  std::string *v88;
  __int128 *v89;
  void **v90;
  void *v91;
  std::string *v92;
  unint64_t v93;
  void **v94;
  std::string *v95;
  char **v96;
  std::string *v97;
  char *v98;
  char **v99;
  unint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  std::string *v106;
  std::string *v107;
  void **v108;
  void *v109;
  void **v110;
  void *v111;
  void **v112;
  void *v113;
  void **v114;
  void **v115;
  void **v116;
  __int128 *v117;
  uint64_t v118;
  uint64_t **v119;
  unint64_t v120;
  Espresso::AOT *v121;
  int64x2_t *v122;
  char **v123;
  char *v124;
  unint64_t v125;
  void *__p[2];
  void *v127;
  std::string *v128[2];
  _QWORD v129[5];
  void *v130[2];
  void *v131[2];
  int i;
  __int128 v133;
  __int128 v134;
  int v135;
  __int128 v136;
  __int128 v137;
  int v138;
  std::string *v139;
  std::string *v140;
  unint64_t v141;
  __int128 v142;
  __int128 v143;
  int v144;
  __int128 *v145;

  v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = (uint64_t **)(*(uint64_t (**)(void))(*(_QWORD *)v118 + 56))();
  v136 = 0u;
  v137 = 0u;
  v138 = 1065353216;
  v133 = 0u;
  v134 = 0u;
  v135 = 1065353216;
  v119 = v5;
  v7 = **v5;
  if ((*v5)[1] != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(Espresso::AOT **)(v7 + 16 * v8);
      Espresso::AOT::GetAllOpInputs(v9, v6, (uint64_t)__p);
      v10 = v127;
      if (v127)
      {
        do
        {
          *(_QWORD *)&v142 = v10 + 2;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v136, (uint64_t)(v10 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&v142)[5] = v8;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
        v11 = (void **)v127;
        if (v127)
        {
          do
          {
            v16 = (void **)*v11;
            if (*((char *)v11 + 39) < 0)
              operator delete(v11[2]);
            operator delete(v11);
            v11 = v16;
          }
          while (v16);
        }
      }
      v12 = __p[0];
      __p[0] = 0;
      if (v12)
        operator delete(v12);
      v13 = (*(uint64_t (**)(Espresso::AOT *))(*(_QWORD *)v9 + 176))(v9);
      v14 = *(MIL::IRNamedValueType ***)v13;
      v15 = *(MIL::IRNamedValueType ***)(v13 + 8);
      if (*(MIL::IRNamedValueType ***)v13 != v15)
      {
        do
        {
          __p[0] = (void *)MIL::IRNamedValueType::GetName(*v14);
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v133, (uint64_t)__p[0], (uint64_t)&std::piecewise_construct, (__int128 **)__p)[5] = v8;
          v14 += 2;
        }
        while (v14 != v15);
      }
      ++v8;
      v7 = **v119;
    }
    while (v8 < ((*v119)[1] - v7) >> 4);
  }
  v17 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 88))(v118);
  v19 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 88))(v118) + 8);
  *(_OWORD *)v130 = 0u;
  *(_OWORD *)v131 = 0u;
  for (i = 1065353216; v17 != v19; v17 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v130, v17, v17);
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  v20 = *a2;
  v117 = a2[1];
  if (*a2 != v117)
  {
    v122 = a3;
    do
    {
      v22 = *v20;
      v127 = (void *)*((_QWORD *)v20 + 2);
      *(_OWORD *)__p = v22;
      *(_OWORD *)v128 = 0u;
      memset(v129, 0, 32);
      v124 = 0;
      v125 = 0;
      v123 = &v124;
      for (j = *((_QWORD *)v20 + 1); j < *((_QWORD *)v20 + 2); j = v120 + 1)
      {
        v120 = j;
        v24 = *(Espresso::AOT **)(**v119 + 16 * j);
        Espresso::AOT::GetAllOpInputs(v24, v18, (uint64_t)&v142);
        v121 = v24;
        v25 = v20;
        v26 = (uint64_t *)v143;
        if ((_QWORD)v143)
        {
          do
          {
            v27 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v133, (uint64_t)(v26 + 2));
            if (!v27 || (unint64_t)v27[5] < *((_QWORD *)v25 + 1))
            {
              v28 = v124;
              v29 = &v124;
              v30 = &v124;
              if (v124)
              {
                v31 = *((char *)v26 + 39);
                if (v31 >= 0)
                  v32 = *((unsigned __int8 *)v26 + 39);
                else
                  v32 = v26[3];
                if (v31 >= 0)
                  v33 = v26 + 2;
                else
                  v33 = (const void *)v26[2];
                while (1)
                {
                  while (1)
                  {
                    v29 = (char **)v28;
                    v36 = (char *)*((_QWORD *)v28 + 4);
                    v34 = v28 + 32;
                    v35 = v36;
                    v37 = v34[23];
                    if (v37 >= 0)
                      v38 = v34[23];
                    else
                      v38 = *((_QWORD *)v34 + 1);
                    if (v37 >= 0)
                      v39 = v34;
                    else
                      v39 = v35;
                    if (v38 >= v32)
                      v40 = v32;
                    else
                      v40 = v38;
                    v41 = memcmp(v33, v39, v40);
                    v42 = v32 < v38;
                    if (v41)
                      v42 = v41 < 0;
                    if (!v42)
                      break;
                    v28 = *v29;
                    v30 = v29;
                    if (!*v29)
                      goto LABEL_59;
                  }
                  v43 = memcmp(v39, v33, v40);
                  v44 = v38 < v32;
                  if (v43)
                    v44 = v43 < 0;
                  if (!v44)
                    break;
                  v28 = v29[1];
                  if (!v28)
                  {
                    v30 = v29 + 1;
                    goto LABEL_59;
                  }
                }
              }
              else
              {
LABEL_59:
                v45 = (char *)operator new(0x38uLL);
                v46 = (std::string *)(v45 + 32);
                if (*((char *)v26 + 39) < 0)
                {
                  std::string::__init_copy_ctor_external(v46, (const std::string::value_type *)v26[2], v26[3]);
                }
                else
                {
                  v47 = *((_OWORD *)v26 + 1);
                  *((_QWORD *)v45 + 6) = v26[4];
                  *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
                }
                *(_QWORD *)v45 = 0;
                *((_QWORD *)v45 + 1) = 0;
                *((_QWORD *)v45 + 2) = v29;
                *v30 = v45;
                if (*v123)
                {
                  v123 = (char **)*v123;
                  v45 = *v30;
                }
                v48 = v124;
                v49 = v45 == v124;
                v45[24] = v45 == v124;
                if (!v49)
                {
                  do
                  {
                    v50 = *((_QWORD *)v45 + 2);
                    if (*(_BYTE *)(v50 + 24))
                      break;
                    v51 = *(char **)(v50 + 16);
                    v52 = *(_QWORD *)v51;
                    if (*(_QWORD *)v51 == v50)
                    {
                      v55 = *((_QWORD *)v51 + 1);
                      if (!v55 || (v56 = *(unsigned __int8 *)(v55 + 24), v53 = (_BYTE *)(v55 + 24), v56))
                      {
                        if (*(char **)v50 == v45)
                        {
                          *(_BYTE *)(v50 + 24) = 1;
                          v51[24] = 0;
                          v59 = *(_QWORD *)(v50 + 8);
                          *(_QWORD *)v51 = v59;
                          if (v59)
                            goto LABEL_79;
                        }
                        else
                        {
                          v57 = *(uint64_t **)(v50 + 8);
                          v58 = *v57;
                          *(_QWORD *)(v50 + 8) = *v57;
                          if (v58)
                          {
                            *(_QWORD *)(v58 + 16) = v50;
                            v51 = *(char **)(v50 + 16);
                          }
                          v57[2] = (uint64_t)v51;
                          *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8 * (**(_QWORD **)(v50 + 16) != v50)) = v57;
                          *v57 = v50;
                          *(_QWORD *)(v50 + 16) = v57;
                          v51 = (char *)v57[2];
                          v50 = *(_QWORD *)v51;
                          *((_BYTE *)v57 + 24) = 1;
                          v51[24] = 0;
                          v59 = *(_QWORD *)(v50 + 8);
                          *(_QWORD *)v51 = v59;
                          if (v59)
LABEL_79:
                            *(_QWORD *)(v59 + 16) = v51;
                        }
                        *(_QWORD *)(v50 + 16) = *((_QWORD *)v51 + 2);
                        *(_QWORD *)(*((_QWORD *)v51 + 2) + 8 * (**((_QWORD **)v51 + 2) != (_QWORD)v51)) = v50;
                        *(_QWORD *)(v50 + 8) = v51;
LABEL_29:
                        *((_QWORD *)v51 + 2) = v50;
                        break;
                      }
                    }
                    else if (!v52 || (v54 = *(unsigned __int8 *)(v52 + 24), v53 = (_BYTE *)(v52 + 24), v54))
                    {
                      if (*(char **)v50 == v45)
                      {
                        v61 = *((_QWORD *)v45 + 1);
                        *(_QWORD *)v50 = v61;
                        if (v61)
                        {
                          *(_QWORD *)(v61 + 16) = v50;
                          v51 = *(char **)(v50 + 16);
                        }
                        *((_QWORD *)v45 + 2) = v51;
                        *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8 * (**(_QWORD **)(v50 + 16) != v50)) = v45;
                        *((_QWORD *)v45 + 1) = v50;
                        *(_QWORD *)(v50 + 16) = v45;
                        v51 = (char *)*((_QWORD *)v45 + 2);
                        v45[24] = 1;
                        v51[24] = 0;
                        v50 = *((_QWORD *)v51 + 1);
                        v60 = *(char **)v50;
                        *((_QWORD *)v51 + 1) = *(_QWORD *)v50;
                        if (!v60)
                          goto LABEL_28;
                      }
                      else
                      {
                        *(_BYTE *)(v50 + 24) = 1;
                        v51[24] = 0;
                        v50 = *((_QWORD *)v51 + 1);
                        v60 = *(char **)v50;
                        *((_QWORD *)v51 + 1) = *(_QWORD *)v50;
                        if (!v60)
                          goto LABEL_28;
                      }
                      *((_QWORD *)v60 + 2) = v51;
LABEL_28:
                      *(_QWORD *)(v50 + 16) = *((_QWORD *)v51 + 2);
                      *(_QWORD *)(*((_QWORD *)v51 + 2) + 8 * (**((_QWORD **)v51 + 2) != (_QWORD)v51)) = v50;
                      *(_QWORD *)v50 = v51;
                      goto LABEL_29;
                    }
                    *(_BYTE *)(v50 + 24) = 1;
                    v45 = v51;
                    v51[24] = v51 == v48;
                    *v53 = 1;
                  }
                  while (v51 != v48);
                }
                ++v125;
              }
            }
            v26 = (uint64_t *)*v26;
          }
          while (v26);
          v62 = (void **)v143;
          if ((_QWORD)v143)
          {
            do
            {
              v67 = (void **)*v62;
              if (*((char *)v62 + 39) < 0)
                operator delete(v62[2]);
              operator delete(v62);
              v62 = v67;
            }
            while (v67);
          }
        }
        v63 = (void *)v142;
        *(_QWORD *)&v142 = 0;
        if (v63)
          operator delete(v63);
        a3 = v122;
        v64 = (*(uint64_t (**)(Espresso::AOT *))(*(_QWORD *)v121 + 176))(v121);
        v20 = v25;
        v65 = *(MIL::IRNamedValueType ***)v64;
        v66 = *(MIL::IRNamedValueType ***)(v64 + 8);
        if (*(MIL::IRNamedValueType ***)v64 != v66)
        {
          do
          {
            Name = MIL::IRNamedValueType::GetName(*v65);
            *(_QWORD *)&v142 = Name;
            v70 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v136, Name, (uint64_t)&std::piecewise_construct, (__int128 **)&v142);
            if (v70[5] >= (unint64_t)v127
              || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v130, Name))
            {
              v71 = (_OWORD *)v129[2];
              if (v129[2] >= v129[3])
              {
                v68 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v129[1], Name);
              }
              else
              {
                if (*(char *)(Name + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v129[2], *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
                }
                else
                {
                  v72 = *(_OWORD *)Name;
                  *(_QWORD *)(v129[2] + 16) = *(_QWORD *)(Name + 16);
                  *v71 = v72;
                }
                v68 = (std::string *)((char *)v71 + 24);
              }
              v129[2] = v68;
            }
            v65 += 2;
          }
          while (v65 != v66);
        }
      }
      v73 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 88))(v118);
      v142 = 0u;
      v143 = 0u;
      v144 = 1065353216;
      v74 = *v73;
      if (v73[1] != *v73)
      {
        v75 = 0;
        v76 = 0;
        do
        {
          v139 = (std::string *)(v74 + v75);
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v142, v74 + v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v139)[5] = v76++;
          v74 = *v73;
          v75 += 24;
        }
        while (v76 < 0xAAAAAAAAAAAAAAABLL * ((v73[1] - *v73) >> 3));
      }
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v78 = v129[1];
      v77 = v129[2];
      if (v129[1] == v129[2])
      {
        v79 = 0;
        v80 = 0;
      }
      else
      {
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v142, v78))
          {
            v82 = v140;
            if ((unint64_t)v140 >= v141)
            {
              v81 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v139, v78);
            }
            else
            {
              if (*(char *)(v78 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v140, *(const std::string::value_type **)v78, *(_QWORD *)(v78 + 8));
              }
              else
              {
                v83 = *(_OWORD *)v78;
                v140->__r_.__value_.__r.__words[2] = *(_QWORD *)(v78 + 16);
                *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
              }
              v81 = v82 + 1;
            }
            v140 = v81;
          }
          v78 += 24;
        }
        while (v78 != v77);
        v79 = v139;
        v80 = v140;
      }
      v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v80 - (char *)v79) >> 3);
      if (v84 >= 2)
      {
        v145 = &v142;
        v85 = 126 - 2 * __clz(v84);
        v86 = v80 == v79 ? 0 : v85;
        v79 = v139;
        v87 = (std::string *)v129[1];
        if (v129[1] != v129[2])
        {
          do
          {
            if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v142, (uint64_t)v87))
            {
              std::string::operator=(v87, v79++);
            }
            ++v87;
          }
          while (v87 != (std::string *)v129[2]);
          v79 = v139;
        }
      }
      if (v79)
      {
        v88 = v140;
        v89 = (__int128 *)v79;
        if (v140 != v79)
        {
          do
          {
            if (SHIBYTE(v88[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v88[-1].__r_.__value_.__l.__data_);
            --v88;
          }
          while (v88 != v79);
          v89 = (__int128 *)v139;
        }
        v140 = v79;
        operator delete(v89);
      }
      v90 = (void **)v143;
      if ((_QWORD)v143)
      {
        do
        {
          v94 = (void **)*v90;
          if (*((char *)v90 + 39) < 0)
            operator delete(v90[2]);
          operator delete(v90);
          v90 = v94;
        }
        while (v94);
      }
      v91 = (void *)v142;
      *(_QWORD *)&v142 = 0;
      if (v91)
        operator delete(v91);
      v92 = v128[1];
      v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v128[1] - (char *)v128[0]) >> 3);
      if (v125 <= v93)
      {
        if (v125 < v93)
        {
          v95 = &v128[0][v125];
          while (v92 != v95)
          {
            if (SHIBYTE(v92[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v92[-1].__r_.__value_.__l.__data_);
            --v92;
          }
          v128[1] = v95;
        }
      }
      else
      {
        std::vector<std::string>::__append((std::vector<std::string> *)v128, v125 - v93);
      }
      v96 = v123;
      if (v123 != &v124)
      {
        v97 = v128[0];
        do
        {
          std::string::operator=(v97, (const std::string *)(v96 + 4));
          v98 = v96[1];
          if (v98)
          {
            do
            {
              v99 = (char **)v98;
              v98 = *(char **)v98;
            }
            while (v98);
          }
          else
          {
            do
            {
              v99 = (char **)v96[2];
              v49 = *v99 == (char *)v96;
              v96 = v99;
            }
            while (!v49);
          }
          ++v97;
          v96 = v99;
        }
        while (v99 != &v124);
      }
      v100 = a3->u64[1];
      if (v100 >= a3[1].i64[0])
      {
        v102 = std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentDef>(a3, (uint64_t)__p);
      }
      else
      {
        v101 = v127;
        *(_OWORD *)v100 = *(_OWORD *)__p;
        *(_QWORD *)(v100 + 16) = v101;
        *(_QWORD *)(v100 + 24) = 0;
        *(_QWORD *)(v100 + 40) = 0;
        *(_QWORD *)(v100 + 48) = 0;
        *(_QWORD *)(v100 + 32) = 0;
        *(_OWORD *)(v100 + 24) = *(_OWORD *)v128;
        *(_QWORD *)(v100 + 40) = v129[0];
        v128[0] = 0;
        v128[1] = 0;
        v129[0] = 0;
        *(_QWORD *)(v100 + 56) = 0;
        *(_QWORD *)(v100 + 64) = 0;
        *(_OWORD *)(v100 + 48) = *(_OWORD *)&v129[1];
        *(_QWORD *)(v100 + 64) = v129[3];
        memset(&v129[1], 0, 24);
        v102 = (char *)(v100 + 72);
      }
      a3->i64[1] = (uint64_t)v102;
      std::__tree<std::string>::destroy((uint64_t)&v123, v124);
      v103 = v129[1];
      if (v129[1])
      {
        v104 = v129[2];
        v105 = (void *)v129[1];
        if (v129[2] != v129[1])
        {
          do
          {
            if (*(char *)(v104 - 1) < 0)
              operator delete(*(void **)(v104 - 24));
            v104 -= 24;
          }
          while (v104 != v103);
          v105 = (void *)v129[1];
        }
        v129[2] = v103;
        operator delete(v105);
      }
      v106 = v128[0];
      if (v128[0])
      {
        v107 = v128[1];
        v21 = v128[0];
        if (v128[1] != v128[0])
        {
          do
          {
            if (SHIBYTE(v107[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v107[-1].__r_.__value_.__l.__data_);
            --v107;
          }
          while (v107 != v106);
          v21 = v128[0];
        }
        v128[1] = v106;
        operator delete(v21);
      }
      v20 = (__int128 *)((char *)v20 + 24);
    }
    while (v20 != v117);
  }
  v108 = (void **)v131[0];
  if (v131[0])
  {
    do
    {
      v114 = (void **)*v108;
      if (*((char *)v108 + 39) < 0)
        operator delete(v108[2]);
      operator delete(v108);
      v108 = v114;
    }
    while (v114);
  }
  v109 = v130[0];
  v130[0] = 0;
  if (v109)
    operator delete(v109);
  v110 = (void **)v134;
  if ((_QWORD)v134)
  {
    do
    {
      v115 = (void **)*v110;
      if (*((char *)v110 + 39) < 0)
        operator delete(v110[2]);
      operator delete(v110);
      v110 = v115;
    }
    while (v115);
  }
  v111 = (void *)v133;
  *(_QWORD *)&v133 = 0;
  if (v111)
    operator delete(v111);
  v112 = (void **)v137;
  if ((_QWORD)v137)
  {
    do
    {
      v116 = (void **)*v112;
      if (*((char *)v112 + 39) < 0)
        operator delete(v112[2]);
      operator delete(v112);
      v112 = v116;
    }
    while (v116);
  }
  v113 = (void *)v136;
  *(_QWORD *)&v136 = 0;
  if (v113)
    operator delete(v113);
}

void sub_19108A21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,void **a39)
{
  uint64_t v39;
  void **v41;
  void **v42;
  void *v43;
  void **v44;
  void **v45;

  v41 = a39;
  if (a39)
  {
    do
    {
      v44 = (void **)*v41;
      if (*((char *)v41 + 39) < 0)
        operator delete(v41[2]);
      operator delete(v41);
      v41 = v44;
    }
    while (v44);
  }
  if (__p)
    operator delete(__p);
  v42 = *(void ***)(v39 - 192);
  if (v42)
  {
    do
    {
      v45 = (void **)*v42;
      if (*((char *)v42 + 39) < 0)
        operator delete(v42[2]);
      operator delete(v42);
      v42 = v45;
    }
    while (v45);
  }
  v43 = *(void **)(v39 - 208);
  *(_QWORD *)(v39 - 208) = 0;
  if (v43)
    operator delete(v43);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::SegmentsLowerer::GenerateAndMergeSegmentFunctions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, _QWORD *a5@<X8>)
{
  char *v5;
  char *v6;
  BOOL v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  MIL::IRValueType *v16;
  uint64_t *v17;
  _QWORD *v18;
  void **v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  std::string::size_type v48;
  std::string::size_type size;
  std::string *v50;
  char *v51;
  __int128 v52;
  std::string::size_type v53;
  unint64_t v54;
  void *v55;
  void **v56;
  void *v57;
  char *v58;
  void **v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *k;
  _QWORD *v64;
  _QWORD *v65;
  void **v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  void **v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE *v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  uint8x8_t v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void **v131;
  void *v132;
  void **v133;
  void *v134;
  _QWORD **v135;
  _QWORD *v136;
  void *v137;
  char *v138;
  void *v139;
  std::string *v140;
  std::string *v141;
  std::string *v142;
  _QWORD *v143;
  void **v144;
  void **v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  std::string *v149;
  unint64_t v150;
  int v151;
  size_t v152;
  unint64_t v153;
  _QWORD *v154;
  __int128 *p_dst;
  std::string *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const void *v160;
  uint64_t v161;
  int v162;
  const std::string::value_type *v163;
  std::string::size_type v164;
  std::string *v165;
  __int128 v166;
  uint64_t *v167;
  int8x8_t v168;
  uint8x8_t v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  __int128 v177;
  std::__shared_weak_count *v178;
  unint64_t *p_shared_owners;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  char *v184;
  void **v185;
  char *v186;
  uint64_t v187;
  char *v188;
  __int128 v189;
  void *v190;
  char *v191;
  std::string::size_type v192;
  std::string::size_type v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  void *v198;
  unint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  uint8x8_t v204;
  unint64_t v205;
  unint64_t v206;
  const std::string **v207;
  const std::string *v208;
  unint64_t v209;
  std::string::size_type v210;
  const std::string *v211;
  char *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  char *v223;
  __int128 v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  char *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t *v258;
  std::string *v259;
  __int128 *v260;
  unint64_t v261;
  __int128 v262;
  std::string *v263;
  void **p_data;
  std::string::pointer data;
  std::string::size_type v266;
  void *v267;
  char **v268;
  _QWORD *v269;
  char *v270;
  std::string *v271;
  __int128 v272;
  void *v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  _BYTE *v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  char **v287;
  char *v288;
  __int128 *v289;
  __int128 v290;
  char *v291;
  char **v292;
  void **v293;
  std::string::pointer v294;
  std::string::size_type v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  _QWORD *v300;
  _QWORD *v301;
  uint64_t *v302;
  uint64_t **v303;
  unint64_t v304;
  uint64_t **v305;
  unint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  uint64_t *v311;
  uint64_t **v312;
  unint64_t v313;
  uint64_t **v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  std::string *v318;
  std::string *v319;
  std::string *v320;
  uint64_t v321;
  uint64_t v322;
  void *v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  MIL::Builder::FunctionBuilder *v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  char *v334;
  char *v335;
  char *v336;
  void **v337;
  void *v338;
  void **v339;
  void **v340;
  void **v341;
  void *v342;
  void **v343;
  void **v344;
  void **v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  void **v352;
  void **v353;
  void *v354;
  _QWORD **v355;
  _QWORD *v356;
  void *v357;
  void **v358;
  void *v359;
  char *v360;
  char *v361;
  void *v362;
  void **v363;
  void **v364;
  unint64_t v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  MIL::IRValueType *v370;
  uint64_t *v371;
  _QWORD *v372;
  void **v373;
  _QWORD *v374;
  _QWORD *v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  _BYTE *v381;
  uint64_t v382;
  _BYTE *v383;
  int v384;
  uint64_t v385;
  int v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  _QWORD *v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  char *v404;
  char *v405;
  std::string *v406;
  unint64_t v407;
  void *v408;
  unint64_t v409;
  std::string *v410;
  void **v411;
  void *v412;
  char *v413;
  void **v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t *n;
  _QWORD *v419;
  _QWORD *v420;
  void **v421;
  _QWORD *v422;
  _QWORD *v423;
  unint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  _BYTE *v429;
  uint64_t v430;
  _BYTE *v431;
  int v432;
  uint64_t v433;
  int v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  char *v439;
  int v440;
  uint64_t v441;
  _QWORD *v442;
  _QWORD *v443;
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  void **v450;
  unint64_t v451;
  _QWORD *v452;
  _QWORD *v453;
  unint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  _BYTE *v459;
  uint64_t v460;
  _BYTE *v461;
  int v462;
  uint64_t v463;
  int v464;
  uint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  _QWORD *v468;
  _QWORD *v469;
  _QWORD *v470;
  _QWORD *v471;
  _QWORD *v472;
  uint64_t v473;
  char *v474;
  unint64_t v475;
  uint64_t *v476;
  char *v477;
  unint64_t v478;
  unint64_t v479;
  uint8x8_t v480;
  char *v481;
  char *v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  unint64_t v486;
  void **v487;
  std::string *v488;
  void **v489;
  void *v490;
  _QWORD **v491;
  _QWORD *v492;
  void *v493;
  char *v494;
  void *v495;
  char *v496;
  char *v497;
  uint64_t *v498;
  char *v499;
  unint64_t v500;
  _QWORD *v501;
  char *v502;
  void **v503;
  void **v504;
  unint64_t v505;
  unint64_t v506;
  uint64_t v507;
  void **v508;
  void **v509;
  char *v510;
  _QWORD *v511;
  _QWORD *v512;
  _QWORD *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  char *v520;
  char *v521;
  char *v522;
  unint64_t v523;
  int8x8_t v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  _BYTE *v528;
  uint64_t v529;
  unint64_t v530;
  char *v531;
  uint64_t v532;
  uint8x8_t v533;
  unint64_t v534;
  _QWORD *v535;
  _QWORD *v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  _OWORD *v543;
  char *v544;
  uint64_t v545;
  __int128 v546;
  _QWORD *v547;
  _QWORD *v548;
  uint64_t v549;
  _QWORD *v550;
  _QWORD *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  _QWORD *v559;
  unint64_t v560;
  void *v561;
  void **v562;
  void *v563;
  _QWORD **v564;
  _QWORD *v565;
  void *v566;
  void **v567;
  char *v568;
  void **v569;
  uint64_t v570;
  uint64_t v571;
  __int128 v572;
  char *v573;
  uint64_t v574;
  char *v575;
  char *v576;
  char v577;
  uint64_t v579;
  char *v580;
  _QWORD *v581;
  unint64_t *v582;
  int64_t v586;
  uint64_t *v587;
  unint64_t v588;
  _QWORD *v590;
  void *__p[2];
  _BYTE v592[24];
  void *v593;
  std::string v594;
  uint64_t v595;
  uint64_t v596;
  MIL::Builder::BlockBuilder *v597;
  std::__shared_weak_count *v598;
  uint64_t v599;
  std::__shared_weak_count *v600;
  uint64_t v601;
  std::__shared_weak_count *v602;
  MIL::Builder::FunctionBuilder *v603;
  uint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  std::__shared_weak_count *v607;
  uint64_t v608;
  std::__shared_weak_count *v609;
  uint64_t v610;
  std::__shared_weak_count *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  std::string::size_type v614;
  unint64_t v615;
  unint64_t v616;
  void *v617[2];
  _QWORD **v618;
  void *v619[2];
  void *v620;
  void *v621[2];
  void *v622[2];
  int v623;
  void *v624[2];
  void *v625;
  std::string *v626[2];
  void *v627[2];
  int m;
  __int128 v629;
  __int128 v630;
  int j;
  __int128 __dst;
  __int128 v633;
  int i;
  uint64_t **v635;
  char *v636;
  unint64_t v637;
  _BYTE v638[32];
  __int128 v639;
  uint64_t v640;

  v6 = *a4;
  v5 = a4[1];
  v624[0] = 0;
  v624[1] = 0;
  v625 = 0;
  *(_OWORD *)v621 = 0u;
  *(_OWORD *)v622 = 0u;
  v623 = 1065353216;
  v626[1] = 0;
  v626[0] = 0;
  v627[0] = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v592 = 0u;
  *(_DWORD *)&v592[16] = 1065353216;
  memset(v638, 0, sizeof(v638));
  LODWORD(v639) = 1065353216;
  v8 = v5 - v6;
  v7 = v5 == v6;
  v9 = (unsigned __int128)((v5 - v6) * (__int128)0xE38E38E38E38E39) >> 64;
  v10 = (v9 >> 2) + ((unint64_t)v9 >> 63);
  v587 = (uint64_t *)v10;
  v579 = v8;
  if (v7)
  {
    __dst = 0uLL;
    v633 = 0uLL;
    i = 1065353216;
    v629 = 0uLL;
    v630 = 0uLL;
    j = 1065353216;
  }
  else
  {
    v11 = 0;
    if (v10 <= 1)
      v12 = 1;
    else
      v12 = v10;
    do
    {
      v13 = (uint64_t)&(*a4)[72 * v11];
      v15 = *(_QWORD *)(v13 + 24);
      v14 = *(_QWORD *)(v13 + 32);
      while (v15 != v14)
      {
        v16 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 152))(a3, v15);
        if (v16 && MIL::IRValueType::TryCastAsStateType(v16))
        {
          *(_QWORD *)&__dst = v15;
          v17 = std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v15, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
          v19 = (void **)(v17 + 6);
          v18 = (_QWORD *)v17[6];
          v20 = v17 + 6;
          v21 = v17 + 6;
          if (v18)
          {
            while (1)
            {
              while (1)
              {
                v21 = v18;
                v22 = v18[4];
                if (v11 >= v22)
                  break;
                v18 = (_QWORD *)*v21;
                v20 = v21;
                if (!*v21)
                  goto LABEL_22;
              }
              if (v22 >= v11)
                break;
              v18 = (_QWORD *)v21[1];
              if (!v18)
              {
                v20 = v21 + 1;
                goto LABEL_22;
              }
            }
          }
          else
          {
LABEL_22:
            v23 = operator new(0x28uLL);
            v23[4] = v11;
            *v23 = 0;
            v23[1] = 0;
            v23[2] = v21;
            *v20 = v23;
            v24 = *(_QWORD *)v17[5];
            if (v24)
            {
              v17[5] = v24;
              v23 = (_QWORD *)*v20;
            }
            v25 = *v19;
            v7 = v23 == *v19;
            *((_BYTE *)v23 + 24) = v7;
            if (!v7)
            {
              do
              {
                v26 = v23[2];
                if (*(_BYTE *)(v26 + 24))
                  break;
                v27 = *(_BYTE **)(v26 + 16);
                v28 = *(_QWORD *)v27;
                if (*(_QWORD *)v27 == v26)
                {
                  v31 = *((_QWORD *)v27 + 1);
                  if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), v29 = (_BYTE *)(v31 + 24), v32))
                  {
                    if (*(_QWORD **)v26 == v23)
                    {
                      *(_BYTE *)(v26 + 24) = 1;
                      v27[24] = 0;
                      v35 = *(_QWORD *)(v26 + 8);
                      *(_QWORD *)v27 = v35;
                      if (v35)
                        goto LABEL_39;
                    }
                    else
                    {
                      v33 = *(uint64_t **)(v26 + 8);
                      v34 = *v33;
                      *(_QWORD *)(v26 + 8) = *v33;
                      if (v34)
                      {
                        *(_QWORD *)(v34 + 16) = v26;
                        v27 = *(_BYTE **)(v26 + 16);
                      }
                      v33[2] = (uint64_t)v27;
                      *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v33;
                      *v33 = v26;
                      *(_QWORD *)(v26 + 16) = v33;
                      v27 = (_BYTE *)v33[2];
                      v26 = *(_QWORD *)v27;
                      *((_BYTE *)v33 + 24) = 1;
                      v27[24] = 0;
                      v35 = *(_QWORD *)(v26 + 8);
                      *(_QWORD *)v27 = v35;
                      if (v35)
LABEL_39:
                        *(_QWORD *)(v35 + 16) = v27;
                    }
                    *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
                    *(_QWORD *)(*((_QWORD *)v27 + 2) + 8 * (**((_QWORD **)v27 + 2) != (_QWORD)v27)) = v26;
                    *(_QWORD *)(v26 + 8) = v27;
LABEL_9:
                    *((_QWORD *)v27 + 2) = v26;
                    break;
                  }
                }
                else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), v29 = (_BYTE *)(v28 + 24), v30))
                {
                  if (*(_QWORD **)v26 == v23)
                  {
                    v37 = v23[1];
                    *(_QWORD *)v26 = v37;
                    if (v37)
                    {
                      *(_QWORD *)(v37 + 16) = v26;
                      v27 = *(_BYTE **)(v26 + 16);
                    }
                    v23[2] = v27;
                    *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v23;
                    v23[1] = v26;
                    *(_QWORD *)(v26 + 16) = v23;
                    v27 = (_BYTE *)v23[2];
                    *((_BYTE *)v23 + 24) = 1;
                    v27[24] = 0;
                    v26 = *((_QWORD *)v27 + 1);
                    v36 = *(_QWORD **)v26;
                    *((_QWORD *)v27 + 1) = *(_QWORD *)v26;
                    if (!v36)
                      goto LABEL_8;
                  }
                  else
                  {
                    *(_BYTE *)(v26 + 24) = 1;
                    v27[24] = 0;
                    v26 = *((_QWORD *)v27 + 1);
                    v36 = *(_QWORD **)v26;
                    *((_QWORD *)v27 + 1) = *(_QWORD *)v26;
                    if (!v36)
                      goto LABEL_8;
                  }
                  v36[2] = v27;
LABEL_8:
                  *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
                  *(_QWORD *)(*((_QWORD *)v27 + 2) + 8 * (**((_QWORD **)v27 + 2) != (_QWORD)v27)) = v26;
                  *(_QWORD *)v26 = v27;
                  goto LABEL_9;
                }
                *(_BYTE *)(v26 + 24) = 1;
                v23 = v27;
                v27[24] = v27 == (_BYTE *)v25;
                *v29 = 1;
              }
              while (v27 != (_BYTE *)v25);
            }
            ++v17[7];
          }
        }
        v15 += 24;
      }
      ++v11;
    }
    while (v11 != v12);
    v38 = *a4;
    v39 = a4[1];
    if (*a4 != v39)
    {
      while (1)
      {
        v40 = *((_QWORD *)v38 + 3);
        v41 = *((_QWORD *)v38 + 4);
        __dst = 0u;
        v633 = 0u;
        for (i = 1065353216; v40 != v41; v40 += 24)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__dst, v40, v40);
        v42 = *((_QWORD *)v38 + 6);
        v43 = *((_QWORD *)v38 + 7);
        v629 = 0u;
        v630 = 0u;
        for (j = 1065353216; v42 != v43; v42 += 24)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v629, v42, v42);
        v44 = v626[1];
        if (v626[1] < v627[0])
          break;
        v50 = (std::string *)std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__emplace_back_slow_path<std::unordered_set<std::string>,std::unordered_set<std::string>>((uint64_t *)v626, (uint64_t *)&__dst, (uint64_t *)&v629);
        v51 = (char *)v630;
        v626[1] = v50;
        if ((_QWORD)v630)
          goto LABEL_79;
LABEL_73:
        v55 = (void *)v629;
        *(_QWORD *)&v629 = 0;
        if (v55)
          operator delete(v55);
        v56 = (void **)v633;
        if ((_QWORD)v633)
        {
          do
          {
            v59 = (void **)*v56;
            if (*((char *)v56 + 39) < 0)
              operator delete(v56[2]);
            operator delete(v56);
            v56 = v59;
          }
          while (v59);
        }
        v57 = (void *)__dst;
        *(_QWORD *)&__dst = 0;
        if (v57)
          operator delete(v57);
        v38 += 72;
        if (v38 == v39)
          goto LABEL_84;
      }
      v45 = (char *)__dst;
      *(_QWORD *)&__dst = 0;
      v626[1]->__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = *((_QWORD *)&__dst + 1);
      *((_QWORD *)&__dst + 1) = 0;
      v46 = v633;
      v44->__r_.__value_.__r.__words[2] = v633;
      v47 = *((_QWORD *)&v633 + 1);
      v44[1].__r_.__value_.__r.__words[0] = *((_QWORD *)&v633 + 1);
      LODWORD(v44[1].__r_.__value_.__r.__words[1]) = i;
      if (v47)
      {
        v48 = *(_QWORD *)(v46 + 8);
        size = v44->__r_.__value_.__l.__size_;
        if ((size & (size - 1)) != 0)
        {
          if (v48 >= size)
            v48 %= size;
        }
        else
        {
          v48 &= size - 1;
        }
        *(_QWORD *)&v45[8 * v48] = (char *)&v44->__r_.__value_.__l + 16;
        v633 = 0uLL;
      }
      v52 = v629;
      v53 = *((_QWORD *)&v630 + 1);
      v51 = (char *)v630;
      v44[2].__r_.__value_.__l.__size_ = v630;
      v629 = 0uLL;
      *(_OWORD *)&v44[1].__r_.__value_.__r.__words[2] = v52;
      v44[2].__r_.__value_.__r.__words[2] = v53;
      LODWORD(v44[3].__r_.__value_.__l.__data_) = j;
      if (v53)
      {
        v54 = *((_QWORD *)v51 + 1);
        if ((*((_QWORD *)&v52 + 1) & (*((_QWORD *)&v52 + 1) - 1)) != 0)
        {
          if (v54 >= *((_QWORD *)&v52 + 1))
            v54 %= *((_QWORD *)&v52 + 1);
        }
        else
        {
          v54 &= *((_QWORD *)&v52 + 1) - 1;
        }
        v51 = 0;
        *(_QWORD *)(v52 + 8 * v54) = (char *)v44 + 56;
        v630 = 0uLL;
      }
      v626[1] = (std::string *)((char *)v44 + 80);
      if (!v51)
        goto LABEL_73;
      do
      {
LABEL_79:
        v58 = *(char **)v51;
        if (v51[39] < 0)
          operator delete(*((void **)v51 + 2));
        operator delete(v51);
        v51 = v58;
      }
      while (v58);
      goto LABEL_73;
    }
LABEL_84:
    v60 = 0;
    __dst = 0u;
    v633 = 0u;
    i = 1065353216;
    v629 = 0u;
    v630 = 0u;
    j = 1065353216;
    v612 = 0;
    v61 = (unint64_t)v587;
    do
    {
      v62 = v60 + 1;
      if (v60 + 1 < v61 && *(&v626[0][2].__r_.__value_.__l.__size_ + 10 * v60))
      {
        do
        {
          for (k = (_QWORD *)*(&v626[0][2].__r_.__value_.__l.__size_ + 10 * v612); k; k = (_QWORD *)*k)
          {
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v626[0]->__r_.__value_.__r.__words[10 * v62], (uint64_t)(k + 2)))
            {
              v635 = (uint64_t **)&v612;
              v64 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v638, &v612, (uint64_t)&std::piecewise_construct, (uint64_t **)&v635);
              v66 = (void **)(v64 + 4);
              v65 = (_QWORD *)v64[4];
              v67 = v64 + 4;
              v68 = v64 + 4;
              if (v65)
              {
                while (1)
                {
                  while (1)
                  {
                    v68 = v65;
                    v69 = v65[4];
                    if (v62 >= v69)
                      break;
                    v65 = (_QWORD *)*v68;
                    v67 = v68;
                    if (!*v68)
                      goto LABEL_102;
                  }
                  if (v69 >= v62)
                    break;
                  v65 = (_QWORD *)v68[1];
                  if (!v65)
                  {
                    v67 = v68 + 1;
                    goto LABEL_102;
                  }
                }
              }
              else
              {
LABEL_102:
                v70 = operator new(0x28uLL);
                v70[4] = v62;
                *v70 = 0;
                v70[1] = 0;
                v70[2] = v68;
                *v67 = v70;
                v71 = *(_QWORD *)v64[3];
                if (v71)
                {
                  v64[3] = v71;
                  v70 = (_QWORD *)*v67;
                }
                v72 = *v66;
                v7 = v70 == *v66;
                *((_BYTE *)v70 + 24) = v7;
                if (!v7)
                {
                  do
                  {
                    v73 = v70[2];
                    if (*(_BYTE *)(v73 + 24))
                      break;
                    v74 = *(_BYTE **)(v73 + 16);
                    v75 = *(_QWORD *)v74;
                    if (*(_QWORD *)v74 == v73)
                    {
                      v78 = *((_QWORD *)v74 + 1);
                      if (!v78 || (v79 = *(unsigned __int8 *)(v78 + 24), v76 = (_BYTE *)(v78 + 24), v79))
                      {
                        if (*(_QWORD **)v73 == v70)
                        {
                          *(_BYTE *)(v73 + 24) = 1;
                          v74[24] = 0;
                          v82 = *(_QWORD *)(v73 + 8);
                          *(_QWORD *)v74 = v82;
                          if (v82)
                            goto LABEL_119;
                        }
                        else
                        {
                          v80 = *(uint64_t **)(v73 + 8);
                          v81 = *v80;
                          *(_QWORD *)(v73 + 8) = *v80;
                          if (v81)
                          {
                            *(_QWORD *)(v81 + 16) = v73;
                            v74 = *(_BYTE **)(v73 + 16);
                          }
                          v80[2] = (uint64_t)v74;
                          *(_QWORD *)(*(_QWORD *)(v73 + 16) + 8 * (**(_QWORD **)(v73 + 16) != v73)) = v80;
                          *v80 = v73;
                          *(_QWORD *)(v73 + 16) = v80;
                          v74 = (_BYTE *)v80[2];
                          v73 = *(_QWORD *)v74;
                          *((_BYTE *)v80 + 24) = 1;
                          v74[24] = 0;
                          v82 = *(_QWORD *)(v73 + 8);
                          *(_QWORD *)v74 = v82;
                          if (v82)
LABEL_119:
                            *(_QWORD *)(v82 + 16) = v74;
                        }
                        *(_QWORD *)(v73 + 16) = *((_QWORD *)v74 + 2);
                        *(_QWORD *)(*((_QWORD *)v74 + 2) + 8 * (**((_QWORD **)v74 + 2) != (_QWORD)v74)) = v73;
                        *(_QWORD *)(v73 + 8) = v74;
LABEL_125:
                        *((_QWORD *)v74 + 2) = v73;
                        break;
                      }
                    }
                    else if (!v75 || (v77 = *(unsigned __int8 *)(v75 + 24), v76 = (_BYTE *)(v75 + 24), v77))
                    {
                      if (*(_QWORD **)v73 == v70)
                      {
                        v86 = v70[1];
                        *(_QWORD *)v73 = v86;
                        if (v86)
                        {
                          *(_QWORD *)(v86 + 16) = v73;
                          v74 = *(_BYTE **)(v73 + 16);
                        }
                        v70[2] = v74;
                        *(_QWORD *)(*(_QWORD *)(v73 + 16) + 8 * (**(_QWORD **)(v73 + 16) != v73)) = v70;
                        v70[1] = v73;
                        *(_QWORD *)(v73 + 16) = v70;
                        v74 = (_BYTE *)v70[2];
                        *((_BYTE *)v70 + 24) = 1;
                        v74[24] = 0;
                        v73 = *((_QWORD *)v74 + 1);
                        v83 = *(_QWORD **)v73;
                        *((_QWORD *)v74 + 1) = *(_QWORD *)v73;
                        if (v83)
LABEL_123:
                          v83[2] = v74;
                      }
                      else
                      {
                        *(_BYTE *)(v73 + 24) = 1;
                        v74[24] = 0;
                        v73 = *((_QWORD *)v74 + 1);
                        v83 = *(_QWORD **)v73;
                        *((_QWORD *)v74 + 1) = *(_QWORD *)v73;
                        if (v83)
                          goto LABEL_123;
                      }
                      *(_QWORD *)(v73 + 16) = *((_QWORD *)v74 + 2);
                      *(_QWORD *)(*((_QWORD *)v74 + 2) + 8 * (**((_QWORD **)v74 + 2) != (_QWORD)v74)) = v73;
                      *(_QWORD *)v73 = v74;
                      goto LABEL_125;
                    }
                    *(_BYTE *)(v73 + 24) = 1;
                    v70 = v74;
                    v74[24] = v74 == (_BYTE *)v72;
                    *v76 = 1;
                  }
                  while (v74 != (_BYTE *)v72);
                }
                ++v64[5];
              }
              v635 = (uint64_t **)(k + 2);
              v84 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__dst, (unsigned __int8 *)k + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v635);
              v85 = *((_DWORD *)v84 + 10);
              *((_DWORD *)v84 + 10) = v85 + 1;
              if (v85 >= 1)
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v629, (uint64_t)(k + 2), (uint64_t)(k + 2));
            }
          }
          ++v62;
          v61 = (unint64_t)v587;
        }
        while ((uint64_t *)v62 != v587);
        v62 = v612 + 1;
      }
      v612 = v62;
      v60 = v62;
    }
    while (v62 < v61);
    v87 = *(_QWORD **)v592;
    if (*(_QWORD *)v592)
    {
      do
      {
        v88 = (_QWORD *)v87[5];
        v89 = (_QWORD *)v88[1];
        v90 = v88;
        if (v89)
        {
          do
          {
            v91 = v89;
            v89 = (_QWORD *)*v89;
          }
          while (v89);
        }
        else
        {
          do
          {
            v91 = (_QWORD *)v90[2];
            v7 = *v91 == (_QWORD)v90;
            v90 = v91;
          }
          while (!v7);
        }
        v581 = v87;
        v92 = v87 + 6;
        if (v91 != v87 + 6)
        {
          do
          {
            v635 = (uint64_t **)(v88 + 4);
            v93 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v638, v88 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v635);
            v95 = (void **)(v93 + 4);
            v94 = (_QWORD *)v93[4];
            v96 = v91[4];
            v97 = v93 + 4;
            v98 = v93 + 4;
            if (v94)
            {
              while (1)
              {
                while (1)
                {
                  v98 = v94;
                  v99 = v94[4];
                  if (v96 >= v99)
                    break;
                  v94 = (_QWORD *)*v98;
                  v97 = v98;
                  if (!*v98)
                    goto LABEL_153;
                }
                if (v99 >= v96)
                  break;
                v94 = (_QWORD *)v98[1];
                if (!v94)
                {
                  v97 = v98 + 1;
                  goto LABEL_153;
                }
              }
            }
            else
            {
LABEL_153:
              v100 = operator new(0x28uLL);
              v100[4] = v96;
              *v100 = 0;
              v100[1] = 0;
              v100[2] = v98;
              *v97 = v100;
              v101 = *(_QWORD *)v93[3];
              if (v101)
              {
                v93[3] = v101;
                v100 = (_QWORD *)*v97;
              }
              v102 = *v95;
              v7 = v100 == *v95;
              *((_BYTE *)v100 + 24) = v7;
              if (!v7)
              {
                do
                {
                  v103 = v100[2];
                  if (*(_BYTE *)(v103 + 24))
                    break;
                  v104 = *(_BYTE **)(v103 + 16);
                  v105 = *(_QWORD *)v104;
                  if (*(_QWORD *)v104 == v103)
                  {
                    v108 = *((_QWORD *)v104 + 1);
                    if (!v108 || (v109 = *(unsigned __int8 *)(v108 + 24), v106 = (_BYTE *)(v108 + 24), v109))
                    {
                      if (*(_QWORD **)v103 == v100)
                      {
                        *(_BYTE *)(v103 + 24) = 1;
                        v104[24] = 0;
                        v112 = *(_QWORD *)(v103 + 8);
                        *(_QWORD *)v104 = v112;
                        if (v112)
                          goto LABEL_170;
                      }
                      else
                      {
                        v110 = *(uint64_t **)(v103 + 8);
                        v111 = *v110;
                        *(_QWORD *)(v103 + 8) = *v110;
                        if (v111)
                        {
                          *(_QWORD *)(v111 + 16) = v103;
                          v104 = *(_BYTE **)(v103 + 16);
                        }
                        v110[2] = (uint64_t)v104;
                        *(_QWORD *)(*(_QWORD *)(v103 + 16) + 8 * (**(_QWORD **)(v103 + 16) != v103)) = v110;
                        *v110 = v103;
                        *(_QWORD *)(v103 + 16) = v110;
                        v104 = (_BYTE *)v110[2];
                        v103 = *(_QWORD *)v104;
                        *((_BYTE *)v110 + 24) = 1;
                        v104[24] = 0;
                        v112 = *(_QWORD *)(v103 + 8);
                        *(_QWORD *)v104 = v112;
                        if (v112)
LABEL_170:
                          *(_QWORD *)(v112 + 16) = v104;
                      }
                      *(_QWORD *)(v103 + 16) = *((_QWORD *)v104 + 2);
                      *(_QWORD *)(*((_QWORD *)v104 + 2) + 8 * (**((_QWORD **)v104 + 2) != (_QWORD)v104)) = v103;
                      *(_QWORD *)(v103 + 8) = v104;
LABEL_176:
                      *((_QWORD *)v104 + 2) = v103;
                      break;
                    }
                  }
                  else if (!v105 || (v107 = *(unsigned __int8 *)(v105 + 24), v106 = (_BYTE *)(v105 + 24), v107))
                  {
                    if (*(_QWORD **)v103 == v100)
                    {
                      v118 = v100[1];
                      *(_QWORD *)v103 = v118;
                      if (v118)
                      {
                        *(_QWORD *)(v118 + 16) = v103;
                        v104 = *(_BYTE **)(v103 + 16);
                      }
                      v100[2] = v104;
                      *(_QWORD *)(*(_QWORD *)(v103 + 16) + 8 * (**(_QWORD **)(v103 + 16) != v103)) = v100;
                      v100[1] = v103;
                      *(_QWORD *)(v103 + 16) = v100;
                      v104 = (_BYTE *)v100[2];
                      *((_BYTE *)v100 + 24) = 1;
                      v104[24] = 0;
                      v103 = *((_QWORD *)v104 + 1);
                      v113 = *(_QWORD **)v103;
                      *((_QWORD *)v104 + 1) = *(_QWORD *)v103;
                      if (v113)
LABEL_174:
                        v113[2] = v104;
                    }
                    else
                    {
                      *(_BYTE *)(v103 + 24) = 1;
                      v104[24] = 0;
                      v103 = *((_QWORD *)v104 + 1);
                      v113 = *(_QWORD **)v103;
                      *((_QWORD *)v104 + 1) = *(_QWORD *)v103;
                      if (v113)
                        goto LABEL_174;
                    }
                    *(_QWORD *)(v103 + 16) = *((_QWORD *)v104 + 2);
                    *(_QWORD *)(*((_QWORD *)v104 + 2) + 8 * (**((_QWORD **)v104 + 2) != (_QWORD)v104)) = v103;
                    *(_QWORD *)v103 = v104;
                    goto LABEL_176;
                  }
                  *(_BYTE *)(v103 + 24) = 1;
                  v100 = v104;
                  v104[24] = v104 == (_BYTE *)v102;
                  *v106 = 1;
                }
                while (v104 != (_BYTE *)v102);
              }
              ++v93[5];
            }
            v114 = (_QWORD *)v88[1];
            if (v114)
            {
              do
              {
                v115 = v114;
                v114 = (_QWORD *)*v114;
              }
              while (v114);
            }
            else
            {
              do
              {
                v115 = (_QWORD *)v88[2];
                v7 = *v115 == (_QWORD)v88;
                v88 = v115;
              }
              while (!v7);
            }
            v116 = (_QWORD *)v91[1];
            if (v116)
            {
              do
              {
                v117 = v116;
                v116 = (_QWORD *)*v116;
              }
              while (v116);
            }
            else
            {
              do
              {
                v117 = (_QWORD *)v91[2];
                v7 = *v117 == (_QWORD)v91;
                v91 = v117;
              }
              while (!v7);
            }
            v91 = v117;
            v88 = v115;
          }
          while (v117 != v92);
        }
        v87 = (_QWORD *)*v581;
      }
      while (*v581);
    }
  }
  v119 = (char *)v633;
  if ((_QWORD)v633)
  {
    while (1)
    {
      v120 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v629, (uint64_t)(v119 + 16));
      v121 = *(char **)v119;
      if (!v120)
        break;
LABEL_201:
      v119 = v121;
      if (!v121)
        goto LABEL_230;
    }
    v122 = *((_QWORD *)&__dst + 1);
    v123 = *((_QWORD *)v119 + 1);
    v124 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__dst + 8));
    v124.i16[0] = vaddlv_u8(v124);
    if (v124.u32[0] > 1uLL)
    {
      if (v123 >= *((_QWORD *)&__dst + 1))
        v123 %= *((_QWORD *)&__dst + 1);
    }
    else
    {
      v123 &= *((_QWORD *)&__dst + 1) - 1;
    }
    v125 = *(char **)(__dst + 8 * v123);
    do
    {
      v126 = v125;
      v125 = *(char **)v125;
    }
    while (v125 != v119);
    if (v126 == (char *)&v633)
      goto LABEL_1073;
    v127 = *((_QWORD *)v126 + 1);
    if (v124.u32[0] > 1uLL)
    {
      if (v127 >= *((_QWORD *)&__dst + 1))
        v127 %= *((_QWORD *)&__dst + 1);
    }
    else
    {
      v127 &= *((_QWORD *)&__dst + 1) - 1;
    }
    v128 = *(_QWORD *)v119;
    if (v127 != v123)
    {
LABEL_1073:
      if (v121)
      {
        v129 = *((_QWORD *)v121 + 1);
        if (v124.u32[0] > 1uLL)
        {
          v130 = *((_QWORD *)v121 + 1);
          if (v129 >= *((_QWORD *)&__dst + 1))
            v130 = v129 % *((_QWORD *)&__dst + 1);
        }
        else
        {
          v130 = v129 & (*((_QWORD *)&__dst + 1) - 1);
        }
        v128 = *(_QWORD *)v119;
        if (v130 == v123)
          goto LABEL_224;
      }
      *(_QWORD *)(__dst + 8 * v123) = 0;
      v128 = *(_QWORD *)v119;
    }
    if (!v128)
    {
LABEL_198:
      *(_QWORD *)v126 = v128;
      *(_QWORD *)v119 = 0;
      --*((_QWORD *)&v633 + 1);
      if (v119[39] < 0)
        operator delete(*((void **)v119 + 2));
      operator delete(v119);
      goto LABEL_201;
    }
    v129 = *(_QWORD *)(v128 + 8);
LABEL_224:
    if (v124.u32[0] > 1uLL)
    {
      if (v129 >= v122)
        v129 %= v122;
    }
    else
    {
      v129 &= v122 - 1;
    }
    if (v129 != v123)
    {
      *(_QWORD *)(__dst + 8 * v129) = v126;
      v128 = *(_QWORD *)v119;
    }
    goto LABEL_198;
  }
LABEL_230:
  std::unordered_map<unsigned long,std::set<unsigned long>>::unordered_map((uint64_t)v617, (uint64_t)v638);
  std::unordered_map<std::string,int>::unordered_map((uint64_t)v619, (uint64_t)&__dst);
  v131 = (void **)v630;
  if ((_QWORD)v630)
  {
    do
    {
      v144 = (void **)*v131;
      if (*((char *)v131 + 39) < 0)
        operator delete(v131[2]);
      operator delete(v131);
      v131 = v144;
    }
    while (v144);
  }
  v132 = (void *)v629;
  *(_QWORD *)&v629 = 0;
  if (v132)
    operator delete(v132);
  v133 = (void **)v633;
  if ((_QWORD)v633)
  {
    do
    {
      v145 = (void **)*v133;
      if (*((char *)v133 + 39) < 0)
        operator delete(v133[2]);
      operator delete(v133);
      v133 = v145;
    }
    while (v145);
  }
  v134 = (void *)__dst;
  *(_QWORD *)&__dst = 0;
  if (v134)
    operator delete(v134);
  v135 = *(_QWORD ***)&v638[16];
  if (*(_QWORD *)&v638[16])
  {
    do
    {
      v136 = *v135;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v135 + 3), v135[4]);
      operator delete(v135);
      v135 = (_QWORD **)v136;
    }
    while (v136);
  }
  v137 = *(void **)v638;
  *(_QWORD *)v638 = 0;
  if (v137)
    operator delete(v137);
  v138 = *(char **)v592;
  if (*(_QWORD *)v592)
  {
    do
    {
      v146 = *(char **)v138;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v138 + 40), *((_QWORD **)v138 + 6));
      if (v138[39] < 0)
        operator delete(*((void **)v138 + 2));
      operator delete(v138);
      v138 = v146;
    }
    while (v146);
  }
  v139 = __p[0];
  __p[0] = 0;
  if (v139)
    operator delete(v139);
  v140 = v626[0];
  if (v626[0])
  {
    v141 = v626[1];
    v142 = v626[0];
    if (v626[1] != v626[0])
    {
      do
      {
        v141 = (std::string *)((char *)v141 - 80);
        std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100]((uint64_t)v627, (uint64_t)v141);
      }
      while (v141 != v140);
      v142 = v626[0];
    }
    v626[1] = v140;
    operator delete(v142);
  }
  v616 = 0;
  if ((unint64_t)(v579 + 71) < 0x8F)
  {
    v143 = a5;
LABEL_631:
    *(_OWORD *)v143 = *(_OWORD *)v624;
    v143[2] = v625;
    v624[1] = 0;
    v625 = 0;
    v624[0] = 0;
    goto LABEL_632;
  }
  v577 = 0;
  v147 = 0;
  v148 = a1 + 40;
  v149 = (std::string *)&v592[8];
  while (2)
  {
    v580 = *a4;
    v615 = 0;
    v582 = (unint64_t *)&v580[72 * v147];
    v150 = *v582;
    v615 = *v582;
    v151 = *(char *)(a2 + 23);
    if (v151 >= 0)
      v152 = *(unsigned __int8 *)(a2 + 23);
    else
      v152 = *(_QWORD *)(a2 + 8);
    v153 = v152 + 1;
    if (v152 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v154 = *(_QWORD **)(a1 + 80);
    if (v153 >= 0x17)
    {
      v156 = v149;
      v157 = v148;
      v158 = (v153 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v153 | 7) != 0x17)
        v158 = v153 | 7;
      v159 = v158 + 1;
      p_dst = (__int128 *)operator new(v158 + 1);
      *((_QWORD *)&__dst + 1) = v152 + 1;
      *(_QWORD *)&v633 = v159 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
      v148 = v157;
      v149 = v156;
    }
    else
    {
      *(_QWORD *)&v633 = 0;
      __dst = 0uLL;
      p_dst = &__dst;
      BYTE7(v633) = v152 + 1;
      if (!v152)
        goto LABEL_275;
    }
    if (v151 >= 0)
      v160 = (const void *)a2;
    else
      v160 = *(const void **)a2;
    memmove(p_dst, v160, v152);
LABEL_275:
    *(_WORD *)((char *)p_dst + v152) = 95;
    v161 = **(_QWORD **)(a1 + 16) + 24 * v150;
    v162 = *(char *)(v161 + 23);
    if (v162 >= 0)
      v163 = (const std::string::value_type *)(**(_QWORD **)(a1 + 16) + 24 * v150);
    else
      v163 = *(const std::string::value_type **)v161;
    if (v162 >= 0)
      v164 = *(unsigned __int8 *)(v161 + 23);
    else
      v164 = *(_QWORD *)(v161 + 8);
    v165 = std::string::append((std::string *)&__dst, v163, v164);
    v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
    *(_QWORD *)v592 = *((_QWORD *)&v165->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v166;
    v165->__r_.__value_.__l.__size_ = 0;
    v165->__r_.__value_.__r.__words[2] = 0;
    v165->__r_.__value_.__r.__words[0] = 0;
    Espresso::MILTranslator::NameGenerator::NameForPrefix(v154, (uint64_t)__p, (uint64_t)v638);
    v167 = (uint64_t *)&v580[72 * v147];
    if ((v592[7] & 0x80000000) != 0)
    {
      operator delete(__p[0]);
      if ((SBYTE7(v633) & 0x80000000) == 0)
      {
LABEL_283:
        v168 = (int8x8_t)v621[1];
        if (!v621[1])
          goto LABEL_306;
        goto LABEL_287;
      }
    }
    else if ((SBYTE7(v633) & 0x80000000) == 0)
    {
      goto LABEL_283;
    }
    operator delete((void *)__dst);
    v168 = (int8x8_t)v621[1];
    if (!v621[1])
      goto LABEL_306;
LABEL_287:
    v169 = (uint8x8_t)vcnt_s8(v168);
    v169.i16[0] = vaddlv_u8(v169);
    if (v169.u32[0] > 1uLL)
    {
      v170 = v615;
      if (v615 >= *(_QWORD *)&v168)
        v170 = v615 % *(_QWORD *)&v168;
    }
    else
    {
      v170 = (*(_QWORD *)&v168 - 1) & v615;
    }
    v171 = (_QWORD *)*((_QWORD *)v621[0] + v170);
    if (!v171 || (v172 = (_QWORD *)*v171) == 0)
    {
LABEL_306:
      __dst = 0uLL;
      *(_QWORD *)&v633 = 0;
LABEL_307:
      Espresso::AOT::SegmentsLowerer::ExtractSegment((_QWORD *)a1, a2);
      *(_QWORD *)&v629 = v638;
      v176 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, v638, (uint64_t)&std::piecewise_construct, (__int128 **)&v629);
      v177 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v178 = (std::__shared_weak_count *)*((_QWORD *)v176 + 6);
      *(_OWORD *)(v176 + 40) = v177;
      if (!v178)
        goto LABEL_311;
      p_shared_owners = (unint64_t *)&v178->__shared_owners_;
      do
        v180 = __ldaxr(p_shared_owners);
      while (__stlxr(v180 - 1, p_shared_owners));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
        v181 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_315;
      }
      else
      {
LABEL_311:
        v181 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_315;
      }
      v182 = (unint64_t *)&v181->__shared_owners_;
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
        if ((v638[23] & 0x80000000) != 0)
          goto LABEL_320;
        goto LABEL_316;
      }
LABEL_315:
      if ((v638[23] & 0x80000000) != 0)
        goto LABEL_320;
      goto LABEL_316;
    }
    v173 = *(_QWORD *)&v168 - 1;
    if (v169.u32[0] < 2uLL)
    {
      while (1)
      {
        v174 = v172[1];
        if (v615 == v174)
        {
          if (v172[2] == v615)
            goto LABEL_348;
        }
        else if ((v174 & v173) != v170)
        {
          goto LABEL_306;
        }
        v172 = (_QWORD *)*v172;
        if (!v172)
          goto LABEL_306;
      }
    }
    while (1)
    {
      v175 = v172[1];
      if (v615 == v175)
        break;
      if (v175 >= *(_QWORD *)&v168)
        v175 %= *(_QWORD *)&v168;
      if (v175 != v170)
        goto LABEL_306;
LABEL_301:
      v172 = (_QWORD *)*v172;
      if (!v172)
        goto LABEL_306;
    }
    if (v172[2] != v615)
      goto LABEL_301;
LABEL_348:
    if (v169.u32[0] > 1uLL)
    {
      v199 = v615;
      if (v615 >= *(_QWORD *)&v168)
        v199 = v615 % *(_QWORD *)&v168;
    }
    else
    {
      v199 = v173 & v615;
    }
    v200 = (_QWORD *)*((_QWORD *)v621[0] + v199);
    if (!v200 || (v201 = (_QWORD *)*v200) == 0)
LABEL_1064:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v169.u32[0] < 2uLL)
    {
      while (1)
      {
        v202 = v201[1];
        if (v202 == v615)
        {
          if (v201[2] == v615)
            goto LABEL_360;
        }
        else if ((v202 & v173) != v199)
        {
          goto LABEL_1064;
        }
        v201 = (_QWORD *)*v201;
        if (!v201)
          goto LABEL_1064;
      }
    }
    while (2)
    {
      v206 = v201[1];
      if (v206 != v615)
      {
        if (v206 >= *(_QWORD *)&v168)
          v206 %= *(_QWORD *)&v168;
        if (v206 != v199)
          goto LABEL_1064;
LABEL_365:
        v201 = (_QWORD *)*v201;
        if (!v201)
          goto LABEL_1064;
        continue;
      }
      break;
    }
    if (v201[2] != v615)
      goto LABEL_365;
LABEL_360:
    v203 = v201[6];
    __dst = 0uLL;
    *(_QWORD *)&v633 = 0;
    if (!v621[1])
      goto LABEL_1065;
    v204 = (uint8x8_t)vcnt_s8((int8x8_t)v621[1]);
    v204.i16[0] = vaddlv_u8(v204);
    if (v204.u32[0] > 1uLL)
    {
      v205 = v615;
      if ((void *)v615 >= v621[1])
        v205 = v615 % (unint64_t)v621[1];
    }
    else
    {
      v205 = ((unint64_t)v621[1] - 1) & v615;
    }
    v207 = (const std::string **)*((_QWORD *)v621[0] + v205);
    if (!v207 || (v208 = *v207) == 0)
LABEL_1065:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v204.u32[0] < 2uLL)
    {
      while (1)
      {
        v210 = v208->__r_.__value_.__l.__size_;
        if (v210 == v615)
        {
          if (v208->__r_.__value_.__r.__words[2] == v615)
            goto LABEL_388;
        }
        else if ((v210 & ((std::string::size_type)v621[1] - 1)) != v205)
        {
          goto LABEL_1065;
        }
        v208 = (const std::string *)v208->__r_.__value_.__r.__words[0];
        if (!v208)
          goto LABEL_1065;
      }
    }
    while (2)
    {
      v209 = v208->__r_.__value_.__l.__size_;
      if (v209 != v615)
      {
        if ((void *)v209 >= v621[1])
          v209 %= (unint64_t)v621[1];
        if (v209 != v205)
          goto LABEL_1065;
LABEL_378:
        v208 = (const std::string *)v208->__r_.__value_.__r.__words[0];
        if (!v208)
          goto LABEL_1065;
        continue;
      }
      break;
    }
    if (v208->__r_.__value_.__r.__words[2] != v615)
      goto LABEL_378;
LABEL_388:
    v211 = v208 + 1;
    v614 = v208[2].__r_.__value_.__r.__words[0];
    __p[0] = (void *)&v208[1];
    v212 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, (unsigned __int8 *)&v208[1], (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v213 = (std::__shared_weak_count *)*((_QWORD *)v212 + 6);
    v612 = *((_QWORD *)v212 + 5);
    v613 = v213;
    if (v213)
    {
      v214 = (unint64_t *)&v213->__shared_owners_;
      do
        v215 = __ldxr(v214);
      while (__stxr(v215 + 1, v214));
    }
    Espresso::AOT::SegmentsLowerer::ExtractSegment((_QWORD *)a1, a2);
    std::string::operator=((std::string *)v638, v211);
    v216 = *(std::__shared_weak_count **)(a1 + 32);
    v608 = *(_QWORD *)(a1 + 24);
    v609 = v216;
    if (v216)
    {
      v217 = (unint64_t *)&v216->__shared_owners_;
      do
        v218 = __ldxr(v217);
      while (__stxr(v218 + 1, v217));
    }
    v606 = (unint64_t *)v612;
    v607 = v613;
    if (v613)
    {
      v219 = (unint64_t *)&v613->__shared_owners_;
      do
        v220 = __ldxr(v219);
      while (__stxr(v220 + 1, v219));
    }
    v604 = v610;
    v605 = v611;
    if (v611)
    {
      v221 = (unint64_t *)&v611->__shared_owners_;
      do
        v222 = __ldxr(v221);
      while (__stxr(v222 + 1, v221));
    }
    Espresso::AOT::MergeFunctions(&v608, a3, v619, (uint64_t *)&v606, &v604, __p);
    *(_QWORD *)&v629 = v638;
    v223 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, v638, (uint64_t)&std::piecewise_construct, (__int128 **)&v629);
    v224 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v225 = (std::__shared_weak_count *)*((_QWORD *)v223 + 6);
    *(_OWORD *)(v223 + 40) = v224;
    if (v225)
    {
      v226 = (unint64_t *)&v225->__shared_owners_;
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
      }
    }
    v228 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v229 = (unint64_t *)((char *)__p[1] + 8);
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
    v231 = v605;
    if (v605)
    {
      v232 = (unint64_t *)&v605->__shared_owners_;
      do
        v233 = __ldaxr(v232);
      while (__stlxr(v233 - 1, v232));
      if (!v233)
      {
        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
        std::__shared_weak_count::__release_weak(v231);
      }
    }
    v234 = v607;
    if (v607)
    {
      v235 = (unint64_t *)&v607->__shared_owners_;
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
      }
    }
    v237 = v609;
    if (v609)
    {
      v238 = (unint64_t *)&v609->__shared_owners_;
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
        std::__shared_weak_count::__release_weak(v237);
      }
    }
    v240 = *(std::__shared_weak_count **)(a1 + 32);
    v601 = *(_QWORD *)(a1 + 24);
    v602 = v240;
    if (v240)
    {
      v241 = (unint64_t *)&v240->__shared_owners_;
      do
        v242 = __ldxr(v241);
      while (__stxr(v242 + 1, v241));
    }
    __p[0] = v638;
    v243 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, v638, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v244 = (std::__shared_weak_count *)*((_QWORD *)v243 + 6);
    v599 = *((_QWORD *)v243 + 5);
    v600 = v244;
    if (v244)
    {
      v245 = (unint64_t *)&v244->__shared_owners_;
      do
        v246 = __ldxr(v245);
      while (__stxr(v246 + 1, v245));
    }
    MIL::Builder::FunctionBuilder::Make();
    v247 = v600;
    if (v600)
    {
      v248 = (unint64_t *)&v600->__shared_owners_;
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    v250 = v602;
    if (v602)
    {
      v251 = (unint64_t *)&v602->__shared_owners_;
      do
        v252 = __ldaxr(v251);
      while (__stlxr(v252 - 1, v251));
      if (!v252)
      {
        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
        std::__shared_weak_count::__release_weak(v250);
      }
    }
    MIL::Builder::FunctionBuilder::SelectedSpecialization(v603);
    MIL::Builder::FunctionBuilder::GetBlock();
    MIL::Builder::BlockBuilder::GetOutputNames(v597);
    v626[1] = 0;
    v626[0] = 0;
    v627[0] = 0;
    MIL::Builder::FunctionBuilder::CreateFunction(v603);
    v253 = v148;
    v254 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v596 + 128))(v596);
    v636 = 0;
    v637 = 0;
    v635 = (uint64_t **)&v636;
    v255 = v254 + 1;
    v256 = (_QWORD *)*v254;
    if ((_QWORD *)*v254 != v254 + 1)
    {
LABEL_449:
      v268 = (char **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(&v635, &v636, __p, &v640, v256 + 4);
      if (*v268)
      {
        v269 = (_QWORD *)v256[1];
        if (!v269)
          goto LABEL_484;
        goto LABEL_474;
      }
      v270 = (char *)operator new(0x40uLL);
      v271 = (std::string *)(v270 + 32);
      if (*((char *)v256 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v271, (const std::string::value_type *)v256[4], v256[5]);
      }
      else
      {
        v272 = *((_OWORD *)v256 + 2);
        *((_QWORD *)v270 + 6) = v256[6];
        *(_OWORD *)&v271->__r_.__value_.__l.__data_ = v272;
      }
      *((_QWORD *)v270 + 7) = v256[7];
      v273 = __p[0];
      *(_QWORD *)v270 = 0;
      *((_QWORD *)v270 + 1) = 0;
      *((_QWORD *)v270 + 2) = v273;
      *v268 = v270;
      if (*v635)
      {
        v635 = (uint64_t **)*v635;
        v270 = *v268;
      }
      v274 = v636;
      v270[24] = v270 == v636;
      if (v270 == v274)
      {
LABEL_473:
        ++v637;
        v269 = (_QWORD *)v256[1];
        if (!v269)
          goto LABEL_484;
        goto LABEL_474;
      }
      while (1)
      {
        v275 = *((_QWORD *)v270 + 2);
        if (*(_BYTE *)(v275 + 24))
          goto LABEL_473;
        v276 = *(char **)(v275 + 16);
        v277 = *(_QWORD *)v276;
        if (*(_QWORD *)v276 == v275)
        {
          v280 = *((_QWORD *)v276 + 1);
          if (!v280 || (v281 = *(unsigned __int8 *)(v280 + 24), v278 = (_BYTE *)(v280 + 24), v281))
          {
            if (*(char **)v275 == v270)
            {
              *(_BYTE *)(v275 + 24) = 1;
              v276[24] = 0;
              v284 = *(_QWORD *)(v275 + 8);
              *(_QWORD *)v276 = v284;
              if (v284)
                goto LABEL_471;
            }
            else
            {
              v282 = *(uint64_t **)(v275 + 8);
              v283 = *v282;
              *(_QWORD *)(v275 + 8) = *v282;
              if (v283)
              {
                *(_QWORD *)(v283 + 16) = v275;
                v276 = *(char **)(v275 + 16);
              }
              v282[2] = (uint64_t)v276;
              *(_QWORD *)(*(_QWORD *)(v275 + 16) + 8 * (**(_QWORD **)(v275 + 16) != v275)) = v282;
              *v282 = v275;
              *(_QWORD *)(v275 + 16) = v282;
              v276 = (char *)v282[2];
              v275 = *(_QWORD *)v276;
              *((_BYTE *)v282 + 24) = 1;
              v276[24] = 0;
              v284 = *(_QWORD *)(v275 + 8);
              *(_QWORD *)v276 = v284;
              if (v284)
LABEL_471:
                *(_QWORD *)(v284 + 16) = v276;
            }
            *(_QWORD *)(v275 + 16) = *((_QWORD *)v276 + 2);
            *(_QWORD *)(*((_QWORD *)v276 + 2) + 8 * (**((_QWORD **)v276 + 2) != (_QWORD)v276)) = v275;
            *(_QWORD *)(v275 + 8) = v276;
            *((_QWORD *)v276 + 2) = v275;
            goto LABEL_473;
          }
        }
        else if (!v277 || (v279 = *(unsigned __int8 *)(v277 + 24), v278 = (_BYTE *)(v277 + 24), v279))
        {
          if (*(char **)v275 == v270)
          {
            v286 = *((_QWORD *)v270 + 1);
            *(_QWORD *)v275 = v286;
            if (v286)
            {
              *(_QWORD *)(v286 + 16) = v275;
              v276 = *(char **)(v275 + 16);
            }
            *((_QWORD *)v270 + 2) = v276;
            *(_QWORD *)(*(_QWORD *)(v275 + 16) + 8 * (**(_QWORD **)(v275 + 16) != v275)) = v270;
            *((_QWORD *)v270 + 1) = v275;
            *(_QWORD *)(v275 + 16) = v270;
            v276 = (char *)*((_QWORD *)v270 + 2);
          }
          else
          {
            v270 = (char *)*((_QWORD *)v270 + 2);
          }
          v270[24] = 1;
          v276[24] = 0;
          v287 = (char **)*((_QWORD *)v276 + 1);
          v288 = *v287;
          *((_QWORD *)v276 + 1) = *v287;
          if (v288)
            *((_QWORD *)v288 + 2) = v276;
          v287[2] = (char *)*((_QWORD *)v276 + 2);
          *(_QWORD *)(*((_QWORD *)v276 + 2) + 8 * (**((_QWORD **)v276 + 2) != (_QWORD)v276)) = v287;
          *v287 = v276;
          *((_QWORD *)v276 + 2) = v287;
          ++v637;
          v269 = (_QWORD *)v256[1];
          if (!v269)
          {
            do
            {
LABEL_484:
              v285 = (_QWORD *)v256[2];
              v7 = *v285 == (_QWORD)v256;
              v256 = v285;
            }
            while (!v7);
            goto LABEL_448;
          }
          do
          {
LABEL_474:
            v285 = v269;
            v269 = (_QWORD *)*v269;
          }
          while (v269);
LABEL_448:
          v256 = v285;
          if (v285 == v255)
            break;
          goto LABEL_449;
        }
        *(_BYTE *)(v275 + 24) = 1;
        v270 = v276;
        v276[24] = v276 == v274;
        *v278 = 1;
        if (v276 == v274)
          goto LABEL_473;
      }
    }
    v257 = v596;
    v596 = 0;
    if (v257)
      (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
    v258 = (uint64_t *)v635;
    v259 = v626[1];
    v167 = (uint64_t *)&v580[72 * v147];
    if (v635 != (uint64_t **)&v636)
    {
      do
      {
        v289 = (__int128 *)(v258 + 4);
        if (v259 >= v627[0])
        {
          v259 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v626, (uint64_t)v289);
          v626[1] = v259;
          v291 = (char *)v258[1];
          if (v291)
            goto LABEL_497;
        }
        else if (*((char *)v258 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v259++, (const std::string::value_type *)v258[4], v258[5]);
          v626[1] = v259;
          v291 = (char *)v258[1];
          if (v291)
          {
            do
            {
LABEL_497:
              v292 = (char **)v291;
              v291 = *(char **)v291;
            }
            while (v291);
            goto LABEL_489;
          }
        }
        else
        {
          v290 = *v289;
          v259->__r_.__value_.__r.__words[2] = v258[6];
          *(_OWORD *)&v259->__r_.__value_.__l.__data_ = v290;
          v626[1] = ++v259;
          v291 = (char *)v258[1];
          if (v291)
            goto LABEL_497;
        }
        do
        {
          v292 = (char **)v258[2];
          v7 = *v292 == (char *)v258;
          v258 = (uint64_t *)v292;
        }
        while (!v7);
LABEL_489:
        v258 = (uint64_t *)v292;
      }
      while (v292 != &v636);
    }
    __p[0] = (void *)v615;
    __p[1] = 0;
    *(_QWORD *)v592 = 0;
    v260 = (__int128 *)v626[0];
    v261 = 0xAAAAAAAAAAAAAAABLL * (((char *)v259 - (char *)v626[0]) >> 3);
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v149->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(v149, v260, (__int128 *)v259, v261);
    memset(&v594, 0, sizeof(v594));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v594, (__int128 *)v629, *((__int128 **)&v629 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v629 + 1) - v629) >> 3));
    v148 = v253;
    v262 = *(_OWORD *)__p;
    v582[2] = *(_QWORD *)v592;
    *(_OWORD *)v582 = v262;
    v263 = (std::string *)&v580[72 * v147];
    p_data = (void **)&v263[1].__r_.__value_.__l.__data_;
    data = v263[1].__r_.__value_.__l.__data_;
    if (data)
    {
      v266 = v263[1].__r_.__value_.__l.__size_;
      v267 = v263[1].__r_.__value_.__l.__data_;
      if ((std::string::pointer)v266 != data)
      {
        do
        {
          if (*(char *)(v266 - 1) < 0)
            operator delete(*(void **)(v266 - 24));
          v266 -= 24;
        }
        while ((std::string::pointer)v266 != data);
        v267 = *p_data;
      }
      v263[1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
      operator delete(v267);
      *p_data = 0;
      v263[1].__r_.__value_.__l.__size_ = 0;
      v263[1].__r_.__value_.__r.__words[2] = 0;
    }
    *(_OWORD *)&v263[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v592[8];
    v263[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v593;
    v149->__r_.__value_.__r.__words[0] = 0;
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v293 = (void **)&v263[2].__r_.__value_.__l.__data_;
    v294 = v263[2].__r_.__value_.__l.__data_;
    if (v294)
    {
      v295 = v263[2].__r_.__value_.__l.__size_;
      v296 = v263[2].__r_.__value_.__l.__data_;
      if ((std::string::pointer)v295 != v294)
      {
        do
        {
          if (*(char *)(v295 - 1) < 0)
            operator delete(*(void **)(v295 - 24));
          v295 -= 24;
        }
        while ((std::string::pointer)v295 != v294);
        v296 = *v293;
      }
      v263[2].__r_.__value_.__l.__size_ = (std::string::size_type)v294;
      operator delete(v296);
      *v293 = 0;
      v263[2].__r_.__value_.__l.__size_ = 0;
      v263[2].__r_.__value_.__r.__words[2] = 0;
    }
    v263[2] = v594;
    memset(&v594, 0, sizeof(v594));
    v297 = *(_QWORD *)&v592[8];
    if (*(_QWORD *)&v592[8])
    {
      v298 = *(_QWORD *)&v592[16];
      v299 = *(void **)&v592[8];
      if (*(_QWORD *)&v592[16] != *(_QWORD *)&v592[8])
      {
        do
        {
          if (*(char *)(v298 - 1) < 0)
            operator delete(*(void **)(v298 - 24));
          v298 -= 24;
        }
        while (v298 != v297);
        v299 = *(void **)&v592[8];
      }
      *(_QWORD *)&v592[16] = v297;
      operator delete(v299);
    }
    __p[0] = &v614;
    v300 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v617, &v614, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    v301 = v300;
    v303 = (uint64_t **)(v300 + 4);
    v302 = (uint64_t *)v300[4];
    v304 = v616;
    if (v302)
    {
      while (1)
      {
        while (1)
        {
          v305 = (uint64_t **)v302;
          v306 = v302[4];
          if (v616 >= v306)
            break;
          v302 = *v305;
          v303 = v305;
          if (!*v305)
            goto LABEL_530;
        }
        if (v306 >= v616)
          break;
        v302 = v305[1];
        if (!v302)
        {
          v303 = v305 + 1;
          goto LABEL_530;
        }
      }
    }
    else
    {
      v305 = (uint64_t **)(v300 + 4);
LABEL_530:
      v307 = (uint64_t *)operator new(0x28uLL);
      v307[4] = v304;
      *v307 = 0;
      v307[1] = 0;
      v307[2] = (uint64_t)v305;
      *v303 = v307;
      v308 = *(_QWORD *)v301[3];
      if (v308)
      {
        v301[3] = v308;
        v307 = *v303;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v301[4], v307);
      ++v301[5];
    }
    __p[0] = &v616;
    v309 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v617, &v616, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    v310 = v309;
    v312 = (uint64_t **)(v309 + 4);
    v311 = (uint64_t *)v309[4];
    v313 = v614;
    if (v311)
    {
      while (1)
      {
        while (1)
        {
          v314 = (uint64_t **)v311;
          v315 = v311[4];
          if (v614 >= v315)
            break;
          v311 = *v314;
          v312 = v314;
          if (!*v314)
            goto LABEL_540;
        }
        if (v315 >= v614)
          break;
        v311 = v314[1];
        if (!v311)
        {
          v312 = v314 + 1;
          goto LABEL_540;
        }
      }
    }
    else
    {
      v314 = (uint64_t **)(v309 + 4);
LABEL_540:
      v316 = (uint64_t *)operator new(0x28uLL);
      v316[4] = v313;
      *v316 = 0;
      v316[1] = 0;
      v316[2] = (uint64_t)v314;
      *v312 = v316;
      v317 = *(_QWORD *)v310[3];
      if (v317)
      {
        v310[3] = v317;
        v316 = *v312;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v310[4], v316);
      ++v310[5];
      v313 = v614;
    }
    MEMORY[0x19401C808]((char *)v624[0] + 80 * v313, "");
    std::__tree<std::string>::destroy((uint64_t)&v635, v636);
    v318 = v626[0];
    if (v626[0])
    {
      v319 = v626[1];
      v320 = v626[0];
      if (v626[1] != v626[0])
      {
        do
        {
          if (SHIBYTE(v319[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v319[-1].__r_.__value_.__l.__data_);
          --v319;
        }
        while (v319 != v318);
        v320 = v626[0];
      }
      v626[1] = v318;
      operator delete(v320);
    }
    v321 = v629;
    if ((_QWORD)v629)
    {
      v322 = *((_QWORD *)&v629 + 1);
      v323 = (void *)v629;
      if (*((_QWORD *)&v629 + 1) != (_QWORD)v629)
      {
        do
        {
          if (*(char *)(v322 - 1) < 0)
            operator delete(*(void **)(v322 - 24));
          v322 -= 24;
        }
        while (v322 != v321);
        v323 = (void *)v629;
      }
      *((_QWORD *)&v629 + 1) = v321;
      operator delete(v323);
    }
    v324 = v598;
    if (v598)
    {
      v325 = (unint64_t *)&v598->__shared_owners_;
      do
        v326 = __ldaxr(v325);
      while (__stlxr(v326 - 1, v325));
      if (!v326)
      {
        ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
        std::__shared_weak_count::__release_weak(v324);
      }
    }
    v327 = v603;
    v603 = 0;
    if (v327)
      (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v327 + 8))(v327);
    v328 = v611;
    if (v611)
    {
      v329 = (unint64_t *)&v611->__shared_owners_;
      do
        v330 = __ldaxr(v329);
      while (__stlxr(v330 - 1, v329));
      if (!v330)
      {
        ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
        std::__shared_weak_count::__release_weak(v328);
        v331 = v613;
        if (v613)
          goto LABEL_571;
        goto LABEL_574;
      }
    }
    v331 = v613;
    if (!v613)
      goto LABEL_574;
LABEL_571:
    v332 = (unint64_t *)&v331->__shared_owners_;
    do
      v333 = __ldaxr(v332);
    while (__stlxr(v333 - 1, v332));
    if (v333)
    {
LABEL_574:
      v577 = 1;
      if ((v638[23] & 0x80000000) != 0)
        goto LABEL_320;
LABEL_316:
      *(_OWORD *)__p = *(_OWORD *)v638;
      *(_QWORD *)v592 = *(_QWORD *)&v638[16];
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
      std::__shared_weak_count::__release_weak(v331);
      v577 = 1;
      if ((v638[23] & 0x80000000) == 0)
        goto LABEL_316;
LABEL_320:
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v638, *(std::string::size_type *)&v638[8]);
    }
    *(_QWORD *)&v592[8] = v616;
    *(_QWORD *)&v629 = &v615;
    v184 = std::__hash_table<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v621, &v615, (uint64_t)&std::piecewise_construct, (_QWORD **)&v629);
    v185 = (void **)(v184 + 24);
    if (v184[47] < 0)
      operator delete(*v185);
    *(_OWORD *)v185 = *(_OWORD *)__p;
    *((_QWORD *)v184 + 5) = *(_QWORD *)v592;
    *((_QWORD *)v184 + 6) = *(_QWORD *)&v592[8];
    v186 = &v580[72 * v147];
    v187 = *v167;
    *(_OWORD *)__p = *(_OWORD *)v638;
    *(_QWORD *)v592 = *(_QWORD *)&v638[16];
    memset(v638, 0, 24);
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v149->__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)&v592[8] = *(_OWORD *)(v186 + 24);
    v593 = (void *)*((_QWORD *)v186 + 5);
    *((_QWORD *)v186 + 3) = 0;
    *((_QWORD *)v186 + 4) = 0;
    *((_QWORD *)v186 + 5) = 0;
    memset(&v594, 0, sizeof(v594));
    v594 = *(std::string *)(v186 + 2);
    *((_QWORD *)v186 + 6) = 0;
    *((_QWORD *)v186 + 7) = 0;
    *((_QWORD *)v186 + 8) = 0;
    v595 = v187;
    v188 = (char *)v624[1];
    if (v624[1] >= v625)
    {
      v191 = std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>(v624, (uint64_t)__p);
      v192 = v594.__r_.__value_.__r.__words[0];
      v624[1] = v191;
      if (v594.__r_.__value_.__r.__words[0])
      {
        v193 = v594.__r_.__value_.__l.__size_;
        v194 = (void *)v594.__r_.__value_.__r.__words[0];
        if (v594.__r_.__value_.__l.__size_ != v594.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v193 - 1) < 0)
              operator delete(*(void **)(v193 - 24));
            v193 -= 24;
          }
          while (v193 != v192);
          v194 = (void *)v594.__r_.__value_.__r.__words[0];
        }
        v594.__r_.__value_.__l.__size_ = v192;
        operator delete(v194);
      }
    }
    else
    {
      v189 = *(_OWORD *)__p;
      *((_QWORD *)v624[1] + 2) = *(_QWORD *)v592;
      *((_QWORD *)v188 + 3) = 0;
      *(_OWORD *)v188 = v189;
      __p[1] = 0;
      *(_QWORD *)v592 = 0;
      __p[0] = 0;
      *((_QWORD *)v188 + 4) = 0;
      *((_QWORD *)v188 + 5) = 0;
      *(_OWORD *)(v188 + 24) = *(_OWORD *)&v592[8];
      v190 = v593;
      v149->__r_.__value_.__r.__words[0] = 0;
      v149->__r_.__value_.__l.__size_ = 0;
      *((_QWORD *)v188 + 5) = v190;
      *((_QWORD *)v188 + 6) = 0;
      v149->__r_.__value_.__r.__words[2] = 0;
      *((_QWORD *)v188 + 7) = 0;
      *((_QWORD *)v188 + 8) = 0;
      *((std::string *)v188 + 2) = v594;
      memset(&v594, 0, sizeof(v594));
      *((_QWORD *)v188 + 9) = v595;
      v624[1] = v188 + 80;
    }
    v195 = *(_QWORD *)&v592[8];
    if (*(_QWORD *)&v592[8])
    {
      v196 = *(_QWORD *)&v592[16];
      v197 = *(void **)&v592[8];
      if (*(_QWORD *)&v592[16] != *(_QWORD *)&v592[8])
      {
        do
        {
          if (*(char *)(v196 - 1) < 0)
            operator delete(*(void **)(v196 - 24));
          v196 -= 24;
        }
        while (v196 != v195);
        v197 = *(void **)&v592[8];
      }
      *(_QWORD *)&v592[16] = v195;
      operator delete(v197);
    }
    if ((v592[7] & 0x80000000) != 0)
    {
      operator delete(__p[0]);
      v198 = (void *)__dst;
      v143 = a5;
      if ((_QWORD)__dst)
      {
LABEL_343:
        *((_QWORD *)&__dst + 1) = v198;
        operator delete(v198);
      }
    }
    else
    {
      v198 = (void *)__dst;
      v143 = a5;
      if ((_QWORD)__dst)
        goto LABEL_343;
    }
    if ((v638[23] & 0x80000000) != 0)
      operator delete(*(void **)v638);
    v147 = v616 + 1;
    v616 = v147;
    if (v147 < (unint64_t)v587)
      continue;
    break;
  }
  if ((v577 & 1) == 0)
    goto LABEL_631;
  v334 = (char *)v624[0];
  v335 = (char *)v624[1];
  if (v624[0] == v624[1])
  {
    v335 = (char *)v624[0];
    goto LABEL_655;
  }
  while (2)
  {
    while (2)
    {
      if (v334[23] < 0)
      {
        if (!*((_QWORD *)v334 + 1))
          break;
        goto LABEL_584;
      }
      if (v334[23])
      {
LABEL_584:
        v334 += 80;
        if (v334 == v335)
          goto LABEL_654;
        continue;
      }
      break;
    }
    v336 = v334 + 80;
    v337 = (void **)v334;
    if (v334 + 80 == v335)
    {
      if (v335 == v334)
        goto LABEL_610;
      do
      {
LABEL_613:
        v346 = *((_QWORD *)v335 - 4);
        if (v346)
        {
          v347 = *((_QWORD *)v335 - 3);
          v348 = (void *)*((_QWORD *)v335 - 4);
          if (v347 != v346)
          {
            do
            {
              if (*(char *)(v347 - 1) < 0)
                operator delete(*(void **)(v347 - 24));
              v347 -= 24;
            }
            while (v347 != v346);
            v348 = (void *)*((_QWORD *)v335 - 4);
          }
          *((_QWORD *)v335 - 3) = v346;
          operator delete(v348);
        }
        v349 = *((_QWORD *)v335 - 7);
        if (v349)
        {
          v350 = *((_QWORD *)v335 - 6);
          v351 = (void *)*((_QWORD *)v335 - 7);
          if (v350 != v349)
          {
            do
            {
              if (*(char *)(v350 - 1) < 0)
                operator delete(*(void **)(v350 - 24));
              v350 -= 24;
            }
            while (v350 != v349);
            v351 = (void *)*((_QWORD *)v335 - 7);
          }
          *((_QWORD *)v335 - 6) = v349;
          operator delete(v351);
        }
        v352 = (void **)(v335 - 80);
        if (*(v335 - 57) < 0)
          operator delete(*v352);
        v335 -= 80;
      }
      while (v352 != v337);
    }
    else
    {
      do
      {
        if (*((char *)v337 + 23) < 0)
          operator delete(*v337);
        *(_OWORD *)v337 = *(_OWORD *)v336;
        v337[2] = (void *)*((_QWORD *)v336 + 2);
        v336[23] = 0;
        *v336 = 0;
        v339 = v337 + 3;
        v340 = (void **)v337[3];
        if (v340)
        {
          v341 = (void **)v337[4];
          v342 = v337[3];
          if (v341 != v340)
          {
            do
            {
              if (*((char *)v341 - 1) < 0)
                operator delete(*(v341 - 3));
              v341 -= 3;
            }
            while (v341 != v340);
            v342 = *v339;
          }
          v337[4] = v340;
          operator delete(v342);
          *v339 = 0;
          v337[4] = 0;
          v337[5] = 0;
        }
        *(_OWORD *)(v337 + 3) = *(_OWORD *)(v336 + 24);
        v337[5] = (void *)*((_QWORD *)v336 + 5);
        *((_QWORD *)v336 + 3) = 0;
        *((_QWORD *)v336 + 4) = 0;
        *((_QWORD *)v336 + 5) = 0;
        v343 = v337 + 6;
        v344 = (void **)v337[6];
        if (v344)
        {
          v345 = (void **)v337[7];
          v338 = v337[6];
          if (v345 != v344)
          {
            do
            {
              if (*((char *)v345 - 1) < 0)
                operator delete(*(v345 - 3));
              v345 -= 3;
            }
            while (v345 != v344);
            v338 = *v343;
          }
          v337[7] = v344;
          operator delete(v338);
          *v343 = 0;
          v337[7] = 0;
          v337[8] = 0;
        }
        *((_OWORD *)v337 + 3) = *((_OWORD *)v336 + 3);
        v337[8] = (void *)*((_QWORD *)v336 + 8);
        *((_QWORD *)v336 + 6) = 0;
        *((_QWORD *)v336 + 7) = 0;
        *((_QWORD *)v336 + 8) = 0;
        v337[9] = (void *)*((_QWORD *)v336 + 9);
        v336 += 80;
        v337 += 10;
      }
      while (v336 != v335);
      v335 = (char *)v624[1];
      if (v624[1] != v337)
        goto LABEL_613;
    }
LABEL_610:
    v624[1] = v337;
    v335 = (char *)v337;
    if (v334 != (char *)v337)
      continue;
    break;
  }
LABEL_654:
  v334 = (char *)v624[0];
LABEL_655:
  v635 = 0;
  v636 = 0;
  v637 = 0;
  memset(v638, 0, sizeof(v638));
  LODWORD(v639) = 1065353216;
  __dst = 0u;
  v633 = 0u;
  i = 1065353216;
  v586 = v335 - v334;
  v588 = (v335 - v334) / 80;
  if (v335 == v334)
  {
    v629 = 0uLL;
    v630 = 0uLL;
    j = 1065353216;
    *(_OWORD *)v626 = 0uLL;
    *(_OWORD *)v627 = 0uLL;
    m = 1065353216;
  }
  else
  {
    v365 = 0;
    if ((unint64_t)((v335 - v334) / 80) <= 1)
      v366 = 1;
    else
      v366 = (v335 - v334) / 80;
    do
    {
      v367 = (char *)v624[0] + 80 * v365;
      v368 = *((_QWORD *)v367 + 3);
      v369 = *((_QWORD *)v367 + 4);
      while (v368 != v369)
      {
        v370 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 152))(a3, v368);
        if (v370 && MIL::IRValueType::TryCastAsStateType(v370))
        {
          *(_QWORD *)&v629 = v368;
          v371 = std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v638, v368, (uint64_t)&std::piecewise_construct, (__int128 **)&v629);
          v373 = (void **)(v371 + 6);
          v372 = (_QWORD *)v371[6];
          v374 = v371 + 6;
          v375 = v371 + 6;
          if (v372)
          {
            while (1)
            {
              while (1)
              {
                v375 = v372;
                v376 = v372[4];
                if (v365 >= v376)
                  break;
                v372 = (_QWORD *)*v375;
                v374 = v375;
                if (!*v375)
                  goto LABEL_676;
              }
              if (v376 >= v365)
                break;
              v372 = (_QWORD *)v375[1];
              if (!v372)
              {
                v374 = v375 + 1;
                goto LABEL_676;
              }
            }
          }
          else
          {
LABEL_676:
            v377 = operator new(0x28uLL);
            v377[4] = v365;
            *v377 = 0;
            v377[1] = 0;
            v377[2] = v375;
            *v374 = v377;
            v378 = *(_QWORD *)v371[5];
            if (v378)
            {
              v371[5] = v378;
              v377 = (_QWORD *)*v374;
            }
            v379 = *v373;
            v7 = v377 == *v373;
            *((_BYTE *)v377 + 24) = v7;
            if (!v7)
            {
              do
              {
                v380 = v377[2];
                if (*(_BYTE *)(v380 + 24))
                  break;
                v381 = *(_BYTE **)(v380 + 16);
                v382 = *(_QWORD *)v381;
                if (*(_QWORD *)v381 == v380)
                {
                  v385 = *((_QWORD *)v381 + 1);
                  if (!v385 || (v386 = *(unsigned __int8 *)(v385 + 24), v383 = (_BYTE *)(v385 + 24), v386))
                  {
                    if (*(_QWORD **)v380 == v377)
                    {
                      *(_BYTE *)(v380 + 24) = 1;
                      v381[24] = 0;
                      v389 = *(_QWORD *)(v380 + 8);
                      *(_QWORD *)v381 = v389;
                      if (v389)
                        goto LABEL_693;
                    }
                    else
                    {
                      v387 = *(uint64_t **)(v380 + 8);
                      v388 = *v387;
                      *(_QWORD *)(v380 + 8) = *v387;
                      if (v388)
                      {
                        *(_QWORD *)(v388 + 16) = v380;
                        v381 = *(_BYTE **)(v380 + 16);
                      }
                      v387[2] = (uint64_t)v381;
                      *(_QWORD *)(*(_QWORD *)(v380 + 16) + 8 * (**(_QWORD **)(v380 + 16) != v380)) = v387;
                      *v387 = v380;
                      *(_QWORD *)(v380 + 16) = v387;
                      v381 = (_BYTE *)v387[2];
                      v380 = *(_QWORD *)v381;
                      *((_BYTE *)v387 + 24) = 1;
                      v381[24] = 0;
                      v389 = *(_QWORD *)(v380 + 8);
                      *(_QWORD *)v381 = v389;
                      if (v389)
LABEL_693:
                        *(_QWORD *)(v389 + 16) = v381;
                    }
                    *(_QWORD *)(v380 + 16) = *((_QWORD *)v381 + 2);
                    *(_QWORD *)(*((_QWORD *)v381 + 2) + 8 * (**((_QWORD **)v381 + 2) != (_QWORD)v381)) = v380;
                    *(_QWORD *)(v380 + 8) = v381;
LABEL_663:
                    *((_QWORD *)v381 + 2) = v380;
                    break;
                  }
                }
                else if (!v382 || (v384 = *(unsigned __int8 *)(v382 + 24), v383 = (_BYTE *)(v382 + 24), v384))
                {
                  if (*(_QWORD **)v380 == v377)
                  {
                    v391 = v377[1];
                    *(_QWORD *)v380 = v391;
                    if (v391)
                    {
                      *(_QWORD *)(v391 + 16) = v380;
                      v381 = *(_BYTE **)(v380 + 16);
                    }
                    v377[2] = v381;
                    *(_QWORD *)(*(_QWORD *)(v380 + 16) + 8 * (**(_QWORD **)(v380 + 16) != v380)) = v377;
                    v377[1] = v380;
                    *(_QWORD *)(v380 + 16) = v377;
                    v381 = (_BYTE *)v377[2];
                    *((_BYTE *)v377 + 24) = 1;
                    v381[24] = 0;
                    v380 = *((_QWORD *)v381 + 1);
                    v390 = *(_QWORD **)v380;
                    *((_QWORD *)v381 + 1) = *(_QWORD *)v380;
                    if (!v390)
                      goto LABEL_662;
                  }
                  else
                  {
                    *(_BYTE *)(v380 + 24) = 1;
                    v381[24] = 0;
                    v380 = *((_QWORD *)v381 + 1);
                    v390 = *(_QWORD **)v380;
                    *((_QWORD *)v381 + 1) = *(_QWORD *)v380;
                    if (!v390)
                      goto LABEL_662;
                  }
                  v390[2] = v381;
LABEL_662:
                  *(_QWORD *)(v380 + 16) = *((_QWORD *)v381 + 2);
                  *(_QWORD *)(*((_QWORD *)v381 + 2) + 8 * (**((_QWORD **)v381 + 2) != (_QWORD)v381)) = v380;
                  *(_QWORD *)v380 = v381;
                  goto LABEL_663;
                }
                *(_BYTE *)(v380 + 24) = 1;
                v377 = v381;
                v381[24] = v381 == (_BYTE *)v379;
                *v383 = 1;
              }
              while (v381 != (_BYTE *)v379);
            }
            ++v371[7];
          }
        }
        v368 += 24;
      }
      ++v365;
    }
    while (v365 != v366);
    v392 = v624[0];
    v393 = v624[1];
    if (v624[0] != v624[1])
    {
      while (1)
      {
        v394 = v392[3];
        v395 = v392[4];
        v629 = 0u;
        v630 = 0u;
        for (j = 1065353216; v394 != v395; v394 += 24)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v629, v394, v394);
        v396 = v392[6];
        v397 = v392[7];
        *(_OWORD *)v626 = 0u;
        *(_OWORD *)v627 = 0u;
        for (m = 1065353216; v396 != v397; v396 += 24)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v626, v396, v396);
        v398 = v636;
        if ((unint64_t)v636 < v637)
          break;
        v404 = (char *)std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__emplace_back_slow_path<std::unordered_set<std::string>,std::unordered_set<std::string>>((uint64_t *)&v635, (uint64_t *)&v629, (uint64_t *)v626);
        v405 = (char *)v627[0];
        v636 = v404;
        if (v627[0])
          goto LABEL_733;
LABEL_727:
        v410 = v626[0];
        v626[0] = 0;
        if (v410)
          operator delete(v410);
        v411 = (void **)v630;
        if ((_QWORD)v630)
        {
          do
          {
            v414 = (void **)*v411;
            if (*((char *)v411 + 39) < 0)
              operator delete(v411[2]);
            operator delete(v411);
            v411 = v414;
          }
          while (v414);
        }
        v412 = (void *)v629;
        *(_QWORD *)&v629 = 0;
        if (v412)
          operator delete(v412);
        v392 += 10;
        if (v392 == v393)
          goto LABEL_738;
      }
      v399 = v629;
      *(_QWORD *)&v629 = 0;
      *(_OWORD *)v636 = __PAIR128__(*((unint64_t *)&v629 + 1), v399);
      *((_QWORD *)&v629 + 1) = 0;
      v400 = v630;
      *((_QWORD *)v398 + 2) = v630;
      v401 = *((_QWORD *)&v630 + 1);
      *((_QWORD *)v398 + 3) = *((_QWORD *)&v630 + 1);
      *((_DWORD *)v398 + 8) = j;
      if (v401)
      {
        v402 = *(_QWORD *)(v400 + 8);
        v403 = *((_QWORD *)v398 + 1);
        if ((v403 & (v403 - 1)) != 0)
        {
          if (v402 >= v403)
            v402 %= v403;
        }
        else
        {
          v402 &= v403 - 1;
        }
        *(_QWORD *)(v399 + 8 * v402) = v398 + 16;
        v630 = 0uLL;
      }
      v406 = v626[0];
      v407 = (unint64_t)v626[1];
      v405 = (char *)v627[0];
      v408 = v627[1];
      *((void **)v398 + 7) = v627[0];
      v626[1] = 0;
      v626[0] = 0;
      *((_QWORD *)v398 + 5) = v406;
      *((_QWORD *)v398 + 6) = v407;
      *((_QWORD *)v398 + 8) = v408;
      *((_DWORD *)v398 + 18) = m;
      if (v408)
      {
        v409 = *((_QWORD *)v405 + 1);
        if ((v407 & (v407 - 1)) != 0)
        {
          if (v409 >= v407)
            v409 %= v407;
        }
        else
        {
          v409 &= v407 - 1;
        }
        v405 = 0;
        v406->__r_.__value_.__r.__words[v409] = (std::string::size_type)(v398 + 56);
        v627[0] = 0;
        v627[1] = 0;
      }
      v636 = v398 + 80;
      if (!v405)
        goto LABEL_727;
      do
      {
LABEL_733:
        v413 = *(char **)v405;
        if (v405[39] < 0)
          operator delete(*((void **)v405 + 2));
        operator delete(v405);
        v405 = v413;
      }
      while (v413);
      goto LABEL_727;
    }
LABEL_738:
    v415 = 0;
    v629 = 0u;
    v630 = 0u;
    j = 1065353216;
    *(_OWORD *)v626 = 0u;
    *(_OWORD *)v627 = 0u;
    m = 1065353216;
    v610 = 0;
    v416 = v588;
    do
    {
      v417 = v415 + 1;
      if (v415 + 1 < v416 && v635[10 * v415 + 7])
      {
        do
        {
          for (n = v635[10 * v610 + 7]; n; n = (uint64_t *)*n)
          {
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v635[10 * v417], (uint64_t)(n + 2)))
            {
              v612 = (unint64_t)&v610;
              v419 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&__dst, (unint64_t *)&v610, (uint64_t)&std::piecewise_construct, (uint64_t **)&v612);
              v421 = (void **)(v419 + 4);
              v420 = (_QWORD *)v419[4];
              v422 = v419 + 4;
              v423 = v419 + 4;
              if (v420)
              {
                while (1)
                {
                  while (1)
                  {
                    v423 = v420;
                    v424 = v420[4];
                    if (v417 >= v424)
                      break;
                    v420 = (_QWORD *)*v423;
                    v422 = v423;
                    if (!*v423)
                      goto LABEL_756;
                  }
                  if (v424 >= v417)
                    break;
                  v420 = (_QWORD *)v423[1];
                  if (!v420)
                  {
                    v422 = v423 + 1;
                    goto LABEL_756;
                  }
                }
              }
              else
              {
LABEL_756:
                v425 = operator new(0x28uLL);
                v425[4] = v417;
                *v425 = 0;
                v425[1] = 0;
                v425[2] = v423;
                *v422 = v425;
                v426 = *(_QWORD *)v419[3];
                if (v426)
                {
                  v419[3] = v426;
                  v425 = (_QWORD *)*v422;
                }
                v427 = *v421;
                v7 = v425 == *v421;
                *((_BYTE *)v425 + 24) = v7;
                if (!v7)
                {
                  do
                  {
                    v428 = v425[2];
                    if (*(_BYTE *)(v428 + 24))
                      break;
                    v429 = *(_BYTE **)(v428 + 16);
                    v430 = *(_QWORD *)v429;
                    if (*(_QWORD *)v429 == v428)
                    {
                      v433 = *((_QWORD *)v429 + 1);
                      if (!v433 || (v434 = *(unsigned __int8 *)(v433 + 24), v431 = (_BYTE *)(v433 + 24), v434))
                      {
                        if (*(_QWORD **)v428 == v425)
                        {
                          *(_BYTE *)(v428 + 24) = 1;
                          v429[24] = 0;
                          v437 = *(_QWORD *)(v428 + 8);
                          *(_QWORD *)v429 = v437;
                          if (v437)
                            goto LABEL_773;
                        }
                        else
                        {
                          v435 = *(uint64_t **)(v428 + 8);
                          v436 = *v435;
                          *(_QWORD *)(v428 + 8) = *v435;
                          if (v436)
                          {
                            *(_QWORD *)(v436 + 16) = v428;
                            v429 = *(_BYTE **)(v428 + 16);
                          }
                          v435[2] = (uint64_t)v429;
                          *(_QWORD *)(*(_QWORD *)(v428 + 16) + 8 * (**(_QWORD **)(v428 + 16) != v428)) = v435;
                          *v435 = v428;
                          *(_QWORD *)(v428 + 16) = v435;
                          v429 = (_BYTE *)v435[2];
                          v428 = *(_QWORD *)v429;
                          *((_BYTE *)v435 + 24) = 1;
                          v429[24] = 0;
                          v437 = *(_QWORD *)(v428 + 8);
                          *(_QWORD *)v429 = v437;
                          if (v437)
LABEL_773:
                            *(_QWORD *)(v437 + 16) = v429;
                        }
                        *(_QWORD *)(v428 + 16) = *((_QWORD *)v429 + 2);
                        *(_QWORD *)(*((_QWORD *)v429 + 2) + 8 * (**((_QWORD **)v429 + 2) != (_QWORD)v429)) = v428;
                        *(_QWORD *)(v428 + 8) = v429;
LABEL_779:
                        *((_QWORD *)v429 + 2) = v428;
                        break;
                      }
                    }
                    else if (!v430 || (v432 = *(unsigned __int8 *)(v430 + 24), v431 = (_BYTE *)(v430 + 24), v432))
                    {
                      if (*(_QWORD **)v428 == v425)
                      {
                        v441 = v425[1];
                        *(_QWORD *)v428 = v441;
                        if (v441)
                        {
                          *(_QWORD *)(v441 + 16) = v428;
                          v429 = *(_BYTE **)(v428 + 16);
                        }
                        v425[2] = v429;
                        *(_QWORD *)(*(_QWORD *)(v428 + 16) + 8 * (**(_QWORD **)(v428 + 16) != v428)) = v425;
                        v425[1] = v428;
                        *(_QWORD *)(v428 + 16) = v425;
                        v429 = (_BYTE *)v425[2];
                        *((_BYTE *)v425 + 24) = 1;
                        v429[24] = 0;
                        v428 = *((_QWORD *)v429 + 1);
                        v438 = *(_QWORD **)v428;
                        *((_QWORD *)v429 + 1) = *(_QWORD *)v428;
                        if (v438)
LABEL_777:
                          v438[2] = v429;
                      }
                      else
                      {
                        *(_BYTE *)(v428 + 24) = 1;
                        v429[24] = 0;
                        v428 = *((_QWORD *)v429 + 1);
                        v438 = *(_QWORD **)v428;
                        *((_QWORD *)v429 + 1) = *(_QWORD *)v428;
                        if (v438)
                          goto LABEL_777;
                      }
                      *(_QWORD *)(v428 + 16) = *((_QWORD *)v429 + 2);
                      *(_QWORD *)(*((_QWORD *)v429 + 2) + 8 * (**((_QWORD **)v429 + 2) != (_QWORD)v429)) = v428;
                      *(_QWORD *)v428 = v429;
                      goto LABEL_779;
                    }
                    *(_BYTE *)(v428 + 24) = 1;
                    v425 = v429;
                    v429[24] = v429 == (_BYTE *)v427;
                    *v431 = 1;
                  }
                  while (v429 != (_BYTE *)v427);
                }
                ++v419[5];
              }
              v612 = (unint64_t)(n + 2);
              v439 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v629, (unsigned __int8 *)n + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v612);
              v440 = *((_DWORD *)v439 + 10);
              *((_DWORD *)v439 + 10) = v440 + 1;
              if (v440 >= 1)
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v626, (uint64_t)(n + 2), (uint64_t)(n + 2));
            }
          }
          ++v417;
        }
        while (v417 != v588);
        v417 = v610 + 1;
      }
      v610 = v417;
      v415 = v417;
      v416 = v588;
    }
    while (v417 < v588);
    v442 = *(_QWORD **)&v638[16];
    if (*(_QWORD *)&v638[16])
    {
      do
      {
        v443 = (_QWORD *)v442[5];
        v444 = (_QWORD *)v443[1];
        v445 = v443;
        if (v444)
        {
          do
          {
            v446 = v444;
            v444 = (_QWORD *)*v444;
          }
          while (v444);
        }
        else
        {
          do
          {
            v446 = (_QWORD *)v445[2];
            v7 = *v446 == (_QWORD)v445;
            v445 = v446;
          }
          while (!v7);
        }
        v590 = v442;
        v447 = v442 + 6;
        if (v446 != v442 + 6)
        {
          do
          {
            v612 = (unint64_t)(v443 + 4);
            v448 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&__dst, v443 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v612);
            v450 = (void **)(v448 + 4);
            v449 = (_QWORD *)v448[4];
            v451 = v446[4];
            v452 = v448 + 4;
            v453 = v448 + 4;
            if (v449)
            {
              while (1)
              {
                while (1)
                {
                  v453 = v449;
                  v454 = v449[4];
                  if (v451 >= v454)
                    break;
                  v449 = (_QWORD *)*v453;
                  v452 = v453;
                  if (!*v453)
                    goto LABEL_807;
                }
                if (v454 >= v451)
                  break;
                v449 = (_QWORD *)v453[1];
                if (!v449)
                {
                  v452 = v453 + 1;
                  goto LABEL_807;
                }
              }
            }
            else
            {
LABEL_807:
              v455 = operator new(0x28uLL);
              v455[4] = v451;
              *v455 = 0;
              v455[1] = 0;
              v455[2] = v453;
              *v452 = v455;
              v456 = *(_QWORD *)v448[3];
              if (v456)
              {
                v448[3] = v456;
                v455 = (_QWORD *)*v452;
              }
              v457 = *v450;
              v7 = v455 == *v450;
              *((_BYTE *)v455 + 24) = v7;
              if (!v7)
              {
                do
                {
                  v458 = v455[2];
                  if (*(_BYTE *)(v458 + 24))
                    break;
                  v459 = *(_BYTE **)(v458 + 16);
                  v460 = *(_QWORD *)v459;
                  if (*(_QWORD *)v459 == v458)
                  {
                    v463 = *((_QWORD *)v459 + 1);
                    if (!v463 || (v464 = *(unsigned __int8 *)(v463 + 24), v461 = (_BYTE *)(v463 + 24), v464))
                    {
                      if (*(_QWORD **)v458 == v455)
                      {
                        *(_BYTE *)(v458 + 24) = 1;
                        v459[24] = 0;
                        v467 = *(_QWORD *)(v458 + 8);
                        *(_QWORD *)v459 = v467;
                        if (v467)
                          goto LABEL_824;
                      }
                      else
                      {
                        v465 = *(uint64_t **)(v458 + 8);
                        v466 = *v465;
                        *(_QWORD *)(v458 + 8) = *v465;
                        if (v466)
                        {
                          *(_QWORD *)(v466 + 16) = v458;
                          v459 = *(_BYTE **)(v458 + 16);
                        }
                        v465[2] = (uint64_t)v459;
                        *(_QWORD *)(*(_QWORD *)(v458 + 16) + 8 * (**(_QWORD **)(v458 + 16) != v458)) = v465;
                        *v465 = v458;
                        *(_QWORD *)(v458 + 16) = v465;
                        v459 = (_BYTE *)v465[2];
                        v458 = *(_QWORD *)v459;
                        *((_BYTE *)v465 + 24) = 1;
                        v459[24] = 0;
                        v467 = *(_QWORD *)(v458 + 8);
                        *(_QWORD *)v459 = v467;
                        if (v467)
LABEL_824:
                          *(_QWORD *)(v467 + 16) = v459;
                      }
                      *(_QWORD *)(v458 + 16) = *((_QWORD *)v459 + 2);
                      *(_QWORD *)(*((_QWORD *)v459 + 2) + 8 * (**((_QWORD **)v459 + 2) != (_QWORD)v459)) = v458;
                      *(_QWORD *)(v458 + 8) = v459;
LABEL_830:
                      *((_QWORD *)v459 + 2) = v458;
                      break;
                    }
                  }
                  else if (!v460 || (v462 = *(unsigned __int8 *)(v460 + 24), v461 = (_BYTE *)(v460 + 24), v462))
                  {
                    if (*(_QWORD **)v458 == v455)
                    {
                      v473 = v455[1];
                      *(_QWORD *)v458 = v473;
                      if (v473)
                      {
                        *(_QWORD *)(v473 + 16) = v458;
                        v459 = *(_BYTE **)(v458 + 16);
                      }
                      v455[2] = v459;
                      *(_QWORD *)(*(_QWORD *)(v458 + 16) + 8 * (**(_QWORD **)(v458 + 16) != v458)) = v455;
                      v455[1] = v458;
                      *(_QWORD *)(v458 + 16) = v455;
                      v459 = (_BYTE *)v455[2];
                      *((_BYTE *)v455 + 24) = 1;
                      v459[24] = 0;
                      v458 = *((_QWORD *)v459 + 1);
                      v468 = *(_QWORD **)v458;
                      *((_QWORD *)v459 + 1) = *(_QWORD *)v458;
                      if (v468)
LABEL_828:
                        v468[2] = v459;
                    }
                    else
                    {
                      *(_BYTE *)(v458 + 24) = 1;
                      v459[24] = 0;
                      v458 = *((_QWORD *)v459 + 1);
                      v468 = *(_QWORD **)v458;
                      *((_QWORD *)v459 + 1) = *(_QWORD *)v458;
                      if (v468)
                        goto LABEL_828;
                    }
                    *(_QWORD *)(v458 + 16) = *((_QWORD *)v459 + 2);
                    *(_QWORD *)(*((_QWORD *)v459 + 2) + 8 * (**((_QWORD **)v459 + 2) != (_QWORD)v459)) = v458;
                    *(_QWORD *)v458 = v459;
                    goto LABEL_830;
                  }
                  *(_BYTE *)(v458 + 24) = 1;
                  v455 = v459;
                  v459[24] = v459 == (_BYTE *)v457;
                  *v461 = 1;
                }
                while (v459 != (_BYTE *)v457);
              }
              ++v448[5];
            }
            v469 = (_QWORD *)v443[1];
            if (v469)
            {
              do
              {
                v470 = v469;
                v469 = (_QWORD *)*v469;
              }
              while (v469);
            }
            else
            {
              do
              {
                v470 = (_QWORD *)v443[2];
                v7 = *v470 == (_QWORD)v443;
                v443 = v470;
              }
              while (!v7);
            }
            v471 = (_QWORD *)v446[1];
            if (v471)
            {
              do
              {
                v472 = v471;
                v471 = (_QWORD *)*v471;
              }
              while (v471);
            }
            else
            {
              do
              {
                v472 = (_QWORD *)v446[2];
                v7 = *v472 == (_QWORD)v446;
                v446 = v472;
              }
              while (!v7);
            }
            v446 = v472;
            v443 = v470;
          }
          while (v472 != v447);
        }
        v442 = (_QWORD *)*v590;
      }
      while (*v590);
    }
  }
  v474 = (char *)v630;
  v475 = v588;
  if ((_QWORD)v630)
  {
    while (1)
    {
      v476 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v626, (uint64_t)(v474 + 16));
      v477 = *(char **)v474;
      if (!v476)
        break;
LABEL_855:
      v474 = v477;
      if (!v477)
        goto LABEL_884;
    }
    v478 = *((_QWORD *)&v629 + 1);
    v479 = *((_QWORD *)v474 + 1);
    v480 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v629 + 8));
    v480.i16[0] = vaddlv_u8(v480);
    if (v480.u32[0] > 1uLL)
    {
      if (v479 >= *((_QWORD *)&v629 + 1))
        v479 %= *((_QWORD *)&v629 + 1);
    }
    else
    {
      v479 &= *((_QWORD *)&v629 + 1) - 1;
    }
    v481 = *(char **)(v629 + 8 * v479);
    do
    {
      v482 = v481;
      v481 = *(char **)v481;
    }
    while (v481 != v474);
    if (v482 == (char *)&v630)
      goto LABEL_1074;
    v483 = *((_QWORD *)v482 + 1);
    if (v480.u32[0] > 1uLL)
    {
      if (v483 >= *((_QWORD *)&v629 + 1))
        v483 %= *((_QWORD *)&v629 + 1);
    }
    else
    {
      v483 &= *((_QWORD *)&v629 + 1) - 1;
    }
    v484 = *(_QWORD *)v474;
    if (v483 != v479)
    {
LABEL_1074:
      if (v477)
      {
        v485 = *((_QWORD *)v477 + 1);
        if (v480.u32[0] > 1uLL)
        {
          v486 = *((_QWORD *)v477 + 1);
          if (v485 >= *((_QWORD *)&v629 + 1))
            v486 = v485 % *((_QWORD *)&v629 + 1);
        }
        else
        {
          v486 = v485 & (*((_QWORD *)&v629 + 1) - 1);
        }
        v484 = *(_QWORD *)v474;
        if (v486 == v479)
          goto LABEL_878;
      }
      *(_QWORD *)(v629 + 8 * v479) = 0;
      v484 = *(_QWORD *)v474;
    }
    if (!v484)
    {
LABEL_852:
      *(_QWORD *)v482 = v484;
      *(_QWORD *)v474 = 0;
      --*((_QWORD *)&v630 + 1);
      if (v474[39] < 0)
        operator delete(*((void **)v474 + 2));
      operator delete(v474);
      goto LABEL_855;
    }
    v485 = *(_QWORD *)(v484 + 8);
LABEL_878:
    if (v480.u32[0] > 1uLL)
    {
      if (v485 >= v478)
        v485 %= v478;
    }
    else
    {
      v485 &= v478 - 1;
    }
    if (v485 != v479)
    {
      *(_QWORD *)(v629 + 8 * v485) = v482;
      v484 = *(_QWORD *)v474;
    }
    goto LABEL_852;
  }
LABEL_884:
  std::unordered_map<unsigned long,std::set<unsigned long>>::unordered_map((uint64_t)__p, (uint64_t)&__dst);
  std::unordered_map<std::string,int>::unordered_map((uint64_t)&v593, (uint64_t)&v629);
  v487 = (void **)v627[0];
  if (v627[0])
  {
    do
    {
      v508 = (void **)*v487;
      if (*((char *)v487 + 39) < 0)
        operator delete(v487[2]);
      operator delete(v487);
      v487 = v508;
    }
    while (v508);
  }
  v488 = v626[0];
  v626[0] = 0;
  if (v488)
    operator delete(v488);
  v489 = (void **)v630;
  if ((_QWORD)v630)
  {
    do
    {
      v509 = (void **)*v489;
      if (*((char *)v489 + 39) < 0)
        operator delete(v489[2]);
      operator delete(v489);
      v489 = v509;
    }
    while (v509);
  }
  v490 = (void *)v629;
  *(_QWORD *)&v629 = 0;
  if (v490)
    operator delete(v490);
  v491 = (_QWORD **)v633;
  if ((_QWORD)v633)
  {
    do
    {
      v492 = *v491;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v491 + 3), v491[4]);
      operator delete(v491);
      v491 = (_QWORD **)v492;
    }
    while (v492);
  }
  v493 = (void *)__dst;
  *(_QWORD *)&__dst = 0;
  if (v493)
    operator delete(v493);
  v494 = *(char **)&v638[16];
  if (*(_QWORD *)&v638[16])
  {
    do
    {
      v510 = *(char **)v494;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v494 + 40), *((_QWORD **)v494 + 6));
      if (v494[39] < 0)
        operator delete(*((void **)v494 + 2));
      operator delete(v494);
      v494 = v510;
    }
    while (v510);
  }
  v495 = *(void **)v638;
  *(_QWORD *)v638 = 0;
  if (v495)
    operator delete(v495);
  v496 = (char *)v635;
  if (v635)
  {
    v497 = v636;
    v498 = (uint64_t *)v635;
    if (v636 != (char *)v635)
    {
      do
      {
        v497 -= 80;
        std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100]((uint64_t)&v637, (uint64_t)v497);
      }
      while (v497 != v496);
      v498 = (uint64_t *)v635;
    }
    v636 = v496;
    operator delete(v498);
  }
  v499 = 0;
  v500 = v586 + 79;
  __dst = 0uLL;
  *(_QWORD *)&v633 = 0;
  if ((unint64_t)(v586 + 79) >= 0x9F)
  {
    if (v588 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v499 = (char *)operator new(8 * v588);
    *(_QWORD *)&__dst = v499;
    *(_QWORD *)&v633 = &v499[8 * v588];
    bzero(v499, 8 * v588);
    *((_QWORD *)&__dst + 1) = &v499[8 * v588];
  }
  v639 = 0u;
  memset(v638, 0, sizeof(v638));
  *(_QWORD *)&v630 = 0;
  v629 = 0uLL;
  v501 = *(_QWORD **)v592;
  if (*(_QWORD *)v592)
  {
    do
    {
      v511 = (_QWORD *)v501[3];
      if (v511 != v501 + 4)
      {
        do
        {
          ++*(_QWORD *)&v499[8 * v511[4]];
          v512 = (_QWORD *)v511[1];
          if (v512)
          {
            do
            {
              v513 = v512;
              v512 = (_QWORD *)*v512;
            }
            while (v512);
          }
          else
          {
            do
            {
              v513 = (_QWORD *)v511[2];
              v7 = *v513 == (_QWORD)v511;
              v511 = v513;
            }
            while (!v7);
          }
          v511 = v513;
        }
        while (v513 != v501 + 4);
      }
      v501 = (_QWORD *)*v501;
    }
    while (v501);
  }
  if (v500 <= 0x9E)
  {
    v502 = 0;
    if (!v588)
      goto LABEL_908;
LABEL_1061:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Segments can not be topologically sorted.");
  }
  v514 = 0;
  v515 = 0;
  v516 = 0;
  v517 = 0;
  do
  {
    if (!*(_QWORD *)&v499[8 * v517])
    {
      v518 = ((v516 - v515) << 6) - 1;
      if (v516 == v515)
        v518 = 0;
      v519 = v639 + v514;
      if (v518 == v519)
      {
        std::deque<unsigned long>::__add_back_capacity((uint64_t)v638);
        v516 = *(_QWORD *)&v638[16];
        v515 = *(_QWORD *)&v638[8];
        v519 = *((_QWORD *)&v639 + 1) + v639;
      }
      *(_QWORD *)(*(_QWORD *)(v515 + ((v519 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v519 & 0x1FF)) = v517;
      v514 = ++*((_QWORD *)&v639 + 1);
    }
    ++v517;
  }
  while (v588 != v517);
  if (v514)
  {
    v520 = 0;
    v521 = 0;
    v502 = 0;
    v522 = 0;
    while (1)
    {
      v523 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v638[8] + (((unint64_t)v639 >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (v639 & 0x1FF));
      *(_QWORD *)&v639 = v639 + 1;
      *((_QWORD *)&v639 + 1) = v514 - 1;
      if ((unint64_t)v639 >= 0x400)
      {
        operator delete(**(void ***)&v638[8]);
        *(_QWORD *)&v638[8] += 8;
        *(_QWORD *)&v639 = v639 - 512;
      }
      if (v521 < v520)
      {
        *(_QWORD *)v521 = v523;
        v521 += 8;
        v524 = (int8x8_t)__p[1];
        if (!__p[1])
          goto LABEL_942;
        goto LABEL_965;
      }
      v525 = (v521 - v522) >> 3;
      v526 = v525 + 1;
      if ((unint64_t)(v525 + 1) >> 61)
      {
        *(_QWORD *)&v629 = v502;
        *((_QWORD *)&v629 + 1) = v521;
        *(_QWORD *)&v630 = v520;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((v520 - v522) >> 2 > v526)
        v526 = (v520 - v522) >> 2;
      if ((unint64_t)(v520 - v522) >= 0x7FFFFFFFFFFFFFF8)
        v527 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v527 = v526;
      if (v527)
      {
        if (v527 >> 61)
        {
          *(_QWORD *)&v629 = v502;
          *((_QWORD *)&v629 + 1) = v521;
          *(_QWORD *)&v630 = v520;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v528 = operator new(8 * v527);
        v502 = &v528[8 * v525];
        *(_QWORD *)v502 = v523;
        v529 = (uint64_t)(v502 + 8);
        if (v521 == v522)
          goto LABEL_962;
      }
      else
      {
        v528 = 0;
        v502 = (char *)(8 * v525);
        *(_QWORD *)(8 * v525) = v523;
        v529 = 8 * v525 + 8;
        if (v521 == v522)
          goto LABEL_962;
      }
      v530 = v521 - 8 - v522;
      if (v530 < 0x168)
      {
        v531 = v521;
        goto LABEL_961;
      }
      if (&v528[v521 - v522 - 8 - (v530 & 0xFFFFFFFFFFFFFFF8)] > &v528[v521 - v522 - 8])
      {
        v531 = v521;
        do
        {
LABEL_961:
          v532 = *((_QWORD *)v531 - 1);
          v531 -= 8;
          *((_QWORD *)v502 - 1) = v532;
          v502 -= 8;
        }
        while (v531 != v522);
        goto LABEL_962;
      }
      if (&v521[-(v530 & 0xFFFFFFFFFFFFFFF8) - 8] > v521 - 8)
      {
        v531 = v521;
        goto LABEL_961;
      }
      if ((unint64_t)(v522 - v528) < 0x20)
      {
        v531 = v521;
        goto LABEL_961;
      }
      v541 = (v530 >> 3) + 1;
      v542 = 8 * (v541 & 0x3FFFFFFFFFFFFFFCLL);
      v531 = &v521[-v542];
      v502 -= v542;
      v543 = &v528[8 * v525 - 16];
      v544 = v521 - 16;
      v545 = v541 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v546 = *(_OWORD *)v544;
        *(v543 - 1) = *((_OWORD *)v544 - 1);
        *v543 = v546;
        v543 -= 2;
        v544 -= 32;
        v545 -= 4;
      }
      while (v545);
      if (v541 != (v541 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_961;
LABEL_962:
      v520 = &v528[8 * v527];
      if (v522)
        operator delete(v522);
      v522 = v502;
      v521 = (char *)v529;
      v524 = (int8x8_t)__p[1];
      if (!__p[1])
        goto LABEL_942;
LABEL_965:
      v533 = (uint8x8_t)vcnt_s8(v524);
      v533.i16[0] = vaddlv_u8(v533);
      if (v533.u32[0] > 1uLL)
      {
        v534 = v523;
        if (v523 >= *(_QWORD *)&v524)
          v534 = v523 % *(_QWORD *)&v524;
      }
      else
      {
        v534 = (*(_QWORD *)&v524 - 1) & v523;
      }
      v535 = (_QWORD *)*((_QWORD *)__p[0] + v534);
      if (v535)
      {
        v536 = (_QWORD *)*v535;
        if (*v535)
        {
          v537 = *(_QWORD *)&v524 - 1;
          if (v533.u32[0] < 2uLL)
          {
            while (1)
            {
              v538 = v536[1];
              if (v523 == v538)
              {
                if (v536[2] == v523)
                  goto LABEL_989;
              }
              else if ((v538 & v537) != v534)
              {
                goto LABEL_942;
              }
              v536 = (_QWORD *)*v536;
              if (!v536)
                goto LABEL_942;
            }
          }
          do
          {
            v539 = v536[1];
            if (v523 == v539)
            {
              if (v536[2] == v523)
              {
LABEL_989:
                if (v533.u32[0] > 1uLL)
                {
                  v540 = v523;
                  if (v523 >= *(_QWORD *)&v524)
                    v540 = v523 % *(_QWORD *)&v524;
                }
                else
                {
                  v540 = v537 & v523;
                }
                v547 = (_QWORD *)*((_QWORD *)__p[0] + v540);
                if (!v547 || (v548 = (_QWORD *)*v547) == 0)
                {
LABEL_1067:
                  *(_QWORD *)&v629 = v502;
                  *((_QWORD *)&v629 + 1) = v521;
                  *(_QWORD *)&v630 = v520;
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                }
                if (v533.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v549 = v548[1];
                    if (v523 == v549)
                    {
                      if (v548[2] == v523)
                        goto LABEL_1007;
                    }
                    else if ((v549 & v537) != v540)
                    {
                      goto LABEL_1067;
                    }
                    v548 = (_QWORD *)*v548;
                    if (!v548)
                      goto LABEL_1067;
                  }
                }
                while (2)
                {
                  v560 = v548[1];
                  if (v523 != v560)
                  {
                    if (v560 >= *(_QWORD *)&v524)
                      v560 %= *(_QWORD *)&v524;
                    if (v560 != v540)
                      goto LABEL_1067;
LABEL_1024:
                    v548 = (_QWORD *)*v548;
                    if (!v548)
                      goto LABEL_1067;
                    continue;
                  }
                  break;
                }
                if (v548[2] != v523)
                  goto LABEL_1024;
LABEL_1007:
                v550 = (_QWORD *)v548[3];
                v551 = v548 + 4;
                if (v550 == v548 + 4)
                  break;
                v552 = __dst;
LABEL_1010:
                v553 = v550[4];
                v554 = *(_QWORD *)(v552 + 8 * v553) - 1;
                *(_QWORD *)(v552 + 8 * v553) = v554;
                if (v554)
                {
                  v555 = (_QWORD *)v550[1];
                  if (!v555)
                    goto LABEL_1020;
                  do
                  {
LABEL_1018:
                    v559 = v555;
                    v555 = (_QWORD *)*v555;
                  }
                  while (v555);
                }
                else
                {
                  v556 = *(_QWORD *)&v638[8];
                  v557 = ((*(_QWORD *)&v638[16] - *(_QWORD *)&v638[8]) << 6) - 1;
                  if (*(_QWORD *)&v638[16] == *(_QWORD *)&v638[8])
                    v557 = 0;
                  v558 = *((_QWORD *)&v639 + 1) + v639;
                  if (v557 == *((_QWORD *)&v639 + 1) + (_QWORD)v639)
                  {
                    std::deque<unsigned long>::__add_back_capacity((uint64_t)v638);
                    v556 = *(_QWORD *)&v638[8];
                    v558 = *((_QWORD *)&v639 + 1) + v639;
                  }
                  *(_QWORD *)(*(_QWORD *)(v556 + ((v558 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v558 & 0x1FF)) = v553;
                  ++*((_QWORD *)&v639 + 1);
                  v555 = (_QWORD *)v550[1];
                  if (v555)
                    goto LABEL_1018;
                  do
                  {
LABEL_1020:
                    v559 = (_QWORD *)v550[2];
                    v7 = *v559 == (_QWORD)v550;
                    v550 = v559;
                  }
                  while (!v7);
                }
                v550 = v559;
                if (v559 == v551)
                  break;
                goto LABEL_1010;
              }
            }
            else
            {
              if (v539 >= *(_QWORD *)&v524)
                v539 %= *(_QWORD *)&v524;
              if (v539 != v534)
                break;
            }
            v536 = (_QWORD *)*v536;
          }
          while (v536);
        }
      }
LABEL_942:
      v514 = *((_QWORD *)&v639 + 1);
      if (!*((_QWORD *)&v639 + 1))
      {
        *(_QWORD *)&v629 = v502;
        *((_QWORD *)&v629 + 1) = v521;
        *(_QWORD *)&v630 = v520;
        v475 = v588;
        v500 = v586 + 79;
        if (v588 != (v521 - v502) >> 3)
          goto LABEL_1061;
        goto LABEL_908;
      }
    }
  }
  v502 = 0;
  if (v588)
    goto LABEL_1061;
LABEL_908:
  v504 = *(void ***)&v638[16];
  v503 = *(void ***)&v638[8];
  *((_QWORD *)&v639 + 1) = 0;
  v505 = *(_QWORD *)&v638[16] - *(_QWORD *)&v638[8];
  if (*(_QWORD *)&v638[16] - *(_QWORD *)&v638[8] >= 0x11uLL)
  {
    do
    {
      operator delete(*v503);
      v504 = *(void ***)&v638[16];
      v503 = (void **)(*(_QWORD *)&v638[8] + 8);
      *(_QWORD *)&v638[8] = v503;
      v505 = *(_QWORD *)&v638[16] - (_QWORD)v503;
    }
    while (*(_QWORD *)&v638[16] - (_QWORD)v503 > 0x10uLL);
  }
  v506 = v505 >> 3;
  if (v506 == 1)
  {
    v507 = 256;
    goto LABEL_1031;
  }
  if (v506 == 2)
  {
    v507 = 512;
LABEL_1031:
    *(_QWORD *)&v639 = v507;
  }
  if (v503 != v504)
  {
    do
    {
      v561 = *v503++;
      operator delete(v561);
    }
    while (v503 != v504);
    if (*(_QWORD *)&v638[16] != *(_QWORD *)&v638[8])
      *(_QWORD *)&v638[16] += (*(_QWORD *)&v638[8] - *(_QWORD *)&v638[16] + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  if (*(_QWORD *)v638)
    operator delete(*(void **)v638);
  if ((_QWORD)__dst)
    operator delete((void *)__dst);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v500 >= 0x9F)
  {
    v568 = 0;
    v569 = (void **)a5;
    v570 = 0;
    if (v475 <= 1)
      v571 = 1;
    else
      v571 = v475;
    do
    {
      v574 = *(_QWORD *)&v502[8 * v570];
      v575 = (char *)v624[0];
      v576 = (char *)v624[0] + 80 * v574;
      if (v568 < v569[2])
      {
        v572 = *(_OWORD *)v576;
        *((_QWORD *)v568 + 2) = *((_QWORD *)v576 + 2);
        *(_OWORD *)v568 = v572;
        *((_QWORD *)v576 + 1) = 0;
        *((_QWORD *)v576 + 2) = 0;
        *(_QWORD *)v576 = 0;
        v573 = &v575[80 * v574];
        *((_QWORD *)v568 + 3) = 0;
        *((_QWORD *)v568 + 4) = 0;
        *((_QWORD *)v568 + 5) = 0;
        *(_OWORD *)(v568 + 24) = *(_OWORD *)(v573 + 24);
        *((_QWORD *)v568 + 5) = *((_QWORD *)v573 + 5);
        *((_QWORD *)v573 + 3) = 0;
        *((_QWORD *)v573 + 4) = 0;
        *((_QWORD *)v573 + 5) = 0;
        *((_QWORD *)v568 + 6) = 0;
        *((_QWORD *)v568 + 7) = 0;
        *((_QWORD *)v568 + 8) = 0;
        *((_OWORD *)v568 + 3) = *((_OWORD *)v573 + 3);
        *((_QWORD *)v568 + 8) = *((_QWORD *)v573 + 8);
        *((_QWORD *)v573 + 6) = 0;
        *((_QWORD *)v573 + 7) = 0;
        *((_QWORD *)v573 + 8) = 0;
        *((_QWORD *)v568 + 9) = *((_QWORD *)v573 + 9);
        v568 += 80;
      }
      else
      {
        v568 = std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>(v569, (uint64_t)v576);
      }
      v569 = (void **)a5;
      a5[1] = v568;
      ++v570;
    }
    while (v571 != v570);
    goto LABEL_1042;
  }
  if (v502)
  {
LABEL_1042:
    *((_QWORD *)&v629 + 1) = v502;
    operator delete(v502);
  }
  v562 = (void **)v594.__r_.__value_.__l.__size_;
  if (v594.__r_.__value_.__l.__size_)
  {
    do
    {
      v567 = (void **)*v562;
      if (*((char *)v562 + 39) < 0)
        operator delete(v562[2]);
      operator delete(v562);
      v562 = v567;
    }
    while (v567);
  }
  v563 = v593;
  v593 = 0;
  if (v563)
    operator delete(v563);
  v564 = *(_QWORD ***)v592;
  if (*(_QWORD *)v592)
  {
    do
    {
      v565 = *v564;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v564 + 3), v564[4]);
      operator delete(v564);
      v564 = (_QWORD **)v565;
    }
    while (v565);
  }
  v566 = __p[0];
  __p[0] = 0;
  if (v566)
    operator delete(v566);
LABEL_632:
  v353 = (void **)v620;
  if (v620)
  {
    do
    {
      v363 = (void **)*v353;
      if (*((char *)v353 + 39) < 0)
        operator delete(v353[2]);
      operator delete(v353);
      v353 = v363;
    }
    while (v363);
  }
  v354 = v619[0];
  v619[0] = 0;
  if (v354)
    operator delete(v354);
  v355 = v618;
  if (v618)
  {
    do
    {
      v356 = *v355;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v355 + 3), v355[4]);
      operator delete(v355);
      v355 = (_QWORD **)v356;
    }
    while (v356);
  }
  v357 = v617[0];
  v617[0] = 0;
  if (v357)
    operator delete(v357);
  v358 = (void **)v622[0];
  if (v622[0])
  {
    do
    {
      v364 = (void **)*v358;
      if (*((char *)v358 + 47) < 0)
        operator delete(v358[3]);
      operator delete(v358);
      v358 = v364;
    }
    while (v364);
  }
  v359 = v621[0];
  v621[0] = 0;
  if (v359)
    operator delete(v359);
  v360 = (char *)v624[0];
  if (v624[0])
  {
    v361 = (char *)v624[1];
    v362 = v624[0];
    if (v624[1] != v624[0])
    {
      do
      {
        v361 -= 80;
        std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)&v625, (uint64_t)v361);
      }
      while (v361 != v360);
      v362 = v624[0];
    }
    v624[1] = v360;
    operator delete(v362);
  }
}

void sub_19108E188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  void *a71;
  void *v71;
  uint64_t v72;
  void *v74;

  if (v71)
  {
    *(_QWORD *)(v72 - 248) = v71;
    operator delete(v71);
  }
  std::deque<unsigned long>::~deque[abi:ne180100](v72 - 144);
  v74 = *(void **)(v72 - 208);
  if (v74)
    operator delete(v74);
  std::pair<std::unordered_map<unsigned long,std::set<unsigned long>>,std::unordered_map<std::string,int>>::~pair((uint64_t)&__p);
  std::pair<std::unordered_map<unsigned long,std::set<unsigned long>>,std::unordered_map<std::string,int>>::~pair((uint64_t)&a55);
  std::unordered_map<unsigned long,std::pair<std::string,unsigned long>>::~unordered_map[abi:ne180100]((uint64_t)&a65);
  std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100](&a71);
  _Unwind_Resume(a1);
}

void **std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 80;
        std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void Espresso::AOT::SegmentsLowerer::GenerateSegmentFunctions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  size_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  std::string *p_dst;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  char *v40;
  void **v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  void *__p[2];
  std::string::size_type v54;
  void *v55[2];
  uint64_t v56;
  void *v57[2];
  uint64_t v58;
  uint64_t v59;
  std::string __dst;
  __int128 v61;
  std::string::size_type v62;

  v6 = *a3;
  v5 = a3[1];
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v7 = v5 - v6;
  if (v7)
  {
    v8 = a1;
    v9 = 0;
    v10 = v7 / 72;
    if (v10 <= 1)
      v10 = 1;
    v47 = a4;
    v48 = v10;
    v49 = a1 + 40;
    do
    {
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
      v13 = v12 + 1;
      if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v51 = *a3;
      v14 = (uint64_t *)(*a3 + 72 * v9);
      v15 = *v14;
      v16 = v8;
      v17 = *(_QWORD **)(v8 + 80);
      if (v13 >= 0x17)
      {
        v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v19 = v13 | 7;
        v20 = v19 + 1;
        p_dst = (std::string *)operator new(v19 + 1);
        __dst.__r_.__value_.__l.__size_ = v12 + 1;
        __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        a4 = v47;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12 + 1;
        if (!v12)
          goto LABEL_20;
      }
      if (v11 >= 0)
        v21 = (const void *)a2;
      else
        v21 = *(const void **)a2;
      memmove(p_dst, v21, v12);
LABEL_20:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v12) = 95;
      v8 = v16;
      v22 = **(_QWORD **)(v16 + 16) + 24 * v15;
      v23 = *(char *)(v22 + 23);
      if (v23 >= 0)
        v24 = (const std::string::value_type *)(**(_QWORD **)(v16 + 16) + 24 * v15);
      else
        v24 = *(const std::string::value_type **)v22;
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(v22 + 23);
      else
        v25 = *(_QWORD *)(v22 + 8);
      v26 = std::string::append(&__dst, v24, v25);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v54 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      Espresso::MILTranslator::NameGenerator::NameForPrefix(v17, (uint64_t)__p, (uint64_t)&v61);
      if (SHIBYTE(v54) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_38:
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_38;
      }
      Espresso::AOT::SegmentsLowerer::ExtractSegment((_QWORD *)v16, a2);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
      v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, (unsigned __int8 *)&v61, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
      v29 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v30 = (std::__shared_weak_count *)*((_QWORD *)v28 + 6);
      *(_OWORD *)(v28 + 40) = v29;
      if (!v30)
        goto LABEL_32;
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        v33 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_40;
      }
      else
      {
LABEL_32:
        v33 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_40;
      }
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
LABEL_40:
      v36 = v51 + 72 * v9;
      v37 = *v14;
      *(_OWORD *)__p = v61;
      v54 = v62;
      v62 = 0;
      v61 = 0uLL;
      v55[1] = 0;
      v56 = 0;
      v55[0] = 0;
      *(_OWORD *)v55 = *(_OWORD *)(v36 + 24);
      v56 = *(_QWORD *)(v36 + 40);
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0;
      *(_QWORD *)(v36 + 40) = 0;
      v57[0] = 0;
      v57[1] = 0;
      v58 = 0;
      *(_OWORD *)v57 = *(_OWORD *)(v36 + 48);
      v58 = *(_QWORD *)(v36 + 64);
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_QWORD *)(v36 + 64) = 0;
      v59 = v37;
      v38 = *(_QWORD *)(a4 + 8);
      if (v38 >= *(_QWORD *)(a4 + 16))
      {
        v40 = std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>((void **)a4, (uint64_t)__p);
        v41 = (void **)v57[0];
        *(_QWORD *)(a4 + 8) = v40;
        if (v41)
        {
          v42 = (void **)v57[1];
          v43 = v41;
          if (v57[1] != v41)
          {
            do
            {
              if (*((char *)v42 - 1) < 0)
                operator delete(*(v42 - 3));
              v42 -= 3;
            }
            while (v42 != v41);
            v43 = (void **)v57[0];
          }
          v57[1] = v41;
          operator delete(v43);
        }
      }
      else
      {
        v39 = *(_OWORD *)__p;
        *(_QWORD *)(v38 + 16) = v54;
        *(_QWORD *)(v38 + 24) = 0;
        *(_OWORD *)v38 = v39;
        __p[1] = 0;
        v54 = 0;
        __p[0] = 0;
        *(_QWORD *)(v38 + 32) = 0;
        *(_QWORD *)(v38 + 40) = 0;
        *(_OWORD *)(v38 + 24) = *(_OWORD *)v55;
        v55[0] = 0;
        v55[1] = 0;
        *(_QWORD *)(v38 + 40) = v56;
        *(_QWORD *)(v38 + 48) = 0;
        v56 = 0;
        *(_QWORD *)(v38 + 56) = 0;
        *(_QWORD *)(v38 + 64) = 0;
        *(_OWORD *)(v38 + 48) = *(_OWORD *)v57;
        *(_QWORD *)(v38 + 64) = v58;
        v57[0] = 0;
        v57[1] = 0;
        v58 = 0;
        *(_QWORD *)(v38 + 72) = v59;
        *(_QWORD *)(a4 + 8) = v38 + 80;
      }
      v44 = (void **)v55[0];
      if (v55[0])
      {
        v45 = (void **)v55[1];
        v46 = v55[0];
        if (v55[1] != v55[0])
        {
          do
          {
            if (*((char *)v45 - 1) < 0)
              operator delete(*(v45 - 3));
            v45 -= 3;
          }
          while (v45 != v44);
          v46 = v55[0];
        }
        v55[1] = v44;
        operator delete(v46);
      }
      if (SHIBYTE(v54) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v62) < 0)
LABEL_62:
          operator delete((void *)v61);
      }
      else if (SHIBYTE(v62) < 0)
      {
        goto LABEL_62;
      }
      ++v9;
    }
    while (v9 != v48);
  }
}

void sub_19108ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

void sub_19108ED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  Espresso::AOT::SegmentsLowerer::SegmentFuncDef::~SegmentFuncDef((Espresso::AOT::SegmentsLowerer::SegmentFuncDef *)&__p);
  if (*(char *)(v35 - 97) < 0)
  {
    operator delete(*(void **)(v35 - 120));
    std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100](a9);
    _Unwind_Resume(a1);
  }
  std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

void **Espresso::AOT::SegmentsLowerer::GenerateEntryPointFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *OpsetName;
  unint64_t v16;
  std::string::size_type v17;
  const char *v18;
  std::string *p_dst;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  MIL::IRValue *v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  void *v52;
  _BYTE *v53;
  _OWORD *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count_vtbl *v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  MIL::Builder::FunctionBuilder *v70;
  void **v72;
  _OWORD v73[2];
  __int128 v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  void *v77;
  __int128 v78;
  std::__shared_weak_count_vtbl *v79;
  void *__p;
  void *v81[2];
  MIL::IRValue *v82;
  std::__shared_weak_count *v83;
  void *v84;
  __int128 v85;
  MIL::IRValue *v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::string __dst;
  std::string v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  MIL::Builder::FunctionBuilder *v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;

  v4 = a2;
  Espresso::AOT::SegmentsLowerer::GenerateEntryPointFuncMeta(a1, a2, a3, (uint64_t)&v102);
  v7 = *(std::__shared_weak_count **)(a1 + 32);
  v99 = *(_QWORD *)(a1 + 24);
  v100 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  MIL::Builder::FunctionBuilder::Make();
  if (v100)
  {
    v10 = &v100->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)v10);
    while (__stlxr(v11 - 1, (unint64_t *)v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v12 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 128))(v4);
  v13 = (_QWORD *)((char *)v12 + 8);
  v14 = *(_QWORD **)v12;
  if (*(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **)v12 != (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)((char *)v12 + 8))
  {
    do
    {
      if (*((char *)v14 + 55) < 0)
        std::string::__init_copy_ctor_external(&v98, (const std::string::value_type *)v14[4], v14[5]);
      else
        v98 = *(std::string *)(v14 + 4);
      v12 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v98.__r_.__value_.__l.__data_);
        v20 = (_QWORD *)v14[1];
        if (v20)
        {
          do
          {
LABEL_23:
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
          goto LABEL_15;
        }
      }
      else
      {
        v20 = (_QWORD *)v14[1];
        if (v20)
          goto LABEL_23;
      }
      do
      {
        v21 = (_QWORD *)v14[2];
        v22 = *v21 == (_QWORD)v14;
        v14 = v21;
      }
      while (!v22);
LABEL_15:
      v14 = v21;
    }
    while (v21 != v13);
  }
  OpsetName = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v12);
  v17 = v16;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v18 = OpsetName;
  if (v16 >= 0x17)
  {
    v23 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v23 = v16 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v17;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_31:
    memmove(p_dst, v18, v17);
    p_dst->__r_.__value_.__s.__data_[v17] = 0;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
  p_dst = &__dst;
  if (v16)
    goto LABEL_31;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    v94 = __dst;
    goto LABEL_33;
  }
LABEL_32:
  std::string::__init_copy_ctor_external(&v94, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_33:
  MIL::Builder::FunctionBuilder::AddBlock();
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  v25 = 0x4EC4EC4EC4EC4EC5 * ((v103 - v102) >> 3);
  v26 = v105;
  if (0xAAAAAAAAAAAAAAABLL * ((v105 - v104) >> 3) != v25 + 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected number of groups of TransferDefs.");
  if (v103 != v102)
  {
    *(_QWORD *)&v73[1] = v4;
    *(_QWORD *)&v74 = a4;
    v27 = 0;
    if (v25 <= 1)
      v28 = 1;
    else
      v28 = 0x4EC4EC4EC4EC4EC5 * ((v103 - v102) >> 3);
    do
    {
      v29 = *(_QWORD *)(v104 + 24 * v27);
      if (*(_QWORD *)(v104 + 24 * v27 + 8) != v29)
      {
        v30 = 0;
        v31 = 0;
        do
        {
          Espresso::AOT::SegmentsLowerer::AddTransferOp(v95, v29 + v30, *(_QWORD **)(a1 + 16));
          ++v31;
          v29 = *(_QWORD *)(v104 + 24 * v27);
          v30 += 72;
        }
        while (v31 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(v104 + 24 * v27 + 8) - v29) >> 3));
      }
      Espresso::AOT::SegmentsLowerer::AddCallOp(v95, (uint64_t)&v102[104 * v27++], (_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 16));
    }
    while (v27 != v28);
    v26 = v105;
    v4 = *(_QWORD *)&v73[1];
  }
  v33 = v26 - 24;
  v32 = *(_QWORD *)(v26 - 24);
  if (*(_QWORD *)(v33 + 8) != v32)
  {
    v34 = 0;
    v35 = 0;
    do
    {
      Espresso::AOT::SegmentsLowerer::AddTransferOp(v95, v32 + v34, *(_QWORD **)(a1 + 16));
      ++v35;
      v32 = *(_QWORD *)(v105 - 24);
      v34 += 72;
    }
    while (v35 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(v105 - 16) - v32) >> 3));
  }
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v37 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 88))(v36);
  v39 = *v37;
  v38 = v37[1];
  if (*v37 != v38)
  {
    do
    {
      MIL::Builder::BlockBuilder::AddOutput();
      v39 += 24;
    }
    while (v39 != v38);
  }
  MIL::Builder::FunctionBuilder::SetSpecialization();
  __p = operator new(0x20uLL);
  v74 = xmmword_191A71250;
  *(_OWORD *)v81 = xmmword_191A71250;
  v73[1] = *(_OWORD *)"FlexibleShapeInformation";
  strcpy((char *)__p, "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p);
  v40 = v92;
  if (v92)
  {
    v41 = (char *)operator new(0x20uLL);
    v91 = v74;
    *(_OWORD *)v41 = v73[1];
    strcpy(v41 + 16, "ormation");
    v88 = v40;
    v89 = v93;
    v90 = v41;
    if (v93)
    {
      v42 = (unint64_t *)&v93->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    MIL::Builder::FunctionBuilder::SetAttribute();
    if (!v89)
      goto LABEL_58;
    v44 = &v89->__shared_owners_;
    do
      v45 = __ldaxr((unint64_t *)v44);
    while (__stlxr(v45 - 1, (unint64_t *)v44));
    if (v45)
    {
LABEL_58:
      if ((SHIBYTE(v91) & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_59;
    }
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    if (SHIBYTE(v91) < 0)
LABEL_59:
      operator delete(v90);
  }
LABEL_60:
  __p = operator new(0x20uLL);
  v74 = xmmword_191A7C2C0;
  *(_OWORD *)v81 = xmmword_191A7C2C0;
  strcpy((char *)__p, "NeuralEngineOptimizedIOBuffer");
  qmemcpy(v73, "ptimizedIOBufferNeuralEngineOpti", sizeof(v73));
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p);
  v46 = v86;
  if (v86)
  {
    if (*(_BYTE *)(a1 + 97))
    {
      v47 = (char *)operator new(0x20uLL);
      v85 = v74;
      *(_OWORD *)v47 = v73[1];
      *(_OWORD *)(v47 + 13) = v73[0];
      v47[29] = 0;
      v82 = v46;
      v83 = v87;
      v84 = v47;
      if (v87)
      {
        v48 = (unint64_t *)&v87->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::Builder::FunctionBuilder::SetAttribute();
      if (!v83)
        goto LABEL_69;
      v50 = &v83->__shared_owners_;
      do
        v51 = __ldaxr((unint64_t *)v50);
      while (__stlxr(v51 - 1, (unint64_t *)v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        if (SHIBYTE(v85) < 0)
          goto LABEL_70;
      }
      else
      {
LABEL_69:
        if (SHIBYTE(v85) < 0)
        {
LABEL_70:
          v52 = v84;
LABEL_93:
          operator delete(v52);
        }
      }
    }
    else
    {
      E5Common::Utils::MILDictToCpp<std::string,BOOL>(v86, (uint64_t)&__p);
      v53 = v81[1];
      if (v81[1])
      {
        do
        {
          if (v53[40])
            v53[40] = 0;
          v53 = *(_BYTE **)v53;
        }
        while (v53);
      }
      E5Common::Utils::MILDictFromCpp<std::string,BOOL>((uint64_t)&__p, (void **)&v79);
      v54 = operator new(0x20uLL);
      v77 = v54;
      v78 = v74;
      *v54 = v73[1];
      *(_OWORD *)((char *)v54 + 13) = v73[0];
      *((_BYTE *)v54 + 29) = 0;
      v75 = v79;
      if (v79)
      {
        v55 = (std::__shared_weak_count *)operator new();
        v56 = v79;
        v55->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C50;
        v55->__shared_owners_ = 0;
        v55->__shared_weak_owners_ = 0;
        v55[1].__vftable = v56;
      }
      else
      {
        v55 = 0;
      }
      v76 = v55;
      v79 = 0;
      MIL::Builder::FunctionBuilder::SetAttribute();
      if (v76)
      {
        v57 = &v76->__shared_owners_;
        do
          v58 = __ldaxr((unint64_t *)v57);
        while (__stlxr(v58 - 1, (unint64_t *)v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if (SHIBYTE(v78) < 0)
        operator delete(v77);
      v59 = v79;
      v79 = 0;
      if (v59)
        (*((void (**)(std::__shared_weak_count_vtbl *))v59->~__shared_weak_count + 1))(v59);
      v60 = (void **)v81[1];
      if (v81[1])
      {
        do
        {
          v72 = (void **)*v60;
          if (*((char *)v60 + 39) < 0)
            operator delete(v60[2]);
          operator delete(v60);
          v60 = v72;
        }
        while (v72);
      }
      v52 = __p;
      __p = 0;
      if (v52)
        goto LABEL_93;
    }
  }
  MIL::Builder::FunctionBuilder::CreateFunction(v101);
  v61 = v87;
  if (v87)
  {
    v62 = (unint64_t *)&v87->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v93;
  if (!v93)
    goto LABEL_103;
  v65 = (unint64_t *)&v93->__shared_owners_;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
    v67 = v96;
    if (!v96)
      goto LABEL_107;
  }
  else
  {
LABEL_103:
    v67 = v96;
    if (!v96)
      goto LABEL_107;
  }
  v68 = (unint64_t *)&v67->__shared_owners_;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (v69)
  {
LABEL_107:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_109;
    goto LABEL_108;
  }
  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
  std::__shared_weak_count::__release_weak(v67);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_108:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_109:
  v70 = v101;
  v101 = 0;
  if (v70)
    (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v70 + 8))(v70);
  return std::pair<std::vector<Espresso::AOT::SegmentsLowerer::CallDef>,std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>>::~pair((void **)&v102);
}

void sub_19108F698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  uint64_t v60;

  if (a23 < 0)
    operator delete(__p);
  if (a24)
    (*(void (**)(uint64_t))(*(_QWORD *)a24 + 8))(a24);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v58 - 232);
  if (*(char *)(v58 - 193) < 0)
    operator delete(*(void **)(v58 - 216));
  v60 = *(_QWORD *)(v58 - 152);
  *(_QWORD *)(v58 - 152) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  std::pair<std::vector<Espresso::AOT::SegmentsLowerer::CallDef>,std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>>::~pair((void **)(v58 - 144));
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::~vector[abi:ne180100](uint64_t *a1)
{
  if (*a1)
  {
    std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

BOOL Espresso::AOT::SegmentsLowerer::CallDef::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 **v29;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
    goto LABEL_16;
  }
  if (!a1[23])
  {
LABEL_16:
    v10 = *((_QWORD *)a1 + 3);
    v9 = *((_QWORD *)a1 + 4);
    v11 = (unsigned __int8 **)v6[3];
    if (v9 - v10 == v6[4] - (_QWORD)v11)
    {
      if (v10 == v9)
      {
LABEL_35:
        v19 = *((_QWORD *)a1 + 6);
        v18 = *((_QWORD *)a1 + 7);
        v20 = (unsigned __int8 **)v6[6];
        if (v18 - v19 == v6[7] - (_QWORD)v20)
        {
          if (v19 == v18)
          {
LABEL_54:
            v28 = *((_QWORD *)a1 + 9);
            v27 = *((_QWORD *)a1 + 10);
            v29 = (unsigned __int8 **)v6[9];
            if (v27 - v28 == v6[10] - (_QWORD)v29)
            {
              while (1)
              {
                if (v28 == v27)
                  return *((_QWORD *)a1 + 12) == v6[12];
                v31 = *(unsigned __int8 *)(v28 + 23);
                if ((v31 & 0x80u) == 0)
                  v32 = (unsigned __int8 *)*(unsigned __int8 *)(v28 + 23);
                else
                  v32 = *(unsigned __int8 **)(v28 + 8);
                v33 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 23);
                v34 = (char)v33;
                if ((char)v33 < 0)
                  v33 = v29[1];
                if (v32 != v33)
                  return 0;
                if (v34 >= 0)
                  v35 = (unsigned __int8 *)v29;
                else
                  v35 = *v29;
                if ((v31 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)v28, v35, *(_QWORD *)(v28 + 8)))
                    return 0;
                }
                else if (*(_BYTE *)(v28 + 23))
                {
                  v36 = 0;
                  while (*(unsigned __int8 *)(v28 + v36) == v35[v36])
                  {
                    if (v31 == ++v36)
                      goto LABEL_57;
                  }
                  return 0;
                }
LABEL_57:
                v28 += 24;
                v29 += 3;
              }
            }
          }
          else
          {
            while (1)
            {
              v21 = *(unsigned __int8 *)(v19 + 23);
              if ((v21 & 0x80u) == 0)
                v22 = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 23);
              else
                v22 = *(unsigned __int8 **)(v19 + 8);
              v23 = (unsigned __int8 *)*((unsigned __int8 *)v20 + 23);
              v24 = (char)v23;
              if ((char)v23 < 0)
                v23 = v20[1];
              if (v22 != v23)
                break;
              if (v24 >= 0)
                v25 = (unsigned __int8 *)v20;
              else
                v25 = *v20;
              if ((v21 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v19, v25, *(_QWORD *)(v19 + 8)))
                  return 0;
              }
              else if (*(_BYTE *)(v19 + 23))
              {
                v26 = 0;
                while (*(unsigned __int8 *)(v19 + v26) == v25[v26])
                {
                  if (v21 == ++v26)
                    goto LABEL_53;
                }
                return 0;
              }
LABEL_53:
              v19 += 24;
              v20 += 3;
              if (v19 == v18)
                goto LABEL_54;
            }
          }
        }
      }
      else
      {
        while (1)
        {
          v12 = *(unsigned __int8 *)(v10 + 23);
          if ((v12 & 0x80u) == 0)
            v13 = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 23);
          else
            v13 = *(unsigned __int8 **)(v10 + 8);
          v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
          v15 = (char)v14;
          if ((char)v14 < 0)
            v14 = v11[1];
          if (v13 != v14)
            break;
          if (v15 >= 0)
            v16 = (unsigned __int8 *)v11;
          else
            v16 = *v11;
          if ((v12 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v16, *(_QWORD *)(v10 + 8)))
              return 0;
          }
          else if (*(_BYTE *)(v10 + 23))
          {
            v17 = 0;
            while (*(unsigned __int8 *)(v10 + v17) == v16[v17])
            {
              if (v12 == ++v17)
                goto LABEL_34;
            }
            return 0;
          }
LABEL_34:
          v10 += 24;
          v11 += 3;
          if (v10 == v9)
            goto LABEL_35;
        }
      }
    }
    return 0;
  }
  v8 = a1;
  while (*v8 == *a2)
  {
    ++v8;
    ++a2;
    if (!--v2)
      goto LABEL_16;
  }
  return 0;
}

__n128 Espresso::AOT::SegmentsLowerer::CallDef::CallDef(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, __n128 *a5, uint64_t a6)
{
  __int128 v6;
  __n128 result;

  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  result = *a5;
  *(__n128 *)(a1 + 72) = *a5;
  *(_QWORD *)(a1 + 88) = a5[1].n128_u64[0];
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 96) = a6;
  if (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Number of params and inputs do not match");
  return result;
}

void sub_19108FC24(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  std::vector<std::string>::~vector[abi:ne180100](v4);
  std::vector<std::string>::~vector[abi:ne180100](v3);
  std::vector<std::string>::~vector[abi:ne180100](v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::SegmentsLowerer::CallDef::CallDef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v6;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  Espresso::AOT::SegmentsLowerer::CallDef::CallDef(a1, (__int128 *)__p, a3, a2 + 24, (__n128 *)(a2 + 48), *(_QWORD *)(a2 + 72));
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  Espresso::AOT::SegmentsLowerer::CallDef::CallDef(a1, (__int128 *)__p, a3, a2 + 24, (__n128 *)(a2 + 48), *(_QWORD *)(a2 + 72));
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_19108FCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19108FD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL Espresso::AOT::SegmentsLowerer::TransferDef::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;

  v2 = *(unsigned __int8 *)(a1 + 39);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 39);
  else
    v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a2 + 39);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 24);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 16);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 16);
  else
    v9 = *(unsigned __int8 **)(a2 + 16);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 24)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v10 = *(unsigned __int8 *)(a1 + 63);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 63);
  else
    v11 = *(_QWORD *)(a1 + 48);
  v12 = *(unsigned __int8 *)(a2 + 63);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 48);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 40);
  if (v13 >= 0)
    v15 = (unsigned __int8 *)(a2 + 40);
  else
    v15 = *(unsigned __int8 **)(a2 + 40);
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(_QWORD *)(a1 + 48)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 63))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
  return 0;
}

BOOL Espresso::AOT::SegmentsLowerer::OpHasEndOfSegmentAttribute(Espresso::AOT::SegmentsLowerer *this, const MIL::IROperation *a2)
{
  void *__p[2];

  strcpy((char *)__p, "EndOfSegment");
  return MIL::IRObject::TryGetAttribute() != 0;
}

void sub_19108FF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 Espresso::AOT::SegmentsLowerer::SegmentFuncDef::SegmentFuncDef(uint64_t a1, __int128 *a2, uint64_t a3, __n128 *a4, uint64_t a5)
{
  __int128 v5;
  __n128 result;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = *a4;
  *(__n128 *)(a1 + 48) = *a4;
  *(_QWORD *)(a1 + 64) = a4[1].n128_u64[0];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 72) = a5;
  return result;
}

{
  __int128 v5;
  __n128 result;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = *a4;
  *(__n128 *)(a1 + 48) = *a4;
  *(_QWORD *)(a1 + 64) = a4[1].n128_u64[0];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 72) = a5;
  return result;
}

__n128 Espresso::AOT::SegmentsLowerer::SegmentFuncDef::SegmentFuncDef(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = *a2;
  v4 = *a3;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_QWORD *)(a1 + 40) = a2[5];
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = *((__n128 *)a2 + 3);
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = a2[8];
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *(_QWORD *)(a1 + 72) = v3;
  return result;
}

{
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = *a2;
  v4 = *a3;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_QWORD *)(a1 + 40) = a2[5];
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = *((__n128 *)a2 + 3);
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = a2[8];
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *(_QWORD *)(a1 + 72) = v3;
  return result;
}

void Espresso::AOT::SegmentsLowerer::ExtractSegment(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v4[8];

  MEMORY[0x19401BA88](v4, *a1);
  MIL::Transform::ProgramTransformer::ExtractSubProgram();
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(v3, a2);
  if (v3)
    (*(void (**)())(*(_QWORD *)v3 + 8))();
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v4);
}

void sub_19109019C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)va);
    _Unwind_Resume(a1);
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::SegmentFuncDef::~SegmentFuncDef(Espresso::AOT::SegmentsLowerer::SegmentFuncDef *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = *((_QWORD *)this + 4);
    v7 = (void *)*((_QWORD *)this + 3);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t `anonymous namespace'::CanMergeTwoSegments<Espresso::AOT::SegmentsLowerer::SegmentDef>(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *i;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t *v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  int8x8_t v38;
  uint8x8_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL v58;
  unint64_t v59;

  v7 = a5;
  v8 = a4;
  v10 = a2;
  v13 = *(char **)(a6 + 8);
  v12 = *(_QWORD *)(a6 + 16);
  v14 = v13;
  if ((unint64_t)v13 >= v12)
  {
    v18 = *(char **)a6;
    v19 = (uint64_t)&v13[-*(_QWORD *)a6];
    v20 = v19 >> 3;
    v21 = (v19 >> 3) + 1;
    if (v21 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v22 = v12 - (_QWORD)v18;
    if (v22 >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = operator new(8 * v23);
      v25 = (unint64_t *)&v24[8 * v20];
      v26 = &v24[8 * v23];
      *v25 = a1;
      v15 = (uint64_t)(v25 + 1);
      v27 = v13 - v18;
      if (v13 != v18)
      {
LABEL_17:
        v28 = v27 - 8;
        if (v28 >= 0x58)
        {
          v30 = v13 - v24 - v19;
          v8 = a4;
          v10 = a2;
          if (v30 >= 0x20)
          {
            v31 = (v28 >> 3) + 1;
            v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            v14 = &v13[-v32];
            v25 = (unint64_t *)((char *)v25 - v32);
            v33 = &v24[8 * v20 - 16];
            v34 = v13 - 16;
            v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v36 = *(_OWORD *)v34;
              *(v33 - 1) = *((_OWORD *)v34 - 1);
              *v33 = v36;
              v33 -= 2;
              v34 -= 32;
              v35 -= 4;
            }
            while (v35);
            if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_27:
              *(_QWORD *)a6 = v25;
              *(_QWORD *)(a6 + 8) = v15;
              *(_QWORD *)(a6 + 16) = v26;
              if (v18)
                operator delete(v18);
              v7 = a5;
              *(_QWORD *)(a6 + 8) = v15;
              if (a1 == v10)
              {
LABEL_3:
                for (i = *(char **)a6; i != (char *)v15; i += 8)
                {
                  if (0x8E38E38E38E38E39 * ((uint64_t)(v7[1] - *v7) >> 3) <= *(_QWORD *)i)
                    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                  if (*(_QWORD *)(*v7 + 72 * *(_QWORD *)i) != a3)
                    return 0;
                }
LABEL_50:
                result = 1;
                goto LABEL_51;
              }
              goto LABEL_30;
            }
          }
        }
        else
        {
          v8 = a4;
          v10 = a2;
        }
        do
        {
          v37 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v25 = v37;
        }
        while (v14 != v18);
        goto LABEL_27;
      }
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t *)(8 * v20);
      v26 = 0;
      *(_QWORD *)(8 * v20) = a1;
      v15 = 8 * v20 + 8;
      v27 = v13 - v18;
      if (v13 != v18)
        goto LABEL_17;
    }
    v8 = a4;
    v10 = a2;
    goto LABEL_27;
  }
  *(_QWORD *)v13 = a1;
  v15 = (uint64_t)(v13 + 8);
  *(_QWORD *)(a6 + 8) = v13 + 8;
  if (a1 == a2)
    goto LABEL_3;
LABEL_30:
  v38 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v38)
    goto LABEL_50;
  v39 = (uint8x8_t)vcnt_s8(v38);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    v40 = a1;
    if (*(_QWORD *)&v38 <= a1)
      v40 = a1 % *(_QWORD *)&v38;
  }
  else
  {
    v40 = (*(_QWORD *)&v38 - 1) & a1;
  }
  v41 = *(_QWORD **)(*v8 + 8 * v40);
  if (!v41)
    goto LABEL_50;
  v42 = (_QWORD *)*v41;
  if (!*v41)
    goto LABEL_50;
  v43 = *(_QWORD *)&v38 - 1;
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      v44 = v42[1];
      if (v44 == a1)
      {
        if (v42[2] == a1)
          goto LABEL_52;
      }
      else if ((v44 & v43) != v40)
      {
        goto LABEL_50;
      }
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_50;
    }
  }
  while (1)
  {
    v45 = v42[1];
    if (v45 == a1)
      break;
    if (v45 >= *(_QWORD *)&v38)
      v45 %= *(_QWORD *)&v38;
    if (v45 != v40)
      goto LABEL_50;
LABEL_45:
    v42 = (_QWORD *)*v42;
    if (!v42)
      goto LABEL_50;
  }
  if (v42[2] != a1)
    goto LABEL_45;
LABEL_52:
  if (v39.u32[0] > 1uLL)
  {
    v46 = a1;
    if (*(_QWORD *)&v38 <= a1)
      v46 = a1 % *(_QWORD *)&v38;
  }
  else
  {
    v46 = v43 & a1;
  }
  v47 = *(_QWORD **)(*v8 + 8 * v46);
  if (!v47 || (v48 = (_QWORD *)*v47) == 0)
LABEL_90:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      v49 = v48[1];
      if (v49 == a1)
      {
        if (v48[2] == a1)
          goto LABEL_64;
      }
      else if ((v49 & v43) != v46)
      {
        goto LABEL_90;
      }
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_90;
    }
  }
  while (2)
  {
    v59 = v48[1];
    if (v59 != a1)
    {
      if (v59 >= *(_QWORD *)&v38)
        v59 %= *(_QWORD *)&v38;
      if (v59 != v46)
        goto LABEL_90;
      goto LABEL_81;
    }
    if (v48[2] != a1)
    {
LABEL_81:
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_90;
      continue;
    }
    break;
  }
LABEL_64:
  v50 = (_QWORD *)v48[3];
  v51 = v48 + 4;
  v52 = 1;
  if (v50 != v48 + 4)
  {
    while (1)
    {
      v53 = v50[4];
      v55 = *(char **)a6;
      v54 = *(char **)(a6 + 8);
      if (*(char **)a6 != v54)
      {
        while (*(_QWORD *)v55 != v53)
        {
          v55 += 8;
          if (v55 == v54)
          {
            v55 = *(char **)(a6 + 8);
            break;
          }
        }
      }
      if (v55 == v54)
      {
        v56 = (_QWORD *)v50[1];
        if (v56)
        {
          do
          {
LABEL_75:
            v57 = v56;
            v56 = (_QWORD *)*v56;
          }
          while (v56);
          goto LABEL_66;
        }
      }
      else
      {
        v56 = (_QWORD *)v50[1];
        if (v56)
          goto LABEL_75;
      }
      do
      {
        v57 = (_QWORD *)v50[2];
        v58 = *v57 == (_QWORD)v50;
        v50 = v57;
      }
      while (!v58);
LABEL_66:
      v50 = v57;
      if (v57 == v51)
      {
        v15 = *(_QWORD *)(a6 + 8);
        break;
      }
    }
  }
  result = v52 & 1;
LABEL_51:
  *(_QWORD *)(a6 + 8) = v15 - 8;
  return result;
}

uint64_t std::pair<std::unordered_map<unsigned long,std::set<unsigned long>>,std::unordered_map<std::string,int>>::~pair(uint64_t a1)
{
  void **v2;
  void *v3;
  _QWORD **v4;
  _QWORD *v5;
  void *v6;
  void **v8;

  v2 = *(void ***)(a1 + 56);
  if (v2)
  {
    do
    {
      v8 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD ***)(a1 + 16);
  if (v4)
  {
    do
    {
      v5 = *v4;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v4 + 3), v4[4]);
      operator delete(v4);
      v4 = (_QWORD **)v5;
    }
    while (v5);
  }
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

uint64_t std::unordered_map<unsigned long,std::pair<std::string,unsigned long>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *Espresso::AOT::SegmentsLowerer::GetOwnerSegments@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *i;
  __int128 *v13;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = result[1] - *result;
  if (v3)
  {
    v4 = result;
    v5 = 0;
    v6 = v3 / 80;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    do
    {
      v8 = (_QWORD *)(*v4 + 80 * v5);
      v9 = (__int128 *)v8[3];
      v10 = (__int128 *)v8[4];
      while (v9 != v10)
      {
        result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((_QWORD *)a2, (uint64_t)v9);
        if (!result)
        {
          v13 = v9;
          result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)v9, (uint64_t)&std::piecewise_construct, &v13);
          result[5] = v5;
        }
        v9 = (__int128 *)((char *)v9 + 24);
      }
      v11 = (__int128 *)v8[6];
      for (i = (__int128 *)v8[7]; v11 != i; v11 = (__int128 *)((char *)v11 + 24))
      {
        v13 = v11;
        result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)v11, (uint64_t)&std::piecewise_construct, &v13);
        result[5] = v5;
      }
      ++v5;
    }
    while (v5 != v7);
  }
  return result;
}

void sub_191090980(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191090994(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1910909A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::MakeNewTensorNames(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  const void **v7;
  const void **v8;
  int v9;
  size_t v10;
  unint64_t v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type size;
  std::string::size_type v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const void **v29;
  const void **v30;
  int v31;
  size_t v32;
  unint64_t v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  std::string __dst;
  unint64_t v54;
  unint64_t *v55;
  _QWORD v56[3];

  v56[2] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v54 = 0;
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
LABEL_4:
    v6 = (_QWORD *)(v3 + 80 * v5);
    v7 = (const void **)v6[3];
    v8 = (const void **)v6[4];
    while (v7 != v8)
    {
      v9 = *((char *)v7 + 23);
      if (v9 >= 0)
        v10 = *((unsigned __int8 *)v7 + 23);
      else
        v10 = (size_t)v7[1];
      v11 = v10 + 1;
      if (v10 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v11 >= 0x17)
      {
        v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v13 = v11 | 7;
        v14 = v13 + 1;
        p_dst = (std::string *)operator new(v13 + 1);
        __dst.__r_.__value_.__l.__size_ = v10 + 1;
        __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10 + 1;
        if (!v10)
          goto LABEL_21;
      }
      if (v9 >= 0)
        v15 = v7;
      else
        v15 = *v7;
      memmove(p_dst, v15, v10);
LABEL_21:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v10) = 95;
      v16 = v6[9];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v16)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v17 = *a2 + 24 * v16;
      v18 = *(char *)(v17 + 23);
      if (v18 >= 0)
        v19 = (const std::string::value_type *)v17;
      else
        v19 = *(const std::string::value_type **)v17;
      if (v18 >= 0)
        v20 = *(unsigned __int8 *)(v17 + 23);
      else
        v20 = *(_QWORD *)(v17 + 8);
      v21 = std::string::append(&__dst, v19, v20);
      v23 = v21->__r_.__value_.__r.__words[0];
      size = v21->__r_.__value_.__l.__size_;
      v55 = (unint64_t *)v7;
      v56[0] = size;
      *(_QWORD *)((char *)v56 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
      v24 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v25 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v7, (uint64_t)&std::piecewise_construct, (__int128 **)&v55);
      v55 = &v54;
      v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v25 + 40, &v54, (uint64_t)&std::piecewise_construct, (uint64_t **)&v55);
      v27 = v26;
      if (*((char *)v26 + 47) < 0)
        operator delete((void *)v26[3]);
      v28 = v56[0];
      v27[3] = v23;
      v27[4] = v28;
      *(_QWORD *)((char *)v27 + 39) = *(_QWORD *)((char *)v56 + 7);
      *((_BYTE *)v27 + 47) = v24;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v7 += 3;
    }
    v29 = (const void **)v6[6];
    v30 = (const void **)v6[7];
    while (1)
    {
      if (v29 == v30)
      {
        v5 = v54 + 1;
        v54 = v5;
        v3 = *a1;
        if (v5 >= 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4))
          return;
        goto LABEL_4;
      }
      v31 = *((char *)v29 + 23);
      if (v31 >= 0)
        v32 = *((unsigned __int8 *)v29 + 23);
      else
        v32 = (size_t)v29[1];
      v33 = v32 + 1;
      if (v32 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v33 >= 0x17)
      {
        v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17)
          v35 = v33 | 7;
        v36 = v35 + 1;
        v34 = (std::string *)operator new(v35 + 1);
        __dst.__r_.__value_.__l.__size_ = v32 + 1;
        __dst.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        v34 = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32 + 1;
        if (!v32)
          goto LABEL_49;
      }
      if (v31 >= 0)
        v37 = v29;
      else
        v37 = *v29;
      memmove(v34, v37, v32);
LABEL_49:
      *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v32) = 95;
      v38 = v6[9];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v38)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v39 = *a2 + 24 * v38;
      v40 = *(char *)(v39 + 23);
      if (v40 >= 0)
        v41 = (const std::string::value_type *)v39;
      else
        v41 = *(const std::string::value_type **)v39;
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(v39 + 23);
      else
        v42 = *(_QWORD *)(v39 + 8);
      v43 = std::string::append(&__dst, v41, v42);
      v45 = v43->__r_.__value_.__r.__words[0];
      v44 = v43->__r_.__value_.__l.__size_;
      v55 = (unint64_t *)v29;
      v56[0] = v44;
      *(_QWORD *)((char *)v56 + 7) = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7);
      v46 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v47 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v29, (uint64_t)&std::piecewise_construct, (__int128 **)&v55);
      v55 = &v54;
      v48 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v47 + 40, &v54, (uint64_t)&std::piecewise_construct, (uint64_t **)&v55);
      v49 = v48;
      if (*((char *)v48 + 47) < 0)
        operator delete((void *)v48[3]);
      v50 = v56[0];
      v49[3] = v45;
      v49[4] = v50;
      *(_QWORD *)((char *)v49 + 39) = *(_QWORD *)((char *)v56 + 7);
      *((_BYTE *)v49 + 47) = v46;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v29 += 3;
    }
  }
}

void sub_191090DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

void sub_191090DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

void sub_191090E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a17 & 0x80000000) == 0)
  {
    std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](a11);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void Espresso::AOT::SegmentsLowerer::GenerateEntryPointFuncMeta(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  const std::string::value_type **v20;
  uint64_t *v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int8x8_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  std::string::size_type v50;
  char *v51;
  void **v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  std::string::size_type v61;
  void **v62;
  void **v63;
  __int128 v64;
  __int128 v65;
  void **v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  int8x8_t v74;
  uint8x8_t v75;
  unint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  std::string::size_type v91;
  char *v92;
  uint64_t v93;
  unint64_t i;
  void *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  int8x8_t v100;
  uint8x8_t v101;
  unint64_t v102;
  const std::string **v103;
  const std::string *v104;
  uint64_t v105;
  std::string::size_type v106;
  std::string::size_type size;
  uint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  int8x8_t v111;
  uint8x8_t v112;
  unint64_t v113;
  const std::string **v114;
  const std::string *v115;
  uint64_t v116;
  std::string::size_type v117;
  std::string::size_type v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  char *v123;
  void **v124;
  void **v125;
  void **v126;
  void *v127;
  void **v128;
  void *v129;
  void *v130;
  void **v131;
  void **v132;
  uint64_t v134;
  uint64_t *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  __int128 v140;
  std::string v141;
  std::string __p;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void **v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  unint64_t v153;
  __int128 v154;
  __int128 v155;
  int v156;
  _QWORD v157[2];
  void **v158;
  _QWORD v159[5];
  __int128 v160;
  uint64_t v161;

  v4 = a3;
  Espresso::AOT::SegmentsLowerer::MakeNewTensorNames(a3, *(_QWORD **)(a1 + 16), (uint64_t)v159);
  Espresso::AOT::SegmentsLowerer::GetOwnerSegments(v4, (uint64_t)v157);
  v154 = 0u;
  v155 = 0u;
  v156 = 1065353216;
  v134 = a2;
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
  v9 = v7 + 1;
  v8 = (_QWORD *)*v7;
  if ((_QWORD *)*v7 != v7 + 1)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v154, (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      v13 = (_QWORD *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v8[2];
          v15 = *v14 == (_QWORD)v8;
          v8 = v14;
        }
        while (!v15);
      }
      v8 = v14;
    }
    while (v14 != v9);
  }
  v152 = 0uLL;
  v153 = 0;
  std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::vector(&v150, 0xCCCCCCCCCCCCCCCDLL * ((v4[1] - *v4) >> 4) + 1);
  v11 = *v4;
  v10 = v4[1];
  v135 = v4;
  if (v10 != *v4)
  {
    v12 = 0;
    v136 = (_QWORD *)(a1 + 40);
    while (1)
    {
      v139 = (_QWORD *)(v11 + 80 * v12);
      v16 = v139[3];
      v138 = v139[4];
      if (v16 != v138)
        break;
LABEL_12:
      if (++v12 >= 0xCCCCCCCCCCCCCCCDLL * ((v10 - v11) >> 4))
        goto LABEL_97;
    }
    v137 = 24 * v12;
LABEL_17:
    v17 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v154, v16);
    v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v157, v16);
    if (!v18)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v19 = v18[5];
    v20 = (const std::string::value_type **)v16;
    if (!v17)
    {
      v21 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v16);
      if (!v21)
        goto LABEL_218;
      v22 = (int8x8_t)v21[6];
      if (!*(_QWORD *)&v22)
        goto LABEL_218;
      v23 = (uint8x8_t)vcnt_s8(v22);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v24 = v19;
        if (v19 >= *(_QWORD *)&v22)
          v24 = v19 % *(_QWORD *)&v22;
      }
      else
      {
        v24 = (*(_QWORD *)&v22 - 1) & v19;
      }
      v25 = *(_QWORD **)(v21[5] + 8 * v24);
      if (!v25 || (v26 = (_QWORD *)*v25) == 0)
LABEL_218:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (v23.u32[0] < 2uLL)
      {
        v27 = *(_QWORD *)&v22 - 1;
        while (1)
        {
          v29 = v26[1];
          if (v19 == v29)
          {
            if (v26[2] == v19)
              goto LABEL_40;
          }
          else if ((v29 & v27) != v24)
          {
            goto LABEL_218;
          }
          v26 = (_QWORD *)*v26;
          if (!v26)
            goto LABEL_218;
        }
      }
      while (1)
      {
        v28 = v26[1];
        if (v19 == v28)
        {
          if (v26[2] == v19)
          {
LABEL_40:
            v20 = (const std::string::value_type **)(v26 + 3);
            break;
          }
        }
        else
        {
          if (v28 >= *(_QWORD *)&v22)
            v28 %= *(_QWORD *)&v22;
          if (v28 != v24)
            goto LABEL_218;
        }
        v26 = (_QWORD *)*v26;
        if (!v26)
          goto LABEL_218;
      }
    }
    v30 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v16);
    if (!v30)
      goto LABEL_215;
    v31 = (int8x8_t)v30[6];
    if (!*(_QWORD *)&v31)
      goto LABEL_215;
    v32 = (uint8x8_t)vcnt_s8(v31);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      v33 = v12;
      if (v12 >= *(_QWORD *)&v31)
        v33 = v12 % *(_QWORD *)&v31;
    }
    else
    {
      v33 = (*(_QWORD *)&v31 - 1) & v12;
    }
    v34 = *(uint64_t ***)(v30[5] + 8 * v33);
    if (!v34 || (v35 = *v34) == 0)
LABEL_215:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v32.u32[0] < 2uLL)
    {
      v36 = *(_QWORD *)&v31 - 1;
      while (1)
      {
        v38 = v35[1];
        if (v12 == v38)
        {
          if (v35[2] == v12)
            goto LABEL_62;
        }
        else if ((v38 & v36) != v33)
        {
          goto LABEL_215;
        }
        v35 = (uint64_t *)*v35;
        if (!v35)
          goto LABEL_215;
      }
    }
    while (1)
    {
      v37 = v35[1];
      if (v12 == v37)
      {
        if (v35[2] == v12)
        {
LABEL_62:
          v39 = *v4 + 80 * v19;
          if (v17)
            v39 = (uint64_t)v139;
          v40 = *(_QWORD *)(v39 + 72);
          v41 = v139[9];
          v42 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v136, (uint64_t)v139);
          if (!v42)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42[5] + 144))(v42[5], v16);
          *(_QWORD *)&v140 = v40;
          *((_QWORD *)&v140 + 1) = v41;
          if (*((char *)v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v141, *v20, (std::string::size_type)v20[1]);
          }
          else
          {
            v44 = *(_OWORD *)v20;
            v141.__r_.__value_.__r.__words[2] = (std::string::size_type)v20[2];
            *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v44;
          }
          if (*((char *)v35 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v35[3], v35[4]);
          }
          else
          {
            v45 = *(_OWORD *)(v35 + 3);
            __p.__r_.__value_.__r.__words[2] = v35[5];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
          }
          v143 = v43;
          v46 = v150 + v137;
          v47 = *(_QWORD *)(v150 + v137 + 8);
          v48 = *(_QWORD *)(v150 + v137 + 16);
          if (v47 < v48)
          {
            *(_OWORD *)v47 = v140;
            v49 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
            *(_QWORD *)(v47 + 32) = *((_QWORD *)&v141.__r_.__value_.__l + 2);
            *(_OWORD *)(v47 + 16) = v49;
            memset(&v141, 0, sizeof(v141));
            v50 = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)(v47 + 40) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v47 + 56) = v50;
            memset(&__p, 0, sizeof(__p));
            *(_QWORD *)(v47 + 64) = v143;
            v51 = (char *)(v47 + 72);
            goto LABEL_93;
          }
          v52 = (void **)(v150 + 24 * v12);
          v53 = v47 - (_QWORD)*v52;
          v54 = 0x8E38E38E38E38E39 * (v53 >> 3) + 1;
          if (v54 > 0x38E38E38E38E38ELL)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v55 = 0x8E38E38E38E38E39 * ((uint64_t)(v48 - (_QWORD)*v52) >> 3);
          if (2 * v55 > v54)
            v54 = 2 * v55;
          if (v55 >= 0x1C71C71C71C71C7)
            v56 = 0x38E38E38E38E38ELL;
          else
            v56 = v54;
          if (v56 > 0x38E38E38E38E38ELL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v57 = (char *)operator new(72 * v56);
          v58 = &v57[8 * (v53 >> 3)];
          v59 = &v57[72 * v56];
          *(_OWORD *)v58 = v140;
          v60 = &v57[v53];
          *(std::string *)(v60 + 16) = v141;
          memset(&v141, 0, sizeof(v141));
          v61 = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v60 + 40) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          memset(&__p, 0, sizeof(__p));
          *((_QWORD *)v60 + 7) = v61;
          *((_QWORD *)v60 + 8) = v43;
          v51 = v58 + 72;
          v62 = *(void ***)(v46 + 8);
          v63 = (void **)*v52;
          if (v62 != *v52)
          {
            v4 = v135;
            do
            {
              *(_OWORD *)(v58 - 72) = *(_OWORD *)(v62 - 9);
              v64 = *(_OWORD *)(v62 - 7);
              *((_QWORD *)v58 - 5) = *(v62 - 5);
              *(_OWORD *)(v58 - 56) = v64;
              *(v62 - 6) = 0;
              *(v62 - 5) = 0;
              *(v62 - 7) = 0;
              v65 = *((_OWORD *)v62 - 2);
              *((_QWORD *)v58 - 2) = *(v62 - 2);
              *((_OWORD *)v58 - 2) = v65;
              *(v62 - 3) = 0;
              *(v62 - 2) = 0;
              *(v62 - 4) = 0;
              *((_QWORD *)v58 - 1) = *(v62 - 1);
              v58 -= 72;
              v62 -= 9;
            }
            while (v62 != v63);
            v62 = (void **)*v52;
            v66 = *(void ***)(v46 + 8);
            *v52 = v58;
            *(_QWORD *)(v46 + 8) = v51;
            *(_QWORD *)(v46 + 16) = v59;
            while (2)
            {
              if (v66 == v62)
                goto LABEL_91;
              if (*((char *)v66 - 9) < 0)
              {
                operator delete(*(v66 - 4));
                if (*((char *)v66 - 33) < 0)
                  goto LABEL_89;
              }
              else if (*((char *)v66 - 33) < 0)
              {
LABEL_89:
                operator delete(*(v66 - 7));
              }
              v66 -= 9;
              continue;
            }
          }
          *v52 = v58;
          *(_QWORD *)(v46 + 8) = v51;
          *(_QWORD *)(v46 + 16) = v59;
          v4 = v135;
LABEL_91:
          if (v62)
            operator delete(v62);
LABEL_93:
          *(_QWORD *)(v46 + 8) = v51;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_95;
          }
          else if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_95:
            operator delete(v141.__r_.__value_.__l.__data_);
            v16 += 24;
            if (v16 == v138)
            {
LABEL_11:
              v11 = *v4;
              v10 = v4[1];
              goto LABEL_12;
            }
            goto LABEL_17;
          }
          v16 += 24;
          if (v16 == v138)
            goto LABEL_11;
          goto LABEL_17;
        }
      }
      else
      {
        if (v37 >= *(_QWORD *)&v31)
          v37 %= *(_QWORD *)&v31;
        if (v37 != v33)
          goto LABEL_215;
      }
      v35 = (uint64_t *)*v35;
      if (!v35)
        goto LABEL_215;
    }
  }
LABEL_97:
  v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 40))(v134);
  v68 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 88))(v67);
  v70 = *v68;
  v69 = v68[1];
  if (*v68 == v69)
    goto LABEL_136;
  do
  {
LABEL_101:
    v71 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v157, v70);
    if (!v71)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v72 = v71[5];
    v73 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v70);
    if (!v73)
      goto LABEL_219;
    v74 = (int8x8_t)v73[6];
    if (!*(_QWORD *)&v74)
      goto LABEL_219;
    v75 = (uint8x8_t)vcnt_s8(v74);
    v75.i16[0] = vaddlv_u8(v75);
    if (v75.u32[0] > 1uLL)
    {
      v76 = v72;
      if (v72 >= *(_QWORD *)&v74)
        v76 = v72 % *(_QWORD *)&v74;
    }
    else
    {
      v76 = (*(_QWORD *)&v74 - 1) & v72;
    }
    v77 = *(uint64_t ***)(v73[5] + 8 * v76);
    if (!v77 || (v78 = *v77) == 0)
LABEL_219:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v75.u32[0] < 2uLL)
    {
      v79 = *(_QWORD *)&v74 - 1;
      while (1)
      {
        v81 = v78[1];
        if (v72 == v81)
        {
          if (v78[2] == v72)
            goto LABEL_123;
        }
        else if ((v81 & v79) != v76)
        {
          goto LABEL_219;
        }
        v78 = (uint64_t *)*v78;
        if (!v78)
          goto LABEL_219;
      }
    }
    while (1)
    {
      v80 = v78[1];
      if (v72 == v80)
        break;
      if (v80 >= *(_QWORD *)&v74)
        v80 %= *(_QWORD *)&v74;
      if (v80 != v76)
        goto LABEL_219;
LABEL_113:
      v78 = (uint64_t *)*v78;
      if (!v78)
        goto LABEL_219;
    }
    if (v78[2] != v72)
      goto LABEL_113;
LABEL_123:
    if (0xCCCCCCCCCCCCCCCDLL * ((v135[1] - *v135) >> 4) <= v72)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v82 = *(_QWORD *)(*v135 + 80 * v72 + 72);
    v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 40))(v134);
    v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 + 64) + 16))(v83 + 64, v70, 1);
    *(_QWORD *)&v140 = v82;
    *((_QWORD *)&v140 + 1) = v82;
    if (*((char *)v78 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v141, (const std::string::value_type *)v78[3], v78[4]);
    }
    else
    {
      v85 = *(_OWORD *)(v78 + 3);
      v141.__r_.__value_.__r.__words[2] = v78[5];
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v85;
    }
    if (*(char *)(v70 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v70, *(_QWORD *)(v70 + 8));
    }
    else
    {
      v86 = *(_OWORD *)v70;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v70 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v86;
    }
    v143 = v84;
    v87 = (v135[1] - *v135) >> 4;
    v88 = v150 + 0x3333333333333338 * v87;
    v89 = *(_QWORD *)(v88 + 8);
    if (v89 >= *(_QWORD *)(v88 + 16))
    {
      v92 = std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>::__push_back_slow_path<Espresso::AOT::SegmentsLowerer::TransferDef>((void **)(v150 + 0x3333333333333338 * v87), (uint64_t)&v140);
    }
    else
    {
      *(_OWORD *)v89 = v140;
      v90 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
      *(_QWORD *)(v89 + 32) = *((_QWORD *)&v141.__r_.__value_.__l + 2);
      *(_OWORD *)(v89 + 16) = v90;
      memset(&v141, 0, sizeof(v141));
      v91 = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v89 + 40) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v89 + 56) = v91;
      memset(&__p, 0, sizeof(__p));
      *(_QWORD *)(v89 + 64) = v143;
      v92 = (char *)(v89 + 72);
    }
    *(_QWORD *)(v88 + 8) = v92;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v4 = v135;
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_135;
LABEL_100:
      v70 += 24;
      if (v70 == v69)
        break;
      goto LABEL_101;
    }
    v4 = v135;
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_100;
LABEL_135:
    operator delete(v141.__r_.__value_.__l.__data_);
    v70 += 24;
  }
  while (v70 != v69);
LABEL_136:
  v93 = *v4;
  if (v4[1] != *v4)
  {
    for (i = 0; i < 0xCCCCCCCCCCCCCCCDLL * ((v135[1] - *v135) >> 4); ++i)
    {
      v96 = (uint64_t *)(v93 + 80 * i);
      v147 = 0;
      v148 = 0;
      v149 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v147, v96[3], v96[4], 0xAAAAAAAAAAAAAAABLL * ((v96[4] - v96[3]) >> 3));
      v97 = v96[3];
      if (v96[4] == v97)
        goto LABEL_165;
      v98 = 0;
      do
      {
        v99 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v97 + 24 * v98);
        if (!v99)
          goto LABEL_216;
        v100 = (int8x8_t)v99[6];
        if (!*(_QWORD *)&v100)
          goto LABEL_216;
        v101 = (uint8x8_t)vcnt_s8(v100);
        v101.i16[0] = vaddlv_u8(v101);
        if (v101.u32[0] > 1uLL)
        {
          v102 = i;
          if (i >= *(_QWORD *)&v100)
            v102 = i % *(_QWORD *)&v100;
        }
        else
        {
          v102 = (*(_QWORD *)&v100 - 1) & i;
        }
        v103 = *(const std::string ***)(v99[5] + 8 * v102);
        if (!v103 || (v104 = *v103) == 0)
LABEL_216:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v101.u32[0] < 2uLL)
        {
          v105 = *(_QWORD *)&v100 - 1;
          while (1)
          {
            size = v104->__r_.__value_.__l.__size_;
            if (i == size)
            {
              if (v104->__r_.__value_.__r.__words[2] == i)
                goto LABEL_164;
            }
            else if ((size & v105) != v102)
            {
              goto LABEL_216;
            }
            v104 = (const std::string *)v104->__r_.__value_.__r.__words[0];
            if (!v104)
              goto LABEL_216;
          }
        }
        while (1)
        {
          v106 = v104->__r_.__value_.__l.__size_;
          if (i == v106)
            break;
          if (v106 >= *(_QWORD *)&v100)
            v106 %= *(_QWORD *)&v100;
          if (v106 != v102)
            goto LABEL_216;
LABEL_154:
          v104 = (const std::string *)v104->__r_.__value_.__r.__words[0];
          if (!v104)
            goto LABEL_216;
        }
        if (v104->__r_.__value_.__r.__words[2] != i)
          goto LABEL_154;
LABEL_164:
        std::string::operator=((std::string *)(v96[3] + 24 * v98++), v104 + 1);
        v97 = v96[3];
      }
      while (v98 < 0xAAAAAAAAAAAAAAABLL * ((v96[4] - v97) >> 3));
LABEL_165:
      v108 = v96[6];
      if (v96[7] == v108)
        goto LABEL_189;
      v109 = 0;
      while (2)
      {
        v110 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v108 + 24 * v109);
        if (!v110)
          goto LABEL_217;
        v111 = (int8x8_t)v110[6];
        if (!*(_QWORD *)&v111)
          goto LABEL_217;
        v112 = (uint8x8_t)vcnt_s8(v111);
        v112.i16[0] = vaddlv_u8(v112);
        if (v112.u32[0] > 1uLL)
        {
          v113 = i;
          if (i >= *(_QWORD *)&v111)
            v113 = i % *(_QWORD *)&v111;
        }
        else
        {
          v113 = (*(_QWORD *)&v111 - 1) & i;
        }
        v114 = *(const std::string ***)(v110[5] + 8 * v113);
        if (!v114 || (v115 = *v114) == 0)
LABEL_217:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v112.u32[0] < 2uLL)
        {
          v116 = *(_QWORD *)&v111 - 1;
          while (1)
          {
            v118 = v115->__r_.__value_.__l.__size_;
            if (i == v118)
            {
              if (v115->__r_.__value_.__r.__words[2] == i)
                goto LABEL_188;
            }
            else if ((v118 & v116) != v113)
            {
              goto LABEL_217;
            }
            v115 = (const std::string *)v115->__r_.__value_.__r.__words[0];
            if (!v115)
              goto LABEL_217;
          }
        }
        while (2)
        {
          v117 = v115->__r_.__value_.__l.__size_;
          if (i != v117)
          {
            if (v117 >= *(_QWORD *)&v111)
              v117 %= *(_QWORD *)&v111;
            if (v117 != v113)
              goto LABEL_217;
LABEL_178:
            v115 = (const std::string *)v115->__r_.__value_.__r.__words[0];
            if (!v115)
              goto LABEL_217;
            continue;
          }
          break;
        }
        if (v115->__r_.__value_.__r.__words[2] != i)
          goto LABEL_178;
LABEL_188:
        std::string::operator=((std::string *)(v96[6] + 24 * v109++), v115 + 1);
        v108 = v96[6];
        if (v109 < 0xAAAAAAAAAAAAAAABLL * ((v96[7] - v108) >> 3))
          continue;
        break;
      }
LABEL_189:
      v119 = *v135;
      v120 = *v135 + 80 * i;
      v160 = *(_OWORD *)v120;
      v161 = *(_QWORD *)(v120 + 16);
      *(_QWORD *)(v120 + 8) = 0;
      *(_QWORD *)(v120 + 16) = 0;
      *(_QWORD *)v120 = 0;
      Espresso::AOT::SegmentsLowerer::CallDef::CallDef((uint64_t)&v140, &v160, (uint64_t)&v147, v119 + 80 * i + 24, (__n128 *)(v119 + 80 * i + 48), *(_QWORD *)(v119 + 80 * i + 72));
      if (SHIBYTE(v161) < 0)
      {
        operator delete((void *)v160);
        v121 = *((_QWORD *)&v152 + 1);
        if (*((_QWORD *)&v152 + 1) >= v153)
          goto LABEL_193;
LABEL_191:
        v122 = v140;
        *(_QWORD *)(v121 + 16) = v141.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v121 + 24) = 0;
        *(_OWORD *)v121 = v122;
        v141.__r_.__value_.__r.__words[0] = 0;
        v140 = 0uLL;
        *(_QWORD *)(v121 + 32) = 0;
        *(_QWORD *)(v121 + 40) = 0;
        *(_OWORD *)(v121 + 24) = *(_OWORD *)&v141.__r_.__value_.__r.__words[1];
        *(_OWORD *)&v141.__r_.__value_.__r.__words[1] = 0uLL;
        *(_QWORD *)(v121 + 40) = __p.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v121 + 48) = 0;
        __p.__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)(v121 + 56) = 0;
        *(_QWORD *)(v121 + 64) = 0;
        *(_OWORD *)(v121 + 48) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        *(_QWORD *)(v121 + 64) = v143;
        *(_QWORD *)(v121 + 72) = 0;
        v143 = 0;
        *(_QWORD *)(v121 + 80) = 0;
        *(_QWORD *)(v121 + 88) = 0;
        *(_OWORD *)(v121 + 72) = v144;
        *(_QWORD *)(v121 + 88) = v145;
        v144 = 0uLL;
        v145 = 0;
        *(_QWORD *)(v121 + 96) = v146;
        v123 = (char *)(v121 + 104);
      }
      else
      {
        v121 = *((_QWORD *)&v152 + 1);
        if (*((_QWORD *)&v152 + 1) < v153)
          goto LABEL_191;
LABEL_193:
        v123 = std::vector<Espresso::AOT::SegmentsLowerer::CallDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::CallDef>((void **)&v152, (uint64_t)&v140);
      }
      *((_QWORD *)&v152 + 1) = v123;
      Espresso::AOT::SegmentsLowerer::CallDef::~CallDef((Espresso::AOT::SegmentsLowerer::CallDef *)&v140);
      v124 = (void **)v147;
      if (v147)
      {
        v125 = v148;
        v95 = v147;
        if (v148 != v147)
        {
          do
          {
            if (*((char *)v125 - 1) < 0)
              operator delete(*(v125 - 3));
            v125 -= 3;
          }
          while (v125 != v124);
          v95 = v147;
        }
        v148 = v124;
        operator delete(v95);
      }
      v93 = *v135;
    }
  }
  *(_OWORD *)a4 = v152;
  *(_QWORD *)(a4 + 16) = v153;
  *(_OWORD *)(a4 + 24) = v150;
  *(_QWORD *)(a4 + 40) = v151;
  v126 = (void **)v155;
  if ((_QWORD)v155)
  {
    do
    {
      v131 = (void **)*v126;
      if (*((char *)v126 + 39) < 0)
        operator delete(v126[2]);
      operator delete(v126);
      v126 = v131;
    }
    while (v131);
  }
  v127 = (void *)v154;
  *(_QWORD *)&v154 = 0;
  if (v127)
    operator delete(v127);
  v128 = v158;
  if (v158)
  {
    do
    {
      v132 = (void **)*v128;
      if (*((char *)v128 + 39) < 0)
        operator delete(v128[2]);
      operator delete(v128);
      v128 = v132;
    }
    while (v132);
  }
  v129 = (void *)v157[0];
  v157[0] = 0;
  if (v129)
    operator delete(v129);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__deallocate_node((int)v159, (char *)v159[2]);
  v130 = (void *)v159[0];
  v159[0] = 0;
  if (v130)
    operator delete(v130);
}

void sub_191091D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  uint64_t v40;

  std::vector<Espresso::AOT::SegmentsLowerer::CallDef>::~vector[abi:ne180100](&a40);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v40 - 240);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v40 - 192);
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](v40 - 152);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_191091F50(_Unwind_Exception *exception_object)
{
  void ***v1;

  if (*v1)
    std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::vector(v1 + 1, *v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::SegmentsLowerer::TransferDef::~TransferDef(void **this)
{
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[2]);
    return;
  }
  operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    goto LABEL_5;
}

void ***std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::~vector[abi:ne180100](void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    v5 = a1[1];
    while (1)
    {
      v8 = (void **)*(v5 - 3);
      v5 -= 3;
      v7 = v8;
      if (!v8)
        goto LABEL_6;
      v9 = (void **)*(v3 - 2);
      v6 = v7;
      if (v9 != v7)
        break;
LABEL_5:
      *(v3 - 2) = v7;
      operator delete(v6);
LABEL_6:
      v3 = v5;
      if (v5 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
    while (1)
    {
      if (*((char *)v9 - 9) < 0)
      {
        operator delete(*(v9 - 4));
        if (*((char *)v9 - 33) < 0)
LABEL_15:
          operator delete(*(v9 - 7));
      }
      else if (*((char *)v9 - 33) < 0)
      {
        goto LABEL_15;
      }
      v9 -= 9;
      if (v9 == v7)
      {
        v6 = *v5;
        goto LABEL_5;
      }
    }
  }
  return a1;
}

void **std::vector<Espresso::AOT::SegmentsLowerer::CallDef>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        Espresso::AOT::SegmentsLowerer::CallDef::~CallDef((Espresso::AOT::SegmentsLowerer::CallDef *)(v3 - 104));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void Espresso::AOT::SegmentsLowerer::AddTransferOp(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::string *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string v28;
  std::__shared_weak_count *v29;
  std::string v30;
  void *v31[2];
  char v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *__p[2];
  char v36;
  std::string v37;
  void *v38[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42[2];
  char v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;

  v5 = (std::string *)(a2 + 40);
  if (MIL::Builder::BlockBuilder::TryGetVariable())
    return;
  if (!*(_QWORD *)(a2 + 64))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Output type cannot be null");
  v43 = 8;
  v41 = 0;
  strcpy((char *)v42, "transfer");
  v40 = 0;
  MIL::Builder::BlockBuilder::AddOperation();
  v39 = 4;
  strcpy((char *)v38, "from");
  v6 = *a3 + 24 * *(_QWORD *)a2;
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v37.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v7;
  }
  MIL::Builder::OperationBuilder::AddInputString();
  v36 = 2;
  strcpy((char *)__p, "to");
  v8 = *a3 + 24 * *(_QWORD *)(a2 + 8);
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
  }
  else
  {
    v9 = *(_OWORD *)v8;
    v34.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v9;
  }
  MIL::Builder::OperationBuilder::AddInputString();
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v36 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_15:
    operator delete(__p[0]);
    v10 = v45;
    if (!v45)
      goto LABEL_19;
    goto LABEL_16;
  }
  operator delete(v34.__r_.__value_.__l.__data_);
  if (v36 < 0)
    goto LABEL_15;
LABEL_12:
  v10 = v45;
  if (!v45)
    goto LABEL_19;
LABEL_16:
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_19:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_20:
    if ((v39 & 0x80000000) == 0)
      goto LABEL_21;
LABEL_25:
    operator delete(v38[0]);
    v13 = v44;
    if (!v44)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_24:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (v39 < 0)
    goto LABEL_25;
LABEL_21:
  v13 = v44;
  if (!v44)
    goto LABEL_29;
LABEL_26:
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_29:
    v16 = v41;
    if (!v41)
      goto LABEL_33;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  v16 = v41;
  if (!v41)
    goto LABEL_33;
LABEL_30:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_33:
    if ((v43 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (v43 < 0)
LABEL_34:
    operator delete(v42[0]);
LABEL_35:
  v32 = 6;
  strcpy((char *)v31, "values");
  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    v30 = *(std::string *)(a2 + 16);
  MIL::Builder::OperationBuilder::AddInput();
  v19 = v33;
  if (!v33)
    goto LABEL_42;
  v20 = (unint64_t *)&v33->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      if ((v32 & 0x80000000) == 0)
        goto LABEL_44;
LABEL_52:
      operator delete(v31[0]);
      if ((*(char *)(a2 + 63) & 0x80000000) == 0)
        goto LABEL_45;
LABEL_53:
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
      goto LABEL_54;
    }
  }
  else
  {
LABEL_42:
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if (v32 < 0)
    goto LABEL_52;
LABEL_44:
  if (*(char *)(a2 + 63) < 0)
    goto LABEL_53;
LABEL_45:
  v28 = *v5;
LABEL_54:
  MIL::Builder::OperationBuilder::AddOutput();
  v22 = v29;
  if (!v29)
    goto LABEL_58;
  v23 = (unint64_t *)&v29->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_58:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
LABEL_59:
    operator delete(v28.__r_.__value_.__l.__data_);
LABEL_60:
  v25 = v46;
  if (v46)
  {
    v26 = (unint64_t *)&v46->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_19109254C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v46 - 64);
  _Unwind_Resume(a1);
}

void sub_1910925B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v34 - 80);
  JUMPOUT(0x1910925E8);
}

void Espresso::AOT::SegmentsLowerer::AddCallOp(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string v50;
  void *v51;
  std::__shared_weak_count *v52;
  void *v53[2];
  char v54;
  std::__shared_weak_count *v55;
  std::string v56;
  void *v57;
  std::__shared_weak_count *v58;
  void *__p[2];
  char v60;
  std::__shared_weak_count *v61;
  std::string v62;
  std::__shared_weak_count *v63;
  std::string v64;
  std::string v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _BYTE *v70;
  _BYTE *v71;
  char v72;

  v6 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, (unsigned __int8 *)a2);
  if (!v6)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Callee function does not exist");
  v7 = *((_QWORD *)v6 + 5);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
  (*(void (**)(_BYTE **__return_ptr, uint64_t))(*(_QWORD *)v7 + 160))(&v70, v7);
  v9 = (v71 - v70) >> 3;
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  if (v8 != v9)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Number of callee function does not match CallDef");
  v72 = 4;
  strcpy((char *)&v70, "call");
  v67 = 0;
  v68 = 0;
  MIL::Builder::BlockBuilder::AddOperation();
  if (v72 < 0)
  {
    operator delete(v70);
    v10 = *(_QWORD *)(a2 + 24);
    if (*(_QWORD *)(a2 + 32) == v10)
      goto LABEL_27;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a2 + 32) != v10)
  {
LABEL_9:
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 32) - v10) >> 3); ++i)
    {
      v12 = (__int128 *)(v10 + 24 * i);
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v13 = *v12;
        v65.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v13;
      }
      v14 = *(_QWORD *)(a2 + 48) + 24 * i;
      if (*(char *)(v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
      }
      else
      {
        v15 = *(_OWORD *)v14;
        v64.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v15;
      }
      MIL::Builder::OperationBuilder::AddInput();
      v16 = v66;
      if (!v66)
        goto LABEL_21;
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_22:
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_26;
          goto LABEL_10;
        }
      }
      else
      {
LABEL_21:
        if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_22;
      }
      operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
LABEL_26:
        operator delete(v65.__r_.__value_.__l.__data_);
LABEL_10:
      v10 = *(_QWORD *)(a2 + 24);
    }
  }
LABEL_27:
  v19 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a2 + 80) != v19)
  {
    v20 = 0;
    while (1)
    {
      v21 = (__int128 *)(v19 + 24 * v20);
      if (*((char *)v21 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
      }
      else
      {
        v22 = *v21;
        v62.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v22;
      }
      (*(void (**)(_BYTE **__return_ptr, uint64_t))(*(_QWORD *)v7 + 160))(&v70, v7);
      MIL::Builder::OperationBuilder::AddOutput();
      v23 = v63;
      if (v63)
      {
        v24 = (unint64_t *)&v63->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
          break;
      }
      v26 = v70;
      if (v70)
        goto LABEL_38;
LABEL_39:
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      ++v20;
      v19 = *(_QWORD *)(a2 + 72);
      if (v20 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 80) - v19) >> 3))
        goto LABEL_43;
    }
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v26 = v70;
    if (!v70)
      goto LABEL_39;
LABEL_38:
    v71 = v26;
    operator delete(v26);
    goto LABEL_39;
  }
LABEL_43:
  MIL::IRTensorValueType::MakeScalar();
  v60 = 7;
  strcpy((char *)__p, "backend");
  v27 = *a4 + 24 * *(_QWORD *)(a2 + 96);
  if (*(char *)(v27 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v27, *(_QWORD *)(v27 + 8));
  }
  else
  {
    v28 = *(_OWORD *)v27;
    v56.__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 16);
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v28;
  }
  MIL::IRTensorValueType::MakeStringValue();
  v57 = v70;
  if (v70)
  {
    v29 = (std::__shared_weak_count *)operator new();
    v30 = (std::__shared_weak_count_vtbl *)v70;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
    v29->__shared_owners_ = 0;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v30;
  }
  else
  {
    v29 = 0;
  }
  v58 = v29;
  v70 = 0;
  MIL::Builder::OperationBuilder::SetAttribute();
  v31 = v61;
  if (v61)
  {
    v32 = (unint64_t *)&v61->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v58;
  if (v58)
  {
    v35 = (unint64_t *)&v58->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v70;
  v70 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if ((v60 & 0x80000000) == 0)
      goto LABEL_63;
  }
  else if ((v60 & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(__p[0]);
LABEL_63:
  v54 = 8;
  strcpy((char *)v53, "function");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v50 = *(std::string *)a2;
  MIL::IRTensorValueType::MakeStringValue();
  v51 = v70;
  if (v70)
  {
    v38 = (std::__shared_weak_count *)operator new();
    v39 = (std::__shared_weak_count_vtbl *)v70;
    v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
    v38->__shared_owners_ = 0;
    v38->__shared_weak_owners_ = 0;
    v38[1].__vftable = v39;
  }
  else
  {
    v38 = 0;
  }
  v52 = v38;
  v70 = 0;
  MIL::Builder::OperationBuilder::SetAttribute();
  v40 = v55;
  if (v55)
  {
    v41 = (unint64_t *)&v55->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v52;
  if (v52)
  {
    v44 = (unint64_t *)&v52->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v70;
  v70 = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v54 & 0x80000000) == 0)
      goto LABEL_85;
LABEL_88:
    operator delete(v53[0]);
    v47 = v69;
    if (!v69)
      return;
    goto LABEL_89;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (v54 < 0)
    goto LABEL_88;
LABEL_85:
  v47 = v69;
  if (!v69)
    return;
LABEL_89:
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
}

void sub_191092CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v55 - 120);
  _Unwind_Resume(a1);
}

void E5Common::Utils::MILDictToCpp<std::string,BOOL>(MIL::IRValue *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::IRDictionaryValue *v3;
  uint64_t v4;
  uint64_t i;
  unsigned __int8 v6;
  void *__p[2];
  char v8;
  void **v9;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(a1);
  v4 = MIL::IRDictionaryValue::begin(v3);
  for (i = MIL::IRDictionaryValue::end(v3); v4 != i; v4 = *(_QWORD *)v4)
  {
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 32));
    v6 = MIL::IRValue::GetScalar<BOOL>();
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 16));
    MIL::IRValue::GetScalar<std::string>();
    v9 = __p;
    std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v9)[40] = v6;
    if (v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_191092F64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191092F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191092F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191092FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void E5Common::Utils::MILDictFromCpp<std::string,BOOL>(uint64_t a1@<X1>, void **a2@<X8>)
{
  uint64_t Scalar;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  void **v20;
  void **v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *__p;
  void **v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  void *v39;
  int64x2_t v40;
  uint64_t v41;
  void *v42[2];
  void *v43[2];
  int v44;
  std::__shared_weak_count_vtbl **v45;
  std::string v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  v4 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRDictionaryValueType::Make();
  *(_OWORD *)v42 = 0u;
  *(_OWORD *)v43 = 0u;
  v44 = 1065353216;
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    v6 = *((unsigned __int8 *)i + 40);
    v39 = operator new(8uLL);
    v40 = vdupq_n_s64(1uLL);
    *(_QWORD *)v39 = v6;
    Espresso::MILUtil::MakeTensorValue<BOOL>(&v41, v4, &v39);
    if (*((char *)i + 39) < 0)
      std::string::__init_copy_ctor_external(&v46, (const std::string::value_type *)i[2], i[3]);
    else
      v46 = *(std::string *)(i + 2);
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v46, 1uLL);
    Espresso::MILUtil::MakeTensorValue<std::string>(&v36, Scalar, &__p);
    v37 = v36;
    if (v36)
    {
      v7 = (std::__shared_weak_count *)operator new();
      v8 = v36;
      v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
      v7->__shared_owners_ = 0;
      v7->__shared_weak_owners_ = 0;
      v7[1].__vftable = v8;
    }
    else
    {
      v7 = 0;
    }
    v38 = v7;
    v36 = 0;
    v45 = &v37;
    v9 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v42, (uint64_t)&v37, (uint64_t)&std::piecewise_construct, (_OWORD **)&v45);
    v10 = v41;
    if (v41)
    {
      v11 = (_QWORD *)operator new();
      v12 = v41;
      *v11 = &unk_1E2DC2BE0;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v12;
      v41 = 0;
      v13 = (std::__shared_weak_count *)v9[5];
      v9[4] = v10;
      v9[5] = v11;
      if (!v13)
        goto LABEL_17;
    }
    else
    {
      v41 = 0;
      v13 = (std::__shared_weak_count *)v9[5];
      v9[4] = 0;
      v9[5] = 0;
      if (!v13)
        goto LABEL_17;
    }
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = v38;
      if (!v38)
        goto LABEL_23;
      goto LABEL_18;
    }
LABEL_17:
    v16 = v38;
    if (!v38)
      goto LABEL_23;
LABEL_18:
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_23:
    v19 = v36;
    v36 = 0;
    if (v19)
      (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
    v20 = (void **)__p;
    if (__p)
    {
      v21 = v35;
      v22 = __p;
      if (v35 != __p)
      {
        do
        {
          if (*((char *)v21 - 1) < 0)
            operator delete(*(v21 - 3));
          v21 -= 3;
        }
        while (v21 != v20);
        v22 = __p;
      }
      v35 = v20;
      operator delete(v22);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v46.__r_.__value_.__l.__data_);
      v23 = v41;
      v41 = 0;
      if (!v23)
        goto LABEL_36;
LABEL_35:
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      goto LABEL_36;
    }
    v23 = v41;
    v41 = 0;
    if (v23)
      goto LABEL_35;
LABEL_36:
    if (v39)
      operator delete(v39);
  }
  MIL::IRDictionaryValueType::MakeValue();
  *a2 = v39;
  v24 = v43[0];
  if (v43[0])
  {
    do
    {
      v26 = v24;
      v24 = (_QWORD *)*v24;
      v27 = (std::__shared_weak_count *)v26[5];
      if (!v27)
        goto LABEL_49;
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        v30 = (std::__shared_weak_count *)v26[3];
        if (v30)
        {
LABEL_50:
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      else
      {
LABEL_49:
        v30 = (std::__shared_weak_count *)v26[3];
        if (v30)
          goto LABEL_50;
      }
      operator delete(v26);
    }
    while (v24);
  }
  v25 = v42[0];
  v42[0] = 0;
  if (v25)
    operator delete(v25);
}

void sub_1910933F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_191093444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x191093450);
}

void std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string> &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *__p[2];
  void *v9;

  v4 = operator new();
  std::unordered_set<std::string>::unordered_set((uint64_t)__p, a1);
  Espresso::MILTranslator::NameGenerator::NameGenerator(v4, __p);
  *a2 = v4;
  v5 = (void **)v9;
  if (v9)
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
}

void sub_191093580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  MEMORY[0x19401CD90](v2, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*,false>(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  BOOL v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  __int128 v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  char *v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  __int128 v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  char *v162;
  _QWORD *v163;
  int64_t v164;
  unint64_t v165;
  uint64_t v166;
  void *v167;
  int64_t v169;
  char v170;
  __int128 *v171;
  uint64_t v172;
  __int128 *v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v171 = (__int128 *)(a2 - 24);
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v73 = *a3;
        *(_QWORD *)&v175 = a2 - 24;
        v74 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v73, (uint64_t)v171, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
        v75 = *a3;
        *(_QWORD *)&v175 = a1;
        if (v74 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v75, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5])
        {
          v76 = *(_OWORD *)a1;
          v176 = *(_QWORD *)(a1 + 16);
          v175 = v76;
          v77 = *v171;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)a1 = v77;
          v78 = v175;
          *(_QWORD *)(a2 - 8) = v176;
          *v171 = v78;
        }
        return;
      case 3uLL:
        return;
      case 4uLL:
        return;
      case 5uLL:
        return;
      default:
        if (v9 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 != a2)
            {
              v79 = a1 + 24;
              if (a1 + 24 != a2)
              {
                v80 = 0;
                v81 = a1;
                do
                {
                  v84 = v79;
                  v85 = *a3;
                  *(_QWORD *)&v175 = v79;
                  v86 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v85, v79, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                  v87 = *a3;
                  *(_QWORD *)&v175 = v81;
                  if (v86 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v87, v81, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5])
                  {
                    v88 = *(_OWORD *)v84;
                    v176 = *(_QWORD *)(v84 + 16);
                    v175 = v88;
                    *(_QWORD *)(v84 + 8) = 0;
                    *(_QWORD *)(v84 + 16) = 0;
                    *(_QWORD *)v84 = 0;
                    v89 = v80;
                    do
                    {
                      v90 = a1 + v89;
                      v91 = (void **)(a1 + v89 + 24);
                      if (*(char *)(a1 + v89 + 47) < 0)
                        operator delete(*v91);
                      *(_OWORD *)v91 = *(_OWORD *)v90;
                      *(_QWORD *)(a1 + v89 + 40) = *(_QWORD *)(v90 + 16);
                      *(_BYTE *)(v90 + 23) = 0;
                      *(_BYTE *)v90 = 0;
                      if (!v89)
                      {
                        v82 = a1;
                        goto LABEL_70;
                      }
                      v92 = *a3;
                      *(_QWORD *)&v177 = &v175;
                      v93 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v92, (uint64_t)&v175, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)[5];
                      v94 = *a3;
                      *(_QWORD *)&v177 = a1 + v89 - 24;
                      v89 -= 24;
                    }
                    while (v93 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v94, v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)[5]);
                    v82 = a1 + v89 + 24;
                    if (*(char *)(v82 + 23) < 0)
                      operator delete(*(void **)v82);
LABEL_70:
                    v83 = v175;
                    *(_QWORD *)(v82 + 16) = v176;
                    *(_OWORD *)v82 = v83;
                  }
                  v79 = v84 + 24;
                  v80 += 24;
                  v81 = v84;
                }
                while (v84 + 24 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v146 = a1 + 24;
            if (a1 + 24 != a2)
            {
              v147 = (char *)(a1 + 47);
              do
              {
                v149 = v146;
                v150 = *a3;
                *(_QWORD *)&v175 = v146;
                v151 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v150, v146, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                v152 = *a3;
                *(_QWORD *)&v175 = a1;
                if (v151 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v152, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5])
                {
                  v153 = *(_OWORD *)v149;
                  v176 = *(_QWORD *)(v149 + 16);
                  v175 = v153;
                  *(_QWORD *)(v149 + 8) = 0;
                  *(_QWORD *)(v149 + 16) = 0;
                  *(_QWORD *)v149 = 0;
                  v154 = v147;
                  do
                  {
                    v155 = v154;
                    v156 = v154 - 23;
                    v157 = v154 - 47;
                    if (*v154 < 0)
                      operator delete(*(void **)v156);
                    *(_OWORD *)v156 = *(_OWORD *)v157;
                    *((_QWORD *)v156 + 2) = *((_QWORD *)v157 + 2);
                    *(v155 - 24) = 0;
                    *(v155 - 47) = 0;
                    v158 = *a3;
                    *(_QWORD *)&v177 = &v175;
                    v159 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v158, (uint64_t)&v175, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)[5];
                    v160 = *a3;
                    *(_QWORD *)&v177 = v155 - 71;
                    v161 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v160, (uint64_t)(v155 - 71), (uint64_t)&std::piecewise_construct, (__int128 **)&v177);
                    v154 = v155 - 24;
                  }
                  while (v159 < v161[5]);
                  v162 = v155 - 47;
                  if (v162[23] < 0)
                    operator delete(*(void **)v162);
                  v148 = v175;
                  *((_QWORD *)v162 + 2) = v176;
                  *(_OWORD *)v162 = v148;
                }
                v146 = v149 + 24;
                v147 += 24;
                a1 = v149;
              }
              while (v149 + 24 != a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v95 = (v10 - 2) >> 1;
            v166 = a1 + 24;
            v169 = v95;
            v172 = a1;
            do
            {
              v97 = v95;
              if (v169 >= v95)
              {
                v98 = (2 * v95) | 1;
                v164 = v95;
                v99 = v166 + 48 * v95;
                v100 = 2 * v95 + 2;
                if (v100 < (uint64_t)v10)
                {
                  v101 = *a3;
                  *(_QWORD *)&v175 = v166 + 48 * v95;
                  v102 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v101, v175, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                  v103 = *a3;
                  *(_QWORD *)&v175 = v99 + 24;
                  if (v102 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v103, v99 + 24, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5])
                  {
                    v99 += 24;
                    v98 = v100;
                  }
                }
                v104 = *a3;
                *(_QWORD *)&v175 = v99;
                v105 = a1 + 24 * v164;
                v106 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v104, v99, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                v107 = *a3;
                *(_QWORD *)&v175 = v105;
                v108 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v107, v105, (uint64_t)&std::piecewise_construct, (__int128 **)&v175);
                v97 = v164;
                if (v106 >= v108[5])
                {
                  v109 = *(_OWORD *)v105;
                  v176 = *(_QWORD *)(v105 + 16);
                  v175 = v109;
                  *(_QWORD *)(v105 + 8) = 0;
                  *(_QWORD *)(v105 + 16) = 0;
                  *(_QWORD *)v105 = 0;
                  while (1)
                  {
                    v110 = v99;
                    if (*(char *)(v105 + 23) < 0)
                      operator delete(*(void **)v105);
                    v111 = *(_OWORD *)v99;
                    *(_QWORD *)(v105 + 16) = *(_QWORD *)(v99 + 16);
                    *(_OWORD *)v105 = v111;
                    *(_BYTE *)(v99 + 23) = 0;
                    *(_BYTE *)v99 = 0;
                    if (v169 < v98)
                      break;
                    v112 = (2 * v98) | 1;
                    v99 = v166 + 48 * v98;
                    v98 = 2 * v98 + 2;
                    if (v98 >= (uint64_t)v10)
                    {
                      v98 = v112;
                    }
                    else
                    {
                      v113 = *a3;
                      *(_QWORD *)&v177 = v99;
                      v114 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v113, v99, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)[5];
                      v115 = *a3;
                      *(_QWORD *)&v177 = v99 + 24;
                      if (v114 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v115, v99 + 24, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)[5])v98 = v112;
                      else
                        v99 += 24;
                    }
                    v116 = *a3;
                    *(_QWORD *)&v177 = v99;
                    v117 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v116, v99, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)[5];
                    v118 = *a3;
                    *(_QWORD *)&v177 = &v175;
                    v105 = v110;
                    a1 = v172;
                    if (v117 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v118, (uint64_t)&v175, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)[5])
                    {
                      if (*(char *)(v110 + 23) < 0)
                        operator delete(*(void **)v110);
                      break;
                    }
                  }
                  v96 = v175;
                  *(_QWORD *)(v110 + 16) = v176;
                  *(_OWORD *)v110 = v96;
                  v97 = v164;
                }
              }
              v95 = v97 - 1;
            }
            while (v97);
            v119 = v9 / 0x18uLL;
            v163 = (_QWORD *)(a1 + 8);
            do
            {
              v122 = a1;
              v123 = 0;
              v165 = a2;
              v167 = *(void **)v122;
              *(_QWORD *)&v177 = *v163;
              *(_QWORD *)((char *)&v177 + 7) = *(_QWORD *)((char *)v163 + 7);
              v170 = *(_BYTE *)(v122 + 23);
              *(_QWORD *)(v122 + 8) = 0;
              *(_QWORD *)(v122 + 16) = 0;
              *(_QWORD *)v122 = 0;
              do
              {
                v125 = v122 + 24 * v123 + 24;
                v126 = 2 * v123;
                v123 = (2 * v123) | 1;
                v127 = v126 + 2;
                if (v126 + 2 < v119)
                {
                  v128 = *a3;
                  *(_QWORD *)&v175 = v125;
                  v129 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v128, v125, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                  v130 = *a3;
                  *(_QWORD *)&v175 = v125 + 24;
                  if (v129 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v130, v125 + 24, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5])
                  {
                    v125 += 24;
                    v123 = v127;
                  }
                }
                if (*(char *)(v122 + 23) < 0)
                  operator delete(*(void **)v122);
                v124 = *(_OWORD *)v125;
                *(_QWORD *)(v122 + 16) = *(_QWORD *)(v125 + 16);
                *(_OWORD *)v122 = v124;
                *(_BYTE *)(v125 + 23) = 0;
                *(_BYTE *)v125 = 0;
                v122 = v125;
              }
              while (v123 <= (uint64_t)((unint64_t)(v119 - 2) >> 1));
              a2 -= 24;
              if (v125 == v165 - 24)
              {
                *(_QWORD *)v125 = v167;
                v120 = *(_QWORD *)((char *)&v177 + 7);
                *(_QWORD *)(v125 + 8) = v177;
                *(_QWORD *)(v125 + 15) = v120;
                *(_BYTE *)(v125 + 23) = v170;
                a1 = v172;
              }
              else
              {
                v131 = *(_OWORD *)(v165 - 24);
                *(_QWORD *)(v125 + 16) = *(_QWORD *)(v165 - 8);
                *(_OWORD *)v125 = v131;
                *(_QWORD *)(v165 - 24) = v167;
                v132 = v177;
                *(_QWORD *)(v165 - 9) = *(_QWORD *)((char *)&v177 + 7);
                *(_QWORD *)(v165 - 16) = v132;
                *(_BYTE *)(v165 - 1) = v170;
                a1 = v172;
                v133 = v125 - v172 + 24;
                if (v133 >= 25)
                {
                  v134 = (v133 / 0x18uLL - 2) >> 1;
                  v135 = v172 + 24 * v134;
                  v136 = *a3;
                  *(_QWORD *)&v175 = v135;
                  v137 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v136, v135, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                  v138 = *a3;
                  *(_QWORD *)&v175 = v125;
                  if (v137 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v138, v125, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5])
                  {
                    v139 = *(_OWORD *)v125;
                    v176 = *(_QWORD *)(v125 + 16);
                    v175 = v139;
                    *(_QWORD *)(v125 + 8) = 0;
                    *(_QWORD *)(v125 + 16) = 0;
                    *(_QWORD *)v125 = 0;
                    while (1)
                    {
                      v140 = v135;
                      if (*(char *)(v125 + 23) < 0)
                        operator delete(*(void **)v125);
                      v141 = *(_OWORD *)v135;
                      *(_QWORD *)(v125 + 16) = *(_QWORD *)(v135 + 16);
                      *(_OWORD *)v125 = v141;
                      *(_BYTE *)(v135 + 23) = 0;
                      *(_BYTE *)v135 = 0;
                      a1 = v172;
                      if (!v134)
                        break;
                      v134 = (v134 - 1) >> 1;
                      v135 = v172 + 24 * v134;
                      v142 = *a3;
                      v174 = (__int128 *)v135;
                      v143 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v142, v135, (uint64_t)&std::piecewise_construct, &v174)[5];
                      v144 = *a3;
                      v174 = &v175;
                      v125 = v140;
                      if (v143 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v144, (uint64_t)&v175, (uint64_t)&std::piecewise_construct, &v174)[5])
                      {
                        a1 = v172;
                        if (*(char *)(v140 + 23) < 0)
                          operator delete(*(void **)v140);
                        break;
                      }
                    }
                    v145 = v175;
                    *(_QWORD *)(v140 + 16) = v176;
                    *(_OWORD *)v140 = v145;
                  }
                }
              }
            }
            while (v119-- > 2);
          }
          return;
        }
        v11 = a1 + 24 * (v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
        }
        else
        {
          v12 = a1 + 24 * (v10 >> 1);
          v13 = *(_OWORD *)a1;
          v176 = *(_QWORD *)(a1 + 16);
          v175 = v13;
          v14 = *(_OWORD *)v11;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v11 + 16);
          *(_OWORD *)a1 = v14;
          v15 = v175;
          *(_QWORD *)(v11 + 16) = v176;
          *(_OWORD *)v11 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v16 = *a3;
          *(_QWORD *)&v175 = a1 - 24;
          v17 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, a1 - 24, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
          v18 = *a3;
          *(_QWORD *)&v175 = a1;
          if (v17 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5])
          {
            v45 = *(_OWORD *)a1;
            v178 = *(_QWORD *)(a1 + 16);
            v177 = v45;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v46 = *a3;
            *(_QWORD *)&v175 = &v177;
            v47 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
            v48 = *a3;
            *(_QWORD *)&v175 = a2 - 24;
            if (v47 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, (uint64_t)v171, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5])
            {
              v52 = a1 + 24;
              do
              {
                v8 = v52;
                if (v52 >= a2)
                  break;
                v53 = *a3;
                *(_QWORD *)&v175 = &v177;
                v54 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v53, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                v55 = *a3;
                *(_QWORD *)&v175 = v8;
                v56 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v55, v8, (uint64_t)&std::piecewise_construct, (__int128 **)&v175);
                v52 = v8 + 24;
              }
              while (v54 >= v56[5]);
            }
            else
            {
              v8 = a1;
              do
              {
                v49 = *a3;
                *(_QWORD *)&v175 = &v177;
                v8 += 24;
                v50 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                v51 = *a3;
                *(_QWORD *)&v175 = v8;
              }
              while (v50 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v51, v8, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5]);
            }
            v57 = a2;
            if (v8 < a2)
            {
              v57 = a2;
              do
              {
                v58 = *a3;
                *(_QWORD *)&v175 = &v177;
                v57 -= 24;
                v59 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v58, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                v60 = *a3;
                *(_QWORD *)&v175 = v57;
              }
              while (v59 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60, v57, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5]);
            }
            while (v8 < v57)
            {
              v61 = *(_OWORD *)v8;
              v176 = *(_QWORD *)(v8 + 16);
              v175 = v61;
              v62 = *(_OWORD *)v57;
              *(_QWORD *)(v8 + 16) = *(_QWORD *)(v57 + 16);
              *(_OWORD *)v8 = v62;
              v63 = v175;
              *(_QWORD *)(v57 + 16) = v176;
              *(_OWORD *)v57 = v63;
              do
              {
                v64 = *a3;
                *(_QWORD *)&v175 = &v177;
                v8 += 24;
                v65 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v64, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                v66 = *a3;
                *(_QWORD *)&v175 = v8;
              }
              while (v65 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v66, v8, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5]);
              do
              {
                v67 = *a3;
                *(_QWORD *)&v175 = &v177;
                v57 -= 24;
                v68 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v67, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
                v69 = *a3;
                *(_QWORD *)&v175 = v57;
              }
              while (v68 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v69, v57, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5]);
            }
            v70 = (__int128 *)(v8 - 24);
            if (v8 - 24 == a1)
            {
              if (*(char *)(v8 - 1) < 0)
                operator delete(*(void **)a1);
            }
            else
            {
              if (*(char *)(a1 + 23) < 0)
                operator delete(*(void **)a1);
              v71 = *v70;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
              *(_OWORD *)a1 = v71;
              *(_BYTE *)(v8 - 1) = 0;
              *(_BYTE *)(v8 - 24) = 0;
            }
            a5 = 0;
            v72 = v177;
            *(_QWORD *)(v8 - 8) = v178;
            *v70 = v72;
            continue;
          }
        }
        v19 = *(_OWORD *)a1;
        v178 = *(_QWORD *)(a1 + 16);
        v177 = v19;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v20 = a1;
        do
        {
          v20 += 24;
          v21 = *a3;
          *(_QWORD *)&v175 = v20;
          v22 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
          v23 = *a3;
          *(_QWORD *)&v175 = &v177;
        }
        while (v22 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5]);
        v24 = a2;
        if (v20 - 24 == a1)
        {
          v24 = a2;
          do
          {
            if (v20 >= v24)
              break;
            v24 -= 24;
            v28 = *a3;
            *(_QWORD *)&v175 = v24;
            v29 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, v24, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
            v30 = *a3;
            *(_QWORD *)&v175 = &v177;
          }
          while (v29 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5]);
        }
        else
        {
          do
          {
            v24 -= 24;
            v25 = *a3;
            *(_QWORD *)&v175 = v24;
            v26 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, v24, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
            v27 = *a3;
            *(_QWORD *)&v175 = &v177;
          }
          while (v26 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5]);
        }
        v8 = v20;
        if (v20 < v24)
        {
          v31 = v24;
          do
          {
            v175 = *(_OWORD *)v8;
            v32 = v175;
            v176 = *(_QWORD *)(v8 + 16);
            v33 = v176;
            v34 = *(_QWORD *)(v31 + 16);
            *(_OWORD *)v8 = *(_OWORD *)v31;
            *(_QWORD *)(v8 + 16) = v34;
            *(_QWORD *)(v31 + 16) = v33;
            *(_OWORD *)v31 = v32;
            do
            {
              v8 += 24;
              v35 = *a3;
              *(_QWORD *)&v175 = v8;
              v36 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, v8, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
              v37 = *a3;
              *(_QWORD *)&v175 = &v177;
            }
            while (v36 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5]);
            do
            {
              v31 -= 24;
              v38 = *a3;
              *(_QWORD *)&v175 = v31;
              v39 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, v31, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5];
              v40 = *a3;
              *(_QWORD *)&v175 = &v177;
            }
            while (v39 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, (uint64_t)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)[5]);
          }
          while (v8 < v31);
        }
        v41 = (__int128 *)(v8 - 24);
        if (v8 - 24 == a1)
        {
          if (*(char *)(v8 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v42 = *v41;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v42;
          *(_BYTE *)(v8 - 1) = 0;
          *(_BYTE *)(v8 - 24) = 0;
        }
        v43 = v177;
        *(_QWORD *)(v8 - 8) = v178;
        *v41 = v43;
        if (v20 < v24)
        {
LABEL_34:
          a5 = 0;
          continue;
        }
        {
          if (v44)
            continue;
          goto LABEL_34;
        }
        a2 = v8 - 24;
        if (!v44)
          goto LABEL_2;
        return;
    }
  }
}

void sub_1910945F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 result;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36[5];

  v12 = *a6;
  v36[0] = (__int128 *)a5;
  v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a5, (uint64_t)&std::piecewise_construct, v36)[5];
  v14 = *a6;
  v36[0] = (__int128 *)a4;
  if (v13 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, a4, (uint64_t)&std::piecewise_construct, v36)[5])
  {
    v16 = *(_QWORD *)(a4 + 16);
    v17 = *(_OWORD *)a4;
    v18 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v18;
    *(_OWORD *)a5 = v17;
    *(_QWORD *)(a5 + 16) = v16;
    v19 = *a6;
    v36[0] = (__int128 *)a4;
    v20 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, a4, (uint64_t)&std::piecewise_construct, v36)[5];
    v21 = *a6;
    v36[0] = (__int128 *)a3;
    if (v20 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, a3, (uint64_t)&std::piecewise_construct, v36)[5])
    {
      v22 = *(_QWORD *)(a3 + 16);
      v23 = *(_OWORD *)a3;
      v24 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v24;
      *(_OWORD *)a4 = v23;
      *(_QWORD *)(a4 + 16) = v22;
      v25 = *a6;
      v36[0] = (__int128 *)a3;
      v26 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, a3, (uint64_t)&std::piecewise_construct, v36)[5];
      v27 = *a6;
      v36[0] = (__int128 *)a2;
      if (v26 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, a2, (uint64_t)&std::piecewise_construct, v36)[5])
      {
        v28 = *(_QWORD *)(a2 + 16);
        v29 = *(_OWORD *)a2;
        v30 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v30;
        *(_OWORD *)a3 = v29;
        *(_QWORD *)(a3 + 16) = v28;
        v31 = *a6;
        v36[0] = (__int128 *)a2;
        v32 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, a2, (uint64_t)&std::piecewise_construct, v36)[5];
        v33 = *a6;
        v36[0] = (__int128 *)a1;
        if (v32 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, a1, (uint64_t)&std::piecewise_construct, v36)[5])
        {
          v34 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v35 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v35;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v34;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *result;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37[5];

  v8 = *a4;
  v37[0] = (__int128 *)a2;
  v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, v37)[5];
  v10 = *a4;
  v37[0] = (__int128 *)a1;
  v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, a1, (uint64_t)&std::piecewise_construct, v37)[5];
  v12 = *a4;
  if (v9 >= v11)
  {
    v37[0] = (__int128 *)a3;
    v19 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a3, (uint64_t)&std::piecewise_construct, v37)[5];
    v20 = *a4;
    v37[0] = (__int128 *)a2;
    result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, a2, (uint64_t)&std::piecewise_construct, v37);
    if (v19 < result[5])
    {
      v21 = *(_QWORD *)(a2 + 16);
      v22 = *(_OWORD *)a2;
      v23 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v23;
      *(_OWORD *)a3 = v22;
      *(_QWORD *)(a3 + 16) = v21;
      v24 = *a4;
      v37[0] = (__int128 *)a2;
      v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, v37)[5];
      v26 = *a4;
      v37[0] = (__int128 *)a1;
      result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, a1, (uint64_t)&std::piecewise_construct, v37);
      if (v25 < result[5])
      {
        v27 = *(_QWORD *)(a1 + 16);
        v28 = *(_OWORD *)a1;
        v29 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v29;
        *(_OWORD *)a2 = v28;
        *(_QWORD *)(a2 + 16) = v27;
      }
    }
  }
  else
  {
    v37[0] = (__int128 *)a3;
    v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a3, (uint64_t)&std::piecewise_construct, v37)[5];
    v14 = *a4;
    v37[0] = (__int128 *)a2;
    result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, a2, (uint64_t)&std::piecewise_construct, v37);
    if (v13 < result[5])
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = *(_OWORD *)a1;
      v18 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)(a1 + 16) = v18;
LABEL_10:
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v16;
      return result;
    }
    v30 = *(_QWORD *)(a1 + 16);
    v31 = *(_OWORD *)a1;
    v32 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v32;
    *(_OWORD *)a2 = v31;
    *(_QWORD *)(a2 + 16) = v30;
    v33 = *a4;
    v37[0] = (__int128 *)a3;
    v34 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, a3, (uint64_t)&std::piecewise_construct, v37)[5];
    v35 = *a4;
    v37[0] = (__int128 *)a2;
    result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, a2, (uint64_t)&std::piecewise_construct, v37);
    if (v34 < result[5])
    {
      v16 = *(_QWORD *)(a2 + 16);
      v17 = *(_OWORD *)a2;
      v36 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v36;
      goto LABEL_10;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v6;
  _BOOL8 result;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 *v32;

  v4 = a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (_OWORD *)(a2 - 24);
      v9 = *a3;
      *(_QWORD *)&v30 = a2 - 24;
      v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, a2 - 24, (uint64_t)&std::piecewise_construct, (__int128 **)&v30)[5];
      v11 = *a3;
      *(_QWORD *)&v30 = a1;
      if (v10 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v30)[5])
      {
        v12 = *(_QWORD *)(a1 + 16);
        v13 = *(_OWORD *)a1;
        v14 = *(_QWORD *)(v4 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v14;
        *v8 = v13;
        *(_QWORD *)(v4 - 8) = v12;
      }
      return 1;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      return 1;
    default:
      v15 = a1 + 48;
      v16 = a1 + 72;
      if (a1 + 72 == v4)
        return 1;
      v17 = 0;
      v18 = 0;
      v29 = v4;
      break;
  }
  while (1)
  {
    v20 = *a3;
    *(_QWORD *)&v30 = v16;
    v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v16, (uint64_t)&std::piecewise_construct, (__int128 **)&v30)[5];
    v22 = *a3;
    *(_QWORD *)&v30 = v15;
    if (v21 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, v15, (uint64_t)&std::piecewise_construct, (__int128 **)&v30)[5])
    {
      v30 = *(_OWORD *)v16;
      v31 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)v16 = 0;
      v23 = v17;
      do
      {
        v24 = a1 + v23;
        v25 = (void **)(a1 + v23 + 72);
        if (*(char *)(a1 + v23 + 95) < 0)
          operator delete(*v25);
        *(_OWORD *)v25 = *(_OWORD *)(v24 + 48);
        *(_QWORD *)(a1 + v23 + 88) = *(_QWORD *)(v24 + 64);
        *(_BYTE *)(v24 + 71) = 0;
        *(_BYTE *)(v24 + 48) = 0;
        if (v23 == -48)
        {
          v19 = a1;
          goto LABEL_7;
        }
        v26 = *a3;
        v32 = &v30;
        v27 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (uint64_t)&v30, (uint64_t)&std::piecewise_construct, &v32)[5];
        v28 = *a3;
        v32 = (__int128 *)(a1 + v23 + 24);
        v23 -= 24;
      }
      while (v27 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (uint64_t)v32, (uint64_t)&std::piecewise_construct, &v32)[5]);
      v19 = a1 + v23 + 72;
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
LABEL_7:
      v4 = v29;
      *(_OWORD *)v19 = v30;
      *(_QWORD *)(v19 + 16) = v31;
      if (++v18 == 8)
        return v16 + 24 == v29;
    }
    v15 = v16;
    v17 += 24;
    v16 += 24;
    if (v16 == v4)
      return 1;
  }
}

void sub_191094DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28[5];

  v10 = *a5;
  v28[0] = (__int128 *)a4;
  v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, a4, (uint64_t)&std::piecewise_construct, v28)[5];
  v12 = *a5;
  v28[0] = (__int128 *)a3;
  if (v11 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a3, (uint64_t)&std::piecewise_construct, v28)[5])
  {
    v14 = *(_QWORD *)(a3 + 16);
    v15 = *(_OWORD *)a3;
    v16 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v16;
    *(_OWORD *)a4 = v15;
    *(_QWORD *)(a4 + 16) = v14;
    v17 = *a5;
    v28[0] = (__int128 *)a3;
    v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, a3, (uint64_t)&std::piecewise_construct, v28)[5];
    v19 = *a5;
    v28[0] = (__int128 *)a2;
    if (v18 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, a2, (uint64_t)&std::piecewise_construct, v28)[5])
    {
      v20 = *(_QWORD *)(a2 + 16);
      v21 = *(_OWORD *)a2;
      v22 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v22;
      *(_OWORD *)a3 = v21;
      *(_QWORD *)(a3 + 16) = v20;
      v23 = *a5;
      v28[0] = (__int128 *)a2;
      v24 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, a2, (uint64_t)&std::piecewise_construct, v28)[5];
      v25 = *a5;
      v28[0] = (__int128 *)a1;
      if (v24 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, a1, (uint64_t)&std::piecewise_construct, v28)[5])
      {
        v26 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v27 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v27;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v26;
      }
    }
  }
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_191095508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_191095524(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_191095538(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_191095550(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void Espresso::AOT::SegmentsLowerer::CallDef::~CallDef(Espresso::AOT::SegmentsLowerer::CallDef *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *((_QWORD *)this + 10);
    v4 = (void *)*((_QWORD *)this + 9);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = *((_QWORD *)this + 7);
    v7 = (void *)*((_QWORD *)this + 6);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v5;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void **std::pair<std::vector<Espresso::AOT::SegmentsLowerer::CallDef>,std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>>::~pair(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;
  char *v10;
  char *v11;
  void *v12;

  v2 = (void **)a1[3];
  if (v2)
  {
    v3 = (void **)a1[4];
    v4 = a1[3];
    if (v3 == v2)
    {
LABEL_17:
      a1[4] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    v5 = (void **)a1[4];
    while (1)
    {
      v8 = (void **)*(v5 - 3);
      v5 -= 3;
      v7 = v8;
      if (!v8)
        goto LABEL_6;
      v9 = (void **)*(v3 - 2);
      v6 = v7;
      if (v9 != v7)
        break;
LABEL_5:
      *(v3 - 2) = v7;
      operator delete(v6);
LABEL_6:
      v3 = v5;
      if (v5 == v2)
      {
        v4 = a1[3];
        goto LABEL_17;
      }
    }
    while (1)
    {
      if (*((char *)v9 - 9) < 0)
      {
        operator delete(*(v9 - 4));
        if (*((char *)v9 - 33) < 0)
LABEL_15:
          operator delete(*(v9 - 7));
      }
      else if (*((char *)v9 - 33) < 0)
      {
        goto LABEL_15;
      }
      v9 -= 9;
      if (v9 == v7)
      {
        v6 = *v5;
        goto LABEL_5;
      }
    }
  }
LABEL_18:
  v10 = (char *)*a1;
  if (*a1)
  {
    v11 = (char *)a1[1];
    v12 = *a1;
    if (v11 != v10)
    {
      do
        Espresso::AOT::SegmentsLowerer::CallDef::~CallDef((Espresso::AOT::SegmentsLowerer::CallDef *)(v11 - 104));
      while (v11 != v10);
      v12 = *a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

Espresso::MILTranslator::NameGenerator *std::__shared_ptr_pointer<Espresso::MILTranslator::NameGenerator  *>::__on_zero_shared(uint64_t a1)
{
  Espresso::MILTranslator::NameGenerator *result;

  result = *(Espresso::MILTranslator::NameGenerator **)(a1 + 24);
  if (result)
  {
    Espresso::MILTranslator::NameGenerator::~NameGenerator(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<Espresso::MILTranslator::NameGenerator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A86F12)
    return a1 + 24;
  if (((v3 & 0x8000000191A86F12 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A86F12))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A86F12 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 72)
  {
    v6 = *(_QWORD *)(i - 24);
    if (v6)
    {
      v7 = *(_QWORD *)(i - 16);
      v8 = *(void **)(i - 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)(v7 - 24));
          v7 -= 24;
        }
        while (v7 != v6);
        v8 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v6;
      operator delete(v8);
    }
    v9 = *(_QWORD *)(i - 48);
    if (v9)
    {
      v10 = *(_QWORD *)(i - 40);
      v5 = *(void **)(i - 48);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)(v10 - 24));
          v10 -= 24;
        }
        while (v10 != v9);
        v5 = *(void **)(i - 48);
      }
      *(_QWORD *)(i - 40) = v9;
      operator delete(v5);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = *(_QWORD *)(a2 + 48);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 56);
    v5 = *(void **)(a2 + 48);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(a2 + 48);
    }
    *(_QWORD *)(a2 + 56) = v3;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(void **)(a2 + 24);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = *(void **)(a2 + 24);
    }
    *(_QWORD *)(a2 + 32) = v6;
    operator delete(v8);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRFunction>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  float v29;
  float v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[3];

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRFunction>>(a1, v12, a3, a4, (uint64_t)v43);
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v13 || (float)(v30 * (float)v13) < v29)
  {
    v32 = 1;
    if (v13 >= 3)
      v32 = (v13 & (v13 - 1)) != 0;
    v33 = v32 | (2 * v13);
    v34 = vcvtps_u32_f32(v29 / v30);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v40 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        if (v31)
          goto LABEL_54;
      }
      else
      {
        v4 = v12;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        if (v31)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v40 & v12;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v12));
      if (v31)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v43[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v43[0])
    {
      v41 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v41 >= v13)
          v41 %= v13;
      }
      else
      {
        v41 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_89;
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v31)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v43[0] = *v31;
  *v31 = v43[0];
LABEL_89:
  v16 = (uint64_t *)v43[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_191095F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRFunction>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x38uLL);
  v11 = v10;
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v10 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v10 + 4) = *(_QWORD *)(a3 + 16);
  }
  v12 = *a4;
  *((_QWORD *)v11 + 5) = *a4;
  if (v12)
  {
    result = (_QWORD *)operator new();
    v14 = *a4;
    *result = &unk_1E2DC2E10;
    result[1] = 0;
    result[2] = 0;
    result[3] = v14;
  }
  else
  {
    result = 0;
  }
  *((_QWORD *)v11 + 6) = result;
  *a4 = 0;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_191096014(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191096028(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentDef>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  void *__p;
  int64x2_t v24;
  uint64_t v25;
  int64x2_t *v26;

  v3 = a1->i64[1] - a1->i64[0];
  v4 = 0x8E38E38E38E38E39 * (v3 >> 3) + 1;
  if (v4 > 0x38E38E38E38E38ELL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7)
    v5 = 0x38E38E38E38E38ELL;
  else
    v5 = v4;
  v25 = 0;
  v26 = a1 + 1;
  if (v5 > 0x38E38E38E38E38ELL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 72 * v5;
  v8 = (char *)operator new(72 * v5);
  v9 = &v8[8 * (v3 >> 3)];
  v24.i64[1] = (uint64_t)v9;
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  v10 = &v8[v3];
  v11 = *(_OWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = v12;
  *(_OWORD *)(v10 + 24) = v11;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *((_QWORD *)v10 + 7) = 0;
  *((_QWORD *)v10 + 8) = 0;
  *((_OWORD *)v10 + 3) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v10 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v13 = v9 + 72;
  v15 = a1->i64[0];
  v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    v20 = vdupq_n_s64(v14);
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = v14 + v16;
      v19 = *(_QWORD *)(v14 + v16 - 56);
      *(_OWORD *)(v17 - 72) = *(_OWORD *)(v14 + v16 - 72);
      *((_QWORD *)v17 - 7) = v19;
      *((_QWORD *)v17 - 6) = 0;
      *((_QWORD *)v17 - 5) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_OWORD *)v17 - 3) = *(_OWORD *)(v14 + v16 - 48);
      *((_QWORD *)v17 - 4) = *(_QWORD *)(v14 + v16 - 32);
      *(_QWORD *)(v18 - 48) = 0;
      *(_QWORD *)(v18 - 40) = 0;
      *(_QWORD *)(v18 - 32) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *((_QWORD *)v17 - 2) = 0;
      *((_QWORD *)v17 - 1) = 0;
      *(_OWORD *)(v17 - 24) = *(_OWORD *)(v14 + v16 - 24);
      *((_QWORD *)v17 - 1) = *(_QWORD *)(v14 + v16 - 8);
      *(_QWORD *)(v18 - 24) = 0;
      *(_QWORD *)(v18 - 16) = 0;
      *(_QWORD *)(v18 - 8) = 0;
      v16 -= 72;
    }
    while (v14 + v16 != v15);
    v9 += v16;
    v20 = *a1;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v13;
  v24 = v20;
  v21 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v8[v7];
  v25 = v21;
  __p = (void *)v20.i64[0];
  std::__split_buffer<Espresso::AOT::SegmentsLowerer::SegmentDef>::__destruct_at_end[abi:ne180100]((uint64_t)&__p, v20.i64[0]);
  if (__p)
    operator delete(__p);
  return v13;
}

void std::__split_buffer<Espresso::AOT::SegmentsLowerer::SegmentDef>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    v6 = *(_QWORD *)(i - 24);
    if (v6)
    {
      v7 = *(_QWORD *)(i - 16);
      v8 = *(void **)(i - 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)(v7 - 24));
          v7 -= 24;
        }
        while (v7 != v6);
        v8 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v6;
      operator delete(v8);
    }
    v9 = *(_QWORD *)(i - 48);
    if (v9)
    {
      v10 = *(_QWORD *)(i - 40);
      v5 = *(void **)(i - 48);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)(v10 - 24));
          v10 -= 24;
        }
        while (v10 != v9);
        v5 = *(void **)(i - 48);
      }
      *(_QWORD *)(i - 40) = v9;
      operator delete(v5);
    }
  }
}

char *std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;

  v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 4) + 1;
  if (v4 > 0x333333333333333)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  else
    v5 = v4;
  if (v5 > 0x333333333333333)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 80 * v5;
  v8 = (char *)operator new(80 * v5);
  v9 = &v8[16 * (v3 >> 4)];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v11 = &v8[v3];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 64) = 0;
  *((_QWORD *)v11 + 8) = v12;
  *((_QWORD *)v11 + 9) = v13;
  v14 = v9 + 80;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v10;
    if (!v16)
      return v14;
    goto LABEL_15;
  }
  v17 = 0;
  do
  {
    v18 = &v9[v17];
    v19 = &v16[v17];
    v20 = *(_OWORD *)&v16[v17 - 80];
    *((_QWORD *)v18 - 8) = *(_QWORD *)&v16[v17 - 64];
    *((_OWORD *)v18 - 5) = v20;
    *((_QWORD *)v19 - 9) = 0;
    *((_QWORD *)v19 - 8) = 0;
    *((_QWORD *)v19 - 10) = 0;
    *(_OWORD *)(v18 - 56) = *(_OWORD *)&v16[v17 - 56];
    *((_QWORD *)v18 - 5) = *(_QWORD *)&v16[v17 - 40];
    *((_QWORD *)v19 - 7) = 0;
    *((_QWORD *)v19 - 6) = 0;
    *((_QWORD *)v19 - 5) = 0;
    *((_OWORD *)v18 - 2) = *(_OWORD *)&v16[v17 - 32];
    v21 = *(_QWORD *)&v16[v17 - 8];
    *((_QWORD *)v18 - 2) = *(_QWORD *)&v16[v17 - 16];
    *((_QWORD *)v19 - 4) = 0;
    *((_QWORD *)v19 - 3) = 0;
    *((_QWORD *)v19 - 2) = 0;
    *((_QWORD *)v18 - 1) = v21;
    v17 -= 80;
  }
  while (&v16[v17] != v15);
  v22 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = &v9[v17];
  a1[1] = v14;
  a1[2] = v10;
  if (v16 != v22)
  {
    do
    {
      v16 -= 80;
      std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)v16);
    }
    while (v16 != v22);
    v16 = v22;
  }
  if (v16)
LABEL_15:
    operator delete(v16);
  return v14;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = (std::string *)(v28 + 2);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[6] = 0;
  v28[7] = 0;
  v28[5] = v28 + 6;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_191096938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19109694C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2 + 40, *(_QWORD **)(v2 + 48));
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__emplace_back_slow_path<std::unordered_set<std::string>,std::unordered_set<std::string>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *i;
  char *v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t *v30;

  v4 = a1[1] - *a1;
  v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 4) + 1;
  if (v5 > 0x333333333333333)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v8 = 0x333333333333333;
  else
    v8 = v5;
  v30 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(80 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[16 * (v4 >> 4)];
  __p = v9;
  v27 = v10;
  v28 = v10;
  v29 = &v9[80 * v8];
  v11 = *a2;
  v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)v10 = v11;
  *((_QWORD *)v10 + 1) = v12;
  v13 = a2[2];
  *((_QWORD *)v10 + 2) = v13;
  v14 = a2[3];
  *((_QWORD *)v10 + 3) = v14;
  *((_DWORD *)v10 + 8) = *((_DWORD *)a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v10 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  v16 = *a3;
  v17 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v18 = a3[2];
  *(_QWORD *)&v9[v4 + 56] = v18;
  v19 = (uint64_t)&v9[v4 + 56];
  *(_QWORD *)(v19 - 16) = v16;
  *(_QWORD *)(v19 - 8) = v17;
  v20 = a3[3];
  *(_QWORD *)(v19 + 8) = v20;
  *(_DWORD *)(v19 + 16) = *((_DWORD *)a3 + 8);
  if (v20)
  {
    v21 = *(_QWORD *)(v18 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v21 >= v17)
        v21 %= v17;
    }
    else
    {
      v21 &= v17 - 1;
    }
    *(_QWORD *)(v16 + 8 * v21) = v19;
    a3[2] = 0;
    a3[3] = 0;
  }
  v28 = v10 + 80;
  std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__swap_out_circular_buffer(a1, &__p);
  v22 = a1[1];
  v24 = v27;
  for (i = v28; v28 != v24; i = v28)
  {
    v28 = i - 80;
    std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100]((uint64_t)v30, (uint64_t)(i - 80));
  }
  if (__p)
    operator delete(__p);
  return v22;
}

void sub_191096BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v7 = v4 + v5;
      v8 = v2 + v5;
      v9 = *(_QWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v8 - 80) = 0;
      *(_QWORD *)(v7 - 80) = v9;
      *(_QWORD *)(v7 - 72) = *(_QWORD *)(v2 + v5 - 72);
      *(_QWORD *)(v8 - 72) = 0;
      v10 = *(_QWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v4 + v5 - 64) = v10;
      v11 = *(_QWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v7 - 56) = v11;
      *(_DWORD *)(v7 - 48) = *(_DWORD *)(v2 + v5 - 48);
      if (v11)
      {
        v12 = *(_QWORD *)(v10 + 8);
        v13 = *(_QWORD *)(v7 - 72);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13)
            v12 %= v13;
        }
        else
        {
          v12 &= v13 - 1;
        }
        *(_QWORD *)(v9 + 8 * v12) = v4 + v5 - 64;
        *(_QWORD *)(v2 + v5 - 64) = 0;
        *(_QWORD *)(v2 + v5 - 56) = 0;
      }
      v14 = *(_QWORD *)(v8 - 40);
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v7 - 40) = v14;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(v8 - 32);
      *(_QWORD *)(v8 - 32) = 0;
      v17 = *(_QWORD *)(v8 - 24);
      v15 = v8 - 24;
      v16 = v17;
      *(_QWORD *)(v7 - 24) = v17;
      v18 = v7 - 24;
      v19 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)(v7 - 16) = v19;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v15 + 16);
      if (v19)
      {
        v6 = *(_QWORD *)(v16 + 8);
        v20 = *(_QWORD *)(v7 - 32);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v6 >= v20)
            v6 %= v20;
        }
        else
        {
          v6 &= v20 - 1;
        }
        *(_QWORD *)(v14 + 8 * v6) = v18;
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
      }
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v21 = *result;
  *result = v4;
  a2[1] = v21;
  v22 = result[1];
  result[1] = a2[2];
  a2[2] = v22;
  v23 = result[2];
  result[2] = a2[3];
  a2[3] = v23;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 80;
    std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100](v4, i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;

  v3 = *(void ***)(a2 + 56);
  if (v3)
  {
    do
    {
      v7 = (void **)*v3;
      if (*((char *)v3 + 39) < 0)
        operator delete(v3[2]);
      operator delete(v3);
      v3 = v7;
    }
    while (v7);
  }
  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void ***)(a2 + 16);
  if (v5)
  {
    do
    {
      v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v8;
    }
    while (v8);
  }
  v6 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  if (v6)
    operator delete(v6);
}

uint64_t std::unordered_map<unsigned long,std::set<unsigned long>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::set<unsigned long>> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_191096F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_191096F38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::set<unsigned long>> const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (result[2] == v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v28 = operator new(0x30uLL);
  *v28 = 0;
  v28[1] = v6;
  v13 = (_QWORD *)a3[1];
  v28[2] = *a3;
  v28[5] = 0;
  v28[4] = 0;
  v28[3] = v28 + 4;
  std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(v28 + 3, v13, a3 + 2);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      v17 = v28;
      if (v16)
        goto LABEL_26;
    }
LABEL_50:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v28)
    {
      v27 = *(_QWORD *)(*v28 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v27 >= v7)
          v27 %= v7;
      }
      else
      {
        v27 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v28;
    }
    goto LABEL_61;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v17 = v28;
  if (!v16)
    goto LABEL_50;
LABEL_26:
  *v17 = *v16;
  *v16 = v28;
LABEL_61:
  result = v28;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_1910972A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1910972B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD **v3;
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2, *v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v2 + 3), v2[4]);
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = std::__tree<unsigned long>::__find_equal<unsigned long>(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *v10 = v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = v11;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

_QWORD *std::__tree<unsigned long>::__find_equal<unsigned long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[5] = 0;
  v11[4] = 0;
  v11[2] = v15;
  v11[3] = v11 + 4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1910978FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_QWORD *)v11 + 2) == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x38uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(_QWORD *)v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*(_QWORD *)v11)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_191097C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__deallocate_node(int a1, char *__p)
{
  char *v2;
  char *v3;
  void **v4;
  void *v5;
  void **v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)*((_QWORD *)v2 + 7);
      if (v4)
      {
        do
        {
          v6 = (void **)*v4;
          if (*((char *)v4 + 47) < 0)
            operator delete(v4[3]);
          operator delete(v4);
          v4 = v6;
        }
        while (v6);
      }
      v5 = (void *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v5)
        operator delete(v5);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void *v4;
  void **v5;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
      goto LABEL_7;
    v3 = *(void ***)(v2 + 56);
    if (v3)
    {
      do
      {
        v5 = (void **)*v3;
        if (*((char *)v3 + 47) < 0)
          operator delete(v3[3]);
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v4)
      operator delete(v4);
    if (*(char *)(v2 + 39) < 0)
    {
      operator delete(*(void **)(v2 + 16));
      operator delete((void *)v2);
    }
    else
    {
LABEL_7:
      operator delete((void *)v2);
    }
  }
}

char *std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>::__push_back_slow_path<Espresso::AOT::SegmentsLowerer::TransferDef>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;

  v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  v4 = 0x8E38E38E38E38E39 * (v3 >> 3) + 1;
  if (v4 > 0x38E38E38E38E38ELL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x1C71C71C71C71C7)
    v5 = 0x38E38E38E38E38ELL;
  else
    v5 = v4;
  if (v5 > 0x38E38E38E38E38ELL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 72 * v5;
  v8 = (char *)operator new(72 * v5);
  v9 = *(_OWORD *)(a2 + 16);
  v10 = &v8[8 * (v3 >> 3)];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  v11 = &v8[v7];
  v12 = &v8[v3];
  *((_QWORD *)v12 + 4) = *(_QWORD *)(a2 + 32);
  *((_OWORD *)v12 + 1) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v13 = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *((_QWORD *)v12 + 7) = v13;
  *((_QWORD *)v12 + 8) = v14;
  v15 = v10 + 72;
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v10;
    a1[1] = v15;
    a1[2] = v11;
    if (!v17)
      return v15;
    goto LABEL_20;
  }
  do
  {
    *(_OWORD *)(v10 - 72) = *(_OWORD *)(v17 - 72);
    v18 = *(_OWORD *)(v17 - 56);
    *((_QWORD *)v10 - 5) = *((_QWORD *)v17 - 5);
    *(_OWORD *)(v10 - 56) = v18;
    *((_QWORD *)v17 - 6) = 0;
    *((_QWORD *)v17 - 5) = 0;
    *((_QWORD *)v17 - 7) = 0;
    v19 = *((_OWORD *)v17 - 2);
    *((_QWORD *)v10 - 2) = *((_QWORD *)v17 - 2);
    *((_OWORD *)v10 - 2) = v19;
    *((_QWORD *)v17 - 3) = 0;
    *((_QWORD *)v17 - 2) = 0;
    *((_QWORD *)v17 - 4) = 0;
    *((_QWORD *)v10 - 1) = *((_QWORD *)v17 - 1);
    v10 -= 72;
    v17 -= 72;
  }
  while (v17 != v16);
  v20 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v15;
  a1[2] = v11;
  if (v17 != v20)
  {
    while (1)
    {
      if (*(v17 - 9) < 0)
      {
        operator delete(*((void **)v17 - 4));
        if (*(v17 - 33) < 0)
LABEL_17:
          operator delete(*((void **)v17 - 7));
      }
      else if (*(v17 - 33) < 0)
      {
        goto LABEL_17;
      }
      v17 -= 72;
      if (v17 == v20)
      {
        v17 = v20;
        break;
      }
    }
  }
  if (v17)
LABEL_20:
    operator delete(v17);
  return v15;
}

char *std::vector<Espresso::AOT::SegmentsLowerer::CallDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::CallDef>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;

  v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  v4 = 0x4EC4EC4EC4EC4EC5 * (v3 >> 3) + 1;
  if (v4 > 0x276276276276276)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v5 = 0x276276276276276;
  else
    v5 = v4;
  if (v5 > 0x276276276276276)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 104 * v5;
  v8 = (char *)operator new(104 * v5);
  v9 = &v8[8 * (v3 >> 3)];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v11 = &v8[v3];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *((_QWORD *)v11 + 10) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *((_QWORD *)v11 + 11) = v12;
  *((_QWORD *)v11 + 12) = v13;
  v14 = v9 + 104;
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v10;
    if (!v15)
      return v14;
    goto LABEL_15;
  }
  v17 = 0;
  do
  {
    v18 = &v9[v17];
    v19 = &v15[v17];
    v20 = *(_OWORD *)&v15[v17 - 104];
    *((_QWORD *)v18 - 11) = *(_QWORD *)&v15[v17 - 88];
    *(_OWORD *)(v18 - 104) = v20;
    *((_QWORD *)v19 - 12) = 0;
    *((_QWORD *)v19 - 11) = 0;
    *((_QWORD *)v19 - 13) = 0;
    *((_OWORD *)v18 - 5) = *(_OWORD *)&v15[v17 - 80];
    *((_QWORD *)v18 - 8) = *(_QWORD *)&v15[v17 - 64];
    *((_QWORD *)v19 - 10) = 0;
    *((_QWORD *)v19 - 9) = 0;
    v21 = *(_OWORD *)&v15[v17 - 56];
    *((_QWORD *)v19 - 8) = 0;
    *(_OWORD *)(v18 - 56) = v21;
    *((_QWORD *)v18 - 5) = *(_QWORD *)&v15[v17 - 40];
    *((_QWORD *)v19 - 7) = 0;
    *((_QWORD *)v19 - 6) = 0;
    *((_QWORD *)v19 - 5) = 0;
    *((_OWORD *)v18 - 2) = *(_OWORD *)&v15[v17 - 32];
    v22 = *(_QWORD *)&v15[v17 - 8];
    *((_QWORD *)v18 - 2) = *(_QWORD *)&v15[v17 - 16];
    *((_QWORD *)v19 - 4) = 0;
    *((_QWORD *)v19 - 3) = 0;
    *((_QWORD *)v19 - 2) = 0;
    *((_QWORD *)v18 - 1) = v22;
    v17 -= 104;
  }
  while (&v15[v17] != v16);
  v23 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = &v9[v17];
  a1[1] = v14;
  a1[2] = v10;
  if (v15 != v23)
  {
    do
      Espresso::AOT::SegmentsLowerer::CallDef::~CallDef((Espresso::AOT::SegmentsLowerer::CallDef *)(v15 - 104));
    while (v15 != v23);
    v15 = v23;
  }
  if (v15)
LABEL_15:
    operator delete(v15);
  return v14;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  __int128 *v29;
  __int128 v30;
  float v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  int8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v46[2];
  char v47;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = *((_QWORD *)v15 + 1);
            if (v23 == v11)
            {
              v24 = v15[39];
              if ((v24 & 0x80u) == 0)
                v25 = v15[39];
              else
                v25 = *((_QWORD *)v15 + 3);
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 16);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 16);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x30uLL);
  v46[0] = v15;
  v46[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v29 = *a4;
  v30 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v30;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *(_QWORD *)v29 = 0;
  v15[40] = 0;
  v47 = 1;
  v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v32 = *(float *)(a1 + 32);
  if (v12 && (float)(v32 * (float)v12) >= v31)
  {
    v33 = *(_QWORD *)a1;
    v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v34)
    {
LABEL_54:
      *(_QWORD *)v15 = *v34;
LABEL_89:
      *v34 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v35 = 1;
    if (v12 >= 3)
      v35 = (v12 & (v12 - 1)) != 0;
    v36 = v35 | (2 * v12);
    v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37)
      prime = v37;
    else
      prime = v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v39)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v39)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v39 < 3uLL || (v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < *(_QWORD *)&v39)
LABEL_65:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v43 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v33 = *(_QWORD *)a1;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v34)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v33 = *(_QWORD *)a1;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v34)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v43 & v11;
      v33 = *(_QWORD *)a1;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v11));
      if (v34)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v28;
  *v28 = v15;
  *(_QWORD *)(v33 + 8 * v4) = v28;
  if (*(_QWORD *)v15)
  {
    v44 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v44 >= v12)
        v44 %= v12;
    }
    else
    {
      v44 &= v12 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1910985D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_0()
{
  uint64_t v0;

  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v0 + 24, *(_QWORD **)(v0 + 32));
}

void Espresso::AOT::SegmentsLowerer::FindSegmentDefs()
{
  uint64_t v0;
  int v1;

  do
  {
    OUTLINED_FUNCTION_4_0();
    if (v1 < 0)
      OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_50();
  }
  while (v0);
  OUTLINED_FUNCTION_2();
}

void Espresso::AOT::SegmentsLowerer::GenerateAndMergeSegmentFunctions()
{
  uint64_t v0;

  do
  {
    OUTLINED_FUNCTION_3_0();
    OUTLINED_FUNCTION_50();
  }
  while (v0);
  OUTLINED_FUNCTION_2();
}

void std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::vector(void ***a1, void **a2, void **a3)
{
  void **v5;
  void *v6;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void *v12;

  v5 = *a1;
  v6 = a2;
  if (v5 != a2)
  {
    v8 = v5;
    do
    {
      v10 = (void **)*(v8 - 3);
      v8 -= 3;
      v9 = v10;
      if (v10)
      {
        v11 = (void **)*(v5 - 2);
        v12 = v9;
        if (v11 != v9)
        {
          do
          {
            if (*((char *)v11 - 9) < 0)
              operator delete(*(v11 - 4));
            if (*((char *)v11 - 33) < 0)
              operator delete(*(v11 - 7));
            v11 -= 9;
          }
          while (v11 != v9);
          v12 = *v8;
        }
        *(v5 - 2) = v9;
        operator delete(v12);
      }
      v5 = v8;
    }
    while (v8 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

double Espresso::AOT::EstimatorMILDecisionTree::GetLocalCost(Espresso::AOT::EstimatorMILDecisionTree *this, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;

  v5 = a3 / a5;
  if (a5 <= 0.0)
    v5 = 0.0;
  v6 = a2 / a4;
  if (a4 <= 0.0)
    v6 = 0.0;
  return fmax(v6, v5) * 1000.0;
}

BOOL Espresso::AOT::EstimatorMILDecisionTree::IsMemoryBoundInTheory(Espresso::AOT::EstimatorMILDecisionTree *this, double a2, double a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  BOOL v14;
  double v15;
  int v17;
  int BackendIdentifier;

  v6 = E5Common::E5PlatformManager::Instance(this);
  v7 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v8 = *((unsigned __int8 *)this + 31);
    v9 = (char *)this + 8;
  }
  BackendIdentifier = Espresso::AOT::GetBackendIdentifier((uint64_t)v9, v8);
  v10 = (*(double (**)(uint64_t, char *, int *))(*(_QWORD *)v6 + 104))(v6, (char *)this + 32, &BackendIdentifier);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v11 = *((_QWORD *)this + 2);
  }
  else
  {
    v11 = *((unsigned __int8 *)this + 31);
  }
  v17 = Espresso::AOT::GetBackendIdentifier((uint64_t)v7, v11);
  v12 = (*(double (**)(uint64_t, char *, int *))(*(_QWORD *)v6 + 112))(v6, (char *)this + 32, &v17);
  v13 = a3 / v12;
  v14 = v12 <= 0.0;
  v15 = 0.0;
  if (v14)
    v13 = 0.0;
  if (v10 > 0.0)
    v15 = a2 / v10;
  return v13 > v15;
}

uint64_t Espresso::AOT::EstimatorMILDecisionTree::EstimatorMILDecisionTree(uint64_t a1, __int128 *a2, _OWORD *a3, char a4, char a5)
{
  _QWORD *v10;
  std::string *v11;
  __int128 v12;

  v10 = Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator((_QWORD *)a1);
  *v10 = off_1E2DA0828;
  v11 = (std::string *)(v10 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_OWORD *)(a1 + 32) = *a3;
  *(_BYTE *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 49) = a5;
  return a1;
}

{
  _QWORD *v10;
  std::string *v11;
  __int128 v12;

  v10 = Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator((_QWORD *)a1);
  *v10 = off_1E2DA0828;
  v11 = (std::string *)(v10 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_OWORD *)(a1 + 32) = *a3;
  *(_BYTE *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 49) = a5;
  return a1;
}

void sub_1910988B8(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator *v1;

  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void sub_191098950(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator *v1;

  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(const MIL::IROperation *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(MIL::IROperation const&)::onceToken != -1)
    dispatch_once(&Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(MIL::IROperation const&)::onceToken, &__block_literal_global);
  v5 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::CreateEstimator(v5, &v8);
  if (v8)
  {
    *a2 = v8;
  }
  else
  {
    v6 = (_QWORD *)operator new();
    *v6 = &unk_1E2DA0B78;
    *a2 = v6;
    v7 = v8;
    v8 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void sub_191098A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::EstimatorMILDecisionTree::EstimateCost@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  MIL::IROperation ****v5;
  MIL::IROperation **v6;
  double v7;
  MIL::IROperation *v8;
  uint64_t v9;
  uint64_t OutputType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  float v15;
  float v16;
  _DWORD *v17;
  _BOOL4 v18;
  E5Common::E5PlatformManager *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  std::string *p_p;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  std::ios_base *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  const char *v85;
  NSObject *v86;
  _QWORD *v87;
  MIL::IRNamedValueType ***v88;
  uint64_t Name;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::string *v94;
  const char *v95;
  const char *v96;
  double *v97;
  std::string::size_type v98;
  uint64_t v99;
  uint64_t v103;
  uint64_t result;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  MIL::IROperation **v112;
  uint64_t v113;
  double *v114;
  std::string __p;
  std::string *v116;
  _BYTE buf[24];
  std::string *v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  const char *v126;
  __int128 v127;
  __int128 v128;
  int v129;
  _QWORD v130[22];

  v130[20] = *MEMORY[0x1E0C80C00];
  v113 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)a1);
  v5 = (MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v6 = **v5;
  v112 = (*v5)[1];
  if (v6 != v112)
  {
    v111 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v107 = *MEMORY[0x1E0DE4F60];
    v110 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v106 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v109 = MEMORY[0x1E0DE4FE0] + 64;
    v108 = MEMORY[0x1E0DE4FB8] + 16;
    v7 = 0.0;
    while (1)
    {
      v8 = *v6;
      if ((*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)*v6 + 192))(*v6))
      {
        v9 = 0;
        do
        {
          OutputType = MIL::IROperation::TryGetOutputType(v8);
          if (OutputType)
          {
            if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)OutputType + 24))(OutputType))
              goto LABEL_3;
          }
        }
        while (++v9 < (unint64_t)(*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)v8 + 192))(v8));
      }
      if (Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(MIL::IROperation const&)::onceToken != -1)
        dispatch_once(&Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(MIL::IROperation const&)::onceToken, &__block_literal_global);
      v11 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)v8 + 56))(v8);
      Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::CreateEstimator(v11, buf);
      v12 = *(_QWORD *)buf;
      if (!*(_QWORD *)buf)
      {
        v12 = operator new();
        *(_QWORD *)v12 = &unk_1E2DA0B78;
        v13 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      (*(void (**)(double **__return_ptr, uint64_t, MIL::IROperation *))(*(_QWORD *)v12 + 16))(&v114, v12, v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (!*(_BYTE *)(a1 + 48))
        goto LABEL_61;
      Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree((Espresso::AOT::EstimatorMILDecisionTree *)a1, v8, (uint64_t)buf);
      Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree((Espresso::AOT::EstimatorMILDecisionTree *)a1, v8, (uint64_t)&__p);
      if (v116 == &__p)
        break;
      if (v116)
      {
        (*(void (**)(void))(v116->__r_.__value_.__r.__words[0] + 40))();
        v14 = v118;
        if (!v118)
          goto LABEL_143;
        goto LABEL_20;
      }
      v21 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)v8 + 64))(v8);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
      Espresso::AOT::GetOperatorType(v22, &__p);
      if (*(char *)(a1 + 31) < 0)
      {
        v23 = *(uint64_t **)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) != 14)
        {
LABEL_40:
          v18 = 1;
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
            goto LABEL_41;
          goto LABEL_42;
        }
      }
      else
      {
        v23 = (uint64_t *)(a1 + 8);
        if (*(_BYTE *)(a1 + 31) != 14)
          goto LABEL_40;
      }
      v24 = *v23;
      v25 = *(uint64_t *)((char *)v23 + 6);
      if (v24 != 0x6D696E696D5F3565 || v25 != 0x7570635F6C616D69)
        goto LABEL_34;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ == 10)
        {
          if (*(_QWORD *)__p.__r_.__value_.__l.__data_ == 0x6174735F64616572
            && *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 8) == 25972)
          {
LABEL_34:
            v18 = 1;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_41;
            goto LABEL_42;
          }
        }
        else if (__p.__r_.__value_.__l.__size_ == 11)
        {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_118:
          v98 = p_p->__r_.__value_.__r.__words[0];
          v99 = *(std::string::size_type *)((char *)p_p->__r_.__value_.__r.__words + 3);
          v18 = v98 == 0x74735F6574697277 && v99 == 0x65746174735F6574;
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_41:
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_42:
          v16 = 0.0;
          v19 = (E5Common::E5PlatformManager *)v118;
          if (v118 == (std::string *)buf)
            goto LABEL_27;
          goto LABEL_57;
        }
        v18 = 0;
        goto LABEL_41;
      }
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 10)
      {
        v18 = __p.__r_.__value_.__r.__words[0] == 0x6174735F64616572
           && LOWORD(__p.__r_.__value_.__r.__words[1]) == 25972;
        v16 = 0.0;
        v19 = (E5Common::E5PlatformManager *)v118;
        if (v118 == (std::string *)buf)
        {
LABEL_27:
          v19 = (E5Common::E5PlatformManager *)buf;
          v20 = 4;
          goto LABEL_59;
        }
      }
      else
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 11)
        {
          p_p = &__p;
          goto LABEL_118;
        }
        v18 = 0;
        v16 = 0.0;
        v19 = (E5Common::E5PlatformManager *)v118;
        if (v118 == (std::string *)buf)
          goto LABEL_27;
      }
LABEL_57:
      if (!v19)
        goto LABEL_60;
      v20 = 5;
LABEL_59:
      v19 = (E5Common::E5PlatformManager *)(*(uint64_t (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_60:
      if (!v18)
      {
        v33 = 0;
        v34 = 0.0;
        goto LABEL_69;
      }
LABEL_61:
      if (*(char *)(a1 + 31) < 0)
      {
        v32 = *(_QWORD *)(a1 + 8);
        v31 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v31 = *(unsigned __int8 *)(a1 + 31);
        v32 = a1 + 8;
      }
      *(_DWORD *)buf = Espresso::AOT::GetBackendIdentifier(v32, v31);
      v35 = (*(double (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v113 + 104))(v113, a1 + 32, buf);
      if (*(char *)(a1 + 31) < 0)
      {
        v37 = *(_QWORD *)(a1 + 8);
        v36 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v36 = *(unsigned __int8 *)(a1 + 31);
        v37 = a1 + 8;
      }
      *(_DWORD *)buf = Espresso::AOT::GetBackendIdentifier(v37, v36);
      v16 = v35;
      v34 = (*(double (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v113 + 112))(v113, a1 + 32, buf);
      v33 = 1;
LABEL_69:
      v38 = *v114;
      v39 = v114[1] * 0.0009765625;
      v40 = v16;
      v41 = v34;
      if (v34 <= 0.0)
        v42 = 0.0;
      else
        v42 = v39 / v34;
      v43 = v38 / v40;
      if (v16 <= 0.0)
        v43 = 0.0;
      v7 = v7 + fmax(v43, v42) * 1000.0;
      if (!*(_BYTE *)(a1 + 49))
      {
        *(_QWORD *)buf = operator new(0x28uLL);
        *(_OWORD *)&buf[8] = xmmword_191A72430;
        strcpy(*(char **)buf, "espresso.e5compiler.log_cost_model");
        v19 = (E5Common::E5PlatformManager *)Espresso::AOT::Utils::IsDefaultsWritePresent((uint64_t *)buf);
        v44 = (int)v19;
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if (!v44)
            goto LABEL_111;
        }
        else if (!(_DWORD)v19)
        {
          goto LABEL_111;
        }
        v38 = *v114;
        v39 = v114[1] * 0.0009765625;
      }
      v45 = E5Common::E5PlatformManager::Instance(v19);
      if (*(char *)(a1 + 31) < 0)
      {
        v47 = *(_QWORD *)(a1 + 8);
        v46 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v46 = *(unsigned __int8 *)(a1 + 31);
        v47 = a1 + 8;
      }
      *(_DWORD *)buf = Espresso::AOT::GetBackendIdentifier(v47, v46);
      v48 = (*(double (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v45 + 104))(v45, a1 + 32, buf);
      if (*(char *)(a1 + 31) < 0)
      {
        v50 = *(_QWORD *)(a1 + 8);
        v49 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v49 = *(unsigned __int8 *)(a1 + 31);
        v50 = a1 + 8;
      }
      *(_DWORD *)buf = Espresso::AOT::GetBackendIdentifier(v50, v49);
      v51 = (*(double (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v45 + 112))(v45, a1 + 32, buf);
      if (v51 <= 0.0)
        v52 = 0.0;
      else
        v52 = v39 / v51;
      if (v48 <= 0.0)
        v53 = 0.0;
      else
        v53 = v38 / v48;
      v130[0] = v109;
      *(_QWORD *)buf = v111;
      *(_QWORD *)&buf[*(_QWORD *)(v111 - 24)] = v110;
      v54 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
      std::ios_base::init(v54, &buf[8]);
      v54[1].__vftable = 0;
      v54[1].__fmtflags_ = -1;
      *(_QWORD *)buf = MEMORY[0x1E0DE4FE0] + 24;
      v130[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&buf[8] = v108;
      v127 = 0u;
      v128 = 0u;
      v129 = 16;
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24) + 16] = 4;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"gFlopCnt,", 9);
      v55 = (_QWORD *)std::ostream::operator<<();
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"totalMB,", 8);
      v57 = (_QWORD *)std::ostream::operator<<();
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"kKBPerOC,", 9);
      v59 = (_QWORD *)std::ostream::operator<<();
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"mbKernel,", 9);
      v61 = (_QWORD *)std::ostream::operator<<();
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"mbInputTensors,", 15);
      v63 = (_QWORD *)std::ostream::operator<<();
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"mbOutputTensors,", 16);
      v65 = (_QWORD *)std::ostream::operator<<();
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"opsPerByte,", 11);
      v67 = (_QWORD *)std::ostream::operator<<();
      v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"inputTensorX,", 13);
      v69 = (_QWORD *)std::ostream::operator<<();
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"outputTensorX,", 14);
      v71 = (_QWORD *)std::ostream::operator<<();
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"outputChannelCount,", 19);
      v73 = (_QWORD *)std::ostream::operator<<();
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"kernelX,", 8);
      v75 = (_QWORD *)std::ostream::operator<<();
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"kernelY,", 8);
      v77 = (_QWORD *)std::ostream::operator<<();
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"dilationX,", 10);
      v79 = (_QWORD *)std::ostream::operator<<();
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"dilationY,", 10);
      v81 = (_QWORD *)std::ostream::operator<<();
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"workUnitEfficiency16,", 21);
      v83 = (_QWORD *)std::ostream::operator<<();
      v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"isL2Resident,", 13);
      std::ostream::operator<<();
      std::stringbuf::str();
      *(_QWORD *)buf = v107;
      *(_QWORD *)&buf[*(_QWORD *)(v107 - 24)] = v106;
      *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v128) < 0)
        operator delete((void *)v127);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401CCD0](v130);
      v86 = Espresso::espresso_os_log_subsystem(0, v85);
      if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
      {
        v87 = (_QWORD *)(*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)v8 + 176))(v8);
        if (*v87 == v87[1])
        {
          v90 = "op_has_no_output";
        }
        else
        {
          v88 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)v8 + 176))(v8);
          Name = MIL::IRNamedValueType::GetName(**v88);
          if (*(char *)(Name + 23) >= 0)
            v90 = (const char *)Name;
          else
            v90 = *(const char **)Name;
        }
        v91 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)v8 + 64))(v8);
        v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
        if (*(char *)(v92 + 23) >= 0)
          v93 = v92;
        else
          v93 = *(_QWORD *)v92;
        v94 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v95 = "True";
        if (v33)
          v95 = "False";
        v96 = "Compute";
        if (v52 > v53)
          v96 = "Memory";
        *(_DWORD *)buf = 136316930;
        *(_QWORD *)&buf[4] = v90;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v93;
        *(_WORD *)&buf[22] = 2080;
        v118 = v94;
        v119 = 2048;
        v120 = v40;
        v121 = 2048;
        v122 = v41;
        v123 = 2048;
        v124 = v7;
        v125 = 2080;
        v126 = v95;
        LOWORD(v127) = 2080;
        *(_QWORD *)((char *)&v127 + 2) = v96;
        _os_log_impl(&dword_190DAF000, v86, OS_LOG_TYPE_INFO, "[CostModelFeature],%s,Op,%s,%s,GFLOP/s,%f,GBP/s,%f,Runtime,%f,UsedDTree,%s,Bound:%s", buf, 0x52u);
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_111:
        v97 = v114;
        v114 = 0;
        if (!v97)
          goto LABEL_3;
LABEL_114:
        MEMORY[0x19401CD90](v97, 0x1000C401CC6BE04);
        goto LABEL_3;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v97 = v114;
      v114 = 0;
      if (v97)
        goto LABEL_114;
LABEL_3:
      v6 += 2;
      if (v6 == v112)
        goto LABEL_142;
    }
    (*(void (**)(std::string *))(__p.__r_.__value_.__r.__words[0] + 32))(&__p);
    v14 = v118;
    if (!v118)
LABEL_143:
      std::__throw_bad_function_call[abi:ne180100]();
LABEL_20:
    v15 = (*(float (**)(std::string *, double *))(v14->__r_.__value_.__r.__words[0] + 48))(v14, v114);
    v16 = v15;
    if (*(char *)(a1 + 31) < 0)
    {
      v17 = *(_DWORD **)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) != 4)
        goto LABEL_25;
    }
    else
    {
      v17 = (_DWORD *)(a1 + 8);
      if (*(_BYTE *)(a1 + 31) != 4)
        goto LABEL_25;
    }
    if (*v17 == 1936617058)
    {
      v27 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)v8 + 64))(v8);
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
      Espresso::AOT::GetOperatorType(v28, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v29 = __p.__r_.__value_.__l.__size_ != 4 || *(_DWORD *)__p.__r_.__value_.__l.__data_ != 1970038130;
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4 || LODWORD(__p.__r_.__value_.__l.__data_) != 1970038130;
      }
      if (v29)
        v16 = v16 * 1.1502;
      if (v16 > 0.0)
      {
LABEL_26:
        v18 = 0;
        v19 = (E5Common::E5PlatformManager *)v118;
        if (v118 == (std::string *)buf)
          goto LABEL_27;
        goto LABEL_57;
      }
      goto LABEL_56;
    }
LABEL_25:
    if (v15 > 0.0)
      goto LABEL_26;
LABEL_56:
    v18 = 1;
    v19 = (E5Common::E5PlatformManager *)v118;
    if (v118 == (std::string *)buf)
      goto LABEL_27;
    goto LABEL_57;
  }
  v7 = 0.0;
LABEL_142:
  v103 = operator new();
  result = Espresso::AOT::CostEstimate::CostEstimate(v103, v7);
  *a3 = v103;
  return result;
}

void sub_191099738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void sub_19109975C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void **a44)
{
  void **p_p;
  uint64_t v46;

  p_p = a44;
  if (a44 == &__p)
  {
    v46 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a44)
      goto LABEL_6;
    v46 = 5;
  }
  (*((void (**)(void))*p_p + v46))();
LABEL_6:
  if (a30)
  {
    MEMORY[0x19401CD90](a30, 0x1000C401CC6BE04);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree(Espresso::AOT::EstimatorMILDecisionTree *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  E5Common::E5PlatformManager *v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  if (Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree(MIL::IROperation const&)::onceToken != -1)
    dispatch_once(&Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree(MIL::IROperation const&)::onceToken, &__block_literal_global_11);
  v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 64))(a2);
  v7 = (E5Common::E5PlatformManager *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v8 = E5Common::E5PlatformManager::Instance(v7);
  (*(void (**)(void **__return_ptr, uint64_t, char *))(*(_QWORD *)v8 + 96))(__p, v8, (char *)this + 32);
  Espresso::AOT::Backends::CostModel::DecisionTreeModelRegistry::GetDecisionTreeModel((uint64_t)v7, (uint64_t *)this + 1, (const void **)__p, a3);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_19109996C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::EstimatorMILDecisionTree::EstimateCost@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t *a3@<X8>)
{
  return Espresso::AOT::EstimateTransferCostBetweenBackends((unsigned __int8 *)(a1 + 8), a2, a3);
}

uint64_t Espresso::AOT::EstimatorMILDecisionTree::LaunchCost@<X0>(Espresso::AOT::EstimatorMILDecisionTree *this@<X0>, uint64_t *a2@<X8>)
{
  return Espresso::AOT::EstimateLaunchCostForBackend((unsigned __int16 *)this + 4, a2);
}

uint64_t Espresso::AOT::EstimatorMILDecisionTree::EndCost@<X0>(Espresso::AOT::EstimatorMILDecisionTree *this@<X0>, uint64_t *a2@<X8>)
{
  return Espresso::AOT::EstimateEndCostForBackend((unsigned __int16 *)this + 4, a2);
}

void Espresso::AOT::EstimatorMILDecisionTree::~EstimatorMILDecisionTree(void **this)
{
  *this = off_1E2DA0828;
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator((Espresso::AOT::AbstractCostEstimator *)this);
}

{
  *this = off_1E2DA0828;
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator((Espresso::AOT::AbstractCostEstimator *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::AOT::CreateMILAOTContext(Espresso::AOT *this@<X0>, bnns **a2@<X8>)
{
  MIL::MILContext *v3;
  MIL::MILContext *v4;

  MIL::Opsets::Common::CreateMILContext(this);
  MEMORY[0x19401A780](*a2);
  bnns::RegisterOpsets(*a2, v3);
  E5AOT::Opsets::E5ML_ios16::RegisterE5ML_ios16Opsets(*a2, v4);
}

void sub_191099A84(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::IsFunctionSegmented(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a1)
{
  MIL::Opsets::Common::ios15::ios15Opset *OpsetName;
  unint64_t v3;
  MIL::Opsets::Common::ios15::ios15Opset *v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  MIL::Opsets::Common::ios16::ios16Opset *v9;
  unint64_t v10;
  void *v11;
  MIL::Opsets::Common::ios16::ios16Opset *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  MIL::Opsets::Train::ios16Train::ios16_trainOpset *v16;
  unint64_t v17;
  void *v18;
  MIL::Opsets::Train::ios16Train::ios16_trainOpset *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  const void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Function;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *__p[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  unint64_t v41;
  void *v42[2];
  unint64_t v43;
  void *v44[2];
  unint64_t v45;
  void *__dst[2];
  unint64_t v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  OpsetName = (MIL::Opsets::Common::ios15::ios15Opset *)E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(a1);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = OpsetName;
  v5 = (void *)v3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v47 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v47) = v3;
  v6 = __dst;
  if (v3)
LABEL_8:
    OpsetName = (MIL::Opsets::Common::ios15::ios15Opset *)memmove(v6, v4, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = (MIL::Opsets::Common::ios16::ios16Opset *)MIL::Opsets::Common::ios15::ios15Opset::GetOpsetName(OpsetName);
  v11 = (void *)v10;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v9;
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    v44[1] = v11;
    v45 = v15 | 0x8000000000000000;
    v44[0] = v13;
    goto LABEL_16;
  }
  HIBYTE(v45) = v10;
  v13 = v44;
  if (v10)
LABEL_16:
    v9 = (MIL::Opsets::Common::ios16::ios16Opset *)memmove(v13, v12, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v13) = 0;
  v16 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)MIL::Opsets::Common::ios16::ios16Opset::GetOpsetName(v9);
  v18 = (void *)v17;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v16;
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v42[1] = v18;
    v43 = v22 | 0x8000000000000000;
    v42[0] = v20;
    goto LABEL_24;
  }
  HIBYTE(v43) = v17;
  v20 = v42;
  if (v17)
LABEL_24:
    v16 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)memmove(v20, v19, (size_t)v18);
  *((_BYTE *)v18 + (_QWORD)v20) = 0;
  v23 = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName(v16);
  v25 = (void *)v24;
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (const void *)v23;
  if (v24 >= 0x17)
  {
    v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v28 = v24 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    v40[1] = v25;
    v41 = v29 | 0x8000000000000000;
    v40[0] = v27;
    goto LABEL_32;
  }
  HIBYTE(v41) = v24;
  v27 = v40;
  if (v24)
LABEL_32:
    memmove(v27, v26, (size_t)v25);
  *((_BYTE *)v25 + (_QWORD)v27) = 0;
  v39 = 5;
  strcpy((char *)v38, "ios17");
  v37 = 5;
  strcpy((char *)__p, "ios18");
  Function = MIL::IRProgram::GetFunction();
  if (!(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)Function + 64))(Function, __dst))
  {
    v32 = 0;
    goto LABEL_38;
  }
  v31 = operator new(0x38uLL);
  *v31 = &off_1E2DB2058;
  v31[1] = a1;
  v31[2] = v44;
  v31[3] = v42;
  v31[4] = v38;
  v31[5] = __p;
  v31[6] = v40;
  v49 = v31;
  v32 = MIL::Util::Walk();
  v33 = v49;
  if (v49 != v48)
  {
    if (v49)
    {
      v34 = 5;
      goto LABEL_46;
    }
LABEL_38:
    if (v37 < 0)
      goto LABEL_47;
LABEL_39:
    if (v39 < 0)
      goto LABEL_48;
LABEL_40:
    if (SHIBYTE(v41) < 0)
      goto LABEL_49;
LABEL_41:
    if (SHIBYTE(v43) < 0)
      goto LABEL_50;
LABEL_42:
    if (SHIBYTE(v45) < 0)
      goto LABEL_51;
    goto LABEL_43;
  }
  v34 = 4;
  v33 = v48;
LABEL_46:
  (*(void (**)(void))(*v33 + 8 * v34))();
  if ((v37 & 0x80000000) == 0)
    goto LABEL_39;
LABEL_47:
  operator delete(__p[0]);
  if ((v39 & 0x80000000) == 0)
    goto LABEL_40;
LABEL_48:
  operator delete(v38[0]);
  if ((SHIBYTE(v41) & 0x80000000) == 0)
    goto LABEL_41;
LABEL_49:
  operator delete(v40[0]);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
    goto LABEL_42;
LABEL_50:
  operator delete(v42[0]);
  if (SHIBYTE(v45) < 0)
  {
LABEL_51:
    operator delete(v44[0]);
    if (SHIBYTE(v47) < 0)
      goto LABEL_52;
    return v32;
  }
LABEL_43:
  if (SHIBYTE(v47) < 0)
LABEL_52:
    operator delete(__dst[0]);
  return v32;
}

void sub_191099E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v48;
  uint64_t v49;

  v48 = *(_QWORD **)(v46 - 80);
  if (v48 == v45)
  {
    v49 = 4;
    v48 = (_QWORD *)(v46 - 104);
  }
  else
  {
    if (!v48)
    {
      if (a15 < 0)
        goto LABEL_13;
      goto LABEL_5;
    }
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
  if (a15 < 0)
  {
LABEL_13:
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_14:
      operator delete(a16);
      if (a27 < 0)
      {
LABEL_15:
        operator delete(a22);
        if (a33 < 0)
        {
LABEL_16:
          operator delete(a28);
          if (a39 < 0)
          {
LABEL_17:
            operator delete(a34);
            if (a45 < 0)
            {
LABEL_18:
              operator delete(a40);
              _Unwind_Resume(exception_object);
            }
LABEL_19:
            _Unwind_Resume(exception_object);
          }
LABEL_9:
          if (a45 < 0)
            goto LABEL_18;
          goto LABEL_19;
        }
LABEL_8:
        if (a39 < 0)
          goto LABEL_17;
        goto LABEL_9;
      }
LABEL_7:
      if (a33 < 0)
        goto LABEL_16;
      goto LABEL_8;
    }
LABEL_6:
    if (a27 < 0)
      goto LABEL_15;
    goto LABEL_7;
  }
LABEL_5:
  if (a21 < 0)
    goto LABEL_14;
  goto LABEL_6;
}

_QWORD *Espresso::AOT::GetCallees@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  _QWORD *result;
  uint64_t v6;
  std::runtime_error *exception;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  MIL::IRProgram::GetFunction();
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v8[0] = &off_1E2DB1FA8;
  v8[1] = a1;
  v8[2] = a2;
  v9 = v8;
  v4 = MIL::Util::Walk();
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_6:
  if ((v4 & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in walking on function to collect its callees.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19109A098(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19109A0AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19109A0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void Espresso::AOT::GetAllOpInputs(Espresso::AOT *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t ***v8;
  uint64_t *v9;
  uint64_t *i;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  MIL::IRNamedValueType **v19;
  MIL::IRNamedValueType **v20;
  uint64_t Name;
  Espresso::AOT ****v22;
  Espresso::AOT **v23;
  Espresso::AOT **v24;
  Espresso::AOT *v25;
  const MIL::IROperation *v26;
  void **v27;
  void **v28;
  void **v29;
  void *v30;
  _QWORD *v31;
  void **v32;
  void *v33;
  void **v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  void *v39;
  void **v40;
  void *__p;
  void **v42;
  void *v43;
  void *v44[2];
  void *v45[2];
  int v46;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v5 = (_QWORD *)(*(uint64_t (**)(Espresso::AOT *, const MIL::IROperation *))(*(_QWORD *)this + 160))(this, a2);
  v6 = v5 + 1;
  v7 = (_QWORD *)*v5;
  if ((_QWORD *)*v5 != v5 + 1)
  {
    do
    {
      v11 = (_QWORD *)v7[7];
      v12 = (_QWORD *)v7[8];
      while (v11 != v12)
      {
        v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11);
        if (v13)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v13, v13);
        v11 += 2;
      }
      v14 = (_QWORD *)v7[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v7[2];
          v16 = *v15 == (_QWORD)v7;
          v7 = v15;
        }
        while (!v16);
      }
      v7 = v15;
    }
    while (v15 != v6);
  }
  v8 = (uint64_t ***)(*(uint64_t (**)(Espresso::AOT *))(*(_QWORD *)this + 208))(this);
  v9 = **v8;
  for (i = (*v8)[1]; v9 != i; v9 += 2)
  {
    v17 = *v9;
    *(_OWORD *)v44 = 0u;
    *(_OWORD *)v45 = 0u;
    v46 = 1065353216;
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    v19 = *(MIL::IRNamedValueType ***)v18;
    v20 = *(MIL::IRNamedValueType ***)(v18 + 8);
    if (*(MIL::IRNamedValueType ***)v18 != v20)
    {
      do
      {
        Name = MIL::IRNamedValueType::GetName(*v19);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v44, Name, Name);
        v19 += 2;
      }
      while (v19 != v20);
    }
    v22 = (Espresso::AOT ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
    v23 = **v22;
    v24 = (*v22)[1];
    while (v23 != v24)
    {
      v25 = *v23;
      (*(void (**)(void **__return_ptr, Espresso::AOT *))(*(_QWORD *)*v23 + 200))(&__p, *v23);
      v27 = (void **)__p;
      v28 = v42;
      if (__p != v42)
      {
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v44, (uint64_t)v27, (uint64_t)v27);
          v27 += 3;
        }
        while (v27 != v28);
        v27 = (void **)__p;
      }
      if (v27)
      {
        v29 = v42;
        v30 = v27;
        if (v42 != v27)
        {
          do
          {
            if (*((char *)v29 - 1) < 0)
              operator delete(*(v29 - 3));
            v29 -= 3;
          }
          while (v29 != v27);
          v30 = __p;
        }
        v42 = v27;
        operator delete(v30);
      }
      Espresso::AOT::GetAllOpInputs((uint64_t *)&__p, v25, v26);
      v31 = v43;
      if (v43)
      {
        do
        {
          if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v44, (uint64_t)(v31 + 2)))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (uint64_t)(v31 + 2), (uint64_t)(v31 + 2));
          v31 = (_QWORD *)*v31;
        }
        while (v31);
        v32 = (void **)v43;
        if (v43)
        {
          do
          {
            v34 = (void **)*v32;
            if (*((char *)v32 + 39) < 0)
              operator delete(v32[2]);
            operator delete(v32);
            v32 = v34;
          }
          while (v34);
        }
      }
      v33 = __p;
      __p = 0;
      if (v33)
        operator delete(v33);
      v23 += 2;
    }
    v35 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 88))(v17);
    v36 = *v35;
    v37 = v35[1];
    while (v36 != v37)
    {
      if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v44, v36))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v36, v36);
      v36 += 24;
    }
    v38 = (void **)v45[0];
    if (v45[0])
    {
      do
      {
        v40 = (void **)*v38;
        if (*((char *)v38 + 39) < 0)
          operator delete(v38[2]);
        operator delete(v38);
        v38 = v40;
      }
      while (v40);
    }
    v39 = v44[0];
    v44[0] = 0;
    if (v39)
      operator delete(v39);
  }
}

void sub_19109A440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, void *a17)
{
  uint64_t v17;
  void **v19;
  void *v20;
  void **v21;

  v19 = *(void ***)(v17 + 16);
  if (v19)
  {
    do
    {
      v21 = (void **)*v19;
      if (*((char *)v19 + 39) < 0)
        operator delete(v19[2]);
      operator delete(v19);
      v19 = v21;
    }
    while (v21);
  }
  v20 = *(void **)v17;
  *(_QWORD *)v17 = 0;
  if (v20)
    operator delete(v20);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::ValidateAlignmentsAttrForE5Backend(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a1)
{
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *Function;
  const char *OpsetName;
  unint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  uint64_t v22;
  std::logic_error *v23;
  std::logic_error *exception;
  std::logic_error *v25;
  void *v26[2];
  unint64_t v27;
  void *__p[2];
  char v29;
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if ((Espresso::AOT::IsFunctionSegmented(a1) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid e5backend program: Invalid segments.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  Function = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::IRProgram::GetFunction();
  OpsetName = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(Function);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = OpsetName;
  v6 = (void *)v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    v26[1] = v6;
    v27 = v9 | 0x8000000000000000;
    v26[0] = v7;
    goto LABEL_9;
  }
  HIBYTE(v27) = v4;
  v7 = v26;
  if (v4)
LABEL_9:
    memmove(v7, v5, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, void **))(*(_QWORD *)Function + 64))(Function, v26);
  v10 = (_QWORD *)(*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)Function
                                                                                               + 128))(Function);
  v11 = v10 + 1;
  v12 = (_QWORD *)*v10;
  if ((_QWORD *)*v10 != v10 + 1)
  {
    do
    {
      if (E5Common::Utils::IsTensor(v12[7]))
      {
        v13 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v12[7]);
        v29 = 10;
        strcpy((char *)__p, "alignments");
        v14 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v13 + 64))(v13, __p);
        if (v29 < 0)
          operator delete(__p[0]);
        if (!v14)
        {
          v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v23, "Invalid e5backend program: function input without alignments.");
          v23->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v23, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
      }
      v15 = (_QWORD *)v12[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v12[2];
          v17 = *v16 == (_QWORD)v12;
          v12 = v16;
        }
        while (!v17);
      }
      v12 = v16;
    }
    while (v16 != v11);
  }
  __p[0] = &off_1E2DB2630;
  __p[1] = a1;
  v30 = __p;
  v20 = MIL::Util::Walk();
  v21 = v30;
  if (v30 == __p)
  {
    v22 = 4;
    v21 = __p;
  }
  else
  {
    if (!v30)
      goto LABEL_28;
    v22 = 5;
  }
  (*((void (**)(void **, uint64_t, uint64_t))*v21 + v22))(v21, v18, v19);
LABEL_28:
  if ((v20 & 1) == 0)
  {
    v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "Invalid e5backend program.");
    v25->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v25, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

void sub_19109A830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MakeMILShape@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  MIL::IRConstantDimension *v8;
  char *v9;
  unint64_t v10;

  v5 = *a2;
  v4 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (MIL::IRConstantDimension *)result;
    v9 = (char *)operator new(v4 - v5);
    *a3 = v9;
    a3[2] = &v9[8 * (v6 >> 3)];
    bzero(v9, v6);
    v10 = 0;
    a3[1] = &v9[v6];
    do
    {
      result = MIL::IRConstantDimension::Make(v8, *(MIL::MILContext **)(v5 + 8 * v10));
      *(_QWORD *)&v9[8 * v10++] = result;
      v5 = *a2;
    }
    while (v10 < (a2[1] - *a2) >> 3);
  }
  return result;
}

void sub_19109A988(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MakeMILTensorValue(uint64_t a1, const void **a2)
{
  _BYTE *v3;
  _BYTE *v4;
  const void *v5;
  size_t v6;
  _QWORD *__p;
  void *__pa;

  v4 = *a2;
  v3 = a2[1];
  __p = operator new(8uLL);
  *__p = (v3 - v4) >> 3;
  MIL::IRTensorValueType::Make();
  if (__p)
    operator delete(__p);
  __pa = 0;
  v5 = *a2;
  v6 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __pa = operator new(v6);
    memcpy(__pa, v5, v6);
  }
  MIL::IRTensorValueType::MakeUInt64Value();
  if (__pa)
    operator delete(__pa);
}

void sub_19109AA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MakeVectorFromMILValue<unsigned long long>(MIL::IRValue *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Data;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;

  MIL::IRValue::AsTensor(a1);
  Data = MIL::IRTensorValue::GetDataView<unsigned long long>();
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    v5 = v4;
    if (v4 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = Data;
    v7 = 8 * v4;
    v8 = operator new(8 * v4);
    *a2 = v8;
    a2[2] = (char *)v8 + 8 * v5;
    bzero(v8, 8 * v5);
    v9 = 0;
    a2[1] = (char *)v8 + v7;
    if (v5 < 4)
      goto LABEL_8;
    if ((unint64_t)v8 - v6 < 0x20)
      goto LABEL_8;
    v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = (__int128 *)(v6 + 16);
    v11 = v8 + 1;
    v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v5 != v9)
    {
LABEL_8:
      v14 = v5 - v9;
      v15 = 8 * v9;
      v16 = (uint64_t *)(v6 + 8 * v9);
      v17 = (_QWORD *)((char *)v8 + v15);
      do
      {
        v18 = *v16++;
        *v17++ = v18;
        --v14;
      }
      while (v14);
    }
  }
}

{
  __ZN8Espresso3AOT22MakeVectorFromMILValueIyEENSt3__16vectorIT_NS2_9allocatorIS4_EEEERKN3MIL7IRValueE(a1, a2);
}

void sub_19109ABB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MakeMILTypeWithPackedAlignments(Espresso::AOT *this, MIL::MILContext *a2, const MIL::IRValueType *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count_vtbl *v17;
  uint64_t v18;
  void **v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::logic_error *exception;
  void *v31;
  void *__p;
  void *v33;
  void *v34;
  char *v35;
  std::__shared_weak_count_vtbl *v36;
  void *v37;
  char *v38;
  char *v39;
  void *v40[2];
  char v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a2 + 24))(a2);
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only tensor types are supported.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v5 = v4;
  v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  v8 = *v6;
  v7 = v6[1];
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    v11 = &v10[8 * (v9 >> 3)];
    v37 = v10;
    v39 = v11;
    memset_pattern16(v10, &xmmword_191A87020, v9 & 0xFFFFFFFFFFFFFFF8);
    v38 = v11;
  }
  Espresso::AOT::MakeMILTensorValue((uint64_t)this, (const void **)&v37);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v14 = *(const void **)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v15 = v13 - *(_QWORD *)v12;
  if (v13 != *(_QWORD *)v12)
  {
    if (v15 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v33 = operator new(v13 - *(_QWORD *)v12);
    v35 = (char *)v33 + 8 * (v15 >> 3);
    memcpy(v33, v14, v15);
    v34 = v35;
  }
  strcpy((char *)v40, "alignments");
  v41 = 10;
  v42 = v36;
  if (v36)
  {
    v16 = (std::__shared_weak_count *)operator new();
    v17 = v36;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16[1].__vftable = v17;
  }
  else
  {
    v16 = 0;
  }
  v43 = v16;
  v36 = 0;
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v31, (uint64_t)v40, 1);
  v18 = MIL::IRTensorValueType::MakeWithShape();
  v19 = (void **)__p;
  if (__p)
  {
    do
    {
      while (1)
      {
        v20 = (void **)*v19;
        v21 = (std::__shared_weak_count *)v19[6];
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (*((char *)v19 + 39) < 0)
          break;
        operator delete(v19);
        v19 = v20;
        if (!v20)
          goto LABEL_21;
      }
      operator delete(v19[2]);
      operator delete(v19);
      v19 = v20;
    }
    while (v20);
  }
LABEL_21:
  v24 = v31;
  v31 = 0;
  if (v24)
    operator delete(v24);
  v25 = v43;
  if (!v43)
    goto LABEL_27;
  v26 = (unint64_t *)&v43->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
  {
LABEL_27:
    if ((v41 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (v41 < 0)
LABEL_28:
    operator delete(v40[0]);
LABEL_29:
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  v28 = v36;
  v36 = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  if (v37)
    operator delete(v37);
  return v18;
}

void sub_19109AF10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19109AF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v28;
  uint64_t v29;

  if (a26 < 0)
  {
    operator delete(__p);
    v28 = a14;
    if (!a14)
    {
LABEL_3:
      v29 = a17;
      if (!a17)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v28 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v28);
  v29 = a17;
  if (!a17)
  {
LABEL_4:
    if (!v26)
LABEL_10:
      _Unwind_Resume(exception_object);
LABEL_9:
    operator delete(v26);
    goto LABEL_10;
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (!v26)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_19109AFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    JUMPOUT(0x19109AFF0);
  JUMPOUT(0x19109AFF4);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, a2, a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_19109B074(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t **v3;

  v3 = *(uint64_t ***)(v1 + 16);
  if (v3)
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(v3);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::RemoveTensorAttributes(uint64_t a1, uint64_t a2)
{
  const void ***v3;
  const void **v4;
  const void ***v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  const void **v17;
  const void ***v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  MIL::IRNamedValueType *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  MIL::IRValueType *Type;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  int64_t v36;
  char *v37;
  uint64_t Name;
  __int128 v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  MIL::IRNamedValueType *v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  std::string v70;
  void *__p;
  void *v72;
  char *v73;
  void *v74;
  char *v75;
  unint64_t v76;

  v75 = 0;
  v76 = 0;
  v74 = &v75;
  v3 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
  v5 = v3 + 1;
  v4 = *v3;
  if (*v3 != (const void **)(v3 + 1))
  {
    do
    {
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v4[7];
      if (E5Common::Utils::IsTensor((uint64_t)v70.__r_.__value_.__l.__data_))
      {
        v9 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v4[7]);
        if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) + 24))
        {
          v10 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v4[7]);
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
          v11 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v4[7]);
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
          __p = 0;
          v72 = 0;
          v73 = 0;
          v14 = *(const void **)v12;
          v13 = *(_QWORD *)(v12 + 8);
          v15 = v13 - *(_QWORD *)v12;
          if (v13 != *(_QWORD *)v12)
          {
            if (v15 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            __p = operator new(v13 - *(_QWORD *)v12);
            v72 = __p;
            v16 = (char *)__p + 8 * (v15 >> 3);
            v73 = v16;
            memcpy(__p, v14, v15);
            v72 = v16;
          }
          v70.__r_.__value_.__r.__words[0] = MIL::IRTensorValueType::MakeWithShape();
          if (__p)
          {
            v72 = __p;
            operator delete(__p);
          }
        }
      }
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*&>((uint64_t **)&v74, v4 + 4, (uint64_t)(v4 + 4), &v70);
      v17 = (const void **)v4[1];
      if (v17)
      {
        do
        {
          v18 = (const void ***)v17;
          v17 = (const void **)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (const void ***)v4[2];
          v19 = *v18 == v4;
          v4 = (const void **)v18;
        }
        while (!v19);
      }
      v4 = (const void **)v18;
    }
    while (v18 != v5);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, &v74);
  std::__tree<std::string>::destroy((uint64_t)&v74, v75);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v7 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  v8 = (_QWORD *)**v7;
  v67 = (_QWORD *)(*v7)[1];
  if (v8 == v67)
    return;
  while (2)
  {
    v21 = *v8;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v68 = v8;
    v69 = v21;
    v22 = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 176))();
    v24 = *v22;
    v23 = v22[1];
    while (v24 != v23)
    {
      v26 = *(MIL::IRNamedValueType **)v24;
      v25 = *(std::__shared_weak_count **)(v24 + 8);
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v26);
      if (E5Common::Utils::IsTensor((uint64_t)Type))
      {
        v30 = MIL::IRValueType::AsTensorType(Type);
        if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 80))(v30) + 24))
        {
          v31 = MIL::IRValueType::AsTensorType(Type);
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 88))(v31);
          v32 = MIL::IRValueType::AsTensorType(Type);
          v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 96))(v32);
          __p = 0;
          v72 = 0;
          v73 = 0;
          v35 = *(const void **)v33;
          v34 = *(_QWORD *)(v33 + 8);
          v36 = v34 - *(_QWORD *)v33;
          if (v34 != *(_QWORD *)v33)
          {
            if (v36 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            __p = operator new(v34 - *(_QWORD *)v33);
            v72 = __p;
            v37 = (char *)__p + 8 * (v36 >> 3);
            v73 = v37;
            memcpy(__p, v35, v36);
            v72 = v37;
          }
          MIL::IRTensorValueType::MakeWithShape();
          if (__p)
          {
            v72 = __p;
            operator delete(__p);
          }
        }
      }
      Name = MIL::IRNamedValueType::GetName(v26);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
      }
      else
      {
        v39 = *(_OWORD *)Name;
        v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v39;
      }
      MIL::IRNamedValueType::Make();
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v70.__r_.__value_.__l.__data_);
        v40 = __p;
        if (__p)
        {
LABEL_39:
          v41 = (_QWORD *)operator new();
          v42 = __p;
          *v41 = &unk_1E2DC3040;
          v41[1] = 0;
          v41[2] = 0;
          v41[3] = v42;
          __p = 0;
          v44 = v75;
          v43 = v76;
          if ((unint64_t)v75 < v76)
            goto LABEL_40;
          goto LABEL_43;
        }
      }
      else
      {
        v40 = __p;
        if (__p)
          goto LABEL_39;
      }
      v41 = 0;
      __p = 0;
      v44 = v75;
      v43 = v76;
      if ((unint64_t)v75 < v76)
      {
LABEL_40:
        *(_QWORD *)v44 = v40;
        *((_QWORD *)v44 + 1) = v41;
        v45 = v44 + 16;
        goto LABEL_63;
      }
LABEL_43:
      v46 = (char *)v74;
      v47 = v44 - (_BYTE *)v74;
      v48 = (v44 - (_BYTE *)v74) >> 4;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v50 = v43 - (_QWORD)v74;
      if (v50 >> 3 > v49)
        v49 = v50 >> 3;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
        v51 = 0xFFFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      if (v51 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v52 = (char *)operator new(16 * v51);
      v53 = &v52[16 * v48];
      *(_QWORD *)v53 = v40;
      v45 = v53 + 16;
      *(_QWORD *)&v52[v47 + 8] = v41;
      if (v44 == v46)
      {
        v74 = v53;
        v75 = v53 + 16;
        v76 = (unint64_t)&v52[16 * v51];
      }
      else
      {
        do
        {
          v54 = *((_OWORD *)v44 - 1);
          v44 -= 16;
          *((_OWORD *)v53 - 1) = v54;
          v53 -= 16;
          *(_QWORD *)v44 = 0;
          *((_QWORD *)v44 + 1) = 0;
        }
        while (v44 != v46);
        v44 = (char *)v74;
        v55 = v75;
        v74 = v53;
        v75 = v45;
        v76 = (unint64_t)&v52[16 * v51];
        while (v55 != v44)
        {
          v56 = (std::__shared_weak_count *)*((_QWORD *)v55 - 1);
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v55 -= 16;
        }
      }
      if (v44)
        operator delete(v44);
LABEL_63:
      v75 = v45;
      v59 = (MIL::IRNamedValueType *)__p;
      __p = 0;
      if (v59)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v59);
        MEMORY[0x19401CD90]();
      }
      if (v25)
      {
        v60 = (unint64_t *)&v25->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v24 += 16;
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v69 + 184))(v69, &v74);
    v62 = (char *)v74;
    if (v74)
    {
      v63 = v75;
      v20 = v74;
      if (v75 != v74)
      {
        do
        {
          v64 = (std::__shared_weak_count *)*((_QWORD *)v63 - 1);
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v63 -= 16;
        }
        while (v63 != v62);
        v20 = v74;
      }
      v75 = v62;
      operator delete(v20);
    }
    v8 = v68 + 2;
    if (v68 + 2 != v67)
      continue;
    break;
  }
}

void sub_19109B64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,char *a23)
{
  std::__tree<std::string>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void sub_19109B6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char *a25,char *a26)
{
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v29;
  char *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;

  if (__p)
    operator delete(__p);
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a25)
  {
    v30 = a26;
    v31 = a25;
    if (a26 != a25)
    {
      do
      {
        v32 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v30 -= 16;
      }
      while (v30 != a25);
      v31 = a25;
    }
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::MakeIRProgramWithFunction(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, std::__shared_weak_count_vtbl **a4@<X8>)
{
  MIL::IRObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  MIL::Attributes::BuildInfo *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count_vtbl *v39;
  uint64_t v40;
  MIL::Builder::ProgramBuilder *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::runtime_error *exception;
  std::string __p;
  std::__shared_weak_count_vtbl *v47;
  _QWORD v48[8];
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56[2];
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  MIL::Builder::ProgramBuilder *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  v8 = (MIL::IRObject *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 48))(&v61);
  v58 = v61;
  v59 = v62;
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::Make();
  if (v59)
  {
    v11 = &v59->__shared_owners_;
    do
      v12 = __ldaxr((unint64_t *)v11);
    while (__stlxr(v12 - 1, (unint64_t *)v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(v8);
  v14 = (std::__shared_weak_count *)LocationPtr[1];
  v56[1] = *LocationPtr;
  v57 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  MIL::Builder::ProgramBuilder::SetLocation();
  if (v57)
  {
    v17 = &v57->__shared_owners_;
    do
      v18 = __ldaxr((unint64_t *)v17);
    while (__stlxr(v18 - 1, (unint64_t *)v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 232))(v56, a1);
  v19 = v61;
  v20 = v62;
  v54 = v61;
  v55 = v62;
  if (v62)
  {
    v21 = (unint64_t *)&v62->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (!v20)
    goto LABEL_24;
  v23 = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_24:
    if (!a2)
      goto LABEL_26;
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (a2)
LABEL_25:
    Espresso::AOT::RemoveTensorAttributes(v61, v56[0]);
LABEL_26:
  v50 = v61;
  v51 = v62;
  if (v62)
  {
    v25 = (unint64_t *)&v62->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v48[7] = v56[0];
  if (v56[0])
  {
    v27 = (std::__shared_weak_count *)operator new();
    v28 = v56[0];
    v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E10;
    v27->__shared_owners_ = 0;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
  }
  else
  {
    v27 = 0;
  }
  v49 = v27;
  v56[0] = 0;
  MIL::Builder::FunctionBuilder::Make();
  v52 = v47;
  if (v47)
  {
    v29 = (std::__shared_weak_count *)operator new();
    v30 = v47;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3078;
    v29->__shared_owners_ = 0;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v30;
  }
  else
  {
    v29 = 0;
  }
  v53 = v29;
  v47 = 0;
  MIL::Builder::ProgramBuilder::AddFunction();
  if (v53)
  {
    v31 = &v53->__shared_owners_;
    do
      v32 = __ldaxr((unint64_t *)v31);
    while (__stlxr(v32 - 1, (unint64_t *)v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v47 = 0;
  if (v49)
  {
    v33 = &v49->__shared_owners_;
    do
      v34 = __ldaxr((unint64_t *)v33);
    while (__stlxr(v34 - 1, (unint64_t *)v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v51)
  {
    v35 = &v51->__shared_owners_;
    do
      v36 = __ldaxr((unint64_t *)v35);
    while (__stlxr(v36 - 1, (unint64_t *)v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  MIL::Builder::ProgramBuilder::CreateProgram(v60);
  if (((*(uint64_t (**)(_QWORD *))(v48[0] + 16))(v48) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)v48);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "buildInfo");
  if (MIL::IRObject::TryGetAttribute())
  {
    MIL::Attributes::BuildInfo::Make();
    MIL::Attributes::BuildInfo::Replace();
    v37 = (MIL::Attributes::BuildInfo *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v37)
    {
      MIL::Attributes::BuildInfo::~BuildInfo(v37);
      MEMORY[0x19401CD90]();
    }
  }
  v38 = v47;
  v47 = 0;
  *a4 = v38;
  MEMORY[0x19401B338](v48);
  v39 = v47;
  v47 = 0;
  if (v39)
    (*((void (**)(std::__shared_weak_count_vtbl *))v39->~__shared_weak_count + 1))(v39);
  v40 = v56[0];
  v56[0] = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = v60;
  v60 = 0;
  if (v41)
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)v41 + 8))(v41);
  v42 = v62;
  if (v62)
  {
    v43 = (unint64_t *)&v62->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_19109BD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x19401B338](v31);
      if (a16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
        v35 = *(_QWORD *)(v33 - 128);
        *(_QWORD *)(v33 - 128) = 0;
        if (!v35)
        {
LABEL_8:
          v36 = *(_QWORD *)(v33 - 88);
          *(_QWORD *)(v33 - 88) = 0;
          if (!v36)
            goto LABEL_9;
          goto LABEL_12;
        }
      }
      else
      {
        v35 = *(_QWORD *)(v33 - 128);
        *(_QWORD *)(v33 - 128) = 0;
        if (!v35)
          goto LABEL_8;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = *(_QWORD *)(v33 - 88);
      *(_QWORD *)(v33 - 88) = 0;
      if (!v36)
      {
LABEL_9:
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v33 - 80);
        _Unwind_Resume(a1);
      }
LABEL_12:
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v33 - 80);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void sub_19109BEA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 88);
  *(_QWORD *)(v0 - 88) = 0;
  if (v1)
    JUMPOUT(0x19109BE84);
  JUMPOUT(0x19109BDC8);
}

void sub_19109BEB4()
{
  uint64_t v0;
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v0 - 120);
  v1 = *(_QWORD *)(v0 - 88);
  *(_QWORD *)(v0 - 88) = 0;
  if (v1)
    JUMPOUT(0x19109BE84);
  JUMPOUT(0x19109BDC8);
}

void sub_19109BED0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 88);
  *(_QWORD *)(v0 - 88) = 0;
  if (v1)
    JUMPOUT(0x19109BE84);
  JUMPOUT(0x19109BDC8);
}

void sub_19109BEE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 104);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::RemoveIdentityOps(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  std::string *v8;
  std::string *v9;
  _OWORD *v10;
  uint64_t Operator;
  uint64_t v12;
  int v13;
  MIL::Builder::Variable *ArgumentForParameter;
  MIL::Builder::Variable *Output;
  const std::string *Name;
  uint64_t *v17;
  const std::string *v18;
  uint64_t *v19;
  _QWORD *v20;
  std::string::size_type size;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string *v29;
  MIL::Builder::Variable **v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  int v34;
  size_t v35;
  const void *v36;
  int v37;
  size_t v38;
  const void *v39;
  size_t v40;
  int v41;
  BOOL v42;
  int v43;
  _BOOL4 v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  void **v48;
  void **v49;
  __int128 v50;
  uint64_t v51;
  std::string::size_type v52;
  std::string *v53;
  int v54;
  size_t v55;
  const void *v56;
  size_t v57;
  int v58;
  BOOL v59;
  int v60;
  _BOOL4 v61;
  uint64_t *v62;
  std::string *v63;
  std::string *v64;
  __int128 v65;
  uint64_t v66;
  void **v67;
  void *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  BOOL v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  char *v85;
  std::string *v86;
  std::string *v87;
  MIL::Builder::OperationBuilder **v88;
  MIL::Builder::Variable **v89;
  __int128 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  size_t v95;
  const void *v96;
  int v97;
  size_t v98;
  const void *v99;
  size_t v100;
  int v101;
  BOOL v102;
  int v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  MIL::Builder::OperationBuilder **v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  int v111;
  size_t v112;
  const void *v113;
  uint64_t v114;
  const void *v115;
  const void *v116;
  int v117;
  size_t v118;
  const void *v119;
  size_t v120;
  int v121;
  _BOOL4 v122;
  int v123;
  _BOOL4 v124;
  char *v125;
  std::string *v126;
  __int128 v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  _BYTE *v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  std::string::size_type v145;
  MIL::Builder::OperationBuilder **v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  void **v151;
  void **v152;
  void *v153;
  std::string *v154;
  std::string *v155;
  void *v156;
  _QWORD *v157;
  _QWORD *v158;
  void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t result;
  std::string::size_type v171;
  __int128 *v172;
  uint64_t v173;
  std::string v174;
  std::__shared_weak_count *v175;
  std::string *v176;
  __int128 *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::string v182;
  std::string v183;
  void *__p;
  void **v185;
  char v186;
  void *v187;
  std::string *v188;
  unint64_t v189;
  void *v190;
  _QWORD *v191;
  unint64_t v192;
  uint64_t **v193;
  char *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197[2];
  uint64_t *v198;
  uint64_t v199[2];
  uint64_t *v200;
  uint64_t v201[2];
  MIL::Builder::BlockBuilder *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;

  v205 = a1;
  v206 = a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a4 + 168))(a4);
  MIL::Builder::ProgramBuilder::Make();
  if (v206)
  {
    v6 = &v206->__shared_owners_;
    do
      v7 = __ldaxr((unint64_t *)v6);
    while (__stlxr(v7 - 1, (unint64_t *)v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  MIL::Builder::ProgramBuilder::GetFunction();
  (*(void (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
  MIL::Builder::FunctionBuilder::GetBlock();
  v201[0] = 0;
  v201[1] = 0;
  v199[1] = 0;
  v200 = v201;
  v198 = v199;
  v199[0] = 0;
  v197[0] = 0;
  v197[1] = 0;
  v195 = 0;
  v196 = v197;
  v193 = (uint64_t **)&v194;
  v194 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0;
  MIL::Builder::BlockBuilder::GetOperations(v202);
  v9 = (std::string *)v187;
  v8 = v188;
  if (v187 != v188)
  {
    while (1)
    {
      Operator = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v9->__r_.__value_.__l.__data_);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
      v13 = *(char *)(v12 + 23);
      if (v13 < 0)
      {
        if (*(_QWORD *)(v12 + 8) == 8 && **(_QWORD **)v12 == 0x797469746E656469)
        {
LABEL_20:
          v186 = 1;
          LOWORD(__p) = 120;
          ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          if (v186 < 0)
            operator delete(__p);
          Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput((MIL::Builder::OperationBuilder *)v9->__r_.__value_.__l.__data_);
          Name = (const std::string *)MIL::Builder::Variable::GetName(Output);
          __p = (void *)MIL::Builder::Variable::GetName(ArgumentForParameter);
          v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v200, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
          std::string::operator=((std::string *)(v17 + 7), Name);
          v18 = (const std::string *)MIL::Builder::Variable::GetName(ArgumentForParameter);
          __p = (void *)MIL::Builder::Variable::GetName(Output);
          v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v196, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
          std::string::operator=((std::string *)(v19 + 7), v18);
          v20 = v191;
          if ((unint64_t)v191 >= v192)
          {
            v10 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v190, (__int128 *)v9);
          }
          else
          {
            *v191 = v9->__r_.__value_.__r.__words[0];
            size = v9->__r_.__value_.__l.__size_;
            v20[1] = size;
            if (size)
            {
              v22 = (unint64_t *)(size + 8);
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
            }
            v10 = v20 + 2;
          }
          v191 = v10;
        }
      }
      else if (v13 == 8 && *(_QWORD *)v12 == 0x797469746E656469)
      {
        goto LABEL_20;
      }
      v9 = (std::string *)((char *)v9 + 16);
      if (v9 == v8)
      {
        v9 = (std::string *)v187;
        break;
      }
    }
  }
  if (v9)
  {
    v24 = v188;
    v25 = v9;
    if (v188 != v9)
    {
      do
      {
        v26 = (std::__shared_weak_count *)v24[-1].__r_.__value_.__r.__words[2];
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 = (std::string *)((char *)v24 - 16);
      }
      while (v24 != v9);
      v25 = v187;
    }
    v188 = v9;
    operator delete(v25);
  }
  MIL::Builder::BlockBuilder::GetOutputs(v202);
  v30 = (MIL::Builder::Variable **)v187;
  v29 = v188;
  if (v187 == v188)
    goto LABEL_68;
  while (2)
  {
    v31 = MIL::Builder::Variable::GetName(*v30);
    v32 = v197[0];
    if (!v197[0])
      goto LABEL_41;
    v33 = (std::string *)v31;
    v34 = *(char *)(v31 + 23);
    if (v34 >= 0)
      v35 = *(unsigned __int8 *)(v31 + 23);
    else
      v35 = *(_QWORD *)(v31 + 8);
    if (v34 >= 0)
      v36 = (const void *)v31;
    else
      v36 = *(const void **)v31;
    while (1)
    {
      v37 = *(char *)(v32 + 55);
      if (v37 >= 0)
        v38 = *(unsigned __int8 *)(v32 + 55);
      else
        v38 = *(_QWORD *)(v32 + 40);
      if (v37 >= 0)
        v39 = (const void *)(v32 + 32);
      else
        v39 = *(const void **)(v32 + 32);
      if (v38 >= v35)
        v40 = v35;
      else
        v40 = v38;
      v41 = memcmp(v36, v39, v40);
      v42 = v35 < v38;
      if (v41)
        v42 = v41 < 0;
      if (v42)
        goto LABEL_49;
      v43 = memcmp(v39, v36, v40);
      v44 = v38 < v35;
      if (v43)
        v44 = v43 < 0;
      if (!v44)
        break;
      v32 += 8;
LABEL_49:
      v32 = *(_QWORD *)v32;
      if (!v32)
        goto LABEL_41;
    }
    __p = v33;
    v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v196, v33, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    __p = v33;
    v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v198, v33, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    std::string::operator=((std::string *)(v46 + 7), (const std::string *)(v45 + 7));
    __p = v33;
    __p = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v196, v33, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 7;
    v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v193, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    std::string::operator=((std::string *)(v47 + 7), v33);
LABEL_41:
    if (++v30 != (MIL::Builder::Variable **)v29)
      continue;
    break;
  }
  v30 = (MIL::Builder::Variable **)v187;
LABEL_68:
  if (v30)
  {
    v188 = (std::string *)v30;
    operator delete(v30);
  }
  v187 = 0;
  v188 = 0;
  v189 = 0;
  MIL::Builder::BlockBuilder::GetOutputNames(v202);
  v48 = (void **)__p;
  v49 = v185;
  if (__p != v185)
  {
LABEL_74:
    if (*((char *)v48 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v183, (const std::string::value_type *)*v48, (std::string::size_type)v48[1]);
    }
    else
    {
      v50 = *(_OWORD *)v48;
      v183.__r_.__value_.__r.__words[2] = (std::string::size_type)v48[2];
      *(_OWORD *)&v183.__r_.__value_.__l.__data_ = v50;
    }
    v51 = v199[0];
    if (!v199[0])
    {
LABEL_104:
      v64 = v188;
      if ((unint64_t)v188 < v189)
      {
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v188, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
        }
        else
        {
          v65 = *(_OWORD *)&v183.__r_.__value_.__l.__data_;
          v66 = v183.__r_.__value_.__r.__words[2];
LABEL_107:
          v64->__r_.__value_.__r.__words[2] = v66;
          *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
        }
        goto LABEL_113;
      }
      v63 = &v183;
LABEL_109:
      v188 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v187, (uint64_t)v63);
      if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_72;
      goto LABEL_73;
    }
    if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v183.__r_.__value_.__r.__words[2]);
    else
      v52 = v183.__r_.__value_.__l.__size_;
    if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v183;
    else
      v53 = (std::string *)v183.__r_.__value_.__r.__words[0];
    while (1)
    {
      v54 = *(char *)(v51 + 55);
      if (v54 >= 0)
        v55 = *(unsigned __int8 *)(v51 + 55);
      else
        v55 = *(_QWORD *)(v51 + 40);
      if (v54 >= 0)
        v56 = (const void *)(v51 + 32);
      else
        v56 = *(const void **)(v51 + 32);
      if (v55 >= v52)
        v57 = v52;
      else
        v57 = v55;
      v58 = memcmp(v53, v56, v57);
      v59 = v52 < v55;
      if (v58)
        v59 = v58 < 0;
      if (!v59)
      {
        v60 = memcmp(v56, v53, v57);
        v61 = v55 < v52;
        if (v60)
          v61 = v60 < 0;
        if (!v61)
        {
          v176 = &v183;
          v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v198, &v183, (uint64_t)&std::piecewise_construct, (__int128 **)&v176);
          v63 = (std::string *)(v62 + 7);
          v64 = v188;
          if ((unint64_t)v188 >= v189)
            goto LABEL_109;
          if ((*((char *)v62 + 79) & 0x80000000) == 0)
          {
            v65 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
            v66 = v62[9];
            goto LABEL_107;
          }
          std::string::__init_copy_ctor_external(v188, (const std::string::value_type *)v62[7], v62[8]);
LABEL_113:
          v188 = v64 + 1;
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
LABEL_72:
            operator delete(v183.__r_.__value_.__l.__data_);
LABEL_73:
          v48 += 3;
          if (v48 == v49)
          {
            v48 = (void **)__p;
            break;
          }
          goto LABEL_74;
        }
        v51 += 8;
      }
      v51 = *(_QWORD *)v51;
      if (!v51)
        goto LABEL_104;
    }
  }
  if (v48)
  {
    v67 = v185;
    v68 = v48;
    if (v185 != v48)
    {
      do
      {
        if (*((char *)v67 - 1) < 0)
          operator delete(*(v67 - 3));
        v67 -= 3;
      }
      while (v67 != v48);
      v68 = __p;
    }
    v185 = v48;
    operator delete(v68);
  }
  v69 = v200;
  if (v200 != v201)
  {
    do
    {
      if (*((char *)v69 + 55) < 0)
        std::string::__init_copy_ctor_external(&v182, (const std::string::value_type *)v69[4], v69[5]);
      else
        v182 = *(std::string *)(v69 + 4);
      v180 = 0;
      v181 = 0;
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
      v72 = v181;
      if (!v181)
        goto LABEL_134;
      v73 = (unint64_t *)&v181->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
        if ((SHIBYTE(v182.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_135:
          v75 = (uint64_t *)v69[1];
          if (v75)
            goto LABEL_139;
          goto LABEL_141;
        }
      }
      else
      {
LABEL_134:
        if ((SHIBYTE(v182.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_135;
      }
      operator delete(v182.__r_.__value_.__l.__data_);
      v75 = (uint64_t *)v69[1];
      if (v75)
      {
        do
        {
LABEL_139:
          v76 = v75;
          v75 = (uint64_t *)*v75;
        }
        while (v75);
        goto LABEL_126;
      }
      do
      {
LABEL_141:
        v76 = (uint64_t *)v69[2];
        v77 = *v76 == (_QWORD)v69;
        v69 = v76;
      }
      while (!v77);
LABEL_126:
      v69 = v76;
    }
    while (v76 != v201);
  }
  v70 = (uint64_t *)v190;
  v71 = v191;
  while (v70 != v71)
  {
    v78 = (std::__shared_weak_count *)v70[1];
    v178 = *v70;
    v179 = v78;
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    MIL::Builder::BlockBuilder::RemoveOperation();
    v81 = v179;
    if (v179)
    {
      v82 = (unint64_t *)&v179->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v70 += 2;
  }
  MIL::Builder::BlockBuilder::GetOutputNames(v202);
  v85 = (char *)__p;
  v84 = (char *)v185;
  if (__p != v185)
  {
    do
    {
      MIL::Builder::BlockBuilder::RemoveOutput();
      v85 += 24;
    }
    while (v85 != v84);
  }
  v87 = (std::string *)v187;
  v86 = v188;
  if (v187 != v188)
  {
    do
    {
      MIL::Builder::BlockBuilder::AddOutput();
      ++v87;
    }
    while (v87 != v86);
  }
  MIL::Builder::BlockBuilder::GetOperations(v202);
  v171 = v183.__r_.__value_.__l.__size_;
  v88 = (MIL::Builder::OperationBuilder **)v183.__r_.__value_.__r.__words[0];
  if (v183.__r_.__value_.__r.__words[0] == v183.__r_.__value_.__l.__size_)
  {
    if (v183.__r_.__value_.__r.__words[0])
      goto LABEL_261;
    goto LABEL_271;
  }
  while (2)
  {
    MIL::Builder::OperationBuilder::GetOutputs(*v88);
    v89 = (MIL::Builder::Variable **)v176;
    v90 = v177;
    if (v176 == (std::string *)v177)
      goto LABEL_258;
    v91 = 0;
    v172 = v177;
    while (2)
    {
      v92 = MIL::Builder::Variable::GetName(*v89);
      v93 = (uint64_t)v194;
      if (!v194)
        goto LABEL_166;
      v94 = *(char *)(v92 + 23);
      if (v94 >= 0)
        v95 = *(unsigned __int8 *)(v92 + 23);
      else
        v95 = *(_QWORD *)(v92 + 8);
      if (v94 >= 0)
        v96 = (const void *)v92;
      else
        v96 = *(const void **)v92;
      while (2)
      {
        v97 = *(char *)(v93 + 55);
        if (v97 >= 0)
          v98 = *(unsigned __int8 *)(v93 + 55);
        else
          v98 = *(_QWORD *)(v93 + 40);
        if (v97 >= 0)
          v99 = (const void *)(v93 + 32);
        else
          v99 = *(const void **)(v93 + 32);
        if (v98 >= v95)
          v100 = v95;
        else
          v100 = v98;
        v101 = memcmp(v96, v99, v100);
        v102 = v95 < v98;
        if (v101)
          v102 = v101 < 0;
        if (v102)
        {
LABEL_174:
          v93 = *(_QWORD *)v93;
          if (!v93)
            goto LABEL_166;
          continue;
        }
        break;
      }
      v103 = memcmp(v99, v96, v100);
      v104 = v98 < v95;
      if (v103)
        v104 = v103 < 0;
      if (v104)
      {
        v93 += 8;
        goto LABEL_174;
      }
      v105 = MIL::Builder::Variable::GetName(*v89);
      v106 = v105;
      v107 = v88;
      v108 = (uint64_t)v194;
      v109 = (uint64_t *)&v194;
      v110 = (uint64_t *)&v194;
      if (!v194)
      {
LABEL_216:
        v90 = v172;
        v125 = (char *)operator new(0x50uLL);
        v88 = v107;
        v126 = (std::string *)(v125 + 32);
        if (*(char *)(v106 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v126, *(const std::string::value_type **)v106, *(_QWORD *)(v106 + 8));
        }
        else
        {
          v127 = *(_OWORD *)v106;
          *((_QWORD *)v125 + 6) = *(_QWORD *)(v106 + 16);
          *(_OWORD *)&v126->__r_.__value_.__l.__data_ = v127;
        }
        *((_QWORD *)v125 + 7) = 0;
        *((_QWORD *)v125 + 8) = 0;
        *((_QWORD *)v125 + 9) = 0;
        *(_QWORD *)v125 = 0;
        *((_QWORD *)v125 + 1) = 0;
        *((_QWORD *)v125 + 2) = v109;
        *v110 = (uint64_t)v125;
        v128 = v125;
        if (*v193)
        {
          v193 = (uint64_t **)*v193;
          v128 = (char *)*v110;
        }
        v129 = (uint64_t)v194;
        v128[24] = v128 == v194;
        if (v128 != (char *)v129)
        {
          do
          {
            v130 = *((_QWORD *)v128 + 2);
            if (*(_BYTE *)(v130 + 24))
              break;
            v131 = *(char **)(v130 + 16);
            v132 = *(_QWORD *)v131;
            if (*(_QWORD *)v131 == v130)
            {
              v135 = *((_QWORD *)v131 + 1);
              if (!v135 || (v136 = *(unsigned __int8 *)(v135 + 24), v133 = (_BYTE *)(v135 + 24), v136))
              {
                if (*(char **)v130 == v128)
                {
                  *(_BYTE *)(v130 + 24) = 1;
                  v131[24] = 0;
                  v139 = *(_QWORD *)(v130 + 8);
                  *(_QWORD *)v131 = v139;
                  if (v139)
                    goto LABEL_235;
                }
                else
                {
                  v137 = *(uint64_t **)(v130 + 8);
                  v138 = *v137;
                  *(_QWORD *)(v130 + 8) = *v137;
                  if (v138)
                  {
                    *(_QWORD *)(v138 + 16) = v130;
                    v131 = *(char **)(v130 + 16);
                  }
                  v137[2] = (uint64_t)v131;
                  *(_QWORD *)(*(_QWORD *)(v130 + 16) + 8 * (**(_QWORD **)(v130 + 16) != v130)) = v137;
                  *v137 = v130;
                  *(_QWORD *)(v130 + 16) = v137;
                  v131 = (char *)v137[2];
                  v130 = *(_QWORD *)v131;
                  *((_BYTE *)v137 + 24) = 1;
                  v131[24] = 0;
                  v139 = *(_QWORD *)(v130 + 8);
                  *(_QWORD *)v131 = v139;
                  if (v139)
LABEL_235:
                    *(_QWORD *)(v139 + 16) = v131;
                }
                *(_QWORD *)(v130 + 16) = *((_QWORD *)v131 + 2);
                *(_QWORD *)(*((_QWORD *)v131 + 2) + 8 * (**((_QWORD **)v131 + 2) != (_QWORD)v131)) = v130;
                *(_QWORD *)(v130 + 8) = v131;
LABEL_243:
                *((_QWORD *)v131 + 2) = v130;
                break;
              }
            }
            else if (!v132 || (v134 = *(unsigned __int8 *)(v132 + 24), v133 = (_BYTE *)(v132 + 24), v134))
            {
              if (*(char **)v130 == v128)
              {
                v144 = *((_QWORD *)v128 + 1);
                *(_QWORD *)v130 = v144;
                if (v144)
                {
                  *(_QWORD *)(v144 + 16) = v130;
                  v131 = *(char **)(v130 + 16);
                }
                *((_QWORD *)v128 + 2) = v131;
                *(_QWORD *)(*(_QWORD *)(v130 + 16) + 8 * (**(_QWORD **)(v130 + 16) != v130)) = v128;
                *((_QWORD *)v128 + 1) = v130;
                *(_QWORD *)(v130 + 16) = v128;
                v131 = (char *)*((_QWORD *)v128 + 2);
                v128[24] = 1;
                v131[24] = 0;
                v130 = *((_QWORD *)v131 + 1);
                v140 = *(char **)v130;
                *((_QWORD *)v131 + 1) = *(_QWORD *)v130;
                if (v140)
LABEL_241:
                  *((_QWORD *)v140 + 2) = v131;
              }
              else
              {
                *(_BYTE *)(v130 + 24) = 1;
                v131[24] = 0;
                v130 = *((_QWORD *)v131 + 1);
                v140 = *(char **)v130;
                *((_QWORD *)v131 + 1) = *(_QWORD *)v130;
                if (v140)
                  goto LABEL_241;
              }
              *(_QWORD *)(v130 + 16) = *((_QWORD *)v131 + 2);
              *(_QWORD *)(*((_QWORD *)v131 + 2) + 8 * (**((_QWORD **)v131 + 2) != (_QWORD)v131)) = v130;
              *(_QWORD *)v130 = v131;
              goto LABEL_243;
            }
            *(_BYTE *)(v130 + 24) = 1;
            v128 = v131;
            v131[24] = v131 == (char *)v129;
            *v133 = 1;
          }
          while (v131 != (char *)v129);
        }
        ++v195;
        if (v125[79] < 0)
          goto LABEL_238;
        goto LABEL_245;
      }
      v111 = *(char *)(v105 + 23);
      if (v111 >= 0)
        v112 = *(unsigned __int8 *)(v105 + 23);
      else
        v112 = *(_QWORD *)(v105 + 8);
      if (v111 >= 0)
        v113 = (const void *)v105;
      else
        v113 = *(const void **)v105;
      while (1)
      {
        while (1)
        {
          v109 = (uint64_t *)v108;
          v116 = *(const void **)(v108 + 32);
          v114 = v108 + 32;
          v115 = v116;
          v117 = *(char *)(v114 + 23);
          if (v117 >= 0)
            v118 = *(unsigned __int8 *)(v114 + 23);
          else
            v118 = *(_QWORD *)(v114 + 8);
          if (v117 >= 0)
            v119 = (const void *)v114;
          else
            v119 = v115;
          if (v118 >= v112)
            v120 = v112;
          else
            v120 = v118;
          v121 = memcmp(v113, v119, v120);
          v122 = v112 < v118;
          if (v121)
            v122 = v121 < 0;
          if (!v122)
            break;
          v108 = *v109;
          v110 = v109;
          if (!*v109)
            goto LABEL_216;
        }
        v123 = memcmp(v119, v113, v120);
        v124 = v118 < v112;
        if (v123)
          v124 = v123 < 0;
        if (!v124)
          break;
        v108 = v109[1];
        if (!v108)
        {
          v110 = v109 + 1;
          goto LABEL_216;
        }
      }
      v125 = (char *)v109;
      v88 = v107;
      v90 = v172;
      if ((*((char *)v109 + 79) & 0x80000000) == 0)
      {
LABEL_245:
        v174 = *(std::string *)(v125 + 56);
        goto LABEL_246;
      }
LABEL_238:
      std::string::__init_copy_ctor_external(&v174, *((const std::string::value_type **)v125 + 7), *((_QWORD *)v125 + 8));
LABEL_246:
      MIL::Builder::OperationBuilder::RenameOutput();
      v141 = v175;
      if (v175)
      {
        v142 = (unint64_t *)&v175->__shared_owners_;
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v174.__r_.__value_.__l.__data_);
LABEL_166:
      ++v91;
      if (++v89 != (MIL::Builder::Variable **)v90)
        continue;
      break;
    }
    v89 = (MIL::Builder::Variable **)v176;
LABEL_258:
    if (v89)
    {
      v177 = (__int128 *)v89;
      operator delete(v89);
    }
    v88 += 2;
    if (v88 != (MIL::Builder::OperationBuilder **)v171)
      continue;
    break;
  }
  v88 = (MIL::Builder::OperationBuilder **)v183.__r_.__value_.__r.__words[0];
  if (v183.__r_.__value_.__r.__words[0])
  {
LABEL_261:
    v145 = v183.__r_.__value_.__l.__size_;
    v146 = v88;
    if ((MIL::Builder::OperationBuilder **)v183.__r_.__value_.__l.__size_ != v88)
    {
      do
      {
        v147 = *(std::__shared_weak_count **)(v145 - 8);
        if (v147)
        {
          v148 = (unint64_t *)&v147->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        v145 -= 16;
      }
      while ((MIL::Builder::OperationBuilder **)v145 != v88);
      v146 = (MIL::Builder::OperationBuilder **)v183.__r_.__value_.__r.__words[0];
    }
    v183.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
    operator delete(v146);
  }
LABEL_271:
  MIL::Builder::BlockBuilder::CreateBlock(v202);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a4 + 80))(a4, &v173);
  v150 = v173;
  v173 = 0;
  if (v150)
    (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  v151 = (void **)__p;
  if (__p)
  {
    v152 = v185;
    v153 = __p;
    if (v185 != __p)
    {
      do
      {
        if (*((char *)v152 - 1) < 0)
          operator delete(*(v152 - 3));
        v152 -= 3;
      }
      while (v152 != v151);
      v153 = __p;
    }
    v185 = v151;
    operator delete(v153);
  }
  v154 = (std::string *)v187;
  if (v187)
  {
    v155 = v188;
    v156 = v187;
    if (v188 != v187)
    {
      do
      {
        if (SHIBYTE(v155[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155[-1].__r_.__value_.__l.__data_);
        --v155;
      }
      while (v155 != v154);
      v156 = v187;
    }
    v188 = v154;
    operator delete(v156);
  }
  v157 = v190;
  if (v190)
  {
    v158 = v191;
    v159 = v190;
    if (v191 != v190)
    {
      do
      {
        v160 = (std::__shared_weak_count *)*(v158 - 1);
        if (v160)
        {
          v161 = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        v158 -= 2;
      }
      while (v158 != v157);
      v159 = v190;
    }
    v191 = v157;
    operator delete(v159);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v193, (uint64_t)v194);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v196, v197[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v198, v199[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v200, v201[0]);
  v163 = v203;
  if (v203)
  {
    v164 = (unint64_t *)&v203->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v204;
  if (v204)
  {
    v167 = (unint64_t *)&v204->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  result = v207;
  v207 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19109CEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,void *a52)
{
  uint64_t v52;
  uint64_t v54;

  if (a42 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  std::vector<std::string>::~vector[abi:ne180100](&a49);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a52);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v52 - 256, *(_QWORD *)(v52 - 248));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v52 - 232, *(_QWORD *)(v52 - 224));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v52 - 208, *(_QWORD *)(v52 - 200));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v52 - 184, *(_QWORD *)(v52 - 176));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v52 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v52 - 144);
  v54 = *(_QWORD *)(v52 - 112);
  *(_QWORD *)(v52 - 112) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  _Unwind_Resume(a1);
}

MIL::Attributes::BuildInfo **std::unique_ptr<MIL::Attributes::BuildInfo>::~unique_ptr[abi:ne180100](MIL::Attributes::BuildInfo **a1)
{
  MIL::Attributes::BuildInfo *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Attributes::BuildInfo::~BuildInfo(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void Espresso::AOT::MakeIRProgramWithFunctions(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  MIL::IRObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::string::size_type v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  MIL::Attributes::BuildInfo *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  MIL::Builder::ProgramBuilder *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::runtime_error *exception;
  std::string __p;
  uint64_t v51;
  _QWORD v52[8];
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string::size_type v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  MIL::Builder::ProgramBuilder *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;

  v6 = (MIL::IRObject *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 40) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 48))(&v65);
  v62 = v65;
  v63 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::Make();
  if (v63)
  {
    v9 = &v63->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)v9);
    while (__stlxr(v10 - 1, (unint64_t *)v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(v6);
  v12 = (std::__shared_weak_count *)LocationPtr[1];
  v60 = *LocationPtr;
  v61 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  MIL::Builder::ProgramBuilder::SetLocation();
  if (v61)
  {
    v15 = &v61->__shared_owners_;
    do
      v16 = __ldaxr((unint64_t *)v15);
    while (__stlxr(v16 - 1, (unint64_t *)v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      v17 = *(uint64_t ***)(a1 + 16);
      if (!v17)
        goto LABEL_58;
      while (1)
      {
LABEL_19:
        (*(void (**)(uint64_t *__return_ptr))(*v17[5] + 232))(&v51);
        v18 = v65;
        v19 = v66;
        v58 = v65;
        v59 = v66;
        if (v66)
        {
          v20 = (unint64_t *)&v66->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = v59;
        if (!v59)
          break;
        v23 = (unint64_t *)&v59->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (v24)
          break;
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        if (a2)
          goto LABEL_27;
LABEL_28:
        v54 = v65;
        v55 = v66;
        if (v66)
        {
          v25 = (unint64_t *)&v66->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v52[7] = v51;
        if (v51)
        {
          v27 = (std::__shared_weak_count *)operator new();
          v28 = v51;
          v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E10;
          v27->__shared_owners_ = 0;
          v27->__shared_weak_owners_ = 0;
          v27[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
        }
        else
        {
          v27 = 0;
        }
        v53 = v27;
        v51 = 0;
        MIL::Builder::FunctionBuilder::Make();
        v56 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
          v29 = (std::__shared_weak_count *)operator new();
          v30 = __p.__r_.__value_.__r.__words[0];
          v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3078;
          v29->__shared_owners_ = 0;
          v29->__shared_weak_owners_ = 0;
          v29[1].__vftable = (std::__shared_weak_count_vtbl *)v30;
        }
        else
        {
          v29 = 0;
        }
        v57 = v29;
        __p.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::ProgramBuilder::AddFunction();
        v31 = v57;
        if (!v57)
          goto LABEL_41;
        v32 = (unint64_t *)&v57->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          __p.__r_.__value_.__r.__words[0] = 0;
        }
        else
        {
LABEL_41:
          __p.__r_.__value_.__r.__words[0] = 0;
        }
        v34 = v53;
        if (!v53)
          goto LABEL_46;
        v35 = (unint64_t *)&v53->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          v37 = v55;
          if (v55)
          {
LABEL_47:
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
        }
        else
        {
LABEL_46:
          v37 = v55;
          if (v55)
            goto LABEL_47;
        }
        v40 = v51;
        v51 = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        v17 = (uint64_t **)*v17;
        if (!v17)
          goto LABEL_58;
      }
      if (!a2)
        goto LABEL_28;
LABEL_27:
      Espresso::AOT::RemoveTensorAttributes(v65, v51);
      goto LABEL_28;
    }
  }
  v17 = *(uint64_t ***)(a1 + 16);
  if (v17)
    goto LABEL_19;
LABEL_58:
  MIL::Builder::ProgramBuilder::CreateProgram(v64);
  if (((*(uint64_t (**)(_QWORD *))(v52[0] + 16))(v52) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)v52);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "buildInfo");
  if (MIL::IRObject::TryGetAttribute())
  {
    MIL::Attributes::BuildInfo::Make();
    MIL::Attributes::BuildInfo::Replace();
    v41 = (MIL::Attributes::BuildInfo *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v41)
    {
      MIL::Attributes::BuildInfo::~BuildInfo(v41);
      MEMORY[0x19401CD90](v42, 0x20C4093837F09);
    }
  }
  v43 = v51;
  v51 = 0;
  *a3 = v43;
  MEMORY[0x19401B338](v52);
  v44 = v51;
  v51 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v64;
  v64 = 0;
  if (v45)
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)v45 + 8))(v45);
  v46 = v66;
  if (v66)
  {
    v47 = (unint64_t *)&v66->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_19109D670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v34;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x19401B338](v30);
      if (a15)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
        v34 = *(_QWORD *)(v32 - 104);
        *(_QWORD *)(v32 - 104) = 0;
        if (!v34)
        {
LABEL_8:
          std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v32 - 96);
          _Unwind_Resume(a1);
        }
      }
      else
      {
        v34 = *(_QWORD *)(v32 - 104);
        *(_QWORD *)(v32 - 104) = 0;
        if (!v34)
          goto LABEL_8;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v32 - 96);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t Espresso::AOT::IRDataTypeToByteSize(int a1)
{
  int v1;
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;
  std::string v10;

  v1 = a1 - 2;
  if ((a1 - 2) >= 0x16 || ((0x3EFFBDu >> v1) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::IRDataTypeToString();
    v4 = std::string::insert(&v8, 0, "Unsupported MIL IRDataType (");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v9, ")");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return qword_191A87750[v1];
}

void sub_19109D900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_9:
    __cxa_free_exception(v28);
    goto LABEL_10;
  }
LABEL_8:
  if (!v29)
    goto LABEL_10;
  goto LABEL_9;
}

void Espresso::AOT::AlignCalleeWithCallOp(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a1, unsigned __int8 **a2)
{
  const char *OpsetName;
  unint64_t v4;
  size_t v5;
  const char *v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void **v31;
  uint64_t v32;
  _QWORD ***v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  char *v44;
  _QWORD *v45;
  unint64_t i;
  uint64_t Name;
  uint64_t v48;
  char *v49;
  char **v50;
  char **v51;
  int v52;
  size_t v53;
  const void *v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  size_t v59;
  char *v60;
  size_t v61;
  int v62;
  _BOOL4 v63;
  int v64;
  _BOOL4 v65;
  _QWORD *v66;
  std::string *v67;
  __int128 v68;
  char *v69;
  char *v70;
  BOOL v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _BYTE *v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char *v96;
  char *v97;
  _QWORD *v98;
  _QWORD *v99;
  __int128 v100;
  _QWORD *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  const void **v109;
  std::string::size_type v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  const std::string::value_type *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  const std::string::value_type *v117;
  __int128 v118;
  MIL::Attributes::FlexibleShapeInfo *v119;
  __int128 v120;
  uint64_t v121;
  MIL::Attributes::FlexibleShapeInfo *v122;
  MIL::Attributes::FlexibleShapeInfo *v123;
  int64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  __int128 v131;
  __int128 v132;
  MIL::Attributes::FlexibleShapeInfo *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  std::string::size_type v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  const std::string::value_type *v143;
  unsigned __int8 *v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  MIL::Attributes::FlexibleShapeInfo *v148;
  __int128 v149;
  uint64_t v150;
  MIL::Attributes::FlexibleShapeInfo *v151;
  MIL::Attributes::FlexibleShapeInfo *v152;
  int64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  __int128 v160;
  __int128 v161;
  MIL::Attributes::FlexibleShapeInfo *v162;
  uint64_t *v163;
  MIL::Attributes::FlexibleShapeInfo *v164;
  MIL::Attributes::FlexibleShapeInfo *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unsigned __int8 *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned __int8 *v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  MIL::IRDictionaryValue *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 v195;
  size_t prime;
  int8x8_t v197;
  BOOL v198;
  unint64_t v199;
  uint8x8_t v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  MIL::Builder::FunctionBuilder *v204;
  void *v205;
  void *v206;
  uint64_t v207;
  _QWORD **v208;
  size_t v209;
  size_t v210;
  size_t v211;
  _QWORD *v212;
  size_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  size_t v217;
  _QWORD *v218;
  uint64_t *v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count_vtbl *v221;
  MIL::Attributes::FlexibleShapeInfo *v222;
  MIL::Attributes::FlexibleShapeInfo *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  MIL::Attributes::FlexibleShapeInfo *v228;
  unsigned __int8 *v229;
  char v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint8x8_t v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  std::__shared_weak_count_vtbl *v254;
  void **v255;
  void *v256;
  void **v257;
  void *v258;
  uint64_t *v259;
  uint64_t *v260;
  void **v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  void **v265;
  void **v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  void **v270;
  void **v271;
  void *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  MIL::Attributes::FlexibleShapeInfo *v276;
  MIL::Attributes::FlexibleShapeInfo *v277;
  MIL::Attributes::FlexibleShapeInfo *v278;
  void *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  unsigned __int8 *j;
  char *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  unsigned __int8 *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::string *v303;
  std::string *v304;
  unsigned __int8 *v305;
  unint64_t v306;
  unint64_t v307;
  uint8x8_t v308;
  unsigned __int8 *v309;
  unsigned __int8 *v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  void *v320;
  unint64_t v321;
  unint64_t v322;
  uint8x8_t v323;
  _QWORD *v324;
  unint64_t v325;
  char *v326;
  void *v327;
  std::__shared_weak_count *v328;
  uint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  const std::string *v335;
  const std::string *v336;
  char *v337;
  void *v338;
  uint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  uint8x8_t v342;
  uint64_t *v343;
  uint64_t *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  void *v354;
  unint64_t v355;
  unint64_t v356;
  uint8x8_t v357;
  _QWORD *v358;
  unint64_t v359;
  char *v360;
  void *v361;
  uint64_t EnumeratedShapes;
  uint64_t *v363;
  char *v364;
  char **v365;
  _QWORD *v366;
  char **v367;
  std::__shared_weak_count *v368;
  size_t v369;
  int8x8_t v370;
  BOOL v371;
  unint64_t v372;
  uint8x8_t v373;
  uint64_t v374;
  void *v375;
  void *v376;
  uint64_t v377;
  _QWORD **v378;
  size_t v379;
  size_t v380;
  size_t v381;
  _QWORD *v382;
  size_t v383;
  uint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  size_t v387;
  unsigned __int8 *k;
  std::string *v389;
  std::string *v390;
  unsigned __int8 *v391;
  unsigned __int8 *v392;
  unint64_t v393;
  unint64_t v394;
  uint8x8_t v395;
  unsigned __int8 *v396;
  unsigned __int8 *v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  void **v402;
  int v403;
  uint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  void *v407;
  unint64_t v408;
  unint64_t v409;
  uint8x8_t v410;
  unsigned __int8 **v411;
  unint64_t v412;
  char *v413;
  void *v414;
  char *v415;
  void *v416;
  void *v417;
  char *v418;
  void *v419;
  unint64_t *v420;
  unint64_t v421;
  char **v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  char *v426;
  void *v427;
  MIL::Attributes::FlexibleShapeInfo *v428;
  char *v429;
  char *v430;
  void *v431;
  char *v432;
  void *v433;
  void *v434;
  void **v435;
  void **v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  void *v440;
  std::runtime_error *v441;
  std::runtime_error *v442;
  std::runtime_error *v443;
  std::string *v444;
  __int128 v445;
  std::runtime_error *exception;
  std::string *v447;
  __int128 v448;
  unsigned __int8 *v449;
  unsigned __int8 *v450;
  uint64_t Operator;
  uint64_t v452;
  _QWORD *v453;
  _QWORD *v455;
  std::string v456;
  _BYTE __p[40];
  __int128 v458;
  float v459;
  uint64_t v460;
  uint64_t v461;
  std::__shared_weak_count_vtbl *v462;
  std::__shared_weak_count *v463;
  void *v464;
  __int128 v465;
  std::__shared_weak_count_vtbl *v466;
  __int128 v467;
  __int128 v468;
  float v469;
  uint64_t v470;
  std::__shared_weak_count *v471;
  uint64_t v472;
  std::__shared_weak_count *v473;
  MIL::Builder::FunctionBuilder *v474;
  MIL::IRValue *v475;
  std::__shared_weak_count *v476;
  void *v477;
  void **v478;
  uint64_t v479;
  std::__shared_weak_count *v480;
  std::string v481;
  char **v482;
  char *v483;
  uint64_t v484;
  MIL::Attributes::FlexibleShapeInfo *v485[2];
  MIL::Attributes::FlexibleShapeInfo *v486;
  __int128 *v487[2];
  char v488;
  uint64_t v489;
  std::__shared_weak_count *v490;
  __int128 v491;
  __int128 v492;
  int v493;
  void **__dst;
  size_t v495;
  int64_t v496;
  __int128 v497;
  __int128 v498;
  int v499;
  __int128 *v500[2];

  v497 = 0u;
  v498 = 0u;
  v499 = 1065353216;
  OpsetName = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(a1);
  v5 = v4;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = OpsetName;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v495 = v5;
    v496 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v496) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v6, v5);
  *((_BYTE *)p_dst + v5) = 0;
  (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)a1 + 40))(a1);
  MIL::MILContext::GetOpset();
  __p[23] = 4;
  strcpy(__p, "call");
  Operator = MIL::IROpset::GetOperator();
  v491 = 0u;
  v492 = 0u;
  v493 = 1065353216;
  v10 = *a2;
  v449 = a2[1];
  if (*a2 != v449)
  {
    do
    {
      v450 = v10;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 64))(&v489);
      if (!v489)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v447 = std::string::append((std::string *)&v467, " does not exist");
        v448 = *(_OWORD *)&v447->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v447->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v448;
        v447->__r_.__value_.__l.__size_ = 0;
        v447->__r_.__value_.__r.__words[2] = 0;
        v447->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v489 + 232))(&v467);
      *(_QWORD *)__p = v450;
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v497, v450, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v12 = v467;
      if ((_QWORD)v467)
      {
        v13 = (_QWORD *)operator new();
        v14 = v467;
        *v13 = &unk_1E2DC2E10;
        v13[1] = 0;
        v13[2] = 0;
        v13[3] = v14;
        *(_QWORD *)&v467 = 0;
        v15 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
        *((_QWORD *)v11 + 5) = v12;
        *((_QWORD *)v11 + 6) = v13;
        if (!v15)
          goto LABEL_20;
      }
      else
      {
        *(_QWORD *)&v467 = 0;
        v15 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
        *((_QWORD *)v11 + 5) = 0;
        *((_QWORD *)v11 + 6) = 0;
        if (!v15)
          goto LABEL_20;
      }
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v18 = v467;
        *(_QWORD *)&v467 = 0;
        if (!v18)
          goto LABEL_22;
LABEL_21:
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        goto LABEL_22;
      }
LABEL_20:
      v18 = v467;
      *(_QWORD *)&v467 = 0;
      if (v18)
        goto LABEL_21;
LABEL_22:
      *(_QWORD *)__p = v450;
      v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v497, v450, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v21 = *((_QWORD *)v19 + 5);
      v20 = (std::__shared_weak_count *)*((_QWORD *)v19 + 6);
      if (v20)
      {
        v22 = (unint64_t *)&v20->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = v490;
      v489 = v21;
      v490 = v20;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v489 + 32))(v489);
      v28 = v27[23];
      if ((v28 & 0x80u) == 0)
        v29 = v27[23];
      else
        v29 = *((_QWORD *)v27 + 1);
      v30 = HIBYTE(v496);
      if (v496 < 0)
        v30 = v495;
      if (v29 != v30)
        goto LABEL_882;
      if (v496 >= 0)
        v31 = (void **)&__dst;
      else
        v31 = __dst;
      if ((v28 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v27, v31, *((_QWORD *)v27 + 1)))
          goto LABEL_882;
      }
      else if (v27[23])
      {
        while (*v27 == *(unsigned __int8 *)v31)
        {
          ++v27;
          v31 = (void **)((char *)v31 + 1);
          if (!--v28)
            goto LABEL_45;
        }
LABEL_882:
        v442 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v442, "Entry point function has unexpected opset");
        __cxa_throw(v442, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
LABEL_45:
      v32 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v489 + 48))(v489, v31);
      v33 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 64))(v32);
      v35 = **v33;
      v34 = (*v33)[1];
      v453 = v34;
      while (v35 != v34)
      {
        v455 = v35;
        v36 = *v35;
        v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v35 + 64))(*v35);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 128))(v37))
          goto LABEL_46;
        (*(void (**)(__int128 **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)Operator + 120))(v487, Operator, v36);
        v485[1] = 0;
        v485[0] = 0;
        v486 = 0;
        v483 = 0;
        v484 = 0;
        v482 = &v483;
        v38 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 160))(v36);
        v452 = v36;
        v39 = v38 + 1;
        v40 = (_QWORD *)*v38;
        if ((_QWORD *)*v38 != v38 + 1)
        {
          do
          {
            Name = MIL::IRArgument::GetName(*(MIL::IRArgument **)v40[7]);
            v48 = Name;
            v49 = v483;
            v50 = &v483;
            v51 = &v483;
            if (v483)
            {
              v52 = *(char *)(Name + 23);
              if (v52 >= 0)
                v53 = *(unsigned __int8 *)(Name + 23);
              else
                v53 = *(_QWORD *)(Name + 8);
              if (v52 >= 0)
                v54 = (const void *)Name;
              else
                v54 = *(const void **)Name;
              while (1)
              {
                while (1)
                {
                  v50 = (char **)v49;
                  v57 = (char *)*((_QWORD *)v49 + 4);
                  v55 = v49 + 32;
                  v56 = v57;
                  v58 = v55[23];
                  if (v58 >= 0)
                    v59 = v55[23];
                  else
                    v59 = *((_QWORD *)v55 + 1);
                  if (v58 >= 0)
                    v60 = v55;
                  else
                    v60 = v56;
                  if (v59 >= v53)
                    v61 = v53;
                  else
                    v61 = v59;
                  v62 = memcmp(v54, v60, v61);
                  v63 = v53 < v59;
                  if (v62)
                    v63 = v62 < 0;
                  if (!v63)
                    break;
                  v49 = *v50;
                  v51 = v50;
                  if (!*v50)
                    goto LABEL_79;
                }
                v64 = memcmp(v60, v54, v61);
                v65 = v59 < v53;
                if (v64)
                  v65 = v64 < 0;
                if (!v65)
                  break;
                v49 = v50[1];
                if (!v49)
                {
                  v51 = v50 + 1;
                  goto LABEL_79;
                }
              }
              v66 = v50;
              if ((v52 & 0x80) != 0)
              {
LABEL_102:
                std::string::__init_copy_ctor_external(&v481, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
                goto LABEL_110;
              }
            }
            else
            {
LABEL_79:
              v66 = operator new(0x50uLL);
              v67 = (std::string *)(v66 + 4);
              if (*(char *)(v48 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
              }
              else
              {
                v68 = *(_OWORD *)v48;
                v66[6] = *(_QWORD *)(v48 + 16);
                *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
              }
              v66[7] = 0;
              v66[8] = 0;
              v66[9] = 0;
              *v66 = 0;
              v66[1] = 0;
              v66[2] = v50;
              *v51 = (char *)v66;
              v69 = (char *)v66;
              if (*v482)
              {
                v482 = (char **)*v482;
                v69 = *v51;
              }
              v70 = v483;
              v71 = v69 == v483;
              v69[24] = v69 == v483;
              if (!v71)
              {
                do
                {
                  v72 = *((_QWORD *)v69 + 2);
                  if (*(_BYTE *)(v72 + 24))
                    break;
                  v73 = *(char **)(v72 + 16);
                  v74 = *(_QWORD *)v73;
                  if (*(_QWORD *)v73 == v72)
                  {
                    v77 = *((_QWORD *)v73 + 1);
                    if (!v77 || (v78 = *(unsigned __int8 *)(v77 + 24), v75 = (_BYTE *)(v77 + 24), v78))
                    {
                      if (*(char **)v72 == v69)
                      {
                        *(_BYTE *)(v72 + 24) = 1;
                        v73[24] = 0;
                        v81 = *(_QWORD *)(v72 + 8);
                        *(_QWORD *)v73 = v81;
                        if (v81)
                          goto LABEL_99;
                      }
                      else
                      {
                        v79 = *(uint64_t **)(v72 + 8);
                        v80 = *v79;
                        *(_QWORD *)(v72 + 8) = *v79;
                        if (v80)
                        {
                          *(_QWORD *)(v80 + 16) = v72;
                          v73 = *(char **)(v72 + 16);
                        }
                        v79[2] = (uint64_t)v73;
                        *(_QWORD *)(*(_QWORD *)(v72 + 16) + 8 * (**(_QWORD **)(v72 + 16) != v72)) = v79;
                        *v79 = v72;
                        *(_QWORD *)(v72 + 16) = v79;
                        v73 = (char *)v79[2];
                        v72 = *(_QWORD *)v73;
                        *((_BYTE *)v79 + 24) = 1;
                        v73[24] = 0;
                        v81 = *(_QWORD *)(v72 + 8);
                        *(_QWORD *)v73 = v81;
                        if (v81)
LABEL_99:
                          *(_QWORD *)(v81 + 16) = v73;
                      }
                      *(_QWORD *)(v72 + 16) = *((_QWORD *)v73 + 2);
                      *(_QWORD *)(*((_QWORD *)v73 + 2) + 8 * (**((_QWORD **)v73 + 2) != (_QWORD)v73)) = v72;
                      *(_QWORD *)(v72 + 8) = v73;
LABEL_107:
                      *((_QWORD *)v73 + 2) = v72;
                      break;
                    }
                  }
                  else if (!v74 || (v76 = *(unsigned __int8 *)(v74 + 24), v75 = (_BYTE *)(v74 + 24), v76))
                  {
                    if (*(char **)v72 == v69)
                    {
                      v136 = *((_QWORD *)v69 + 1);
                      *(_QWORD *)v72 = v136;
                      if (v136)
                      {
                        *(_QWORD *)(v136 + 16) = v72;
                        v73 = *(char **)(v72 + 16);
                      }
                      *((_QWORD *)v69 + 2) = v73;
                      *(_QWORD *)(*(_QWORD *)(v72 + 16) + 8 * (**(_QWORD **)(v72 + 16) != v72)) = v69;
                      *((_QWORD *)v69 + 1) = v72;
                      *(_QWORD *)(v72 + 16) = v69;
                      v73 = (char *)*((_QWORD *)v69 + 2);
                      v69[24] = 1;
                      v73[24] = 0;
                      v72 = *((_QWORD *)v73 + 1);
                      v82 = *(char **)v72;
                      *((_QWORD *)v73 + 1) = *(_QWORD *)v72;
                      if (v82)
LABEL_105:
                        *((_QWORD *)v82 + 2) = v73;
                    }
                    else
                    {
                      *(_BYTE *)(v72 + 24) = 1;
                      v73[24] = 0;
                      v72 = *((_QWORD *)v73 + 1);
                      v82 = *(char **)v72;
                      *((_QWORD *)v73 + 1) = *(_QWORD *)v72;
                      if (v82)
                        goto LABEL_105;
                    }
                    *(_QWORD *)(v72 + 16) = *((_QWORD *)v73 + 2);
                    *(_QWORD *)(*((_QWORD *)v73 + 2) + 8 * (**((_QWORD **)v73 + 2) != (_QWORD)v73)) = v72;
                    *(_QWORD *)v72 = v73;
                    goto LABEL_107;
                  }
                  *(_BYTE *)(v72 + 24) = 1;
                  v69 = v73;
                  v73[24] = v73 == v70;
                  *v75 = 1;
                }
                while (v73 != v70);
              }
              ++v484;
              if ((*(_BYTE *)(v48 + 23) & 0x80) != 0)
                goto LABEL_102;
            }
            v83 = *(_OWORD *)v48;
            v481.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
            *(_OWORD *)&v481.__r_.__value_.__l.__data_ = v83;
LABEL_110:
            MIL::IRArgument::Make();
            *(_QWORD *)__p = v467;
            if ((_QWORD)v467)
            {
              v84 = (_QWORD *)operator new();
              v85 = v467;
              *v84 = &unk_1E2DC2DD8;
              v84[1] = 0;
              v84[2] = 0;
              v84[3] = v85;
              *(_QWORD *)&__p[8] = v84;
              *(_QWORD *)&v467 = 0;
              v86 = (_QWORD *)v66[8];
              v87 = v66[9];
              if ((unint64_t)v86 < v87)
                goto LABEL_112;
            }
            else
            {
              v84 = 0;
              *(_QWORD *)&__p[8] = 0;
              *(_QWORD *)&v467 = 0;
              v86 = (_QWORD *)v66[8];
              v87 = v66[9];
              if ((unint64_t)v86 < v87)
              {
LABEL_112:
                *v86 = *(_QWORD *)__p;
                v86[1] = v84;
                *(_QWORD *)__p = 0;
                *(_QWORD *)&__p[8] = 0;
                v88 = v86 + 2;
                goto LABEL_134;
              }
            }
            v89 = v66[7];
            v90 = (char *)v86 - v89;
            v91 = ((uint64_t)v86 - v89) >> 4;
            v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 60)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v93 = v87 - v89;
            if (v93 >> 3 > v92)
              v92 = v93 >> 3;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
              v94 = 0xFFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            if (v94 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v95 = operator new(16 * v94);
            v96 = (char *)v95 + 16 * v91;
            v97 = (char *)v95 + 16 * v94;
            *(_QWORD *)v96 = *(_QWORD *)__p;
            v88 = v96 + 16;
            *(_QWORD *)&v90[(_QWORD)v95 + 8] = v84;
            *(_QWORD *)__p = 0;
            *(_QWORD *)&__p[8] = 0;
            v98 = (_QWORD *)v66[7];
            v99 = (_QWORD *)v66[8];
            if (v99 == v98)
            {
              v66[7] = v96;
              v66[8] = v88;
              v66[9] = v97;
            }
            else
            {
              do
              {
                v100 = *((_OWORD *)v99 - 1);
                v99 -= 2;
                *((_OWORD *)v96 - 1) = v100;
                v96 -= 16;
                *v99 = 0;
                v99[1] = 0;
              }
              while (v99 != v98);
              v99 = (_QWORD *)v66[7];
              v101 = (_QWORD *)v66[8];
              v66[7] = v96;
              v66[8] = v88;
              v66[9] = v97;
              while (v101 != v99)
              {
                v102 = (std::__shared_weak_count *)*(v101 - 1);
                if (v102)
                {
                  v103 = (unint64_t *)&v102->__shared_owners_;
                  do
                    v104 = __ldaxr(v103);
                  while (__stlxr(v104 - 1, v103));
                  if (!v104)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
                v101 -= 2;
              }
            }
            if (v99)
              operator delete(v99);
LABEL_134:
            v66[8] = v88;
            v105 = *(std::__shared_weak_count **)&__p[8];
            if (!*(_QWORD *)&__p[8])
              goto LABEL_138;
            v106 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (v107)
            {
LABEL_138:
              v108 = v467;
              *(_QWORD *)&v467 = 0;
              if (!v108)
                goto LABEL_140;
LABEL_139:
              (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
              goto LABEL_140;
            }
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
            v108 = v467;
            *(_QWORD *)&v467 = 0;
            if (v108)
              goto LABEL_139;
LABEL_140:
            if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v481.__r_.__value_.__l.__data_);
            v109 = (const void **)(v40 + 4);
            v110 = v40[5];
            if (*((char *)v40 + 55) >= 0)
              v111 = *((unsigned __int8 *)v40 + 55);
            else
              v111 = v40[5];
            v112 = *(unsigned __int8 *)(v48 + 23);
            v113 = (char)v112;
            if ((v112 & 0x80u) != 0)
              v112 = *(_QWORD *)(v48 + 8);
            if (v111 == v112)
            {
              if (v113 >= 0)
                v114 = (const std::string::value_type *)v48;
              else
                v114 = *(const std::string::value_type **)v48;
              if ((*((_BYTE *)v40 + 55) & 0x80) != 0)
              {
                v117 = (const std::string::value_type *)*v109;
                if (!memcmp(*v109, v114, v40[5]))
                  goto LABEL_193;
                goto LABEL_163;
              }
              if (!*((_BYTE *)v40 + 55))
                goto LABEL_193;
              v115 = (unsigned __int8 *)(v40 + 4);
              v116 = *((unsigned __int8 *)v40 + 55);
              while (*v115 == *(unsigned __int8 *)v114)
              {
                ++v115;
                ++v114;
                if (!--v116)
                  goto LABEL_193;
              }
            }
            if ((*((_BYTE *)v40 + 55) & 0x80) == 0)
            {
              *(_OWORD *)__p = *(_OWORD *)v109;
              *(_QWORD *)&__p[16] = v40[6];
              goto LABEL_164;
            }
            v117 = (const std::string::value_type *)*v109;
LABEL_163:
            std::string::__init_copy_ctor_external((std::string *)__p, v117, v110);
LABEL_164:
            if (*(char *)(v48 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[24], *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
            }
            else
            {
              v118 = *(_OWORD *)v48;
              *(_QWORD *)&v458 = *(_QWORD *)(v48 + 16);
              *(_OWORD *)&__p[24] = v118;
            }
            v119 = v485[1];
            if (v485[1] >= v486)
            {
              v123 = v485[0];
              v124 = v485[1] - v485[0];
              v125 = 0xAAAAAAAAAAAAAAABLL * ((v485[1] - v485[0]) >> 4);
              v126 = v125 + 1;
              if (v125 + 1 > 0x555555555555555)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v486 - v485[0]) >> 4) > v126)
                v126 = 0x5555555555555556 * ((v486 - v485[0]) >> 4);
              if (0xAAAAAAAAAAAAAAABLL * ((v486 - v485[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                v127 = 0x555555555555555;
              else
                v127 = v126;
              if (v127)
              {
                if (v127 > 0x555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v128 = (char *)operator new(48 * v127);
              }
              else
              {
                v128 = 0;
              }
              v129 = &v128[48 * v125];
              *(_OWORD *)v129 = *(_OWORD *)__p;
              *((_QWORD *)v129 + 2) = *(_QWORD *)&__p[16];
              memset(__p, 0, 24);
              v130 = &v128[v124];
              *(_OWORD *)(v130 + 24) = *(_OWORD *)&__p[24];
              *((_QWORD *)v130 + 5) = v458;
              *(_QWORD *)&__p[24] = 0;
              *(_QWORD *)&__p[32] = 0;
              v122 = (MIL::Attributes::FlexibleShapeInfo *)(v129 + 48);
              *(_QWORD *)&v458 = 0;
              if (v119 != v123)
              {
                do
                {
                  v131 = *((_OWORD *)v119 - 3);
                  *((_QWORD *)v129 - 4) = *((_QWORD *)v119 - 4);
                  *((_OWORD *)v129 - 3) = v131;
                  *((_QWORD *)v119 - 5) = 0;
                  *((_QWORD *)v119 - 4) = 0;
                  *((_QWORD *)v119 - 6) = 0;
                  v132 = *(_OWORD *)((char *)v119 - 24);
                  *((_QWORD *)v129 - 1) = *((_QWORD *)v119 - 1);
                  *(_OWORD *)(v129 - 24) = v132;
                  v129 -= 48;
                  *((_QWORD *)v119 - 2) = 0;
                  *((_QWORD *)v119 - 1) = 0;
                  *((_QWORD *)v119 - 3) = 0;
                  v119 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v119 - 48);
                }
                while (v119 != v123);
                v119 = v485[0];
                v133 = v485[1];
                v485[0] = (MIL::Attributes::FlexibleShapeInfo *)v129;
                v485[1] = v122;
                v486 = (MIL::Attributes::FlexibleShapeInfo *)&v128[48 * v127];
                while (2)
                {
                  if (v133 == v119)
                    goto LABEL_189;
                  if (*((char *)v133 - 1) < 0)
                  {
                    operator delete(*((void **)v133 - 3));
                    if (*((char *)v133 - 25) < 0)
                      goto LABEL_187;
                  }
                  else if (*((char *)v133 - 25) < 0)
                  {
LABEL_187:
                    operator delete(*((void **)v133 - 6));
                  }
                  v133 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v133 - 48);
                  continue;
                }
              }
              v485[0] = (MIL::Attributes::FlexibleShapeInfo *)&v128[48 * v125];
              v485[1] = (MIL::Attributes::FlexibleShapeInfo *)(v129 + 48);
              v486 = (MIL::Attributes::FlexibleShapeInfo *)&v128[48 * v127];
LABEL_189:
              if (v119)
                operator delete(v119);
            }
            else
            {
              v120 = *(_OWORD *)__p;
              *((_QWORD *)v485[1] + 2) = *(_QWORD *)&__p[16];
              *(_OWORD *)v119 = v120;
              memset(__p, 0, 24);
              v121 = v458;
              *(_OWORD *)((char *)v119 + 24) = *(_OWORD *)&__p[24];
              *((_QWORD *)v119 + 5) = v121;
              *(_QWORD *)&__p[32] = 0;
              *(_QWORD *)&v458 = 0;
              *(_QWORD *)&__p[24] = 0;
              v122 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v119 + 48);
            }
            v485[1] = v122;
            if (SBYTE7(v458) < 0)
            {
              operator delete(*(void **)&__p[24]);
              if ((__p[23] & 0x80000000) == 0)
              {
LABEL_193:
                v134 = (_QWORD *)v40[1];
                if (v134)
                  goto LABEL_197;
                goto LABEL_199;
              }
            }
            else if ((__p[23] & 0x80000000) == 0)
            {
              goto LABEL_193;
            }
            operator delete(*(void **)__p);
            v134 = (_QWORD *)v40[1];
            if (v134)
            {
              do
              {
LABEL_197:
                v135 = v134;
                v134 = (_QWORD *)*v134;
              }
              while (v134);
              goto LABEL_53;
            }
            do
            {
LABEL_199:
              v135 = (_QWORD *)v40[2];
              v71 = *v135 == (_QWORD)v40;
              v40 = v135;
            }
            while (!v71);
LABEL_53:
            v40 = v135;
          }
          while (v135 != v39);
        }
        (*(void (**)(uint64_t, char ***))(*(_QWORD *)v452 + 168))(v452, &v482);
        (*(void (**)(uint64_t *__return_ptr, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, __int128 **))(*(_QWORD *)a1 + 64))(&v479, a1, v487);
        if (!v479)
        {
          v443 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v444 = std::string::append((std::string *)&v467, " does not exist");
          v445 = *(_OWORD *)&v444->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v444->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v445;
          v444->__r_.__value_.__l.__size_ = 0;
          v444->__r_.__value_.__r.__words[2] = 0;
          v444->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v443, (const std::string *)__p);
          __cxa_throw(v443, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v452 + 200))(&v477, v452);
        v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v479 + 48))(v479);
        v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 88))(v41);
        v44 = (char *)v477;
        v43 = v478;
        if (v478 != v477)
        {
          v45 = (_QWORD *)v42;
          for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - v44) >> 3); ++i)
          {
            v137 = *v45 + 24 * i;
            v138 = &v44[24 * i];
            v139 = *(_QWORD *)(v137 + 8);
            if (*(char *)(v137 + 23) >= 0)
              v140 = *(unsigned __int8 *)(v137 + 23);
            else
              v140 = *(_QWORD *)(v137 + 8);
            v141 = v138[23];
            v142 = (char)v141;
            if ((v141 & 0x80u) != 0)
              v141 = *((_QWORD *)v138 + 1);
            if (v140 == v141)
            {
              if (v142 >= 0)
                v143 = &v44[24 * i];
              else
                v143 = *(const std::string::value_type **)v138;
              if ((*(_BYTE *)(v137 + 23) & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v137, v143, *(_QWORD *)(v137 + 8)))
                  continue;
                goto LABEL_229;
              }
              if (!*(_BYTE *)(v137 + 23))
                continue;
              v144 = (unsigned __int8 *)(*v45 + 24 * i);
              v145 = *(unsigned __int8 *)(v137 + 23);
              while (*v144 == *(unsigned __int8 *)v143)
              {
                ++v144;
                ++v143;
                if (!--v145)
                  goto LABEL_210;
              }
            }
            if ((*(_BYTE *)(v137 + 23) & 0x80) == 0)
            {
              v146 = *(_OWORD *)v137;
              *(_QWORD *)&__p[16] = *(_QWORD *)(v137 + 16);
              *(_OWORD *)__p = v146;
              goto LABEL_230;
            }
LABEL_229:
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v137, v139);
LABEL_230:
            if (v138[23] < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[24], *(const std::string::value_type **)v138, *((_QWORD *)v138 + 1));
            }
            else
            {
              v147 = *(_OWORD *)v138;
              *(_QWORD *)&v458 = *((_QWORD *)v138 + 2);
              *(_OWORD *)&__p[24] = v147;
            }
            v148 = v485[1];
            if (v485[1] >= v486)
            {
              v152 = v485[0];
              v153 = v485[1] - v485[0];
              v154 = 0xAAAAAAAAAAAAAAABLL * ((v485[1] - v485[0]) >> 4);
              v155 = v154 + 1;
              if (v154 + 1 > 0x555555555555555)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v486 - v485[0]) >> 4) > v155)
                v155 = 0x5555555555555556 * ((v486 - v485[0]) >> 4);
              if (0xAAAAAAAAAAAAAAABLL * ((v486 - v485[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                v156 = 0x555555555555555;
              else
                v156 = v155;
              if (v156)
              {
                if (v156 > 0x555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v157 = (char *)operator new(48 * v156);
              }
              else
              {
                v157 = 0;
              }
              v158 = &v157[48 * v154];
              *(_OWORD *)v158 = *(_OWORD *)__p;
              *((_QWORD *)v158 + 2) = *(_QWORD *)&__p[16];
              memset(__p, 0, 24);
              v159 = &v157[v153];
              *(_OWORD *)(v159 + 24) = *(_OWORD *)&__p[24];
              *((_QWORD *)v159 + 5) = v458;
              *(_QWORD *)&__p[24] = 0;
              *(_QWORD *)&__p[32] = 0;
              v151 = (MIL::Attributes::FlexibleShapeInfo *)(v158 + 48);
              *(_QWORD *)&v458 = 0;
              if (v148 != v152)
              {
                do
                {
                  v160 = *((_OWORD *)v148 - 3);
                  *((_QWORD *)v158 - 4) = *((_QWORD *)v148 - 4);
                  *((_OWORD *)v158 - 3) = v160;
                  *((_QWORD *)v148 - 5) = 0;
                  *((_QWORD *)v148 - 4) = 0;
                  *((_QWORD *)v148 - 6) = 0;
                  v161 = *(_OWORD *)((char *)v148 - 24);
                  *((_QWORD *)v158 - 1) = *((_QWORD *)v148 - 1);
                  *(_OWORD *)(v158 - 24) = v161;
                  v158 -= 48;
                  *((_QWORD *)v148 - 2) = 0;
                  *((_QWORD *)v148 - 1) = 0;
                  *((_QWORD *)v148 - 3) = 0;
                  v148 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v148 - 48);
                }
                while (v148 != v152);
                v148 = v485[0];
                v162 = v485[1];
                v485[0] = (MIL::Attributes::FlexibleShapeInfo *)v158;
                v485[1] = v151;
                v486 = (MIL::Attributes::FlexibleShapeInfo *)&v157[48 * v156];
                while (2)
                {
                  if (v162 == v148)
                    goto LABEL_255;
                  if (*((char *)v162 - 1) < 0)
                  {
                    operator delete(*((void **)v162 - 3));
                    if (*((char *)v162 - 25) < 0)
                      goto LABEL_253;
                  }
                  else if (*((char *)v162 - 25) < 0)
                  {
LABEL_253:
                    operator delete(*((void **)v162 - 6));
                  }
                  v162 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v162 - 48);
                  continue;
                }
              }
              v485[0] = (MIL::Attributes::FlexibleShapeInfo *)&v157[48 * v154];
              v485[1] = (MIL::Attributes::FlexibleShapeInfo *)(v158 + 48);
              v486 = (MIL::Attributes::FlexibleShapeInfo *)&v157[48 * v156];
LABEL_255:
              if (v148)
                operator delete(v148);
            }
            else
            {
              v149 = *(_OWORD *)__p;
              *((_QWORD *)v485[1] + 2) = *(_QWORD *)&__p[16];
              *(_OWORD *)v148 = v149;
              memset(__p, 0, 24);
              v150 = v458;
              *(_OWORD *)((char *)v148 + 24) = *(_OWORD *)&__p[24];
              *((_QWORD *)v148 + 5) = v150;
              *(_QWORD *)&__p[32] = 0;
              *(_QWORD *)&v458 = 0;
              *(_QWORD *)&__p[24] = 0;
              v151 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v148 + 48);
            }
            v485[1] = v151;
            if (SBYTE7(v458) < 0)
            {
              operator delete(*(void **)&__p[24]);
              if ((__p[23] & 0x80000000) != 0)
                goto LABEL_259;
            }
            else if ((__p[23] & 0x80000000) != 0)
            {
LABEL_259:
              operator delete(*(void **)__p);
            }
            v44 = (char *)v477;
            v43 = v478;
LABEL_210:
            ;
          }
        }
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v491, (uint64_t)v487))
        {
          *(_QWORD *)__p = v487;
          v163 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v491, (uint64_t)v487, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
          v164 = v485[1];
          v165 = v485[0];
          v166 = v163[5];
          if (v485[1] - v485[0] != v163[6] - v166)
            goto LABEL_875;
          while (v165 != v164)
          {
            v167 = *((unsigned __int8 *)v165 + 23);
            if ((v167 & 0x80u) == 0)
              v168 = *((unsigned __int8 *)v165 + 23);
            else
              v168 = *((_QWORD *)v165 + 1);
            v169 = *(unsigned __int8 *)(v166 + 23);
            v170 = (char)v169;
            if ((v169 & 0x80u) != 0)
              v169 = *(_QWORD *)(v166 + 8);
            if (v168 != v169)
              goto LABEL_875;
            if (v170 >= 0)
              v171 = (unsigned __int8 *)v166;
            else
              v171 = *(unsigned __int8 **)v166;
            if ((v167 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v165, v171, *((_QWORD *)v165 + 1)))
                goto LABEL_875;
            }
            else if (*((_BYTE *)v165 + 23))
            {
              v172 = 0;
              while (*((unsigned __int8 *)v165 + v172) == v171[v172])
              {
                if (v167 == ++v172)
                  goto LABEL_282;
              }
LABEL_875:
              v441 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v441, "Multiple call ops call the same callee with different argument names.");
              __cxa_throw(v441, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
LABEL_282:
            v173 = *((unsigned __int8 *)v165 + 47);
            if ((v173 & 0x80u) == 0)
              v174 = *((unsigned __int8 *)v165 + 47);
            else
              v174 = *((_QWORD *)v165 + 4);
            v175 = *(unsigned __int8 *)(v166 + 47);
            v176 = (char)v175;
            if ((v175 & 0x80u) != 0)
              v175 = *(_QWORD *)(v166 + 32);
            if (v174 != v175)
              goto LABEL_875;
            if (v176 >= 0)
              v177 = (unsigned __int8 *)(v166 + 24);
            else
              v177 = *(unsigned __int8 **)(v166 + 24);
            if ((v173 & 0x80) != 0)
            {
              if (memcmp(*((const void **)v165 + 3), v177, *((_QWORD *)v165 + 4)))
                goto LABEL_875;
            }
            else if (*((_BYTE *)v165 + 47))
            {
              v178 = 0;
              while (*((unsigned __int8 *)v165 + v178 + 24) == v177[v178])
              {
                if (v173 == ++v178)
                  goto LABEL_264;
              }
              goto LABEL_875;
            }
LABEL_264:
            v165 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v165 + 48);
            v166 += 48;
          }
        }
        *(_QWORD *)__p = operator new(0x20uLL);
        *(_OWORD *)&__p[8] = xmmword_191A7C2C0;
        strcpy(*(char **)__p, "NeuralEngineOptimizedIOBuffer");
        MIL::IRObject::TryGetAttributeSharedPtr();
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (!v475)
            goto LABEL_312;
LABEL_299:
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v472);
          v470 = v479;
          v471 = v480;
          if (v480)
          {
            v179 = (unint64_t *)&v480->__shared_owners_;
            do
              v180 = __ldxr(v179);
            while (__stxr(v180 + 1, v179));
          }
          MIL::Builder::FunctionBuilder::Make();
          v181 = v471;
          if (!v471)
            goto LABEL_306;
          v182 = (unint64_t *)&v471->__shared_owners_;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
            v184 = v473;
            if (!v473)
              goto LABEL_316;
          }
          else
          {
LABEL_306:
            v184 = v473;
            if (!v473)
              goto LABEL_316;
          }
          v185 = (unint64_t *)&v184->__shared_owners_;
          do
            v186 = __ldaxr(v185);
          while (__stlxr(v186 - 1, v185));
          if (!v186)
          {
            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
            std::__shared_weak_count::__release_weak(v184);
          }
LABEL_316:
          memset(__p, 0, 32);
          *(_DWORD *)&__p[32] = 1065353216;
          v192 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(v475);
          v193 = MIL::IRDictionaryValue::begin(v192);
          v194 = MIL::IRDictionaryValue::end(v192);
          while (v193 != v194)
          {
            MIL::IRValue::AsTensor(*(MIL::IRValue **)(v193 + 32));
            v195 = MIL::IRValue::GetScalar<BOOL>();
            MIL::IRValue::AsTensor(*(MIL::IRValue **)(v193 + 16));
            MIL::IRValue::GetScalar<std::string>();
            v500[0] = &v467;
            std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)&v467, (uint64_t)&std::piecewise_construct, v500)[40] = v195;
            if (SBYTE7(v468) < 0)
              operator delete((void *)v467);
            v193 = *(_QWORD *)v193;
          }
          v467 = 0u;
          v468 = 0u;
          v469 = *(float *)&__p[32];
          prime = *(_QWORD *)&__p[8];
          if (*(_QWORD *)&__p[8] == 1)
          {
            prime = 2;
LABEL_347:
            v205 = operator new(8 * prime);
            v206 = (void *)v467;
            *(_QWORD *)&v467 = v205;
            if (v206)
              operator delete(v206);
            v207 = 0;
            *((_QWORD *)&v467 + 1) = prime;
            do
              *(_QWORD *)(v467 + 8 * v207++) = 0;
            while (prime != v207);
            v208 = (_QWORD **)v468;
            if (!(_QWORD)v468)
              goto LABEL_371;
            v209 = *(_QWORD *)(v468 + 8);
            v210 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v211 = v209 & v210;
              *(_QWORD *)(v467 + 8 * v211) = &v468;
              while (1)
              {
                v212 = *v208;
                if (!*v208)
                  break;
                v213 = v212[1] & v210;
                if (v213 == v211)
                {
                  v208 = (_QWORD **)*v208;
                }
                else if (*(_QWORD *)(v467 + 8 * v213))
                {
                  *v208 = (_QWORD *)*v212;
                  v214 = 8 * v213;
                  *v212 = **(_QWORD **)(v467 + v214);
                  **(_QWORD **)(v467 + v214) = v212;
                }
                else
                {
                  *(_QWORD *)(v467 + 8 * v213) = v208;
                  v208 = (_QWORD **)v212;
                  v211 = v213;
                }
              }
              goto LABEL_371;
            }
            if (v209 >= prime)
              v209 %= prime;
            *(_QWORD *)(v467 + 8 * v209) = &v468;
            v215 = *v208;
            if (!*v208)
            {
LABEL_371:
              v218 = *(_QWORD **)&__p[16];
              if (!*(_QWORD *)&__p[16])
                goto LABEL_374;
              do
              {
LABEL_372:
                std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,BOOL> const&>((uint64_t)&v467, (uint64_t)(v218 + 2), (uint64_t)(v218 + 2));
                v218 = (_QWORD *)*v218;
              }
              while (v218);
              v219 = *(uint64_t **)&__p[16];
              if (!*(_QWORD *)&__p[16])
                goto LABEL_374;
              while (1)
              {
                v222 = v485[0];
                v223 = v485[1];
                if (v485[0] != v485[1])
                  break;
LABEL_376:
                v219 = (uint64_t *)*v219;
                if (!v219)
                  goto LABEL_374;
              }
              while (1)
              {
                v224 = *((unsigned __int8 *)v219 + 39);
                if ((v224 & 0x80u) == 0)
                  v225 = *((unsigned __int8 *)v219 + 39);
                else
                  v225 = v219[3];
                v226 = *((unsigned __int8 *)v222 + 23);
                v227 = (char)v226;
                if ((v226 & 0x80u) != 0)
                  v226 = *((_QWORD *)v222 + 1);
                if (v225 != v226)
                  goto LABEL_382;
                v228 = v227 >= 0 ? v222 : *(MIL::Attributes::FlexibleShapeInfo **)v222;
                if ((v224 & 0x80) == 0)
                  break;
                if (!memcmp((const void *)v219[2], v228, v219[3]))
                  goto LABEL_399;
LABEL_382:
                v222 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v222 + 48);
                if (v222 == v223)
                  goto LABEL_376;
              }
              if (*((_BYTE *)v219 + 39))
              {
                v229 = (unsigned __int8 *)(v219 + 2);
                while (*v229 == *(unsigned __int8 *)v228)
                {
                  ++v229;
                  v228 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v228 + 1);
                  if (!--v224)
                    goto LABEL_399;
                }
                goto LABEL_382;
              }
LABEL_399:
              v230 = *((_BYTE *)v219 + 40);
              v500[0] = (__int128 *)((char *)v222 + 24);
              std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v467, (unsigned __int8 *)v222 + 24, (uint64_t)&std::piecewise_construct, v500)[40] = v230;
              v231 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(&v467, (unsigned __int8 *)v222);
              v232 = v231;
              if (v231)
              {
                v233 = *((_QWORD *)&v467 + 1);
                v234 = *((_QWORD *)v231 + 1);
                v235 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v467 + 8));
                v235.i16[0] = vaddlv_u8(v235);
                if (v235.u32[0] > 1uLL)
                {
                  if (v234 >= *((_QWORD *)&v467 + 1))
                    v234 %= *((_QWORD *)&v467 + 1);
                }
                else
                {
                  v234 &= *((_QWORD *)&v467 + 1) - 1;
                }
                v236 = *(unsigned __int8 **)(v467 + 8 * v234);
                do
                {
                  v237 = v236;
                  v236 = *(unsigned __int8 **)v236;
                }
                while (v236 != v231);
                if (v237 == (unsigned __int8 *)&v468)
                  goto LABEL_417;
                v238 = *((_QWORD *)v237 + 1);
                if (v235.u32[0] > 1uLL)
                {
                  if (v238 >= *((_QWORD *)&v467 + 1))
                    v238 %= *((_QWORD *)&v467 + 1);
                }
                else
                {
                  v238 &= *((_QWORD *)&v467 + 1) - 1;
                }
                if (v238 != v234)
                {
LABEL_417:
                  if (!*(_QWORD *)v231)
                    goto LABEL_418;
                  v239 = *(_QWORD *)(*(_QWORD *)v231 + 8);
                  if (v235.u32[0] > 1uLL)
                  {
                    if (v239 >= *((_QWORD *)&v467 + 1))
                      v239 %= *((_QWORD *)&v467 + 1);
                  }
                  else
                  {
                    v239 &= *((_QWORD *)&v467 + 1) - 1;
                  }
                  if (v239 != v234)
LABEL_418:
                    *(_QWORD *)(v467 + 8 * v234) = 0;
                }
                v240 = *(_QWORD *)v231;
                if (*(_QWORD *)v231)
                {
                  v241 = *(_QWORD *)(v240 + 8);
                  if (v235.u32[0] > 1uLL)
                  {
                    if (v241 >= v233)
                      v241 %= v233;
                  }
                  else
                  {
                    v241 &= v233 - 1;
                  }
                  if (v241 != v234)
                  {
                    *(_QWORD *)(v467 + 8 * v241) = v237;
                    v240 = *(_QWORD *)v231;
                  }
                }
                *(_QWORD *)v237 = v240;
                *(_QWORD *)v231 = 0;
                --*((_QWORD *)&v468 + 1);
                if ((char)v231[39] < 0)
                  operator delete(*((void **)v231 + 2));
                operator delete(v232);
              }
              goto LABEL_382;
            }
            while (1)
            {
              v217 = v215[1];
              if (v217 >= prime)
                v217 %= prime;
              if (v217 == v209)
                goto LABEL_365;
              if (*(_QWORD *)(v467 + 8 * v217))
              {
                *v208 = (_QWORD *)*v215;
                v216 = 8 * v217;
                *v215 = **(_QWORD **)(v467 + v216);
                **(_QWORD **)(v467 + v216) = v215;
                v215 = v208;
LABEL_365:
                v208 = (_QWORD **)v215;
                v215 = (_QWORD *)*v215;
                if (!v215)
                  goto LABEL_371;
              }
              else
              {
                *(_QWORD *)(v467 + 8 * v217) = v208;
                v208 = (_QWORD **)v215;
                v215 = (_QWORD *)*v215;
                v209 = v217;
                if (!v215)
                  goto LABEL_371;
              }
            }
          }
          if ((*(_QWORD *)&__p[8] & (*(_QWORD *)&__p[8] - 1)) != 0)
          {
            prime = std::__next_prime(*(size_t *)&__p[8]);
            v197 = *(int8x8_t *)((char *)&v467 + 8);
            v198 = prime >= *((_QWORD *)&v467 + 1);
            if (prime > *((_QWORD *)&v467 + 1))
              goto LABEL_346;
          }
          else
          {
            v197 = 0;
            v198 = 1;
            if (*(_QWORD *)&__p[8])
            {
LABEL_346:
              if (prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              goto LABEL_347;
            }
          }
          if (v198)
            goto LABEL_371;
          v199 = vcvtps_u32_f32((float)*((unint64_t *)&v468 + 1) / v469);
          if (*(_QWORD *)&v197 < 3uLL
            || (v200 = (uint8x8_t)vcnt_s8(v197), v200.i16[0] = vaddlv_u8(v200), v200.u32[0] > 1uLL))
          {
            v199 = std::__next_prime(v199);
          }
          else
          {
            v201 = 1 << -(char)__clz(v199 - 1);
            if (v199 >= 2)
              v199 = v201;
          }
          if (prime <= v199)
            prime = v199;
          if (prime >= *(_QWORD *)&v197)
            goto LABEL_371;
          if (!prime)
          {
            v279 = (void *)v467;
            *(_QWORD *)&v467 = 0;
            if (v279)
              operator delete(v279);
            *((_QWORD *)&v467 + 1) = 0;
            v218 = *(_QWORD **)&__p[16];
            if (!*(_QWORD *)&__p[16])
            {
LABEL_374:
              (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)a1 + 40))(a1);
              E5Common::Utils::MILDictFromCpp<std::string,BOOL>((uint64_t)&v467, (void **)&v466);
              v464 = operator new(0x20uLL);
              v465 = xmmword_191A7C2C0;
              strcpy((char *)v464, "NeuralEngineOptimizedIOBuffer");
              v462 = v466;
              if (v466)
              {
                v220 = (std::__shared_weak_count *)operator new();
                v221 = v466;
                v220->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C50;
                v220->__shared_owners_ = 0;
                v220->__shared_weak_owners_ = 0;
                v220[1].__vftable = v221;
              }
              else
              {
                v220 = 0;
              }
              v463 = v220;
              v466 = 0;
              MIL::Builder::FunctionBuilder::SetAttribute();
              v242 = v463;
              if (!v463)
                goto LABEL_431;
              v243 = (unint64_t *)&v463->__shared_owners_;
              do
                v244 = __ldaxr(v243);
              while (__stlxr(v244 - 1, v243));
              if (!v244)
              {
                ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                std::__shared_weak_count::__release_weak(v242);
                if ((SHIBYTE(v465) & 0x80000000) == 0)
                {
LABEL_433:
                  MIL::Builder::FunctionBuilder::CreateFunction(v474);
                  (*(void (**)(uint64_t, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v461 + 184))(v461, a1);
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, MIL::Attributes::FlexibleShapeInfo **))(*(_QWORD *)v461 + 224))(&v460, v461, v485);
                  v500[0] = (__int128 *)v487;
                  v245 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v497, (unsigned __int8 *)v487, (uint64_t)&std::piecewise_construct, v500);
                  v246 = v460;
                  if (v460)
                  {
                    v247 = (_QWORD *)operator new();
                    v248 = v460;
                    *v247 = &unk_1E2DC2E10;
                    v247[1] = 0;
                    v247[2] = 0;
                    v247[3] = v248;
                    v460 = 0;
                    v249 = (std::__shared_weak_count *)*((_QWORD *)v245 + 6);
                    *((_QWORD *)v245 + 5) = v246;
                    *((_QWORD *)v245 + 6) = v247;
                    if (!v249)
                      goto LABEL_440;
                  }
                  else
                  {
                    v460 = 0;
                    v249 = (std::__shared_weak_count *)*((_QWORD *)v245 + 6);
                    *((_QWORD *)v245 + 5) = 0;
                    *((_QWORD *)v245 + 6) = 0;
                    if (!v249)
                      goto LABEL_440;
                  }
                  v250 = (unint64_t *)&v249->__shared_owners_;
                  do
                    v251 = __ldaxr(v250);
                  while (__stlxr(v251 - 1, v250));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                    std::__shared_weak_count::__release_weak(v249);
                    v252 = v460;
                    v460 = 0;
                    if (!v252)
                    {
LABEL_442:
                      v253 = v461;
                      v461 = 0;
                      if (v253)
                        (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
                      v254 = v466;
                      v466 = 0;
                      if (v254)
                        (*((void (**)(std::__shared_weak_count_vtbl *))v254->~__shared_weak_count + 1))(v254);
                      v255 = (void **)v468;
                      if ((_QWORD)v468)
                      {
                        do
                        {
                          v265 = (void **)*v255;
                          if (*((char *)v255 + 39) < 0)
                            operator delete(v255[2]);
                          operator delete(v255);
                          v255 = v265;
                        }
                        while (v265);
                      }
                      v256 = (void *)v467;
                      *(_QWORD *)&v467 = 0;
                      if (v256)
                        operator delete(v256);
                      v257 = *(void ***)&__p[16];
                      if (*(_QWORD *)&__p[16])
                      {
                        do
                        {
                          v266 = (void **)*v257;
                          if (*((char *)v257 + 39) < 0)
                            operator delete(v257[2]);
                          operator delete(v257);
                          v257 = v266;
                        }
                        while (v266);
                      }
                      v258 = *(void **)__p;
                      *(_QWORD *)__p = 0;
                      if (v258)
                        operator delete(v258);
                      v204 = v474;
                      v474 = 0;
                      if (v204)
                      {
LABEL_453:
                        (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v204 + 8))(v204);
                        goto LABEL_454;
                      }
                      goto LABEL_454;
                    }
LABEL_441:
                    (*(void (**)(uint64_t))(*(_QWORD *)v252 + 8))(v252);
                    goto LABEL_442;
                  }
LABEL_440:
                  v252 = v460;
                  v460 = 0;
                  if (!v252)
                    goto LABEL_442;
                  goto LABEL_441;
                }
              }
              else
              {
LABEL_431:
                if ((SHIBYTE(v465) & 0x80000000) == 0)
                  goto LABEL_433;
              }
              operator delete(v464);
              goto LABEL_433;
            }
            goto LABEL_372;
          }
          goto LABEL_346;
        }
        if (v475)
          goto LABEL_299;
LABEL_312:
        (*(void (**)(__int128 *__return_ptr, uint64_t, MIL::Attributes::FlexibleShapeInfo **))(*(_QWORD *)v479 + 224))(&v467, v479, v485);
        *(_QWORD *)__p = v487;
        v187 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v497, (unsigned __int8 *)v487, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        v188 = v467;
        if ((_QWORD)v467)
        {
          v189 = (_QWORD *)operator new();
          v190 = v467;
          *v189 = &unk_1E2DC2E10;
          v189[1] = 0;
          v189[2] = 0;
          v189[3] = v190;
          *(_QWORD *)&v467 = 0;
          v191 = (std::__shared_weak_count *)*((_QWORD *)v187 + 6);
          *((_QWORD *)v187 + 5) = v188;
          *((_QWORD *)v187 + 6) = v189;
          if (!v191)
            goto LABEL_337;
        }
        else
        {
          *(_QWORD *)&v467 = 0;
          v191 = (std::__shared_weak_count *)*((_QWORD *)v187 + 6);
          *((_QWORD *)v187 + 5) = 0;
          *((_QWORD *)v187 + 6) = 0;
          if (!v191)
            goto LABEL_337;
        }
        v202 = (unint64_t *)&v191->__shared_owners_;
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (v203)
        {
LABEL_337:
          v204 = (MIL::Builder::FunctionBuilder *)v467;
          *(_QWORD *)&v467 = 0;
          if (v204)
            goto LABEL_453;
          goto LABEL_454;
        }
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
        v204 = (MIL::Builder::FunctionBuilder *)v467;
        *(_QWORD *)&v467 = 0;
        if (v204)
          goto LABEL_453;
LABEL_454:
        *(_QWORD *)__p = v487;
        v259 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v491, (uint64_t)v487, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        v260 = v259;
        v261 = (void **)(v259 + 5);
        v262 = v259[5];
        if (v262)
        {
          v263 = v259[6];
          v264 = (void *)v259[5];
          if (v263 == v262)
          {
LABEL_469:
            v260[6] = v262;
            operator delete(v264);
            *v261 = 0;
            v261[1] = 0;
            v261[2] = 0;
            goto LABEL_470;
          }
          while (1)
          {
            if (*(char *)(v263 - 1) < 0)
            {
              operator delete(*(void **)(v263 - 24));
              if ((*(char *)(v263 - 25) & 0x80000000) == 0)
                goto LABEL_464;
LABEL_467:
              operator delete(*(void **)(v263 - 48));
              v263 -= 48;
              if (v263 == v262)
              {
LABEL_468:
                v264 = *v261;
                goto LABEL_469;
              }
            }
            else
            {
              if (*(char *)(v263 - 25) < 0)
                goto LABEL_467;
LABEL_464:
              v263 -= 48;
              if (v263 == v262)
                goto LABEL_468;
            }
          }
        }
LABEL_470:
        *(_OWORD *)(v260 + 5) = *(_OWORD *)v485;
        v260[7] = (uint64_t)v486;
        v486 = 0;
        v485[1] = 0;
        v485[0] = 0;
        v267 = v476;
        if (!v476)
          goto LABEL_474;
        v268 = (unint64_t *)&v476->__shared_owners_;
        do
          v269 = __ldaxr(v268);
        while (__stlxr(v269 - 1, v268));
        if (!v269)
        {
          ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
          std::__shared_weak_count::__release_weak(v267);
          v270 = (void **)v477;
          if (!v477)
            goto LABEL_482;
        }
        else
        {
LABEL_474:
          v270 = (void **)v477;
          if (!v477)
            goto LABEL_482;
        }
        v271 = v478;
        v272 = v270;
        if (v478 != v270)
        {
          do
          {
            if (*((char *)v271 - 1) < 0)
              operator delete(*(v271 - 3));
            v271 -= 3;
          }
          while (v271 != v270);
          v272 = v477;
        }
        v478 = v270;
        operator delete(v272);
LABEL_482:
        v273 = v480;
        if (!v480)
          goto LABEL_486;
        v274 = (unint64_t *)&v480->__shared_owners_;
        do
          v275 = __ldaxr(v274);
        while (__stlxr(v275 - 1, v274));
        if (v275)
        {
LABEL_486:
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v482, v483);
          v276 = v485[0];
          if (!v485[0])
            goto LABEL_496;
LABEL_487:
          v277 = v485[1];
          v278 = v276;
          if (v485[1] == v276)
          {
LABEL_495:
            v485[1] = v276;
            operator delete(v278);
            goto LABEL_496;
          }
          while (1)
          {
            if (*((char *)v277 - 1) < 0)
            {
              operator delete(*((void **)v277 - 3));
              if ((*((char *)v277 - 25) & 0x80000000) == 0)
                goto LABEL_490;
LABEL_493:
              operator delete(*((void **)v277 - 6));
              v277 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v277 - 48);
              if (v277 == v276)
              {
LABEL_494:
                v278 = v485[0];
                goto LABEL_495;
              }
            }
            else
            {
              if (*((char *)v277 - 25) < 0)
                goto LABEL_493;
LABEL_490:
              v277 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v277 - 48);
              if (v277 == v276)
                goto LABEL_494;
            }
          }
        }
        ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
        std::__shared_weak_count::__release_weak(v273);
        std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v482, v483);
        v276 = v485[0];
        if (v485[0])
          goto LABEL_487;
LABEL_496:
        if (v488 < 0)
          operator delete(v487[0]);
LABEL_46:
        v35 = v455 + 2;
        v34 = v453;
      }
      v280 = v490;
      if (v490)
      {
        v281 = (unint64_t *)&v490->__shared_owners_;
        do
          v282 = __ldaxr(v281);
        while (__stlxr(v282 - 1, v281));
        if (!v282)
        {
          ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
          std::__shared_weak_count::__release_weak(v280);
        }
      }
      v10 = v450 + 24;
    }
    while (v450 + 24 != v449);
  }
  for (j = *(unsigned __int8 **)((*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)a1 + 72))(a1)
                                + 16); j; j = *(unsigned __int8 **)j)
  {
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v497, (uint64_t)(j + 16)))
    {
      continue;
    }
    (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)j + 5) + 232))(&v467);
    *(_QWORD *)__p = j + 16;
    v284 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v497, j + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v285 = v467;
    if ((_QWORD)v467)
    {
      v286 = (_QWORD *)operator new();
      v287 = v467;
      *v286 = &unk_1E2DC2E10;
      v286[1] = 0;
      v286[2] = 0;
      v286[3] = v287;
      *(_QWORD *)&v467 = 0;
      v288 = (std::__shared_weak_count *)*((_QWORD *)v284 + 6);
      *((_QWORD *)v284 + 5) = v285;
      *((_QWORD *)v284 + 6) = v286;
      if (v288)
        goto LABEL_525;
    }
    else
    {
      *(_QWORD *)&v467 = 0;
      v288 = (std::__shared_weak_count *)*((_QWORD *)v284 + 6);
      *((_QWORD *)v284 + 5) = 0;
      *((_QWORD *)v284 + 6) = 0;
      if (v288)
      {
LABEL_525:
        v289 = (unint64_t *)&v288->__shared_owners_;
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
          v291 = v467;
          *(_QWORD *)&v467 = 0;
          if (!v291)
            continue;
LABEL_529:
          (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
          continue;
        }
      }
    }
    v291 = v467;
    *(_QWORD *)&v467 = 0;
    if (v291)
      goto LABEL_529;
  }
  v292 = (unsigned __int8 *)v492;
  if ((_QWORD)v492)
  {
LABEL_535:
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)a1 + 48))(__p);
    *(_QWORD *)&v467 = v292 + 16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v497, v292 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v467);
    MIL::Attributes::FlexibleShapeInfo::Make();
    v293 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v294 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v295 = __ldaxr(v294);
      while (__stlxr(v295 - 1, v294));
      if (!v295)
      {
        ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
        std::__shared_weak_count::__release_weak(v293);
      }
    }
    MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(v485[0]);
    v297 = *(_QWORD *)__p;
    v296 = *(std::__shared_weak_count **)&__p[8];
    if (!*(_QWORD *)&__p[8])
      goto LABEL_544;
    v298 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
      if (!v297)
        goto LABEL_613;
    }
    else
    {
LABEL_544:
      if (!v297)
        goto LABEL_613;
    }
    MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(v485[0]);
    std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)__p, v467);
    v300 = (std::__shared_weak_count *)*((_QWORD *)&v467 + 1);
    if (*((_QWORD *)&v467 + 1))
    {
      v301 = (unint64_t *)(*((_QWORD *)&v467 + 1) + 8);
      do
        v302 = __ldaxr(v301);
      while (__stlxr(v302 - 1, v301));
      if (!v302)
      {
        ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
        std::__shared_weak_count::__release_weak(v300);
      }
    }
    v304 = (std::string *)*((_QWORD *)v292 + 5);
    v303 = (std::string *)*((_QWORD *)v292 + 6);
    while (1)
    {
      if (v304 == v303)
      {
        MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes();
        v326 = *(char **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          do
          {
            v337 = *(char **)v326;
            v338 = (void *)*((_QWORD *)v326 + 5);
            if (v338)
            {
              *((_QWORD *)v326 + 6) = v338;
              operator delete(v338);
            }
            if (v326[39] < 0)
              operator delete(*((void **)v326 + 2));
            operator delete(v326);
            v326 = v337;
          }
          while (v337);
        }
        v327 = *(void **)__p;
        *(_QWORD *)__p = 0;
        if (v327)
          operator delete(v327);
LABEL_613:
        MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(v485[0]);
        v329 = *(_QWORD *)__p;
        v328 = *(std::__shared_weak_count **)&__p[8];
        if (!*(_QWORD *)&__p[8])
          goto LABEL_617;
        v330 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v331 = __ldaxr(v330);
        while (__stlxr(v331 - 1, v330));
        if (!v331)
        {
          ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
          std::__shared_weak_count::__release_weak(v328);
          if (!v329)
            goto LABEL_691;
        }
        else
        {
LABEL_617:
          if (!v329)
            goto LABEL_691;
        }
        MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(v485[0]);
        std::unordered_map<std::string,std::vector<std::pair<int,int>>>::unordered_map((uint64_t)__p, v467);
        v332 = (std::__shared_weak_count *)*((_QWORD *)&v467 + 1);
        if (*((_QWORD *)&v467 + 1))
        {
          v333 = (unint64_t *)(*((_QWORD *)&v467 + 1) + 8);
          do
            v334 = __ldaxr(v333);
          while (__stlxr(v334 - 1, v333));
          if (!v334)
          {
            ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
            std::__shared_weak_count::__release_weak(v332);
          }
        }
        v336 = (const std::string *)*((_QWORD *)v292 + 5);
        v335 = (const std::string *)*((_QWORD *)v292 + 6);
        while (2)
        {
          if (v336 != v335)
          {
            v339 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v336);
            if (!v339)
              goto LABEL_630;
            v340 = *(_QWORD *)&__p[8];
            v341 = v339[1];
            v342 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]);
            v342.i16[0] = vaddlv_u8(v342);
            if (v342.u32[0] > 1uLL)
            {
              if (v341 >= *(_QWORD *)&__p[8])
                v341 %= *(_QWORD *)&__p[8];
            }
            else
            {
              v341 &= *(_QWORD *)&__p[8] - 1;
            }
            v343 = *(uint64_t **)(*(_QWORD *)__p + 8 * v341);
            do
            {
              v344 = v343;
              v343 = (uint64_t *)*v343;
            }
            while (v343 != v339);
            if (v344 == (uint64_t *)&__p[16])
              goto LABEL_650;
            v345 = v344[1];
            if (v342.u32[0] > 1uLL)
            {
              if (v345 >= *(_QWORD *)&__p[8])
                v345 %= *(_QWORD *)&__p[8];
            }
            else
            {
              v345 &= *(_QWORD *)&__p[8] - 1;
            }
            if (v345 != v341)
            {
LABEL_650:
              if (!*v339)
                goto LABEL_651;
              v346 = *(_QWORD *)(*v339 + 8);
              if (v342.u32[0] > 1uLL)
              {
                if (v346 >= *(_QWORD *)&__p[8])
                  v346 %= *(_QWORD *)&__p[8];
              }
              else
              {
                v346 &= *(_QWORD *)&__p[8] - 1;
              }
              if (v346 != v341)
LABEL_651:
                *(_QWORD *)(*(_QWORD *)__p + 8 * v341) = 0;
            }
            v347 = *v339;
            if (*v339)
            {
              v348 = *(_QWORD *)(v347 + 8);
              if (v342.u32[0] > 1uLL)
              {
                if (v348 >= v340)
                  v348 %= v340;
              }
              else
              {
                v348 &= v340 - 1;
              }
              if (v348 != v341)
              {
                *(_QWORD *)(*(_QWORD *)__p + 8 * v348) = v344;
                v347 = *v339;
              }
            }
            *v344 = v347;
            *v339 = 0;
            --*(_QWORD *)&__p[24];
            *(_QWORD *)&v467 = v339;
            BYTE9(v467) = 1;
            std::string::operator=((std::string *)(v339 + 2), v336 + 1);
            v349 = v467;
            if (!(_QWORD)v467)
              goto LABEL_630;
            v350 = *(char *)(v467 + 39);
            if (v350 >= 0)
              v351 = (uint64_t *)(v467 + 16);
            else
              v351 = *(uint64_t **)(v467 + 16);
            if (v350 >= 0)
              v352 = *(unsigned __int8 *)(v467 + 39);
            else
              v352 = *(_QWORD *)(v467 + 24);
            v353 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v487, v351, v352);
            *(_QWORD *)(v349 + 8) = v353;
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)__p, v353, (unsigned __int8 **)(v349 + 16)))
            {
              if (v349)
              {
                v354 = *(void **)(v349 + 40);
                if (v354)
                {
                  *(_QWORD *)(v349 + 48) = v354;
                  operator delete(v354);
                }
                if (*(char *)(v349 + 39) < 0)
                  operator delete(*(void **)(v349 + 16));
                operator delete((void *)v349);
              }
LABEL_630:
              v336 += 2;
              continue;
            }
            v355 = *(_QWORD *)&__p[8];
            v356 = *(_QWORD *)(v349 + 8);
            v357 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]);
            v357.i16[0] = vaddlv_u8(v357);
            if (v357.u32[0] > 1uLL)
            {
              if (v356 >= *(_QWORD *)&__p[8])
                v356 %= *(_QWORD *)&__p[8];
            }
            else
            {
              v356 &= *(_QWORD *)&__p[8] - 1;
            }
            v358 = *(_QWORD **)(*(_QWORD *)__p + 8 * v356);
            if (v358)
            {
              *(_QWORD *)v349 = *v358;
              goto LABEL_684;
            }
            *(_QWORD *)v349 = *(_QWORD *)&__p[16];
            *(_QWORD *)&__p[16] = v349;
            *(_QWORD *)(*(_QWORD *)__p + 8 * v356) = &__p[16];
            if (*(_QWORD *)v349)
            {
              v359 = *(_QWORD *)(*(_QWORD *)v349 + 8);
              if (v357.u32[0] > 1uLL)
              {
                if (v359 >= v355)
                  v359 %= v355;
              }
              else
              {
                v359 &= v355 - 1;
              }
              v358 = (_QWORD *)(*(_QWORD *)__p + 8 * v359);
LABEL_684:
              *v358 = v349;
            }
            ++*(_QWORD *)&__p[24];
            if (BYTE9(v467))
              BYTE9(v467) = 0;
            goto LABEL_630;
          }
          break;
        }
        MIL::Attributes::FlexibleShapeInfo::SetRangeShapes();
        v360 = *(char **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          do
          {
            v418 = *(char **)v360;
            v419 = (void *)*((_QWORD *)v360 + 5);
            if (v419)
            {
              *((_QWORD *)v360 + 6) = v419;
              operator delete(v419);
            }
            if (v360[39] < 0)
              operator delete(*((void **)v360 + 2));
            operator delete(v360);
            v360 = v418;
          }
          while (v418);
        }
        v361 = *(void **)__p;
        *(_QWORD *)__p = 0;
        if (v361)
          operator delete(v361);
LABEL_691:
        EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v485[0]);
        std::unordered_map<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::unordered_map((uint64_t)&v467, EnumeratedShapes);
        v363 = (uint64_t *)v468;
        if (!(_QWORD)v468)
        {
LABEL_692:
          (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)a1 + 48))(__p);
          v487[0] = (__int128 *)(v292 + 16);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v497, v292 + 16, (uint64_t)&std::piecewise_construct, v487);
          MIL::Attributes::FlexibleShapeInfo::Rewrite();
          v487[0] = (__int128 *)(v292 + 16);
          v364 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v497, v292 + 16, (uint64_t)&std::piecewise_construct, v487);
          v365 = v482;
          if (v482)
          {
            v366 = (_QWORD *)operator new();
            v367 = v482;
            *v366 = &unk_1E2DC2E10;
            v366[1] = 0;
            v366[2] = 0;
            v366[3] = v367;
            v482 = 0;
            v368 = (std::__shared_weak_count *)*((_QWORD *)v364 + 6);
            *((_QWORD *)v364 + 5) = v365;
            *((_QWORD *)v364 + 6) = v366;
            if (!v368)
              goto LABEL_828;
          }
          else
          {
            v482 = 0;
            v368 = (std::__shared_weak_count *)*((_QWORD *)v364 + 6);
            *((_QWORD *)v364 + 5) = 0;
            *((_QWORD *)v364 + 6) = 0;
            if (!v368)
              goto LABEL_828;
          }
          v420 = (unint64_t *)&v368->__shared_owners_;
          do
            v421 = __ldaxr(v420);
          while (__stlxr(v421 - 1, v420));
          if (v421)
          {
LABEL_828:
            v422 = v482;
            v482 = 0;
            if (v422)
              goto LABEL_829;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
            std::__shared_weak_count::__release_weak(v368);
            v422 = v482;
            v482 = 0;
            if (v422)
LABEL_829:
              (*((void (**)(char **))*v422 + 1))(v422);
          }
          v423 = *(std::__shared_weak_count **)&__p[8];
          if (!*(_QWORD *)&__p[8])
            goto LABEL_834;
          v424 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v425 = __ldaxr(v424);
          while (__stlxr(v425 - 1, v424));
          if (!v425)
          {
            ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
            std::__shared_weak_count::__release_weak(v423);
            v426 = (char *)v468;
            if ((_QWORD)v468)
              goto LABEL_848;
          }
          else
          {
LABEL_834:
            v426 = (char *)v468;
            if (!(_QWORD)v468)
              goto LABEL_835;
            do
            {
LABEL_848:
              v429 = *(char **)v426;
              v430 = (char *)*((_QWORD *)v426 + 7);
              if (v430)
              {
                do
                {
                  v432 = *(char **)v430;
                  v433 = (void *)*((_QWORD *)v430 + 5);
                  if (v433)
                  {
                    *((_QWORD *)v430 + 6) = v433;
                    operator delete(v433);
                  }
                  if (v430[39] < 0)
                    operator delete(*((void **)v430 + 2));
                  operator delete(v430);
                  v430 = v432;
                }
                while (v432);
              }
              v431 = (void *)*((_QWORD *)v426 + 5);
              *((_QWORD *)v426 + 5) = 0;
              if (v431)
                operator delete(v431);
              if (v426[39] < 0)
                operator delete(*((void **)v426 + 2));
              operator delete(v426);
              v426 = v429;
            }
            while (v429);
          }
LABEL_835:
          v427 = (void *)v467;
          *(_QWORD *)&v467 = 0;
          if (v427)
            operator delete(v427);
          v428 = v485[0];
          v485[0] = 0;
          if (v428)
          {
            MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v428);
            MEMORY[0x19401CD90]();
          }
          v292 = *(unsigned __int8 **)v292;
          if (!v292)
            goto LABEL_858;
          goto LABEL_535;
        }
        while (2)
        {
          if (*((char *)v363 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v363[2], v363[3]);
          }
          else
          {
            *(_OWORD *)__p = *((_OWORD *)v363 + 1);
            *(_QWORD *)&__p[16] = v363[4];
          }
          *(_OWORD *)&__p[24] = 0u;
          v458 = 0u;
          v459 = *((float *)v363 + 18);
          v369 = v363[6];
          if (v369 == 1)
          {
            v369 = 2;
            goto LABEL_717;
          }
          if ((v369 & (v369 - 1)) != 0)
          {
            v369 = std::__next_prime(v363[6]);
            v370 = *(int8x8_t *)&__p[32];
            v371 = v369 >= *(_QWORD *)&__p[32];
            if (v369 > *(_QWORD *)&__p[32])
              goto LABEL_716;
          }
          else
          {
            v370 = 0;
            v371 = 1;
            if (v369)
            {
LABEL_716:
              if (v369 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
LABEL_717:
              v375 = operator new(8 * v369);
              v376 = *(void **)&__p[24];
              *(_QWORD *)&__p[24] = v375;
              if (v376)
                operator delete(v376);
              v377 = 0;
              *(_QWORD *)&__p[32] = v369;
              do
                *(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v377++) = 0;
              while (v369 != v377);
              v378 = (_QWORD **)v458;
              if (!(_QWORD)v458)
                goto LABEL_741;
              v379 = *(_QWORD *)(v458 + 8);
              v380 = v369 - 1;
              if ((v369 & (v369 - 1)) == 0)
              {
                v381 = v379 & v380;
                *(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v381) = &v458;
                while (1)
                {
                  v382 = *v378;
                  if (!*v378)
                    break;
                  v383 = v382[1] & v380;
                  if (v383 == v381)
                  {
                    v378 = (_QWORD **)*v378;
                  }
                  else if (*(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v383))
                  {
                    *v378 = (_QWORD *)*v382;
                    v384 = 8 * v383;
                    *v382 = **(_QWORD **)(*(_QWORD *)&__p[24] + v384);
                    **(_QWORD **)(*(_QWORD *)&__p[24] + v384) = v382;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v383) = v378;
                    v378 = (_QWORD **)v382;
                    v381 = v383;
                  }
                }
                goto LABEL_741;
              }
              if (v379 >= v369)
                v379 %= v369;
              *(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v379) = &v458;
              v385 = *v378;
              if (!*v378)
              {
LABEL_741:
                k = (unsigned __int8 *)v363[7];
                if (k)
                  goto LABEL_742;
                goto LABEL_743;
              }
              while (1)
              {
LABEL_736:
                v387 = v385[1];
                if (v387 >= v369)
                  v387 %= v369;
                if (v387 == v379)
                  goto LABEL_735;
                if (*(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v387))
                  break;
                *(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v387) = v378;
                v378 = (_QWORD **)v385;
                v385 = (_QWORD *)*v385;
                v379 = v387;
                if (!v385)
                  goto LABEL_741;
              }
              *v378 = (_QWORD *)*v385;
              v386 = 8 * v387;
              *v385 = **(_QWORD **)(*(_QWORD *)&__p[24] + v386);
              **(_QWORD **)(*(_QWORD *)&__p[24] + v386) = v385;
              v385 = v378;
LABEL_735:
              v378 = (_QWORD **)v385;
              v385 = (_QWORD *)*v385;
              if (!v385)
                goto LABEL_741;
              goto LABEL_736;
            }
          }
          if (v371)
            goto LABEL_741;
          v372 = vcvtps_u32_f32((float)*((unint64_t *)&v458 + 1) / v459);
          if (*(_QWORD *)&v370 < 3uLL
            || (v373 = (uint8x8_t)vcnt_s8(v370), v373.i16[0] = vaddlv_u8(v373), v373.u32[0] > 1uLL))
          {
            v372 = std::__next_prime(v372);
          }
          else
          {
            v374 = 1 << -(char)__clz(v372 - 1);
            if (v372 >= 2)
              v372 = v374;
          }
          if (v369 <= v372)
            v369 = v372;
          if (v369 >= *(_QWORD *)&v370)
            goto LABEL_741;
          if (v369)
            goto LABEL_716;
          v417 = *(void **)&__p[24];
          *(_QWORD *)&__p[24] = 0;
          if (v417)
            operator delete(v417);
          *(_QWORD *)&__p[32] = 0;
          for (k = (unsigned __int8 *)v363[7]; k; k = *(unsigned __int8 **)k)
LABEL_742:
            std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>((uint64_t)&__p[24], k + 16, (__int128 *)k + 1);
LABEL_743:
          v389 = (std::string *)*((_QWORD *)v292 + 5);
          v390 = (std::string *)*((_QWORD *)v292 + 6);
          if (v389 == v390)
          {
LABEL_799:
            if ((__p[23] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v456, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            else
              v456 = *(std::string *)__p;
            MIL::Attributes::FlexibleShapeInfo::AddEnumeratedShapes();
            if (SHIBYTE(v456.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v456.__r_.__value_.__l.__data_);
              v413 = (char *)v458;
              if (!(_QWORD)v458)
                goto LABEL_806;
            }
            else
            {
              v413 = (char *)v458;
              if (!(_QWORD)v458)
                goto LABEL_806;
            }
            do
            {
              v415 = *(char **)v413;
              v416 = (void *)*((_QWORD *)v413 + 5);
              if (v416)
              {
                *((_QWORD *)v413 + 6) = v416;
                operator delete(v416);
              }
              if (v413[39] < 0)
                operator delete(*((void **)v413 + 2));
              operator delete(v413);
              v413 = v415;
            }
            while (v415);
LABEL_806:
            v414 = *(void **)&__p[24];
            *(_QWORD *)&__p[24] = 0;
            if (v414)
              operator delete(v414);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v363 = (uint64_t *)*v363;
            if (!v363)
              goto LABEL_692;
            continue;
          }
          break;
        }
        while (2)
        {
          while (2)
          {
            v391 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(&__p[24], (unsigned __int8 *)v389);
            v392 = v391;
            if (!v391)
              goto LABEL_746;
            v393 = *(_QWORD *)&__p[32];
            v394 = *((_QWORD *)v391 + 1);
            v395 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[32]);
            v395.i16[0] = vaddlv_u8(v395);
            if (v395.u32[0] > 1uLL)
            {
              if (v394 >= *(_QWORD *)&__p[32])
                v394 %= *(_QWORD *)&__p[32];
            }
            else
            {
              v394 &= *(_QWORD *)&__p[32] - 1;
            }
            v396 = *(unsigned __int8 **)(*(_QWORD *)&__p[24] + 8 * v394);
            do
            {
              v397 = v396;
              v396 = *(unsigned __int8 **)v396;
            }
            while (v396 != v391);
            if (v397 == (unsigned __int8 *)&v458)
              goto LABEL_765;
            v398 = *((_QWORD *)v397 + 1);
            if (v395.u32[0] > 1uLL)
            {
              if (v398 >= *(_QWORD *)&__p[32])
                v398 %= *(_QWORD *)&__p[32];
            }
            else
            {
              v398 &= *(_QWORD *)&__p[32] - 1;
            }
            if (v398 != v394)
            {
LABEL_765:
              if (!*(_QWORD *)v391)
                goto LABEL_766;
              v399 = *(_QWORD *)(*(_QWORD *)v391 + 8);
              if (v395.u32[0] > 1uLL)
              {
                if (v399 >= *(_QWORD *)&__p[32])
                  v399 %= *(_QWORD *)&__p[32];
              }
              else
              {
                v399 &= *(_QWORD *)&__p[32] - 1;
              }
              if (v399 != v394)
LABEL_766:
                *(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v394) = 0;
            }
            v400 = *(_QWORD *)v391;
            if (*(_QWORD *)v391)
            {
              v401 = *(_QWORD *)(v400 + 8);
              if (v395.u32[0] > 1uLL)
              {
                if (v401 >= v393)
                  v401 %= v393;
              }
              else
              {
                v401 &= v393 - 1;
              }
              if (v401 != v394)
              {
                *(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v401) = v397;
                v400 = *(_QWORD *)v391;
              }
            }
            *(_QWORD *)v397 = v400;
            *(_QWORD *)v391 = 0;
            v402 = (void **)(v391 + 16);
            --*((_QWORD *)&v458 + 1);
            std::string::operator=((std::string *)(v391 + 16), v389 + 1);
            v403 = (char)v392[39];
            if (v403 >= 0)
              v404 = (uint64_t *)(v392 + 16);
            else
              v404 = (uint64_t *)*((_QWORD *)v392 + 2);
            if (v403 >= 0)
              v405 = v392[39];
            else
              v405 = *((_QWORD *)v392 + 3);
            v406 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v487, v404, v405);
            *((_QWORD *)v392 + 1) = v406;
            if (std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)&__p[24], v406, (unsigned __int8 **)v392 + 2))
            {
              v407 = (void *)*((_QWORD *)v392 + 5);
              if (v407)
              {
                *((_QWORD *)v392 + 6) = v407;
                operator delete(v407);
              }
              if ((char)v392[39] < 0)
                operator delete(*v402);
              operator delete(v392);
LABEL_746:
              v389 += 2;
              if (v389 == v390)
                goto LABEL_799;
              continue;
            }
            break;
          }
          v408 = *(_QWORD *)&__p[32];
          v409 = *((_QWORD *)v392 + 1);
          v410 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[32]);
          v410.i16[0] = vaddlv_u8(v410);
          if (v410.u32[0] > 1uLL)
          {
            if (v409 >= *(_QWORD *)&__p[32])
              v409 %= *(_QWORD *)&__p[32];
          }
          else
          {
            v409 &= *(_QWORD *)&__p[32] - 1;
          }
          v411 = *(unsigned __int8 ***)(*(_QWORD *)&__p[24] + 8 * v409);
          if (v411)
          {
            *(_QWORD *)v392 = *v411;
            goto LABEL_797;
          }
          *(_QWORD *)v392 = v458;
          *(_QWORD *)&v458 = v392;
          *(_QWORD *)(*(_QWORD *)&__p[24] + 8 * v409) = &v458;
          if (*(_QWORD *)v392)
          {
            v412 = *(_QWORD *)(*(_QWORD *)v392 + 8);
            if (v410.u32[0] > 1uLL)
            {
              if (v412 >= v408)
                v412 %= v408;
            }
            else
            {
              v412 &= v408 - 1;
            }
            v411 = (unsigned __int8 **)(*(_QWORD *)&__p[24] + 8 * v412);
LABEL_797:
            *v411 = v392;
          }
          ++*((_QWORD *)&v458 + 1);
          v389 += 2;
          if (v389 == v390)
            goto LABEL_799;
          continue;
        }
      }
      v305 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(__p, (unsigned __int8 *)v304);
      if (v305)
      {
        v306 = *(_QWORD *)&__p[8];
        v307 = *((_QWORD *)v305 + 1);
        v308 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]);
        v308.i16[0] = vaddlv_u8(v308);
        if (v308.u32[0] > 1uLL)
        {
          if (v307 >= *(_QWORD *)&__p[8])
            v307 %= *(_QWORD *)&__p[8];
        }
        else
        {
          v307 &= *(_QWORD *)&__p[8] - 1;
        }
        v309 = *(unsigned __int8 **)(*(_QWORD *)__p + 8 * v307);
        do
        {
          v310 = v309;
          v309 = *(unsigned __int8 **)v309;
        }
        while (v309 != v305);
        if (v310 == &__p[16])
          goto LABEL_572;
        v311 = *((_QWORD *)v310 + 1);
        if (v308.u32[0] > 1uLL)
        {
          if (v311 >= *(_QWORD *)&__p[8])
            v311 %= *(_QWORD *)&__p[8];
        }
        else
        {
          v311 &= *(_QWORD *)&__p[8] - 1;
        }
        if (v311 != v307)
        {
LABEL_572:
          if (!*(_QWORD *)v305)
            goto LABEL_573;
          v312 = *(_QWORD *)(*(_QWORD *)v305 + 8);
          if (v308.u32[0] > 1uLL)
          {
            if (v312 >= *(_QWORD *)&__p[8])
              v312 %= *(_QWORD *)&__p[8];
          }
          else
          {
            v312 &= *(_QWORD *)&__p[8] - 1;
          }
          if (v312 != v307)
LABEL_573:
            *(_QWORD *)(*(_QWORD *)__p + 8 * v307) = 0;
        }
        v313 = *(_QWORD *)v305;
        if (*(_QWORD *)v305)
        {
          v314 = *(_QWORD *)(v313 + 8);
          if (v308.u32[0] > 1uLL)
          {
            if (v314 >= v306)
              v314 %= v306;
          }
          else
          {
            v314 &= v306 - 1;
          }
          if (v314 != v307)
          {
            *(_QWORD *)(*(_QWORD *)__p + 8 * v314) = v310;
            v313 = *(_QWORD *)v305;
          }
        }
        *(_QWORD *)v310 = v313;
        *(_QWORD *)v305 = 0;
        --*(_QWORD *)&__p[24];
        *(_QWORD *)&v467 = v305;
        BYTE9(v467) = 1;
        std::string::operator=((std::string *)(v305 + 16), v304 + 1);
        v315 = v467;
        if ((_QWORD)v467)
          break;
      }
LABEL_552:
      v304 += 2;
    }
    v316 = *(char *)(v467 + 39);
    if (v316 >= 0)
      v317 = (uint64_t *)(v467 + 16);
    else
      v317 = *(uint64_t **)(v467 + 16);
    if (v316 >= 0)
      v318 = *(unsigned __int8 *)(v467 + 39);
    else
      v318 = *(_QWORD *)(v467 + 24);
    v319 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v487, v317, v318);
    *(_QWORD *)(v315 + 8) = v319;
    if (std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)__p, v319, (unsigned __int8 **)(v315 + 16)))
    {
      if (v315)
      {
        v320 = *(void **)(v315 + 40);
        if (v320)
        {
          *(_QWORD *)(v315 + 48) = v320;
          operator delete(v320);
        }
        if (*(char *)(v315 + 39) < 0)
          operator delete(*(void **)(v315 + 16));
        operator delete((void *)v315);
      }
      goto LABEL_552;
    }
    v321 = *(_QWORD *)&__p[8];
    v322 = *(_QWORD *)(v315 + 8);
    v323 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]);
    v323.i16[0] = vaddlv_u8(v323);
    if (v323.u32[0] > 1uLL)
    {
      if (v322 >= *(_QWORD *)&__p[8])
        v322 %= *(_QWORD *)&__p[8];
    }
    else
    {
      v322 &= *(_QWORD *)&__p[8] - 1;
    }
    v324 = *(_QWORD **)(*(_QWORD *)__p + 8 * v322);
    if (v324)
    {
      *(_QWORD *)v315 = *v324;
    }
    else
    {
      *(_QWORD *)v315 = *(_QWORD *)&__p[16];
      *(_QWORD *)&__p[16] = v315;
      *(_QWORD *)(*(_QWORD *)__p + 8 * v322) = &__p[16];
      if (!*(_QWORD *)v315)
        goto LABEL_607;
      v325 = *(_QWORD *)(*(_QWORD *)v315 + 8);
      if (v323.u32[0] > 1uLL)
      {
        if (v325 >= v321)
          v325 %= v321;
      }
      else
      {
        v325 &= v321 - 1;
      }
      v324 = (_QWORD *)(*(_QWORD *)__p + 8 * v325);
    }
    *v324 = v315;
LABEL_607:
    ++*(_QWORD *)&__p[24];
    if (BYTE9(v467))
      BYTE9(v467) = 0;
    goto LABEL_552;
  }
LABEL_858:
  (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, __int128 *))(*(_QWORD *)a1 + 88))(a1, &v497);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node((int)&v491, (char *)v492);
  v434 = (void *)v491;
  *(_QWORD *)&v491 = 0;
  if (v434)
    operator delete(v434);
  if (SHIBYTE(v496) < 0)
    operator delete(__dst);
  v435 = (void **)v498;
  if ((_QWORD)v498)
  {
    do
    {
      while (1)
      {
        v436 = (void **)*v435;
        v437 = (std::__shared_weak_count *)v435[6];
        if (v437)
        {
          v438 = (unint64_t *)&v437->__shared_owners_;
          do
            v439 = __ldaxr(v438);
          while (__stlxr(v439 - 1, v438));
          if (!v439)
          {
            ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
            std::__shared_weak_count::__release_weak(v437);
          }
        }
        if (*((char *)v435 + 39) < 0)
          break;
        operator delete(v435);
        v435 = v436;
        if (!v436)
          goto LABEL_872;
      }
      operator delete(v435[2]);
      operator delete(v435);
      v435 = v436;
    }
    while (v436);
  }
LABEL_872:
  v440 = (void *)v497;
  *(_QWORD *)&v497 = 0;
  if (v440)
    operator delete(v440);
}

